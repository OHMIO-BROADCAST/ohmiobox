
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016bcc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058cc  08016d9c  08016d9c  00026d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c668  0801c668  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  0801c668  0801c668  0002c668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c670  0801c670  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c670  0801c670  0002c670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c674  0801c674  0002c674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0801c678  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c8  0801c740  000300c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000168  0801c7e0  00030168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000afc0  20000208  0801c880  00030208  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000b1c8  0801c880  0003b1c8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002da46  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006b75  00000000  00000000  0005dc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001fe0  00000000  00000000  000647f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001e98  00000000  00000000  000667d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034e3d  00000000  00000000  00068670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033552  00000000  00000000  0009d4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a729  00000000  00000000  000d09ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001db128  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e8c  00000000  00000000  001db178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016d84 	.word	0x08016d84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08016d84 	.word	0x08016d84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
}
 80005cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ce:	f3bf 8f6f 	isb	sy
}
 80005d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <SCB_EnableICache+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableICache+0x48>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableICache+0x48>)
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SCB_EnableDCache+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800061e:	f3bf 8f4f 	dsb	sy
}
 8000622:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <SCB_EnableDCache+0x84>)
 8000626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800062a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0b5b      	lsrs	r3, r3, #13
 8000630:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000634:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800063e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	015a      	lsls	r2, r3, #5
 8000644:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000648:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064e:	4911      	ldr	r1, [pc, #68]	; (8000694 <SCB_EnableDCache+0x84>)
 8000650:	4313      	orrs	r3, r2
 8000652:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	60ba      	str	r2, [r7, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1ef      	bne.n	8000640 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	60fa      	str	r2, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1e5      	bne.n	8000636 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
}
 800066e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SCB_EnableDCache+0x84>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SCB_EnableDCache+0x84>)
 8000676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800067c:	f3bf 8f4f 	dsb	sy
}
 8000680:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000682:	f3bf 8f6f 	isb	sy
}
 8000686:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d013      	beq.n	80006d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00b      	beq.n	80006d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006c0:	e000      	b.n	80006c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0f9      	beq.n	80006c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
	int i =0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e009      	b.n	8000710 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffc7 	bl	8000698 <ITM_SendChar>
	for (i=0; i<len; i++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf1      	blt.n	80006fc <_write+0x16>
	return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_UART_RxCpltCallback>:
uint8_t tx_check[] = "9";
uint8_t tx_buff[] = "COMANDO 1";
uint8_t tx_buff2[] = "COMANDO 2";
uint8_t rx_buff[1];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart7, rx_buff, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	4905      	ldr	r1, [pc, #20]	; (8000744 <HAL_UART_RxCpltCallback+0x20>)
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <HAL_UART_RxCpltCallback+0x24>)
 8000732:	f006 fff3 	bl	800771c <HAL_UART_Receive_IT>
    processReceivedData(rx_buff);
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <HAL_UART_RxCpltCallback+0x20>)
 8000738:	f000 f808 	bl	800074c <processReceivedData>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200009ec 	.word	0x200009ec
 8000748:	20000308 	.word	0x20000308

0800074c <processReceivedData>:

void processReceivedData(uint8_t* data) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    if (*data == '9') {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b39      	cmp	r3, #57	; 0x39
 800075a:	d10c      	bne.n	8000776 <processReceivedData+0x2a>
        HAL_UART_Transmit_IT(&huart7, tx_check, strlen((char*)tx_check));
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <processReceivedData+0x34>)
 800075e:	f7ff fd57 	bl	8000210 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b29b      	uxth	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	4905      	ldr	r1, [pc, #20]	; (8000780 <processReceivedData+0x34>)
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <processReceivedData+0x38>)
 800076c:	f006 ff78 	bl	8007660 <HAL_UART_Transmit_IT>
        rx_buff[0] = 0;  // Restore the value of rx_buff to 0   
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <processReceivedData+0x3c>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
    }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000
 8000784:	20000308 	.word	0x20000308
 8000788:	200009ec 	.word	0x200009ec

0800078c <main>:

int main(void)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b08d      	sub	sp, #52	; 0x34
 8000790:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000792:	f000 fc97 	bl	80010c4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000796:	f7ff ff15 	bl	80005c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800079a:	f7ff ff39 	bl	8000610 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f002 fb53 	bl	8002e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f9e1 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a6:	f000 fbdf 	bl	8000f68 <MX_GPIO_Init>
  MX_DMA_Init();
 80007aa:	f000 fbb7 	bl	8000f1c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007ae:	f000 fb87 	bl	8000ec0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80007b2:	f000 fae5 	bl	8000d80 <MX_I2C2_Init>
  MX_ADC1_Init();
 80007b6:	f000 fa3f 	bl	8000c38 <MX_ADC1_Init>
  MX_ADC3_Init();
 80007ba:	f000 fa8f 	bl	8000cdc <MX_ADC3_Init>
  MX_LWIP_Init();
 80007be:	f008 fd67 	bl	8009290 <MX_LWIP_Init>
  MX_UART7_Init();
 80007c2:	f000 fb1d 	bl	8000e00 <MX_UART7_Init>
  MX_USART3_UART_Init();
 80007c6:	f000 fb4b 	bl	8000e60 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80007ca:	f000 fcc3 	bl	8001154 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 80007ce:	f001 fe0b 	bl	80023e8 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 80007d2:	f001 fe15 	bl	8002400 <ssd1306_OhmioMenuPrincipal>
  /* USER CODE BEGIN WHILE */
  uint32_t ipaddr;
  uint32_t netmask;
   char ip_str[16];
   char netmask_str[16];
   HAL_UART_Init(&huart7);
 80007d6:	4885      	ldr	r0, [pc, #532]	; (80009ec <main+0x260>)
 80007d8:	f006 fef4 	bl	80075c4 <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart7,rx_buff,1);
 80007dc:	2201      	movs	r2, #1
 80007de:	4984      	ldr	r1, [pc, #528]	; (80009f0 <main+0x264>)
 80007e0:	4882      	ldr	r0, [pc, #520]	; (80009ec <main+0x260>)
 80007e2:	f006 ff9b 	bl	800771c <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart7, tx_check, strlen((char*)tx_check));
 80007e6:	4883      	ldr	r0, [pc, #524]	; (80009f4 <main+0x268>)
 80007e8:	f7ff fd12 	bl	8000210 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	461a      	mov	r2, r3
 80007f2:	4980      	ldr	r1, [pc, #512]	; (80009f4 <main+0x268>)
 80007f4:	487d      	ldr	r0, [pc, #500]	; (80009ec <main+0x260>)
 80007f6:	f006 ff33 	bl	8007660 <HAL_UART_Transmit_IT>
/* 	HAL_UART_Transmit_IT(&huart7, tx_buff, 8
  );
	HAL_Delay(5000); */

	  //INICIALIZAMOS EL SPLASH
    ethernetif_input(&gnetif);
 80007fa:	487f      	ldr	r0, [pc, #508]	; (80009f8 <main+0x26c>)
 80007fc:	f008 fef8 	bl	80095f0 <ethernetif_input>
    sys_check_timeouts();
 8000800:	f010 f9de 	bl	8010bc0 <sys_check_timeouts>

    ipaddr = netif_ip4_addr(&gnetif);
 8000804:	4b7d      	ldr	r3, [pc, #500]	; (80009fc <main+0x270>)
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
    netmask = netif_ip4_netmask(&gnetif);
 8000808:	4b7d      	ldr	r3, [pc, #500]	; (8000a00 <main+0x274>)
 800080a:	623b      	str	r3, [r7, #32]

// Convertir la dirección IP en una cadena de caracteres
sprintf(ip_str, "%d.%d.%d.%d", (ipaddr & 0xff), ((ipaddr >> 8) & 0xff), ((ipaddr >> 16) & 0xff), ((ipaddr >> 24) & 0xff));
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	b2d9      	uxtb	r1, r3
 8000810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	b2dc      	uxtb	r4, r3
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	0c1b      	lsrs	r3, r3, #16
 800081a:	b2db      	uxtb	r3, r3
 800081c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800081e:	0e12      	lsrs	r2, r2, #24
 8000820:	f107 0010 	add.w	r0, r7, #16
 8000824:	9201      	str	r2, [sp, #4]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	4623      	mov	r3, r4
 800082a:	460a      	mov	r2, r1
 800082c:	4975      	ldr	r1, [pc, #468]	; (8000a04 <main+0x278>)
 800082e:	f015 f8fb 	bl	8015a28 <siprintf>

// Convertir la máscara de subred en una cadena de caracteres
sprintf(netmask_str, "%d.%d.%d.%d", (netmask & 0xff), ((netmask >> 8) & 0xff), ((netmask >> 16) & 0xff), ((netmask >> 24) & 0xff));
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	b2d9      	uxtb	r1, r3
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b2dc      	uxtb	r4, r3
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	0c1b      	lsrs	r3, r3, #16
 8000840:	b2db      	uxtb	r3, r3
 8000842:	6a3a      	ldr	r2, [r7, #32]
 8000844:	0e12      	lsrs	r2, r2, #24
 8000846:	4638      	mov	r0, r7
 8000848:	9201      	str	r2, [sp, #4]
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4623      	mov	r3, r4
 800084e:	460a      	mov	r2, r1
 8000850:	496c      	ldr	r1, [pc, #432]	; (8000a04 <main+0x278>)
 8000852:	f015 f8e9 	bl	8015a28 <siprintf>

printf("IP");
 8000856:	486c      	ldr	r0, [pc, #432]	; (8000a08 <main+0x27c>)
 8000858:	f015 f890 	bl	801597c <iprintf>
printf("GATEWAY");
 800085c:	486b      	ldr	r0, [pc, #428]	; (8000a0c <main+0x280>)
 800085e:	f015 f88d 	bl	801597c <iprintf>


	  HAL_ADC_Start(&hadc3);
 8000862:	486b      	ldr	r0, [pc, #428]	; (8000a10 <main+0x284>)
 8000864:	f002 fbbe 	bl	8002fe4 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc3, 10)==HAL_OK){
 8000868:	210a      	movs	r1, #10
 800086a:	4869      	ldr	r0, [pc, #420]	; (8000a10 <main+0x284>)
 800086c:	f002 fcbc 	bl	80031e8 <HAL_ADC_PollForConversion>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d112      	bne.n	800089c <main+0x110>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc3);
 8000876:	4866      	ldr	r0, [pc, #408]	; (8000a10 <main+0x284>)
 8000878:	f002 fd41 	bl	80032fe <HAL_ADC_GetValue>
 800087c:	4603      	mov	r3, r0
 800087e:	4a65      	ldr	r2, [pc, #404]	; (8000a14 <main+0x288>)
 8000880:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen, ip_str, netmask_str);
 8000882:	4b64      	ldr	r3, [pc, #400]	; (8000a14 <main+0x288>)
 8000884:	6818      	ldr	r0, [r3, #0]
 8000886:	4b64      	ldr	r3, [pc, #400]	; (8000a18 <main+0x28c>)
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	4b64      	ldr	r3, [pc, #400]	; (8000a1c <main+0x290>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	f107 0410 	add.w	r4, r7, #16
 8000892:	463b      	mov	r3, r7
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	4623      	mov	r3, r4
 8000898:	f001 fd3c 	bl	8002314 <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 700 && analog_value_keypad <= 950){
 800089c:	4b5d      	ldr	r3, [pc, #372]	; (8000a14 <main+0x288>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80008a4:	d348      	bcc.n	8000938 <main+0x1ac>
 80008a6:	4b5b      	ldr	r3, [pc, #364]	; (8000a14 <main+0x288>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f240 32b6 	movw	r2, #950	; 0x3b6
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d842      	bhi.n	8000938 <main+0x1ac>
        if(screen==1){
 80008b2:	4b5a      	ldr	r3, [pc, #360]	; (8000a1c <main+0x290>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d10d      	bne.n	80008d6 <main+0x14a>
          if (indexMenu==4){
 80008ba:	4b57      	ldr	r3, [pc, #348]	; (8000a18 <main+0x28c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d103      	bne.n	80008ca <main+0x13e>
            indexMenu=0;
 80008c2:	4b55      	ldr	r3, [pc, #340]	; (8000a18 <main+0x28c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	e036      	b.n	8000938 <main+0x1ac>
          }
          else{
            indexMenu++;
 80008ca:	4b53      	ldr	r3, [pc, #332]	; (8000a18 <main+0x28c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	4a51      	ldr	r2, [pc, #324]	; (8000a18 <main+0x28c>)
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	e030      	b.n	8000938 <main+0x1ac>
          }
        }else if(screen==4){
 80008d6:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <main+0x290>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d10d      	bne.n	80008fa <main+0x16e>
          if (indexMenu==4){
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <main+0x28c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d103      	bne.n	80008ee <main+0x162>
            indexMenu=0;
 80008e6:	4b4c      	ldr	r3, [pc, #304]	; (8000a18 <main+0x28c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	e024      	b.n	8000938 <main+0x1ac>
          }
          else{
            indexMenu++;
 80008ee:	4b4a      	ldr	r3, [pc, #296]	; (8000a18 <main+0x28c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a48      	ldr	r2, [pc, #288]	; (8000a18 <main+0x28c>)
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	e01e      	b.n	8000938 <main+0x1ac>
          }
        }else if(screen==6){
 80008fa:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <main+0x290>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d10d      	bne.n	800091e <main+0x192>
          if (indexMenu==4){
 8000902:	4b45      	ldr	r3, [pc, #276]	; (8000a18 <main+0x28c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b04      	cmp	r3, #4
 8000908:	d103      	bne.n	8000912 <main+0x186>
            indexMenu=0;
 800090a:	4b43      	ldr	r3, [pc, #268]	; (8000a18 <main+0x28c>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	e012      	b.n	8000938 <main+0x1ac>
          }
          else{
            indexMenu++;
 8000912:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <main+0x28c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a3f      	ldr	r2, [pc, #252]	; (8000a18 <main+0x28c>)
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	e00c      	b.n	8000938 <main+0x1ac>
          }
        }
        else{
          if (indexMenu==2){
 800091e:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <main+0x28c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d103      	bne.n	800092e <main+0x1a2>
            indexMenu=0;
 8000926:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <main+0x28c>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	e004      	b.n	8000938 <main+0x1ac>
          }
          else{
            indexMenu++;
 800092e:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <main+0x28c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	4a38      	ldr	r2, [pc, #224]	; (8000a18 <main+0x28c>)
 8000936:	6013      	str	r3, [r2, #0]
	   //screen=3 -> SETTINGS
	   //screen=4 -> BROADCAST
     //screen=5 -> CLOUD
     //screen=6 -> SERIAL

	      if(analog_value_keypad >= 0 && analog_value_keypad <= 100){
 8000938:	4b36      	ldr	r3, [pc, #216]	; (8000a14 <main+0x288>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b64      	cmp	r3, #100	; 0x64
 800093e:	f200 80ff 	bhi.w	8000b40 <main+0x3b4>
			//Select
	    	//Menu Principal
			if(screen==0){
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <main+0x290>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d125      	bne.n	8000996 <main+0x20a>
				if(indexMenu==0){
 800094a:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <main+0x28c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d108      	bne.n	8000964 <main+0x1d8>
					//option Dashboard
					screen=1;
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <main+0x290>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <main+0x28c>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 800095e:	f000 fc87 	bl	8001270 <ssd1306_UpdateScreen>
 8000962:	e018      	b.n	8000996 <main+0x20a>
				}else if (indexMenu==1){
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <main+0x28c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d108      	bne.n	800097e <main+0x1f2>
					//option Energy
					screen=2;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <main+0x290>)
 800096e:	2202      	movs	r2, #2
 8000970:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <main+0x28c>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000978:	f000 fc7a 	bl	8001270 <ssd1306_UpdateScreen>
 800097c:	e00b      	b.n	8000996 <main+0x20a>
				}else if (indexMenu==2){
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <main+0x28c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d107      	bne.n	8000996 <main+0x20a>
					screen=3;
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <main+0x290>)
 8000988:	2203      	movs	r2, #3
 800098a:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <main+0x28c>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000992:	f000 fc6d 	bl	8001270 <ssd1306_UpdateScreen>
				}
			}
			// Dashboard
				if(screen==1){
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <main+0x290>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d14c      	bne.n	8000a38 <main+0x2ac>
					if (indexMenu==0){
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <main+0x28c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d108      	bne.n	80009b8 <main+0x22c>
						//option RF
						screen=4;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <main+0x290>)
 80009a8:	2204      	movs	r2, #4
 80009aa:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <main+0x28c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 80009b2:	f000 fc5d 	bl	8001270 <ssd1306_UpdateScreen>
 80009b6:	e03f      	b.n	8000a38 <main+0x2ac>
					}else if (indexMenu==1){
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <main+0x28c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d108      	bne.n	80009d2 <main+0x246>
						//option CLOUD
						screen=5;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <main+0x290>)
 80009c2:	2205      	movs	r2, #5
 80009c4:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <main+0x28c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 80009cc:	f000 fc50 	bl	8001270 <ssd1306_UpdateScreen>
 80009d0:	e032      	b.n	8000a38 <main+0x2ac>
					}
					else if (indexMenu==3){
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <main+0x28c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d122      	bne.n	8000a20 <main+0x294>
						//option SERIAL
						screen=6;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <main+0x290>)
 80009dc:	2206      	movs	r2, #6
 80009de:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <main+0x28c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 80009e6:	f000 fc43 	bl	8001270 <ssd1306_UpdateScreen>
 80009ea:	e025      	b.n	8000a38 <main+0x2ac>
 80009ec:	20000308 	.word	0x20000308
 80009f0:	200009ec 	.word	0x200009ec
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000e00 	.word	0x20000e00
 80009fc:	20000e04 	.word	0x20000e04
 8000a00:	20000e08 	.word	0x20000e08
 8000a04:	08016d9c 	.word	0x08016d9c
 8000a08:	08016da8 	.word	0x08016da8
 8000a0c:	08016dac 	.word	0x08016dac
 8000a10:	2000026c 	.word	0x2000026c
 8000a14:	200009e8 	.word	0x200009e8
 8000a18:	200009e0 	.word	0x200009e0
 8000a1c:	200009e4 	.word	0x200009e4
					}
					else if (indexMenu==4){
 8000a20:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <main+0x3c4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d107      	bne.n	8000a38 <main+0x2ac>
						//option Atras back
						screen=0;
 8000a28:	4b4a      	ldr	r3, [pc, #296]	; (8000b54 <main+0x3c8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000a2e:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <main+0x3c4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000a34:	f000 fc1c 	bl	8001270 <ssd1306_UpdateScreen>
					}
				}
			// Energy
				if(screen==2){
 8000a38:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <main+0x3c8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d10f      	bne.n	8000a60 <main+0x2d4>
					if(indexMenu==0){
 8000a40:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <main+0x3c4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00b      	beq.n	8000a60 <main+0x2d4>
						//option power no hace nada
						//screen=1;
					}else if (indexMenu==2){
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <main+0x3c4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d107      	bne.n	8000a60 <main+0x2d4>
						//option Atras back
						screen=0;
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <main+0x3c8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <main+0x3c4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000a5c:	f000 fc08 	bl	8001270 <ssd1306_UpdateScreen>
					}
				}
			// Settings
			if(screen==3){
 8000a60:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <main+0x3c8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d10f      	bne.n	8000a88 <main+0x2fc>
				if(indexMenu==0){
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <main+0x3c4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00b      	beq.n	8000a88 <main+0x2fc>
					//option Version no hace nada
					//screen=1;
				}else if (indexMenu==2){
 8000a70:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <main+0x3c4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d107      	bne.n	8000a88 <main+0x2fc>
					//option Atras back
					screen=0;
 8000a78:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <main+0x3c8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000a7e:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <main+0x3c4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000a84:	f000 fbf4 	bl	8001270 <ssd1306_UpdateScreen>
				}
			}
      // BROADCAST
      if(screen==4){
 8000a88:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <main+0x3c8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d10f      	bne.n	8000ab0 <main+0x324>
        if(indexMenu==0){
 8000a90:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <main+0x3c4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00b      	beq.n	8000ab0 <main+0x324>
					//screen=1;
				}
        else if (indexMenu==4){
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <main+0x3c4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d107      	bne.n	8000ab0 <main+0x324>
					//option Atras back
					screen=1;
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <main+0x3c8>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <main+0x3c4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000aac:	f000 fbe0 	bl	8001270 <ssd1306_UpdateScreen>
				}
      }
      // CLOUD
      if(screen==5){
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <main+0x3c8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b05      	cmp	r3, #5
 8000ab6:	d10f      	bne.n	8000ad8 <main+0x34c>
        if(indexMenu==0){
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <main+0x3c4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <main+0x34c>
					//screen=1;
				}
        else if (indexMenu==2){
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <main+0x3c4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d107      	bne.n	8000ad8 <main+0x34c>
					//option Atras back
					screen=1;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <main+0x3c8>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <main+0x3c4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000ad4:	f000 fbcc 	bl	8001270 <ssd1306_UpdateScreen>
				}
      }

       // SERIAL / PRUEBAS DE COMUNICACIÓN
      if(screen==6){
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <main+0x3c8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b06      	cmp	r3, #6
 8000ade:	d12f      	bne.n	8000b40 <main+0x3b4>
        if(indexMenu==1){
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <main+0x3c4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d10d      	bne.n	8000b04 <main+0x378>
					//screen=1;
          HAL_UART_Transmit_IT(&huart7, tx_buff, strlen((char*)tx_buff));
 8000ae8:	481b      	ldr	r0, [pc, #108]	; (8000b58 <main+0x3cc>)
 8000aea:	f7ff fb91 	bl	8000210 <strlen>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	4918      	ldr	r1, [pc, #96]	; (8000b58 <main+0x3cc>)
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <main+0x3d0>)
 8000af8:	f006 fdb2 	bl	8007660 <HAL_UART_Transmit_IT>
          HAL_Delay(50);
 8000afc:	2032      	movs	r0, #50	; 0x32
 8000afe:	f002 fa09 	bl	8002f14 <HAL_Delay>
 8000b02:	e01d      	b.n	8000b40 <main+0x3b4>
				} else if(indexMenu==2){
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <main+0x3c4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d10d      	bne.n	8000b28 <main+0x39c>
					//screen=1;
          HAL_UART_Transmit_IT(&huart7, tx_buff2, strlen((char*)tx_buff2));
 8000b0c:	4814      	ldr	r0, [pc, #80]	; (8000b60 <main+0x3d4>)
 8000b0e:	f7ff fb7f 	bl	8000210 <strlen>
 8000b12:	4603      	mov	r3, r0
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	4911      	ldr	r1, [pc, #68]	; (8000b60 <main+0x3d4>)
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <main+0x3d0>)
 8000b1c:	f006 fda0 	bl	8007660 <HAL_UART_Transmit_IT>
          HAL_Delay(50);
 8000b20:	2032      	movs	r0, #50	; 0x32
 8000b22:	f002 f9f7 	bl	8002f14 <HAL_Delay>
 8000b26:	e00b      	b.n	8000b40 <main+0x3b4>
        }
        else if (indexMenu==4){
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <main+0x3c4>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d107      	bne.n	8000b40 <main+0x3b4>
					//option Atras back
					screen=1;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <main+0x3c8>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <main+0x3c4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000b3c:	f000 fb98 	bl	8001270 <ssd1306_UpdateScreen>
      }
	      }



	  HAL_ADC_Stop(&hadc3);
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <main+0x3d8>)
 8000b42:	f002 fb1d 	bl	8003180 <HAL_ADC_Stop>
	  HAL_Delay(50);
 8000b46:	2032      	movs	r0, #50	; 0x32
 8000b48:	f002 f9e4 	bl	8002f14 <HAL_Delay>
    ethernetif_input(&gnetif);
 8000b4c:	e655      	b.n	80007fa <main+0x6e>
 8000b4e:	bf00      	nop
 8000b50:	200009e0 	.word	0x200009e0
 8000b54:	200009e4 	.word	0x200009e4
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	20000308 	.word	0x20000308
 8000b60:	20000010 	.word	0x20000010
 8000b64:	2000026c 	.word	0x2000026c

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	2230      	movs	r2, #48	; 0x30
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f014 fef8 	bl	801596c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b8c:	f005 fc50 	bl	8006430 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <SystemClock_Config+0xc8>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <SystemClock_Config+0xc8>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <SystemClock_Config+0xc8>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <SystemClock_Config+0xcc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb0:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <SystemClock_Config+0xcc>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <SystemClock_Config+0xcc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bdc:	2348      	movs	r3, #72	; 0x48
 8000bde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000be4:	2303      	movs	r3, #3
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	4618      	mov	r0, r3
 8000bee:	f005 fc2f 	bl	8006450 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bf8:	f000 fa6d 	bl	80010d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2302      	movs	r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2102      	movs	r1, #2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f005 febd 	bl	8006998 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c24:	f000 fa57 	bl	80010d6 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3750      	adds	r7, #80	; 0x50
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40007000 	.word	0x40007000

08000c38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <MX_ADC1_Init+0x9c>)
 8000c4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <MX_ADC1_Init+0xa0>)
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c98:	f002 f960 	bl	8002f5c <HAL_ADC_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ca2:	f000 fa18 	bl	80010d6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000cb8:	f002 fb2e 	bl	8003318 <HAL_ADC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cc2:	f000 fa08 	bl	80010d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000224 	.word	0x20000224
 8000cd4:	40012000 	.word	0x40012000
 8000cd8:	0f000001 	.word	0x0f000001

08000cdc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000cee:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000cf0:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <MX_ADC3_Init+0x9c>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <MX_ADC3_Init+0xa0>)
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d3a:	480e      	ldr	r0, [pc, #56]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d3c:	f002 f90e 	bl	8002f5c <HAL_ADC_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 f9c6 	bl	80010d6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_ADC3_Init+0x98>)
 8000d5c:	f002 fadc 	bl	8003318 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000d66:	f000 f9b6 	bl	80010d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000026c 	.word	0x2000026c
 8000d78:	40012200 	.word	0x40012200
 8000d7c:	0f000001 	.word	0x0f000001

08000d80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C2_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C2_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000dbc:	f004 fd6e 	bl	800589c <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 f986 	bl	80010d6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000dce:	f005 f94f 	bl	8006070 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 f97d 	bl	80010d6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000de0:	f005 f991 	bl	8006106 <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f974 	bl	80010d6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200002b4 	.word	0x200002b4
 8000df8:	40005800 	.word	0x40005800
 8000dfc:	00301739 	.word	0x00301739

08000e00 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <MX_UART7_Init+0x5c>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_UART7_Init+0x58>)
 8000e44:	f006 fbbe 	bl	80075c4 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f000 f942 	bl	80010d6 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000308 	.word	0x20000308
 8000e5c:	40007800 	.word	0x40007800

08000e60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e66:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <MX_USART3_UART_Init+0x5c>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART3_UART_Init+0x58>)
 8000ea4:	f006 fb8e 	bl	80075c4 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000eae:	f000 f912 	bl	80010d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000390 	.word	0x20000390
 8000ebc:	40004800 	.word	0x40004800

08000ec0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ece:	2206      	movs	r2, #6
 8000ed0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f04:	f005 f94b 	bl	800619e <HAL_PCD_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f000 f8e2 	bl	80010d6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200004d8 	.word	0x200004d8

08000f1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_DMA_Init+0x48>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <MX_DMA_Init+0x48>)
 8000f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_DMA_Init+0x48>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	200c      	movs	r0, #12
 8000f40:	f002 fd15 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f44:	200c      	movs	r0, #12
 8000f46:	f002 fd2e 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200e      	movs	r0, #14
 8000f50:	f002 fd0d 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f54:	200e      	movs	r0, #14
 8000f56:	f002 fd26 	bl	80039a6 <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b4d      	ldr	r3, [pc, #308]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b44      	ldr	r3, [pc, #272]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0320 	and.w	r3, r3, #32
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a40      	ldr	r2, [pc, #256]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a3a      	ldr	r2, [pc, #232]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_GPIO_Init+0x14c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <MX_GPIO_Init+0x150>)
 800102e:	f004 fc1b 	bl	8005868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2140      	movs	r1, #64	; 0x40
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <MX_GPIO_Init+0x154>)
 8001038:	f004 fc16 	bl	8005868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800103c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001042:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	481b      	ldr	r0, [pc, #108]	; (80010c0 <MX_GPIO_Init+0x158>)
 8001054:	f004 fa5c 	bl	8005510 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001058:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_GPIO_Init+0x150>)
 8001072:	f004 fa4d 	bl	8005510 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <MX_GPIO_Init+0x154>)
 800108e:	f004 fa3f 	bl	8005510 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_GPIO_Init+0x154>)
 80010a6:	f004 fa33 	bl	8005510 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	; 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40020800 	.word	0x40020800

080010c4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010c8:	f002 fc88 	bl	80039dc <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010cc:	2004      	movs	r0, #4
 80010ce:	f002 fc9d 	bl	8003a0c <HAL_MPU_Enable>

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010da:	b672      	cpsid	i
}
 80010dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010de:	e7fe      	b.n	80010de <Error_Handler+0x8>

080010e0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	2200      	movs	r2, #0
 800110c:	2178      	movs	r1, #120	; 0x78
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <ssd1306_WriteCommand+0x2c>)
 8001110:	f004 fc54 	bl	80059bc <HAL_I2C_Mem_Write>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002b4 	.word	0x200002b4

08001120 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af04      	add	r7, sp, #16
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	f04f 32ff 	mov.w	r2, #4294967295
 8001132:	9202      	str	r2, [sp, #8]
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	2178      	movs	r1, #120	; 0x78
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <ssd1306_WriteData+0x30>)
 8001142:	f004 fc3b 	bl	80059bc <HAL_I2C_Mem_Write>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200002b4 	.word	0x200002b4

08001154 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001158:	f7ff ffc2 	bl	80010e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800115c:	2064      	movs	r0, #100	; 0x64
 800115e:	f001 fed9 	bl	8002f14 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001162:	2000      	movs	r0, #0
 8001164:	f000 fa34 	bl	80015d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001168:	2020      	movs	r0, #32
 800116a:	f7ff ffc1 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff ffbe 	bl	80010f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001174:	20b0      	movs	r0, #176	; 0xb0
 8001176:	f7ff ffbb 	bl	80010f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800117a:	20c8      	movs	r0, #200	; 0xc8
 800117c:	f7ff ffb8 	bl	80010f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ffb5 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001186:	2010      	movs	r0, #16
 8001188:	f7ff ffb2 	bl	80010f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800118c:	2040      	movs	r0, #64	; 0x40
 800118e:	f7ff ffaf 	bl	80010f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001192:	20ff      	movs	r0, #255	; 0xff
 8001194:	f000 fa09 	bl	80015aa <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001198:	20a1      	movs	r0, #161	; 0xa1
 800119a:	f7ff ffa9 	bl	80010f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800119e:	20a6      	movs	r0, #166	; 0xa6
 80011a0:	f7ff ffa6 	bl	80010f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80011a4:	20a8      	movs	r0, #168	; 0xa8
 80011a6:	f7ff ffa3 	bl	80010f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80011aa:	203f      	movs	r0, #63	; 0x3f
 80011ac:	f7ff ffa0 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011b0:	20a4      	movs	r0, #164	; 0xa4
 80011b2:	f7ff ff9d 	bl	80010f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80011b6:	20d3      	movs	r0, #211	; 0xd3
 80011b8:	f7ff ff9a 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff ff97 	bl	80010f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80011c2:	20d5      	movs	r0, #213	; 0xd5
 80011c4:	f7ff ff94 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011c8:	20f0      	movs	r0, #240	; 0xf0
 80011ca:	f7ff ff91 	bl	80010f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011ce:	20d9      	movs	r0, #217	; 0xd9
 80011d0:	f7ff ff8e 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80011d4:	2022      	movs	r0, #34	; 0x22
 80011d6:	f7ff ff8b 	bl	80010f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011da:	20da      	movs	r0, #218	; 0xda
 80011dc:	f7ff ff88 	bl	80010f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80011e0:	2012      	movs	r0, #18
 80011e2:	f7ff ff85 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80011e6:	20db      	movs	r0, #219	; 0xdb
 80011e8:	f7ff ff82 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80011ec:	2020      	movs	r0, #32
 80011ee:	f7ff ff7f 	bl	80010f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80011f2:	208d      	movs	r0, #141	; 0x8d
 80011f4:	f7ff ff7c 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80011f8:	2014      	movs	r0, #20
 80011fa:	f7ff ff79 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011fe:	2001      	movs	r0, #1
 8001200:	f000 f9e6 	bl	80015d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f80f 	bl	8001228 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800120a:	f000 f831 	bl	8001270 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <ssd1306_Init+0xd0>)
 8001210:	2200      	movs	r2, #0
 8001212:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <ssd1306_Init+0xd0>)
 8001216:	2200      	movs	r2, #0
 8001218:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800121a:	4b02      	ldr	r3, [pc, #8]	; (8001224 <ssd1306_Init+0xd0>)
 800121c:	2201      	movs	r2, #1
 800121e:	711a      	strb	r2, [r3, #4]
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000df0 	.word	0x20000df0

08001228 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	e00d      	b.n	8001254 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <ssd1306_Fill+0x1a>
 800123e:	2100      	movs	r1, #0
 8001240:	e000      	b.n	8001244 <ssd1306_Fill+0x1c>
 8001242:	21ff      	movs	r1, #255	; 0xff
 8001244:	4a09      	ldr	r2, [pc, #36]	; (800126c <ssd1306_Fill+0x44>)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125a:	d3ed      	bcc.n	8001238 <ssd1306_Fill+0x10>
    }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200009f0 	.word	0x200009f0

08001270 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e016      	b.n	80012aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	3b50      	subs	r3, #80	; 0x50
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff34 	bl	80010f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001288:	2002      	movs	r0, #2
 800128a:	f7ff ff31 	bl	80010f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800128e:	2010      	movs	r0, #16
 8001290:	f7ff ff2e 	bl	80010f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	01db      	lsls	r3, r3, #7
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <ssd1306_UpdateScreen+0x4c>)
 800129a:	4413      	add	r3, r2
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff3e 	bl	8001120 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	3301      	adds	r3, #1
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b07      	cmp	r3, #7
 80012ae:	d9e5      	bls.n	800127c <ssd1306_UpdateScreen+0xc>
    }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200009f0 	.word	0x200009f0

080012c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	460b      	mov	r3, r1
 80012cc:	71bb      	strb	r3, [r7, #6]
 80012ce:	4613      	mov	r3, r2
 80012d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db3d      	blt.n	8001356 <ssd1306_DrawPixel+0x96>
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	2b3f      	cmp	r3, #63	; 0x3f
 80012de:	d83a      	bhi.n	8001356 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80012e0:	797b      	ldrb	r3, [r7, #5]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11a      	bne.n	800131c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	b2d8      	uxtb	r0, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	01db      	lsls	r3, r3, #7
 80012f2:	4413      	add	r3, r2
 80012f4:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <ssd1306_DrawPixel+0xa4>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	b25b      	sxtb	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b259      	sxtb	r1, r3
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	4603      	mov	r3, r0
 8001310:	01db      	lsls	r3, r3, #7
 8001312:	4413      	add	r3, r2
 8001314:	b2c9      	uxtb	r1, r1
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <ssd1306_DrawPixel+0xa4>)
 8001318:	54d1      	strb	r1, [r2, r3]
 800131a:	e01d      	b.n	8001358 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	08db      	lsrs	r3, r3, #3
 8001322:	b2d8      	uxtb	r0, r3
 8001324:	4603      	mov	r3, r0
 8001326:	01db      	lsls	r3, r3, #7
 8001328:	4413      	add	r3, r2
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <ssd1306_DrawPixel+0xa4>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	b25a      	sxtb	r2, r3
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	b25b      	sxtb	r3, r3
 8001342:	4013      	ands	r3, r2
 8001344:	b259      	sxtb	r1, r3
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	4603      	mov	r3, r0
 800134a:	01db      	lsls	r3, r3, #7
 800134c:	4413      	add	r3, r2
 800134e:	b2c9      	uxtb	r1, r1
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <ssd1306_DrawPixel+0xa4>)
 8001352:	54d1      	strb	r1, [r2, r3]
 8001354:	e000      	b.n	8001358 <ssd1306_DrawPixel+0x98>
        return;
 8001356:	bf00      	nop
    }
}
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200009f0 	.word	0x200009f0

08001368 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4604      	mov	r4, r0
 8001370:	1d38      	adds	r0, r7, #4
 8001372:	e880 0006 	stmia.w	r0, {r1, r2}
 8001376:	461a      	mov	r2, r3
 8001378:	4623      	mov	r3, r4
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	4613      	mov	r3, r2
 800137e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b1f      	cmp	r3, #31
 8001384:	d902      	bls.n	800138c <ssd1306_WriteChar+0x24>
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b7e      	cmp	r3, #126	; 0x7e
 800138a:	d901      	bls.n	8001390 <ssd1306_WriteChar+0x28>
        return 0;
 800138c:	2300      	movs	r3, #0
 800138e:	e06d      	b.n	800146c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <ssd1306_WriteChar+0x10c>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	793b      	ldrb	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	2b80      	cmp	r3, #128	; 0x80
 800139c:	dc06      	bgt.n	80013ac <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <ssd1306_WriteChar+0x10c>)
 80013a0:	885b      	ldrh	r3, [r3, #2]
 80013a2:	461a      	mov	r2, r3
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	dd01      	ble.n	80013b0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e05d      	b.n	800146c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	e04c      	b.n	8001450 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3b20      	subs	r3, #32
 80013bc:	7979      	ldrb	r1, [r7, #5]
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	440b      	add	r3, r1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	e034      	b.n	8001440 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d012      	beq.n	800140c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <ssd1306_WriteChar+0x10c>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b2d8      	uxtb	r0, r3
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <ssd1306_WriteChar+0x10c>)
 80013f6:	885b      	ldrh	r3, [r3, #2]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4413      	add	r3, r2
 8001400:	b2db      	uxtb	r3, r3
 8001402:	7bba      	ldrb	r2, [r7, #14]
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff ff5b 	bl	80012c0 <ssd1306_DrawPixel>
 800140a:	e016      	b.n	800143a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <ssd1306_WriteChar+0x10c>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b2d8      	uxtb	r0, r3
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <ssd1306_WriteChar+0x10c>)
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b2d9      	uxtb	r1, r3
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf0c      	ite	eq
 800142e:	2301      	moveq	r3, #1
 8001430:	2300      	movne	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	f7ff ff43 	bl	80012c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	3301      	adds	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	793b      	ldrb	r3, [r7, #4]
 8001442:	461a      	mov	r2, r3
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	4293      	cmp	r3, r2
 8001448:	d3c5      	bcc.n	80013d6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	461a      	mov	r2, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4293      	cmp	r3, r2
 8001458:	d3ad      	bcc.n	80013b6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <ssd1306_WriteChar+0x10c>)
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	b29b      	uxth	r3, r3
 8001462:	4413      	add	r3, r2
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b03      	ldr	r3, [pc, #12]	; (8001474 <ssd1306_WriteChar+0x10c>)
 8001468:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3724      	adds	r7, #36	; 0x24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	20000df0 	.word	0x20000df0

08001478 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	1d38      	adds	r0, r7, #4
 8001482:	e880 0006 	stmia.w	r0, {r1, r2}
 8001486:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001488:	e012      	b.n	80014b0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	7818      	ldrb	r0, [r3, #0]
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	1d3a      	adds	r2, r7, #4
 8001492:	ca06      	ldmia	r2, {r1, r2}
 8001494:	f7ff ff68 	bl	8001368 <ssd1306_WriteChar>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d002      	beq.n	80014aa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	e008      	b.n	80014bc <ssd1306_WriteString+0x44>
        }
        str++;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e8      	bne.n	800148a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	781b      	ldrb	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <ssd1306_SetCursor+0x2c>)
 80014da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <ssd1306_SetCursor+0x2c>)
 80014e2:	805a      	strh	r2, [r3, #2]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000df0 	.word	0x20000df0

080014f4 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	603a      	str	r2, [r7, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	460b      	mov	r3, r1
 8001504:	71bb      	strb	r3, [r7, #6]
 8001506:	4613      	mov	r3, r2
 8001508:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	3307      	adds	r3, #7
 800150e:	2b00      	cmp	r3, #0
 8001510:	da00      	bge.n	8001514 <ssd1306_DrawBitmap+0x20>
 8001512:	3307      	adds	r3, #7
 8001514:	10db      	asrs	r3, r3, #3
 8001516:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db3e      	blt.n	80015a2 <ssd1306_DrawBitmap+0xae>
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	2b3f      	cmp	r3, #63	; 0x3f
 8001528:	d83b      	bhi.n	80015a2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800152a:	2300      	movs	r3, #0
 800152c:	73bb      	strb	r3, [r7, #14]
 800152e:	e033      	b.n	8001598 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	737b      	strb	r3, [r7, #13]
 8001534:	e026      	b.n	8001584 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001536:	7b7b      	ldrb	r3, [r7, #13]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	e00d      	b.n	8001564 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	7b7a      	ldrb	r2, [r7, #13]
 8001554:	08d2      	lsrs	r2, r2, #3
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	4413      	add	r3, r2
 800155a:	461a      	mov	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da08      	bge.n	800157e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800156c:	79fa      	ldrb	r2, [r7, #7]
 800156e:	7b7b      	ldrb	r3, [r7, #13]
 8001570:	4413      	add	r3, r2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	7f3a      	ldrb	r2, [r7, #28]
 8001576:	79b9      	ldrb	r1, [r7, #6]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fea1 	bl	80012c0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	3301      	adds	r3, #1
 8001582:	737b      	strb	r3, [r7, #13]
 8001584:	7b7a      	ldrb	r2, [r7, #13]
 8001586:	797b      	ldrb	r3, [r7, #5]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3d4      	bcc.n	8001536 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	3301      	adds	r3, #1
 8001590:	73bb      	strb	r3, [r7, #14]
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	3301      	adds	r3, #1
 8001596:	71bb      	strb	r3, [r7, #6]
 8001598:	7bba      	ldrb	r2, [r7, #14]
 800159a:	7e3b      	ldrb	r3, [r7, #24]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3c7      	bcc.n	8001530 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80015a0:	e000      	b.n	80015a4 <ssd1306_DrawBitmap+0xb0>
        return;
 80015a2:	bf00      	nop
}
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80015b4:	2381      	movs	r3, #129	; 0x81
 80015b6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd98 	bl	80010f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fd94 	bl	80010f0 <ssd1306_WriteCommand>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80015e0:	23af      	movs	r3, #175	; 0xaf
 80015e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <ssd1306_SetDisplayOn+0x38>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	715a      	strb	r2, [r3, #5]
 80015ea:	e004      	b.n	80015f6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80015ec:	23ae      	movs	r3, #174	; 0xae
 80015ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <ssd1306_SetDisplayOn+0x38>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fd79 	bl	80010f0 <ssd1306_WriteCommand>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000df0 	.word	0x20000df0

0800160c <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff fe06 	bl	8001228 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4619      	mov	r1, r3
 8001620:	2002      	movs	r0, #2
 8001622:	f7ff ff4f 	bl	80014c4 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 8001626:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <ssd1306_TestFonts1+0x88>)
 8001628:	2301      	movs	r3, #1
 800162a:	ca06      	ldmia	r2, {r1, r2}
 800162c:	481a      	ldr	r0, [pc, #104]	; (8001698 <ssd1306_TestFonts1+0x8c>)
 800162e:	f7ff ff23 	bl	8001478 <ssd1306_WriteString>
    y += 26;
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	331a      	adds	r3, #26
 8001636:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4619      	mov	r1, r3
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff ff41 	bl	80014c4 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 8001642:	4a16      	ldr	r2, [pc, #88]	; (800169c <ssd1306_TestFonts1+0x90>)
 8001644:	2301      	movs	r3, #1
 8001646:	ca06      	ldmia	r2, {r1, r2}
 8001648:	4815      	ldr	r0, [pc, #84]	; (80016a0 <ssd1306_TestFonts1+0x94>)
 800164a:	f7ff ff15 	bl	8001478 <ssd1306_WriteString>
    y += 10;
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	330a      	adds	r3, #10
 8001652:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4619      	mov	r1, r3
 8001658:	2002      	movs	r0, #2
 800165a:	f7ff ff33 	bl	80014c4 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <ssd1306_TestFonts1+0x98>)
 8001660:	2301      	movs	r3, #1
 8001662:	ca06      	ldmia	r2, {r1, r2}
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <ssd1306_TestFonts1+0x9c>)
 8001666:	f7ff ff07 	bl	8001478 <ssd1306_WriteString>
    y += 10;
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	330a      	adds	r3, #10
 800166e:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4619      	mov	r1, r3
 8001674:	2002      	movs	r0, #2
 8001676:	f7ff ff25 	bl	80014c4 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.0", Font_6x8, White);
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <ssd1306_TestFonts1+0x98>)
 800167c:	2301      	movs	r3, #1
 800167e:	ca06      	ldmia	r2, {r1, r2}
 8001680:	480a      	ldr	r0, [pc, #40]	; (80016ac <ssd1306_TestFonts1+0xa0>)
 8001682:	f7ff fef9 	bl	8001478 <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 8001686:	f7ff fdf3 	bl	8001270 <ssd1306_UpdateScreen>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000002c 	.word	0x2000002c
 8001698:	08016db4 	.word	0x08016db4
 800169c:	20000024 	.word	0x20000024
 80016a0:	08016dc0 	.word	0x08016dc0
 80016a4:	2000001c 	.word	0x2000001c
 80016a8:	08016dcc 	.word	0x08016dcc
 80016ac:	08016de0 	.word	0x08016de0

080016b0 <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff fdaa 	bl	8001228 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	4619      	mov	r1, r3
 80016d8:	2002      	movs	r0, #2
 80016da:	f7ff fef3 	bl	80014c4 <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 80016de:	4a56      	ldr	r2, [pc, #344]	; (8001838 <ssd1306_PrintPrincipalMenu+0x188>)
 80016e0:	2301      	movs	r3, #1
 80016e2:	ca06      	ldmia	r2, {r1, r2}
 80016e4:	4855      	ldr	r0, [pc, #340]	; (800183c <ssd1306_PrintPrincipalMenu+0x18c>)
 80016e6:	f7ff fec7 	bl	8001478 <ssd1306_WriteString>

	    //SERIAL CONECTION
		  ssd1306_DrawBitmap(55,y,icon_serial,15,15,White);
 80016ea:	7ff9      	ldrb	r1, [r7, #31]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	230f      	movs	r3, #15
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	230f      	movs	r3, #15
 80016f6:	4a52      	ldr	r2, [pc, #328]	; (8001840 <ssd1306_PrintPrincipalMenu+0x190>)
 80016f8:	2037      	movs	r0, #55	; 0x37
 80016fa:	f7ff fefb 	bl	80014f4 <ssd1306_DrawBitmap>

	    //INTERNET
		  ssd1306_DrawBitmap(75,y,icon_rf,15,15,White);
 80016fe:	7ff9      	ldrb	r1, [r7, #31]
 8001700:	2301      	movs	r3, #1
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	230f      	movs	r3, #15
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	230f      	movs	r3, #15
 800170a:	4a4e      	ldr	r2, [pc, #312]	; (8001844 <ssd1306_PrintPrincipalMenu+0x194>)
 800170c:	204b      	movs	r0, #75	; 0x4b
 800170e:	f7ff fef1 	bl	80014f4 <ssd1306_DrawBitmap>

	    //BATERIA
		  ssd1306_DrawBitmap(95,y,icon_cloud,15,15,White);
 8001712:	7ff9      	ldrb	r1, [r7, #31]
 8001714:	2301      	movs	r3, #1
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	230f      	movs	r3, #15
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	230f      	movs	r3, #15
 800171e:	4a4a      	ldr	r2, [pc, #296]	; (8001848 <ssd1306_PrintPrincipalMenu+0x198>)
 8001720:	205f      	movs	r0, #95	; 0x5f
 8001722:	f7ff fee7 	bl	80014f4 <ssd1306_DrawBitmap>

	    //SEÑAL GSM
		  ssd1306_DrawBitmap(115,y,icon_battery_full,15,15,White);
 8001726:	7ff9      	ldrb	r1, [r7, #31]
 8001728:	2301      	movs	r3, #1
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	230f      	movs	r3, #15
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	230f      	movs	r3, #15
 8001732:	4a46      	ldr	r2, [pc, #280]	; (800184c <ssd1306_PrintPrincipalMenu+0x19c>)
 8001734:	2073      	movs	r0, #115	; 0x73
 8001736:	f7ff fedd 	bl	80014f4 <ssd1306_DrawBitmap>



	    y += 20;
 800173a:	7ffb      	ldrb	r3, [r7, #31]
 800173c:	3314      	adds	r3, #20
 800173e:	77fb      	strb	r3, [r7, #31]
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	4619      	mov	r1, r3
 8001744:	2002      	movs	r0, #2
 8001746:	f7ff febd 	bl	80014c4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d106      	bne.n	800175e <ssd1306_PrintPrincipalMenu+0xae>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 8001750:	4a3f      	ldr	r2, [pc, #252]	; (8001850 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001752:	2300      	movs	r3, #0
 8001754:	ca06      	ldmia	r2, {r1, r2}
 8001756:	483f      	ldr	r0, [pc, #252]	; (8001854 <ssd1306_PrintPrincipalMenu+0x1a4>)
 8001758:	f7ff fe8e 	bl	8001478 <ssd1306_WriteString>
 800175c:	e005      	b.n	800176a <ssd1306_PrintPrincipalMenu+0xba>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 800175e:	4a3c      	ldr	r2, [pc, #240]	; (8001850 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001760:	2301      	movs	r3, #1
 8001762:	ca06      	ldmia	r2, {r1, r2}
 8001764:	483b      	ldr	r0, [pc, #236]	; (8001854 <ssd1306_PrintPrincipalMenu+0x1a4>)
 8001766:	f7ff fe87 	bl	8001478 <ssd1306_WriteString>

	    }
	    y += 10;
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	330a      	adds	r3, #10
 800176e:	77fb      	strb	r3, [r7, #31]
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001770:	7ffb      	ldrb	r3, [r7, #31]
 8001772:	4619      	mov	r1, r3
 8001774:	2002      	movs	r0, #2
 8001776:	f7ff fea5 	bl	80014c4 <ssd1306_SetCursor>
	    if(indexMenu==1){
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <ssd1306_PrintPrincipalMenu+0xde>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 8001780:	4a33      	ldr	r2, [pc, #204]	; (8001850 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001782:	2300      	movs	r3, #0
 8001784:	ca06      	ldmia	r2, {r1, r2}
 8001786:	4834      	ldr	r0, [pc, #208]	; (8001858 <ssd1306_PrintPrincipalMenu+0x1a8>)
 8001788:	f7ff fe76 	bl	8001478 <ssd1306_WriteString>
 800178c:	e005      	b.n	800179a <ssd1306_PrintPrincipalMenu+0xea>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 800178e:	4a30      	ldr	r2, [pc, #192]	; (8001850 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001790:	2301      	movs	r3, #1
 8001792:	ca06      	ldmia	r2, {r1, r2}
 8001794:	4830      	ldr	r0, [pc, #192]	; (8001858 <ssd1306_PrintPrincipalMenu+0x1a8>)
 8001796:	f7ff fe6f 	bl	8001478 <ssd1306_WriteString>

	    }
		y += 10;
 800179a:	7ffb      	ldrb	r3, [r7, #31]
 800179c:	330a      	adds	r3, #10
 800179e:	77fb      	strb	r3, [r7, #31]

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80017a0:	7ffb      	ldrb	r3, [r7, #31]
 80017a2:	4619      	mov	r1, r3
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff fe8d 	bl	80014c4 <ssd1306_SetCursor>
	    if(indexMenu==2){
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d106      	bne.n	80017be <ssd1306_PrintPrincipalMenu+0x10e>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <ssd1306_PrintPrincipalMenu+0x1a0>)
 80017b2:	2300      	movs	r3, #0
 80017b4:	ca06      	ldmia	r2, {r1, r2}
 80017b6:	4829      	ldr	r0, [pc, #164]	; (800185c <ssd1306_PrintPrincipalMenu+0x1ac>)
 80017b8:	f7ff fe5e 	bl	8001478 <ssd1306_WriteString>
 80017bc:	e005      	b.n	80017ca <ssd1306_PrintPrincipalMenu+0x11a>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <ssd1306_PrintPrincipalMenu+0x1a0>)
 80017c0:	2301      	movs	r3, #1
 80017c2:	ca06      	ldmia	r2, {r1, r2}
 80017c4:	4825      	ldr	r0, [pc, #148]	; (800185c <ssd1306_PrintPrincipalMenu+0x1ac>)
 80017c6:	f7ff fe57 	bl	8001478 <ssd1306_WriteString>

	    }
		y += 10;
 80017ca:	7ffb      	ldrb	r3, [r7, #31]
 80017cc:	330a      	adds	r3, #10
 80017ce:	77fb      	strb	r3, [r7, #31]
		#endif




	         if(value >= 2850 && value <= 2950){
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f640 3221 	movw	r2, #2849	; 0xb21
 80017d6:	4293      	cmp	r3, r2
 80017d8:	dd0c      	ble.n	80017f4 <ssd1306_PrintPrincipalMenu+0x144>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f640 3286 	movw	r2, #2950	; 0xb86
 80017e0:	4293      	cmp	r3, r2
 80017e2:	dc07      	bgt.n	80017f4 <ssd1306_PrintPrincipalMenu+0x144>
	            strcpy(stringDirection, "DERECHA");
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <ssd1306_PrintPrincipalMenu+0x1b0>)
 80017ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80017f2:	e01b      	b.n	800182c <ssd1306_PrintPrincipalMenu+0x17c>
	        }
	        else if(value >= 1850 && value <= 1950){
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f240 7239 	movw	r2, #1849	; 0x739
 80017fa:	4293      	cmp	r3, r2
 80017fc:	dd0b      	ble.n	8001816 <ssd1306_PrintPrincipalMenu+0x166>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f240 729e 	movw	r2, #1950	; 0x79e
 8001804:	4293      	cmp	r3, r2
 8001806:	dc06      	bgt.n	8001816 <ssd1306_PrintPrincipalMenu+0x166>
	            strcpy(stringDirection, "IZQUIERDA");
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <ssd1306_PrintPrincipalMenu+0x1b4>)
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001810:	c303      	stmia	r3!, {r0, r1}
 8001812:	801a      	strh	r2, [r3, #0]
 8001814:	e00a      	b.n	800182c <ssd1306_PrintPrincipalMenu+0x17c>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <ssd1306_PrintPrincipalMenu+0x1b8>)
 800181c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001820:	6018      	str	r0, [r3, #0]
 8001822:	3304      	adds	r3, #4
 8001824:	8019      	strh	r1, [r3, #0]
 8001826:	3302      	adds	r3, #2
 8001828:	0c0a      	lsrs	r2, r1, #16
 800182a:	701a      	strb	r2, [r3, #0]
	         //sprintf(screen_str, "%d", screen); // convert index to a string
	         //ssd1306_SetCursor(20, y); // set the cursor position
	         //ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
	         //   #endif

	    ssd1306_UpdateScreen();
 800182c:	f7ff fd20 	bl	8001270 <ssd1306_UpdateScreen>
}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000002c 	.word	0x2000002c
 800183c:	08016dec 	.word	0x08016dec
 8001840:	0801b83c 	.word	0x0801b83c
 8001844:	0801b81c 	.word	0x0801b81c
 8001848:	0801b7dc 	.word	0x0801b7dc
 800184c:	0801b7fc 	.word	0x0801b7fc
 8001850:	20000024 	.word	0x20000024
 8001854:	08016df4 	.word	0x08016df4
 8001858:	08016e00 	.word	0x08016e00
 800185c:	08016e08 	.word	0x08016e08
 8001860:	08016e14 	.word	0x08016e14
 8001864:	08016e1c 	.word	0x08016e1c
 8001868:	08016e28 	.word	0x08016e28

0800186c <ssd1306_PrintDashboardMenu>:

void ssd1306_PrintDashboardMenu(int value, int indexMenu, int screen){
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fccc 	bl	8001228 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(20, y);
 8001890:	7ffb      	ldrb	r3, [r7, #31]
 8001892:	4619      	mov	r1, r3
 8001894:	2014      	movs	r0, #20
 8001896:	f7ff fe15 	bl	80014c4 <ssd1306_SetCursor>
	    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 800189a:	4a84      	ldr	r2, [pc, #528]	; (8001aac <ssd1306_PrintDashboardMenu+0x240>)
 800189c:	2301      	movs	r3, #1
 800189e:	ca06      	ldmia	r2, {r1, r2}
 80018a0:	4883      	ldr	r0, [pc, #524]	; (8001ab0 <ssd1306_PrintDashboardMenu+0x244>)
 80018a2:	f7ff fde9 	bl	8001478 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 80018a6:	7ffb      	ldrb	r3, [r7, #31]
 80018a8:	3314      	adds	r3, #20
 80018aa:	77fb      	strb	r3, [r7, #31]
	    #endif

		ssd1306_SetCursor(2, y);
 80018ac:	7ffb      	ldrb	r3, [r7, #31]
 80018ae:	4619      	mov	r1, r3
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff fe07 	bl	80014c4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11d      	bne.n	80018f8 <ssd1306_PrintDashboardMenu+0x8c>
			ssd1306_DrawBitmap(2,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 80018bc:	7ff9      	ldrb	r1, [r7, #31]
 80018be:	2301      	movs	r3, #1
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2328      	movs	r3, #40	; 0x28
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2328      	movs	r3, #40	; 0x28
 80018c8:	4a7a      	ldr	r2, [pc, #488]	; (8001ab4 <ssd1306_PrintDashboardMenu+0x248>)
 80018ca:	2002      	movs	r0, #2
 80018cc:	f7ff fe12 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_1_RF,40,40, White);
 80018d0:	7ff9      	ldrb	r1, [r7, #31]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2328      	movs	r3, #40	; 0x28
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2328      	movs	r3, #40	; 0x28
 80018dc:	4a76      	ldr	r2, [pc, #472]	; (8001ab8 <ssd1306_PrintDashboardMenu+0x24c>)
 80018de:	202c      	movs	r0, #44	; 0x2c
 80018e0:	f7ff fe08 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_3_CLOUD,40,40, White);
 80018e4:	7ff9      	ldrb	r1, [r7, #31]
 80018e6:	2301      	movs	r3, #1
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2328      	movs	r3, #40	; 0x28
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2328      	movs	r3, #40	; 0x28
 80018f0:	4a72      	ldr	r2, [pc, #456]	; (8001abc <ssd1306_PrintDashboardMenu+0x250>)
 80018f2:	2056      	movs	r0, #86	; 0x56
 80018f4:	f7ff fdfe 	bl	80014f4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==1){
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d11d      	bne.n	800193a <ssd1306_PrintDashboardMenu+0xce>
			ssd1306_DrawBitmap(2,y,Dashboard_1_RF,40,40, White);
 80018fe:	7ff9      	ldrb	r1, [r7, #31]
 8001900:	2301      	movs	r3, #1
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2328      	movs	r3, #40	; 0x28
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2328      	movs	r3, #40	; 0x28
 800190a:	4a6d      	ldr	r2, [pc, #436]	; (8001ac0 <ssd1306_PrintDashboardMenu+0x254>)
 800190c:	2002      	movs	r0, #2
 800190e:	f7ff fdf1 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_3_CLOUD,40,40, White);
 8001912:	7ff9      	ldrb	r1, [r7, #31]
 8001914:	2301      	movs	r3, #1
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2328      	movs	r3, #40	; 0x28
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2328      	movs	r3, #40	; 0x28
 800191e:	4a69      	ldr	r2, [pc, #420]	; (8001ac4 <ssd1306_PrintDashboardMenu+0x258>)
 8001920:	202c      	movs	r0, #44	; 0x2c
 8001922:	f7ff fde7 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_4_LORA,40,40, White);
 8001926:	7ff9      	ldrb	r1, [r7, #31]
 8001928:	2301      	movs	r3, #1
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2328      	movs	r3, #40	; 0x28
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2328      	movs	r3, #40	; 0x28
 8001932:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <ssd1306_PrintDashboardMenu+0x25c>)
 8001934:	2056      	movs	r0, #86	; 0x56
 8001936:	f7ff fddd 	bl	80014f4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==2){
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d11d      	bne.n	800197c <ssd1306_PrintDashboardMenu+0x110>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 8001940:	7ff9      	ldrb	r1, [r7, #31]
 8001942:	2301      	movs	r3, #1
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2328      	movs	r3, #40	; 0x28
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2328      	movs	r3, #40	; 0x28
 800194c:	4a5b      	ldr	r2, [pc, #364]	; (8001abc <ssd1306_PrintDashboardMenu+0x250>)
 800194e:	2002      	movs	r0, #2
 8001950:	f7ff fdd0 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_4_LORA,40,40, White);
 8001954:	7ff9      	ldrb	r1, [r7, #31]
 8001956:	2301      	movs	r3, #1
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	2328      	movs	r3, #40	; 0x28
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2328      	movs	r3, #40	; 0x28
 8001960:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <ssd1306_PrintDashboardMenu+0x260>)
 8001962:	202c      	movs	r0, #44	; 0x2c
 8001964:	f7ff fdc6 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_5_SERIAL,40,40, White);
 8001968:	7ff9      	ldrb	r1, [r7, #31]
 800196a:	2301      	movs	r3, #1
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2328      	movs	r3, #40	; 0x28
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2328      	movs	r3, #40	; 0x28
 8001974:	4a56      	ldr	r2, [pc, #344]	; (8001ad0 <ssd1306_PrintDashboardMenu+0x264>)
 8001976:	2056      	movs	r0, #86	; 0x56
 8001978:	f7ff fdbc 	bl	80014f4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==3){
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d11d      	bne.n	80019be <ssd1306_PrintDashboardMenu+0x152>
			ssd1306_DrawBitmap(2,y,Dashboard_4_LORA,40,40, White);
 8001982:	7ff9      	ldrb	r1, [r7, #31]
 8001984:	2301      	movs	r3, #1
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2328      	movs	r3, #40	; 0x28
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2328      	movs	r3, #40	; 0x28
 800198e:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <ssd1306_PrintDashboardMenu+0x25c>)
 8001990:	2002      	movs	r0, #2
 8001992:	f7ff fdaf 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_5_SERIAL,40,40, White);
 8001996:	7ff9      	ldrb	r1, [r7, #31]
 8001998:	2301      	movs	r3, #1
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2328      	movs	r3, #40	; 0x28
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2328      	movs	r3, #40	; 0x28
 80019a2:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <ssd1306_PrintDashboardMenu+0x268>)
 80019a4:	202c      	movs	r0, #44	; 0x2c
 80019a6:	f7ff fda5 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_6_BACK,40,40, White);
 80019aa:	7ff9      	ldrb	r1, [r7, #31]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	2328      	movs	r3, #40	; 0x28
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2328      	movs	r3, #40	; 0x28
 80019b6:	4a48      	ldr	r2, [pc, #288]	; (8001ad8 <ssd1306_PrintDashboardMenu+0x26c>)
 80019b8:	2056      	movs	r0, #86	; 0x56
 80019ba:	f7ff fd9b 	bl	80014f4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==4){
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d11d      	bne.n	8001a00 <ssd1306_PrintDashboardMenu+0x194>
			ssd1306_DrawBitmap(2,y,Dashboard_5_SERIAL,40,40, White);
 80019c4:	7ff9      	ldrb	r1, [r7, #31]
 80019c6:	2301      	movs	r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	2328      	movs	r3, #40	; 0x28
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2328      	movs	r3, #40	; 0x28
 80019d0:	4a3f      	ldr	r2, [pc, #252]	; (8001ad0 <ssd1306_PrintDashboardMenu+0x264>)
 80019d2:	2002      	movs	r0, #2
 80019d4:	f7ff fd8e 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_6_BACK,40,40, White);
 80019d8:	7ff9      	ldrb	r1, [r7, #31]
 80019da:	2301      	movs	r3, #1
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2328      	movs	r3, #40	; 0x28
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2328      	movs	r3, #40	; 0x28
 80019e4:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <ssd1306_PrintDashboardMenu+0x270>)
 80019e6:	202c      	movs	r0, #44	; 0x2c
 80019e8:	f7ff fd84 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 80019ec:	7ff9      	ldrb	r1, [r7, #31]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2328      	movs	r3, #40	; 0x28
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2328      	movs	r3, #40	; 0x28
 80019f8:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <ssd1306_PrintDashboardMenu+0x248>)
 80019fa:	2056      	movs	r0, #86	; 0x56
 80019fc:	f7ff fd7a 	bl	80014f4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==5){
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d11d      	bne.n	8001a42 <ssd1306_PrintDashboardMenu+0x1d6>
			ssd1306_DrawBitmap(2,y,Dashboard_6_BACK,40,40, White);
 8001a06:	7ff9      	ldrb	r1, [r7, #31]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	2328      	movs	r3, #40	; 0x28
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2328      	movs	r3, #40	; 0x28
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <ssd1306_PrintDashboardMenu+0x26c>)
 8001a14:	2002      	movs	r0, #2
 8001a16:	f7ff fd6d 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_2_BLOCKCHAIN,40,40, White);
 8001a1a:	7ff9      	ldrb	r1, [r7, #31]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2328      	movs	r3, #40	; 0x28
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2328      	movs	r3, #40	; 0x28
 8001a26:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <ssd1306_PrintDashboardMenu+0x274>)
 8001a28:	202c      	movs	r0, #44	; 0x2c
 8001a2a:	f7ff fd63 	bl	80014f4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_1_RF,40,40, White);
 8001a2e:	7ff9      	ldrb	r1, [r7, #31]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2328      	movs	r3, #40	; 0x28
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2328      	movs	r3, #40	; 0x28
 8001a3a:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <ssd1306_PrintDashboardMenu+0x254>)
 8001a3c:	2056      	movs	r0, #86	; 0x56
 8001a3e:	f7ff fd59 	bl	80014f4 <ssd1306_DrawBitmap>
		}
		 if(value >= 2850 && value <= 2950){
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f640 3221 	movw	r2, #2849	; 0xb21
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	dd0c      	ble.n	8001a66 <ssd1306_PrintDashboardMenu+0x1fa>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f640 3286 	movw	r2, #2950	; 0xb86
 8001a52:	4293      	cmp	r3, r2
 8001a54:	dc07      	bgt.n	8001a66 <ssd1306_PrintDashboardMenu+0x1fa>
			strcpy(stringDirection, "DERECHA");
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <ssd1306_PrintDashboardMenu+0x278>)
 8001a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a60:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a64:	e01b      	b.n	8001a9e <ssd1306_PrintDashboardMenu+0x232>
		}
		else if(value >= 1850 && value <= 1950){
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f240 7239 	movw	r2, #1849	; 0x739
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	dd0b      	ble.n	8001a88 <ssd1306_PrintDashboardMenu+0x21c>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f240 729e 	movw	r2, #1950	; 0x79e
 8001a76:	4293      	cmp	r3, r2
 8001a78:	dc06      	bgt.n	8001a88 <ssd1306_PrintDashboardMenu+0x21c>
			strcpy(stringDirection, "IZQUIERDA");
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <ssd1306_PrintDashboardMenu+0x27c>)
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a82:	c303      	stmia	r3!, {r0, r1}
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	e00a      	b.n	8001a9e <ssd1306_PrintDashboardMenu+0x232>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <ssd1306_PrintDashboardMenu+0x280>)
 8001a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a92:	6018      	str	r0, [r3, #0]
 8001a94:	3304      	adds	r3, #4
 8001a96:	8019      	strh	r1, [r3, #0]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	0c0a      	lsrs	r2, r1, #16
 8001a9c:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001a9e:	f7ff fbe7 	bl	8001270 <ssd1306_UpdateScreen>
}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000002c 	.word	0x2000002c
 8001ab0:	08016db4 	.word	0x08016db4
 8001ab4:	0801b9ec 	.word	0x0801b9ec
 8001ab8:	0801bdd4 	.word	0x0801bdd4
 8001abc:	0801bab4 	.word	0x0801bab4
 8001ac0:	0801b924 	.word	0x0801b924
 8001ac4:	0801bf64 	.word	0x0801bf64
 8001ac8:	0801b85c 	.word	0x0801b85c
 8001acc:	0801bd0c 	.word	0x0801bd0c
 8001ad0:	0801bb7c 	.word	0x0801bb7c
 8001ad4:	0801c02c 	.word	0x0801c02c
 8001ad8:	0801bc44 	.word	0x0801bc44
 8001adc:	0801c0f4 	.word	0x0801c0f4
 8001ae0:	0801be9c 	.word	0x0801be9c
 8001ae4:	08016e14 	.word	0x08016e14
 8001ae8:	08016e1c 	.word	0x08016e1c
 8001aec:	08016e28 	.word	0x08016e28

08001af0 <ssd1306_PrintEnergyMenu>:

void ssd1306_PrintEnergyMenu(int value, int indexMenu, int screen){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fb8a 	bl	8001228 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001b14:	7ffb      	ldrb	r3, [r7, #31]
 8001b16:	4619      	mov	r1, r3
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7ff fcd3 	bl	80014c4 <ssd1306_SetCursor>
	    ssd1306_WriteString("ENERGY", Font_11x18, White);
 8001b1e:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <ssd1306_PrintEnergyMenu+0x138>)
 8001b20:	2301      	movs	r3, #1
 8001b22:	ca06      	ldmia	r2, {r1, r2}
 8001b24:	4841      	ldr	r0, [pc, #260]	; (8001c2c <ssd1306_PrintEnergyMenu+0x13c>)
 8001b26:	f7ff fca7 	bl	8001478 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001b2a:	7ffb      	ldrb	r3, [r7, #31]
 8001b2c:	3314      	adds	r3, #20
 8001b2e:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001b30:	7ffb      	ldrb	r3, [r7, #31]
 8001b32:	4619      	mov	r1, r3
 8001b34:	2002      	movs	r0, #2
 8001b36:	f7ff fcc5 	bl	80014c4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d106      	bne.n	8001b4e <ssd1306_PrintEnergyMenu+0x5e>
	        ssd1306_WriteString("Power Supply", Font_7x10, Black);
 8001b40:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <ssd1306_PrintEnergyMenu+0x140>)
 8001b42:	2300      	movs	r3, #0
 8001b44:	ca06      	ldmia	r2, {r1, r2}
 8001b46:	483b      	ldr	r0, [pc, #236]	; (8001c34 <ssd1306_PrintEnergyMenu+0x144>)
 8001b48:	f7ff fc96 	bl	8001478 <ssd1306_WriteString>
 8001b4c:	e005      	b.n	8001b5a <ssd1306_PrintEnergyMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("Power Supply", Font_7x10, White);
 8001b4e:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <ssd1306_PrintEnergyMenu+0x140>)
 8001b50:	2301      	movs	r3, #1
 8001b52:	ca06      	ldmia	r2, {r1, r2}
 8001b54:	4837      	ldr	r0, [pc, #220]	; (8001c34 <ssd1306_PrintEnergyMenu+0x144>)
 8001b56:	f7ff fc8f 	bl	8001478 <ssd1306_WriteString>
	    }
		y += 10;
 8001b5a:	7ffb      	ldrb	r3, [r7, #31]
 8001b5c:	330a      	adds	r3, #10
 8001b5e:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001b60:	7ffb      	ldrb	r3, [r7, #31]
 8001b62:	4619      	mov	r1, r3
 8001b64:	2002      	movs	r0, #2
 8001b66:	f7ff fcad 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <ssd1306_PrintEnergyMenu+0x8e>
	        ssd1306_WriteString("Status: 80%", Font_7x10, Black);
 8001b70:	4a2f      	ldr	r2, [pc, #188]	; (8001c30 <ssd1306_PrintEnergyMenu+0x140>)
 8001b72:	2300      	movs	r3, #0
 8001b74:	ca06      	ldmia	r2, {r1, r2}
 8001b76:	4830      	ldr	r0, [pc, #192]	; (8001c38 <ssd1306_PrintEnergyMenu+0x148>)
 8001b78:	f7ff fc7e 	bl	8001478 <ssd1306_WriteString>
 8001b7c:	e005      	b.n	8001b8a <ssd1306_PrintEnergyMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Status: 80%", Font_7x10, White);
 8001b7e:	4a2c      	ldr	r2, [pc, #176]	; (8001c30 <ssd1306_PrintEnergyMenu+0x140>)
 8001b80:	2301      	movs	r3, #1
 8001b82:	ca06      	ldmia	r2, {r1, r2}
 8001b84:	482c      	ldr	r0, [pc, #176]	; (8001c38 <ssd1306_PrintEnergyMenu+0x148>)
 8001b86:	f7ff fc77 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
 8001b8c:	330a      	adds	r3, #10
 8001b8e:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001b90:	7ffb      	ldrb	r3, [r7, #31]
 8001b92:	4619      	mov	r1, r3
 8001b94:	2002      	movs	r0, #2
 8001b96:	f7ff fc95 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d106      	bne.n	8001bae <ssd1306_PrintEnergyMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001ba0:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <ssd1306_PrintEnergyMenu+0x140>)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	ca06      	ldmia	r2, {r1, r2}
 8001ba6:	4825      	ldr	r0, [pc, #148]	; (8001c3c <ssd1306_PrintEnergyMenu+0x14c>)
 8001ba8:	f7ff fc66 	bl	8001478 <ssd1306_WriteString>
 8001bac:	e005      	b.n	8001bba <ssd1306_PrintEnergyMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001bae:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <ssd1306_PrintEnergyMenu+0x140>)
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	ca06      	ldmia	r2, {r1, r2}
 8001bb4:	4821      	ldr	r0, [pc, #132]	; (8001c3c <ssd1306_PrintEnergyMenu+0x14c>)
 8001bb6:	f7ff fc5f 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
 8001bbc:	330a      	adds	r3, #10
 8001bbe:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f640 3221 	movw	r2, #2849	; 0xb21
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	dd0c      	ble.n	8001be4 <ssd1306_PrintEnergyMenu+0xf4>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f640 3286 	movw	r2, #2950	; 0xb86
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	dc07      	bgt.n	8001be4 <ssd1306_PrintEnergyMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <ssd1306_PrintEnergyMenu+0x150>)
 8001bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bde:	e883 0003 	stmia.w	r3, {r0, r1}
 8001be2:	e01b      	b.n	8001c1c <ssd1306_PrintEnergyMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f240 7239 	movw	r2, #1849	; 0x739
 8001bea:	4293      	cmp	r3, r2
 8001bec:	dd0b      	ble.n	8001c06 <ssd1306_PrintEnergyMenu+0x116>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f240 729e 	movw	r2, #1950	; 0x79e
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	dc06      	bgt.n	8001c06 <ssd1306_PrintEnergyMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <ssd1306_PrintEnergyMenu+0x154>)
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c00:	c303      	stmia	r3!, {r0, r1}
 8001c02:	801a      	strh	r2, [r3, #0]
 8001c04:	e00a      	b.n	8001c1c <ssd1306_PrintEnergyMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <ssd1306_PrintEnergyMenu+0x158>)
 8001c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c10:	6018      	str	r0, [r3, #0]
 8001c12:	3304      	adds	r3, #4
 8001c14:	8019      	strh	r1, [r3, #0]
 8001c16:	3302      	adds	r3, #2
 8001c18:	0c0a      	lsrs	r2, r1, #16
 8001c1a:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001c1c:	f7ff fb28 	bl	8001270 <ssd1306_UpdateScreen>
}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000002c 	.word	0x2000002c
 8001c2c:	08016e00 	.word	0x08016e00
 8001c30:	20000024 	.word	0x20000024
 8001c34:	08016e30 	.word	0x08016e30
 8001c38:	08016e40 	.word	0x08016e40
 8001c3c:	08016e4c 	.word	0x08016e4c
 8001c40:	08016e14 	.word	0x08016e14
 8001c44:	08016e1c 	.word	0x08016e1c
 8001c48:	08016e28 	.word	0x08016e28

08001c4c <ssd1306_PrintRFMenu>:

void ssd1306_PrintRFMenu(int value, int indexMenu, int screen){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
		 uint8_t y = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff fadc 	bl	8001228 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001c70:	7ffb      	ldrb	r3, [r7, #31]
 8001c72:	4619      	mov	r1, r3
 8001c74:	2023      	movs	r0, #35	; 0x23
 8001c76:	f7ff fc25 	bl	80014c4 <ssd1306_SetCursor>
	    ssd1306_WriteString("BROADCAST", Font_7x10, White);
 8001c7a:	4a5a      	ldr	r2, [pc, #360]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	ca06      	ldmia	r2, {r1, r2}
 8001c80:	4859      	ldr	r0, [pc, #356]	; (8001de8 <ssd1306_PrintRFMenu+0x19c>)
 8001c82:	f7ff fbf9 	bl	8001478 <ssd1306_WriteString>
	    y += 10;
 8001c86:	7ffb      	ldrb	r3, [r7, #31]
 8001c88:	330a      	adds	r3, #10
 8001c8a:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001c8c:	7ffb      	ldrb	r3, [r7, #31]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	2002      	movs	r0, #2
 8001c92:	f7ff fc17 	bl	80014c4 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d106      	bne.n	8001caa <ssd1306_PrintRFMenu+0x5e>
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, Black);
 8001c9c:	4a51      	ldr	r2, [pc, #324]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	ca06      	ldmia	r2, {r1, r2}
 8001ca2:	4852      	ldr	r0, [pc, #328]	; (8001dec <ssd1306_PrintRFMenu+0x1a0>)
 8001ca4:	f7ff fbe8 	bl	8001478 <ssd1306_WriteString>
 8001ca8:	e005      	b.n	8001cb6 <ssd1306_PrintRFMenu+0x6a>
			}
			else{
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, White);
 8001caa:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001cac:	2301      	movs	r3, #1
 8001cae:	ca06      	ldmia	r2, {r1, r2}
 8001cb0:	484e      	ldr	r0, [pc, #312]	; (8001dec <ssd1306_PrintRFMenu+0x1a0>)
 8001cb2:	f7ff fbe1 	bl	8001478 <ssd1306_WriteString>
			}
		y += 10;
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
 8001cb8:	330a      	adds	r3, #10
 8001cba:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001cbc:	7ffb      	ldrb	r3, [r7, #31]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	f7ff fbff 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <ssd1306_PrintRFMenu+0x8e>
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, Black);
 8001ccc:	4a45      	ldr	r2, [pc, #276]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	ca06      	ldmia	r2, {r1, r2}
 8001cd2:	4847      	ldr	r0, [pc, #284]	; (8001df0 <ssd1306_PrintRFMenu+0x1a4>)
 8001cd4:	f7ff fbd0 	bl	8001478 <ssd1306_WriteString>
 8001cd8:	e005      	b.n	8001ce6 <ssd1306_PrintRFMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, White);
 8001cda:	4a42      	ldr	r2, [pc, #264]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001cdc:	2301      	movs	r3, #1
 8001cde:	ca06      	ldmia	r2, {r1, r2}
 8001ce0:	4843      	ldr	r0, [pc, #268]	; (8001df0 <ssd1306_PrintRFMenu+0x1a4>)
 8001ce2:	f7ff fbc9 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001ce6:	7ffb      	ldrb	r3, [r7, #31]
 8001ce8:	330a      	adds	r3, #10
 8001cea:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetCursor(2, y);
 8001cec:	7ffb      	ldrb	r3, [r7, #31]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7ff fbe7 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d106      	bne.n	8001d0a <ssd1306_PrintRFMenu+0xbe>
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, Black);
 8001cfc:	4a39      	ldr	r2, [pc, #228]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	ca06      	ldmia	r2, {r1, r2}
 8001d02:	483c      	ldr	r0, [pc, #240]	; (8001df4 <ssd1306_PrintRFMenu+0x1a8>)
 8001d04:	f7ff fbb8 	bl	8001478 <ssd1306_WriteString>
 8001d08:	e005      	b.n	8001d16 <ssd1306_PrintRFMenu+0xca>
		}
		else{
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, White);
 8001d0a:	4a36      	ldr	r2, [pc, #216]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	ca06      	ldmia	r2, {r1, r2}
 8001d10:	4838      	ldr	r0, [pc, #224]	; (8001df4 <ssd1306_PrintRFMenu+0x1a8>)
 8001d12:	f7ff fbb1 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
 8001d18:	330a      	adds	r3, #10
 8001d1a:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff fbcf 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==3){
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d106      	bne.n	8001d3a <ssd1306_PrintRFMenu+0xee>
	        ssd1306_WriteString("BER: 0.5", Font_7x10, Black);
 8001d2c:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	ca06      	ldmia	r2, {r1, r2}
 8001d32:	4831      	ldr	r0, [pc, #196]	; (8001df8 <ssd1306_PrintRFMenu+0x1ac>)
 8001d34:	f7ff fba0 	bl	8001478 <ssd1306_WriteString>
 8001d38:	e005      	b.n	8001d46 <ssd1306_PrintRFMenu+0xfa>
		}
		else{
	        ssd1306_WriteString("BER: 0.5", Font_7x10, White);
 8001d3a:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	ca06      	ldmia	r2, {r1, r2}
 8001d40:	482d      	ldr	r0, [pc, #180]	; (8001df8 <ssd1306_PrintRFMenu+0x1ac>)
 8001d42:	f7ff fb99 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	330a      	adds	r3, #10
 8001d4a:	77fb      	strb	r3, [r7, #31]

		

		ssd1306_SetCursor(2, y);
 8001d4c:	7ffb      	ldrb	r3, [r7, #31]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	2002      	movs	r0, #2
 8001d52:	f7ff fbb7 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==4){
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d106      	bne.n	8001d6a <ssd1306_PrintRFMenu+0x11e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	ca06      	ldmia	r2, {r1, r2}
 8001d62:	4826      	ldr	r0, [pc, #152]	; (8001dfc <ssd1306_PrintRFMenu+0x1b0>)
 8001d64:	f7ff fb88 	bl	8001478 <ssd1306_WriteString>
 8001d68:	e005      	b.n	8001d76 <ssd1306_PrintRFMenu+0x12a>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <ssd1306_PrintRFMenu+0x198>)
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	ca06      	ldmia	r2, {r1, r2}
 8001d70:	4822      	ldr	r0, [pc, #136]	; (8001dfc <ssd1306_PrintRFMenu+0x1b0>)
 8001d72:	f7ff fb81 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	330a      	adds	r3, #10
 8001d7a:	77fb      	strb	r3, [r7, #31]

		



		 if(value >= 2850 && value <= 2950){
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f640 3221 	movw	r2, #2849	; 0xb21
 8001d82:	4293      	cmp	r3, r2
 8001d84:	dd0c      	ble.n	8001da0 <ssd1306_PrintRFMenu+0x154>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f640 3286 	movw	r2, #2950	; 0xb86
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	dc07      	bgt.n	8001da0 <ssd1306_PrintRFMenu+0x154>
			strcpy(stringDirection, "DERECHA");
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <ssd1306_PrintRFMenu+0x1b4>)
 8001d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d9e:	e01b      	b.n	8001dd8 <ssd1306_PrintRFMenu+0x18c>
		}
		else if(value >= 1850 && value <= 1950){
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f240 7239 	movw	r2, #1849	; 0x739
 8001da6:	4293      	cmp	r3, r2
 8001da8:	dd0b      	ble.n	8001dc2 <ssd1306_PrintRFMenu+0x176>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f240 729e 	movw	r2, #1950	; 0x79e
 8001db0:	4293      	cmp	r3, r2
 8001db2:	dc06      	bgt.n	8001dc2 <ssd1306_PrintRFMenu+0x176>
			strcpy(stringDirection, "IZQUIERDA");
 8001db4:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <ssd1306_PrintRFMenu+0x1b8>)
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dbc:	c303      	stmia	r3!, {r0, r1}
 8001dbe:	801a      	strh	r2, [r3, #0]
 8001dc0:	e00a      	b.n	8001dd8 <ssd1306_PrintRFMenu+0x18c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <ssd1306_PrintRFMenu+0x1bc>)
 8001dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dcc:	6018      	str	r0, [r3, #0]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	8019      	strh	r1, [r3, #0]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	0c0a      	lsrs	r2, r1, #16
 8001dd6:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001dd8:	f7ff fa4a 	bl	8001270 <ssd1306_UpdateScreen>
}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000024 	.word	0x20000024
 8001de8:	08016e54 	.word	0x08016e54
 8001dec:	08016e60 	.word	0x08016e60
 8001df0:	08016e74 	.word	0x08016e74
 8001df4:	08016e88 	.word	0x08016e88
 8001df8:	08016e94 	.word	0x08016e94
 8001dfc:	08016e4c 	.word	0x08016e4c
 8001e00:	08016e14 	.word	0x08016e14
 8001e04:	08016e1c 	.word	0x08016e1c
 8001e08:	08016e28 	.word	0x08016e28

08001e0c <ssd1306_PrintSerialMenu>:

void ssd1306_PrintSerialMenu(int value, int indexMenu, int screen){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
		 uint8_t y = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	f107 0318 	add.w	r3, r7, #24
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff f9fc 	bl	8001228 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001e30:	7ffb      	ldrb	r3, [r7, #31]
 8001e32:	4619      	mov	r1, r3
 8001e34:	2023      	movs	r0, #35	; 0x23
 8001e36:	f7ff fb45 	bl	80014c4 <ssd1306_SetCursor>
	    ssd1306_WriteString("SERIAL", Font_7x10, White);
 8001e3a:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	ca06      	ldmia	r2, {r1, r2}
 8001e40:	4859      	ldr	r0, [pc, #356]	; (8001fa8 <ssd1306_PrintSerialMenu+0x19c>)
 8001e42:	f7ff fb19 	bl	8001478 <ssd1306_WriteString>
	    y += 10;
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	330a      	adds	r3, #10
 8001e4a:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001e4c:	7ffb      	ldrb	r3, [r7, #31]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	2002      	movs	r0, #2
 8001e52:	f7ff fb37 	bl	80014c4 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d106      	bne.n	8001e6a <ssd1306_PrintSerialMenu+0x5e>
				ssd1306_WriteString("Status: Connected", Font_7x10, Black);
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	ca06      	ldmia	r2, {r1, r2}
 8001e62:	4852      	ldr	r0, [pc, #328]	; (8001fac <ssd1306_PrintSerialMenu+0x1a0>)
 8001e64:	f7ff fb08 	bl	8001478 <ssd1306_WriteString>
 8001e68:	e005      	b.n	8001e76 <ssd1306_PrintSerialMenu+0x6a>
			}
			else{
				ssd1306_WriteString("Status: Disconnected", Font_7x10, White);
 8001e6a:	4a4e      	ldr	r2, [pc, #312]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	ca06      	ldmia	r2, {r1, r2}
 8001e70:	484f      	ldr	r0, [pc, #316]	; (8001fb0 <ssd1306_PrintSerialMenu+0x1a4>)
 8001e72:	f7ff fb01 	bl	8001478 <ssd1306_WriteString>
			}
		y += 10;
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	330a      	adds	r3, #10
 8001e7a:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001e7c:	7ffb      	ldrb	r3, [r7, #31]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	2002      	movs	r0, #2
 8001e82:	f7ff fb1f 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d106      	bne.n	8001e9a <ssd1306_PrintSerialMenu+0x8e>
	        ssd1306_WriteString("Command Test 1", Font_7x10, Black);
 8001e8c:	4a45      	ldr	r2, [pc, #276]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	ca06      	ldmia	r2, {r1, r2}
 8001e92:	4848      	ldr	r0, [pc, #288]	; (8001fb4 <ssd1306_PrintSerialMenu+0x1a8>)
 8001e94:	f7ff faf0 	bl	8001478 <ssd1306_WriteString>
 8001e98:	e005      	b.n	8001ea6 <ssd1306_PrintSerialMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Commando Test 1", Font_7x10, White);
 8001e9a:	4a42      	ldr	r2, [pc, #264]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	ca06      	ldmia	r2, {r1, r2}
 8001ea0:	4845      	ldr	r0, [pc, #276]	; (8001fb8 <ssd1306_PrintSerialMenu+0x1ac>)
 8001ea2:	f7ff fae9 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	330a      	adds	r3, #10
 8001eaa:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetCursor(2, y);
 8001eac:	7ffb      	ldrb	r3, [r7, #31]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7ff fb07 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d106      	bne.n	8001eca <ssd1306_PrintSerialMenu+0xbe>
	        ssd1306_WriteString("Command Test 2", Font_7x10, Black);
 8001ebc:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	ca06      	ldmia	r2, {r1, r2}
 8001ec2:	483e      	ldr	r0, [pc, #248]	; (8001fbc <ssd1306_PrintSerialMenu+0x1b0>)
 8001ec4:	f7ff fad8 	bl	8001478 <ssd1306_WriteString>
 8001ec8:	e005      	b.n	8001ed6 <ssd1306_PrintSerialMenu+0xca>
		}
		else{
	        ssd1306_WriteString("Commando Test 2", Font_7x10, White);
 8001eca:	4a36      	ldr	r2, [pc, #216]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001ecc:	2301      	movs	r3, #1
 8001ece:	ca06      	ldmia	r2, {r1, r2}
 8001ed0:	483b      	ldr	r0, [pc, #236]	; (8001fc0 <ssd1306_PrintSerialMenu+0x1b4>)
 8001ed2:	f7ff fad1 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
 8001ed8:	330a      	adds	r3, #10
 8001eda:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f7ff faef 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==3){
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d106      	bne.n	8001efa <ssd1306_PrintSerialMenu+0xee>
	        ssd1306_WriteString("Current: ", Font_7x10, Black);
 8001eec:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	ca06      	ldmia	r2, {r1, r2}
 8001ef2:	4834      	ldr	r0, [pc, #208]	; (8001fc4 <ssd1306_PrintSerialMenu+0x1b8>)
 8001ef4:	f7ff fac0 	bl	8001478 <ssd1306_WriteString>
 8001ef8:	e005      	b.n	8001f06 <ssd1306_PrintSerialMenu+0xfa>
		}
		else{
	        ssd1306_WriteString("Current: ", Font_7x10, White);
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001efc:	2301      	movs	r3, #1
 8001efe:	ca06      	ldmia	r2, {r1, r2}
 8001f00:	4830      	ldr	r0, [pc, #192]	; (8001fc4 <ssd1306_PrintSerialMenu+0x1b8>)
 8001f02:	f7ff fab9 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001f06:	7ffb      	ldrb	r3, [r7, #31]
 8001f08:	330a      	adds	r3, #10
 8001f0a:	77fb      	strb	r3, [r7, #31]



		ssd1306_SetCursor(2, y);
 8001f0c:	7ffb      	ldrb	r3, [r7, #31]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7ff fad7 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==4){
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d106      	bne.n	8001f2a <ssd1306_PrintSerialMenu+0x11e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	ca06      	ldmia	r2, {r1, r2}
 8001f22:	4829      	ldr	r0, [pc, #164]	; (8001fc8 <ssd1306_PrintSerialMenu+0x1bc>)
 8001f24:	f7ff faa8 	bl	8001478 <ssd1306_WriteString>
 8001f28:	e005      	b.n	8001f36 <ssd1306_PrintSerialMenu+0x12a>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <ssd1306_PrintSerialMenu+0x198>)
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	ca06      	ldmia	r2, {r1, r2}
 8001f30:	4825      	ldr	r0, [pc, #148]	; (8001fc8 <ssd1306_PrintSerialMenu+0x1bc>)
 8001f32:	f7ff faa1 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	330a      	adds	r3, #10
 8001f3a:	77fb      	strb	r3, [r7, #31]

		 if(value >= 2850 && value <= 2950){
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f640 3221 	movw	r2, #2849	; 0xb21
 8001f42:	4293      	cmp	r3, r2
 8001f44:	dd0c      	ble.n	8001f60 <ssd1306_PrintSerialMenu+0x154>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f640 3286 	movw	r2, #2950	; 0xb86
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	dc07      	bgt.n	8001f60 <ssd1306_PrintSerialMenu+0x154>
			strcpy(stringDirection, "DERECHA");
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <ssd1306_PrintSerialMenu+0x1c0>)
 8001f56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f5e:	e01b      	b.n	8001f98 <ssd1306_PrintSerialMenu+0x18c>
		}
		else if(value >= 1850 && value <= 1950){
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f240 7239 	movw	r2, #1849	; 0x739
 8001f66:	4293      	cmp	r3, r2
 8001f68:	dd0b      	ble.n	8001f82 <ssd1306_PrintSerialMenu+0x176>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001f70:	4293      	cmp	r3, r2
 8001f72:	dc06      	bgt.n	8001f82 <ssd1306_PrintSerialMenu+0x176>
			strcpy(stringDirection, "IZQUIERDA");
 8001f74:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <ssd1306_PrintSerialMenu+0x1c4>)
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f7c:	c303      	stmia	r3!, {r0, r1}
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	e00a      	b.n	8001f98 <ssd1306_PrintSerialMenu+0x18c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <ssd1306_PrintSerialMenu+0x1c8>)
 8001f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f8c:	6018      	str	r0, [r3, #0]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	8019      	strh	r1, [r3, #0]
 8001f92:	3302      	adds	r3, #2
 8001f94:	0c0a      	lsrs	r2, r1, #16
 8001f96:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001f98:	f7ff f96a 	bl	8001270 <ssd1306_UpdateScreen>
}
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000024 	.word	0x20000024
 8001fa8:	08016ea0 	.word	0x08016ea0
 8001fac:	08016ea8 	.word	0x08016ea8
 8001fb0:	08016ebc 	.word	0x08016ebc
 8001fb4:	08016ed4 	.word	0x08016ed4
 8001fb8:	08016ee4 	.word	0x08016ee4
 8001fbc:	08016ef4 	.word	0x08016ef4
 8001fc0:	08016f04 	.word	0x08016f04
 8001fc4:	08016f14 	.word	0x08016f14
 8001fc8:	08016e4c 	.word	0x08016e4c
 8001fcc:	08016e14 	.word	0x08016e14
 8001fd0:	08016e1c 	.word	0x08016e1c
 8001fd4:	08016e28 	.word	0x08016e28

08001fd8 <ssd1306_PrintCloudMenu>:

void ssd1306_PrintCloudMenu(int value, int indexMenu, int screen, char  IPv4, char  Gateway){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	70fb      	strb	r3, [r7, #3]
		 uint8_t y = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	f107 0318 	add.w	r3, r7, #24
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff f915 	bl	8001228 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	4619      	mov	r1, r3
 8002002:	2023      	movs	r0, #35	; 0x23
 8002004:	f7ff fa5e 	bl	80014c4 <ssd1306_SetCursor>
	    ssd1306_WriteString("CLOUD", Font_7x10, White);
 8002008:	4a61      	ldr	r2, [pc, #388]	; (8002190 <ssd1306_PrintCloudMenu+0x1b8>)
 800200a:	2301      	movs	r3, #1
 800200c:	ca06      	ldmia	r2, {r1, r2}
 800200e:	4861      	ldr	r0, [pc, #388]	; (8002194 <ssd1306_PrintCloudMenu+0x1bc>)
 8002010:	f7ff fa32 	bl	8001478 <ssd1306_WriteString>
	    y += 10;
 8002014:	7ffb      	ldrb	r3, [r7, #31]
 8002016:	330a      	adds	r3, #10
 8002018:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 800201a:	7ffb      	ldrb	r3, [r7, #31]
 800201c:	4619      	mov	r1, r3
 800201e:	2002      	movs	r0, #2
 8002020:	f7ff fa50 	bl	80014c4 <ssd1306_SetCursor>
			if(indexMenu==0){
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d115      	bne.n	8002056 <ssd1306_PrintCloudMenu+0x7e>
				ssd1306_WriteString("IPv4:", Font_7x10, Black);
 800202a:	4a59      	ldr	r2, [pc, #356]	; (8002190 <ssd1306_PrintCloudMenu+0x1b8>)
 800202c:	2300      	movs	r3, #0
 800202e:	ca06      	ldmia	r2, {r1, r2}
 8002030:	4859      	ldr	r0, [pc, #356]	; (8002198 <ssd1306_PrintCloudMenu+0x1c0>)
 8002032:	f7ff fa21 	bl	8001478 <ssd1306_WriteString>
				y += 10;
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	330a      	adds	r3, #10
 800203a:	77fb      	strb	r3, [r7, #31]
				ssd1306_SetCursor(2, y);
 800203c:	7ffb      	ldrb	r3, [r7, #31]
 800203e:	4619      	mov	r1, r3
 8002040:	2002      	movs	r0, #2
 8002042:	f7ff fa3f 	bl	80014c4 <ssd1306_SetCursor>
				ssd1306_WriteString(IPv4, Font_6x8, Black);
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	4618      	mov	r0, r3
 800204a:	4a54      	ldr	r2, [pc, #336]	; (800219c <ssd1306_PrintCloudMenu+0x1c4>)
 800204c:	2300      	movs	r3, #0
 800204e:	ca06      	ldmia	r2, {r1, r2}
 8002050:	f7ff fa12 	bl	8001478 <ssd1306_WriteString>
 8002054:	e014      	b.n	8002080 <ssd1306_PrintCloudMenu+0xa8>

			}
			else{
				ssd1306_WriteString("IPV4:", Font_7x10, White);
 8002056:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <ssd1306_PrintCloudMenu+0x1b8>)
 8002058:	2301      	movs	r3, #1
 800205a:	ca06      	ldmia	r2, {r1, r2}
 800205c:	4850      	ldr	r0, [pc, #320]	; (80021a0 <ssd1306_PrintCloudMenu+0x1c8>)
 800205e:	f7ff fa0b 	bl	8001478 <ssd1306_WriteString>
				y += 10;
 8002062:	7ffb      	ldrb	r3, [r7, #31]
 8002064:	330a      	adds	r3, #10
 8002066:	77fb      	strb	r3, [r7, #31]
				ssd1306_SetCursor(2, y);
 8002068:	7ffb      	ldrb	r3, [r7, #31]
 800206a:	4619      	mov	r1, r3
 800206c:	2002      	movs	r0, #2
 800206e:	f7ff fa29 	bl	80014c4 <ssd1306_SetCursor>
				ssd1306_WriteString(IPv4, Font_6x8, White);
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	4618      	mov	r0, r3
 8002076:	4a49      	ldr	r2, [pc, #292]	; (800219c <ssd1306_PrintCloudMenu+0x1c4>)
 8002078:	2301      	movs	r3, #1
 800207a:	ca06      	ldmia	r2, {r1, r2}
 800207c:	f7ff f9fc 	bl	8001478 <ssd1306_WriteString>
			}
		y += 10;
 8002080:	7ffb      	ldrb	r3, [r7, #31]
 8002082:	330a      	adds	r3, #10
 8002084:	77fb      	strb	r3, [r7, #31]
		
		ssd1306_SetCursor(2, y);
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	4619      	mov	r1, r3
 800208a:	2002      	movs	r0, #2
 800208c:	f7ff fa1a 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d116      	bne.n	80020c4 <ssd1306_PrintCloudMenu+0xec>
			ssd1306_WriteString("Gateway:", Font_7x10, Black);
 8002096:	4a3e      	ldr	r2, [pc, #248]	; (8002190 <ssd1306_PrintCloudMenu+0x1b8>)
 8002098:	2300      	movs	r3, #0
 800209a:	ca06      	ldmia	r2, {r1, r2}
 800209c:	4841      	ldr	r0, [pc, #260]	; (80021a4 <ssd1306_PrintCloudMenu+0x1cc>)
 800209e:	f7ff f9eb 	bl	8001478 <ssd1306_WriteString>
			y += 10;
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
 80020a4:	330a      	adds	r3, #10
 80020a6:	77fb      	strb	r3, [r7, #31]
			ssd1306_SetCursor(2, y);
 80020a8:	7ffb      	ldrb	r3, [r7, #31]
 80020aa:	4619      	mov	r1, r3
 80020ac:	2002      	movs	r0, #2
 80020ae:	f7ff fa09 	bl	80014c4 <ssd1306_SetCursor>
			ssd1306_WriteString(Gateway, Font_6x8, Black);	
 80020b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020b6:	4618      	mov	r0, r3
 80020b8:	4a38      	ldr	r2, [pc, #224]	; (800219c <ssd1306_PrintCloudMenu+0x1c4>)
 80020ba:	2300      	movs	r3, #0
 80020bc:	ca06      	ldmia	r2, {r1, r2}
 80020be:	f7ff f9db 	bl	8001478 <ssd1306_WriteString>
 80020c2:	e015      	b.n	80020f0 <ssd1306_PrintCloudMenu+0x118>
		}
		else{
		ssd1306_WriteString("Gateway:", Font_7x10, White);
 80020c4:	4a32      	ldr	r2, [pc, #200]	; (8002190 <ssd1306_PrintCloudMenu+0x1b8>)
 80020c6:	2301      	movs	r3, #1
 80020c8:	ca06      	ldmia	r2, {r1, r2}
 80020ca:	4836      	ldr	r0, [pc, #216]	; (80021a4 <ssd1306_PrintCloudMenu+0x1cc>)
 80020cc:	f7ff f9d4 	bl	8001478 <ssd1306_WriteString>
			y += 10;
 80020d0:	7ffb      	ldrb	r3, [r7, #31]
 80020d2:	330a      	adds	r3, #10
 80020d4:	77fb      	strb	r3, [r7, #31]
			ssd1306_SetCursor(2, y);
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	4619      	mov	r1, r3
 80020da:	2002      	movs	r0, #2
 80020dc:	f7ff f9f2 	bl	80014c4 <ssd1306_SetCursor>
			ssd1306_WriteString(Gateway, Font_6x8, White);
 80020e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020e4:	4618      	mov	r0, r3
 80020e6:	4a2d      	ldr	r2, [pc, #180]	; (800219c <ssd1306_PrintCloudMenu+0x1c4>)
 80020e8:	2301      	movs	r3, #1
 80020ea:	ca06      	ldmia	r2, {r1, r2}
 80020ec:	f7ff f9c4 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 80020f0:	7ffb      	ldrb	r3, [r7, #31]
 80020f2:	330a      	adds	r3, #10
 80020f4:	77fb      	strb	r3, [r7, #31]
		}
		y += 10; */

		

		ssd1306_SetCursor(2, y);
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
 80020f8:	4619      	mov	r1, r3
 80020fa:	2002      	movs	r0, #2
 80020fc:	f7ff f9e2 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d106      	bne.n	8002114 <ssd1306_PrintCloudMenu+0x13c>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <ssd1306_PrintCloudMenu+0x1b8>)
 8002108:	2300      	movs	r3, #0
 800210a:	ca06      	ldmia	r2, {r1, r2}
 800210c:	4826      	ldr	r0, [pc, #152]	; (80021a8 <ssd1306_PrintCloudMenu+0x1d0>)
 800210e:	f7ff f9b3 	bl	8001478 <ssd1306_WriteString>
 8002112:	e005      	b.n	8002120 <ssd1306_PrintCloudMenu+0x148>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8002114:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <ssd1306_PrintCloudMenu+0x1b8>)
 8002116:	2301      	movs	r3, #1
 8002118:	ca06      	ldmia	r2, {r1, r2}
 800211a:	4823      	ldr	r0, [pc, #140]	; (80021a8 <ssd1306_PrintCloudMenu+0x1d0>)
 800211c:	f7ff f9ac 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8002120:	7ffb      	ldrb	r3, [r7, #31]
 8002122:	330a      	adds	r3, #10
 8002124:	77fb      	strb	r3, [r7, #31]


		 if(value >= 2850 && value <= 2950){
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f640 3221 	movw	r2, #2849	; 0xb21
 800212c:	4293      	cmp	r3, r2
 800212e:	dd0c      	ble.n	800214a <ssd1306_PrintCloudMenu+0x172>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f640 3286 	movw	r2, #2950	; 0xb86
 8002136:	4293      	cmp	r3, r2
 8002138:	dc07      	bgt.n	800214a <ssd1306_PrintCloudMenu+0x172>
			strcpy(stringDirection, "DERECHA");
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <ssd1306_PrintCloudMenu+0x1d4>)
 8002140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002144:	e883 0003 	stmia.w	r3, {r0, r1}
 8002148:	e01b      	b.n	8002182 <ssd1306_PrintCloudMenu+0x1aa>
		}
		else if(value >= 1850 && value <= 1950){
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f240 7239 	movw	r2, #1849	; 0x739
 8002150:	4293      	cmp	r3, r2
 8002152:	dd0b      	ble.n	800216c <ssd1306_PrintCloudMenu+0x194>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f240 729e 	movw	r2, #1950	; 0x79e
 800215a:	4293      	cmp	r3, r2
 800215c:	dc06      	bgt.n	800216c <ssd1306_PrintCloudMenu+0x194>
			strcpy(stringDirection, "IZQUIERDA");
 800215e:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <ssd1306_PrintCloudMenu+0x1d8>)
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	ca07      	ldmia	r2, {r0, r1, r2}
 8002166:	c303      	stmia	r3!, {r0, r1}
 8002168:	801a      	strh	r2, [r3, #0]
 800216a:	e00a      	b.n	8002182 <ssd1306_PrintCloudMenu+0x1aa>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <ssd1306_PrintCloudMenu+0x1dc>)
 8002172:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002176:	6018      	str	r0, [r3, #0]
 8002178:	3304      	adds	r3, #4
 800217a:	8019      	strh	r1, [r3, #0]
 800217c:	3302      	adds	r3, #2
 800217e:	0c0a      	lsrs	r2, r1, #16
 8002180:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8002182:	f7ff f875 	bl	8001270 <ssd1306_UpdateScreen>
}
 8002186:	bf00      	nop
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000024 	.word	0x20000024
 8002194:	08016f20 	.word	0x08016f20
 8002198:	08016f28 	.word	0x08016f28
 800219c:	2000001c 	.word	0x2000001c
 80021a0:	08016f30 	.word	0x08016f30
 80021a4:	08016f38 	.word	0x08016f38
 80021a8:	08016e4c 	.word	0x08016e4c
 80021ac:	08016e14 	.word	0x08016e14
 80021b0:	08016e1c 	.word	0x08016e1c
 80021b4:	08016e28 	.word	0x08016e28

080021b8 <ssd1306_PrintSettingsMenu>:

void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff f826 	bl	8001228 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80021dc:	7ffb      	ldrb	r3, [r7, #31]
 80021de:	4619      	mov	r1, r3
 80021e0:	2002      	movs	r0, #2
 80021e2:	f7ff f96f 	bl	80014c4 <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 80021e6:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <ssd1306_PrintSettingsMenu+0x138>)
 80021e8:	2301      	movs	r3, #1
 80021ea:	ca06      	ldmia	r2, {r1, r2}
 80021ec:	4841      	ldr	r0, [pc, #260]	; (80022f4 <ssd1306_PrintSettingsMenu+0x13c>)
 80021ee:	f7ff f943 	bl	8001478 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
 80021f4:	3314      	adds	r3, #20
 80021f6:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80021f8:	7ffb      	ldrb	r3, [r7, #31]
 80021fa:	4619      	mov	r1, r3
 80021fc:	2002      	movs	r0, #2
 80021fe:	f7ff f961 	bl	80014c4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <ssd1306_PrintSettingsMenu+0x5e>
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, Black);
 8002208:	4a3b      	ldr	r2, [pc, #236]	; (80022f8 <ssd1306_PrintSettingsMenu+0x140>)
 800220a:	2300      	movs	r3, #0
 800220c:	ca06      	ldmia	r2, {r1, r2}
 800220e:	483b      	ldr	r0, [pc, #236]	; (80022fc <ssd1306_PrintSettingsMenu+0x144>)
 8002210:	f7ff f932 	bl	8001478 <ssd1306_WriteString>
 8002214:	e005      	b.n	8002222 <ssd1306_PrintSettingsMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, White);
 8002216:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <ssd1306_PrintSettingsMenu+0x140>)
 8002218:	2301      	movs	r3, #1
 800221a:	ca06      	ldmia	r2, {r1, r2}
 800221c:	4837      	ldr	r0, [pc, #220]	; (80022fc <ssd1306_PrintSettingsMenu+0x144>)
 800221e:	f7ff f92b 	bl	8001478 <ssd1306_WriteString>
	    }
		y += 10;
 8002222:	7ffb      	ldrb	r3, [r7, #31]
 8002224:	330a      	adds	r3, #10
 8002226:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8002228:	7ffb      	ldrb	r3, [r7, #31]
 800222a:	4619      	mov	r1, r3
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff f949 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d106      	bne.n	8002246 <ssd1306_PrintSettingsMenu+0x8e>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 8002238:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <ssd1306_PrintSettingsMenu+0x140>)
 800223a:	2300      	movs	r3, #0
 800223c:	ca06      	ldmia	r2, {r1, r2}
 800223e:	4830      	ldr	r0, [pc, #192]	; (8002300 <ssd1306_PrintSettingsMenu+0x148>)
 8002240:	f7ff f91a 	bl	8001478 <ssd1306_WriteString>
 8002244:	e005      	b.n	8002252 <ssd1306_PrintSettingsMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 8002246:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <ssd1306_PrintSettingsMenu+0x140>)
 8002248:	2301      	movs	r3, #1
 800224a:	ca06      	ldmia	r2, {r1, r2}
 800224c:	482c      	ldr	r0, [pc, #176]	; (8002300 <ssd1306_PrintSettingsMenu+0x148>)
 800224e:	f7ff f913 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8002252:	7ffb      	ldrb	r3, [r7, #31]
 8002254:	330a      	adds	r3, #10
 8002256:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8002258:	7ffb      	ldrb	r3, [r7, #31]
 800225a:	4619      	mov	r1, r3
 800225c:	2002      	movs	r0, #2
 800225e:	f7ff f931 	bl	80014c4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d106      	bne.n	8002276 <ssd1306_PrintSettingsMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8002268:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <ssd1306_PrintSettingsMenu+0x140>)
 800226a:	2300      	movs	r3, #0
 800226c:	ca06      	ldmia	r2, {r1, r2}
 800226e:	4825      	ldr	r0, [pc, #148]	; (8002304 <ssd1306_PrintSettingsMenu+0x14c>)
 8002270:	f7ff f902 	bl	8001478 <ssd1306_WriteString>
 8002274:	e005      	b.n	8002282 <ssd1306_PrintSettingsMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8002276:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <ssd1306_PrintSettingsMenu+0x140>)
 8002278:	2301      	movs	r3, #1
 800227a:	ca06      	ldmia	r2, {r1, r2}
 800227c:	4821      	ldr	r0, [pc, #132]	; (8002304 <ssd1306_PrintSettingsMenu+0x14c>)
 800227e:	f7ff f8fb 	bl	8001478 <ssd1306_WriteString>
		}
		y += 10;
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	330a      	adds	r3, #10
 8002286:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f640 3221 	movw	r2, #2849	; 0xb21
 800228e:	4293      	cmp	r3, r2
 8002290:	dd0c      	ble.n	80022ac <ssd1306_PrintSettingsMenu+0xf4>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f640 3286 	movw	r2, #2950	; 0xb86
 8002298:	4293      	cmp	r3, r2
 800229a:	dc07      	bgt.n	80022ac <ssd1306_PrintSettingsMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <ssd1306_PrintSettingsMenu+0x150>)
 80022a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80022aa:	e01b      	b.n	80022e4 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f240 7239 	movw	r2, #1849	; 0x739
 80022b2:	4293      	cmp	r3, r2
 80022b4:	dd0b      	ble.n	80022ce <ssd1306_PrintSettingsMenu+0x116>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f240 729e 	movw	r2, #1950	; 0x79e
 80022bc:	4293      	cmp	r3, r2
 80022be:	dc06      	bgt.n	80022ce <ssd1306_PrintSettingsMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 80022c0:	4a12      	ldr	r2, [pc, #72]	; (800230c <ssd1306_PrintSettingsMenu+0x154>)
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80022c8:	c303      	stmia	r3!, {r0, r1}
 80022ca:	801a      	strh	r2, [r3, #0]
 80022cc:	e00a      	b.n	80022e4 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <ssd1306_PrintSettingsMenu+0x158>)
 80022d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d8:	6018      	str	r0, [r3, #0]
 80022da:	3304      	adds	r3, #4
 80022dc:	8019      	strh	r1, [r3, #0]
 80022de:	3302      	adds	r3, #2
 80022e0:	0c0a      	lsrs	r2, r1, #16
 80022e2:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 80022e4:	f7fe ffc4 	bl	8001270 <ssd1306_UpdateScreen>
}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000002c 	.word	0x2000002c
 80022f4:	08016e08 	.word	0x08016e08
 80022f8:	20000024 	.word	0x20000024
 80022fc:	08016f44 	.word	0x08016f44
 8002300:	08016f54 	.word	0x08016f54
 8002304:	08016e4c 	.word	0x08016e4c
 8002308:	08016e14 	.word	0x08016e14
 800230c:	08016e1c 	.word	0x08016e1c
 8002310:	08016e28 	.word	0x08016e28

08002314 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen, char IPv4, char Gateway) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	70fb      	strb	r3, [r7, #3]
	if (screen==1){
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <ssd1306_DisplayAnalogValue+0x20>
			   ssd1306_PrintDashboardMenu(value, indexMenu, screen);
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fa9d 	bl	800186c <ssd1306_PrintDashboardMenu>
 8002332:	e035      	b.n	80023a0 <ssd1306_DisplayAnalogValue+0x8c>
		}
	else if (screen==2){
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d105      	bne.n	8002346 <ssd1306_DisplayAnalogValue+0x32>
		   ssd1306_PrintEnergyMenu(value, indexMenu, screen);
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff fbd6 	bl	8001af0 <ssd1306_PrintEnergyMenu>
 8002344:	e02c      	b.n	80023a0 <ssd1306_DisplayAnalogValue+0x8c>
	}
	else if (screen==3){
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d105      	bne.n	8002358 <ssd1306_DisplayAnalogValue+0x44>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff ff31 	bl	80021b8 <ssd1306_PrintSettingsMenu>
 8002356:	e023      	b.n	80023a0 <ssd1306_DisplayAnalogValue+0x8c>
	}else if (screen==4){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b04      	cmp	r3, #4
 800235c:	d105      	bne.n	800236a <ssd1306_DisplayAnalogValue+0x56>
		   ssd1306_PrintRFMenu(value, indexMenu, screen);
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff fc72 	bl	8001c4c <ssd1306_PrintRFMenu>
 8002368:	e01a      	b.n	80023a0 <ssd1306_DisplayAnalogValue+0x8c>
	}
	else if (screen==5){
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d109      	bne.n	8002384 <ssd1306_DisplayAnalogValue+0x70>
		   ssd1306_PrintCloudMenu(value, indexMenu, screen, IPv4, Gateway);
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	7e3b      	ldrb	r3, [r7, #24]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	4613      	mov	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff fe2b 	bl	8001fd8 <ssd1306_PrintCloudMenu>
 8002382:	e00d      	b.n	80023a0 <ssd1306_DisplayAnalogValue+0x8c>
	}
	else if (screen==6){
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b06      	cmp	r3, #6
 8002388:	d105      	bne.n	8002396 <ssd1306_DisplayAnalogValue+0x82>
		  ssd1306_PrintSerialMenu(value, indexMenu, screen);
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff fd3c 	bl	8001e0c <ssd1306_PrintSerialMenu>
 8002394:	e004      	b.n	80023a0 <ssd1306_DisplayAnalogValue+0x8c>
		}
	else{
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff f988 	bl	80016b0 <ssd1306_PrintPrincipalMenu>
	}
    HAL_Delay(50);
 80023a0:	2032      	movs	r0, #50	; 0x32
 80023a2:	f000 fdb7 	bl	8002f14 <HAL_Delay>
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7fe ff36 	bl	8001228 <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 80023bc:	2301      	movs	r3, #1
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2340      	movs	r3, #64	; 0x40
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2348      	movs	r3, #72	; 0x48
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	2020      	movs	r0, #32
 80023cc:	f7ff f892 	bl	80014f4 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 80023d0:	f7fe ff4e 	bl	8001270 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 80023d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023d8:	f000 fd9c 	bl	8002f14 <HAL_Delay>

}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0801c1bc 	.word	0x0801c1bc

080023e8 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80023ec:	f7fe feb2 	bl	8001154 <ssd1306_Init>
    ssd1306_TestFonts1();
 80023f0:	f7ff f90c 	bl	800160c <ssd1306_TestFonts1>
    HAL_Delay(3000);
 80023f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023f8:	f000 fd8c 	bl	8002f14 <HAL_Delay>
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002404:	f7fe fea6 	bl	8001154 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8002408:	f7ff ffd2 	bl	80023b0 <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 800240c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002410:	f000 fd80 	bl	8002f14 <HAL_Delay>
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_MspInit+0x44>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_MspInit+0x44>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_MspInit+0x44>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_MspInit+0x44>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_MspInit+0x44>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_MspInit+0x44>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08c      	sub	sp, #48	; 0x30
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <HAL_ADC_MspInit+0xc8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d124      	bne.n	80024cc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_ADC_MspInit+0xcc>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a29      	ldr	r2, [pc, #164]	; (800252c <HAL_ADC_MspInit+0xcc>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_ADC_MspInit+0xcc>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_ADC_MspInit+0xcc>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a23      	ldr	r2, [pc, #140]	; (800252c <HAL_ADC_MspInit+0xcc>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_ADC_MspInit+0xcc>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024b2:	2310      	movs	r3, #16
 80024b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b6:	2303      	movs	r3, #3
 80024b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	481a      	ldr	r0, [pc, #104]	; (8002530 <HAL_ADC_MspInit+0xd0>)
 80024c6:	f003 f823 	bl	8005510 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024ca:	e028      	b.n	800251e <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_ADC_MspInit+0xd4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d123      	bne.n	800251e <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_ADC_MspInit+0xcc>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_ADC_MspInit+0xcc>)
 80024dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_ADC_MspInit+0xcc>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_ADC_MspInit+0xcc>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_ADC_MspInit+0xcc>)
 80024f4:	f043 0320 	orr.w	r3, r3, #32
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_ADC_MspInit+0xcc>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002506:	2320      	movs	r3, #32
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250a:	2303      	movs	r3, #3
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <HAL_ADC_MspInit+0xd8>)
 800251a:	f002 fff9 	bl	8005510 <HAL_GPIO_Init>
}
 800251e:	bf00      	nop
 8002520:	3730      	adds	r7, #48	; 0x30
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40012000 	.word	0x40012000
 800252c:	40023800 	.word	0x40023800
 8002530:	40020000 	.word	0x40020000
 8002534:	40012200 	.word	0x40012200
 8002538:	40021400 	.word	0x40021400

0800253c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0aa      	sub	sp, #168	; 0xa8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	2284      	movs	r2, #132	; 0x84
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f013 fa05 	bl	801596c <memset>
  if(hi2c->Instance==I2C2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <HAL_I2C_MspInit+0xb0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d13b      	bne.n	80025e4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800256c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002570:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002572:	2300      	movs	r3, #0
 8002574:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4618      	mov	r0, r3
 800257c:	f004 fc32 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002586:	f7fe fda6 	bl	80010d6 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_I2C_MspInit+0xb4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_I2C_MspInit+0xb4>)
 8002590:	f043 0320 	orr.w	r3, r3, #32
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_I2C_MspInit+0xb4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025a2:	2303      	movs	r3, #3
 80025a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a8:	2312      	movs	r3, #18
 80025aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025ba:	2304      	movs	r3, #4
 80025bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025c4:	4619      	mov	r1, r3
 80025c6:	480b      	ldr	r0, [pc, #44]	; (80025f4 <HAL_I2C_MspInit+0xb8>)
 80025c8:	f002 ffa2 	bl	8005510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_I2C_MspInit+0xb4>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_I2C_MspInit+0xb4>)
 80025d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_I2C_MspInit+0xb4>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025e4:	bf00      	nop
 80025e6:	37a8      	adds	r7, #168	; 0xa8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40005800 	.word	0x40005800
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40021400 	.word	0x40021400

080025f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0ac      	sub	sp, #176	; 0xb0
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	2284      	movs	r2, #132	; 0x84
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f013 f9a7 	bl	801596c <memset>
  if(huart->Instance==UART7)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a75      	ldr	r2, [pc, #468]	; (80027f8 <HAL_UART_MspInit+0x200>)
 8002624:	4293      	cmp	r3, r2
 8002626:	f040 80a1 	bne.w	800276c <HAL_UART_MspInit+0x174>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800262a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002630:	2300      	movs	r3, #0
 8002632:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002634:	f107 0318 	add.w	r3, r7, #24
 8002638:	4618      	mov	r0, r3
 800263a:	f004 fbd3 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002644:	f7fe fd47 	bl	80010d6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002648:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <HAL_UART_MspInit+0x204>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a6b      	ldr	r2, [pc, #428]	; (80027fc <HAL_UART_MspInit+0x204>)
 800264e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
 8002654:	4b69      	ldr	r3, [pc, #420]	; (80027fc <HAL_UART_MspInit+0x204>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002660:	4b66      	ldr	r3, [pc, #408]	; (80027fc <HAL_UART_MspInit+0x204>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a65      	ldr	r2, [pc, #404]	; (80027fc <HAL_UART_MspInit+0x204>)
 8002666:	f043 0320 	orr.w	r3, r3, #32
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	4b63      	ldr	r3, [pc, #396]	; (80027fc <HAL_UART_MspInit+0x204>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002678:	23c0      	movs	r3, #192	; 0xc0
 800267a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002690:	2308      	movs	r3, #8
 8002692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002696:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800269a:	4619      	mov	r1, r3
 800269c:	4858      	ldr	r0, [pc, #352]	; (8002800 <HAL_UART_MspInit+0x208>)
 800269e:	f002 ff37 	bl	8005510 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80026a2:	4b58      	ldr	r3, [pc, #352]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_UART_MspInit+0x210>)
 80026a6:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80026a8:	4b56      	ldr	r3, [pc, #344]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026aa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026ae:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b0:	4b54      	ldr	r3, [pc, #336]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b6:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026bc:	4b51      	ldr	r3, [pc, #324]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c2:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c4:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026dc:	4b49      	ldr	r3, [pc, #292]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80026e2:	4848      	ldr	r0, [pc, #288]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026e4:	f001 f9b2 	bl	8003a4c <HAL_DMA_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80026ee:	f7fe fcf2 	bl	80010d6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a43      	ldr	r2, [pc, #268]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026f6:	675a      	str	r2, [r3, #116]	; 0x74
 80026f8:	4a42      	ldr	r2, [pc, #264]	; (8002804 <HAL_UART_MspInit+0x20c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_UART_MspInit+0x214>)
 8002700:	4a43      	ldr	r2, [pc, #268]	; (8002810 <HAL_UART_MspInit+0x218>)
 8002702:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 8002704:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_UART_MspInit+0x214>)
 8002706:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800270a:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_UART_MspInit+0x214>)
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002712:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_UART_MspInit+0x214>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	4b3c      	ldr	r3, [pc, #240]	; (800280c <HAL_UART_MspInit+0x214>)
 800271a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800271e:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_UART_MspInit+0x214>)
 8002722:	2200      	movs	r2, #0
 8002724:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_UART_MspInit+0x214>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800272c:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_UART_MspInit+0x214>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002732:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_UART_MspInit+0x214>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_UART_MspInit+0x214>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800273e:	4833      	ldr	r0, [pc, #204]	; (800280c <HAL_UART_MspInit+0x214>)
 8002740:	f001 f984 	bl	8003a4c <HAL_DMA_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 800274a:	f7fe fcc4 	bl	80010d6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2e      	ldr	r2, [pc, #184]	; (800280c <HAL_UART_MspInit+0x214>)
 8002752:	671a      	str	r2, [r3, #112]	; 0x70
 8002754:	4a2d      	ldr	r2, [pc, #180]	; (800280c <HAL_UART_MspInit+0x214>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2052      	movs	r0, #82	; 0x52
 8002760:	f001 f905 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002764:	2052      	movs	r0, #82	; 0x52
 8002766:	f001 f91e 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800276a:	e041      	b.n	80027f0 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_UART_MspInit+0x21c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d13c      	bne.n	80027f0 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800277c:	2300      	movs	r3, #0
 800277e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002780:	f107 0318 	add.w	r3, r7, #24
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fb2d 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002790:	f7fe fca1 	bl	80010d6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_UART_MspInit+0x204>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_UART_MspInit+0x204>)
 800279a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_UART_MspInit+0x204>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <HAL_UART_MspInit+0x204>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_UART_MspInit+0x204>)
 80027b2:	f043 0308 	orr.w	r3, r3, #8
 80027b6:	6313      	str	r3, [r2, #48]	; 0x30
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_UART_MspInit+0x204>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80027c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027de:	2307      	movs	r3, #7
 80027e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027e8:	4619      	mov	r1, r3
 80027ea:	480b      	ldr	r0, [pc, #44]	; (8002818 <HAL_UART_MspInit+0x220>)
 80027ec:	f002 fe90 	bl	8005510 <HAL_GPIO_Init>
}
 80027f0:	bf00      	nop
 80027f2:	37b0      	adds	r7, #176	; 0xb0
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40007800 	.word	0x40007800
 80027fc:	40023800 	.word	0x40023800
 8002800:	40021400 	.word	0x40021400
 8002804:	20000418 	.word	0x20000418
 8002808:	40026058 	.word	0x40026058
 800280c:	20000478 	.word	0x20000478
 8002810:	40026028 	.word	0x40026028
 8002814:	40004800 	.word	0x40004800
 8002818:	40020c00 	.word	0x40020c00

0800281c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b0ac      	sub	sp, #176	; 0xb0
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002834:	f107 0318 	add.w	r3, r7, #24
 8002838:	2284      	movs	r2, #132	; 0x84
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f013 f895 	bl	801596c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284a:	d159      	bne.n	8002900 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800284c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002850:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	4618      	mov	r0, r3
 800285e:	f004 fac1 	bl	8006de4 <HAL_RCCEx_PeriphCLKConfig>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002868:	f7fe fc35 	bl	80010d6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_PCD_MspInit+0xec>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4a25      	ldr	r2, [pc, #148]	; (8002908 <HAL_PCD_MspInit+0xec>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6313      	str	r3, [r2, #48]	; 0x30
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <HAL_PCD_MspInit+0xec>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002884:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800289e:	230a      	movs	r3, #10
 80028a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028a8:	4619      	mov	r1, r3
 80028aa:	4818      	ldr	r0, [pc, #96]	; (800290c <HAL_PCD_MspInit+0xf0>)
 80028ac:	f002 fe30 	bl	8005510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80028b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80028c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028c8:	4619      	mov	r1, r3
 80028ca:	4810      	ldr	r0, [pc, #64]	; (800290c <HAL_PCD_MspInit+0xf0>)
 80028cc:	f002 fe20 	bl	8005510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <HAL_PCD_MspInit+0xec>)
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <HAL_PCD_MspInit+0xec>)
 80028d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028da:	6353      	str	r3, [r2, #52]	; 0x34
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_PCD_MspInit+0xec>)
 80028de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_PCD_MspInit+0xec>)
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_PCD_MspInit+0xec>)
 80028ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f2:	6453      	str	r3, [r2, #68]	; 0x44
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <HAL_PCD_MspInit+0xec>)
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002900:	bf00      	nop
 8002902:	37b0      	adds	r7, #176	; 0xb0
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	40020000 	.word	0x40020000

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <NMI_Handler+0x4>

08002916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <HardFault_Handler+0x4>

0800291c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <MemManage_Handler+0x4>

08002922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler+0x4>

0800292e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295c:	f000 faba 	bl	8002ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <DMA1_Stream1_IRQHandler+0x10>)
 800296a:	f001 f9af 	bl	8003ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000478 	.word	0x20000478

08002978 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <DMA1_Stream3_IRQHandler+0x10>)
 800297e:	f001 f9a5 	bl	8003ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000418 	.word	0x20000418

0800298c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <ETH_IRQHandler+0x10>)
 8002992:	f001 fed7 	bl	8004744 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200057d0 	.word	0x200057d0

080029a0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <UART7_IRQHandler+0x10>)
 80029a6:	f004 fefd 	bl	80077a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000308 	.word	0x20000308

080029b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return 1;
 80029b8:	2301      	movs	r3, #1
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_kill>:

int _kill(int pid, int sig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <_kill+0x20>)
 80029d0:	2216      	movs	r2, #22
 80029d2:	601a      	str	r2, [r3, #0]
  return -1;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	2000b1b8 	.word	0x2000b1b8

080029e8 <_exit>:

void _exit (int status)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ffe5 	bl	80029c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029fa:	e7fe      	b.n	80029fa <_exit+0x12>

080029fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e00a      	b.n	8002a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a0e:	f3af 8000 	nop.w
 8002a12:	4601      	mov	r1, r0
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	b2ca      	uxtb	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf0      	blt.n	8002a0e <_read+0x12>
  }

  return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <_isatty>:

int _isatty(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <_sbrk+0x5c>)
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <_sbrk+0x60>)
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <_sbrk+0x64>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <_sbrk+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d205      	bcs.n	8002adc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <_sbrk+0x6c>)
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	e009      	b.n	8002af0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <_sbrk+0x64>)
 8002aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	20050000 	.word	0x20050000
 8002b00:	00000400 	.word	0x00000400
 8002b04:	20000df8 	.word	0x20000df8
 8002b08:	2000b1c8 	.word	0x2000b1c8
 8002b0c:	2000b1b8 	.word	0x2000b1b8

08002b10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <SystemInit+0x20>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <SystemInit+0x20>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b38:	480d      	ldr	r0, [pc, #52]	; (8002b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b3a:	490e      	ldr	r1, [pc, #56]	; (8002b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b50:	4c0b      	ldr	r4, [pc, #44]	; (8002b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b5e:	f7ff ffd7 	bl	8002b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b62:	f012 fea7 	bl	80158b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b66:	f7fd fe11 	bl	800078c <main>
  bx  lr    
 8002b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b74:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002b78:	0801c678 	.word	0x0801c678
  ldr r2, =_sbss
 8002b7c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002b80:	2000b1c8 	.word	0x2000b1c8

08002b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>

08002b86 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <LAN8742_RegisterBusIO+0x28>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <LAN8742_RegisterBusIO+0x28>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <LAN8742_RegisterBusIO+0x28>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e014      	b.n	8002bde <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d17c      	bne.n	8002d04 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e01c      	b.n	8002c5e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f107 0208 	add.w	r2, r7, #8
 8002c2c:	2112      	movs	r1, #18
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	4798      	blx	r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da03      	bge.n	8002c40 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002c38:	f06f 0304 	mvn.w	r3, #4
 8002c3c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002c3e:	e00b      	b.n	8002c58 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d105      	bne.n	8002c58 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
         break;
 8002c56:	e005      	b.n	8002c64 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b1f      	cmp	r3, #31
 8002c62:	d9df      	bls.n	8002c24 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b1f      	cmp	r3, #31
 8002c6a:	d902      	bls.n	8002c72 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002c6c:	f06f 0302 	mvn.w	r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d145      	bne.n	8002d04 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6810      	ldr	r0, [r2, #0]
 8002c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c84:	2100      	movs	r1, #0
 8002c86:	4798      	blx	r3
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db37      	blt.n	8002cfe <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6810      	ldr	r0, [r2, #0]
 8002c96:	f107 0208 	add.w	r2, r7, #8
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4798      	blx	r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db28      	blt.n	8002cf6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4798      	blx	r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002cae:	e01c      	b.n	8002cea <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4798      	blx	r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cc2:	d80e      	bhi.n	8002ce2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6810      	ldr	r0, [r2, #0]
 8002ccc:	f107 0208 	add.w	r2, r7, #8
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4798      	blx	r3
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da07      	bge.n	8002cea <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002cda:	f06f 0304 	mvn.w	r3, #4
 8002cde:	613b      	str	r3, [r7, #16]
                 break;
 8002ce0:	e010      	b.n	8002d04 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002ce2:	f06f 0301 	mvn.w	r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
               break;
 8002ce8:	e00c      	b.n	8002d04 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1dd      	bne.n	8002cb0 <LAN8742_Init+0xc6>
 8002cf4:	e006      	b.n	8002d04 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002cf6:	f06f 0304 	mvn.w	r3, #4
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e002      	b.n	8002d04 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002cfe:	f06f 0303 	mvn.w	r3, #3
 8002d02:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d112      	bne.n	8002d30 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	4798      	blx	r3
 8002d10:	4603      	mov	r3, r0
 8002d12:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002d14:	bf00      	nop
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4798      	blx	r3
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d28:	d9f5      	bls.n	8002d16 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002d30:	693b      	ldr	r3, [r7, #16]
 }
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6810      	ldr	r0, [r2, #0]
 8002d4e:	f107 020c 	add.w	r2, r7, #12
 8002d52:	2101      	movs	r1, #1
 8002d54:	4798      	blx	r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da02      	bge.n	8002d62 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002d5c:	f06f 0304 	mvn.w	r3, #4
 8002d60:	e06e      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6810      	ldr	r0, [r2, #0]
 8002d6a:	f107 020c 	add.w	r2, r7, #12
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4798      	blx	r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da02      	bge.n	8002d7e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002d78:	f06f 0304 	mvn.w	r3, #4
 8002d7c:	e060      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e059      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6810      	ldr	r0, [r2, #0]
 8002d94:	f107 020c 	add.w	r2, r7, #12
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4798      	blx	r3
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	da02      	bge.n	8002da8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002da2:	f06f 0304 	mvn.w	r3, #4
 8002da6:	e04b      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d11b      	bne.n	8002dea <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <LAN8742_GetLinkState+0x90>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e03a      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e033      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002de2:	2304      	movs	r3, #4
 8002de4:	e02c      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002de6:	2305      	movs	r3, #5
 8002de8:	e02a      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6810      	ldr	r0, [r2, #0]
 8002df2:	f107 020c 	add.w	r2, r7, #12
 8002df6:	211f      	movs	r1, #31
 8002df8:	4798      	blx	r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	da02      	bge.n	8002e06 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002e00:	f06f 0304 	mvn.w	r3, #4
 8002e04:	e01c      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002e10:	2306      	movs	r3, #6
 8002e12:	e015      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 031c 	and.w	r3, r3, #28
 8002e1a:	2b18      	cmp	r3, #24
 8002e1c:	d101      	bne.n	8002e22 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e00e      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 031c 	and.w	r3, r3, #28
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d101      	bne.n	8002e30 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e007      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 031c 	and.w	r3, r3, #28
 8002e36:	2b14      	cmp	r3, #20
 8002e38:	d101      	bne.n	8002e3e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	e000      	b.n	8002e40 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002e3e:	2305      	movs	r3, #5
    }				
  }
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_Init+0x28>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <HAL_Init+0x28>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e58:	2003      	movs	r0, #3
 8002e5a:	f000 fd7d 	bl	8003958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f000 f808 	bl	8002e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e64:	f7ff fad8 	bl	8002418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023c00 	.word	0x40023c00

08002e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0x54>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_InitTick+0x58>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fd95 	bl	80039c2 <HAL_SYSTICK_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00e      	b.n	8002ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d80a      	bhi.n	8002ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f000 fd5d 	bl	800396e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <HAL_InitTick+0x5c>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000034 	.word	0x20000034
 8002ecc:	2000003c 	.word	0x2000003c
 8002ed0:	20000038 	.word	0x20000038

08002ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x20>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	2000003c 	.word	0x2000003c
 8002ef8:	20000dfc 	.word	0x20000dfc

08002efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return uwTick;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_GetTick+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000dfc 	.word	0x20000dfc

08002f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff ffee 	bl	8002efc <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d005      	beq.n	8002f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_Delay+0x44>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f3a:	bf00      	nop
 8002f3c:	f7ff ffde 	bl	8002efc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d8f7      	bhi.n	8002f3c <HAL_Delay+0x28>
  {
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2000003c 	.word	0x2000003c

08002f5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e031      	b.n	8002fd6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fa70 	bl	8002460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_ADC_Init+0x84>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fb0a 	bl	80035c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc6:	e001      	b.n	8002fcc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	ffffeefd 	.word	0xffffeefd

08002fe4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_Start+0x1a>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0ad      	b.n	800315a <HAL_ADC_Start+0x176>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d018      	beq.n	8003046 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003024:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_ADC_Start+0x184>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_ADC_Start+0x188>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0c9a      	lsrs	r2, r3, #18
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003038:	e002      	b.n	8003040 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3b01      	subs	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f9      	bne.n	800303a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d175      	bne.n	8003140 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003058:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_ADC_Start+0x18c>)
 800305a:	4013      	ands	r3, r2
 800305c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800307a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	d106      	bne.n	800309e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f023 0206 	bic.w	r2, r3, #6
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
 800309c:	e002      	b.n	80030a4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80030b6:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <HAL_ADC_Start+0x190>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d143      	bne.n	8003158 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e03a      	b.n	8003158 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a24      	ldr	r2, [pc, #144]	; (8003178 <HAL_ADC_Start+0x194>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10e      	bne.n	800310a <HAL_ADC_Start+0x126>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003108:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HAL_ADC_Start+0x190>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d120      	bne.n	8003158 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_ADC_Start+0x198>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d11b      	bne.n	8003158 <HAL_ADC_Start+0x174>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d114      	bne.n	8003158 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	e00b      	b.n	8003158 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000034 	.word	0x20000034
 800316c:	431bde83 	.word	0x431bde83
 8003170:	fffff8fe 	.word	0xfffff8fe
 8003174:	40012300 	.word	0x40012300
 8003178:	40012000 	.word	0x40012000
 800317c:	40012200 	.word	0x40012200

08003180 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_ADC_Stop+0x16>
 8003192:	2302      	movs	r3, #2
 8003194:	e01f      	b.n	80031d6 <HAL_ADC_Stop+0x56>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_ADC_Stop+0x64>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	ffffeefe 	.word	0xffffeefe

080031e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003204:	d113      	bne.n	800322e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003214:	d10b      	bne.n	800322e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e063      	b.n	80032f6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800322e:	f7ff fe65 	bl	8002efc <HAL_GetTick>
 8003232:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003234:	e021      	b.n	800327a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d01d      	beq.n	800327a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_ADC_PollForConversion+0x6c>
 8003244:	f7ff fe5a 	bl	8002efc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d212      	bcs.n	800327a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d00b      	beq.n	800327a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0204 	orr.w	r2, r3, #4
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e03d      	b.n	80032f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d1d6      	bne.n	8003236 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0212 	mvn.w	r2, #18
 8003290:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d123      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11f      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e136      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x28a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b09      	cmp	r3, #9
 8003342:	d93a      	bls.n	80033ba <HAL_ADC_ConfigChannel+0xa2>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800334c:	d035      	beq.n	80033ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68d9      	ldr	r1, [r3, #12]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	3b1e      	subs	r3, #30
 8003364:	2207      	movs	r2, #7
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	400a      	ands	r2, r1
 8003372:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a8d      	ldr	r2, [pc, #564]	; (80035b0 <HAL_ADC_ConfigChannel+0x298>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10a      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68d9      	ldr	r1, [r3, #12]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	061a      	lsls	r2, r3, #24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003392:	e035      	b.n	8003400 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4618      	mov	r0, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4403      	add	r3, r0
 80033ac:	3b1e      	subs	r3, #30
 80033ae:	409a      	lsls	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033b8:	e022      	b.n	8003400 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6919      	ldr	r1, [r3, #16]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	2207      	movs	r2, #7
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43da      	mvns	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	400a      	ands	r2, r1
 80033dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6919      	ldr	r1, [r3, #16]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4403      	add	r3, r0
 80033f6:	409a      	lsls	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d824      	bhi.n	8003452 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	3b05      	subs	r3, #5
 800341a:	221f      	movs	r2, #31
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43da      	mvns	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	400a      	ands	r2, r1
 8003428:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	4618      	mov	r0, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	3b05      	subs	r3, #5
 8003444:	fa00 f203 	lsl.w	r2, r0, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	635a      	str	r2, [r3, #52]	; 0x34
 8003450:	e04c      	b.n	80034ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d824      	bhi.n	80034a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	3b23      	subs	r3, #35	; 0x23
 800346c:	221f      	movs	r2, #31
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	400a      	ands	r2, r1
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	4618      	mov	r0, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	3b23      	subs	r3, #35	; 0x23
 8003496:	fa00 f203 	lsl.w	r2, r0, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
 80034a2:	e023      	b.n	80034ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	3b41      	subs	r3, #65	; 0x41
 80034b6:	221f      	movs	r2, #31
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43da      	mvns	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	400a      	ands	r2, r1
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b41      	subs	r3, #65	; 0x41
 80034e0:	fa00 f203 	lsl.w	r2, r0, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <HAL_ADC_ConfigChannel+0x29c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10a      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1f4>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034fe:	d105      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003506:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800350a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a28      	ldr	r2, [pc, #160]	; (80035b4 <HAL_ADC_ConfigChannel+0x29c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10f      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x21e>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b12      	cmp	r3, #18
 800351c:	d10b      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800351e:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003524:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003528:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003534:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_ADC_ConfigChannel+0x29c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d12b      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x280>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1a      	ldr	r2, [pc, #104]	; (80035b0 <HAL_ADC_ConfigChannel+0x298>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x23a>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b11      	cmp	r3, #17
 8003550:	d122      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003558:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800355c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800355e:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003564:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003568:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <HAL_ADC_ConfigChannel+0x298>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d111      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_ADC_ConfigChannel+0x2a4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a11      	ldr	r2, [pc, #68]	; (80035c0 <HAL_ADC_ConfigChannel+0x2a8>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0c9a      	lsrs	r2, r3, #18
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800358a:	e002      	b.n	8003592 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	10000012 	.word	0x10000012
 80035b4:	40012000 	.word	0x40012000
 80035b8:	40012300 	.word	0x40012300
 80035bc:	20000034 	.word	0x20000034
 80035c0:	431bde83 	.word	0x431bde83

080035c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035cc:	4b78      	ldr	r3, [pc, #480]	; (80037b0 <ADC_Init+0x1ec>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a77      	ldr	r2, [pc, #476]	; (80037b0 <ADC_Init+0x1ec>)
 80035d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80035d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80035d8:	4b75      	ldr	r3, [pc, #468]	; (80037b0 <ADC_Init+0x1ec>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4973      	ldr	r1, [pc, #460]	; (80037b0 <ADC_Init+0x1ec>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	021a      	lsls	r2, r3, #8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	4a58      	ldr	r2, [pc, #352]	; (80037b4 <ADC_Init+0x1f0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003666:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	e00f      	b.n	80036be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0202 	bic.w	r2, r2, #2
 80036cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	005a      	lsls	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800370a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	3b01      	subs	r3, #1
 8003718:	035a      	lsls	r2, r3, #13
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	e007      	b.n	8003734 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003732:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	3b01      	subs	r3, #1
 8003750:	051a      	lsls	r2, r3, #20
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003776:	025a      	lsls	r2, r3, #9
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	029a      	lsls	r2, r3, #10
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40012300 	.word	0x40012300
 80037b4:	0f000001 	.word	0x0f000001

080037b8 <__NVIC_SetPriorityGrouping>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <__NVIC_SetPriorityGrouping+0x40>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e6:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <__NVIC_SetPriorityGrouping+0x40>)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	60d3      	str	r3, [r2, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00
 80037fc:	05fa0000 	.word	0x05fa0000

08003800 <__NVIC_GetPriorityGrouping>:
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4907      	ldr	r1, [pc, #28]	; (8003854 <__NVIC_EnableIRQ+0x38>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	; (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <SysTick_Config>:
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003924:	d301      	bcc.n	800392a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003926:	2301      	movs	r3, #1
 8003928:	e00f      	b.n	800394a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <SysTick_Config+0x40>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003932:	210f      	movs	r1, #15
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	f7ff ff8e 	bl	8003858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <SysTick_Config+0x40>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003942:	4b04      	ldr	r3, [pc, #16]	; (8003954 <SysTick_Config+0x40>)
 8003944:	2207      	movs	r2, #7
 8003946:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	e000e010 	.word	0xe000e010

08003958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff29 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003980:	f7ff ff3e 	bl	8003800 <__NVIC_GetPriorityGrouping>
 8003984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7ff ff8e 	bl	80038ac <NVIC_EncodePriority>
 8003990:	4602      	mov	r2, r0
 8003992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff5d 	bl	8003858 <__NVIC_SetPriority>
}
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff31 	bl	800381c <__NVIC_EnableIRQ>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ffa2 	bl	8003914 <SysTick_Config>
 80039d0:	4603      	mov	r3, r0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80039e0:	f3bf 8f5f 	dmb	sy
}
 80039e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_MPU_Disable+0x28>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	4a06      	ldr	r2, [pc, #24]	; (8003a04 <HAL_MPU_Disable+0x28>)
 80039ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_MPU_Disable+0x2c>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	605a      	str	r2, [r3, #4]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000ed00 	.word	0xe000ed00
 8003a08:	e000ed90 	.word	0xe000ed90

08003a0c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <HAL_MPU_Enable+0x38>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_MPU_Enable+0x3c>)
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_MPU_Enable+0x3c>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003a2a:	f3bf 8f4f 	dsb	sy
}
 8003a2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a30:	f3bf 8f6f 	isb	sy
}
 8003a34:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed90 	.word	0xe000ed90
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff fa50 	bl	8002efc <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e099      	b.n	8003b9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a88:	e00f      	b.n	8003aaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8a:	f7ff fa37 	bl	8002efc <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d908      	bls.n	8003aaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e078      	b.n	8003b9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e8      	bne.n	8003a8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <HAL_DMA_Init+0x158>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d107      	bne.n	8003b14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0307 	bic.w	r3, r3, #7
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d117      	bne.n	8003b6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fa7b 	bl	800404c <DMA_CheckFifoParam>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e016      	b.n	8003b9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa32 	bl	8003fe0 <DMA_CalcBaseAndBitshift>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	223f      	movs	r2, #63	; 0x3f
 8003b86:	409a      	lsls	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	f010803f 	.word	0xf010803f

08003ba8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bb6:	f7ff f9a1 	bl	8002efc <HAL_GetTick>
 8003bba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d008      	beq.n	8003bda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2280      	movs	r2, #128	; 0x80
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e052      	b.n	8003c80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0216 	bic.w	r2, r2, #22
 8003be8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <HAL_DMA_Abort+0x62>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0208 	bic.w	r2, r2, #8
 8003c18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c2a:	e013      	b.n	8003c54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c2c:	f7ff f966 	bl	8002efc <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d90c      	bls.n	8003c54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2203      	movs	r2, #3
 8003c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e015      	b.n	8003c80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e4      	bne.n	8003c2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	223f      	movs	r2, #63	; 0x3f
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00c      	b.n	8003cc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2205      	movs	r2, #5
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003cd8:	4b8e      	ldr	r3, [pc, #568]	; (8003f14 <HAL_DMA_IRQHandler+0x248>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a8e      	ldr	r2, [pc, #568]	; (8003f18 <HAL_DMA_IRQHandler+0x24c>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0a9b      	lsrs	r3, r3, #10
 8003ce4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01a      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	2208      	movs	r2, #8
 8003d26:	409a      	lsls	r2, r3
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	f043 0201 	orr.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f043 0202 	orr.w	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	2204      	movs	r2, #4
 8003d74:	409a      	lsls	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d012      	beq.n	8003da4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00b      	beq.n	8003da4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	2204      	movs	r2, #4
 8003d92:	409a      	lsls	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f043 0204 	orr.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	2210      	movs	r2, #16
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d043      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d03c      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d018      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d108      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d024      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
 8003dfa:	e01f      	b.n	8003e3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01b      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
 8003e0c:	e016      	b.n	8003e3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0208 	bic.w	r2, r2, #8
 8003e2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	2220      	movs	r2, #32
 8003e42:	409a      	lsls	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 808f 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8087 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	2220      	movs	r2, #32
 8003e64:	409a      	lsls	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d136      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0216 	bic.w	r2, r2, #22
 8003e84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x1da>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0208 	bic.w	r2, r2, #8
 8003eb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	223f      	movs	r2, #63	; 0x3f
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d07e      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
        }
        return;
 8003ee2:	e079      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10d      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d031      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
 8003f10:	e02c      	b.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
 8003f12:	bf00      	nop
 8003f14:	20000034 	.word	0x20000034
 8003f18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d023      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e01e      	b.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0210 	bic.w	r2, r2, #16
 8003f4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d032      	beq.n	8003fda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d022      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2205      	movs	r2, #5
 8003f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d307      	bcc.n	8003fb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f2      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x2cc>
 8003fb2:	e000      	b.n	8003fb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
 8003fd6:	e000      	b.n	8003fda <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fd8:	bf00      	nop
    }
  }
}
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3b10      	subs	r3, #16
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <DMA_CalcBaseAndBitshift+0x60>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ffa:	4a12      	ldr	r2, [pc, #72]	; (8004044 <DMA_CalcBaseAndBitshift+0x64>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d908      	bls.n	8004020 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <DMA_CalcBaseAndBitshift+0x68>)
 8004016:	4013      	ands	r3, r2
 8004018:	1d1a      	adds	r2, r3, #4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	659a      	str	r2, [r3, #88]	; 0x58
 800401e:	e006      	b.n	800402e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <DMA_CalcBaseAndBitshift+0x68>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	aaaaaaab 	.word	0xaaaaaaab
 8004044:	0801c414 	.word	0x0801c414
 8004048:	fffffc00 	.word	0xfffffc00

0800404c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d11f      	bne.n	80040a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d856      	bhi.n	800411a <DMA_CheckFifoParam+0xce>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <DMA_CheckFifoParam+0x28>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	08004097 	.word	0x08004097
 800407c:	08004085 	.word	0x08004085
 8004080:	0800411b 	.word	0x0800411b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d046      	beq.n	800411e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004094:	e043      	b.n	800411e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800409e:	d140      	bne.n	8004122 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a4:	e03d      	b.n	8004122 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ae:	d121      	bne.n	80040f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d837      	bhi.n	8004126 <DMA_CheckFifoParam+0xda>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <DMA_CheckFifoParam+0x70>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040cd 	.word	0x080040cd
 80040c0:	080040d3 	.word	0x080040d3
 80040c4:	080040cd 	.word	0x080040cd
 80040c8:	080040e5 	.word	0x080040e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e030      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d025      	beq.n	800412a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e2:	e022      	b.n	800412a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ec:	d11f      	bne.n	800412e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040f2:	e01c      	b.n	800412e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d903      	bls.n	8004102 <DMA_CheckFifoParam+0xb6>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d003      	beq.n	8004108 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004100:	e018      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
      break;
 8004106:	e015      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00e      	beq.n	8004132 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      break;
 8004118:	e00b      	b.n	8004132 <DMA_CheckFifoParam+0xe6>
      break;
 800411a:	bf00      	nop
 800411c:	e00a      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 800411e:	bf00      	nop
 8004120:	e008      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 8004122:	bf00      	nop
 8004124:	e006      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e004      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e002      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;   
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
    }
  } 
  
  return status; 
 8004134:	7bfb      	ldrb	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e06a      	b.n	800422c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2223      	movs	r2, #35	; 0x23
 8004164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f005 fab1 	bl	80096d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416e:	4b31      	ldr	r3, [pc, #196]	; (8004234 <HAL_ETH_Init+0xf0>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	4a30      	ldr	r2, [pc, #192]	; (8004234 <HAL_ETH_Init+0xf0>)
 8004174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004178:	6453      	str	r3, [r2, #68]	; 0x44
 800417a:	4b2e      	ldr	r3, [pc, #184]	; (8004234 <HAL_ETH_Init+0xf0>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <HAL_ETH_Init+0xf4>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <HAL_ETH_Init+0xf4>)
 800418c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004190:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004192:	4b29      	ldr	r3, [pc, #164]	; (8004238 <HAL_ETH_Init+0xf4>)
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	4927      	ldr	r1, [pc, #156]	; (8004238 <HAL_ETH_Init+0xf4>)
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_ETH_Init+0xf4>)
 80041a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041bc:	f7fe fe9e 	bl	8002efc <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80041c2:	e011      	b.n	80041e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80041c4:	f7fe fe9a 	bl	8002efc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041d2:	d909      	bls.n	80041e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2204      	movs	r2, #4
 80041d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	22e0      	movs	r2, #224	; 0xe0
 80041e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e021      	b.n	800422c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e4      	bne.n	80041c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fee4 	bl	8004fc8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 ff8b 	bl	800511c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 ffe1 	bl	80051ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	461a      	mov	r2, r3
 8004212:	2100      	movs	r1, #0
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 ff49 	bl	80050ac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2210      	movs	r2, #16
 8004226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40023800 	.word	0x40023800
 8004238:	40013800 	.word	0x40013800

0800423c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424a:	2b10      	cmp	r3, #16
 800424c:	d150      	bne.n	80042f0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2223      	movs	r2, #35	; 0x23
 8004252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2204      	movs	r2, #4
 800425a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f9fd 	bl	800465c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800427a:	2001      	movs	r0, #1
 800427c:	f7fe fe4a 	bl	8002f14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0204 	orr.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80042a0:	2001      	movs	r0, #1
 80042a2:	f7fe fe37 	bl	8002f14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fd2a 	bl	8004d08 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042ca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	f043 0302 	orr.w	r3, r3, #2
 80042de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2223      	movs	r2, #35	; 0x23
 80042e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004308:	2b23      	cmp	r3, #35	; 0x23
 800430a:	d14a      	bne.n	80043a2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2223      	movs	r2, #35	; 0x23
 8004310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800432a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	f023 0302 	bic.w	r3, r3, #2
 800433e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004342:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0204 	bic.w	r2, r2, #4
 8004352:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800435c:	2001      	movs	r0, #1
 800435e:	f7fe fdd9 	bl	8002f14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fccc 	bl	8004d08 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0208 	bic.w	r2, r2, #8
 800437e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004388:	2001      	movs	r0, #1
 800438a:	f7fe fdc3 	bl	8002f14 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2210      	movs	r2, #16
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e07c      	b.n	80044cc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d8:	2b23      	cmp	r3, #35	; 0x23
 80043da:	d176      	bne.n	80044ca <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80043dc:	2200      	movs	r2, #0
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 ff61 	bl	80052a8 <ETH_Prepare_Tx_Descriptors>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f043 0202 	orr.w	r2, r3, #2
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e065      	b.n	80044cc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8004400:	f3bf 8f4f 	dsb	sy
}
 8004404:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3206      	adds	r2, #6
 800440e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004412:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	629a      	str	r2, [r3, #40]	; 0x28
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	2b03      	cmp	r3, #3
 8004424:	d904      	bls.n	8004430 <HAL_ETH_Transmit+0x84>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	1f1a      	subs	r2, r3, #4
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3106      	adds	r1, #6
 800443c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004440:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004444:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8004446:	f7fe fd59 	bl	8002efc <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800444c:	e037      	b.n	80044be <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d011      	beq.n	8004484 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	f043 0208 	orr.w	r2, r3, #8
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e023      	b.n	80044cc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d018      	beq.n	80044be <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7fe fd36 	bl	8002efc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <HAL_ETH_Transmit+0xf6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	f043 0204 	orr.w	r2, r3, #4
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80044b8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e006      	b.n	80044cc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	dbc3      	blt.n	800444e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
  }
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d109      	bne.n	8004500 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0a8      	b.n	8004652 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004506:	2b23      	cmp	r3, #35	; 0x23
 8004508:	d001      	beq.n	800450e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e0a1      	b.n	8004652 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	3212      	adds	r2, #18
 800451a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004524:	f1c3 0304 	rsb	r3, r3, #4
 8004528:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800452a:	e06a      	b.n	8004602 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <HAL_ETH_ReadData+0x88>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d040      	beq.n	80045de <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004590:	3b04      	subs	r3, #4
 8004592:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80045b8:	461a      	mov	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f005 fa51 	bl	8009a64 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	441a      	add	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2200      	movs	r2, #0
 80045dc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3301      	adds	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d902      	bls.n	80045f0 <HAL_ETH_ReadData+0x11c>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3b04      	subs	r3, #4
 80045ee:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	3212      	adds	r2, #18
 80045f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	3301      	adds	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	db06      	blt.n	8004618 <HAL_ETH_ReadData+0x144>
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	d202      	bcs.n	8004618 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d089      	beq.n	800452c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f815 	bl	800465c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d108      	bne.n	8004650 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
}
 8004652:	4618      	mov	r0, r3
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004668:	2301      	movs	r3, #1
 800466a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004670:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	3212      	adds	r2, #18
 8004678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004682:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004684:	e040      	b.n	8004708 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d112      	bne.n	80046b4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	4618      	mov	r0, r3
 8004694:	f005 f9b6 	bl	8009a04 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	74fb      	strb	r3, [r7, #19]
 80046a2:	e007      	b.n	80046b4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	461a      	mov	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	461a      	mov	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d026      	beq.n	8004708 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <ETH_UpdateDescriptor+0xe4>)
 80046c6:	605a      	str	r2, [r3, #4]
 80046c8:	e003      	b.n	80046d2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80046d0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80046d2:	f3bf 8f5f 	dmb	sy
}
 80046d6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3301      	adds	r3, #1
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d902      	bls.n	80046f6 <ETH_UpdateDescriptor+0x9a>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3b04      	subs	r3, #4
 80046f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	3212      	adds	r2, #18
 80046fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004700:	617b      	str	r3, [r7, #20]
      desccount--;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	3b01      	subs	r3, #1
 8004706:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <ETH_UpdateDescriptor+0xb8>
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1b8      	bne.n	8004686 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	429a      	cmp	r2, r3
 800471c:	d00c      	beq.n	8004738 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004726:	461a      	mov	r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004738:	bf00      	nop
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	80004600 	.word	0x80004600

08004744 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	d112      	bne.n	8004784 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d109      	bne.n	8004784 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004778:	461a      	mov	r2, r3
 800477a:	4b50      	ldr	r3, [pc, #320]	; (80048bc <HAL_ETH_IRQHandler+0x178>)
 800477c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8ac 	bl	80048dc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b01      	cmp	r3, #1
 8004794:	d113      	bne.n	80047be <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d10a      	bne.n	80047be <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b0:	461a      	mov	r2, r3
 80047b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80047b6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f885 	bl	80048c8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	d14c      	bne.n	800486c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e4:	d142      	bne.n	800486c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f043 0208 	orr.w	r2, r3, #8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004808:	d11a      	bne.n	8004840 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <HAL_ETH_IRQHandler+0x17c>)
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004830:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004834:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	22e0      	movs	r2, #224	; 0xe0
 800483a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800483e:	e012      	b.n	8004866 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	f248 6380 	movw	r3, #34432	; 0x8680
 800484e:	4013      	ands	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485e:	461a      	mov	r2, r3
 8004860:	f248 6380 	movw	r3, #34432	; 0x8680
 8004864:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f842 	bl	80048f0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b08      	cmp	r3, #8
 8004878:	d10e      	bne.n	8004898 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f83a 	bl	8004904 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_ETH_IRQHandler+0x180>)
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d006      	beq.n	80048b2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80048a4:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <HAL_ETH_IRQHandler+0x180>)
 80048a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048aa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f833 	bl	8004918 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	00010040 	.word	0x00010040
 80048c0:	007e2000 	.word	0x007e2000
 80048c4:	40013c00 	.word	0x40013c00

080048c8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 031c 	and.w	r3, r3, #28
 8004948:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	02db      	lsls	r3, r3, #11
 800494e:	b29b      	uxth	r3, r3
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	019b      	lsls	r3, r3, #6
 800495a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0302 	bic.w	r3, r3, #2
 800496a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800497c:	f7fe fabe 	bl	8002efc <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004982:	e00d      	b.n	80049a0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004984:	f7fe faba 	bl	8002efc <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004992:	d301      	bcc.n	8004998 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e010      	b.n	80049ba <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1ec      	bne.n	8004984 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f003 031c 	and.w	r3, r3, #28
 80049de:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	02db      	lsls	r3, r3, #11
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	019b      	lsls	r3, r3, #6
 80049f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a1c:	f7fe fa6e 	bl	8002efc <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a22:	e00d      	b.n	8004a40 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004a24:	f7fe fa6a 	bl	8002efc <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a32:	d301      	bcc.n	8004a38 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e009      	b.n	8004a4c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ec      	bne.n	8004a24 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0d9      	b.n	8004c1c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf14      	ite	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	2300      	moveq	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bf0c      	ite	eq
 8004ad6:	2301      	moveq	r3, #1
 8004ad8:	2300      	movne	r3, #0
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bf14      	ite	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	2300      	moveq	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e00b      	b.n	8004c54 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d105      	bne.n	8004c52 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f883 	bl	8004d54 <ETH_SetMACConfig>

    return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e000      	b.n	8004c54 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
  }
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 031c 	bic.w	r3, r3, #28
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004c74:	f002 f882 	bl	8006d7c <HAL_RCC_GetHCLKFreq>
 8004c78:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d908      	bls.n	8004c94 <HAL_ETH_SetMDIOClockRange+0x38>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d804      	bhi.n	8004c94 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f043 0308 	orr.w	r3, r3, #8
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e027      	b.n	8004ce4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d908      	bls.n	8004cae <HAL_ETH_SetMDIOClockRange+0x52>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d204      	bcs.n	8004cae <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f043 030c 	orr.w	r3, r3, #12
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e01a      	b.n	8004ce4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d303      	bcc.n	8004cbe <HAL_ETH_SetMDIOClockRange+0x62>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d911      	bls.n	8004ce2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d908      	bls.n	8004cd8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d804      	bhi.n	8004cd8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f043 0304 	orr.w	r3, r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e005      	b.n	8004ce4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f043 0310 	orr.w	r3, r3, #16
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e000      	b.n	8004ce4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004ce2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	611a      	str	r2, [r3, #16]
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	01312cff 	.word	0x01312cff
 8004cf8:	02160ebf 	.word	0x02160ebf
 8004cfc:	03938700 	.word	0x03938700
 8004d00:	05f5e0ff 	.word	0x05f5e0ff
 8004d04:	08f0d17f 	.word	0x08f0d17f

08004d08 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d2a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f7fe f8eb 	bl	8002f14 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d48:	6193      	str	r3, [r2, #24]
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4b51      	ldr	r3, [pc, #324]	; (8004eb0 <ETH_SetMACConfig+0x15c>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	7c1b      	ldrb	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <ETH_SetMACConfig+0x28>
 8004d76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d7a:	e000      	b.n	8004d7e <ETH_SetMACConfig+0x2a>
 8004d7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	7c5b      	ldrb	r3, [r3, #17]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <ETH_SetMACConfig+0x38>
 8004d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d8a:	e000      	b.n	8004d8e <ETH_SetMACConfig+0x3a>
 8004d8c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004d8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004d94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	7fdb      	ldrb	r3, [r3, #31]
 8004d9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004d9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004da2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	7f92      	ldrb	r2, [r2, #30]
 8004da8:	2a00      	cmp	r2, #0
 8004daa:	d102      	bne.n	8004db2 <ETH_SetMACConfig+0x5e>
 8004dac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004db0:	e000      	b.n	8004db4 <ETH_SetMACConfig+0x60>
 8004db2:	2200      	movs	r2, #0
                        macconf->Speed |
 8004db4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	7f1b      	ldrb	r3, [r3, #28]
 8004dba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004dbc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004dc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	791b      	ldrb	r3, [r3, #4]
 8004dc8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004dca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004dd2:	2a00      	cmp	r2, #0
 8004dd4:	d102      	bne.n	8004ddc <ETH_SetMACConfig+0x88>
 8004dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dda:	e000      	b.n	8004dde <ETH_SetMACConfig+0x8a>
 8004ddc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004dde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	7bdb      	ldrb	r3, [r3, #15]
 8004de4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004de6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004dec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004df6:	4313      	orrs	r3, r2
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f7fe f880 	bl	8002f14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004e3a:	2a00      	cmp	r2, #0
 8004e3c:	d101      	bne.n	8004e42 <ETH_SetMACConfig+0xee>
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	e000      	b.n	8004e44 <ETH_SetMACConfig+0xf0>
 8004e42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004e44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004e4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004e52:	2a01      	cmp	r2, #1
 8004e54:	d101      	bne.n	8004e5a <ETH_SetMACConfig+0x106>
 8004e56:	2208      	movs	r2, #8
 8004e58:	e000      	b.n	8004e5c <ETH_SetMACConfig+0x108>
 8004e5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004e5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004e64:	2a01      	cmp	r2, #1
 8004e66:	d101      	bne.n	8004e6c <ETH_SetMACConfig+0x118>
 8004e68:	2204      	movs	r2, #4
 8004e6a:	e000      	b.n	8004e6e <ETH_SetMACConfig+0x11a>
 8004e6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004e6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004e76:	2a01      	cmp	r2, #1
 8004e78:	d101      	bne.n	8004e7e <ETH_SetMACConfig+0x12a>
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	e000      	b.n	8004e80 <ETH_SetMACConfig+0x12c>
 8004e7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004e80:	4313      	orrs	r3, r2
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f7fe f83b 	bl	8002f14 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	ff20810f 	.word	0xff20810f

08004eb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4b3d      	ldr	r3, [pc, #244]	; (8004fc4 <ETH_SetDMAConfig+0x110>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	7b1b      	ldrb	r3, [r3, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <ETH_SetDMAConfig+0x2c>
 8004eda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ede:	e000      	b.n	8004ee2 <ETH_SetDMAConfig+0x2e>
 8004ee0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	7b5b      	ldrb	r3, [r3, #13]
 8004ee6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ee8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	7f52      	ldrb	r2, [r2, #29]
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	d102      	bne.n	8004ef8 <ETH_SetDMAConfig+0x44>
 8004ef2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ef6:	e000      	b.n	8004efa <ETH_SetDMAConfig+0x46>
 8004ef8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004efa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	7b9b      	ldrb	r3, [r3, #14]
 8004f00:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004f02:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004f08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	7f1b      	ldrb	r3, [r3, #28]
 8004f0e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004f10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	7f9b      	ldrb	r3, [r3, #30]
 8004f16:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004f18:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004f1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f26:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f7fd ffe2 	bl	8002f14 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	791b      	ldrb	r3, [r3, #4]
 8004f62:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004f68:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004f6e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004f74:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f7c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004f7e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004f86:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004f8c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f9a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f7fd ffb3 	bl	8002f14 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6013      	str	r3, [r2, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	f8de3f23 	.word	0xf8de3f23

08004fc8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b0a6      	sub	sp, #152	; 0x98
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005004:	2300      	movs	r3, #0
 8005006:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005008:	2300      	movs	r3, #0
 800500a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800500e:	2300      	movs	r3, #0
 8005010:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005012:	2300      	movs	r3, #0
 8005014:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005024:	2300      	movs	r3, #0
 8005026:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800502a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800502e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005034:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005036:	2300      	movs	r3, #0
 8005038:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800503c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff fe86 	bl	8004d54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005048:	2301      	movs	r3, #1
 800504a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800504c:	2301      	movs	r3, #1
 800504e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005056:	2301      	movs	r3, #1
 8005058:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800505e:	2300      	movs	r3, #0
 8005060:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800506a:	2300      	movs	r3, #0
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005074:	2301      	movs	r3, #1
 8005076:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800507c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800507e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005082:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005088:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005090:	2300      	movs	r3, #0
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005094:	2300      	movs	r3, #0
 8005096:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005098:	f107 0308 	add.w	r3, r7, #8
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff ff08 	bl	8004eb4 <ETH_SetDMAConfig>
}
 80050a4:	bf00      	nop
 80050a6:	3798      	adds	r7, #152	; 0x98
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3305      	adds	r3, #5
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	3204      	adds	r2, #4
 80050c4:	7812      	ldrb	r2, [r2, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <ETH_MACAddressConfig+0x68>)
 80050ce:	4413      	add	r3, r2
 80050d0:	461a      	mov	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3303      	adds	r3, #3
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	061a      	lsls	r2, r3, #24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3302      	adds	r3, #2
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3301      	adds	r3, #1
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	4313      	orrs	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <ETH_MACAddressConfig+0x6c>)
 80050fe:	4413      	add	r3, r2
 8005100:	461a      	mov	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	6013      	str	r3, [r2, #0]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40028040 	.word	0x40028040
 8005118:	40028044 	.word	0x40028044

0800511c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e03e      	b.n	80051a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68d9      	ldr	r1, [r3, #12]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	440b      	add	r3, r1
 800513a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2200      	movs	r2, #0
 8005146:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2200      	movs	r2, #0
 800514c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2200      	movs	r2, #0
 8005152:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	3206      	adds	r2, #6
 800515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d80c      	bhi.n	800518c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68d9      	ldr	r1, [r3, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	440b      	add	r3, r1
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	e004      	b.n	8005196 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	461a      	mov	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3301      	adds	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d9bd      	bls.n	800512a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c0:	611a      	str	r2, [r3, #16]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e046      	b.n	800526a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6919      	ldr	r1, [r3, #16]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2200      	movs	r2, #0
 8005204:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2200      	movs	r2, #0
 800520a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005218:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8005220:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	3212      	adds	r2, #18
 8005236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d80c      	bhi.n	800525a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6919      	ldr	r1, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	440b      	add	r3, r1
 8005252:	461a      	mov	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	60da      	str	r2, [r3, #12]
 8005258:	e004      	b.n	8005264 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	461a      	mov	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d9b5      	bls.n	80051dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529a:	60da      	str	r2, [r3, #12]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b08d      	sub	sp, #52	; 0x34
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3318      	adds	r3, #24
 80052b8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ea:	d007      	beq.n	80052fc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	3304      	adds	r3, #4
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80052fc:	2302      	movs	r3, #2
 80052fe:	e0ff      	b.n	8005500 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	3301      	adds	r3, #1
 8005304:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b7d      	ldr	r3, [pc, #500]	; (800550c <ETH_Prepare_Tx_Descriptors+0x264>)
 8005316:	4013      	ands	r3, r2
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	6852      	ldr	r2, [r2, #4]
 800531c:	431a      	orrs	r2, r3
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	431a      	orrs	r2, r3
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	431a      	orrs	r2, r3
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005382:	f3bf 8f5f 	dmb	sy
}
 8005386:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005394:	e082      	b.n	800549c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e005      	b.n	80053c2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	3301      	adds	r3, #1
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d902      	bls.n	80053d4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	3b04      	subs	r3, #4
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053dc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f6:	d007      	beq.n	8005408 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	3304      	adds	r3, #4
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d029      	beq.n	800545c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005414:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005416:	2300      	movs	r3, #0
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
 800541a:	e019      	b.n	8005450 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800541c:	f3bf 8f5f 	dmb	sy
}
 8005420:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	3301      	adds	r3, #1
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	2b03      	cmp	r3, #3
 8005438:	d902      	bls.n	8005440 <ETH_Prepare_Tx_Descriptors+0x198>
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	3b04      	subs	r3, #4
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005448:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	3301      	adds	r3, #1
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	429a      	cmp	r2, r3
 8005456:	d3e1      	bcc.n	800541c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005458:	2302      	movs	r3, #2
 800545a:	e051      	b.n	8005500 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	3301      	adds	r3, #1
 8005460:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4b25      	ldr	r3, [pc, #148]	; (800550c <ETH_Prepare_Tx_Descriptors+0x264>)
 8005478:	4013      	ands	r3, r2
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	6852      	ldr	r2, [r2, #4]
 800547e:	431a      	orrs	r2, r3
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	3301      	adds	r3, #1
 8005488:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800548a:	f3bf 8f5f 	dmb	sy
}
 800548e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f47f af78 	bne.w	8005396 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e005      	b.n	80054c6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	3304      	adds	r3, #4
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80054e8:	b672      	cpsid	i
}
 80054ea:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	4413      	add	r3, r2
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80054fa:	b662      	cpsie	i
}
 80054fc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3734      	adds	r7, #52	; 0x34
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	ffffe000 	.word	0xffffe000

08005510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005510:	b480      	push	{r7}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005526:	2300      	movs	r3, #0
 8005528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	e175      	b.n	800581c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005530:	2201      	movs	r2, #1
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	429a      	cmp	r2, r3
 800554a:	f040 8164 	bne.w	8005816 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b01      	cmp	r3, #1
 8005558:	d005      	beq.n	8005566 <HAL_GPIO_Init+0x56>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d130      	bne.n	80055c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	2203      	movs	r2, #3
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4313      	orrs	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800559c:	2201      	movs	r2, #1
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 0201 	and.w	r2, r3, #1
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d017      	beq.n	8005604 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	2203      	movs	r2, #3
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d123      	bne.n	8005658 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	08da      	lsrs	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3208      	adds	r2, #8
 8005618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	220f      	movs	r2, #15
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	08da      	lsrs	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3208      	adds	r2, #8
 8005652:	69b9      	ldr	r1, [r7, #24]
 8005654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	2203      	movs	r2, #3
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	43db      	mvns	r3, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4013      	ands	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 0203 	and.w	r2, r3, #3
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80be 	beq.w	8005816 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800569a:	4b66      	ldr	r3, [pc, #408]	; (8005834 <HAL_GPIO_Init+0x324>)
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	4a65      	ldr	r2, [pc, #404]	; (8005834 <HAL_GPIO_Init+0x324>)
 80056a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056a4:	6453      	str	r3, [r2, #68]	; 0x44
 80056a6:	4b63      	ldr	r3, [pc, #396]	; (8005834 <HAL_GPIO_Init+0x324>)
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056b2:	4a61      	ldr	r2, [pc, #388]	; (8005838 <HAL_GPIO_Init+0x328>)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	089b      	lsrs	r3, r3, #2
 80056b8:	3302      	adds	r3, #2
 80056ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	220f      	movs	r2, #15
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43db      	mvns	r3, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4013      	ands	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a58      	ldr	r2, [pc, #352]	; (800583c <HAL_GPIO_Init+0x32c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d037      	beq.n	800574e <HAL_GPIO_Init+0x23e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a57      	ldr	r2, [pc, #348]	; (8005840 <HAL_GPIO_Init+0x330>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d031      	beq.n	800574a <HAL_GPIO_Init+0x23a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a56      	ldr	r2, [pc, #344]	; (8005844 <HAL_GPIO_Init+0x334>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d02b      	beq.n	8005746 <HAL_GPIO_Init+0x236>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a55      	ldr	r2, [pc, #340]	; (8005848 <HAL_GPIO_Init+0x338>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d025      	beq.n	8005742 <HAL_GPIO_Init+0x232>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a54      	ldr	r2, [pc, #336]	; (800584c <HAL_GPIO_Init+0x33c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d01f      	beq.n	800573e <HAL_GPIO_Init+0x22e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a53      	ldr	r2, [pc, #332]	; (8005850 <HAL_GPIO_Init+0x340>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d019      	beq.n	800573a <HAL_GPIO_Init+0x22a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a52      	ldr	r2, [pc, #328]	; (8005854 <HAL_GPIO_Init+0x344>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_GPIO_Init+0x226>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a51      	ldr	r2, [pc, #324]	; (8005858 <HAL_GPIO_Init+0x348>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00d      	beq.n	8005732 <HAL_GPIO_Init+0x222>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a50      	ldr	r2, [pc, #320]	; (800585c <HAL_GPIO_Init+0x34c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <HAL_GPIO_Init+0x21e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a4f      	ldr	r2, [pc, #316]	; (8005860 <HAL_GPIO_Init+0x350>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d101      	bne.n	800572a <HAL_GPIO_Init+0x21a>
 8005726:	2309      	movs	r3, #9
 8005728:	e012      	b.n	8005750 <HAL_GPIO_Init+0x240>
 800572a:	230a      	movs	r3, #10
 800572c:	e010      	b.n	8005750 <HAL_GPIO_Init+0x240>
 800572e:	2308      	movs	r3, #8
 8005730:	e00e      	b.n	8005750 <HAL_GPIO_Init+0x240>
 8005732:	2307      	movs	r3, #7
 8005734:	e00c      	b.n	8005750 <HAL_GPIO_Init+0x240>
 8005736:	2306      	movs	r3, #6
 8005738:	e00a      	b.n	8005750 <HAL_GPIO_Init+0x240>
 800573a:	2305      	movs	r3, #5
 800573c:	e008      	b.n	8005750 <HAL_GPIO_Init+0x240>
 800573e:	2304      	movs	r3, #4
 8005740:	e006      	b.n	8005750 <HAL_GPIO_Init+0x240>
 8005742:	2303      	movs	r3, #3
 8005744:	e004      	b.n	8005750 <HAL_GPIO_Init+0x240>
 8005746:	2302      	movs	r3, #2
 8005748:	e002      	b.n	8005750 <HAL_GPIO_Init+0x240>
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <HAL_GPIO_Init+0x240>
 800574e:	2300      	movs	r3, #0
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	f002 0203 	and.w	r2, r2, #3
 8005756:	0092      	lsls	r2, r2, #2
 8005758:	4093      	lsls	r3, r2
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005760:	4935      	ldr	r1, [pc, #212]	; (8005838 <HAL_GPIO_Init+0x328>)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	089b      	lsrs	r3, r3, #2
 8005766:	3302      	adds	r3, #2
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800576e:	4b3d      	ldr	r3, [pc, #244]	; (8005864 <HAL_GPIO_Init+0x354>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	43db      	mvns	r3, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4013      	ands	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005792:	4a34      	ldr	r2, [pc, #208]	; (8005864 <HAL_GPIO_Init+0x354>)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005798:	4b32      	ldr	r3, [pc, #200]	; (8005864 <HAL_GPIO_Init+0x354>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4013      	ands	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057bc:	4a29      	ldr	r2, [pc, #164]	; (8005864 <HAL_GPIO_Init+0x354>)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057c2:	4b28      	ldr	r3, [pc, #160]	; (8005864 <HAL_GPIO_Init+0x354>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	43db      	mvns	r3, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4013      	ands	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057e6:	4a1f      	ldr	r2, [pc, #124]	; (8005864 <HAL_GPIO_Init+0x354>)
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057ec:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <HAL_GPIO_Init+0x354>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005810:	4a14      	ldr	r2, [pc, #80]	; (8005864 <HAL_GPIO_Init+0x354>)
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3301      	adds	r3, #1
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b0f      	cmp	r3, #15
 8005820:	f67f ae86 	bls.w	8005530 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	3724      	adds	r7, #36	; 0x24
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40023800 	.word	0x40023800
 8005838:	40013800 	.word	0x40013800
 800583c:	40020000 	.word	0x40020000
 8005840:	40020400 	.word	0x40020400
 8005844:	40020800 	.word	0x40020800
 8005848:	40020c00 	.word	0x40020c00
 800584c:	40021000 	.word	0x40021000
 8005850:	40021400 	.word	0x40021400
 8005854:	40021800 	.word	0x40021800
 8005858:	40021c00 	.word	0x40021c00
 800585c:	40022000 	.word	0x40022000
 8005860:	40022400 	.word	0x40022400
 8005864:	40013c00 	.word	0x40013c00

08005868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	807b      	strh	r3, [r7, #2]
 8005874:	4613      	mov	r3, r2
 8005876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005878:	787b      	ldrb	r3, [r7, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800587e:	887a      	ldrh	r2, [r7, #2]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005884:	e003      	b.n	800588e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005886:	887b      	ldrh	r3, [r7, #2]
 8005888:	041a      	lsls	r2, r3, #16
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	619a      	str	r2, [r3, #24]
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e07f      	b.n	80059ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc fe3a 	bl	800253c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2224      	movs	r2, #36	; 0x24
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d107      	bne.n	8005916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	e006      	b.n	8005924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d104      	bne.n	8005936 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6859      	ldr	r1, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_I2C_Init+0x11c>)
 8005942:	430b      	orrs	r3, r1
 8005944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69d9      	ldr	r1, [r3, #28]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	02008000 	.word	0x02008000

080059bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	4608      	mov	r0, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	461a      	mov	r2, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	817b      	strh	r3, [r7, #10]
 80059ce:	460b      	mov	r3, r1
 80059d0:	813b      	strh	r3, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b20      	cmp	r3, #32
 80059e0:	f040 80f9 	bne.w	8005bd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_I2C_Mem_Write+0x34>
 80059ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0ed      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_I2C_Mem_Write+0x4e>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e0e6      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x21c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a12:	f7fd fa73 	bl	8002efc <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	2319      	movs	r3, #25
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f955 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0d1      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2221      	movs	r2, #33	; 0x21
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a3a      	ldr	r2, [r7, #32]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a5c:	88f8      	ldrh	r0, [r7, #6]
 8005a5e:	893a      	ldrh	r2, [r7, #8]
 8005a60:	8979      	ldrh	r1, [r7, #10]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f8b9 	bl	8005be4 <I2C_RequestMemoryWrite>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0a9      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2bff      	cmp	r3, #255	; 0xff
 8005a8c:	d90e      	bls.n	8005aac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	22ff      	movs	r2, #255	; 0xff
 8005a92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	8979      	ldrh	r1, [r7, #10]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fab1 	bl	800600c <I2C_TransferConfig>
 8005aaa:	e00f      	b.n	8005acc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	8979      	ldrh	r1, [r7, #10]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 faa0 	bl	800600c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f93f 	bl	8005d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e07b      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d034      	beq.n	8005b84 <HAL_I2C_Mem_Write+0x1c8>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d130      	bne.n	8005b84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f8d1 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e04d      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2bff      	cmp	r3, #255	; 0xff
 8005b44:	d90e      	bls.n	8005b64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	22ff      	movs	r2, #255	; 0xff
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	8979      	ldrh	r1, [r7, #10]
 8005b54:	2300      	movs	r3, #0
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fa55 	bl	800600c <I2C_TransferConfig>
 8005b62:	e00f      	b.n	8005b84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	8979      	ldrh	r1, [r7, #10]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fa44 	bl	800600c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d19e      	bne.n	8005acc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f91e 	bl	8005dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e01a      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <HAL_I2C_Mem_Write+0x224>)
 8005bb6:	400b      	ands	r3, r1
 8005bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e000      	b.n	8005bd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	fe00e800 	.word	0xfe00e800

08005be4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	817b      	strh	r3, [r7, #10]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	813b      	strh	r3, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	8979      	ldrh	r1, [r7, #10]
 8005c04:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <I2C_RequestMemoryWrite+0xa4>)
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f9fd 	bl	800600c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	69b9      	ldr	r1, [r7, #24]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f89c 	bl	8005d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e02c      	b.n	8005c80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d105      	bne.n	8005c38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2c:	893b      	ldrh	r3, [r7, #8]
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	629a      	str	r2, [r3, #40]	; 0x28
 8005c36:	e015      	b.n	8005c64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c38:	893b      	ldrh	r3, [r7, #8]
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	69b9      	ldr	r1, [r7, #24]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f882 	bl	8005d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e012      	b.n	8005c80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c5a:	893b      	ldrh	r3, [r7, #8]
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2180      	movs	r1, #128	; 0x80
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f830 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	80002000 	.word	0x80002000

08005c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d103      	bne.n	8005caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d007      	beq.n	8005cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	619a      	str	r2, [r3, #24]
  }
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce4:	e022      	b.n	8005d2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d01e      	beq.n	8005d2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fd f905 	bl	8002efc <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e00f      	b.n	8005d4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4013      	ands	r3, r2
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2301      	moveq	r3, #1
 8005d3e:	2300      	movne	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d0cd      	beq.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d60:	e02c      	b.n	8005dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f870 	bl	8005e4c <I2C_IsErrorOccurred>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e02a      	b.n	8005dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d01e      	beq.n	8005dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7fd f8bd 	bl	8002efc <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d113      	bne.n	8005dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e007      	b.n	8005dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d1cb      	bne.n	8005d62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005de0:	e028      	b.n	8005e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f830 	bl	8005e4c <I2C_IsErrorOccurred>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e026      	b.n	8005e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df6:	f7fd f881 	bl	8002efc <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d302      	bcc.n	8005e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d113      	bne.n	8005e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e007      	b.n	8005e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d1cf      	bne.n	8005de2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	; 0x28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d068      	beq.n	8005f4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2210      	movs	r2, #16
 8005e7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e80:	e049      	b.n	8005f16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d045      	beq.n	8005f16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e8a:	f7fd f837 	bl	8002efc <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d302      	bcc.n	8005ea0 <I2C_IsErrorOccurred+0x54>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d13a      	bne.n	8005f16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec2:	d121      	bne.n	8005f08 <I2C_IsErrorOccurred+0xbc>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eca:	d01d      	beq.n	8005f08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d01a      	beq.n	8005f08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ee0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ee2:	f7fd f80b 	bl	8002efc <HAL_GetTick>
 8005ee6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ee8:	e00e      	b.n	8005f08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005eea:	f7fd f807 	bl	8002efc <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b19      	cmp	r3, #25
 8005ef6:	d907      	bls.n	8005f08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	f043 0320 	orr.w	r3, r3, #32
 8005efe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005f06:	e006      	b.n	8005f16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d1e9      	bne.n	8005eea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d003      	beq.n	8005f2c <I2C_IsErrorOccurred+0xe0>
 8005f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0aa      	beq.n	8005e82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f043 0304 	orr.w	r3, r3, #4
 8005f42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f043 0308 	orr.w	r3, r3, #8
 8005f84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	f043 0302 	orr.w	r3, r3, #2
 8005fa6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01c      	beq.n	8005ffa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff fe63 	bl	8005c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6859      	ldr	r1, [r3, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <I2C_IsErrorOccurred+0x1bc>)
 8005fd2:	400b      	ands	r3, r1
 8005fd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3728      	adds	r7, #40	; 0x28
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	fe00e800 	.word	0xfe00e800

0800600c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	607b      	str	r3, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	817b      	strh	r3, [r7, #10]
 800601a:	4613      	mov	r3, r2
 800601c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800601e:	897b      	ldrh	r3, [r7, #10]
 8006020:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006024:	7a7b      	ldrb	r3, [r7, #9]
 8006026:	041b      	lsls	r3, r3, #16
 8006028:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800602c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	4313      	orrs	r3, r2
 8006036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800603a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	0d5b      	lsrs	r3, r3, #21
 8006046:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <I2C_TransferConfig+0x60>)
 800604c:	430b      	orrs	r3, r1
 800604e:	43db      	mvns	r3, r3
 8006050:	ea02 0103 	and.w	r1, r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	03ff63ff 	.word	0x03ff63ff

08006070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b20      	cmp	r3, #32
 8006084:	d138      	bne.n	80060f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006090:	2302      	movs	r3, #2
 8006092:	e032      	b.n	80060fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	; 0x24
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0201 	bic.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060f8:	2302      	movs	r3, #2
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b20      	cmp	r3, #32
 800611a:	d139      	bne.n	8006190 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006126:	2302      	movs	r3, #2
 8006128:	e033      	b.n	8006192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2224      	movs	r2, #36	; 0x24
 8006136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006158:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800619e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a0:	b08f      	sub	sp, #60	; 0x3c
 80061a2:	af0a      	add	r7, sp, #40	; 0x28
 80061a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e116      	b.n	80063de <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fc fb26 	bl	800281c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2203      	movs	r2, #3
 80061d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 fdb2 	bl	8008d58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	687e      	ldr	r6, [r7, #4]
 80061fc:	466d      	mov	r5, sp
 80061fe:	f106 0410 	add.w	r4, r6, #16
 8006202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800620a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800620e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006212:	1d33      	adds	r3, r6, #4
 8006214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006216:	6838      	ldr	r0, [r7, #0]
 8006218:	f002 fd46 	bl	8008ca8 <USB_CoreInit>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e0d7      	b.n	80063de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2100      	movs	r1, #0
 8006234:	4618      	mov	r0, r3
 8006236:	f002 fda0 	bl	8008d7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]
 800623e:	e04a      	b.n	80062d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006240:	7bfa      	ldrb	r2, [r7, #15]
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	4613      	mov	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	333d      	adds	r3, #61	; 0x3d
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006254:	7bfa      	ldrb	r2, [r7, #15]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	333c      	adds	r3, #60	; 0x3c
 8006264:	7bfa      	ldrb	r2, [r7, #15]
 8006266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006268:	7bfa      	ldrb	r2, [r7, #15]
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	b298      	uxth	r0, r3
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	3344      	adds	r3, #68	; 0x44
 800627c:	4602      	mov	r2, r0
 800627e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006280:	7bfa      	ldrb	r2, [r7, #15]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	3340      	adds	r3, #64	; 0x40
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006294:	7bfa      	ldrb	r2, [r7, #15]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3348      	adds	r3, #72	; 0x48
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062a8:	7bfa      	ldrb	r2, [r7, #15]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	334c      	adds	r3, #76	; 0x4c
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062bc:	7bfa      	ldrb	r2, [r7, #15]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	3354      	adds	r3, #84	; 0x54
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	3301      	adds	r3, #1
 80062d4:	73fb      	strb	r3, [r7, #15]
 80062d6:	7bfa      	ldrb	r2, [r7, #15]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d3af      	bcc.n	8006240 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	e044      	b.n	8006370 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006324:	2200      	movs	r2, #0
 8006326:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006328:	7bfa      	ldrb	r2, [r7, #15]
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	4613      	mov	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800633e:	7bfa      	ldrb	r2, [r7, #15]
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006354:	7bfa      	ldrb	r2, [r7, #15]
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	3301      	adds	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
 8006370:	7bfa      	ldrb	r2, [r7, #15]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	d3b5      	bcc.n	80062e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	687e      	ldr	r6, [r7, #4]
 8006382:	466d      	mov	r5, sp
 8006384:	f106 0410 	add.w	r4, r6, #16
 8006388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800638a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800638c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800638e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006390:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006394:	e885 0003 	stmia.w	r5, {r0, r1}
 8006398:	1d33      	adds	r3, r6, #4
 800639a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800639c:	6838      	ldr	r0, [r7, #0]
 800639e:	f002 fd39 	bl	8008e14 <USB_DevInit>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e014      	b.n	80063de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f80b 	bl	80063e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f002 fef7 	bl	80091ca <USB_DevDisconnect>

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080063e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_PCDEx_ActivateLPM+0x44>)
 8006418:	4313      	orrs	r3, r2
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	10000003 	.word	0x10000003

08006430 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a04      	ldr	r2, [pc, #16]	; (800644c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800643a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643e:	6013      	str	r3, [r2, #0]
}
 8006440:	bf00      	nop
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40007000 	.word	0x40007000

08006450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006458:	2300      	movs	r3, #0
 800645a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e291      	b.n	800698a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8087 	beq.w	8006582 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006474:	4b96      	ldr	r3, [pc, #600]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 030c 	and.w	r3, r3, #12
 800647c:	2b04      	cmp	r3, #4
 800647e:	d00c      	beq.n	800649a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006480:	4b93      	ldr	r3, [pc, #588]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 030c 	and.w	r3, r3, #12
 8006488:	2b08      	cmp	r3, #8
 800648a:	d112      	bne.n	80064b2 <HAL_RCC_OscConfig+0x62>
 800648c:	4b90      	ldr	r3, [pc, #576]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006498:	d10b      	bne.n	80064b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800649a:	4b8d      	ldr	r3, [pc, #564]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d06c      	beq.n	8006580 <HAL_RCC_OscConfig+0x130>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d168      	bne.n	8006580 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e26b      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ba:	d106      	bne.n	80064ca <HAL_RCC_OscConfig+0x7a>
 80064bc:	4b84      	ldr	r3, [pc, #528]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a83      	ldr	r2, [pc, #524]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80064c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	e02e      	b.n	8006528 <HAL_RCC_OscConfig+0xd8>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10c      	bne.n	80064ec <HAL_RCC_OscConfig+0x9c>
 80064d2:	4b7f      	ldr	r3, [pc, #508]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a7e      	ldr	r2, [pc, #504]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80064d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	4b7c      	ldr	r3, [pc, #496]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a7b      	ldr	r2, [pc, #492]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80064e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e01d      	b.n	8006528 <HAL_RCC_OscConfig+0xd8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064f4:	d10c      	bne.n	8006510 <HAL_RCC_OscConfig+0xc0>
 80064f6:	4b76      	ldr	r3, [pc, #472]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a75      	ldr	r2, [pc, #468]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80064fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a72      	ldr	r2, [pc, #456]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e00b      	b.n	8006528 <HAL_RCC_OscConfig+0xd8>
 8006510:	4b6f      	ldr	r3, [pc, #444]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a6e      	ldr	r2, [pc, #440]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	4b6c      	ldr	r3, [pc, #432]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a6b      	ldr	r2, [pc, #428]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d013      	beq.n	8006558 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fc fce4 	bl	8002efc <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006538:	f7fc fce0 	bl	8002efc <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b64      	cmp	r3, #100	; 0x64
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e21f      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800654a:	4b61      	ldr	r3, [pc, #388]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0xe8>
 8006556:	e014      	b.n	8006582 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006558:	f7fc fcd0 	bl	8002efc <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006560:	f7fc fccc 	bl	8002efc <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b64      	cmp	r3, #100	; 0x64
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e20b      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006572:	4b57      	ldr	r3, [pc, #348]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x110>
 800657e:	e000      	b.n	8006582 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d069      	beq.n	8006662 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800658e:	4b50      	ldr	r3, [pc, #320]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 030c 	and.w	r3, r3, #12
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00b      	beq.n	80065b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800659a:	4b4d      	ldr	r3, [pc, #308]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 030c 	and.w	r3, r3, #12
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	d11c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x190>
 80065a6:	4b4a      	ldr	r3, [pc, #296]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d116      	bne.n	80065e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065b2:	4b47      	ldr	r3, [pc, #284]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_RCC_OscConfig+0x17a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e1df      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ca:	4b41      	ldr	r3, [pc, #260]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	493d      	ldr	r1, [pc, #244]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065de:	e040      	b.n	8006662 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d023      	beq.n	8006630 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065e8:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a38      	ldr	r2, [pc, #224]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fc fc82 	bl	8002efc <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065fc:	f7fc fc7e 	bl	8002efc <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e1bd      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661a:	4b2d      	ldr	r3, [pc, #180]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4929      	ldr	r1, [pc, #164]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800662a:	4313      	orrs	r3, r2
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	e018      	b.n	8006662 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006630:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663c:	f7fc fc5e 	bl	8002efc <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006644:	f7fc fc5a 	bl	8002efc <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e199      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006656:	4b1e      	ldr	r3, [pc, #120]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f0      	bne.n	8006644 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d038      	beq.n	80066e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d019      	beq.n	80066aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006676:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 8006678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667a:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006682:	f7fc fc3b 	bl	8002efc <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800668a:	f7fc fc37 	bl	8002efc <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e176      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 800669e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <HAL_RCC_OscConfig+0x23a>
 80066a8:	e01a      	b.n	80066e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066aa:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80066ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ae:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <HAL_RCC_OscConfig+0x280>)
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b6:	f7fc fc21 	bl	8002efc <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066bc:	e00a      	b.n	80066d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066be:	f7fc fc1d 	bl	8002efc <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d903      	bls.n	80066d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e15c      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
 80066d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066d4:	4b91      	ldr	r3, [pc, #580]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80066d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1ee      	bne.n	80066be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80a4 	beq.w	8006836 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ee:	4b8b      	ldr	r3, [pc, #556]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10d      	bne.n	8006716 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fa:	4b88      	ldr	r3, [pc, #544]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	4a87      	ldr	r2, [pc, #540]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006704:	6413      	str	r3, [r2, #64]	; 0x40
 8006706:	4b85      	ldr	r3, [pc, #532]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006712:	2301      	movs	r3, #1
 8006714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006716:	4b82      	ldr	r3, [pc, #520]	; (8006920 <HAL_RCC_OscConfig+0x4d0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d118      	bne.n	8006754 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006722:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <HAL_RCC_OscConfig+0x4d0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a7e      	ldr	r2, [pc, #504]	; (8006920 <HAL_RCC_OscConfig+0x4d0>)
 8006728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800672e:	f7fc fbe5 	bl	8002efc <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006736:	f7fc fbe1 	bl	8002efc <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b64      	cmp	r3, #100	; 0x64
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e120      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006748:	4b75      	ldr	r3, [pc, #468]	; (8006920 <HAL_RCC_OscConfig+0x4d0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0f0      	beq.n	8006736 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d106      	bne.n	800676a <HAL_RCC_OscConfig+0x31a>
 800675c:	4b6f      	ldr	r3, [pc, #444]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	4a6e      	ldr	r2, [pc, #440]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	6713      	str	r3, [r2, #112]	; 0x70
 8006768:	e02d      	b.n	80067c6 <HAL_RCC_OscConfig+0x376>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10c      	bne.n	800678c <HAL_RCC_OscConfig+0x33c>
 8006772:	4b6a      	ldr	r3, [pc, #424]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	4a69      	ldr	r2, [pc, #420]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	6713      	str	r3, [r2, #112]	; 0x70
 800677e:	4b67      	ldr	r3, [pc, #412]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	4a66      	ldr	r2, [pc, #408]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	6713      	str	r3, [r2, #112]	; 0x70
 800678a:	e01c      	b.n	80067c6 <HAL_RCC_OscConfig+0x376>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b05      	cmp	r3, #5
 8006792:	d10c      	bne.n	80067ae <HAL_RCC_OscConfig+0x35e>
 8006794:	4b61      	ldr	r3, [pc, #388]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006798:	4a60      	ldr	r2, [pc, #384]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 800679a:	f043 0304 	orr.w	r3, r3, #4
 800679e:	6713      	str	r3, [r2, #112]	; 0x70
 80067a0:	4b5e      	ldr	r3, [pc, #376]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	4a5d      	ldr	r2, [pc, #372]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	6713      	str	r3, [r2, #112]	; 0x70
 80067ac:	e00b      	b.n	80067c6 <HAL_RCC_OscConfig+0x376>
 80067ae:	4b5b      	ldr	r3, [pc, #364]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	4a5a      	ldr	r2, [pc, #360]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ba:	4b58      	ldr	r3, [pc, #352]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	4a57      	ldr	r2, [pc, #348]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80067c0:	f023 0304 	bic.w	r3, r3, #4
 80067c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d015      	beq.n	80067fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ce:	f7fc fb95 	bl	8002efc <HAL_GetTick>
 80067d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d4:	e00a      	b.n	80067ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d6:	f7fc fb91 	bl	8002efc <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e0ce      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ec:	4b4b      	ldr	r3, [pc, #300]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0ee      	beq.n	80067d6 <HAL_RCC_OscConfig+0x386>
 80067f8:	e014      	b.n	8006824 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fa:	f7fc fb7f 	bl	8002efc <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006800:	e00a      	b.n	8006818 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006802:	f7fc fb7b 	bl	8002efc <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006810:	4293      	cmp	r3, r2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e0b8      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006818:	4b40      	ldr	r3, [pc, #256]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 800681a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1ee      	bne.n	8006802 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d105      	bne.n	8006836 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800682a:	4b3c      	ldr	r3, [pc, #240]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	4a3b      	ldr	r2, [pc, #236]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80a4 	beq.w	8006988 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006840:	4b36      	ldr	r3, [pc, #216]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 030c 	and.w	r3, r3, #12
 8006848:	2b08      	cmp	r3, #8
 800684a:	d06b      	beq.n	8006924 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d149      	bne.n	80068e8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006854:	4b31      	ldr	r3, [pc, #196]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a30      	ldr	r2, [pc, #192]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 800685a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800685e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fc fb4c 	bl	8002efc <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006868:	f7fc fb48 	bl	8002efc <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e087      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800687a:	4b28      	ldr	r3, [pc, #160]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69da      	ldr	r2, [r3, #28]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	019b      	lsls	r3, r3, #6
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	3b01      	subs	r3, #1
 80068a0:	041b      	lsls	r3, r3, #16
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	061b      	lsls	r3, r3, #24
 80068aa:	4313      	orrs	r3, r2
 80068ac:	4a1b      	ldr	r2, [pc, #108]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80068ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068b2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068b4:	4b19      	ldr	r3, [pc, #100]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80068ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fc fb1c 	bl	8002efc <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fc fb18 	bl	8002efc <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e057      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068da:	4b10      	ldr	r3, [pc, #64]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x478>
 80068e6:	e04f      	b.n	8006988 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e8:	4b0c      	ldr	r3, [pc, #48]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a0b      	ldr	r2, [pc, #44]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 80068ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f4:	f7fc fb02 	bl	8002efc <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068fc:	f7fc fafe 	bl	8002efc <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e03d      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800690e:	4b03      	ldr	r3, [pc, #12]	; (800691c <HAL_RCC_OscConfig+0x4cc>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x4ac>
 800691a:	e035      	b.n	8006988 <HAL_RCC_OscConfig+0x538>
 800691c:	40023800 	.word	0x40023800
 8006920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006924:	4b1b      	ldr	r3, [pc, #108]	; (8006994 <HAL_RCC_OscConfig+0x544>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d028      	beq.n	8006984 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800693c:	429a      	cmp	r2, r3
 800693e:	d121      	bne.n	8006984 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694a:	429a      	cmp	r2, r3
 800694c:	d11a      	bne.n	8006984 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006954:	4013      	ands	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800695a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800695c:	4293      	cmp	r3, r2
 800695e:	d111      	bne.n	8006984 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	3b01      	subs	r3, #1
 800696e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d107      	bne.n	8006984 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006980:	429a      	cmp	r2, r3
 8006982:	d001      	beq.n	8006988 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40023800 	.word	0x40023800

08006998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0d0      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069b0:	4b6a      	ldr	r3, [pc, #424]	; (8006b5c <HAL_RCC_ClockConfig+0x1c4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d910      	bls.n	80069e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b67      	ldr	r3, [pc, #412]	; (8006b5c <HAL_RCC_ClockConfig+0x1c4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f023 020f 	bic.w	r2, r3, #15
 80069c6:	4965      	ldr	r1, [pc, #404]	; (8006b5c <HAL_RCC_ClockConfig+0x1c4>)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ce:	4b63      	ldr	r3, [pc, #396]	; (8006b5c <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d001      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0b8      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d020      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f8:	4b59      	ldr	r3, [pc, #356]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	4a58      	ldr	r2, [pc, #352]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 80069fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a10:	4b53      	ldr	r3, [pc, #332]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4a52      	ldr	r2, [pc, #328]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a1c:	4b50      	ldr	r3, [pc, #320]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	494d      	ldr	r1, [pc, #308]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d040      	beq.n	8006abc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d107      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a42:	4b47      	ldr	r3, [pc, #284]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d115      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e07f      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d107      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5a:	4b41      	ldr	r3, [pc, #260]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e073      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6a:	4b3d      	ldr	r3, [pc, #244]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e06b      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7a:	4b39      	ldr	r3, [pc, #228]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 0203 	bic.w	r2, r3, #3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	4936      	ldr	r1, [pc, #216]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a8c:	f7fc fa36 	bl	8002efc <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a94:	f7fc fa32 	bl	8002efc <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e053      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aaa:	4b2d      	ldr	r3, [pc, #180]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 020c 	and.w	r2, r3, #12
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d1eb      	bne.n	8006a94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006abc:	4b27      	ldr	r3, [pc, #156]	; (8006b5c <HAL_RCC_ClockConfig+0x1c4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d210      	bcs.n	8006aec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <HAL_RCC_ClockConfig+0x1c4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f023 020f 	bic.w	r2, r3, #15
 8006ad2:	4922      	ldr	r1, [pc, #136]	; (8006b5c <HAL_RCC_ClockConfig+0x1c4>)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ada:	4b20      	ldr	r3, [pc, #128]	; (8006b5c <HAL_RCC_ClockConfig+0x1c4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d001      	beq.n	8006aec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e032      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af8:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4916      	ldr	r1, [pc, #88]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d009      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	490e      	ldr	r1, [pc, #56]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b2a:	f000 f821 	bl	8006b70 <HAL_RCC_GetSysClockFreq>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	490a      	ldr	r1, [pc, #40]	; (8006b64 <HAL_RCC_ClockConfig+0x1cc>)
 8006b3c:	5ccb      	ldrb	r3, [r1, r3]
 8006b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b42:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <HAL_RCC_ClockConfig+0x1d0>)
 8006b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b46:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <HAL_RCC_ClockConfig+0x1d4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fc f992 	bl	8002e74 <HAL_InitTick>

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40023c00 	.word	0x40023c00
 8006b60:	40023800 	.word	0x40023800
 8006b64:	0801c3fc 	.word	0x0801c3fc
 8006b68:	20000034 	.word	0x20000034
 8006b6c:	20000038 	.word	0x20000038

08006b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b74:	b094      	sub	sp, #80	; 0x50
 8006b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b80:	2300      	movs	r3, #0
 8006b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b88:	4b79      	ldr	r3, [pc, #484]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 030c 	and.w	r3, r3, #12
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d00d      	beq.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	f200 80e1 	bhi.w	8006d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d003      	beq.n	8006baa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ba2:	e0db      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ba4:	4b73      	ldr	r3, [pc, #460]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ba8:	e0db      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006baa:	4b73      	ldr	r3, [pc, #460]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8006bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bae:	e0d8      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bb0:	4b6f      	ldr	r3, [pc, #444]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006bba:	4b6d      	ldr	r3, [pc, #436]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d063      	beq.n	8006c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bc6:	4b6a      	ldr	r3, [pc, #424]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	099b      	lsrs	r3, r3, #6
 8006bcc:	2200      	movs	r2, #0
 8006bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bda:	2300      	movs	r3, #0
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006be2:	4622      	mov	r2, r4
 8006be4:	462b      	mov	r3, r5
 8006be6:	f04f 0000 	mov.w	r0, #0
 8006bea:	f04f 0100 	mov.w	r1, #0
 8006bee:	0159      	lsls	r1, r3, #5
 8006bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bf4:	0150      	lsls	r0, r2, #5
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	1a51      	subs	r1, r2, r1
 8006bfe:	6139      	str	r1, [r7, #16]
 8006c00:	4629      	mov	r1, r5
 8006c02:	eb63 0301 	sbc.w	r3, r3, r1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c14:	4659      	mov	r1, fp
 8006c16:	018b      	lsls	r3, r1, #6
 8006c18:	4651      	mov	r1, sl
 8006c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c1e:	4651      	mov	r1, sl
 8006c20:	018a      	lsls	r2, r1, #6
 8006c22:	4651      	mov	r1, sl
 8006c24:	ebb2 0801 	subs.w	r8, r2, r1
 8006c28:	4659      	mov	r1, fp
 8006c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c42:	4690      	mov	r8, r2
 8006c44:	4699      	mov	r9, r3
 8006c46:	4623      	mov	r3, r4
 8006c48:	eb18 0303 	adds.w	r3, r8, r3
 8006c4c:	60bb      	str	r3, [r7, #8]
 8006c4e:	462b      	mov	r3, r5
 8006c50:	eb49 0303 	adc.w	r3, r9, r3
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c62:	4629      	mov	r1, r5
 8006c64:	024b      	lsls	r3, r1, #9
 8006c66:	4621      	mov	r1, r4
 8006c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	024a      	lsls	r2, r1, #9
 8006c70:	4610      	mov	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c76:	2200      	movs	r2, #0
 8006c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c80:	f7f9 fb1e 	bl	80002c0 <__aeabi_uldivmod>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4613      	mov	r3, r2
 8006c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c8c:	e058      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c8e:	4b38      	ldr	r3, [pc, #224]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	099b      	lsrs	r3, r3, #6
 8006c94:	2200      	movs	r2, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	4611      	mov	r1, r2
 8006c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c9e:	623b      	str	r3, [r7, #32]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	f04f 0000 	mov.w	r0, #0
 8006cb0:	f04f 0100 	mov.w	r1, #0
 8006cb4:	0159      	lsls	r1, r3, #5
 8006cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cba:	0150      	lsls	r0, r2, #5
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8006ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	00eb      	lsls	r3, r5, #3
 8006cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cf6:	00e2      	lsls	r2, r4, #3
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	461d      	mov	r5, r3
 8006cfc:	4643      	mov	r3, r8
 8006cfe:	18e3      	adds	r3, r4, r3
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	464b      	mov	r3, r9
 8006d04:	eb45 0303 	adc.w	r3, r5, r3
 8006d08:	607b      	str	r3, [r7, #4]
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d16:	4629      	mov	r1, r5
 8006d18:	028b      	lsls	r3, r1, #10
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d20:	4621      	mov	r1, r4
 8006d22:	028a      	lsls	r2, r1, #10
 8006d24:	4610      	mov	r0, r2
 8006d26:	4619      	mov	r1, r3
 8006d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	61fa      	str	r2, [r7, #28]
 8006d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d34:	f7f9 fac4 	bl	80002c0 <__aeabi_uldivmod>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d5a:	e002      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3750      	adds	r7, #80	; 0x50
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d6e:	bf00      	nop
 8006d70:	40023800 	.word	0x40023800
 8006d74:	00f42400 	.word	0x00f42400
 8006d78:	007a1200 	.word	0x007a1200

08006d7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d82:	681b      	ldr	r3, [r3, #0]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20000034 	.word	0x20000034

08006d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d98:	f7ff fff0 	bl	8006d7c <HAL_RCC_GetHCLKFreq>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	0a9b      	lsrs	r3, r3, #10
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	4903      	ldr	r1, [pc, #12]	; (8006db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006daa:	5ccb      	ldrb	r3, [r1, r3]
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40023800 	.word	0x40023800
 8006db8:	0801c40c 	.word	0x0801c40c

08006dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006dc0:	f7ff ffdc 	bl	8006d7c <HAL_RCC_GetHCLKFreq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	0b5b      	lsrs	r3, r3, #13
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	4903      	ldr	r1, [pc, #12]	; (8006de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dd2:	5ccb      	ldrb	r3, [r1, r3]
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	0801c40c 	.word	0x0801c40c

08006de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d012      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e0c:	4b69      	ldr	r3, [pc, #420]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	4a68      	ldr	r2, [pc, #416]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e16:	6093      	str	r3, [r2, #8]
 8006e18:	4b66      	ldr	r3, [pc, #408]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	4964      	ldr	r1, [pc, #400]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d017      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e3e:	4b5d      	ldr	r3, [pc, #372]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	4959      	ldr	r1, [pc, #356]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d017      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e7a:	4b4e      	ldr	r3, [pc, #312]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	494a      	ldr	r1, [pc, #296]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e98:	d101      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 808b 	beq.w	8006fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ec8:	4b3a      	ldr	r3, [pc, #232]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	4a39      	ldr	r2, [pc, #228]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ed4:	4b37      	ldr	r3, [pc, #220]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ee0:	4b35      	ldr	r3, [pc, #212]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a34      	ldr	r2, [pc, #208]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eec:	f7fc f806 	bl	8002efc <HAL_GetTick>
 8006ef0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef4:	f7fc f802 	bl	8002efc <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b64      	cmp	r3, #100	; 0x64
 8006f00:	d901      	bls.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e357      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f06:	4b2c      	ldr	r3, [pc, #176]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f12:	4b28      	ldr	r3, [pc, #160]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d035      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d02e      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f30:	4b20      	ldr	r3, [pc, #128]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f3a:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3e:	4a1d      	ldr	r2, [pc, #116]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f46:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	4a1a      	ldr	r2, [pc, #104]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f52:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d114      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f64:	f7fb ffca 	bl	8002efc <HAL_GetTick>
 8006f68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f6a:	e00a      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f6c:	f7fb ffc6 	bl	8002efc <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e319      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0ee      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f9a:	d111      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006fa8:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006faa:	400b      	ands	r3, r1
 8006fac:	4901      	ldr	r1, [pc, #4]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	608b      	str	r3, [r1, #8]
 8006fb2:	e00b      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006fb4:	40023800 	.word	0x40023800
 8006fb8:	40007000 	.word	0x40007000
 8006fbc:	0ffffcff 	.word	0x0ffffcff
 8006fc0:	4baa      	ldr	r3, [pc, #680]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	4aa9      	ldr	r2, [pc, #676]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006fca:	6093      	str	r3, [r2, #8]
 8006fcc:	4ba7      	ldr	r3, [pc, #668]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fd8:	49a4      	ldr	r1, [pc, #656]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d010      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fea:	4ba0      	ldr	r3, [pc, #640]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff0:	4a9e      	ldr	r2, [pc, #632]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ff6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006ffa:	4b9c      	ldr	r3, [pc, #624]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ffc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	4999      	ldr	r1, [pc, #612]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007018:	4b94      	ldr	r3, [pc, #592]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007026:	4991      	ldr	r1, [pc, #580]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800703a:	4b8c      	ldr	r3, [pc, #560]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007048:	4988      	ldr	r1, [pc, #544]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800705c:	4b83      	ldr	r3, [pc, #524]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800705e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800706a:	4980      	ldr	r1, [pc, #512]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800706c:	4313      	orrs	r3, r2
 800706e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800707e:	4b7b      	ldr	r3, [pc, #492]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007084:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708c:	4977      	ldr	r1, [pc, #476]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070a0:	4b72      	ldr	r3, [pc, #456]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a6:	f023 0203 	bic.w	r2, r3, #3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	496f      	ldr	r1, [pc, #444]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070c2:	4b6a      	ldr	r3, [pc, #424]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c8:	f023 020c 	bic.w	r2, r3, #12
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d0:	4966      	ldr	r1, [pc, #408]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070e4:	4b61      	ldr	r3, [pc, #388]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f2:	495e      	ldr	r1, [pc, #376]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007106:	4b59      	ldr	r3, [pc, #356]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007114:	4955      	ldr	r1, [pc, #340]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007128:	4b50      	ldr	r3, [pc, #320]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007136:	494d      	ldr	r1, [pc, #308]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800714a:	4b48      	ldr	r3, [pc, #288]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800714c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007150:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	4944      	ldr	r1, [pc, #272]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800716c:	4b3f      	ldr	r3, [pc, #252]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007172:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717a:	493c      	ldr	r1, [pc, #240]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800718e:	4b37      	ldr	r3, [pc, #220]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007194:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719c:	4933      	ldr	r1, [pc, #204]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071b0:	4b2e      	ldr	r3, [pc, #184]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071be:	492b      	ldr	r1, [pc, #172]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d011      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071d2:	4b26      	ldr	r3, [pc, #152]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e0:	4922      	ldr	r1, [pc, #136]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f0:	d101      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071f2:	2301      	movs	r3, #1
 80071f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007202:	2301      	movs	r3, #1
 8007204:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007218:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007220:	4912      	ldr	r1, [pc, #72]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007244:	4909      	ldr	r1, [pc, #36]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d006      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 80d9 	beq.w	8007412 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007260:	4b02      	ldr	r3, [pc, #8]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a01      	ldr	r2, [pc, #4]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800726a:	e001      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800726c:	40023800 	.word	0x40023800
 8007270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007272:	f7fb fe43 	bl	8002efc <HAL_GetTick>
 8007276:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007278:	e008      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800727a:	f7fb fe3f 	bl	8002efc <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b64      	cmp	r3, #100	; 0x64
 8007286:	d901      	bls.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e194      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800728c:	4b6c      	ldr	r3, [pc, #432]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f0      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d021      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11d      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072ac:	4b64      	ldr	r3, [pc, #400]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b2:	0c1b      	lsrs	r3, r3, #16
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072ba:	4b61      	ldr	r3, [pc, #388]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072c0:	0e1b      	lsrs	r3, r3, #24
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	019a      	lsls	r2, r3, #6
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	431a      	orrs	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	061b      	lsls	r3, r3, #24
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	071b      	lsls	r3, r3, #28
 80072e0:	4957      	ldr	r1, [pc, #348]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fc:	d00a      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007306:	2b00      	cmp	r3, #0
 8007308:	d02e      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007312:	d129      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007314:	4b4a      	ldr	r3, [pc, #296]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007322:	4b47      	ldr	r3, [pc, #284]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007328:	0f1b      	lsrs	r3, r3, #28
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	019a      	lsls	r2, r3, #6
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	041b      	lsls	r3, r3, #16
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	061b      	lsls	r3, r3, #24
 8007342:	431a      	orrs	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	071b      	lsls	r3, r3, #28
 8007348:	493d      	ldr	r1, [pc, #244]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800734a:	4313      	orrs	r3, r2
 800734c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007350:	4b3b      	ldr	r3, [pc, #236]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007356:	f023 021f 	bic.w	r2, r3, #31
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	3b01      	subs	r3, #1
 8007360:	4937      	ldr	r1, [pc, #220]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01d      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007374:	4b32      	ldr	r3, [pc, #200]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737a:	0e1b      	lsrs	r3, r3, #24
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007382:	4b2f      	ldr	r3, [pc, #188]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007388:	0f1b      	lsrs	r3, r3, #28
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	019a      	lsls	r2, r3, #6
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	431a      	orrs	r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	061b      	lsls	r3, r3, #24
 80073a2:	431a      	orrs	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	071b      	lsls	r3, r3, #28
 80073a8:	4925      	ldr	r1, [pc, #148]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d011      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	019a      	lsls	r2, r3, #6
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	061b      	lsls	r3, r3, #24
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	071b      	lsls	r3, r3, #28
 80073d8:	4919      	ldr	r1, [pc, #100]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073e0:	4b17      	ldr	r3, [pc, #92]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a16      	ldr	r2, [pc, #88]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ec:	f7fb fd86 	bl	8002efc <HAL_GetTick>
 80073f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073f4:	f7fb fd82 	bl	8002efc <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b64      	cmp	r3, #100	; 0x64
 8007400:	d901      	bls.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e0d7      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007406:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	2b01      	cmp	r3, #1
 8007416:	f040 80cd 	bne.w	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800741a:	4b09      	ldr	r3, [pc, #36]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a08      	ldr	r2, [pc, #32]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007426:	f7fb fd69 	bl	8002efc <HAL_GetTick>
 800742a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800742c:	e00a      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800742e:	f7fb fd65 	bl	8002efc <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b64      	cmp	r3, #100	; 0x64
 800743a:	d903      	bls.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e0ba      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007440:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007444:	4b5e      	ldr	r3, [pc, #376]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800744c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007450:	d0ed      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800746e:	2b00      	cmp	r3, #0
 8007470:	d02e      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d12a      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800747a:	4b51      	ldr	r3, [pc, #324]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007480:	0c1b      	lsrs	r3, r3, #16
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007488:	4b4d      	ldr	r3, [pc, #308]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748e:	0f1b      	lsrs	r3, r3, #28
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	019a      	lsls	r2, r3, #6
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	061b      	lsls	r3, r3, #24
 80074a8:	431a      	orrs	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	071b      	lsls	r3, r3, #28
 80074ae:	4944      	ldr	r1, [pc, #272]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074b6:	4b42      	ldr	r3, [pc, #264]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	3b01      	subs	r3, #1
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	493d      	ldr	r1, [pc, #244]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d022      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074e4:	d11d      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074e6:	4b36      	ldr	r3, [pc, #216]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ec:	0e1b      	lsrs	r3, r3, #24
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074f4:	4b32      	ldr	r3, [pc, #200]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fa:	0f1b      	lsrs	r3, r3, #28
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	019a      	lsls	r2, r3, #6
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	041b      	lsls	r3, r3, #16
 800750e:	431a      	orrs	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	061b      	lsls	r3, r3, #24
 8007514:	431a      	orrs	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	071b      	lsls	r3, r3, #28
 800751a:	4929      	ldr	r1, [pc, #164]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800751c:	4313      	orrs	r3, r2
 800751e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d028      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800752e:	4b24      	ldr	r3, [pc, #144]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800753c:	4b20      	ldr	r3, [pc, #128]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007542:	0c1b      	lsrs	r3, r3, #16
 8007544:	f003 0303 	and.w	r3, r3, #3
 8007548:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	019a      	lsls	r2, r3, #6
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	041b      	lsls	r3, r3, #16
 8007554:	431a      	orrs	r2, r3
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	061b      	lsls	r3, r3, #24
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	071b      	lsls	r3, r3, #28
 8007562:	4917      	ldr	r1, [pc, #92]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800756c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	4911      	ldr	r1, [pc, #68]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007580:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a0e      	ldr	r2, [pc, #56]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800758c:	f7fb fcb6 	bl	8002efc <HAL_GetTick>
 8007590:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007592:	e008      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007594:	f7fb fcb2 	bl	8002efc <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b64      	cmp	r3, #100	; 0x64
 80075a0:	d901      	bls.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e007      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075a6:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b2:	d1ef      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40023800 	.word	0x40023800

080075c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e040      	b.n	8007658 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fb f806 	bl	80025f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2224      	movs	r2, #36	; 0x24
 80075f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fbc0 	bl	8007d88 <UART_SetConfig>
 8007608:	4603      	mov	r3, r0
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e022      	b.n	8007658 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fe18 	bl	8008250 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800762e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800763e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fe9f 	bl	8008394 <UART_CheckIdleState>
 8007656:	4603      	mov	r3, r0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007660:	b480      	push	{r7}
 8007662:	b08b      	sub	sp, #44	; 0x2c
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007672:	2b20      	cmp	r3, #32
 8007674:	d147      	bne.n	8007706 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_UART_Transmit_IT+0x22>
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e040      	b.n	8007708 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	88fa      	ldrh	r2, [r7, #6]
 8007698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2221      	movs	r2, #33	; 0x21
 80076ae:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b8:	d107      	bne.n	80076ca <HAL_UART_Transmit_IT+0x6a>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a13      	ldr	r2, [pc, #76]	; (8007714 <HAL_UART_Transmit_IT+0xb4>)
 80076c6:	66da      	str	r2, [r3, #108]	; 0x6c
 80076c8:	e002      	b.n	80076d0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4a12      	ldr	r2, [pc, #72]	; (8007718 <HAL_UART_Transmit_IT+0xb8>)
 80076ce:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	613b      	str	r3, [r7, #16]
   return(result);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	623b      	str	r3, [r7, #32]
 80076f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	69f9      	ldr	r1, [r7, #28]
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e6      	bne.n	80076d0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e000      	b.n	8007708 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007706:	2302      	movs	r3, #2
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	372c      	adds	r7, #44	; 0x2c
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	080088c7 	.word	0x080088c7
 8007718:	08008811 	.word	0x08008811

0800771c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08a      	sub	sp, #40	; 0x28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	4613      	mov	r3, r2
 8007728:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007730:	2b20      	cmp	r3, #32
 8007732:	d132      	bne.n	800779a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <HAL_UART_Receive_IT+0x24>
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e02b      	b.n	800779c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d018      	beq.n	800778a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	613b      	str	r3, [r7, #16]
   return(result);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	623b      	str	r3, [r7, #32]
 8007778:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	69f9      	ldr	r1, [r7, #28]
 800777c:	6a3a      	ldr	r2, [r7, #32]
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	61bb      	str	r3, [r7, #24]
   return(result);
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e6      	bne.n	8007758 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	461a      	mov	r2, r3
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fefd 	bl	8008590 <UART_Start_Receive_IT>
 8007796:	4603      	mov	r3, r0
 8007798:	e000      	b.n	800779c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800779a:	2302      	movs	r3, #2
  }
}
 800779c:	4618      	mov	r0, r3
 800779e:	3728      	adds	r7, #40	; 0x28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b0ba      	sub	sp, #232	; 0xe8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80077d2:	4013      	ands	r3, r2
 80077d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d115      	bne.n	800780c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00f      	beq.n	800780c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d009      	beq.n	800780c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8297 	beq.w	8007d30 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
      }
      return;
 800780a:	e291      	b.n	8007d30 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800780c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8117 	beq.w	8007a44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007822:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007826:	4b85      	ldr	r3, [pc, #532]	; (8007a3c <HAL_UART_IRQHandler+0x298>)
 8007828:	4013      	ands	r3, r2
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 810a 	beq.w	8007a44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d011      	beq.n	8007860 <HAL_UART_IRQHandler+0xbc>
 800783c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2201      	movs	r2, #1
 800784e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007856:	f043 0201 	orr.w	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d011      	beq.n	8007890 <HAL_UART_IRQHandler+0xec>
 800786c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2202      	movs	r2, #2
 800787e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007886:	f043 0204 	orr.w	r2, r3, #4
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d011      	beq.n	80078c0 <HAL_UART_IRQHandler+0x11c>
 800789c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2204      	movs	r2, #4
 80078ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b6:	f043 0202 	orr.w	r2, r3, #2
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d017      	beq.n	80078fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2208      	movs	r2, #8
 80078ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f2:	f043 0208 	orr.w	r2, r3, #8
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007904:	2b00      	cmp	r3, #0
 8007906:	d012      	beq.n	800792e <HAL_UART_IRQHandler+0x18a>
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00c      	beq.n	800792e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800791c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	f043 0220 	orr.w	r2, r3, #32
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 81fd 	beq.w	8007d34 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00d      	beq.n	8007962 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d005      	beq.n	8007986 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800797a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800797e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007982:	2b00      	cmp	r3, #0
 8007984:	d04f      	beq.n	8007a26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fec8 	bl	800871c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b40      	cmp	r3, #64	; 0x40
 8007998:	d141      	bne.n	8007a1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1d9      	bne.n	800799a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d013      	beq.n	8007a16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f2:	4a13      	ldr	r2, [pc, #76]	; (8007a40 <HAL_UART_IRQHandler+0x29c>)
 80079f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fc f944 	bl	8003c88 <HAL_DMA_Abort_IT>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d017      	beq.n	8007a36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a10:	4610      	mov	r0, r2
 8007a12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	e00f      	b.n	8007a36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9a0 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1c:	e00b      	b.n	8007a36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f99c 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a24:	e007      	b.n	8007a36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f998 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007a34:	e17e      	b.n	8007d34 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a36:	bf00      	nop
    return;
 8007a38:	e17c      	b.n	8007d34 <HAL_UART_IRQHandler+0x590>
 8007a3a:	bf00      	nop
 8007a3c:	04000120 	.word	0x04000120
 8007a40:	080087e5 	.word	0x080087e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	f040 814c 	bne.w	8007ce6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 8145 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a60:	f003 0310 	and.w	r3, r3, #16
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 813e 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2210      	movs	r2, #16
 8007a70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b40      	cmp	r3, #64	; 0x40
 8007a7e:	f040 80b6 	bne.w	8007bee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8150 	beq.w	8007d38 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	f080 8148 	bcs.w	8007d38 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007abc:	f000 8086 	beq.w	8007bcc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007aee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1da      	bne.n	8007ac0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e1      	bne.n	8007b0a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e3      	bne.n	8007b46 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9c:	f023 0310 	bic.w	r3, r3, #16
 8007ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bb0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e4      	bne.n	8007b8c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fb ffee 	bl	8003ba8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f8c2 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bec:	e0a4      	b.n	8007d38 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 8096 	beq.w	8007d3c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8091 	beq.w	8007d3c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e4      	bne.n	8007c1a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3308      	adds	r3, #8
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3308      	adds	r3, #8
 8007c70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c74:	633a      	str	r2, [r7, #48]	; 0x30
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e3      	bne.n	8007c50 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f023 0310 	bic.w	r3, r3, #16
 8007cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	69b9      	ldr	r1, [r7, #24]
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	617b      	str	r3, [r7, #20]
   return(result);
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e4      	bne.n	8007c9c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f846 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ce4:	e02a      	b.n	8007d3c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00e      	beq.n	8007d10 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d008      	beq.n	8007d10 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01c      	beq.n	8007d40 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
    }
    return;
 8007d0e:	e017      	b.n	8007d40 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d012      	beq.n	8007d42 <HAL_UART_IRQHandler+0x59e>
 8007d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00c      	beq.n	8007d42 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fe2c 	bl	8008986 <UART_EndTransmit_IT>
    return;
 8007d2e:	e008      	b.n	8007d42 <HAL_UART_IRQHandler+0x59e>
      return;
 8007d30:	bf00      	nop
 8007d32:	e006      	b.n	8007d42 <HAL_UART_IRQHandler+0x59e>
    return;
 8007d34:	bf00      	nop
 8007d36:	e004      	b.n	8007d42 <HAL_UART_IRQHandler+0x59e>
      return;
 8007d38:	bf00      	nop
 8007d3a:	e002      	b.n	8007d42 <HAL_UART_IRQHandler+0x59e>
      return;
 8007d3c:	bf00      	nop
 8007d3e:	e000      	b.n	8007d42 <HAL_UART_IRQHandler+0x59e>
    return;
 8007d40:	bf00      	nop
  }

}
 8007d42:	37e8      	adds	r7, #232	; 0xe8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4ba6      	ldr	r3, [pc, #664]	; (800804c <UART_SetConfig+0x2c4>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	6979      	ldr	r1, [r7, #20]
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a94      	ldr	r2, [pc, #592]	; (8008050 <UART_SetConfig+0x2c8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d120      	bne.n	8007e46 <UART_SetConfig+0xbe>
 8007e04:	4b93      	ldr	r3, [pc, #588]	; (8008054 <UART_SetConfig+0x2cc>)
 8007e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d816      	bhi.n	8007e40 <UART_SetConfig+0xb8>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0x90>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e35 	.word	0x08007e35
 8007e20:	08007e2f 	.word	0x08007e2f
 8007e24:	08007e3b 	.word	0x08007e3b
 8007e28:	2301      	movs	r3, #1
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e150      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e14d      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e34:	2304      	movs	r3, #4
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e14a      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	77fb      	strb	r3, [r7, #31]
 8007e3e:	e147      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e40:	2310      	movs	r3, #16
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e144      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a83      	ldr	r2, [pc, #524]	; (8008058 <UART_SetConfig+0x2d0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d132      	bne.n	8007eb6 <UART_SetConfig+0x12e>
 8007e50:	4b80      	ldr	r3, [pc, #512]	; (8008054 <UART_SetConfig+0x2cc>)
 8007e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e56:	f003 030c 	and.w	r3, r3, #12
 8007e5a:	2b0c      	cmp	r3, #12
 8007e5c:	d828      	bhi.n	8007eb0 <UART_SetConfig+0x128>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <UART_SetConfig+0xdc>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e99 	.word	0x08007e99
 8007e68:	08007eb1 	.word	0x08007eb1
 8007e6c:	08007eb1 	.word	0x08007eb1
 8007e70:	08007eb1 	.word	0x08007eb1
 8007e74:	08007ea5 	.word	0x08007ea5
 8007e78:	08007eb1 	.word	0x08007eb1
 8007e7c:	08007eb1 	.word	0x08007eb1
 8007e80:	08007eb1 	.word	0x08007eb1
 8007e84:	08007e9f 	.word	0x08007e9f
 8007e88:	08007eb1 	.word	0x08007eb1
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb1 	.word	0x08007eb1
 8007e94:	08007eab 	.word	0x08007eab
 8007e98:	2300      	movs	r3, #0
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e118      	b.n	80080d0 <UART_SetConfig+0x348>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e115      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	77fb      	strb	r3, [r7, #31]
 8007ea8:	e112      	b.n	80080d0 <UART_SetConfig+0x348>
 8007eaa:	2308      	movs	r3, #8
 8007eac:	77fb      	strb	r3, [r7, #31]
 8007eae:	e10f      	b.n	80080d0 <UART_SetConfig+0x348>
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	77fb      	strb	r3, [r7, #31]
 8007eb4:	e10c      	b.n	80080d0 <UART_SetConfig+0x348>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a68      	ldr	r2, [pc, #416]	; (800805c <UART_SetConfig+0x2d4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d120      	bne.n	8007f02 <UART_SetConfig+0x17a>
 8007ec0:	4b64      	ldr	r3, [pc, #400]	; (8008054 <UART_SetConfig+0x2cc>)
 8007ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007eca:	2b30      	cmp	r3, #48	; 0x30
 8007ecc:	d013      	beq.n	8007ef6 <UART_SetConfig+0x16e>
 8007ece:	2b30      	cmp	r3, #48	; 0x30
 8007ed0:	d814      	bhi.n	8007efc <UART_SetConfig+0x174>
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d009      	beq.n	8007eea <UART_SetConfig+0x162>
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d810      	bhi.n	8007efc <UART_SetConfig+0x174>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <UART_SetConfig+0x15c>
 8007ede:	2b10      	cmp	r3, #16
 8007ee0:	d006      	beq.n	8007ef0 <UART_SetConfig+0x168>
 8007ee2:	e00b      	b.n	8007efc <UART_SetConfig+0x174>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	77fb      	strb	r3, [r7, #31]
 8007ee8:	e0f2      	b.n	80080d0 <UART_SetConfig+0x348>
 8007eea:	2302      	movs	r3, #2
 8007eec:	77fb      	strb	r3, [r7, #31]
 8007eee:	e0ef      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	77fb      	strb	r3, [r7, #31]
 8007ef4:	e0ec      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ef6:	2308      	movs	r3, #8
 8007ef8:	77fb      	strb	r3, [r7, #31]
 8007efa:	e0e9      	b.n	80080d0 <UART_SetConfig+0x348>
 8007efc:	2310      	movs	r3, #16
 8007efe:	77fb      	strb	r3, [r7, #31]
 8007f00:	e0e6      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a56      	ldr	r2, [pc, #344]	; (8008060 <UART_SetConfig+0x2d8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d120      	bne.n	8007f4e <UART_SetConfig+0x1c6>
 8007f0c:	4b51      	ldr	r3, [pc, #324]	; (8008054 <UART_SetConfig+0x2cc>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f16:	2bc0      	cmp	r3, #192	; 0xc0
 8007f18:	d013      	beq.n	8007f42 <UART_SetConfig+0x1ba>
 8007f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8007f1c:	d814      	bhi.n	8007f48 <UART_SetConfig+0x1c0>
 8007f1e:	2b80      	cmp	r3, #128	; 0x80
 8007f20:	d009      	beq.n	8007f36 <UART_SetConfig+0x1ae>
 8007f22:	2b80      	cmp	r3, #128	; 0x80
 8007f24:	d810      	bhi.n	8007f48 <UART_SetConfig+0x1c0>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <UART_SetConfig+0x1a8>
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	d006      	beq.n	8007f3c <UART_SetConfig+0x1b4>
 8007f2e:	e00b      	b.n	8007f48 <UART_SetConfig+0x1c0>
 8007f30:	2300      	movs	r3, #0
 8007f32:	77fb      	strb	r3, [r7, #31]
 8007f34:	e0cc      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f36:	2302      	movs	r3, #2
 8007f38:	77fb      	strb	r3, [r7, #31]
 8007f3a:	e0c9      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	77fb      	strb	r3, [r7, #31]
 8007f40:	e0c6      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f42:	2308      	movs	r3, #8
 8007f44:	77fb      	strb	r3, [r7, #31]
 8007f46:	e0c3      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	77fb      	strb	r3, [r7, #31]
 8007f4c:	e0c0      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a44      	ldr	r2, [pc, #272]	; (8008064 <UART_SetConfig+0x2dc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d125      	bne.n	8007fa4 <UART_SetConfig+0x21c>
 8007f58:	4b3e      	ldr	r3, [pc, #248]	; (8008054 <UART_SetConfig+0x2cc>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f66:	d017      	beq.n	8007f98 <UART_SetConfig+0x210>
 8007f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f6c:	d817      	bhi.n	8007f9e <UART_SetConfig+0x216>
 8007f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f72:	d00b      	beq.n	8007f8c <UART_SetConfig+0x204>
 8007f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f78:	d811      	bhi.n	8007f9e <UART_SetConfig+0x216>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <UART_SetConfig+0x1fe>
 8007f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f82:	d006      	beq.n	8007f92 <UART_SetConfig+0x20a>
 8007f84:	e00b      	b.n	8007f9e <UART_SetConfig+0x216>
 8007f86:	2300      	movs	r3, #0
 8007f88:	77fb      	strb	r3, [r7, #31]
 8007f8a:	e0a1      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e09e      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f92:	2304      	movs	r3, #4
 8007f94:	77fb      	strb	r3, [r7, #31]
 8007f96:	e09b      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e098      	b.n	80080d0 <UART_SetConfig+0x348>
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e095      	b.n	80080d0 <UART_SetConfig+0x348>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a2f      	ldr	r2, [pc, #188]	; (8008068 <UART_SetConfig+0x2e0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d125      	bne.n	8007ffa <UART_SetConfig+0x272>
 8007fae:	4b29      	ldr	r3, [pc, #164]	; (8008054 <UART_SetConfig+0x2cc>)
 8007fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fbc:	d017      	beq.n	8007fee <UART_SetConfig+0x266>
 8007fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fc2:	d817      	bhi.n	8007ff4 <UART_SetConfig+0x26c>
 8007fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fc8:	d00b      	beq.n	8007fe2 <UART_SetConfig+0x25a>
 8007fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fce:	d811      	bhi.n	8007ff4 <UART_SetConfig+0x26c>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <UART_SetConfig+0x254>
 8007fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd8:	d006      	beq.n	8007fe8 <UART_SetConfig+0x260>
 8007fda:	e00b      	b.n	8007ff4 <UART_SetConfig+0x26c>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	77fb      	strb	r3, [r7, #31]
 8007fe0:	e076      	b.n	80080d0 <UART_SetConfig+0x348>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e073      	b.n	80080d0 <UART_SetConfig+0x348>
 8007fe8:	2304      	movs	r3, #4
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e070      	b.n	80080d0 <UART_SetConfig+0x348>
 8007fee:	2308      	movs	r3, #8
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e06d      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e06a      	b.n	80080d0 <UART_SetConfig+0x348>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a1b      	ldr	r2, [pc, #108]	; (800806c <UART_SetConfig+0x2e4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d138      	bne.n	8008076 <UART_SetConfig+0x2ee>
 8008004:	4b13      	ldr	r3, [pc, #76]	; (8008054 <UART_SetConfig+0x2cc>)
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800800e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008012:	d017      	beq.n	8008044 <UART_SetConfig+0x2bc>
 8008014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008018:	d82a      	bhi.n	8008070 <UART_SetConfig+0x2e8>
 800801a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801e:	d00b      	beq.n	8008038 <UART_SetConfig+0x2b0>
 8008020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008024:	d824      	bhi.n	8008070 <UART_SetConfig+0x2e8>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <UART_SetConfig+0x2aa>
 800802a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802e:	d006      	beq.n	800803e <UART_SetConfig+0x2b6>
 8008030:	e01e      	b.n	8008070 <UART_SetConfig+0x2e8>
 8008032:	2300      	movs	r3, #0
 8008034:	77fb      	strb	r3, [r7, #31]
 8008036:	e04b      	b.n	80080d0 <UART_SetConfig+0x348>
 8008038:	2302      	movs	r3, #2
 800803a:	77fb      	strb	r3, [r7, #31]
 800803c:	e048      	b.n	80080d0 <UART_SetConfig+0x348>
 800803e:	2304      	movs	r3, #4
 8008040:	77fb      	strb	r3, [r7, #31]
 8008042:	e045      	b.n	80080d0 <UART_SetConfig+0x348>
 8008044:	2308      	movs	r3, #8
 8008046:	77fb      	strb	r3, [r7, #31]
 8008048:	e042      	b.n	80080d0 <UART_SetConfig+0x348>
 800804a:	bf00      	nop
 800804c:	efff69f3 	.word	0xefff69f3
 8008050:	40011000 	.word	0x40011000
 8008054:	40023800 	.word	0x40023800
 8008058:	40004400 	.word	0x40004400
 800805c:	40004800 	.word	0x40004800
 8008060:	40004c00 	.word	0x40004c00
 8008064:	40005000 	.word	0x40005000
 8008068:	40011400 	.word	0x40011400
 800806c:	40007800 	.word	0x40007800
 8008070:	2310      	movs	r3, #16
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e02c      	b.n	80080d0 <UART_SetConfig+0x348>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a72      	ldr	r2, [pc, #456]	; (8008244 <UART_SetConfig+0x4bc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d125      	bne.n	80080cc <UART_SetConfig+0x344>
 8008080:	4b71      	ldr	r3, [pc, #452]	; (8008248 <UART_SetConfig+0x4c0>)
 8008082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008086:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800808a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800808e:	d017      	beq.n	80080c0 <UART_SetConfig+0x338>
 8008090:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008094:	d817      	bhi.n	80080c6 <UART_SetConfig+0x33e>
 8008096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809a:	d00b      	beq.n	80080b4 <UART_SetConfig+0x32c>
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a0:	d811      	bhi.n	80080c6 <UART_SetConfig+0x33e>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <UART_SetConfig+0x326>
 80080a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080aa:	d006      	beq.n	80080ba <UART_SetConfig+0x332>
 80080ac:	e00b      	b.n	80080c6 <UART_SetConfig+0x33e>
 80080ae:	2300      	movs	r3, #0
 80080b0:	77fb      	strb	r3, [r7, #31]
 80080b2:	e00d      	b.n	80080d0 <UART_SetConfig+0x348>
 80080b4:	2302      	movs	r3, #2
 80080b6:	77fb      	strb	r3, [r7, #31]
 80080b8:	e00a      	b.n	80080d0 <UART_SetConfig+0x348>
 80080ba:	2304      	movs	r3, #4
 80080bc:	77fb      	strb	r3, [r7, #31]
 80080be:	e007      	b.n	80080d0 <UART_SetConfig+0x348>
 80080c0:	2308      	movs	r3, #8
 80080c2:	77fb      	strb	r3, [r7, #31]
 80080c4:	e004      	b.n	80080d0 <UART_SetConfig+0x348>
 80080c6:	2310      	movs	r3, #16
 80080c8:	77fb      	strb	r3, [r7, #31]
 80080ca:	e001      	b.n	80080d0 <UART_SetConfig+0x348>
 80080cc:	2310      	movs	r3, #16
 80080ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d8:	d15b      	bne.n	8008192 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80080da:	7ffb      	ldrb	r3, [r7, #31]
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d828      	bhi.n	8008132 <UART_SetConfig+0x3aa>
 80080e0:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <UART_SetConfig+0x360>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	0800810d 	.word	0x0800810d
 80080ec:	08008115 	.word	0x08008115
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	08008133 	.word	0x08008133
 80080f8:	08008123 	.word	0x08008123
 80080fc:	08008133 	.word	0x08008133
 8008100:	08008133 	.word	0x08008133
 8008104:	08008133 	.word	0x08008133
 8008108:	0800812b 	.word	0x0800812b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800810c:	f7fe fe42 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 8008110:	61b8      	str	r0, [r7, #24]
        break;
 8008112:	e013      	b.n	800813c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008114:	f7fe fe52 	bl	8006dbc <HAL_RCC_GetPCLK2Freq>
 8008118:	61b8      	str	r0, [r7, #24]
        break;
 800811a:	e00f      	b.n	800813c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800811c:	4b4b      	ldr	r3, [pc, #300]	; (800824c <UART_SetConfig+0x4c4>)
 800811e:	61bb      	str	r3, [r7, #24]
        break;
 8008120:	e00c      	b.n	800813c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008122:	f7fe fd25 	bl	8006b70 <HAL_RCC_GetSysClockFreq>
 8008126:	61b8      	str	r0, [r7, #24]
        break;
 8008128:	e008      	b.n	800813c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800812a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812e:	61bb      	str	r3, [r7, #24]
        break;
 8008130:	e004      	b.n	800813c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	77bb      	strb	r3, [r7, #30]
        break;
 800813a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d074      	beq.n	800822c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	005a      	lsls	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	441a      	add	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	fbb2 f3f3 	udiv	r3, r2, r3
 8008156:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2b0f      	cmp	r3, #15
 800815c:	d916      	bls.n	800818c <UART_SetConfig+0x404>
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d212      	bcs.n	800818c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f023 030f 	bic.w	r3, r3, #15
 800816e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	b29b      	uxth	r3, r3
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	b29a      	uxth	r2, r3
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	4313      	orrs	r3, r2
 8008180:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	89fa      	ldrh	r2, [r7, #14]
 8008188:	60da      	str	r2, [r3, #12]
 800818a:	e04f      	b.n	800822c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	77bb      	strb	r3, [r7, #30]
 8008190:	e04c      	b.n	800822c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008192:	7ffb      	ldrb	r3, [r7, #31]
 8008194:	2b08      	cmp	r3, #8
 8008196:	d828      	bhi.n	80081ea <UART_SetConfig+0x462>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x418>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	080081eb 	.word	0x080081eb
 80081b0:	080081db 	.word	0x080081db
 80081b4:	080081eb 	.word	0x080081eb
 80081b8:	080081eb 	.word	0x080081eb
 80081bc:	080081eb 	.word	0x080081eb
 80081c0:	080081e3 	.word	0x080081e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c4:	f7fe fde6 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 80081c8:	61b8      	str	r0, [r7, #24]
        break;
 80081ca:	e013      	b.n	80081f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081cc:	f7fe fdf6 	bl	8006dbc <HAL_RCC_GetPCLK2Freq>
 80081d0:	61b8      	str	r0, [r7, #24]
        break;
 80081d2:	e00f      	b.n	80081f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d4:	4b1d      	ldr	r3, [pc, #116]	; (800824c <UART_SetConfig+0x4c4>)
 80081d6:	61bb      	str	r3, [r7, #24]
        break;
 80081d8:	e00c      	b.n	80081f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081da:	f7fe fcc9 	bl	8006b70 <HAL_RCC_GetSysClockFreq>
 80081de:	61b8      	str	r0, [r7, #24]
        break;
 80081e0:	e008      	b.n	80081f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081e6:	61bb      	str	r3, [r7, #24]
        break;
 80081e8:	e004      	b.n	80081f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	77bb      	strb	r3, [r7, #30]
        break;
 80081f2:	bf00      	nop
    }

    if (pclk != 0U)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d018      	beq.n	800822c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	085a      	lsrs	r2, r3, #1
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	441a      	add	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b0f      	cmp	r3, #15
 8008212:	d909      	bls.n	8008228 <UART_SetConfig+0x4a0>
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821a:	d205      	bcs.n	8008228 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	e001      	b.n	800822c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008238:	7fbb      	ldrb	r3, [r7, #30]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40007c00 	.word	0x40007c00
 8008248:	40023800 	.word	0x40023800
 800824c:	00f42400 	.word	0x00f42400

08008250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	f003 0308 	and.w	r3, r3, #8
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	430a      	orrs	r2, r1
 8008322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01a      	beq.n	8008366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800834e:	d10a      	bne.n	8008366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	605a      	str	r2, [r3, #4]
  }
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af02      	add	r7, sp, #8
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083a4:	f7fa fdaa 	bl	8002efc <HAL_GetTick>
 80083a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d10e      	bne.n	80083d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f81b 	bl	8008402 <UART_WaitOnFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e011      	b.n	80083fa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b09c      	sub	sp, #112	; 0x70
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	603b      	str	r3, [r7, #0]
 800840e:	4613      	mov	r3, r2
 8008410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008412:	e0a7      	b.n	8008564 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841a:	f000 80a3 	beq.w	8008564 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800841e:	f7fa fd6d 	bl	8002efc <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800842a:	429a      	cmp	r2, r3
 800842c:	d302      	bcc.n	8008434 <UART_WaitOnFlagUntilTimeout+0x32>
 800842e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008430:	2b00      	cmp	r3, #0
 8008432:	d13f      	bne.n	80084b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008448:	667b      	str	r3, [r7, #100]	; 0x64
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008452:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008454:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008458:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e6      	bne.n	8008434 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3308      	adds	r3, #8
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	663b      	str	r3, [r7, #96]	; 0x60
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008486:	64ba      	str	r2, [r7, #72]	; 0x48
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800848c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e5      	bne.n	8008466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2220      	movs	r2, #32
 800849e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e068      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d050      	beq.n	8008564 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d0:	d148      	bne.n	8008564 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fa:	637b      	str	r3, [r7, #52]	; 0x34
 80084fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e6      	bne.n	80084dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	613b      	str	r3, [r7, #16]
   return(result);
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f023 0301 	bic.w	r3, r3, #1
 8008524:	66bb      	str	r3, [r7, #104]	; 0x68
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800852e:	623a      	str	r2, [r7, #32]
 8008530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	69f9      	ldr	r1, [r7, #28]
 8008534:	6a3a      	ldr	r2, [r7, #32]
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	61bb      	str	r3, [r7, #24]
   return(result);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e5      	bne.n	800850e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2220      	movs	r2, #32
 8008546:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2220      	movs	r2, #32
 8008554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e010      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69da      	ldr	r2, [r3, #28]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4013      	ands	r3, r2
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	429a      	cmp	r2, r3
 8008572:	bf0c      	ite	eq
 8008574:	2301      	moveq	r3, #1
 8008576:	2300      	movne	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	429a      	cmp	r2, r3
 8008580:	f43f af48 	beq.w	8008414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3770      	adds	r7, #112	; 0x70
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008590:	b480      	push	{r7}
 8008592:	b097      	sub	sp, #92	; 0x5c
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	88fa      	ldrh	r2, [r7, #6]
 80085b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c2:	d10e      	bne.n	80085e2 <UART_Start_Receive_IT+0x52>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <UART_Start_Receive_IT+0x48>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085d6:	e02d      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	22ff      	movs	r2, #255	; 0xff
 80085dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085e0:	e028      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10d      	bne.n	8008606 <UART_Start_Receive_IT+0x76>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d104      	bne.n	80085fc <UART_Start_Receive_IT+0x6c>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	22ff      	movs	r2, #255	; 0xff
 80085f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085fa:	e01b      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	227f      	movs	r2, #127	; 0x7f
 8008600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008604:	e016      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800860e:	d10d      	bne.n	800862c <UART_Start_Receive_IT+0x9c>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <UART_Start_Receive_IT+0x92>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	227f      	movs	r2, #127	; 0x7f
 800861c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008620:	e008      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	223f      	movs	r2, #63	; 0x3f
 8008626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800862a:	e003      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2222      	movs	r2, #34	; 0x22
 8008640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3308      	adds	r3, #8
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	657b      	str	r3, [r7, #84]	; 0x54
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008664:	64ba      	str	r2, [r7, #72]	; 0x48
 8008666:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800866a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e5      	bne.n	8008644 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008680:	d107      	bne.n	8008692 <UART_Start_Receive_IT+0x102>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4a21      	ldr	r2, [pc, #132]	; (8008714 <UART_Start_Receive_IT+0x184>)
 800868e:	669a      	str	r2, [r3, #104]	; 0x68
 8008690:	e002      	b.n	8008698 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4a20      	ldr	r2, [pc, #128]	; (8008718 <UART_Start_Receive_IT+0x188>)
 8008696:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d019      	beq.n	80086d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80086b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086be:	637b      	str	r3, [r7, #52]	; 0x34
 80086c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e6      	bne.n	80086a0 <UART_Start_Receive_IT+0x110>
 80086d2:	e018      	b.n	8008706 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	613b      	str	r3, [r7, #16]
   return(result);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f043 0320 	orr.w	r3, r3, #32
 80086e8:	653b      	str	r3, [r7, #80]	; 0x50
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f2:	623b      	str	r3, [r7, #32]
 80086f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	69f9      	ldr	r1, [r7, #28]
 80086f8:	6a3a      	ldr	r2, [r7, #32]
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	375c      	adds	r7, #92	; 0x5c
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	08008b41 	.word	0x08008b41
 8008718:	080089db 	.word	0x080089db

0800871c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b095      	sub	sp, #84	; 0x54
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008742:	643b      	str	r3, [r7, #64]	; 0x40
 8008744:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e6      	bne.n	8008724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3308      	adds	r3, #8
 800875c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	61fb      	str	r3, [r7, #28]
   return(result);
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f023 0301 	bic.w	r3, r3, #1
 800876c:	64bb      	str	r3, [r7, #72]	; 0x48
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800877c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e5      	bne.n	8008756 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800878e:	2b01      	cmp	r3, #1
 8008790:	d118      	bne.n	80087c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	e853 3f00 	ldrex	r3, [r3]
 800879e:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f023 0310 	bic.w	r3, r3, #16
 80087a6:	647b      	str	r3, [r7, #68]	; 0x44
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6979      	ldr	r1, [r7, #20]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	613b      	str	r3, [r7, #16]
   return(result);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e6      	bne.n	8008792 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80087d8:	bf00      	nop
 80087da:	3754      	adds	r7, #84	; 0x54
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff faaa 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b08f      	sub	sp, #60	; 0x3c
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800881c:	2b21      	cmp	r3, #33	; 0x21
 800881e:	d14c      	bne.n	80088ba <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d132      	bne.n	8008892 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	61fb      	str	r3, [r7, #28]
   return(result);
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800884c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e6      	bne.n	800882c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	60bb      	str	r3, [r7, #8]
   return(result);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008872:	633b      	str	r3, [r7, #48]	; 0x30
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6979      	ldr	r1, [r7, #20]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	613b      	str	r3, [r7, #16]
   return(result);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e6      	bne.n	800885e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008890:	e013      	b.n	80088ba <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80088ba:	bf00      	nop
 80088bc:	373c      	adds	r7, #60	; 0x3c
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b091      	sub	sp, #68	; 0x44
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088d2:	2b21      	cmp	r3, #33	; 0x21
 80088d4:	d151      	bne.n	800897a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088dc:	b29b      	uxth	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d132      	bne.n	8008948 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	623b      	str	r3, [r7, #32]
   return(result);
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	633b      	str	r3, [r7, #48]	; 0x30
 8008902:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e6      	bne.n	80088e2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	60fb      	str	r3, [r7, #12]
   return(result);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008928:	637b      	str	r3, [r7, #52]	; 0x34
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	61fb      	str	r3, [r7, #28]
 8008934:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	69b9      	ldr	r1, [r7, #24]
 8008938:	69fa      	ldr	r2, [r7, #28]
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	617b      	str	r3, [r7, #20]
   return(result);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e6      	bne.n	8008914 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008946:	e018      	b.n	800897a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800894e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800895c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008962:	1c9a      	adds	r2, r3, #2
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800897a:	bf00      	nop
 800897c:	3744      	adds	r7, #68	; 0x44
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b088      	sub	sp, #32
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	e853 3f00 	ldrex	r3, [r3]
 800899a:	60bb      	str	r3, [r7, #8]
   return(result);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	461a      	mov	r2, r3
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b0:	6979      	ldr	r1, [r7, #20]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	e841 2300 	strex	r3, r2, [r1]
 80089b8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e6      	bne.n	800898e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2220      	movs	r2, #32
 80089c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff f9bb 	bl	8007d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089d2:	bf00      	nop
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b096      	sub	sp, #88	; 0x58
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089f2:	2b22      	cmp	r3, #34	; 0x22
 80089f4:	f040 8098 	bne.w	8008b28 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a02:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008a06:	b2d9      	uxtb	r1, r3
 8008a08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	400a      	ands	r2, r1
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d17b      	bne.n	8008b38 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a54:	653b      	str	r3, [r7, #80]	; 0x50
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e6      	bne.n	8008a40 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	623b      	str	r3, [r7, #32]
   return(result);
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a92:	633a      	str	r2, [r7, #48]	; 0x30
 8008a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e5      	bne.n	8008a72 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d12e      	bne.n	8008b20 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f023 0310 	bic.w	r3, r3, #16
 8008adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	69b9      	ldr	r1, [r7, #24]
 8008aec:	69fa      	ldr	r2, [r7, #28]
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	617b      	str	r3, [r7, #20]
   return(result);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e6      	bne.n	8008ac8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b10      	cmp	r3, #16
 8008b06:	d103      	bne.n	8008b10 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2210      	movs	r2, #16
 8008b0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff f929 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b1e:	e00b      	b.n	8008b38 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7f7 fdff 	bl	8000724 <HAL_UART_RxCpltCallback>
}
 8008b26:	e007      	b.n	8008b38 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699a      	ldr	r2, [r3, #24]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0208 	orr.w	r2, r2, #8
 8008b36:	619a      	str	r2, [r3, #24]
}
 8008b38:	bf00      	nop
 8008b3a:	3758      	adds	r7, #88	; 0x58
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b096      	sub	sp, #88	; 0x58
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b4e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b58:	2b22      	cmp	r3, #34	; 0x22
 8008b5a:	f040 8098 	bne.w	8008c8e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b6e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b76:	4013      	ands	r3, r2
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	1c9a      	adds	r2, r3, #2
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	3b01      	subs	r3, #1
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d17b      	bne.n	8008c9e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8008bc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e6      	bne.n	8008ba6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3308      	adds	r3, #8
 8008bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e5      	bne.n	8008bd8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d12e      	bne.n	8008c86 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f023 0310 	bic.w	r3, r3, #16
 8008c42:	647b      	str	r3, [r7, #68]	; 0x44
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c4c:	61bb      	str	r3, [r7, #24]
 8008c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6979      	ldr	r1, [r7, #20]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	613b      	str	r3, [r7, #16]
   return(result);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e6      	bne.n	8008c2e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f003 0310 	and.w	r3, r3, #16
 8008c6a:	2b10      	cmp	r3, #16
 8008c6c:	d103      	bne.n	8008c76 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2210      	movs	r2, #16
 8008c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff f876 	bl	8007d70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c84:	e00b      	b.n	8008c9e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7f7 fd4c 	bl	8000724 <HAL_UART_RxCpltCallback>
}
 8008c8c:	e007      	b.n	8008c9e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	699a      	ldr	r2, [r3, #24]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 0208 	orr.w	r2, r2, #8
 8008c9c:	619a      	str	r2, [r3, #24]
}
 8008c9e:	bf00      	nop
 8008ca0:	3758      	adds	r7, #88	; 0x58
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ca8:	b084      	sub	sp, #16
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	f107 001c 	add.w	r0, r7, #28
 8008cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d120      	bne.n	8008d02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68da      	ldr	r2, [r3, #12]
 8008cd0:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <USB_CoreInit+0xac>)
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d105      	bne.n	8008cf6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa96 	bl	8009228 <USB_CoreReset>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
 8008d00:	e010      	b.n	8008d24 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fa8a 	bl	8009228 <USB_CoreReset>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d10b      	bne.n	8008d42 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f043 0206 	orr.w	r2, r3, #6
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f043 0220 	orr.w	r2, r3, #32
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d4e:	b004      	add	sp, #16
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	ffbdffbf 	.word	0xffbdffbf

08008d58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f023 0201 	bic.w	r2, r3, #1
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d115      	bne.n	8008dc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008da8:	2001      	movs	r0, #1
 8008daa:	f7fa f8b3 	bl	8002f14 <HAL_Delay>
      ms++;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3301      	adds	r3, #1
 8008db2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fa29 	bl	800920c <USB_GetMode>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d01e      	beq.n	8008dfe <USB_SetCurrentMode+0x84>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b31      	cmp	r3, #49	; 0x31
 8008dc4:	d9f0      	bls.n	8008da8 <USB_SetCurrentMode+0x2e>
 8008dc6:	e01a      	b.n	8008dfe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d115      	bne.n	8008dfa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008dda:	2001      	movs	r0, #1
 8008ddc:	f7fa f89a 	bl	8002f14 <HAL_Delay>
      ms++;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa10 	bl	800920c <USB_GetMode>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d005      	beq.n	8008dfe <USB_SetCurrentMode+0x84>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b31      	cmp	r3, #49	; 0x31
 8008df6:	d9f0      	bls.n	8008dda <USB_SetCurrentMode+0x60>
 8008df8:	e001      	b.n	8008dfe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e005      	b.n	8008e0a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b32      	cmp	r3, #50	; 0x32
 8008e02:	d101      	bne.n	8008e08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e14:	b084      	sub	sp, #16
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b086      	sub	sp, #24
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e2e:	2300      	movs	r3, #0
 8008e30:	613b      	str	r3, [r7, #16]
 8008e32:	e009      	b.n	8008e48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	3340      	adds	r3, #64	; 0x40
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	2200      	movs	r2, #0
 8008e40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	3301      	adds	r3, #1
 8008e46:	613b      	str	r3, [r7, #16]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2b0e      	cmp	r3, #14
 8008e4c:	d9f2      	bls.n	8008e34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d11c      	bne.n	8008e8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e62:	f043 0302 	orr.w	r3, r3, #2
 8008e66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e005      	b.n	8008e9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eac:	4619      	mov	r1, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	680b      	ldr	r3, [r1, #0]
 8008eb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d10c      	bne.n	8008eda <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d104      	bne.n	8008ed0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f965 	bl	8009198 <USB_SetDevSpeed>
 8008ece:	e008      	b.n	8008ee2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f960 	bl	8009198 <USB_SetDevSpeed>
 8008ed8:	e003      	b.n	8008ee2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008eda:	2103      	movs	r1, #3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f95b 	bl	8009198 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ee2:	2110      	movs	r1, #16
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f8f3 	bl	80090d0 <USB_FlushTxFifo>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f91f 	bl	8009138 <USB_FlushRxFifo>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f16:	461a      	mov	r2, r3
 8008f18:	2300      	movs	r3, #0
 8008f1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f22:	461a      	mov	r2, r3
 8008f24:	2300      	movs	r3, #0
 8008f26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	e043      	b.n	8008fb6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f44:	d118      	bne.n	8008f78 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	e013      	b.n	8008f8a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	e008      	b.n	8008f8a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f84:	461a      	mov	r2, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f96:	461a      	mov	r2, r3
 8008f98:	2300      	movs	r3, #0
 8008f9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	613b      	str	r3, [r7, #16]
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d3b7      	bcc.n	8008f2e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	613b      	str	r3, [r7, #16]
 8008fc2:	e043      	b.n	800904c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fda:	d118      	bne.n	800900e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10a      	bne.n	8008ff8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	e013      	b.n	8009020 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009004:	461a      	mov	r2, r3
 8009006:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	e008      	b.n	8009020 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901a:	461a      	mov	r2, r3
 800901c:	2300      	movs	r3, #0
 800901e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4413      	add	r3, r2
 8009028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902c:	461a      	mov	r2, r3
 800902e:	2300      	movs	r3, #0
 8009030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903e:	461a      	mov	r2, r3
 8009040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009044:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	3301      	adds	r3, #1
 800904a:	613b      	str	r3, [r7, #16]
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	429a      	cmp	r2, r3
 8009052:	d3b7      	bcc.n	8008fc4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009066:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009074:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	2b00      	cmp	r3, #0
 800907a:	d105      	bne.n	8009088 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f043 0210 	orr.w	r2, r3, #16
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	699a      	ldr	r2, [r3, #24]
 800908c:	4b0e      	ldr	r3, [pc, #56]	; (80090c8 <USB_DevInit+0x2b4>)
 800908e:	4313      	orrs	r3, r2
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	f043 0208 	orr.w	r2, r3, #8
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d105      	bne.n	80090b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	699a      	ldr	r2, [r3, #24]
 80090b0:	4b06      	ldr	r3, [pc, #24]	; (80090cc <USB_DevInit+0x2b8>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090c4:	b004      	add	sp, #16
 80090c6:	4770      	bx	lr
 80090c8:	803c3800 	.word	0x803c3800
 80090cc:	40000004 	.word	0x40000004

080090d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4a13      	ldr	r2, [pc, #76]	; (8009134 <USB_FlushTxFifo+0x64>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d901      	bls.n	80090f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e01b      	b.n	8009128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	daf2      	bge.n	80090de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	019b      	lsls	r3, r3, #6
 8009100:	f043 0220 	orr.w	r2, r3, #32
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3301      	adds	r3, #1
 800910c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4a08      	ldr	r2, [pc, #32]	; (8009134 <USB_FlushTxFifo+0x64>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d901      	bls.n	800911a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e006      	b.n	8009128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b20      	cmp	r3, #32
 8009124:	d0f0      	beq.n	8009108 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	00030d40 	.word	0x00030d40

08009138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3301      	adds	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4a11      	ldr	r2, [pc, #68]	; (8009194 <USB_FlushRxFifo+0x5c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d901      	bls.n	8009156 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e018      	b.n	8009188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	daf2      	bge.n	8009144 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2210      	movs	r2, #16
 8009166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4a08      	ldr	r2, [pc, #32]	; (8009194 <USB_FlushRxFifo+0x5c>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d901      	bls.n	800917a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e006      	b.n	8009188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b10      	cmp	r3, #16
 8009184:	d0f0      	beq.n	8009168 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	00030d40 	.word	0x00030d40

08009198 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	68f9      	ldr	r1, [r7, #12]
 80091b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091b8:	4313      	orrs	r3, r2
 80091ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091e4:	f023 0303 	bic.w	r3, r3, #3
 80091e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091f8:	f043 0302 	orr.w	r3, r3, #2
 80091fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	f003 0301 	and.w	r3, r3, #1
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3301      	adds	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4a13      	ldr	r2, [pc, #76]	; (800928c <USB_CoreReset+0x64>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d901      	bls.n	8009246 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e01b      	b.n	800927e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	daf2      	bge.n	8009234 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	f043 0201 	orr.w	r2, r3, #1
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4a09      	ldr	r2, [pc, #36]	; (800928c <USB_CoreReset+0x64>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d901      	bls.n	8009270 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e006      	b.n	800927e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b01      	cmp	r3, #1
 800927a:	d0f0      	beq.n	800925e <USB_CoreReset+0x36>

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	00030d40 	.word	0x00030d40

08009290 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009296:	f000 fc55 	bl	8009b44 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800929a:	4b19      	ldr	r3, [pc, #100]	; (8009300 <MX_LWIP_Init+0x70>)
 800929c:	2200      	movs	r2, #0
 800929e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80092a0:	4b18      	ldr	r3, [pc, #96]	; (8009304 <MX_LWIP_Init+0x74>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80092a6:	4b18      	ldr	r3, [pc, #96]	; (8009308 <MX_LWIP_Init+0x78>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80092ac:	4b17      	ldr	r3, [pc, #92]	; (800930c <MX_LWIP_Init+0x7c>)
 80092ae:	9302      	str	r3, [sp, #8]
 80092b0:	4b17      	ldr	r3, [pc, #92]	; (8009310 <MX_LWIP_Init+0x80>)
 80092b2:	9301      	str	r3, [sp, #4]
 80092b4:	2300      	movs	r3, #0
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	4b13      	ldr	r3, [pc, #76]	; (8009308 <MX_LWIP_Init+0x78>)
 80092ba:	4a12      	ldr	r2, [pc, #72]	; (8009304 <MX_LWIP_Init+0x74>)
 80092bc:	4910      	ldr	r1, [pc, #64]	; (8009300 <MX_LWIP_Init+0x70>)
 80092be:	4815      	ldr	r0, [pc, #84]	; (8009314 <MX_LWIP_Init+0x84>)
 80092c0:	f001 f92c 	bl	800a51c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80092c4:	4813      	ldr	r0, [pc, #76]	; (8009314 <MX_LWIP_Init+0x84>)
 80092c6:	f001 fae3 	bl	800a890 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80092ca:	4b12      	ldr	r3, [pc, #72]	; (8009314 <MX_LWIP_Init+0x84>)
 80092cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80092d0:	089b      	lsrs	r3, r3, #2
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80092dc:	480d      	ldr	r0, [pc, #52]	; (8009314 <MX_LWIP_Init+0x84>)
 80092de:	f001 fae7 	bl	800a8b0 <netif_set_up>
 80092e2:	e002      	b.n	80092ea <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80092e4:	480b      	ldr	r0, [pc, #44]	; (8009314 <MX_LWIP_Init+0x84>)
 80092e6:	f001 fb4f 	bl	800a988 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80092ea:	490b      	ldr	r1, [pc, #44]	; (8009318 <MX_LWIP_Init+0x88>)
 80092ec:	4809      	ldr	r0, [pc, #36]	; (8009314 <MX_LWIP_Init+0x84>)
 80092ee:	f001 fbe5 	bl	800aabc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80092f2:	4808      	ldr	r0, [pc, #32]	; (8009314 <MX_LWIP_Init+0x84>)
 80092f4:	f008 fce0 	bl	8011cb8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80092f8:	bf00      	nop
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20000e38 	.word	0x20000e38
 8009304:	20000e3c 	.word	0x20000e3c
 8009308:	20000e40 	.word	0x20000e40
 800930c:	08015709 	.word	0x08015709
 8009310:	08009631 	.word	0x08009631
 8009314:	20000e00 	.word	0x20000e00
 8009318:	0800931d 	.word	0x0800931d

0800931c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <SCB_InvalidateDCache_by_Addr>:
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009342:	2320      	movs	r3, #32
 8009344:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009346:	f3bf 8f4f 	dsb	sy
}
 800934a:	bf00      	nop
    while (op_size > 0) {
 800934c:	e00b      	b.n	8009366 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800934e:	4a0d      	ldr	r2, [pc, #52]	; (8009384 <SCB_InvalidateDCache_by_Addr+0x54>)
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4413      	add	r3, r2
 800935c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	dcf0      	bgt.n	800934e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800936c:	f3bf 8f4f 	dsb	sy
}
 8009370:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009372:	f3bf 8f6f 	isb	sy
}
 8009376:	bf00      	nop
}
 8009378:	bf00      	nop
 800937a:	371c      	adds	r7, #28
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	e000ed00 	.word	0xe000ed00

08009388 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009394:	4b40      	ldr	r3, [pc, #256]	; (8009498 <low_level_init+0x110>)
 8009396:	4a41      	ldr	r2, [pc, #260]	; (800949c <low_level_init+0x114>)
 8009398:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800939a:	2300      	movs	r3, #0
 800939c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800939e:	2380      	movs	r3, #128	; 0x80
 80093a0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80093a2:	23e1      	movs	r3, #225	; 0xe1
 80093a4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80093a6:	2300      	movs	r3, #0
 80093a8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80093aa:	2300      	movs	r3, #0
 80093ac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80093ae:	2300      	movs	r3, #0
 80093b0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80093b2:	4a39      	ldr	r2, [pc, #228]	; (8009498 <low_level_init+0x110>)
 80093b4:	f107 0308 	add.w	r3, r7, #8
 80093b8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80093ba:	4b37      	ldr	r3, [pc, #220]	; (8009498 <low_level_init+0x110>)
 80093bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80093c0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80093c2:	4b35      	ldr	r3, [pc, #212]	; (8009498 <low_level_init+0x110>)
 80093c4:	4a36      	ldr	r2, [pc, #216]	; (80094a0 <low_level_init+0x118>)
 80093c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80093c8:	4b33      	ldr	r3, [pc, #204]	; (8009498 <low_level_init+0x110>)
 80093ca:	4a36      	ldr	r2, [pc, #216]	; (80094a4 <low_level_init+0x11c>)
 80093cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80093ce:	4b32      	ldr	r3, [pc, #200]	; (8009498 <low_level_init+0x110>)
 80093d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80093d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80093d6:	4830      	ldr	r0, [pc, #192]	; (8009498 <low_level_init+0x110>)
 80093d8:	f7fa feb4 	bl	8004144 <HAL_ETH_Init>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80093e0:	2238      	movs	r2, #56	; 0x38
 80093e2:	2100      	movs	r1, #0
 80093e4:	4830      	ldr	r0, [pc, #192]	; (80094a8 <low_level_init+0x120>)
 80093e6:	f00c fac1 	bl	801596c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80093ea:	4b2f      	ldr	r3, [pc, #188]	; (80094a8 <low_level_init+0x120>)
 80093ec:	2221      	movs	r2, #33	; 0x21
 80093ee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80093f0:	4b2d      	ldr	r3, [pc, #180]	; (80094a8 <low_level_init+0x120>)
 80093f2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80093f6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80093f8:	4b2b      	ldr	r3, [pc, #172]	; (80094a8 <low_level_init+0x120>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80093fe:	482b      	ldr	r0, [pc, #172]	; (80094ac <low_level_init+0x124>)
 8009400:	f000 ff54 	bl	800a2ac <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2206      	movs	r2, #6
 8009408:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800940c:	4b22      	ldr	r3, [pc, #136]	; (8009498 <low_level_init+0x110>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	781a      	ldrb	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009418:	4b1f      	ldr	r3, [pc, #124]	; (8009498 <low_level_init+0x110>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	785a      	ldrb	r2, [r3, #1]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009424:	4b1c      	ldr	r3, [pc, #112]	; (8009498 <low_level_init+0x110>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	789a      	ldrb	r2, [r3, #2]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009430:	4b19      	ldr	r3, [pc, #100]	; (8009498 <low_level_init+0x110>)
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	78da      	ldrb	r2, [r3, #3]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800943c:	4b16      	ldr	r3, [pc, #88]	; (8009498 <low_level_init+0x110>)
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	791a      	ldrb	r2, [r3, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009448:	4b13      	ldr	r3, [pc, #76]	; (8009498 <low_level_init+0x110>)
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	795a      	ldrb	r2, [r3, #5]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800945a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009462:	f043 030a 	orr.w	r3, r3, #10
 8009466:	b2da      	uxtb	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800946e:	4910      	ldr	r1, [pc, #64]	; (80094b0 <low_level_init+0x128>)
 8009470:	4810      	ldr	r0, [pc, #64]	; (80094b4 <low_level_init+0x12c>)
 8009472:	f7f9 fb88 	bl	8002b86 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009476:	480f      	ldr	r0, [pc, #60]	; (80094b4 <low_level_init+0x12c>)
 8009478:	f7f9 fbb7 	bl	8002bea <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d103      	bne.n	800948a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa32 	bl	80098ec <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009488:	e001      	b.n	800948e <low_level_init+0x106>
    Error_Handler();
 800948a:	f7f7 fe24 	bl	80010d6 <Error_Handler>
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	200057d0 	.word	0x200057d0
 800949c:	40028000 	.word	0x40028000
 80094a0:	20000168 	.word	0x20000168
 80094a4:	200000c8 	.word	0x200000c8
 80094a8:	20005880 	.word	0x20005880
 80094ac:	0801c41c 	.word	0x0801c41c
 80094b0:	20000040 	.word	0x20000040
 80094b4:	200058b8 	.word	0x200058b8

080094b8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b092      	sub	sp, #72	; 0x48
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80094d0:	f107 030c 	add.w	r3, r7, #12
 80094d4:	2230      	movs	r2, #48	; 0x30
 80094d6:	2100      	movs	r1, #0
 80094d8:	4618      	mov	r0, r3
 80094da:	f00c fa47 	bl	801596c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80094de:	f107 030c 	add.w	r3, r7, #12
 80094e2:	2230      	movs	r2, #48	; 0x30
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f00c fa40 	bl	801596c <memset>

  for(q = p; q != NULL; q = q->next)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	643b      	str	r3, [r7, #64]	; 0x40
 80094f0:	e045      	b.n	800957e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80094f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d902      	bls.n	80094fe <low_level_output+0x46>
      return ERR_IF;
 80094f8:	f06f 030b 	mvn.w	r3, #11
 80094fc:	e055      	b.n	80095aa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80094fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009500:	6859      	ldr	r1, [r3, #4]
 8009502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009504:	4613      	mov	r3, r2
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	3348      	adds	r3, #72	; 0x48
 800950e:	443b      	add	r3, r7
 8009510:	3b3c      	subs	r3, #60	; 0x3c
 8009512:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009516:	895b      	ldrh	r3, [r3, #10]
 8009518:	4619      	mov	r1, r3
 800951a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800951c:	4613      	mov	r3, r2
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	3348      	adds	r3, #72	; 0x48
 8009526:	443b      	add	r3, r7
 8009528:	3b38      	subs	r3, #56	; 0x38
 800952a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800952c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800952e:	2b00      	cmp	r3, #0
 8009530:	d011      	beq.n	8009556 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009534:	1e5a      	subs	r2, r3, #1
 8009536:	f107 000c 	add.w	r0, r7, #12
 800953a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800953c:	460b      	mov	r3, r1
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	440b      	add	r3, r1
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	18c1      	adds	r1, r0, r3
 8009546:	4613      	mov	r3, r2
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	3348      	adds	r3, #72	; 0x48
 8009550:	443b      	add	r3, r7
 8009552:	3b34      	subs	r3, #52	; 0x34
 8009554:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d109      	bne.n	8009572 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800955e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009560:	4613      	mov	r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	3348      	adds	r3, #72	; 0x48
 800956a:	443b      	add	r3, r7
 800956c:	3b34      	subs	r3, #52	; 0x34
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009574:	3301      	adds	r3, #1
 8009576:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	643b      	str	r3, [r7, #64]	; 0x40
 800957e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1b6      	bne.n	80094f2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	891b      	ldrh	r3, [r3, #8]
 8009588:	461a      	mov	r2, r3
 800958a:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <low_level_output+0xfc>)
 800958c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800958e:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <low_level_output+0xfc>)
 8009590:	f107 030c 	add.w	r3, r7, #12
 8009594:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009596:	4a07      	ldr	r2, [pc, #28]	; (80095b4 <low_level_output+0xfc>)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800959c:	2214      	movs	r2, #20
 800959e:	4905      	ldr	r1, [pc, #20]	; (80095b4 <low_level_output+0xfc>)
 80095a0:	4805      	ldr	r0, [pc, #20]	; (80095b8 <low_level_output+0x100>)
 80095a2:	f7fa ff03 	bl	80043ac <HAL_ETH_Transmit>

  return errval;
 80095a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3748      	adds	r7, #72	; 0x48
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20005880 	.word	0x20005880
 80095b8:	200057d0 	.word	0x200057d0

080095bc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80095c8:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <low_level_input+0x2c>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d105      	bne.n	80095dc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	4619      	mov	r1, r3
 80095d6:	4805      	ldr	r0, [pc, #20]	; (80095ec <low_level_input+0x30>)
 80095d8:	f7fa ff7c 	bl	80044d4 <HAL_ETH_ReadData>
  }

  return p;
 80095dc:	68fb      	ldr	r3, [r7, #12]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	200057cc 	.word	0x200057cc
 80095ec:	200057d0 	.word	0x200057d0

080095f0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff ffdd 	bl	80095bc <low_level_input>
 8009602:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	4798      	blx	r3
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f001 fdce 	bl	800b1bc <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1ea      	bne.n	80095fc <ethernetif_input+0xc>
}
 8009626:	bf00      	nop
 8009628:	bf00      	nop
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <ethernetif_init+0x1c>
 800963e:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <ethernetif_init+0x48>)
 8009640:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 8009644:	490d      	ldr	r1, [pc, #52]	; (800967c <ethernetif_init+0x4c>)
 8009646:	480e      	ldr	r0, [pc, #56]	; (8009680 <ethernetif_init+0x50>)
 8009648:	f00c f998 	bl	801597c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2273      	movs	r2, #115	; 0x73
 8009650:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2274      	movs	r2, #116	; 0x74
 8009658:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a09      	ldr	r2, [pc, #36]	; (8009684 <ethernetif_init+0x54>)
 8009660:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a08      	ldr	r2, [pc, #32]	; (8009688 <ethernetif_init+0x58>)
 8009666:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff fe8d 	bl	8009388 <low_level_init>

  return ERR_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	08016fa4 	.word	0x08016fa4
 800967c:	08016fc0 	.word	0x08016fc0
 8009680:	08016fd0 	.word	0x08016fd0
 8009684:	08013b85 	.word	0x08013b85
 8009688:	080094b9 	.word	0x080094b9

0800968c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009698:	68f9      	ldr	r1, [r7, #12]
 800969a:	4807      	ldr	r0, [pc, #28]	; (80096b8 <pbuf_free_custom+0x2c>)
 800969c:	f000 fee8 	bl	800a470 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <pbuf_free_custom+0x30>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d102      	bne.n	80096ae <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80096a8:	4b04      	ldr	r3, [pc, #16]	; (80096bc <pbuf_free_custom+0x30>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	701a      	strb	r2, [r3, #0]
  }
}
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	0801c41c 	.word	0x0801c41c
 80096bc:	200057cc 	.word	0x200057cc

080096c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80096c4:	f7f9 fc1a 	bl	8002efc <HAL_GetTick>
 80096c8:	4603      	mov	r3, r0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08e      	sub	sp, #56	; 0x38
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	605a      	str	r2, [r3, #4]
 80096e2:	609a      	str	r2, [r3, #8]
 80096e4:	60da      	str	r2, [r3, #12]
 80096e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a52      	ldr	r2, [pc, #328]	; (8009838 <HAL_ETH_MspInit+0x168>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	f040 809e 	bne.w	8009830 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80096f4:	4b51      	ldr	r3, [pc, #324]	; (800983c <HAL_ETH_MspInit+0x16c>)
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	4a50      	ldr	r2, [pc, #320]	; (800983c <HAL_ETH_MspInit+0x16c>)
 80096fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80096fe:	6313      	str	r3, [r2, #48]	; 0x30
 8009700:	4b4e      	ldr	r3, [pc, #312]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009708:	623b      	str	r3, [r7, #32]
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	4b4b      	ldr	r3, [pc, #300]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800970e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009710:	4a4a      	ldr	r2, [pc, #296]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009716:	6313      	str	r3, [r2, #48]	; 0x30
 8009718:	4b48      	ldr	r3, [pc, #288]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009720:	61fb      	str	r3, [r7, #28]
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	4b45      	ldr	r3, [pc, #276]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009728:	4a44      	ldr	r2, [pc, #272]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800972a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800972e:	6313      	str	r3, [r2, #48]	; 0x30
 8009730:	4b42      	ldr	r3, [pc, #264]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009738:	61bb      	str	r3, [r7, #24]
 800973a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800973c:	4b3f      	ldr	r3, [pc, #252]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	4a3e      	ldr	r2, [pc, #248]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009742:	f043 0304 	orr.w	r3, r3, #4
 8009746:	6313      	str	r3, [r2, #48]	; 0x30
 8009748:	4b3c      	ldr	r3, [pc, #240]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800974a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009754:	4b39      	ldr	r3, [pc, #228]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009758:	4a38      	ldr	r2, [pc, #224]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800975a:	f043 0301 	orr.w	r3, r3, #1
 800975e:	6313      	str	r3, [r2, #48]	; 0x30
 8009760:	4b36      	ldr	r3, [pc, #216]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800976c:	4b33      	ldr	r3, [pc, #204]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800976e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009770:	4a32      	ldr	r2, [pc, #200]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009772:	f043 0302 	orr.w	r3, r3, #2
 8009776:	6313      	str	r3, [r2, #48]	; 0x30
 8009778:	4b30      	ldr	r3, [pc, #192]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800977a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	60fb      	str	r3, [r7, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009784:	4b2d      	ldr	r3, [pc, #180]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	4a2c      	ldr	r2, [pc, #176]	; (800983c <HAL_ETH_MspInit+0x16c>)
 800978a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978e:	6313      	str	r3, [r2, #48]	; 0x30
 8009790:	4b2a      	ldr	r3, [pc, #168]	; (800983c <HAL_ETH_MspInit+0x16c>)
 8009792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009798:	60bb      	str	r3, [r7, #8]
 800979a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800979c:	2332      	movs	r3, #50	; 0x32
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a0:	2302      	movs	r3, #2
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097a8:	2303      	movs	r3, #3
 80097aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097ac:	230b      	movs	r3, #11
 80097ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097b4:	4619      	mov	r1, r3
 80097b6:	4822      	ldr	r0, [pc, #136]	; (8009840 <HAL_ETH_MspInit+0x170>)
 80097b8:	f7fb feaa 	bl	8005510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80097bc:	2386      	movs	r3, #134	; 0x86
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097c0:	2302      	movs	r3, #2
 80097c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c4:	2300      	movs	r3, #0
 80097c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097c8:	2303      	movs	r3, #3
 80097ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097cc:	230b      	movs	r3, #11
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097d4:	4619      	mov	r1, r3
 80097d6:	481b      	ldr	r0, [pc, #108]	; (8009844 <HAL_ETH_MspInit+0x174>)
 80097d8:	f7fb fe9a 	bl	8005510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 80097dc:	f242 0301 	movw	r3, #8193	; 0x2001
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e2:	2302      	movs	r3, #2
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097ea:	2303      	movs	r3, #3
 80097ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097ee:	230b      	movs	r3, #11
 80097f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097f6:	4619      	mov	r1, r3
 80097f8:	4813      	ldr	r0, [pc, #76]	; (8009848 <HAL_ETH_MspInit+0x178>)
 80097fa:	f7fb fe89 	bl	8005510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80097fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009804:	2302      	movs	r3, #2
 8009806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009808:	2300      	movs	r3, #0
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800980c:	2303      	movs	r3, #3
 800980e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009810:	230b      	movs	r3, #11
 8009812:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009818:	4619      	mov	r1, r3
 800981a:	480c      	ldr	r0, [pc, #48]	; (800984c <HAL_ETH_MspInit+0x17c>)
 800981c:	f7fb fe78 	bl	8005510 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	203d      	movs	r0, #61	; 0x3d
 8009826:	f7fa f8a2 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800982a:	203d      	movs	r0, #61	; 0x3d
 800982c:	f7fa f8bb 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009830:	bf00      	nop
 8009832:	3738      	adds	r7, #56	; 0x38
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	40028000 	.word	0x40028000
 800983c:	40023800 	.word	0x40023800
 8009840:	40020800 	.word	0x40020800
 8009844:	40020000 	.word	0x40020000
 8009848:	40020400 	.word	0x40020400
 800984c:	40021800 	.word	0x40021800

08009850 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009854:	4802      	ldr	r0, [pc, #8]	; (8009860 <ETH_PHY_IO_Init+0x10>)
 8009856:	f7fb fa01 	bl	8004c5c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	bd80      	pop	{r7, pc}
 8009860:	200057d0 	.word	0x200057d0

08009864 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0
  return 0;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	4807      	ldr	r0, [pc, #28]	; (80098a4 <ETH_PHY_IO_ReadReg+0x30>)
 8009888:	f7fb f850 	bl	800492c <HAL_ETH_ReadPHYRegister>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	e000      	b.n	800989a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200057d0 	.word	0x200057d0

080098a8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	68f9      	ldr	r1, [r7, #12]
 80098ba:	4807      	ldr	r0, [pc, #28]	; (80098d8 <ETH_PHY_IO_WriteReg+0x30>)
 80098bc:	f7fb f881 	bl	80049c2 <HAL_ETH_WritePHYRegister>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ca:	e000      	b.n	80098ce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	200057d0 	.word	0x200057d0

080098dc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80098e0:	f7f9 fb0c 	bl	8002efc <HAL_GetTick>
 80098e4:	4603      	mov	r3, r0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b0a0      	sub	sp, #128	; 0x80
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80098f4:	f107 030c 	add.w	r3, r7, #12
 80098f8:	2264      	movs	r2, #100	; 0x64
 80098fa:	2100      	movs	r1, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f00c f835 	bl	801596c <memset>
  int32_t PHYLinkState = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	67fb      	str	r3, [r7, #124]	; 0x7c
 800990a:	2300      	movs	r3, #0
 800990c:	67bb      	str	r3, [r7, #120]	; 0x78
 800990e:	2300      	movs	r3, #0
 8009910:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009912:	483a      	ldr	r0, [pc, #232]	; (80099fc <ethernet_link_check_state+0x110>)
 8009914:	f7f9 fa11 	bl	8002d3a <LAN8742_GetLinkState>
 8009918:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009920:	089b      	lsrs	r3, r3, #2
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00c      	beq.n	8009946 <ethernet_link_check_state+0x5a>
 800992c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800992e:	2b01      	cmp	r3, #1
 8009930:	dc09      	bgt.n	8009946 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8009932:	4833      	ldr	r0, [pc, #204]	; (8009a00 <ethernet_link_check_state+0x114>)
 8009934:	f7fa fce1 	bl	80042fa <HAL_ETH_Stop>
    netif_set_down(netif);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 f825 	bl	800a988 <netif_set_down>
    netif_set_link_down(netif);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 f88c 	bl	800aa5c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009944:	e055      	b.n	80099f2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d14e      	bne.n	80099f2 <ethernet_link_check_state+0x106>
 8009954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009956:	2b01      	cmp	r3, #1
 8009958:	dd4b      	ble.n	80099f2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800995a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800995c:	3b02      	subs	r3, #2
 800995e:	2b03      	cmp	r3, #3
 8009960:	d82a      	bhi.n	80099b8 <ethernet_link_check_state+0xcc>
 8009962:	a201      	add	r2, pc, #4	; (adr r2, 8009968 <ethernet_link_check_state+0x7c>)
 8009964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009968:	08009979 	.word	0x08009979
 800996c:	0800998b 	.word	0x0800998b
 8009970:	0800999b 	.word	0x0800999b
 8009974:	080099ab 	.word	0x080099ab
      duplex = ETH_FULLDUPLEX_MODE;
 8009978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800997c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800997e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009982:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009984:	2301      	movs	r3, #1
 8009986:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009988:	e017      	b.n	80099ba <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800998a:	2300      	movs	r3, #0
 800998c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800998e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009992:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009994:	2301      	movs	r3, #1
 8009996:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009998:	e00f      	b.n	80099ba <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800999a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800999e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80099a0:	2300      	movs	r3, #0
 80099a2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80099a8:	e007      	b.n	80099ba <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80099aa:	2300      	movs	r3, #0
 80099ac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80099ae:	2300      	movs	r3, #0
 80099b0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80099b2:	2301      	movs	r3, #1
 80099b4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80099b6:	e000      	b.n	80099ba <ethernet_link_check_state+0xce>
      break;
 80099b8:	bf00      	nop
    if(linkchanged)
 80099ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d018      	beq.n	80099f2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80099c0:	f107 030c 	add.w	r3, r7, #12
 80099c4:	4619      	mov	r1, r3
 80099c6:	480e      	ldr	r0, [pc, #56]	; (8009a00 <ethernet_link_check_state+0x114>)
 80099c8:	f7fb f844 	bl	8004a54 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80099cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099ce:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80099d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099d2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	4619      	mov	r1, r3
 80099da:	4809      	ldr	r0, [pc, #36]	; (8009a00 <ethernet_link_check_state+0x114>)
 80099dc:	f7fb f924 	bl	8004c28 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80099e0:	4807      	ldr	r0, [pc, #28]	; (8009a00 <ethernet_link_check_state+0x114>)
 80099e2:	f7fa fc2b 	bl	800423c <HAL_ETH_Start>
      netif_set_up(netif);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 ff62 	bl	800a8b0 <netif_set_up>
      netif_set_link_up(netif);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fffd 	bl	800a9ec <netif_set_link_up>
}
 80099f2:	bf00      	nop
 80099f4:	3780      	adds	r7, #128	; 0x80
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200058b8 	.word	0x200058b8
 8009a00:	200057d0 	.word	0x200057d0

08009a04 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009a0c:	4812      	ldr	r0, [pc, #72]	; (8009a58 <HAL_ETH_RxAllocateCallback+0x54>)
 8009a0e:	f000 fcc1 	bl	800a394 <memp_malloc_pool>
 8009a12:	60f8      	str	r0, [r7, #12]
  if (p)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d014      	beq.n	8009a44 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f103 0220 	add.w	r2, r3, #32
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4a0d      	ldr	r2, [pc, #52]	; (8009a5c <HAL_ETH_RxAllocateCallback+0x58>)
 8009a28:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009a32:	9201      	str	r2, [sp, #4]
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2241      	movs	r2, #65	; 0x41
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	f001 fa03 	bl	800ae48 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009a42:	e005      	b.n	8009a50 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009a44:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009a46:	2201      	movs	r2, #1
 8009a48:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]
}
 8009a50:	bf00      	nop
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	0801c41c 	.word	0x0801c41c
 8009a5c:	0800968d 	.word	0x0800968d
 8009a60:	200057cc 	.word	0x200057cc

08009a64 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3b20      	subs	r3, #32
 8009a82:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	887a      	ldrh	r2, [r7, #2]
 8009a94:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d103      	bne.n	8009aa6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e003      	b.n	8009aae <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	69fa      	ldr	r2, [r7, #28]
 8009aac:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	69fa      	ldr	r2, [r7, #28]
 8009ab2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	61fb      	str	r3, [r7, #28]
 8009aba:	e009      	b.n	8009ad0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	891a      	ldrh	r2, [r3, #8]
 8009ac0:	887b      	ldrh	r3, [r7, #2]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	61fb      	str	r3, [r7, #28]
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1f2      	bne.n	8009abc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff fc28 	bl	8009330 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009ae0:	bf00      	nop
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009af2:	88fb      	ldrh	r3, [r7, #6]
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	b21a      	sxth	r2, r3
 8009af8:	88fb      	ldrh	r3, [r7, #6]
 8009afa:	0a1b      	lsrs	r3, r3, #8
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	b21b      	sxth	r3, r3
 8009b00:	4313      	orrs	r3, r2
 8009b02:	b21b      	sxth	r3, r3
 8009b04:	b29b      	uxth	r3, r3
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b083      	sub	sp, #12
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	061a      	lsls	r2, r3, #24
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	021b      	lsls	r3, r3, #8
 8009b22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b26:	431a      	orrs	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	0a1b      	lsrs	r3, r3, #8
 8009b2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	0e1b      	lsrs	r3, r3, #24
 8009b36:	4313      	orrs	r3, r2
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009b4e:	f000 f8d5 	bl	8009cfc <mem_init>
  memp_init();
 8009b52:	f000 fbdb 	bl	800a30c <memp_init>
  pbuf_init();
  netif_init();
 8009b56:	f000 fcd9 	bl	800a50c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009b5a:	f007 f873 	bl	8010c44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009b5e:	f001 fdcb 	bl	800b6f8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009b62:	f006 ffe5 	bl	8010b30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <ptr_to_mem+0x20>)
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	4413      	add	r3, r2
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20008104 	.word	0x20008104

08009b94 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009b9c:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <mem_to_ptr+0x20>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	b29b      	uxth	r3, r3
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20008104 	.word	0x20008104

08009bb8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009bc0:	4b45      	ldr	r3, [pc, #276]	; (8009cd8 <plug_holes+0x120>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d206      	bcs.n	8009bd8 <plug_holes+0x20>
 8009bca:	4b44      	ldr	r3, [pc, #272]	; (8009cdc <plug_holes+0x124>)
 8009bcc:	f240 12df 	movw	r2, #479	; 0x1df
 8009bd0:	4943      	ldr	r1, [pc, #268]	; (8009ce0 <plug_holes+0x128>)
 8009bd2:	4844      	ldr	r0, [pc, #272]	; (8009ce4 <plug_holes+0x12c>)
 8009bd4:	f00b fed2 	bl	801597c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009bd8:	4b43      	ldr	r3, [pc, #268]	; (8009ce8 <plug_holes+0x130>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d306      	bcc.n	8009bf0 <plug_holes+0x38>
 8009be2:	4b3e      	ldr	r3, [pc, #248]	; (8009cdc <plug_holes+0x124>)
 8009be4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009be8:	4940      	ldr	r1, [pc, #256]	; (8009cec <plug_holes+0x134>)
 8009bea:	483e      	ldr	r0, [pc, #248]	; (8009ce4 <plug_holes+0x12c>)
 8009bec:	f00b fec6 	bl	801597c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	791b      	ldrb	r3, [r3, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d006      	beq.n	8009c06 <plug_holes+0x4e>
 8009bf8:	4b38      	ldr	r3, [pc, #224]	; (8009cdc <plug_holes+0x124>)
 8009bfa:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009bfe:	493c      	ldr	r1, [pc, #240]	; (8009cf0 <plug_holes+0x138>)
 8009c00:	4838      	ldr	r0, [pc, #224]	; (8009ce4 <plug_holes+0x12c>)
 8009c02:	f00b febb 	bl	801597c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009c0e:	d906      	bls.n	8009c1e <plug_holes+0x66>
 8009c10:	4b32      	ldr	r3, [pc, #200]	; (8009cdc <plug_holes+0x124>)
 8009c12:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009c16:	4937      	ldr	r1, [pc, #220]	; (8009cf4 <plug_holes+0x13c>)
 8009c18:	4832      	ldr	r0, [pc, #200]	; (8009ce4 <plug_holes+0x12c>)
 8009c1a:	f00b feaf 	bl	801597c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff ffa4 	bl	8009b70 <ptr_to_mem>
 8009c28:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d024      	beq.n	8009c7c <plug_holes+0xc4>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	791b      	ldrb	r3, [r3, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d120      	bne.n	8009c7c <plug_holes+0xc4>
 8009c3a:	4b2b      	ldr	r3, [pc, #172]	; (8009ce8 <plug_holes+0x130>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d01b      	beq.n	8009c7c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009c44:	4b2c      	ldr	r3, [pc, #176]	; (8009cf8 <plug_holes+0x140>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d102      	bne.n	8009c54 <plug_holes+0x9c>
      lfree = mem;
 8009c4e:	4a2a      	ldr	r2, [pc, #168]	; (8009cf8 <plug_holes+0x140>)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	881a      	ldrh	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009c64:	d00a      	beq.n	8009c7c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff ff80 	bl	8009b70 <ptr_to_mem>
 8009c70:	4604      	mov	r4, r0
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff ff8e 	bl	8009b94 <mem_to_ptr>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	885b      	ldrh	r3, [r3, #2]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff ff75 	bl	8009b70 <ptr_to_mem>
 8009c86:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d01f      	beq.n	8009cd0 <plug_holes+0x118>
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	791b      	ldrb	r3, [r3, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11b      	bne.n	8009cd0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009c98:	4b17      	ldr	r3, [pc, #92]	; (8009cf8 <plug_holes+0x140>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d102      	bne.n	8009ca8 <plug_holes+0xf0>
      lfree = pmem;
 8009ca2:	4a15      	ldr	r2, [pc, #84]	; (8009cf8 <plug_holes+0x140>)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	881a      	ldrh	r2, [r3, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009cb8:	d00a      	beq.n	8009cd0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff ff56 	bl	8009b70 <ptr_to_mem>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	68b8      	ldr	r0, [r7, #8]
 8009cc8:	f7ff ff64 	bl	8009b94 <mem_to_ptr>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd90      	pop	{r4, r7, pc}
 8009cd8:	20008104 	.word	0x20008104
 8009cdc:	08016ff8 	.word	0x08016ff8
 8009ce0:	08017028 	.word	0x08017028
 8009ce4:	08017040 	.word	0x08017040
 8009ce8:	20008108 	.word	0x20008108
 8009cec:	08017068 	.word	0x08017068
 8009cf0:	08017084 	.word	0x08017084
 8009cf4:	080170a0 	.word	0x080170a0
 8009cf8:	2000810c 	.word	0x2000810c

08009cfc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009d02:	4b18      	ldr	r3, [pc, #96]	; (8009d64 <mem_init+0x68>)
 8009d04:	3303      	adds	r3, #3
 8009d06:	f023 0303 	bic.w	r3, r3, #3
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	4b16      	ldr	r3, [pc, #88]	; (8009d68 <mem_init+0x6c>)
 8009d0e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009d10:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <mem_init+0x6c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009d1c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009d2a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8009d2e:	f7ff ff1f 	bl	8009b70 <ptr_to_mem>
 8009d32:	4603      	mov	r3, r0
 8009d34:	4a0d      	ldr	r2, [pc, #52]	; (8009d6c <mem_init+0x70>)
 8009d36:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009d38:	4b0c      	ldr	r3, [pc, #48]	; (8009d6c <mem_init+0x70>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <mem_init+0x70>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009d48:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009d4a:	4b08      	ldr	r3, [pc, #32]	; (8009d6c <mem_init+0x70>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009d52:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009d54:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <mem_init+0x6c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a05      	ldr	r2, [pc, #20]	; (8009d70 <mem_init+0x74>)
 8009d5a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	200058f0 	.word	0x200058f0
 8009d68:	20008104 	.word	0x20008104
 8009d6c:	20008108 	.word	0x20008108
 8009d70:	2000810c 	.word	0x2000810c

08009d74 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff ff09 	bl	8009b94 <mem_to_ptr>
 8009d82:	4603      	mov	r3, r0
 8009d84:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff fef0 	bl	8009b70 <ptr_to_mem>
 8009d90:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	885b      	ldrh	r3, [r3, #2]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff feea 	bl	8009b70 <ptr_to_mem>
 8009d9c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009da6:	d818      	bhi.n	8009dda <mem_link_valid+0x66>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	885b      	ldrh	r3, [r3, #2]
 8009dac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009db0:	d813      	bhi.n	8009dda <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009db6:	8afa      	ldrh	r2, [r7, #22]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d004      	beq.n	8009dc6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	8afa      	ldrh	r2, [r7, #22]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d109      	bne.n	8009dda <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009dc6:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <mem_link_valid+0x74>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d006      	beq.n	8009dde <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	885b      	ldrh	r3, [r3, #2]
 8009dd4:	8afa      	ldrh	r2, [r7, #22]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d001      	beq.n	8009dde <mem_link_valid+0x6a>
    return 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e000      	b.n	8009de0 <mem_link_valid+0x6c>
  }
  return 1;
 8009dde:	2301      	movs	r3, #1
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20008108 	.word	0x20008108

08009dec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d04c      	beq.n	8009e94 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f003 0303 	and.w	r3, r3, #3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d007      	beq.n	8009e14 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009e04:	4b25      	ldr	r3, [pc, #148]	; (8009e9c <mem_free+0xb0>)
 8009e06:	f240 2273 	movw	r2, #627	; 0x273
 8009e0a:	4925      	ldr	r1, [pc, #148]	; (8009ea0 <mem_free+0xb4>)
 8009e0c:	4825      	ldr	r0, [pc, #148]	; (8009ea4 <mem_free+0xb8>)
 8009e0e:	f00b fdb5 	bl	801597c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009e12:	e040      	b.n	8009e96 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3b08      	subs	r3, #8
 8009e18:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009e1a:	4b23      	ldr	r3, [pc, #140]	; (8009ea8 <mem_free+0xbc>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d306      	bcc.n	8009e32 <mem_free+0x46>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f103 020c 	add.w	r2, r3, #12
 8009e2a:	4b20      	ldr	r3, [pc, #128]	; (8009eac <mem_free+0xc0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d907      	bls.n	8009e42 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009e32:	4b1a      	ldr	r3, [pc, #104]	; (8009e9c <mem_free+0xb0>)
 8009e34:	f240 227f 	movw	r2, #639	; 0x27f
 8009e38:	491d      	ldr	r1, [pc, #116]	; (8009eb0 <mem_free+0xc4>)
 8009e3a:	481a      	ldr	r0, [pc, #104]	; (8009ea4 <mem_free+0xb8>)
 8009e3c:	f00b fd9e 	bl	801597c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009e40:	e029      	b.n	8009e96 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	791b      	ldrb	r3, [r3, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d107      	bne.n	8009e5a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <mem_free+0xb0>)
 8009e4c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009e50:	4918      	ldr	r1, [pc, #96]	; (8009eb4 <mem_free+0xc8>)
 8009e52:	4814      	ldr	r0, [pc, #80]	; (8009ea4 <mem_free+0xb8>)
 8009e54:	f00b fd92 	bl	801597c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009e58:	e01d      	b.n	8009e96 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff ff8a 	bl	8009d74 <mem_link_valid>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d107      	bne.n	8009e76 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009e66:	4b0d      	ldr	r3, [pc, #52]	; (8009e9c <mem_free+0xb0>)
 8009e68:	f240 2295 	movw	r2, #661	; 0x295
 8009e6c:	4912      	ldr	r1, [pc, #72]	; (8009eb8 <mem_free+0xcc>)
 8009e6e:	480d      	ldr	r0, [pc, #52]	; (8009ea4 <mem_free+0xb8>)
 8009e70:	f00b fd84 	bl	801597c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009e74:	e00f      	b.n	8009e96 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009e7c:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <mem_free+0xd0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d202      	bcs.n	8009e8c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009e86:	4a0d      	ldr	r2, [pc, #52]	; (8009ebc <mem_free+0xd0>)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7ff fe93 	bl	8009bb8 <plug_holes>
 8009e92:	e000      	b.n	8009e96 <mem_free+0xaa>
    return;
 8009e94:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	08016ff8 	.word	0x08016ff8
 8009ea0:	080170cc 	.word	0x080170cc
 8009ea4:	08017040 	.word	0x08017040
 8009ea8:	20008104 	.word	0x20008104
 8009eac:	20008108 	.word	0x20008108
 8009eb0:	080170f0 	.word	0x080170f0
 8009eb4:	0801710c 	.word	0x0801710c
 8009eb8:	08017134 	.word	0x08017134
 8009ebc:	2000810c 	.word	0x2000810c

08009ec0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009ecc:	887b      	ldrh	r3, [r7, #2]
 8009ece:	3303      	adds	r3, #3
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	f023 0303 	bic.w	r3, r3, #3
 8009ed6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009ed8:	8bfb      	ldrh	r3, [r7, #30]
 8009eda:	2b0b      	cmp	r3, #11
 8009edc:	d801      	bhi.n	8009ee2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009ede:	230c      	movs	r3, #12
 8009ee0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009ee2:	8bfb      	ldrh	r3, [r7, #30]
 8009ee4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009ee8:	d803      	bhi.n	8009ef2 <mem_trim+0x32>
 8009eea:	8bfa      	ldrh	r2, [r7, #30]
 8009eec:	887b      	ldrh	r3, [r7, #2]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d201      	bcs.n	8009ef6 <mem_trim+0x36>
    return NULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e0cc      	b.n	800a090 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009ef6:	4b68      	ldr	r3, [pc, #416]	; (800a098 <mem_trim+0x1d8>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d304      	bcc.n	8009f0a <mem_trim+0x4a>
 8009f00:	4b66      	ldr	r3, [pc, #408]	; (800a09c <mem_trim+0x1dc>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d306      	bcc.n	8009f18 <mem_trim+0x58>
 8009f0a:	4b65      	ldr	r3, [pc, #404]	; (800a0a0 <mem_trim+0x1e0>)
 8009f0c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009f10:	4964      	ldr	r1, [pc, #400]	; (800a0a4 <mem_trim+0x1e4>)
 8009f12:	4865      	ldr	r0, [pc, #404]	; (800a0a8 <mem_trim+0x1e8>)
 8009f14:	f00b fd32 	bl	801597c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009f18:	4b5f      	ldr	r3, [pc, #380]	; (800a098 <mem_trim+0x1d8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d304      	bcc.n	8009f2c <mem_trim+0x6c>
 8009f22:	4b5e      	ldr	r3, [pc, #376]	; (800a09c <mem_trim+0x1dc>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d301      	bcc.n	8009f30 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	e0af      	b.n	800a090 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	3b08      	subs	r3, #8
 8009f34:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009f36:	69b8      	ldr	r0, [r7, #24]
 8009f38:	f7ff fe2c 	bl	8009b94 <mem_to_ptr>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	881a      	ldrh	r2, [r3, #0]
 8009f44:	8afb      	ldrh	r3, [r7, #22]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	3b08      	subs	r3, #8
 8009f4c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009f4e:	8bfa      	ldrh	r2, [r7, #30]
 8009f50:	8abb      	ldrh	r3, [r7, #20]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d906      	bls.n	8009f64 <mem_trim+0xa4>
 8009f56:	4b52      	ldr	r3, [pc, #328]	; (800a0a0 <mem_trim+0x1e0>)
 8009f58:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009f5c:	4953      	ldr	r1, [pc, #332]	; (800a0ac <mem_trim+0x1ec>)
 8009f5e:	4852      	ldr	r0, [pc, #328]	; (800a0a8 <mem_trim+0x1e8>)
 8009f60:	f00b fd0c 	bl	801597c <iprintf>
  if (newsize > size) {
 8009f64:	8bfa      	ldrh	r2, [r7, #30]
 8009f66:	8abb      	ldrh	r3, [r7, #20]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d901      	bls.n	8009f70 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	e08f      	b.n	800a090 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009f70:	8bfa      	ldrh	r2, [r7, #30]
 8009f72:	8abb      	ldrh	r3, [r7, #20]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d101      	bne.n	8009f7c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	e089      	b.n	800a090 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff fdf5 	bl	8009b70 <ptr_to_mem>
 8009f86:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	791b      	ldrb	r3, [r3, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d13f      	bne.n	800a010 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009f98:	d106      	bne.n	8009fa8 <mem_trim+0xe8>
 8009f9a:	4b41      	ldr	r3, [pc, #260]	; (800a0a0 <mem_trim+0x1e0>)
 8009f9c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009fa0:	4943      	ldr	r1, [pc, #268]	; (800a0b0 <mem_trim+0x1f0>)
 8009fa2:	4841      	ldr	r0, [pc, #260]	; (800a0a8 <mem_trim+0x1e8>)
 8009fa4:	f00b fcea 	bl	801597c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009fae:	8afa      	ldrh	r2, [r7, #22]
 8009fb0:	8bfb      	ldrh	r3, [r7, #30]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009fba:	4b3e      	ldr	r3, [pc, #248]	; (800a0b4 <mem_trim+0x1f4>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d106      	bne.n	8009fd2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009fc4:	89fb      	ldrh	r3, [r7, #14]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fdd2 	bl	8009b70 <ptr_to_mem>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	4a39      	ldr	r2, [pc, #228]	; (800a0b4 <mem_trim+0x1f4>)
 8009fd0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009fd2:	89fb      	ldrh	r3, [r7, #14]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff fdcb 	bl	8009b70 <ptr_to_mem>
 8009fda:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	89ba      	ldrh	r2, [r7, #12]
 8009fe6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	8afa      	ldrh	r2, [r7, #22]
 8009fec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	89fa      	ldrh	r2, [r7, #14]
 8009ff2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009ffc:	d047      	beq.n	800a08e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	4618      	mov	r0, r3
 800a004:	f7ff fdb4 	bl	8009b70 <ptr_to_mem>
 800a008:	4602      	mov	r2, r0
 800a00a:	89fb      	ldrh	r3, [r7, #14]
 800a00c:	8053      	strh	r3, [r2, #2]
 800a00e:	e03e      	b.n	800a08e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a010:	8bfb      	ldrh	r3, [r7, #30]
 800a012:	f103 0214 	add.w	r2, r3, #20
 800a016:	8abb      	ldrh	r3, [r7, #20]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d838      	bhi.n	800a08e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a01c:	8afa      	ldrh	r2, [r7, #22]
 800a01e:	8bfb      	ldrh	r3, [r7, #30]
 800a020:	4413      	add	r3, r2
 800a022:	b29b      	uxth	r3, r3
 800a024:	3308      	adds	r3, #8
 800a026:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a030:	d106      	bne.n	800a040 <mem_trim+0x180>
 800a032:	4b1b      	ldr	r3, [pc, #108]	; (800a0a0 <mem_trim+0x1e0>)
 800a034:	f240 3216 	movw	r2, #790	; 0x316
 800a038:	491d      	ldr	r1, [pc, #116]	; (800a0b0 <mem_trim+0x1f0>)
 800a03a:	481b      	ldr	r0, [pc, #108]	; (800a0a8 <mem_trim+0x1e8>)
 800a03c:	f00b fc9e 	bl	801597c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a040:	89fb      	ldrh	r3, [r7, #14]
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff fd94 	bl	8009b70 <ptr_to_mem>
 800a048:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a04a:	4b1a      	ldr	r3, [pc, #104]	; (800a0b4 <mem_trim+0x1f4>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	d202      	bcs.n	800a05a <mem_trim+0x19a>
      lfree = mem2;
 800a054:	4a17      	ldr	r2, [pc, #92]	; (800a0b4 <mem_trim+0x1f4>)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2200      	movs	r2, #0
 800a05e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	881a      	ldrh	r2, [r3, #0]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	8afa      	ldrh	r2, [r7, #22]
 800a06c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	89fa      	ldrh	r2, [r7, #14]
 800a072:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a07c:	d007      	beq.n	800a08e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff fd74 	bl	8009b70 <ptr_to_mem>
 800a088:	4602      	mov	r2, r0
 800a08a:	89fb      	ldrh	r3, [r7, #14]
 800a08c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a08e:	687b      	ldr	r3, [r7, #4]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3720      	adds	r7, #32
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	20008104 	.word	0x20008104
 800a09c:	20008108 	.word	0x20008108
 800a0a0:	08016ff8 	.word	0x08016ff8
 800a0a4:	08017168 	.word	0x08017168
 800a0a8:	08017040 	.word	0x08017040
 800a0ac:	08017180 	.word	0x08017180
 800a0b0:	080171a0 	.word	0x080171a0
 800a0b4:	2000810c 	.word	0x2000810c

0800a0b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a0c2:	88fb      	ldrh	r3, [r7, #6]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <mem_malloc+0x14>
    return NULL;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e0d9      	b.n	800a280 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a0cc:	88fb      	ldrh	r3, [r7, #6]
 800a0ce:	3303      	adds	r3, #3
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f023 0303 	bic.w	r3, r3, #3
 800a0d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a0d8:	8bbb      	ldrh	r3, [r7, #28]
 800a0da:	2b0b      	cmp	r3, #11
 800a0dc:	d801      	bhi.n	800a0e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a0de:	230c      	movs	r3, #12
 800a0e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a0e2:	8bbb      	ldrh	r3, [r7, #28]
 800a0e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a0e8:	d803      	bhi.n	800a0f2 <mem_malloc+0x3a>
 800a0ea:	8bba      	ldrh	r2, [r7, #28]
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d201      	bcs.n	800a0f6 <mem_malloc+0x3e>
    return NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e0c4      	b.n	800a280 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a0f6:	4b64      	ldr	r3, [pc, #400]	; (800a288 <mem_malloc+0x1d0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff fd4a 	bl	8009b94 <mem_to_ptr>
 800a100:	4603      	mov	r3, r0
 800a102:	83fb      	strh	r3, [r7, #30]
 800a104:	e0b4      	b.n	800a270 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a106:	8bfb      	ldrh	r3, [r7, #30]
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff fd31 	bl	8009b70 <ptr_to_mem>
 800a10e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	791b      	ldrb	r3, [r3, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	f040 80a4 	bne.w	800a262 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	8bfb      	ldrh	r3, [r7, #30]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	f1a3 0208 	sub.w	r2, r3, #8
 800a128:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a12a:	429a      	cmp	r2, r3
 800a12c:	f0c0 8099 	bcc.w	800a262 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	461a      	mov	r2, r3
 800a136:	8bfb      	ldrh	r3, [r7, #30]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	f1a3 0208 	sub.w	r2, r3, #8
 800a13e:	8bbb      	ldrh	r3, [r7, #28]
 800a140:	3314      	adds	r3, #20
 800a142:	429a      	cmp	r2, r3
 800a144:	d333      	bcc.n	800a1ae <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a146:	8bfa      	ldrh	r2, [r7, #30]
 800a148:	8bbb      	ldrh	r3, [r7, #28]
 800a14a:	4413      	add	r3, r2
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	3308      	adds	r3, #8
 800a150:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a152:	8a7b      	ldrh	r3, [r7, #18]
 800a154:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a158:	d106      	bne.n	800a168 <mem_malloc+0xb0>
 800a15a:	4b4c      	ldr	r3, [pc, #304]	; (800a28c <mem_malloc+0x1d4>)
 800a15c:	f240 3287 	movw	r2, #903	; 0x387
 800a160:	494b      	ldr	r1, [pc, #300]	; (800a290 <mem_malloc+0x1d8>)
 800a162:	484c      	ldr	r0, [pc, #304]	; (800a294 <mem_malloc+0x1dc>)
 800a164:	f00b fc0a 	bl	801597c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a168:	8a7b      	ldrh	r3, [r7, #18]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff fd00 	bl	8009b70 <ptr_to_mem>
 800a170:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	881a      	ldrh	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8bfa      	ldrh	r2, [r7, #30]
 800a184:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	8a7a      	ldrh	r2, [r7, #18]
 800a18a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2201      	movs	r2, #1
 800a190:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a19a:	d00b      	beq.n	800a1b4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff fce5 	bl	8009b70 <ptr_to_mem>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	8a7b      	ldrh	r3, [r7, #18]
 800a1aa:	8053      	strh	r3, [r2, #2]
 800a1ac:	e002      	b.n	800a1b4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a1b4:	4b34      	ldr	r3, [pc, #208]	; (800a288 <mem_malloc+0x1d0>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d127      	bne.n	800a20e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a1be:	4b32      	ldr	r3, [pc, #200]	; (800a288 <mem_malloc+0x1d0>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a1c4:	e005      	b.n	800a1d2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff fcd0 	bl	8009b70 <ptr_to_mem>
 800a1d0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	791b      	ldrb	r3, [r3, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d004      	beq.n	800a1e4 <mem_malloc+0x12c>
 800a1da:	4b2f      	ldr	r3, [pc, #188]	; (800a298 <mem_malloc+0x1e0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d1f0      	bne.n	800a1c6 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a1e4:	4a28      	ldr	r2, [pc, #160]	; (800a288 <mem_malloc+0x1d0>)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a1ea:	4b27      	ldr	r3, [pc, #156]	; (800a288 <mem_malloc+0x1d0>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	4b2a      	ldr	r3, [pc, #168]	; (800a298 <mem_malloc+0x1e0>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d00b      	beq.n	800a20e <mem_malloc+0x156>
 800a1f6:	4b24      	ldr	r3, [pc, #144]	; (800a288 <mem_malloc+0x1d0>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	791b      	ldrb	r3, [r3, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <mem_malloc+0x156>
 800a200:	4b22      	ldr	r3, [pc, #136]	; (800a28c <mem_malloc+0x1d4>)
 800a202:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a206:	4925      	ldr	r1, [pc, #148]	; (800a29c <mem_malloc+0x1e4>)
 800a208:	4822      	ldr	r0, [pc, #136]	; (800a294 <mem_malloc+0x1dc>)
 800a20a:	f00b fbb7 	bl	801597c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a20e:	8bba      	ldrh	r2, [r7, #28]
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	4413      	add	r3, r2
 800a214:	3308      	adds	r3, #8
 800a216:	4a20      	ldr	r2, [pc, #128]	; (800a298 <mem_malloc+0x1e0>)
 800a218:	6812      	ldr	r2, [r2, #0]
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d906      	bls.n	800a22c <mem_malloc+0x174>
 800a21e:	4b1b      	ldr	r3, [pc, #108]	; (800a28c <mem_malloc+0x1d4>)
 800a220:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a224:	491e      	ldr	r1, [pc, #120]	; (800a2a0 <mem_malloc+0x1e8>)
 800a226:	481b      	ldr	r0, [pc, #108]	; (800a294 <mem_malloc+0x1dc>)
 800a228:	f00b fba8 	bl	801597c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d006      	beq.n	800a244 <mem_malloc+0x18c>
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <mem_malloc+0x1d4>)
 800a238:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a23c:	4919      	ldr	r1, [pc, #100]	; (800a2a4 <mem_malloc+0x1ec>)
 800a23e:	4815      	ldr	r0, [pc, #84]	; (800a294 <mem_malloc+0x1dc>)
 800a240:	f00b fb9c 	bl	801597c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d006      	beq.n	800a25c <mem_malloc+0x1a4>
 800a24e:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <mem_malloc+0x1d4>)
 800a250:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a254:	4914      	ldr	r1, [pc, #80]	; (800a2a8 <mem_malloc+0x1f0>)
 800a256:	480f      	ldr	r0, [pc, #60]	; (800a294 <mem_malloc+0x1dc>)
 800a258:	f00b fb90 	bl	801597c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	3308      	adds	r3, #8
 800a260:	e00e      	b.n	800a280 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a262:	8bfb      	ldrh	r3, [r7, #30]
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fc83 	bl	8009b70 <ptr_to_mem>
 800a26a:	4603      	mov	r3, r0
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a270:	8bfa      	ldrh	r2, [r7, #30]
 800a272:	8bbb      	ldrh	r3, [r7, #28]
 800a274:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800a278:	429a      	cmp	r2, r3
 800a27a:	f4ff af44 	bcc.w	800a106 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	2000810c 	.word	0x2000810c
 800a28c:	08016ff8 	.word	0x08016ff8
 800a290:	080171a0 	.word	0x080171a0
 800a294:	08017040 	.word	0x08017040
 800a298:	20008108 	.word	0x20008108
 800a29c:	080171b4 	.word	0x080171b4
 800a2a0:	080171d0 	.word	0x080171d0
 800a2a4:	08017200 	.word	0x08017200
 800a2a8:	08017230 	.word	0x08017230

0800a2ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	3303      	adds	r3, #3
 800a2c2:	f023 0303 	bic.w	r3, r3, #3
 800a2c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	e011      	b.n	800a2f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	885b      	ldrh	r3, [r3, #2]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	dbe7      	blt.n	800a2ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a2fe:	bf00      	nop
 800a300:	bf00      	nop
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a312:	2300      	movs	r3, #0
 800a314:	80fb      	strh	r3, [r7, #6]
 800a316:	e009      	b.n	800a32c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	4a08      	ldr	r2, [pc, #32]	; (800a33c <memp_init+0x30>)
 800a31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff ffc3 	bl	800a2ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a326:	88fb      	ldrh	r3, [r7, #6]
 800a328:	3301      	adds	r3, #1
 800a32a:	80fb      	strh	r3, [r7, #6]
 800a32c:	88fb      	ldrh	r3, [r7, #6]
 800a32e:	2b08      	cmp	r3, #8
 800a330:	d9f2      	bls.n	800a318 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	0801c494 	.word	0x0801c494

0800a340 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d012      	beq.n	800a37c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	6812      	ldr	r2, [r2, #0]
 800a35e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d006      	beq.n	800a378 <do_memp_malloc_pool+0x38>
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <do_memp_malloc_pool+0x48>)
 800a36c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a370:	4906      	ldr	r1, [pc, #24]	; (800a38c <do_memp_malloc_pool+0x4c>)
 800a372:	4807      	ldr	r0, [pc, #28]	; (800a390 <do_memp_malloc_pool+0x50>)
 800a374:	f00b fb02 	bl	801597c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	e000      	b.n	800a37e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	08017254 	.word	0x08017254
 800a38c:	08017284 	.word	0x08017284
 800a390:	080172a8 	.word	0x080172a8

0800a394 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d106      	bne.n	800a3b0 <memp_malloc_pool+0x1c>
 800a3a2:	4b0a      	ldr	r3, [pc, #40]	; (800a3cc <memp_malloc_pool+0x38>)
 800a3a4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a3a8:	4909      	ldr	r1, [pc, #36]	; (800a3d0 <memp_malloc_pool+0x3c>)
 800a3aa:	480a      	ldr	r0, [pc, #40]	; (800a3d4 <memp_malloc_pool+0x40>)
 800a3ac:	f00b fae6 	bl	801597c <iprintf>
  if (desc == NULL) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <memp_malloc_pool+0x26>
    return NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e003      	b.n	800a3c2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff ffc0 	bl	800a340 <do_memp_malloc_pool>
 800a3c0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	08017254 	.word	0x08017254
 800a3d0:	080172d0 	.word	0x080172d0
 800a3d4:	080172a8 	.word	0x080172a8

0800a3d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d908      	bls.n	800a3fa <memp_malloc+0x22>
 800a3e8:	4b0a      	ldr	r3, [pc, #40]	; (800a414 <memp_malloc+0x3c>)
 800a3ea:	f240 1257 	movw	r2, #343	; 0x157
 800a3ee:	490a      	ldr	r1, [pc, #40]	; (800a418 <memp_malloc+0x40>)
 800a3f0:	480a      	ldr	r0, [pc, #40]	; (800a41c <memp_malloc+0x44>)
 800a3f2:	f00b fac3 	bl	801597c <iprintf>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e008      	b.n	800a40c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	4a08      	ldr	r2, [pc, #32]	; (800a420 <memp_malloc+0x48>)
 800a3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff ff9c 	bl	800a340 <do_memp_malloc_pool>
 800a408:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a40a:	68fb      	ldr	r3, [r7, #12]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	08017254 	.word	0x08017254
 800a418:	080172e4 	.word	0x080172e4
 800a41c:	080172a8 	.word	0x080172a8
 800a420:	0801c494 	.word	0x0801c494

0800a424 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	f003 0303 	and.w	r3, r3, #3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <do_memp_free_pool+0x22>
 800a438:	4b0a      	ldr	r3, [pc, #40]	; (800a464 <do_memp_free_pool+0x40>)
 800a43a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a43e:	490a      	ldr	r1, [pc, #40]	; (800a468 <do_memp_free_pool+0x44>)
 800a440:	480a      	ldr	r0, [pc, #40]	; (800a46c <do_memp_free_pool+0x48>)
 800a442:	f00b fa9b 	bl	801597c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	08017254 	.word	0x08017254
 800a468:	08017304 	.word	0x08017304
 800a46c:	080172a8 	.word	0x080172a8

0800a470 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d106      	bne.n	800a48e <memp_free_pool+0x1e>
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <memp_free_pool+0x3c>)
 800a482:	f240 1295 	movw	r2, #405	; 0x195
 800a486:	490a      	ldr	r1, [pc, #40]	; (800a4b0 <memp_free_pool+0x40>)
 800a488:	480a      	ldr	r0, [pc, #40]	; (800a4b4 <memp_free_pool+0x44>)
 800a48a:	f00b fa77 	bl	801597c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d007      	beq.n	800a4a4 <memp_free_pool+0x34>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff ffc1 	bl	800a424 <do_memp_free_pool>
 800a4a2:	e000      	b.n	800a4a6 <memp_free_pool+0x36>
    return;
 800a4a4:	bf00      	nop
}
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	08017254 	.word	0x08017254
 800a4b0:	080172d0 	.word	0x080172d0
 800a4b4:	080172a8 	.word	0x080172a8

0800a4b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	6039      	str	r1, [r7, #0]
 800a4c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a4c4:	79fb      	ldrb	r3, [r7, #7]
 800a4c6:	2b08      	cmp	r3, #8
 800a4c8:	d907      	bls.n	800a4da <memp_free+0x22>
 800a4ca:	4b0c      	ldr	r3, [pc, #48]	; (800a4fc <memp_free+0x44>)
 800a4cc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a4d0:	490b      	ldr	r1, [pc, #44]	; (800a500 <memp_free+0x48>)
 800a4d2:	480c      	ldr	r0, [pc, #48]	; (800a504 <memp_free+0x4c>)
 800a4d4:	f00b fa52 	bl	801597c <iprintf>
 800a4d8:	e00c      	b.n	800a4f4 <memp_free+0x3c>

  if (mem == NULL) {
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d008      	beq.n	800a4f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	4a09      	ldr	r2, [pc, #36]	; (800a508 <memp_free+0x50>)
 800a4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff ff9a 	bl	800a424 <do_memp_free_pool>
 800a4f0:	e000      	b.n	800a4f4 <memp_free+0x3c>
    return;
 800a4f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	08017254 	.word	0x08017254
 800a500:	08017324 	.word	0x08017324
 800a504:	080172a8 	.word	0x080172a8
 800a508:	0801c494 	.word	0x0801c494

0800a50c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a510:	bf00      	nop
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
	...

0800a51c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d108      	bne.n	800a542 <netif_add+0x26>
 800a530:	4b5b      	ldr	r3, [pc, #364]	; (800a6a0 <netif_add+0x184>)
 800a532:	f240 1227 	movw	r2, #295	; 0x127
 800a536:	495b      	ldr	r1, [pc, #364]	; (800a6a4 <netif_add+0x188>)
 800a538:	485b      	ldr	r0, [pc, #364]	; (800a6a8 <netif_add+0x18c>)
 800a53a:	f00b fa1f 	bl	801597c <iprintf>
 800a53e:	2300      	movs	r3, #0
 800a540:	e0a9      	b.n	800a696 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	2b00      	cmp	r3, #0
 800a546:	d108      	bne.n	800a55a <netif_add+0x3e>
 800a548:	4b55      	ldr	r3, [pc, #340]	; (800a6a0 <netif_add+0x184>)
 800a54a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a54e:	4957      	ldr	r1, [pc, #348]	; (800a6ac <netif_add+0x190>)
 800a550:	4855      	ldr	r0, [pc, #340]	; (800a6a8 <netif_add+0x18c>)
 800a552:	f00b fa13 	bl	801597c <iprintf>
 800a556:	2300      	movs	r3, #0
 800a558:	e09d      	b.n	800a696 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a560:	4b53      	ldr	r3, [pc, #332]	; (800a6b0 <netif_add+0x194>)
 800a562:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a56a:	4b51      	ldr	r3, [pc, #324]	; (800a6b0 <netif_add+0x194>)
 800a56c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a574:	4b4e      	ldr	r3, [pc, #312]	; (800a6b0 <netif_add+0x194>)
 800a576:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	4a49      	ldr	r2, [pc, #292]	; (800a6b4 <netif_add+0x198>)
 800a58e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3324      	adds	r3, #36	; 0x24
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f00b f9e0 	bl	801596c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6a3a      	ldr	r2, [r7, #32]
 800a5b6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a5b8:	4b3f      	ldr	r3, [pc, #252]	; (800a6b8 <netif_add+0x19c>)
 800a5ba:	781a      	ldrb	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 f914 	bl	800a7fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	4798      	blx	r3
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <netif_add+0xc8>
    return NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e058      	b.n	800a696 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5ea:	2bff      	cmp	r3, #255	; 0xff
 800a5ec:	d103      	bne.n	800a5f6 <netif_add+0xda>
        netif->num = 0;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a5fa:	4b30      	ldr	r3, [pc, #192]	; (800a6bc <netif_add+0x1a0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	617b      	str	r3, [r7, #20]
 800a600:	e02b      	b.n	800a65a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	429a      	cmp	r2, r3
 800a608:	d106      	bne.n	800a618 <netif_add+0xfc>
 800a60a:	4b25      	ldr	r3, [pc, #148]	; (800a6a0 <netif_add+0x184>)
 800a60c:	f240 128b 	movw	r2, #395	; 0x18b
 800a610:	492b      	ldr	r1, [pc, #172]	; (800a6c0 <netif_add+0x1a4>)
 800a612:	4825      	ldr	r0, [pc, #148]	; (800a6a8 <netif_add+0x18c>)
 800a614:	f00b f9b2 	bl	801597c <iprintf>
        num_netifs++;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	3301      	adds	r3, #1
 800a61c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2bff      	cmp	r3, #255	; 0xff
 800a622:	dd06      	ble.n	800a632 <netif_add+0x116>
 800a624:	4b1e      	ldr	r3, [pc, #120]	; (800a6a0 <netif_add+0x184>)
 800a626:	f240 128d 	movw	r2, #397	; 0x18d
 800a62a:	4926      	ldr	r1, [pc, #152]	; (800a6c4 <netif_add+0x1a8>)
 800a62c:	481e      	ldr	r0, [pc, #120]	; (800a6a8 <netif_add+0x18c>)
 800a62e:	f00b f9a5 	bl	801597c <iprintf>
        if (netif2->num == netif->num) {
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a63e:	429a      	cmp	r2, r3
 800a640:	d108      	bne.n	800a654 <netif_add+0x138>
          netif->num++;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a648:	3301      	adds	r3, #1
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a652:	e005      	b.n	800a660 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	617b      	str	r3, [r7, #20]
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1d0      	bne.n	800a602 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1be      	bne.n	800a5e4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a66c:	2bfe      	cmp	r3, #254	; 0xfe
 800a66e:	d103      	bne.n	800a678 <netif_add+0x15c>
    netif_num = 0;
 800a670:	4b11      	ldr	r3, [pc, #68]	; (800a6b8 <netif_add+0x19c>)
 800a672:	2200      	movs	r2, #0
 800a674:	701a      	strb	r2, [r3, #0]
 800a676:	e006      	b.n	800a686 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a67e:	3301      	adds	r3, #1
 800a680:	b2da      	uxtb	r2, r3
 800a682:	4b0d      	ldr	r3, [pc, #52]	; (800a6b8 <netif_add+0x19c>)
 800a684:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a686:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <netif_add+0x1a0>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a68e:	4a0b      	ldr	r2, [pc, #44]	; (800a6bc <netif_add+0x1a0>)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a694:	68fb      	ldr	r3, [r7, #12]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	08017340 	.word	0x08017340
 800a6a4:	080173d4 	.word	0x080173d4
 800a6a8:	08017390 	.word	0x08017390
 800a6ac:	080173f0 	.word	0x080173f0
 800a6b0:	0801c508 	.word	0x0801c508
 800a6b4:	0800aadf 	.word	0x0800aadf
 800a6b8:	2000b024 	.word	0x2000b024
 800a6bc:	2000b01c 	.word	0x2000b01c
 800a6c0:	08017414 	.word	0x08017414
 800a6c4:	08017428 	.word	0x08017428

0800a6c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f002 fb57 	bl	800cd88 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a6da:	6839      	ldr	r1, [r7, #0]
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f006 ff3d 	bl	801155c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a6e2:	bf00      	nop
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <netif_do_set_ipaddr+0x20>
 800a6fe:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <netif_do_set_ipaddr+0x88>)
 800a700:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a704:	491c      	ldr	r1, [pc, #112]	; (800a778 <netif_do_set_ipaddr+0x8c>)
 800a706:	481d      	ldr	r0, [pc, #116]	; (800a77c <netif_do_set_ipaddr+0x90>)
 800a708:	f00b f938 	bl	801597c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d106      	bne.n	800a720 <netif_do_set_ipaddr+0x34>
 800a712:	4b18      	ldr	r3, [pc, #96]	; (800a774 <netif_do_set_ipaddr+0x88>)
 800a714:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a718:	4917      	ldr	r1, [pc, #92]	; (800a778 <netif_do_set_ipaddr+0x8c>)
 800a71a:	4818      	ldr	r0, [pc, #96]	; (800a77c <netif_do_set_ipaddr+0x90>)
 800a71c:	f00b f92e 	bl	801597c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	3304      	adds	r3, #4
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d01c      	beq.n	800a768 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3304      	adds	r3, #4
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a73e:	f107 0314 	add.w	r3, r7, #20
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ffbf 	bl	800a6c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <netif_do_set_ipaddr+0x6a>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	e000      	b.n	800a758 <netif_do_set_ipaddr+0x6c>
 800a756:	2300      	movs	r3, #0
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a75c:	2101      	movs	r1, #1
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 f8d2 	bl	800a908 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a764:	2301      	movs	r3, #1
 800a766:	e000      	b.n	800a76a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	08017340 	.word	0x08017340
 800a778:	08017458 	.word	0x08017458
 800a77c:	08017390 	.word	0x08017390

0800a780 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3308      	adds	r3, #8
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d00a      	beq.n	800a7b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <netif_do_set_netmask+0x26>
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	e000      	b.n	800a7a8 <netif_do_set_netmask+0x28>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e000      	b.n	800a7b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	330c      	adds	r3, #12
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d00a      	beq.n	800a7ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <netif_do_set_gw+0x26>
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	e000      	b.n	800a7e6 <netif_do_set_gw+0x28>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e000      	b.n	800a7f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
 800a808:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a818:	4b1c      	ldr	r3, [pc, #112]	; (800a88c <netif_set_addr+0x90>)
 800a81a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a822:	4b1a      	ldr	r3, [pc, #104]	; (800a88c <netif_set_addr+0x90>)
 800a824:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a82c:	4b17      	ldr	r3, [pc, #92]	; (800a88c <netif_set_addr+0x90>)
 800a82e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <netif_set_addr+0x42>
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <netif_set_addr+0x46>
 800a83e:	2301      	movs	r3, #1
 800a840:	e000      	b.n	800a844 <netif_set_addr+0x48>
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d006      	beq.n	800a85a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a84c:	f107 0310 	add.w	r3, r7, #16
 800a850:	461a      	mov	r2, r3
 800a852:	68b9      	ldr	r1, [r7, #8]
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f7ff ff49 	bl	800a6ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff ff8e 	bl	800a780 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7ff ffa8 	bl	800a7be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d106      	bne.n	800a882 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a874:	f107 0310 	add.w	r3, r7, #16
 800a878:	461a      	mov	r2, r3
 800a87a:	68b9      	ldr	r1, [r7, #8]
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f7ff ff35 	bl	800a6ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a882:	bf00      	nop
 800a884:	3720      	adds	r7, #32
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	0801c508 	.word	0x0801c508

0800a890 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a898:	4a04      	ldr	r2, [pc, #16]	; (800a8ac <netif_set_default+0x1c>)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a89e:	bf00      	nop
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	2000b020 	.word	0x2000b020

0800a8b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d107      	bne.n	800a8ce <netif_set_up+0x1e>
 800a8be:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <netif_set_up+0x4c>)
 800a8c0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a8c4:	490e      	ldr	r1, [pc, #56]	; (800a900 <netif_set_up+0x50>)
 800a8c6:	480f      	ldr	r0, [pc, #60]	; (800a904 <netif_set_up+0x54>)
 800a8c8:	f00b f858 	bl	801597c <iprintf>
 800a8cc:	e013      	b.n	800a8f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10c      	bne.n	800a8f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a8e2:	f043 0301 	orr.w	r3, r3, #1
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a8ee:	2103      	movs	r1, #3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f809 	bl	800a908 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	08017340 	.word	0x08017340
 800a900:	080174c8 	.word	0x080174c8
 800a904:	08017390 	.word	0x08017390

0800a908 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d106      	bne.n	800a928 <netif_issue_reports+0x20>
 800a91a:	4b18      	ldr	r3, [pc, #96]	; (800a97c <netif_issue_reports+0x74>)
 800a91c:	f240 326d 	movw	r2, #877	; 0x36d
 800a920:	4917      	ldr	r1, [pc, #92]	; (800a980 <netif_issue_reports+0x78>)
 800a922:	4818      	ldr	r0, [pc, #96]	; (800a984 <netif_issue_reports+0x7c>)
 800a924:	f00b f82a 	bl	801597c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a92e:	f003 0304 	and.w	r3, r3, #4
 800a932:	2b00      	cmp	r3, #0
 800a934:	d01e      	beq.n	800a974 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a93c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a940:	2b00      	cmp	r3, #0
 800a942:	d017      	beq.n	800a974 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d013      	beq.n	800a976 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3304      	adds	r3, #4
 800a952:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00e      	beq.n	800a976 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a95e:	f003 0308 	and.w	r3, r3, #8
 800a962:	2b00      	cmp	r3, #0
 800a964:	d007      	beq.n	800a976 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	3304      	adds	r3, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f009 fbf7 	bl	8014160 <etharp_request>
 800a972:	e000      	b.n	800a976 <netif_issue_reports+0x6e>
    return;
 800a974:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	08017340 	.word	0x08017340
 800a980:	080174e4 	.word	0x080174e4
 800a984:	08017390 	.word	0x08017390

0800a988 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d107      	bne.n	800a9a6 <netif_set_down+0x1e>
 800a996:	4b12      	ldr	r3, [pc, #72]	; (800a9e0 <netif_set_down+0x58>)
 800a998:	f240 329b 	movw	r2, #923	; 0x39b
 800a99c:	4911      	ldr	r1, [pc, #68]	; (800a9e4 <netif_set_down+0x5c>)
 800a99e:	4812      	ldr	r0, [pc, #72]	; (800a9e8 <netif_set_down+0x60>)
 800a9a0:	f00a ffec 	bl	801597c <iprintf>
 800a9a4:	e019      	b.n	800a9da <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d012      	beq.n	800a9da <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9ba:	f023 0301 	bic.w	r3, r3, #1
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9cc:	f003 0308 	and.w	r3, r3, #8
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f008 ff7d 	bl	80138d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	08017340 	.word	0x08017340
 800a9e4:	08017508 	.word	0x08017508
 800a9e8:	08017390 	.word	0x08017390

0800a9ec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d107      	bne.n	800aa0a <netif_set_link_up+0x1e>
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <netif_set_link_up+0x64>)
 800a9fc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800aa00:	4914      	ldr	r1, [pc, #80]	; (800aa54 <netif_set_link_up+0x68>)
 800aa02:	4815      	ldr	r0, [pc, #84]	; (800aa58 <netif_set_link_up+0x6c>)
 800aa04:	f00a ffba 	bl	801597c <iprintf>
 800aa08:	e01e      	b.n	800aa48 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d117      	bne.n	800aa48 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa1e:	f043 0304 	orr.w	r3, r3, #4
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f007 f9c2 	bl	8011db4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aa30:	2103      	movs	r1, #3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7ff ff68 	bl	800a908 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d003      	beq.n	800aa48 <netif_set_link_up+0x5c>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	69db      	ldr	r3, [r3, #28]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	08017340 	.word	0x08017340
 800aa54:	08017528 	.word	0x08017528
 800aa58:	08017390 	.word	0x08017390

0800aa5c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d107      	bne.n	800aa7a <netif_set_link_down+0x1e>
 800aa6a:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <netif_set_link_down+0x54>)
 800aa6c:	f240 4206 	movw	r2, #1030	; 0x406
 800aa70:	4910      	ldr	r1, [pc, #64]	; (800aab4 <netif_set_link_down+0x58>)
 800aa72:	4811      	ldr	r0, [pc, #68]	; (800aab8 <netif_set_link_down+0x5c>)
 800aa74:	f00a ff82 	bl	801597c <iprintf>
 800aa78:	e017      	b.n	800aaaa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d010      	beq.n	800aaaa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa8e:	f023 0304 	bic.w	r3, r3, #4
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <netif_set_link_down+0x4e>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	08017340 	.word	0x08017340
 800aab4:	0801754c 	.word	0x0801754c
 800aab8:	08017390 	.word	0x08017390

0800aabc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	61da      	str	r2, [r3, #28]
  }
}
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	60f8      	str	r0, [r7, #12]
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800aaea:	f06f 030b 	mvn.w	r3, #11
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
	...

0800aafc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ab06:	79fb      	ldrb	r3, [r7, #7]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d013      	beq.n	800ab34 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ab0c:	4b0d      	ldr	r3, [pc, #52]	; (800ab44 <netif_get_by_index+0x48>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	60fb      	str	r3, [r7, #12]
 800ab12:	e00c      	b.n	800ab2e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	79fa      	ldrb	r2, [r7, #7]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d101      	bne.n	800ab28 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	e006      	b.n	800ab36 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1ef      	bne.n	800ab14 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	2000b01c 	.word	0x2000b01c

0800ab48 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ab4e:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <pbuf_free_ooseq+0x38>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ab54:	4b0b      	ldr	r3, [pc, #44]	; (800ab84 <pbuf_free_ooseq+0x3c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	607b      	str	r3, [r7, #4]
 800ab5a:	e00a      	b.n	800ab72 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d003      	beq.n	800ab6c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f002 f94d 	bl	800ce04 <tcp_free_ooseq>
      return;
 800ab6a:	e005      	b.n	800ab78 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	607b      	str	r3, [r7, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1f1      	bne.n	800ab5c <pbuf_free_ooseq+0x14>
    }
  }
}
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	2000b025 	.word	0x2000b025
 800ab84:	2000b034 	.word	0x2000b034

0800ab88 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ab8c:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <pbuf_pool_is_empty+0x14>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ab92:	bf00      	nop
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	2000b025 	.word	0x2000b025

0800aba0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4611      	mov	r1, r2
 800abac:	461a      	mov	r2, r3
 800abae:	460b      	mov	r3, r1
 800abb0:	80fb      	strh	r3, [r7, #6]
 800abb2:	4613      	mov	r3, r2
 800abb4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	88fa      	ldrh	r2, [r7, #6]
 800abc6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	88ba      	ldrh	r2, [r7, #4]
 800abcc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800abce:	8b3b      	ldrh	r3, [r7, #24]
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	7f3a      	ldrb	r2, [r7, #28]
 800abda:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2201      	movs	r2, #1
 800abe0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	73da      	strb	r2, [r3, #15]
}
 800abe8:	bf00      	nop
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08c      	sub	sp, #48	; 0x30
 800abf8:	af02      	add	r7, sp, #8
 800abfa:	4603      	mov	r3, r0
 800abfc:	71fb      	strb	r3, [r7, #7]
 800abfe:	460b      	mov	r3, r1
 800ac00:	80bb      	strh	r3, [r7, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ac0a:	887b      	ldrh	r3, [r7, #2]
 800ac0c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ac10:	d07f      	beq.n	800ad12 <pbuf_alloc+0x11e>
 800ac12:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ac16:	f300 80c8 	bgt.w	800adaa <pbuf_alloc+0x1b6>
 800ac1a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ac1e:	d010      	beq.n	800ac42 <pbuf_alloc+0x4e>
 800ac20:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ac24:	f300 80c1 	bgt.w	800adaa <pbuf_alloc+0x1b6>
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d002      	beq.n	800ac32 <pbuf_alloc+0x3e>
 800ac2c:	2b41      	cmp	r3, #65	; 0x41
 800ac2e:	f040 80bc 	bne.w	800adaa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ac32:	887a      	ldrh	r2, [r7, #2]
 800ac34:	88bb      	ldrh	r3, [r7, #4]
 800ac36:	4619      	mov	r1, r3
 800ac38:	2000      	movs	r0, #0
 800ac3a:	f000 f8d1 	bl	800ade0 <pbuf_alloc_reference>
 800ac3e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ac40:	e0bd      	b.n	800adbe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ac4a:	88bb      	ldrh	r3, [r7, #4]
 800ac4c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ac4e:	2008      	movs	r0, #8
 800ac50:	f7ff fbc2 	bl	800a3d8 <memp_malloc>
 800ac54:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d109      	bne.n	800ac70 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ac5c:	f7ff ff94 	bl	800ab88 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d002      	beq.n	800ac6c <pbuf_alloc+0x78>
            pbuf_free(p);
 800ac66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac68:	f000 faa8 	bl	800b1bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e0a7      	b.n	800adc0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ac70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac72:	3303      	adds	r3, #3
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	f023 0303 	bic.w	r3, r3, #3
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	8b7a      	ldrh	r2, [r7, #26]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	bf28      	it	cs
 800ac88:	4613      	movcs	r3, r2
 800ac8a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ac8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac8e:	3310      	adds	r3, #16
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4413      	add	r3, r2
 800ac94:	3303      	adds	r3, #3
 800ac96:	f023 0303 	bic.w	r3, r3, #3
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	89f9      	ldrh	r1, [r7, #14]
 800ac9e:	8b7a      	ldrh	r2, [r7, #26]
 800aca0:	2300      	movs	r3, #0
 800aca2:	9301      	str	r3, [sp, #4]
 800aca4:	887b      	ldrh	r3, [r7, #2]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	460b      	mov	r3, r1
 800acaa:	4601      	mov	r1, r0
 800acac:	6938      	ldr	r0, [r7, #16]
 800acae:	f7ff ff77 	bl	800aba0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f003 0303 	and.w	r3, r3, #3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d006      	beq.n	800accc <pbuf_alloc+0xd8>
 800acbe:	4b42      	ldr	r3, [pc, #264]	; (800adc8 <pbuf_alloc+0x1d4>)
 800acc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acc4:	4941      	ldr	r1, [pc, #260]	; (800adcc <pbuf_alloc+0x1d8>)
 800acc6:	4842      	ldr	r0, [pc, #264]	; (800add0 <pbuf_alloc+0x1dc>)
 800acc8:	f00a fe58 	bl	801597c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800accc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acce:	3303      	adds	r3, #3
 800acd0:	f023 0303 	bic.w	r3, r3, #3
 800acd4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800acd8:	d106      	bne.n	800ace8 <pbuf_alloc+0xf4>
 800acda:	4b3b      	ldr	r3, [pc, #236]	; (800adc8 <pbuf_alloc+0x1d4>)
 800acdc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ace0:	493c      	ldr	r1, [pc, #240]	; (800add4 <pbuf_alloc+0x1e0>)
 800ace2:	483b      	ldr	r0, [pc, #236]	; (800add0 <pbuf_alloc+0x1dc>)
 800ace4:	f00a fe4a 	bl	801597c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	2b00      	cmp	r3, #0
 800acec:	d102      	bne.n	800acf4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	627b      	str	r3, [r7, #36]	; 0x24
 800acf2:	e002      	b.n	800acfa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800acfe:	8b7a      	ldrh	r2, [r7, #26]
 800ad00:	89fb      	ldrh	r3, [r7, #14]
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ad0a:	8b7b      	ldrh	r3, [r7, #26]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d19e      	bne.n	800ac4e <pbuf_alloc+0x5a>
      break;
 800ad10:	e055      	b.n	800adbe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ad12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad14:	3303      	adds	r3, #3
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	f023 0303 	bic.w	r3, r3, #3
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	88bb      	ldrh	r3, [r7, #4]
 800ad20:	3303      	adds	r3, #3
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	f023 0303 	bic.w	r3, r3, #3
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	4413      	add	r3, r2
 800ad2c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ad2e:	8b3b      	ldrh	r3, [r7, #24]
 800ad30:	3310      	adds	r3, #16
 800ad32:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ad34:	8b3a      	ldrh	r2, [r7, #24]
 800ad36:	88bb      	ldrh	r3, [r7, #4]
 800ad38:	3303      	adds	r3, #3
 800ad3a:	f023 0303 	bic.w	r3, r3, #3
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d306      	bcc.n	800ad50 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ad42:	8afa      	ldrh	r2, [r7, #22]
 800ad44:	88bb      	ldrh	r3, [r7, #4]
 800ad46:	3303      	adds	r3, #3
 800ad48:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d201      	bcs.n	800ad54 <pbuf_alloc+0x160>
        return NULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	e035      	b.n	800adc0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ad54:	8afb      	ldrh	r3, [r7, #22]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7ff f9ae 	bl	800a0b8 <mem_malloc>
 800ad5c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <pbuf_alloc+0x174>
        return NULL;
 800ad64:	2300      	movs	r3, #0
 800ad66:	e02b      	b.n	800adc0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ad68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad6a:	3310      	adds	r3, #16
 800ad6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad6e:	4413      	add	r3, r2
 800ad70:	3303      	adds	r3, #3
 800ad72:	f023 0303 	bic.w	r3, r3, #3
 800ad76:	4618      	mov	r0, r3
 800ad78:	88b9      	ldrh	r1, [r7, #4]
 800ad7a:	88ba      	ldrh	r2, [r7, #4]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	887b      	ldrh	r3, [r7, #2]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	460b      	mov	r3, r1
 800ad86:	4601      	mov	r1, r0
 800ad88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad8a:	f7ff ff09 	bl	800aba0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f003 0303 	and.w	r3, r3, #3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d010      	beq.n	800adbc <pbuf_alloc+0x1c8>
 800ad9a:	4b0b      	ldr	r3, [pc, #44]	; (800adc8 <pbuf_alloc+0x1d4>)
 800ad9c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ada0:	490d      	ldr	r1, [pc, #52]	; (800add8 <pbuf_alloc+0x1e4>)
 800ada2:	480b      	ldr	r0, [pc, #44]	; (800add0 <pbuf_alloc+0x1dc>)
 800ada4:	f00a fdea 	bl	801597c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ada8:	e008      	b.n	800adbc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800adaa:	4b07      	ldr	r3, [pc, #28]	; (800adc8 <pbuf_alloc+0x1d4>)
 800adac:	f240 1227 	movw	r2, #295	; 0x127
 800adb0:	490a      	ldr	r1, [pc, #40]	; (800addc <pbuf_alloc+0x1e8>)
 800adb2:	4807      	ldr	r0, [pc, #28]	; (800add0 <pbuf_alloc+0x1dc>)
 800adb4:	f00a fde2 	bl	801597c <iprintf>
      return NULL;
 800adb8:	2300      	movs	r3, #0
 800adba:	e001      	b.n	800adc0 <pbuf_alloc+0x1cc>
      break;
 800adbc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3728      	adds	r7, #40	; 0x28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	08017570 	.word	0x08017570
 800adcc:	080175a0 	.word	0x080175a0
 800add0:	080175d0 	.word	0x080175d0
 800add4:	080175f8 	.word	0x080175f8
 800add8:	0801762c 	.word	0x0801762c
 800addc:	08017658 	.word	0x08017658

0800ade0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	807b      	strh	r3, [r7, #2]
 800adec:	4613      	mov	r3, r2
 800adee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800adf0:	883b      	ldrh	r3, [r7, #0]
 800adf2:	2b41      	cmp	r3, #65	; 0x41
 800adf4:	d009      	beq.n	800ae0a <pbuf_alloc_reference+0x2a>
 800adf6:	883b      	ldrh	r3, [r7, #0]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d006      	beq.n	800ae0a <pbuf_alloc_reference+0x2a>
 800adfc:	4b0f      	ldr	r3, [pc, #60]	; (800ae3c <pbuf_alloc_reference+0x5c>)
 800adfe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ae02:	490f      	ldr	r1, [pc, #60]	; (800ae40 <pbuf_alloc_reference+0x60>)
 800ae04:	480f      	ldr	r0, [pc, #60]	; (800ae44 <pbuf_alloc_reference+0x64>)
 800ae06:	f00a fdb9 	bl	801597c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ae0a:	2007      	movs	r0, #7
 800ae0c:	f7ff fae4 	bl	800a3d8 <memp_malloc>
 800ae10:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e00b      	b.n	800ae34 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ae1c:	8879      	ldrh	r1, [r7, #2]
 800ae1e:	887a      	ldrh	r2, [r7, #2]
 800ae20:	2300      	movs	r3, #0
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	883b      	ldrh	r3, [r7, #0]
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f7ff feb7 	bl	800aba0 <pbuf_init_alloced_pbuf>
  return p;
 800ae32:	68fb      	ldr	r3, [r7, #12]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	08017570 	.word	0x08017570
 800ae40:	08017674 	.word	0x08017674
 800ae44:	080175d0 	.word	0x080175d0

0800ae48 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	607b      	str	r3, [r7, #4]
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
 800ae54:	460b      	mov	r3, r1
 800ae56:	81bb      	strh	r3, [r7, #12]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
 800ae5e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ae60:	8a7b      	ldrh	r3, [r7, #18]
 800ae62:	3303      	adds	r3, #3
 800ae64:	f023 0203 	bic.w	r2, r3, #3
 800ae68:	89bb      	ldrh	r3, [r7, #12]
 800ae6a:	441a      	add	r2, r3
 800ae6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d901      	bls.n	800ae76 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	e018      	b.n	800aea8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d007      	beq.n	800ae8c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ae7c:	8a7b      	ldrh	r3, [r7, #18]
 800ae7e:	3303      	adds	r3, #3
 800ae80:	f023 0303 	bic.w	r3, r3, #3
 800ae84:	6a3a      	ldr	r2, [r7, #32]
 800ae86:	4413      	add	r3, r2
 800ae88:	617b      	str	r3, [r7, #20]
 800ae8a:	e001      	b.n	800ae90 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	89b9      	ldrh	r1, [r7, #12]
 800ae94:	89ba      	ldrh	r2, [r7, #12]
 800ae96:	2302      	movs	r3, #2
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	897b      	ldrh	r3, [r7, #10]
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	6979      	ldr	r1, [r7, #20]
 800aea2:	f7ff fe7d 	bl	800aba0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800aea6:	687b      	ldr	r3, [r7, #4]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <pbuf_realloc+0x20>
 800aec2:	4b3a      	ldr	r3, [pc, #232]	; (800afac <pbuf_realloc+0xfc>)
 800aec4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800aec8:	4939      	ldr	r1, [pc, #228]	; (800afb0 <pbuf_realloc+0x100>)
 800aeca:	483a      	ldr	r0, [pc, #232]	; (800afb4 <pbuf_realloc+0x104>)
 800aecc:	f00a fd56 	bl	801597c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	891b      	ldrh	r3, [r3, #8]
 800aed4:	887a      	ldrh	r2, [r7, #2]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d263      	bcs.n	800afa2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	891a      	ldrh	r2, [r3, #8]
 800aede:	887b      	ldrh	r3, [r7, #2]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800aee4:	887b      	ldrh	r3, [r7, #2]
 800aee6:	817b      	strh	r3, [r7, #10]
  q = p;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800aeec:	e018      	b.n	800af20 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	895b      	ldrh	r3, [r3, #10]
 800aef2:	897a      	ldrh	r2, [r7, #10]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	891a      	ldrh	r2, [r3, #8]
 800aefc:	893b      	ldrh	r3, [r7, #8]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	b29a      	uxth	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <pbuf_realloc+0x70>
 800af12:	4b26      	ldr	r3, [pc, #152]	; (800afac <pbuf_realloc+0xfc>)
 800af14:	f240 12af 	movw	r2, #431	; 0x1af
 800af18:	4927      	ldr	r1, [pc, #156]	; (800afb8 <pbuf_realloc+0x108>)
 800af1a:	4826      	ldr	r0, [pc, #152]	; (800afb4 <pbuf_realloc+0x104>)
 800af1c:	f00a fd2e 	bl	801597c <iprintf>
  while (rem_len > q->len) {
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	895b      	ldrh	r3, [r3, #10]
 800af24:	897a      	ldrh	r2, [r7, #10]
 800af26:	429a      	cmp	r2, r3
 800af28:	d8e1      	bhi.n	800aeee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	7b1b      	ldrb	r3, [r3, #12]
 800af2e:	f003 030f 	and.w	r3, r3, #15
 800af32:	2b00      	cmp	r3, #0
 800af34:	d121      	bne.n	800af7a <pbuf_realloc+0xca>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	895b      	ldrh	r3, [r3, #10]
 800af3a:	897a      	ldrh	r2, [r7, #10]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d01c      	beq.n	800af7a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	7b5b      	ldrb	r3, [r3, #13]
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d116      	bne.n	800af7a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	b29a      	uxth	r2, r3
 800af56:	897b      	ldrh	r3, [r7, #10]
 800af58:	4413      	add	r3, r2
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	4619      	mov	r1, r3
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f7fe ffae 	bl	8009ec0 <mem_trim>
 800af64:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d106      	bne.n	800af7a <pbuf_realloc+0xca>
 800af6c:	4b0f      	ldr	r3, [pc, #60]	; (800afac <pbuf_realloc+0xfc>)
 800af6e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800af72:	4912      	ldr	r1, [pc, #72]	; (800afbc <pbuf_realloc+0x10c>)
 800af74:	480f      	ldr	r0, [pc, #60]	; (800afb4 <pbuf_realloc+0x104>)
 800af76:	f00a fd01 	bl	801597c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	897a      	ldrh	r2, [r7, #10]
 800af7e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	895a      	ldrh	r2, [r3, #10]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d004      	beq.n	800af9a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f000 f911 	bl	800b1bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	e000      	b.n	800afa4 <pbuf_realloc+0xf4>
    return;
 800afa2:	bf00      	nop

}
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	08017570 	.word	0x08017570
 800afb0:	08017688 	.word	0x08017688
 800afb4:	080175d0 	.word	0x080175d0
 800afb8:	080176a0 	.word	0x080176a0
 800afbc:	080176b8 	.word	0x080176b8

0800afc0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	4613      	mov	r3, r2
 800afcc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d106      	bne.n	800afe2 <pbuf_add_header_impl+0x22>
 800afd4:	4b2b      	ldr	r3, [pc, #172]	; (800b084 <pbuf_add_header_impl+0xc4>)
 800afd6:	f240 12df 	movw	r2, #479	; 0x1df
 800afda:	492b      	ldr	r1, [pc, #172]	; (800b088 <pbuf_add_header_impl+0xc8>)
 800afdc:	482b      	ldr	r0, [pc, #172]	; (800b08c <pbuf_add_header_impl+0xcc>)
 800afde:	f00a fccd 	bl	801597c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <pbuf_add_header_impl+0x30>
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afee:	d301      	bcc.n	800aff4 <pbuf_add_header_impl+0x34>
    return 1;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e043      	b.n	800b07c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <pbuf_add_header_impl+0x3e>
    return 0;
 800affa:	2300      	movs	r3, #0
 800affc:	e03e      	b.n	800b07c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	891a      	ldrh	r2, [r3, #8]
 800b006:	8a7b      	ldrh	r3, [r7, #18]
 800b008:	4413      	add	r3, r2
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	8a7a      	ldrh	r2, [r7, #18]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d901      	bls.n	800b016 <pbuf_add_header_impl+0x56>
    return 1;
 800b012:	2301      	movs	r3, #1
 800b014:	e032      	b.n	800b07c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	7b1b      	ldrb	r3, [r3, #12]
 800b01a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b01c:	8a3b      	ldrh	r3, [r7, #16]
 800b01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00c      	beq.n	800b040 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	425b      	negs	r3, r3
 800b02e:	4413      	add	r3, r2
 800b030:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3310      	adds	r3, #16
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d20d      	bcs.n	800b058 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e01d      	b.n	800b07c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d006      	beq.n	800b054 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	425b      	negs	r3, r3
 800b04e:	4413      	add	r3, r2
 800b050:	617b      	str	r3, [r7, #20]
 800b052:	e001      	b.n	800b058 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b054:	2301      	movs	r3, #1
 800b056:	e011      	b.n	800b07c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	895a      	ldrh	r2, [r3, #10]
 800b062:	8a7b      	ldrh	r3, [r7, #18]
 800b064:	4413      	add	r3, r2
 800b066:	b29a      	uxth	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	891a      	ldrh	r2, [r3, #8]
 800b070:	8a7b      	ldrh	r3, [r7, #18]
 800b072:	4413      	add	r3, r2
 800b074:	b29a      	uxth	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	811a      	strh	r2, [r3, #8]


  return 0;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	08017570 	.word	0x08017570
 800b088:	080176d4 	.word	0x080176d4
 800b08c:	080175d0 	.word	0x080175d0

0800b090 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b09a:	2200      	movs	r2, #0
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff ff8e 	bl	800afc0 <pbuf_add_header_impl>
 800b0a4:	4603      	mov	r3, r0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d106      	bne.n	800b0ce <pbuf_remove_header+0x1e>
 800b0c0:	4b20      	ldr	r3, [pc, #128]	; (800b144 <pbuf_remove_header+0x94>)
 800b0c2:	f240 224b 	movw	r2, #587	; 0x24b
 800b0c6:	4920      	ldr	r1, [pc, #128]	; (800b148 <pbuf_remove_header+0x98>)
 800b0c8:	4820      	ldr	r0, [pc, #128]	; (800b14c <pbuf_remove_header+0x9c>)
 800b0ca:	f00a fc57 	bl	801597c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <pbuf_remove_header+0x2c>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0da:	d301      	bcc.n	800b0e0 <pbuf_remove_header+0x30>
    return 1;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e02c      	b.n	800b13a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <pbuf_remove_header+0x3a>
    return 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	e027      	b.n	800b13a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	895b      	ldrh	r3, [r3, #10]
 800b0f2:	89fa      	ldrh	r2, [r7, #14]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d908      	bls.n	800b10a <pbuf_remove_header+0x5a>
 800b0f8:	4b12      	ldr	r3, [pc, #72]	; (800b144 <pbuf_remove_header+0x94>)
 800b0fa:	f240 2255 	movw	r2, #597	; 0x255
 800b0fe:	4914      	ldr	r1, [pc, #80]	; (800b150 <pbuf_remove_header+0xa0>)
 800b100:	4812      	ldr	r0, [pc, #72]	; (800b14c <pbuf_remove_header+0x9c>)
 800b102:	f00a fc3b 	bl	801597c <iprintf>
 800b106:	2301      	movs	r3, #1
 800b108:	e017      	b.n	800b13a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	441a      	add	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	895a      	ldrh	r2, [r3, #10]
 800b120:	89fb      	ldrh	r3, [r7, #14]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	b29a      	uxth	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	891a      	ldrh	r2, [r3, #8]
 800b12e:	89fb      	ldrh	r3, [r7, #14]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	b29a      	uxth	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	08017570 	.word	0x08017570
 800b148:	080176d4 	.word	0x080176d4
 800b14c:	080175d0 	.word	0x080175d0
 800b150:	080176e0 	.word	0x080176e0

0800b154 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	807b      	strh	r3, [r7, #2]
 800b160:	4613      	mov	r3, r2
 800b162:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b164:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	da08      	bge.n	800b17e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b16c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b170:	425b      	negs	r3, r3
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7ff ff9b 	bl	800b0b0 <pbuf_remove_header>
 800b17a:	4603      	mov	r3, r0
 800b17c:	e007      	b.n	800b18e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b17e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b182:	787a      	ldrb	r2, [r7, #1]
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff ff1a 	bl	800afc0 <pbuf_add_header_impl>
 800b18c:	4603      	mov	r3, r0
  }
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b082      	sub	sp, #8
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b1a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff ffd2 	bl	800b154 <pbuf_header_impl>
 800b1b0:	4603      	mov	r3, r0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
	...

0800b1bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10b      	bne.n	800b1e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <pbuf_free+0x22>
 800b1d0:	4b38      	ldr	r3, [pc, #224]	; (800b2b4 <pbuf_free+0xf8>)
 800b1d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b1d6:	4938      	ldr	r1, [pc, #224]	; (800b2b8 <pbuf_free+0xfc>)
 800b1d8:	4838      	ldr	r0, [pc, #224]	; (800b2bc <pbuf_free+0x100>)
 800b1da:	f00a fbcf 	bl	801597c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e063      	b.n	800b2aa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b1e6:	e05c      	b.n	800b2a2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	7b9b      	ldrb	r3, [r3, #14]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d106      	bne.n	800b1fe <pbuf_free+0x42>
 800b1f0:	4b30      	ldr	r3, [pc, #192]	; (800b2b4 <pbuf_free+0xf8>)
 800b1f2:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b1f6:	4932      	ldr	r1, [pc, #200]	; (800b2c0 <pbuf_free+0x104>)
 800b1f8:	4830      	ldr	r0, [pc, #192]	; (800b2bc <pbuf_free+0x100>)
 800b1fa:	f00a fbbf 	bl	801597c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7b9b      	ldrb	r3, [r3, #14]
 800b202:	3b01      	subs	r3, #1
 800b204:	b2da      	uxtb	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	739a      	strb	r2, [r3, #14]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	7b9b      	ldrb	r3, [r3, #14]
 800b20e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b210:	7dbb      	ldrb	r3, [r7, #22]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d143      	bne.n	800b29e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	7b1b      	ldrb	r3, [r3, #12]
 800b220:	f003 030f 	and.w	r3, r3, #15
 800b224:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	7b5b      	ldrb	r3, [r3, #13]
 800b22a:	f003 0302 	and.w	r3, r3, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d011      	beq.n	800b256 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <pbuf_free+0x90>
 800b23e:	4b1d      	ldr	r3, [pc, #116]	; (800b2b4 <pbuf_free+0xf8>)
 800b240:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b244:	491f      	ldr	r1, [pc, #124]	; (800b2c4 <pbuf_free+0x108>)
 800b246:	481d      	ldr	r0, [pc, #116]	; (800b2bc <pbuf_free+0x100>)
 800b248:	f00a fb98 	bl	801597c <iprintf>
        pc->custom_free_function(p);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	4798      	blx	r3
 800b254:	e01d      	b.n	800b292 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b256:	7bfb      	ldrb	r3, [r7, #15]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d104      	bne.n	800b266 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	2008      	movs	r0, #8
 800b260:	f7ff f92a 	bl	800a4b8 <memp_free>
 800b264:	e015      	b.n	800b292 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b266:	7bfb      	ldrb	r3, [r7, #15]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d104      	bne.n	800b276 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	2007      	movs	r0, #7
 800b270:	f7ff f922 	bl	800a4b8 <memp_free>
 800b274:	e00d      	b.n	800b292 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b276:	7bfb      	ldrb	r3, [r7, #15]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d103      	bne.n	800b284 <pbuf_free+0xc8>
          mem_free(p);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7fe fdb5 	bl	8009dec <mem_free>
 800b282:	e006      	b.n	800b292 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b284:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <pbuf_free+0xf8>)
 800b286:	f240 320f 	movw	r2, #783	; 0x30f
 800b28a:	490f      	ldr	r1, [pc, #60]	; (800b2c8 <pbuf_free+0x10c>)
 800b28c:	480b      	ldr	r0, [pc, #44]	; (800b2bc <pbuf_free+0x100>)
 800b28e:	f00a fb75 	bl	801597c <iprintf>
        }
      }
      count++;
 800b292:	7dfb      	ldrb	r3, [r7, #23]
 800b294:	3301      	adds	r3, #1
 800b296:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	607b      	str	r3, [r7, #4]
 800b29c:	e001      	b.n	800b2a2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d19f      	bne.n	800b1e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	08017570 	.word	0x08017570
 800b2b8:	080176d4 	.word	0x080176d4
 800b2bc:	080175d0 	.word	0x080175d0
 800b2c0:	08017700 	.word	0x08017700
 800b2c4:	08017718 	.word	0x08017718
 800b2c8:	0801773c 	.word	0x0801773c

0800b2cc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b2d8:	e005      	b.n	800b2e6 <pbuf_clen+0x1a>
    ++len;
 800b2da:	89fb      	ldrh	r3, [r7, #14]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1f6      	bne.n	800b2da <pbuf_clen+0xe>
  }
  return len;
 800b2ec:	89fb      	ldrh	r3, [r7, #14]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
	...

0800b2fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d010      	beq.n	800b32c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7b9b      	ldrb	r3, [r3, #14]
 800b30e:	3301      	adds	r3, #1
 800b310:	b2da      	uxtb	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	7b9b      	ldrb	r3, [r3, #14]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <pbuf_ref+0x30>
 800b31e:	4b05      	ldr	r3, [pc, #20]	; (800b334 <pbuf_ref+0x38>)
 800b320:	f240 3242 	movw	r2, #834	; 0x342
 800b324:	4904      	ldr	r1, [pc, #16]	; (800b338 <pbuf_ref+0x3c>)
 800b326:	4805      	ldr	r0, [pc, #20]	; (800b33c <pbuf_ref+0x40>)
 800b328:	f00a fb28 	bl	801597c <iprintf>
  }
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	08017570 	.word	0x08017570
 800b338:	08017750 	.word	0x08017750
 800b33c:	080175d0 	.word	0x080175d0

0800b340 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <pbuf_cat+0x16>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d107      	bne.n	800b366 <pbuf_cat+0x26>
 800b356:	4b20      	ldr	r3, [pc, #128]	; (800b3d8 <pbuf_cat+0x98>)
 800b358:	f240 3259 	movw	r2, #857	; 0x359
 800b35c:	491f      	ldr	r1, [pc, #124]	; (800b3dc <pbuf_cat+0x9c>)
 800b35e:	4820      	ldr	r0, [pc, #128]	; (800b3e0 <pbuf_cat+0xa0>)
 800b360:	f00a fb0c 	bl	801597c <iprintf>
 800b364:	e034      	b.n	800b3d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	e00a      	b.n	800b382 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	891a      	ldrh	r2, [r3, #8]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	891b      	ldrh	r3, [r3, #8]
 800b374:	4413      	add	r3, r2
 800b376:	b29a      	uxth	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1f0      	bne.n	800b36c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	891a      	ldrh	r2, [r3, #8]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	895b      	ldrh	r3, [r3, #10]
 800b392:	429a      	cmp	r2, r3
 800b394:	d006      	beq.n	800b3a4 <pbuf_cat+0x64>
 800b396:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <pbuf_cat+0x98>)
 800b398:	f240 3262 	movw	r2, #866	; 0x362
 800b39c:	4911      	ldr	r1, [pc, #68]	; (800b3e4 <pbuf_cat+0xa4>)
 800b39e:	4810      	ldr	r0, [pc, #64]	; (800b3e0 <pbuf_cat+0xa0>)
 800b3a0:	f00a faec 	bl	801597c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d006      	beq.n	800b3ba <pbuf_cat+0x7a>
 800b3ac:	4b0a      	ldr	r3, [pc, #40]	; (800b3d8 <pbuf_cat+0x98>)
 800b3ae:	f240 3263 	movw	r2, #867	; 0x363
 800b3b2:	490d      	ldr	r1, [pc, #52]	; (800b3e8 <pbuf_cat+0xa8>)
 800b3b4:	480a      	ldr	r0, [pc, #40]	; (800b3e0 <pbuf_cat+0xa0>)
 800b3b6:	f00a fae1 	bl	801597c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	891a      	ldrh	r2, [r3, #8]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	891b      	ldrh	r3, [r3, #8]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	08017570 	.word	0x08017570
 800b3dc:	08017764 	.word	0x08017764
 800b3e0:	080175d0 	.word	0x080175d0
 800b3e4:	0801779c 	.word	0x0801779c
 800b3e8:	080177cc 	.word	0x080177cc

0800b3ec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7ff ffa1 	bl	800b340 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b3fe:	6838      	ldr	r0, [r7, #0]
 800b400:	f7ff ff7c 	bl	800b2fc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]
 800b41a:	2300      	movs	r3, #0
 800b41c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d008      	beq.n	800b436 <pbuf_copy+0x2a>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d005      	beq.n	800b436 <pbuf_copy+0x2a>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	891a      	ldrh	r2, [r3, #8]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	891b      	ldrh	r3, [r3, #8]
 800b432:	429a      	cmp	r2, r3
 800b434:	d209      	bcs.n	800b44a <pbuf_copy+0x3e>
 800b436:	4b57      	ldr	r3, [pc, #348]	; (800b594 <pbuf_copy+0x188>)
 800b438:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b43c:	4956      	ldr	r1, [pc, #344]	; (800b598 <pbuf_copy+0x18c>)
 800b43e:	4857      	ldr	r0, [pc, #348]	; (800b59c <pbuf_copy+0x190>)
 800b440:	f00a fa9c 	bl	801597c <iprintf>
 800b444:	f06f 030f 	mvn.w	r3, #15
 800b448:	e09f      	b.n	800b58a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	895b      	ldrh	r3, [r3, #10]
 800b44e:	461a      	mov	r2, r3
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	1ad2      	subs	r2, r2, r3
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	895b      	ldrh	r3, [r3, #10]
 800b458:	4619      	mov	r1, r3
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	1acb      	subs	r3, r1, r3
 800b45e:	429a      	cmp	r2, r3
 800b460:	d306      	bcc.n	800b470 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	895b      	ldrh	r3, [r3, #10]
 800b466:	461a      	mov	r2, r3
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	60fb      	str	r3, [r7, #12]
 800b46e:	e005      	b.n	800b47c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	895b      	ldrh	r3, [r3, #10]
 800b474:	461a      	mov	r2, r3
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	18d0      	adds	r0, r2, r3
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	4413      	add	r3, r2
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4619      	mov	r1, r3
 800b490:	f00a fa44 	bl	801591c <memcpy>
    offset_to += len;
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	4413      	add	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	895b      	ldrh	r3, [r3, #10]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d906      	bls.n	800b4be <pbuf_copy+0xb2>
 800b4b0:	4b38      	ldr	r3, [pc, #224]	; (800b594 <pbuf_copy+0x188>)
 800b4b2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b4b6:	493a      	ldr	r1, [pc, #232]	; (800b5a0 <pbuf_copy+0x194>)
 800b4b8:	4838      	ldr	r0, [pc, #224]	; (800b59c <pbuf_copy+0x190>)
 800b4ba:	f00a fa5f 	bl	801597c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	895b      	ldrh	r3, [r3, #10]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d906      	bls.n	800b4d8 <pbuf_copy+0xcc>
 800b4ca:	4b32      	ldr	r3, [pc, #200]	; (800b594 <pbuf_copy+0x188>)
 800b4cc:	f240 32da 	movw	r2, #986	; 0x3da
 800b4d0:	4934      	ldr	r1, [pc, #208]	; (800b5a4 <pbuf_copy+0x198>)
 800b4d2:	4832      	ldr	r0, [pc, #200]	; (800b59c <pbuf_copy+0x190>)
 800b4d4:	f00a fa52 	bl	801597c <iprintf>
    if (offset_from >= p_from->len) {
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	895b      	ldrh	r3, [r3, #10]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d304      	bcc.n	800b4ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	895b      	ldrh	r3, [r3, #10]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d114      	bne.n	800b524 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10c      	bne.n	800b524 <pbuf_copy+0x118>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d009      	beq.n	800b524 <pbuf_copy+0x118>
 800b510:	4b20      	ldr	r3, [pc, #128]	; (800b594 <pbuf_copy+0x188>)
 800b512:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b516:	4924      	ldr	r1, [pc, #144]	; (800b5a8 <pbuf_copy+0x19c>)
 800b518:	4820      	ldr	r0, [pc, #128]	; (800b59c <pbuf_copy+0x190>)
 800b51a:	f00a fa2f 	bl	801597c <iprintf>
 800b51e:	f06f 030f 	mvn.w	r3, #15
 800b522:	e032      	b.n	800b58a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d013      	beq.n	800b552 <pbuf_copy+0x146>
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	895a      	ldrh	r2, [r3, #10]
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	891b      	ldrh	r3, [r3, #8]
 800b532:	429a      	cmp	r2, r3
 800b534:	d10d      	bne.n	800b552 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d009      	beq.n	800b552 <pbuf_copy+0x146>
 800b53e:	4b15      	ldr	r3, [pc, #84]	; (800b594 <pbuf_copy+0x188>)
 800b540:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b544:	4919      	ldr	r1, [pc, #100]	; (800b5ac <pbuf_copy+0x1a0>)
 800b546:	4815      	ldr	r0, [pc, #84]	; (800b59c <pbuf_copy+0x190>)
 800b548:	f00a fa18 	bl	801597c <iprintf>
 800b54c:	f06f 0305 	mvn.w	r3, #5
 800b550:	e01b      	b.n	800b58a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d013      	beq.n	800b580 <pbuf_copy+0x174>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	895a      	ldrh	r2, [r3, #10]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	891b      	ldrh	r3, [r3, #8]
 800b560:	429a      	cmp	r2, r3
 800b562:	d10d      	bne.n	800b580 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d009      	beq.n	800b580 <pbuf_copy+0x174>
 800b56c:	4b09      	ldr	r3, [pc, #36]	; (800b594 <pbuf_copy+0x188>)
 800b56e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b572:	490e      	ldr	r1, [pc, #56]	; (800b5ac <pbuf_copy+0x1a0>)
 800b574:	4809      	ldr	r0, [pc, #36]	; (800b59c <pbuf_copy+0x190>)
 800b576:	f00a fa01 	bl	801597c <iprintf>
 800b57a:	f06f 0305 	mvn.w	r3, #5
 800b57e:	e004      	b.n	800b58a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	f47f af61 	bne.w	800b44a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3718      	adds	r7, #24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	08017570 	.word	0x08017570
 800b598:	08017818 	.word	0x08017818
 800b59c:	080175d0 	.word	0x080175d0
 800b5a0:	08017848 	.word	0x08017848
 800b5a4:	08017860 	.word	0x08017860
 800b5a8:	0801787c 	.word	0x0801787c
 800b5ac:	0801788c 	.word	0x0801788c

0800b5b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	461a      	mov	r2, r3
 800b5be:	460b      	mov	r3, r1
 800b5c0:	80fb      	strh	r3, [r7, #6]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d108      	bne.n	800b5e6 <pbuf_copy_partial+0x36>
 800b5d4:	4b2b      	ldr	r3, [pc, #172]	; (800b684 <pbuf_copy_partial+0xd4>)
 800b5d6:	f240 420a 	movw	r2, #1034	; 0x40a
 800b5da:	492b      	ldr	r1, [pc, #172]	; (800b688 <pbuf_copy_partial+0xd8>)
 800b5dc:	482b      	ldr	r0, [pc, #172]	; (800b68c <pbuf_copy_partial+0xdc>)
 800b5de:	f00a f9cd 	bl	801597c <iprintf>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e04a      	b.n	800b67c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d108      	bne.n	800b5fe <pbuf_copy_partial+0x4e>
 800b5ec:	4b25      	ldr	r3, [pc, #148]	; (800b684 <pbuf_copy_partial+0xd4>)
 800b5ee:	f240 420b 	movw	r2, #1035	; 0x40b
 800b5f2:	4927      	ldr	r1, [pc, #156]	; (800b690 <pbuf_copy_partial+0xe0>)
 800b5f4:	4825      	ldr	r0, [pc, #148]	; (800b68c <pbuf_copy_partial+0xdc>)
 800b5f6:	f00a f9c1 	bl	801597c <iprintf>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e03e      	b.n	800b67c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	61fb      	str	r3, [r7, #28]
 800b602:	e034      	b.n	800b66e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b604:	88bb      	ldrh	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00a      	beq.n	800b620 <pbuf_copy_partial+0x70>
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	895b      	ldrh	r3, [r3, #10]
 800b60e:	88ba      	ldrh	r2, [r7, #4]
 800b610:	429a      	cmp	r2, r3
 800b612:	d305      	bcc.n	800b620 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	895b      	ldrh	r3, [r3, #10]
 800b618:	88ba      	ldrh	r2, [r7, #4]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	80bb      	strh	r3, [r7, #4]
 800b61e:	e023      	b.n	800b668 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	895a      	ldrh	r2, [r3, #10]
 800b624:	88bb      	ldrh	r3, [r7, #4]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b62a:	8b3a      	ldrh	r2, [r7, #24]
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d901      	bls.n	800b636 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b632:	88fb      	ldrh	r3, [r7, #6]
 800b634:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b636:	8b7b      	ldrh	r3, [r7, #26]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	18d0      	adds	r0, r2, r3
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	88bb      	ldrh	r3, [r7, #4]
 800b642:	4413      	add	r3, r2
 800b644:	8b3a      	ldrh	r2, [r7, #24]
 800b646:	4619      	mov	r1, r3
 800b648:	f00a f968 	bl	801591c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b64c:	8afa      	ldrh	r2, [r7, #22]
 800b64e:	8b3b      	ldrh	r3, [r7, #24]
 800b650:	4413      	add	r3, r2
 800b652:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b654:	8b7a      	ldrh	r2, [r7, #26]
 800b656:	8b3b      	ldrh	r3, [r7, #24]
 800b658:	4413      	add	r3, r2
 800b65a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b65c:	88fa      	ldrh	r2, [r7, #6]
 800b65e:	8b3b      	ldrh	r3, [r7, #24]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	61fb      	str	r3, [r7, #28]
 800b66e:	88fb      	ldrh	r3, [r7, #6]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <pbuf_copy_partial+0xca>
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1c4      	bne.n	800b604 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b67a:	8afb      	ldrh	r3, [r7, #22]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3720      	adds	r7, #32
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	08017570 	.word	0x08017570
 800b688:	080178b8 	.word	0x080178b8
 800b68c:	080175d0 	.word	0x080175d0
 800b690:	080178d8 	.word	0x080178d8

0800b694 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	603a      	str	r2, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	8919      	ldrh	r1, [r3, #8]
 800b6a8:	88ba      	ldrh	r2, [r7, #4]
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff faa1 	bl	800abf4 <pbuf_alloc>
 800b6b2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <pbuf_clone+0x2a>
    return NULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e011      	b.n	800b6e2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f7ff fea3 	bl	800b40c <pbuf_copy>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b6ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d006      	beq.n	800b6e0 <pbuf_clone+0x4c>
 800b6d2:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <pbuf_clone+0x58>)
 800b6d4:	f240 5224 	movw	r2, #1316	; 0x524
 800b6d8:	4905      	ldr	r1, [pc, #20]	; (800b6f0 <pbuf_clone+0x5c>)
 800b6da:	4806      	ldr	r0, [pc, #24]	; (800b6f4 <pbuf_clone+0x60>)
 800b6dc:	f00a f94e 	bl	801597c <iprintf>
  return q;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	08017570 	.word	0x08017570
 800b6f0:	080179e4 	.word	0x080179e4
 800b6f4:	080175d0 	.word	0x080175d0

0800b6f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b6fc:	f00a f956 	bl	80159ac <rand>
 800b700:	4603      	mov	r3, r0
 800b702:	b29b      	uxth	r3, r3
 800b704:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b708:	b29b      	uxth	r3, r3
 800b70a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b70e:	b29a      	uxth	r2, r3
 800b710:	4b01      	ldr	r3, [pc, #4]	; (800b718 <tcp_init+0x20>)
 800b712:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b714:	bf00      	nop
 800b716:	bd80      	pop	{r7, pc}
 800b718:	20000054 	.word	0x20000054

0800b71c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	7d1b      	ldrb	r3, [r3, #20]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d105      	bne.n	800b738 <tcp_free+0x1c>
 800b72c:	4b06      	ldr	r3, [pc, #24]	; (800b748 <tcp_free+0x2c>)
 800b72e:	22d4      	movs	r2, #212	; 0xd4
 800b730:	4906      	ldr	r1, [pc, #24]	; (800b74c <tcp_free+0x30>)
 800b732:	4807      	ldr	r0, [pc, #28]	; (800b750 <tcp_free+0x34>)
 800b734:	f00a f922 	bl	801597c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	2001      	movs	r0, #1
 800b73c:	f7fe febc 	bl	800a4b8 <memp_free>
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	08017a70 	.word	0x08017a70
 800b74c:	08017aa0 	.word	0x08017aa0
 800b750:	08017ab4 	.word	0x08017ab4

0800b754 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	7d1b      	ldrb	r3, [r3, #20]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d105      	bne.n	800b770 <tcp_free_listen+0x1c>
 800b764:	4b06      	ldr	r3, [pc, #24]	; (800b780 <tcp_free_listen+0x2c>)
 800b766:	22df      	movs	r2, #223	; 0xdf
 800b768:	4906      	ldr	r1, [pc, #24]	; (800b784 <tcp_free_listen+0x30>)
 800b76a:	4807      	ldr	r0, [pc, #28]	; (800b788 <tcp_free_listen+0x34>)
 800b76c:	f00a f906 	bl	801597c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b770:	6879      	ldr	r1, [r7, #4]
 800b772:	2002      	movs	r0, #2
 800b774:	f7fe fea0 	bl	800a4b8 <memp_free>
}
 800b778:	bf00      	nop
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	08017a70 	.word	0x08017a70
 800b784:	08017adc 	.word	0x08017adc
 800b788:	08017ab4 	.word	0x08017ab4

0800b78c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b790:	f000 fea2 	bl	800c4d8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b794:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <tcp_tmr+0x28>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	3301      	adds	r3, #1
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <tcp_tmr+0x28>)
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	4b04      	ldr	r3, [pc, #16]	; (800b7b4 <tcp_tmr+0x28>)
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b7ac:	f000 fb54 	bl	800be58 <tcp_slowtmr>
  }
}
 800b7b0:	bf00      	nop
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	2000b03d 	.word	0x2000b03d

0800b7b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d105      	bne.n	800b7d4 <tcp_remove_listener+0x1c>
 800b7c8:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <tcp_remove_listener+0x48>)
 800b7ca:	22ff      	movs	r2, #255	; 0xff
 800b7cc:	490d      	ldr	r1, [pc, #52]	; (800b804 <tcp_remove_listener+0x4c>)
 800b7ce:	480e      	ldr	r0, [pc, #56]	; (800b808 <tcp_remove_listener+0x50>)
 800b7d0:	f00a f8d4 	bl	801597c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e00a      	b.n	800b7f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d102      	bne.n	800b7ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1f1      	bne.n	800b7da <tcp_remove_listener+0x22>
    }
  }
}
 800b7f6:	bf00      	nop
 800b7f8:	bf00      	nop
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	08017a70 	.word	0x08017a70
 800b804:	08017af8 	.word	0x08017af8
 800b808:	08017ab4 	.word	0x08017ab4

0800b80c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <tcp_listen_closed+0x1c>
 800b81a:	4b14      	ldr	r3, [pc, #80]	; (800b86c <tcp_listen_closed+0x60>)
 800b81c:	f240 1211 	movw	r2, #273	; 0x111
 800b820:	4913      	ldr	r1, [pc, #76]	; (800b870 <tcp_listen_closed+0x64>)
 800b822:	4814      	ldr	r0, [pc, #80]	; (800b874 <tcp_listen_closed+0x68>)
 800b824:	f00a f8aa 	bl	801597c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	7d1b      	ldrb	r3, [r3, #20]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d006      	beq.n	800b83e <tcp_listen_closed+0x32>
 800b830:	4b0e      	ldr	r3, [pc, #56]	; (800b86c <tcp_listen_closed+0x60>)
 800b832:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b836:	4910      	ldr	r1, [pc, #64]	; (800b878 <tcp_listen_closed+0x6c>)
 800b838:	480e      	ldr	r0, [pc, #56]	; (800b874 <tcp_listen_closed+0x68>)
 800b83a:	f00a f89f 	bl	801597c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b83e:	2301      	movs	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	e00b      	b.n	800b85c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b844:	4a0d      	ldr	r2, [pc, #52]	; (800b87c <tcp_listen_closed+0x70>)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	4618      	mov	r0, r3
 800b852:	f7ff ffb1 	bl	800b7b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d9f0      	bls.n	800b844 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b862:	bf00      	nop
 800b864:	bf00      	nop
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	08017a70 	.word	0x08017a70
 800b870:	08017b20 	.word	0x08017b20
 800b874:	08017ab4 	.word	0x08017ab4
 800b878:	08017b2c 	.word	0x08017b2c
 800b87c:	0801c4d0 	.word	0x0801c4d0

0800b880 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b880:	b5b0      	push	{r4, r5, r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af04      	add	r7, sp, #16
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d106      	bne.n	800b8a0 <tcp_close_shutdown+0x20>
 800b892:	4b63      	ldr	r3, [pc, #396]	; (800ba20 <tcp_close_shutdown+0x1a0>)
 800b894:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b898:	4962      	ldr	r1, [pc, #392]	; (800ba24 <tcp_close_shutdown+0x1a4>)
 800b89a:	4863      	ldr	r0, [pc, #396]	; (800ba28 <tcp_close_shutdown+0x1a8>)
 800b89c:	f00a f86e 	bl	801597c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b8a0:	78fb      	ldrb	r3, [r7, #3]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d066      	beq.n	800b974 <tcp_close_shutdown+0xf4>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	7d1b      	ldrb	r3, [r3, #20]
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	d003      	beq.n	800b8b6 <tcp_close_shutdown+0x36>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	7d1b      	ldrb	r3, [r3, #20]
 800b8b2:	2b07      	cmp	r3, #7
 800b8b4:	d15e      	bne.n	800b974 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d104      	bne.n	800b8c8 <tcp_close_shutdown+0x48>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b8c6:	d055      	beq.n	800b974 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	8b5b      	ldrh	r3, [r3, #26]
 800b8cc:	f003 0310 	and.w	r3, r3, #16
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d106      	bne.n	800b8e2 <tcp_close_shutdown+0x62>
 800b8d4:	4b52      	ldr	r3, [pc, #328]	; (800ba20 <tcp_close_shutdown+0x1a0>)
 800b8d6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b8da:	4954      	ldr	r1, [pc, #336]	; (800ba2c <tcp_close_shutdown+0x1ac>)
 800b8dc:	4852      	ldr	r0, [pc, #328]	; (800ba28 <tcp_close_shutdown+0x1a8>)
 800b8de:	f00a f84d 	bl	801597c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b8ea:	687d      	ldr	r5, [r7, #4]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3304      	adds	r3, #4
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	8ad2      	ldrh	r2, [r2, #22]
 800b8f4:	6879      	ldr	r1, [r7, #4]
 800b8f6:	8b09      	ldrh	r1, [r1, #24]
 800b8f8:	9102      	str	r1, [sp, #8]
 800b8fa:	9201      	str	r2, [sp, #4]
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	462b      	mov	r3, r5
 800b900:	4622      	mov	r2, r4
 800b902:	4601      	mov	r1, r0
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f004 fe91 	bl	801062c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 f8c6 	bl	800ca9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b910:	4b47      	ldr	r3, [pc, #284]	; (800ba30 <tcp_close_shutdown+0x1b0>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	429a      	cmp	r2, r3
 800b918:	d105      	bne.n	800b926 <tcp_close_shutdown+0xa6>
 800b91a:	4b45      	ldr	r3, [pc, #276]	; (800ba30 <tcp_close_shutdown+0x1b0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	4a43      	ldr	r2, [pc, #268]	; (800ba30 <tcp_close_shutdown+0x1b0>)
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	e013      	b.n	800b94e <tcp_close_shutdown+0xce>
 800b926:	4b42      	ldr	r3, [pc, #264]	; (800ba30 <tcp_close_shutdown+0x1b0>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	e00c      	b.n	800b948 <tcp_close_shutdown+0xc8>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d104      	bne.n	800b942 <tcp_close_shutdown+0xc2>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68da      	ldr	r2, [r3, #12]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	60da      	str	r2, [r3, #12]
 800b940:	e005      	b.n	800b94e <tcp_close_shutdown+0xce>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1ef      	bne.n	800b92e <tcp_close_shutdown+0xae>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	60da      	str	r2, [r3, #12]
 800b954:	4b37      	ldr	r3, [pc, #220]	; (800ba34 <tcp_close_shutdown+0x1b4>)
 800b956:	2201      	movs	r2, #1
 800b958:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b95a:	4b37      	ldr	r3, [pc, #220]	; (800ba38 <tcp_close_shutdown+0x1b8>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	429a      	cmp	r2, r3
 800b962:	d102      	bne.n	800b96a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b964:	f003 fd5e 	bl	800f424 <tcp_trigger_input_pcb_close>
 800b968:	e002      	b.n	800b970 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff fed6 	bl	800b71c <tcp_free>
      }
      return ERR_OK;
 800b970:	2300      	movs	r3, #0
 800b972:	e050      	b.n	800ba16 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7d1b      	ldrb	r3, [r3, #20]
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d03b      	beq.n	800b9f4 <tcp_close_shutdown+0x174>
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	dc44      	bgt.n	800ba0a <tcp_close_shutdown+0x18a>
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <tcp_close_shutdown+0x10a>
 800b984:	2b01      	cmp	r3, #1
 800b986:	d02a      	beq.n	800b9de <tcp_close_shutdown+0x15e>
 800b988:	e03f      	b.n	800ba0a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	8adb      	ldrh	r3, [r3, #22]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d021      	beq.n	800b9d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b992:	4b2a      	ldr	r3, [pc, #168]	; (800ba3c <tcp_close_shutdown+0x1bc>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d105      	bne.n	800b9a8 <tcp_close_shutdown+0x128>
 800b99c:	4b27      	ldr	r3, [pc, #156]	; (800ba3c <tcp_close_shutdown+0x1bc>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	4a26      	ldr	r2, [pc, #152]	; (800ba3c <tcp_close_shutdown+0x1bc>)
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	e013      	b.n	800b9d0 <tcp_close_shutdown+0x150>
 800b9a8:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <tcp_close_shutdown+0x1bc>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	60bb      	str	r3, [r7, #8]
 800b9ae:	e00c      	b.n	800b9ca <tcp_close_shutdown+0x14a>
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d104      	bne.n	800b9c4 <tcp_close_shutdown+0x144>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	60da      	str	r2, [r3, #12]
 800b9c2:	e005      	b.n	800b9d0 <tcp_close_shutdown+0x150>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	60bb      	str	r3, [r7, #8]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1ef      	bne.n	800b9b0 <tcp_close_shutdown+0x130>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7ff fea0 	bl	800b71c <tcp_free>
      break;
 800b9dc:	e01a      	b.n	800ba14 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff ff14 	bl	800b80c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	4816      	ldr	r0, [pc, #88]	; (800ba40 <tcp_close_shutdown+0x1c0>)
 800b9e8:	f001 f8a8 	bl	800cb3c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff feb1 	bl	800b754 <tcp_free_listen>
      break;
 800b9f2:	e00f      	b.n	800ba14 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b9f4:	6879      	ldr	r1, [r7, #4]
 800b9f6:	480e      	ldr	r0, [pc, #56]	; (800ba30 <tcp_close_shutdown+0x1b0>)
 800b9f8:	f001 f8a0 	bl	800cb3c <tcp_pcb_remove>
 800b9fc:	4b0d      	ldr	r3, [pc, #52]	; (800ba34 <tcp_close_shutdown+0x1b4>)
 800b9fe:	2201      	movs	r2, #1
 800ba00:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7ff fe8a 	bl	800b71c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ba08:	e004      	b.n	800ba14 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f81a 	bl	800ba44 <tcp_close_shutdown_fin>
 800ba10:	4603      	mov	r3, r0
 800ba12:	e000      	b.n	800ba16 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	08017a70 	.word	0x08017a70
 800ba24:	08017b44 	.word	0x08017b44
 800ba28:	08017ab4 	.word	0x08017ab4
 800ba2c:	08017b64 	.word	0x08017b64
 800ba30:	2000b034 	.word	0x2000b034
 800ba34:	2000b03c 	.word	0x2000b03c
 800ba38:	2000b074 	.word	0x2000b074
 800ba3c:	2000b02c 	.word	0x2000b02c
 800ba40:	2000b030 	.word	0x2000b030

0800ba44 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d106      	bne.n	800ba60 <tcp_close_shutdown_fin+0x1c>
 800ba52:	4b2e      	ldr	r3, [pc, #184]	; (800bb0c <tcp_close_shutdown_fin+0xc8>)
 800ba54:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ba58:	492d      	ldr	r1, [pc, #180]	; (800bb10 <tcp_close_shutdown_fin+0xcc>)
 800ba5a:	482e      	ldr	r0, [pc, #184]	; (800bb14 <tcp_close_shutdown_fin+0xd0>)
 800ba5c:	f009 ff8e 	bl	801597c <iprintf>

  switch (pcb->state) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	7d1b      	ldrb	r3, [r3, #20]
 800ba64:	2b07      	cmp	r3, #7
 800ba66:	d020      	beq.n	800baaa <tcp_close_shutdown_fin+0x66>
 800ba68:	2b07      	cmp	r3, #7
 800ba6a:	dc2b      	bgt.n	800bac4 <tcp_close_shutdown_fin+0x80>
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d002      	beq.n	800ba76 <tcp_close_shutdown_fin+0x32>
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	d00d      	beq.n	800ba90 <tcp_close_shutdown_fin+0x4c>
 800ba74:	e026      	b.n	800bac4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f003 fee6 	bl	800f848 <tcp_send_fin>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ba80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d11f      	bne.n	800bac8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2205      	movs	r2, #5
 800ba8c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ba8e:	e01b      	b.n	800bac8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f003 fed9 	bl	800f848 <tcp_send_fin>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ba9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d114      	bne.n	800bacc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2205      	movs	r2, #5
 800baa6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800baa8:	e010      	b.n	800bacc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f003 fecc 	bl	800f848 <tcp_send_fin>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d109      	bne.n	800bad0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2209      	movs	r2, #9
 800bac0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bac2:	e005      	b.n	800bad0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	e01c      	b.n	800bb02 <tcp_close_shutdown_fin+0xbe>
      break;
 800bac8:	bf00      	nop
 800baca:	e002      	b.n	800bad2 <tcp_close_shutdown_fin+0x8e>
      break;
 800bacc:	bf00      	nop
 800bace:	e000      	b.n	800bad2 <tcp_close_shutdown_fin+0x8e>
      break;
 800bad0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d103      	bne.n	800bae2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f003 fff2 	bl	800fac4 <tcp_output>
 800bae0:	e00d      	b.n	800bafe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baea:	d108      	bne.n	800bafe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	8b5b      	ldrh	r3, [r3, #26]
 800baf0:	f043 0308 	orr.w	r3, r3, #8
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	e001      	b.n	800bb02 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	08017a70 	.word	0x08017a70
 800bb10:	08017b20 	.word	0x08017b20
 800bb14:	08017ab4 	.word	0x08017ab4

0800bb18 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d109      	bne.n	800bb3a <tcp_close+0x22>
 800bb26:	4b0f      	ldr	r3, [pc, #60]	; (800bb64 <tcp_close+0x4c>)
 800bb28:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bb2c:	490e      	ldr	r1, [pc, #56]	; (800bb68 <tcp_close+0x50>)
 800bb2e:	480f      	ldr	r0, [pc, #60]	; (800bb6c <tcp_close+0x54>)
 800bb30:	f009 ff24 	bl	801597c <iprintf>
 800bb34:	f06f 030f 	mvn.w	r3, #15
 800bb38:	e00f      	b.n	800bb5a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	7d1b      	ldrb	r3, [r3, #20]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d006      	beq.n	800bb50 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8b5b      	ldrh	r3, [r3, #26]
 800bb46:	f043 0310 	orr.w	r3, r3, #16
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bb50:	2101      	movs	r1, #1
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff fe94 	bl	800b880 <tcp_close_shutdown>
 800bb58:	4603      	mov	r3, r0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	08017a70 	.word	0x08017a70
 800bb68:	08017b80 	.word	0x08017b80
 800bb6c:	08017ab4 	.word	0x08017ab4

0800bb70 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08e      	sub	sp, #56	; 0x38
 800bb74:	af04      	add	r7, sp, #16
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d107      	bne.n	800bb90 <tcp_abandon+0x20>
 800bb80:	4b52      	ldr	r3, [pc, #328]	; (800bccc <tcp_abandon+0x15c>)
 800bb82:	f240 223d 	movw	r2, #573	; 0x23d
 800bb86:	4952      	ldr	r1, [pc, #328]	; (800bcd0 <tcp_abandon+0x160>)
 800bb88:	4852      	ldr	r0, [pc, #328]	; (800bcd4 <tcp_abandon+0x164>)
 800bb8a:	f009 fef7 	bl	801597c <iprintf>
 800bb8e:	e099      	b.n	800bcc4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7d1b      	ldrb	r3, [r3, #20]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d106      	bne.n	800bba6 <tcp_abandon+0x36>
 800bb98:	4b4c      	ldr	r3, [pc, #304]	; (800bccc <tcp_abandon+0x15c>)
 800bb9a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bb9e:	494e      	ldr	r1, [pc, #312]	; (800bcd8 <tcp_abandon+0x168>)
 800bba0:	484c      	ldr	r0, [pc, #304]	; (800bcd4 <tcp_abandon+0x164>)
 800bba2:	f009 feeb 	bl	801597c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	7d1b      	ldrb	r3, [r3, #20]
 800bbaa:	2b0a      	cmp	r3, #10
 800bbac:	d107      	bne.n	800bbbe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bbae:	6879      	ldr	r1, [r7, #4]
 800bbb0:	484a      	ldr	r0, [pc, #296]	; (800bcdc <tcp_abandon+0x16c>)
 800bbb2:	f000 ffc3 	bl	800cb3c <tcp_pcb_remove>
    tcp_free(pcb);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff fdb0 	bl	800b71c <tcp_free>
 800bbbc:	e082      	b.n	800bcc4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbd8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	7d1b      	ldrb	r3, [r3, #20]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d126      	bne.n	800bc36 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	8adb      	ldrh	r3, [r3, #22]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d02e      	beq.n	800bc4e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bbf0:	4b3b      	ldr	r3, [pc, #236]	; (800bce0 <tcp_abandon+0x170>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d105      	bne.n	800bc06 <tcp_abandon+0x96>
 800bbfa:	4b39      	ldr	r3, [pc, #228]	; (800bce0 <tcp_abandon+0x170>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	4a37      	ldr	r2, [pc, #220]	; (800bce0 <tcp_abandon+0x170>)
 800bc02:	6013      	str	r3, [r2, #0]
 800bc04:	e013      	b.n	800bc2e <tcp_abandon+0xbe>
 800bc06:	4b36      	ldr	r3, [pc, #216]	; (800bce0 <tcp_abandon+0x170>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	61fb      	str	r3, [r7, #28]
 800bc0c:	e00c      	b.n	800bc28 <tcp_abandon+0xb8>
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d104      	bne.n	800bc22 <tcp_abandon+0xb2>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68da      	ldr	r2, [r3, #12]
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	60da      	str	r2, [r3, #12]
 800bc20:	e005      	b.n	800bc2e <tcp_abandon+0xbe>
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	61fb      	str	r3, [r7, #28]
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1ef      	bne.n	800bc0e <tcp_abandon+0x9e>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	60da      	str	r2, [r3, #12]
 800bc34:	e00b      	b.n	800bc4e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	8adb      	ldrh	r3, [r3, #22]
 800bc3e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	4828      	ldr	r0, [pc, #160]	; (800bce4 <tcp_abandon+0x174>)
 800bc44:	f000 ff7a 	bl	800cb3c <tcp_pcb_remove>
 800bc48:	4b27      	ldr	r3, [pc, #156]	; (800bce8 <tcp_abandon+0x178>)
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d004      	beq.n	800bc60 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f000 fd1c 	bl	800c698 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d004      	beq.n	800bc72 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 fd13 	bl	800c698 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d004      	beq.n	800bc84 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 fd0a 	bl	800c698 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00e      	beq.n	800bca8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bc8a:	6879      	ldr	r1, [r7, #4]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	8b12      	ldrh	r2, [r2, #24]
 800bc94:	9202      	str	r2, [sp, #8]
 800bc96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc98:	9201      	str	r2, [sp, #4]
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	69b9      	ldr	r1, [r7, #24]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f004 fcc2 	bl	801062c <tcp_rst>
    }
    last_state = pcb->state;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	7d1b      	ldrb	r3, [r3, #20]
 800bcac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff fd34 	bl	800b71c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <tcp_abandon+0x154>
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	f06f 010c 	mvn.w	r1, #12
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	4798      	blx	r3
  }
}
 800bcc4:	3728      	adds	r7, #40	; 0x28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	08017a70 	.word	0x08017a70
 800bcd0:	08017bb4 	.word	0x08017bb4
 800bcd4:	08017ab4 	.word	0x08017ab4
 800bcd8:	08017bd0 	.word	0x08017bd0
 800bcdc:	2000b038 	.word	0x2000b038
 800bce0:	2000b02c 	.word	0x2000b02c
 800bce4:	2000b034 	.word	0x2000b034
 800bce8:	2000b03c 	.word	0x2000b03c

0800bcec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff ff3a 	bl	800bb70 <tcp_abandon>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <tcp_update_rcv_ann_wnd+0x1c>
 800bd12:	4b25      	ldr	r3, [pc, #148]	; (800bda8 <tcp_update_rcv_ann_wnd+0xa4>)
 800bd14:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bd18:	4924      	ldr	r1, [pc, #144]	; (800bdac <tcp_update_rcv_ann_wnd+0xa8>)
 800bd1a:	4825      	ldr	r0, [pc, #148]	; (800bdb0 <tcp_update_rcv_ann_wnd+0xac>)
 800bd1c:	f009 fe2e 	bl	801597c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bd28:	4413      	add	r3, r2
 800bd2a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bd34:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bd38:	bf28      	it	cs
 800bd3a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bd3e:	b292      	uxth	r2, r2
 800bd40:	4413      	add	r3, r2
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	db08      	blt.n	800bd5c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	e020      	b.n	800bd9e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dd03      	ble.n	800bd72 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd70:	e014      	b.n	800bd9c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd84:	d306      	bcc.n	800bd94 <tcp_update_rcv_ann_wnd+0x90>
 800bd86:	4b08      	ldr	r3, [pc, #32]	; (800bda8 <tcp_update_rcv_ann_wnd+0xa4>)
 800bd88:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bd8c:	4909      	ldr	r1, [pc, #36]	; (800bdb4 <tcp_update_rcv_ann_wnd+0xb0>)
 800bd8e:	4808      	ldr	r0, [pc, #32]	; (800bdb0 <tcp_update_rcv_ann_wnd+0xac>)
 800bd90:	f009 fdf4 	bl	801597c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bd9c:	2300      	movs	r3, #0
  }
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	08017a70 	.word	0x08017a70
 800bdac:	08017ccc 	.word	0x08017ccc
 800bdb0:	08017ab4 	.word	0x08017ab4
 800bdb4:	08017cf0 	.word	0x08017cf0

0800bdb8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d107      	bne.n	800bdda <tcp_recved+0x22>
 800bdca:	4b1f      	ldr	r3, [pc, #124]	; (800be48 <tcp_recved+0x90>)
 800bdcc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bdd0:	491e      	ldr	r1, [pc, #120]	; (800be4c <tcp_recved+0x94>)
 800bdd2:	481f      	ldr	r0, [pc, #124]	; (800be50 <tcp_recved+0x98>)
 800bdd4:	f009 fdd2 	bl	801597c <iprintf>
 800bdd8:	e032      	b.n	800be40 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7d1b      	ldrb	r3, [r3, #20]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d106      	bne.n	800bdf0 <tcp_recved+0x38>
 800bde2:	4b19      	ldr	r3, [pc, #100]	; (800be48 <tcp_recved+0x90>)
 800bde4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800bde8:	491a      	ldr	r1, [pc, #104]	; (800be54 <tcp_recved+0x9c>)
 800bdea:	4819      	ldr	r0, [pc, #100]	; (800be50 <tcp_recved+0x98>)
 800bdec:	f009 fdc6 	bl	801597c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdf4:	887b      	ldrh	r3, [r7, #2]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bdfa:	89fb      	ldrh	r3, [r7, #14]
 800bdfc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800be00:	d804      	bhi.n	800be0c <tcp_recved+0x54>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be06:	89fa      	ldrh	r2, [r7, #14]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d204      	bcs.n	800be16 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800be12:	851a      	strh	r2, [r3, #40]	; 0x28
 800be14:	e002      	b.n	800be1c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	89fa      	ldrh	r2, [r7, #14]
 800be1a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7ff ff71 	bl	800bd04 <tcp_update_rcv_ann_wnd>
 800be22:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800be2a:	d309      	bcc.n	800be40 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	8b5b      	ldrh	r3, [r3, #26]
 800be30:	f043 0302 	orr.w	r3, r3, #2
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f003 fe42 	bl	800fac4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	08017a70 	.word	0x08017a70
 800be4c:	08017d0c 	.word	0x08017d0c
 800be50:	08017ab4 	.word	0x08017ab4
 800be54:	08017d24 	.word	0x08017d24

0800be58 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800be58:	b5b0      	push	{r4, r5, r7, lr}
 800be5a:	b090      	sub	sp, #64	; 0x40
 800be5c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800be64:	4b94      	ldr	r3, [pc, #592]	; (800c0b8 <tcp_slowtmr+0x260>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3301      	adds	r3, #1
 800be6a:	4a93      	ldr	r2, [pc, #588]	; (800c0b8 <tcp_slowtmr+0x260>)
 800be6c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800be6e:	4b93      	ldr	r3, [pc, #588]	; (800c0bc <tcp_slowtmr+0x264>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	b2da      	uxtb	r2, r3
 800be76:	4b91      	ldr	r3, [pc, #580]	; (800c0bc <tcp_slowtmr+0x264>)
 800be78:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800be7e:	4b90      	ldr	r3, [pc, #576]	; (800c0c0 <tcp_slowtmr+0x268>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800be84:	e29d      	b.n	800c3c2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800be86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be88:	7d1b      	ldrb	r3, [r3, #20]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <tcp_slowtmr+0x44>
 800be8e:	4b8d      	ldr	r3, [pc, #564]	; (800c0c4 <tcp_slowtmr+0x26c>)
 800be90:	f240 42be 	movw	r2, #1214	; 0x4be
 800be94:	498c      	ldr	r1, [pc, #560]	; (800c0c8 <tcp_slowtmr+0x270>)
 800be96:	488d      	ldr	r0, [pc, #564]	; (800c0cc <tcp_slowtmr+0x274>)
 800be98:	f009 fd70 	bl	801597c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	7d1b      	ldrb	r3, [r3, #20]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d106      	bne.n	800beb2 <tcp_slowtmr+0x5a>
 800bea4:	4b87      	ldr	r3, [pc, #540]	; (800c0c4 <tcp_slowtmr+0x26c>)
 800bea6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800beaa:	4989      	ldr	r1, [pc, #548]	; (800c0d0 <tcp_slowtmr+0x278>)
 800beac:	4887      	ldr	r0, [pc, #540]	; (800c0cc <tcp_slowtmr+0x274>)
 800beae:	f009 fd65 	bl	801597c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	7d1b      	ldrb	r3, [r3, #20]
 800beb6:	2b0a      	cmp	r3, #10
 800beb8:	d106      	bne.n	800bec8 <tcp_slowtmr+0x70>
 800beba:	4b82      	ldr	r3, [pc, #520]	; (800c0c4 <tcp_slowtmr+0x26c>)
 800bebc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bec0:	4984      	ldr	r1, [pc, #528]	; (800c0d4 <tcp_slowtmr+0x27c>)
 800bec2:	4882      	ldr	r0, [pc, #520]	; (800c0cc <tcp_slowtmr+0x274>)
 800bec4:	f009 fd5a 	bl	801597c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beca:	7f9a      	ldrb	r2, [r3, #30]
 800becc:	4b7b      	ldr	r3, [pc, #492]	; (800c0bc <tcp_slowtmr+0x264>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d105      	bne.n	800bee0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bede:	e270      	b.n	800c3c2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bee0:	4b76      	ldr	r3, [pc, #472]	; (800c0bc <tcp_slowtmr+0x264>)
 800bee2:	781a      	ldrb	r2, [r3, #0]
 800bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800beee:	2300      	movs	r3, #0
 800bef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	7d1b      	ldrb	r3, [r3, #20]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d10a      	bne.n	800bf12 <tcp_slowtmr+0xba>
 800befc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	d905      	bls.n	800bf12 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bf06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf10:	e11e      	b.n	800c150 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf18:	2b0b      	cmp	r3, #11
 800bf1a:	d905      	bls.n	800bf28 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf20:	3301      	adds	r3, #1
 800bf22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf26:	e113      	b.n	800c150 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d075      	beq.n	800c01e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d006      	beq.n	800bf48 <tcp_slowtmr+0xf0>
 800bf3a:	4b62      	ldr	r3, [pc, #392]	; (800c0c4 <tcp_slowtmr+0x26c>)
 800bf3c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bf40:	4965      	ldr	r1, [pc, #404]	; (800c0d8 <tcp_slowtmr+0x280>)
 800bf42:	4862      	ldr	r0, [pc, #392]	; (800c0cc <tcp_slowtmr+0x274>)
 800bf44:	f009 fd1a 	bl	801597c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d106      	bne.n	800bf5e <tcp_slowtmr+0x106>
 800bf50:	4b5c      	ldr	r3, [pc, #368]	; (800c0c4 <tcp_slowtmr+0x26c>)
 800bf52:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bf56:	4961      	ldr	r1, [pc, #388]	; (800c0dc <tcp_slowtmr+0x284>)
 800bf58:	485c      	ldr	r0, [pc, #368]	; (800c0cc <tcp_slowtmr+0x274>)
 800bf5a:	f009 fd0f 	bl	801597c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf60:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bf64:	2b0b      	cmp	r3, #11
 800bf66:	d905      	bls.n	800bf74 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bf68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf72:	e0ed      	b.n	800c150 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	4a58      	ldr	r2, [pc, #352]	; (800c0e0 <tcp_slowtmr+0x288>)
 800bf7e:	5cd3      	ldrb	r3, [r2, r3]
 800bf80:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bf88:	7c7a      	ldrb	r2, [r7, #17]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d907      	bls.n	800bf9e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bf94:	3301      	adds	r3, #1
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bfa4:	7c7a      	ldrb	r2, [r7, #17]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	f200 80d2 	bhi.w	800c150 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bfac:	2301      	movs	r3, #1
 800bfae:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d108      	bne.n	800bfcc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bfba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfbc:	f004 fc2a 	bl	8010814 <tcp_zero_window_probe>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d014      	beq.n	800bff0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	623b      	str	r3, [r7, #32]
 800bfca:	e011      	b.n	800bff0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd6:	f003 faef 	bl	800f5b8 <tcp_split_unsent_seg>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d107      	bne.n	800bff0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bfe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfe2:	f003 fd6f 	bl	800fac4 <tcp_output>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d101      	bne.n	800bff0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 80ac 	beq.w	800c150 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c006:	2b06      	cmp	r3, #6
 800c008:	f200 80a2 	bhi.w	800c150 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c012:	3301      	adds	r3, #1
 800c014:	b2da      	uxtb	r2, r3
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c01c:	e098      	b.n	800c150 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c020:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c024:	2b00      	cmp	r3, #0
 800c026:	db0f      	blt.n	800c048 <tcp_slowtmr+0x1f0>
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c02e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c032:	4293      	cmp	r3, r2
 800c034:	d008      	beq.n	800c048 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	3301      	adds	r3, #1
 800c040:	b29b      	uxth	r3, r3
 800c042:	b21a      	sxth	r2, r3
 800c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c046:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c054:	429a      	cmp	r2, r3
 800c056:	db7b      	blt.n	800c150 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c05a:	f004 f825 	bl	80100a8 <tcp_rexmit_rto_prepare>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d007      	beq.n	800c074 <tcp_slowtmr+0x21c>
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d171      	bne.n	800c150 <tcp_slowtmr+0x2f8>
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d06d      	beq.n	800c150 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c076:	7d1b      	ldrb	r3, [r3, #20]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d03a      	beq.n	800c0f2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c082:	2b0c      	cmp	r3, #12
 800c084:	bf28      	it	cs
 800c086:	230c      	movcs	r3, #12
 800c088:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c090:	10db      	asrs	r3, r3, #3
 800c092:	b21b      	sxth	r3, r3
 800c094:	461a      	mov	r2, r3
 800c096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c098:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c09c:	4413      	add	r3, r2
 800c09e:	7efa      	ldrb	r2, [r7, #27]
 800c0a0:	4910      	ldr	r1, [pc, #64]	; (800c0e4 <tcp_slowtmr+0x28c>)
 800c0a2:	5c8a      	ldrb	r2, [r1, r2]
 800c0a4:	4093      	lsls	r3, r2
 800c0a6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	dc1a      	bgt.n	800c0e8 <tcp_slowtmr+0x290>
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	b21a      	sxth	r2, r3
 800c0b6:	e019      	b.n	800c0ec <tcp_slowtmr+0x294>
 800c0b8:	2000b028 	.word	0x2000b028
 800c0bc:	2000b03e 	.word	0x2000b03e
 800c0c0:	2000b034 	.word	0x2000b034
 800c0c4:	08017a70 	.word	0x08017a70
 800c0c8:	08017db4 	.word	0x08017db4
 800c0cc:	08017ab4 	.word	0x08017ab4
 800c0d0:	08017de0 	.word	0x08017de0
 800c0d4:	08017e0c 	.word	0x08017e0c
 800c0d8:	08017e3c 	.word	0x08017e3c
 800c0dc:	08017e70 	.word	0x08017e70
 800c0e0:	0801c4c8 	.word	0x0801c4c8
 800c0e4:	0801c4b8 	.word	0x0801c4b8
 800c0e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c104:	4293      	cmp	r3, r2
 800c106:	bf28      	it	cs
 800c108:	4613      	movcs	r3, r2
 800c10a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c10c:	8a7b      	ldrh	r3, [r7, #18]
 800c10e:	085b      	lsrs	r3, r3, #1
 800c110:	b29a      	uxth	r2, r3
 800c112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c114:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c120:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c122:	005b      	lsls	r3, r3, #1
 800c124:	b29b      	uxth	r3, r3
 800c126:	429a      	cmp	r2, r3
 800c128:	d206      	bcs.n	800c138 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	b29a      	uxth	r2, r3
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c144:	2200      	movs	r2, #0
 800c146:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c14a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c14c:	f004 f81c 	bl	8010188 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c152:	7d1b      	ldrb	r3, [r3, #20]
 800c154:	2b06      	cmp	r3, #6
 800c156:	d111      	bne.n	800c17c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15a:	8b5b      	ldrh	r3, [r3, #26]
 800c15c:	f003 0310 	and.w	r3, r3, #16
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00b      	beq.n	800c17c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c164:	4b9c      	ldr	r3, [pc, #624]	; (800c3d8 <tcp_slowtmr+0x580>)
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16a:	6a1b      	ldr	r3, [r3, #32]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	2b28      	cmp	r3, #40	; 0x28
 800c170:	d904      	bls.n	800c17c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c176:	3301      	adds	r3, #1
 800c178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	7a5b      	ldrb	r3, [r3, #9]
 800c180:	f003 0308 	and.w	r3, r3, #8
 800c184:	2b00      	cmp	r3, #0
 800c186:	d04a      	beq.n	800c21e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	d003      	beq.n	800c198 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c194:	2b07      	cmp	r3, #7
 800c196:	d142      	bne.n	800c21e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c198:	4b8f      	ldr	r3, [pc, #572]	; (800c3d8 <tcp_slowtmr+0x580>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c1a8:	4b8c      	ldr	r3, [pc, #560]	; (800c3dc <tcp_slowtmr+0x584>)
 800c1aa:	440b      	add	r3, r1
 800c1ac:	498c      	ldr	r1, [pc, #560]	; (800c3e0 <tcp_slowtmr+0x588>)
 800c1ae:	fba1 1303 	umull	r1, r3, r1, r3
 800c1b2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d90a      	bls.n	800c1ce <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1bc:	3301      	adds	r3, #1
 800c1be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c1c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c1cc:	e027      	b.n	800c21e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c1ce:	4b82      	ldr	r3, [pc, #520]	; (800c3d8 <tcp_slowtmr+0x580>)
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d4:	6a1b      	ldr	r3, [r3, #32]
 800c1d6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1da:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	4b7f      	ldr	r3, [pc, #508]	; (800c3e4 <tcp_slowtmr+0x58c>)
 800c1e8:	fb00 f303 	mul.w	r3, r0, r3
 800c1ec:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c1ee:	497c      	ldr	r1, [pc, #496]	; (800c3e0 <tcp_slowtmr+0x588>)
 800c1f0:	fba1 1303 	umull	r1, r3, r1, r3
 800c1f4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d911      	bls.n	800c21e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c1fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1fc:	f004 faca 	bl	8010794 <tcp_keepalive>
 800c200:	4603      	mov	r3, r0
 800c202:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c206:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d107      	bne.n	800c21e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c214:	3301      	adds	r3, #1
 800c216:	b2da      	uxtb	r2, r3
 800c218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c222:	2b00      	cmp	r3, #0
 800c224:	d011      	beq.n	800c24a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c226:	4b6c      	ldr	r3, [pc, #432]	; (800c3d8 <tcp_slowtmr+0x580>)
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	1ad2      	subs	r2, r2, r3
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c236:	4619      	mov	r1, r3
 800c238:	460b      	mov	r3, r1
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	440b      	add	r3, r1
 800c23e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c240:	429a      	cmp	r2, r3
 800c242:	d302      	bcc.n	800c24a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c246:	f000 fddd 	bl	800ce04 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	7d1b      	ldrb	r3, [r3, #20]
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d10b      	bne.n	800c26a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c252:	4b61      	ldr	r3, [pc, #388]	; (800c3d8 <tcp_slowtmr+0x580>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	2b28      	cmp	r3, #40	; 0x28
 800c25e:	d904      	bls.n	800c26a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c264:	3301      	adds	r3, #1
 800c266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	7d1b      	ldrb	r3, [r3, #20]
 800c26e:	2b09      	cmp	r3, #9
 800c270:	d10b      	bne.n	800c28a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c272:	4b59      	ldr	r3, [pc, #356]	; (800c3d8 <tcp_slowtmr+0x580>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	2bf0      	cmp	r3, #240	; 0xf0
 800c27e:	d904      	bls.n	800c28a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c284:	3301      	adds	r3, #1
 800c286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c28a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d060      	beq.n	800c354 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c298:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c29a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c29c:	f000 fbfe 	bl	800ca9c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d010      	beq.n	800c2c8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c2a6:	4b50      	ldr	r3, [pc, #320]	; (800c3e8 <tcp_slowtmr+0x590>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d106      	bne.n	800c2be <tcp_slowtmr+0x466>
 800c2b0:	4b4e      	ldr	r3, [pc, #312]	; (800c3ec <tcp_slowtmr+0x594>)
 800c2b2:	f240 526d 	movw	r2, #1389	; 0x56d
 800c2b6:	494e      	ldr	r1, [pc, #312]	; (800c3f0 <tcp_slowtmr+0x598>)
 800c2b8:	484e      	ldr	r0, [pc, #312]	; (800c3f4 <tcp_slowtmr+0x59c>)
 800c2ba:	f009 fb5f 	bl	801597c <iprintf>
        prev->next = pcb->next;
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	68da      	ldr	r2, [r3, #12]
 800c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c4:	60da      	str	r2, [r3, #12]
 800c2c6:	e00f      	b.n	800c2e8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c2c8:	4b47      	ldr	r3, [pc, #284]	; (800c3e8 <tcp_slowtmr+0x590>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d006      	beq.n	800c2e0 <tcp_slowtmr+0x488>
 800c2d2:	4b46      	ldr	r3, [pc, #280]	; (800c3ec <tcp_slowtmr+0x594>)
 800c2d4:	f240 5271 	movw	r2, #1393	; 0x571
 800c2d8:	4947      	ldr	r1, [pc, #284]	; (800c3f8 <tcp_slowtmr+0x5a0>)
 800c2da:	4846      	ldr	r0, [pc, #280]	; (800c3f4 <tcp_slowtmr+0x59c>)
 800c2dc:	f009 fb4e 	bl	801597c <iprintf>
        tcp_active_pcbs = pcb->next;
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	4a40      	ldr	r2, [pc, #256]	; (800c3e8 <tcp_slowtmr+0x590>)
 800c2e6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c2e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d013      	beq.n	800c318 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c2f8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c300:	8ad2      	ldrh	r2, [r2, #22]
 800c302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c304:	8b09      	ldrh	r1, [r1, #24]
 800c306:	9102      	str	r1, [sp, #8]
 800c308:	9201      	str	r2, [sp, #4]
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	462b      	mov	r3, r5
 800c30e:	4622      	mov	r2, r4
 800c310:	4601      	mov	r1, r0
 800c312:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c314:	f004 f98a 	bl	801062c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c320:	7d1b      	ldrb	r3, [r3, #20]
 800c322:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c326:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c32e:	6838      	ldr	r0, [r7, #0]
 800c330:	f7ff f9f4 	bl	800b71c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c334:	4b31      	ldr	r3, [pc, #196]	; (800c3fc <tcp_slowtmr+0x5a4>)
 800c336:	2200      	movs	r2, #0
 800c338:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d004      	beq.n	800c34a <tcp_slowtmr+0x4f2>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f06f 010c 	mvn.w	r1, #12
 800c346:	68b8      	ldr	r0, [r7, #8]
 800c348:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c34a:	4b2c      	ldr	r3, [pc, #176]	; (800c3fc <tcp_slowtmr+0x5a4>)
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d037      	beq.n	800c3c2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c352:	e592      	b.n	800be7a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	7f1b      	ldrb	r3, [r3, #28]
 800c362:	3301      	adds	r3, #1
 800c364:	b2da      	uxtb	r2, r3
 800c366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c368:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	7f1a      	ldrb	r2, [r3, #28]
 800c36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c370:	7f5b      	ldrb	r3, [r3, #29]
 800c372:	429a      	cmp	r2, r3
 800c374:	d325      	bcc.n	800c3c2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	2200      	movs	r2, #0
 800c37a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c37c:	4b1f      	ldr	r3, [pc, #124]	; (800c3fc <tcp_slowtmr+0x5a4>)
 800c37e:	2200      	movs	r2, #0
 800c380:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00b      	beq.n	800c3a4 <tcp_slowtmr+0x54c>
 800c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c394:	6912      	ldr	r2, [r2, #16]
 800c396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c398:	4610      	mov	r0, r2
 800c39a:	4798      	blx	r3
 800c39c:	4603      	mov	r3, r0
 800c39e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c3a2:	e002      	b.n	800c3aa <tcp_slowtmr+0x552>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c3aa:	4b14      	ldr	r3, [pc, #80]	; (800c3fc <tcp_slowtmr+0x5a4>)
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d000      	beq.n	800c3b4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c3b2:	e562      	b.n	800be7a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c3b4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c3bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3be:	f003 fb81 	bl	800fac4 <tcp_output>
  while (pcb != NULL) {
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f47f ad5e 	bne.w	800be86 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c3ce:	4b0c      	ldr	r3, [pc, #48]	; (800c400 <tcp_slowtmr+0x5a8>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c3d4:	e069      	b.n	800c4aa <tcp_slowtmr+0x652>
 800c3d6:	bf00      	nop
 800c3d8:	2000b028 	.word	0x2000b028
 800c3dc:	000a4cb8 	.word	0x000a4cb8
 800c3e0:	10624dd3 	.word	0x10624dd3
 800c3e4:	000124f8 	.word	0x000124f8
 800c3e8:	2000b034 	.word	0x2000b034
 800c3ec:	08017a70 	.word	0x08017a70
 800c3f0:	08017ea8 	.word	0x08017ea8
 800c3f4:	08017ab4 	.word	0x08017ab4
 800c3f8:	08017ed4 	.word	0x08017ed4
 800c3fc:	2000b03c 	.word	0x2000b03c
 800c400:	2000b038 	.word	0x2000b038
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	7d1b      	ldrb	r3, [r3, #20]
 800c408:	2b0a      	cmp	r3, #10
 800c40a:	d006      	beq.n	800c41a <tcp_slowtmr+0x5c2>
 800c40c:	4b2b      	ldr	r3, [pc, #172]	; (800c4bc <tcp_slowtmr+0x664>)
 800c40e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c412:	492b      	ldr	r1, [pc, #172]	; (800c4c0 <tcp_slowtmr+0x668>)
 800c414:	482b      	ldr	r0, [pc, #172]	; (800c4c4 <tcp_slowtmr+0x66c>)
 800c416:	f009 fab1 	bl	801597c <iprintf>
    pcb_remove = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c420:	4b29      	ldr	r3, [pc, #164]	; (800c4c8 <tcp_slowtmr+0x670>)
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	6a1b      	ldr	r3, [r3, #32]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	2bf0      	cmp	r3, #240	; 0xf0
 800c42c:	d904      	bls.n	800c438 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c42e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c432:	3301      	adds	r3, #1
 800c434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d02f      	beq.n	800c4a0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c442:	f000 fb2b 	bl	800ca9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d010      	beq.n	800c46e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c44c:	4b1f      	ldr	r3, [pc, #124]	; (800c4cc <tcp_slowtmr+0x674>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c452:	429a      	cmp	r2, r3
 800c454:	d106      	bne.n	800c464 <tcp_slowtmr+0x60c>
 800c456:	4b19      	ldr	r3, [pc, #100]	; (800c4bc <tcp_slowtmr+0x664>)
 800c458:	f240 52af 	movw	r2, #1455	; 0x5af
 800c45c:	491c      	ldr	r1, [pc, #112]	; (800c4d0 <tcp_slowtmr+0x678>)
 800c45e:	4819      	ldr	r0, [pc, #100]	; (800c4c4 <tcp_slowtmr+0x66c>)
 800c460:	f009 fa8c 	bl	801597c <iprintf>
        prev->next = pcb->next;
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	68da      	ldr	r2, [r3, #12]
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	60da      	str	r2, [r3, #12]
 800c46c:	e00f      	b.n	800c48e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c46e:	4b17      	ldr	r3, [pc, #92]	; (800c4cc <tcp_slowtmr+0x674>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c474:	429a      	cmp	r2, r3
 800c476:	d006      	beq.n	800c486 <tcp_slowtmr+0x62e>
 800c478:	4b10      	ldr	r3, [pc, #64]	; (800c4bc <tcp_slowtmr+0x664>)
 800c47a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c47e:	4915      	ldr	r1, [pc, #84]	; (800c4d4 <tcp_slowtmr+0x67c>)
 800c480:	4810      	ldr	r0, [pc, #64]	; (800c4c4 <tcp_slowtmr+0x66c>)
 800c482:	f009 fa7b 	bl	801597c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	4a10      	ldr	r2, [pc, #64]	; (800c4cc <tcp_slowtmr+0x674>)
 800c48c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c490:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c498:	69f8      	ldr	r0, [r7, #28]
 800c49a:	f7ff f93f 	bl	800b71c <tcp_free>
 800c49e:	e004      	b.n	800c4aa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1a9      	bne.n	800c404 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	3730      	adds	r7, #48	; 0x30
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	08017a70 	.word	0x08017a70
 800c4c0:	08017f00 	.word	0x08017f00
 800c4c4:	08017ab4 	.word	0x08017ab4
 800c4c8:	2000b028 	.word	0x2000b028
 800c4cc:	2000b038 	.word	0x2000b038
 800c4d0:	08017f30 	.word	0x08017f30
 800c4d4:	08017f58 	.word	0x08017f58

0800c4d8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c4de:	4b2d      	ldr	r3, [pc, #180]	; (800c594 <tcp_fasttmr+0xbc>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	4b2b      	ldr	r3, [pc, #172]	; (800c594 <tcp_fasttmr+0xbc>)
 800c4e8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c4ea:	4b2b      	ldr	r3, [pc, #172]	; (800c598 <tcp_fasttmr+0xc0>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c4f0:	e048      	b.n	800c584 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	7f9a      	ldrb	r2, [r3, #30]
 800c4f6:	4b27      	ldr	r3, [pc, #156]	; (800c594 <tcp_fasttmr+0xbc>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d03f      	beq.n	800c57e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c4fe:	4b25      	ldr	r3, [pc, #148]	; (800c594 <tcp_fasttmr+0xbc>)
 800c500:	781a      	ldrb	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	8b5b      	ldrh	r3, [r3, #26]
 800c50a:	f003 0301 	and.w	r3, r3, #1
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d010      	beq.n	800c534 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	8b5b      	ldrh	r3, [r3, #26]
 800c516:	f043 0302 	orr.w	r3, r3, #2
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f003 facf 	bl	800fac4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	8b5b      	ldrh	r3, [r3, #26]
 800c52a:	f023 0303 	bic.w	r3, r3, #3
 800c52e:	b29a      	uxth	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	8b5b      	ldrh	r3, [r3, #26]
 800c538:	f003 0308 	and.w	r3, r3, #8
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d009      	beq.n	800c554 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	8b5b      	ldrh	r3, [r3, #26]
 800c544:	f023 0308 	bic.w	r3, r3, #8
 800c548:	b29a      	uxth	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fa78 	bl	800ba44 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00a      	beq.n	800c578 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c562:	4b0e      	ldr	r3, [pc, #56]	; (800c59c <tcp_fasttmr+0xc4>)
 800c564:	2200      	movs	r2, #0
 800c566:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f819 	bl	800c5a0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c56e:	4b0b      	ldr	r3, [pc, #44]	; (800c59c <tcp_fasttmr+0xc4>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d000      	beq.n	800c578 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c576:	e7b8      	b.n	800c4ea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	607b      	str	r3, [r7, #4]
 800c57c:	e002      	b.n	800c584 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1b3      	bne.n	800c4f2 <tcp_fasttmr+0x1a>
    }
  }
}
 800c58a:	bf00      	nop
 800c58c:	bf00      	nop
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	2000b03e 	.word	0x2000b03e
 800c598:	2000b034 	.word	0x2000b034
 800c59c:	2000b03c 	.word	0x2000b03c

0800c5a0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d109      	bne.n	800c5c2 <tcp_process_refused_data+0x22>
 800c5ae:	4b37      	ldr	r3, [pc, #220]	; (800c68c <tcp_process_refused_data+0xec>)
 800c5b0:	f240 6209 	movw	r2, #1545	; 0x609
 800c5b4:	4936      	ldr	r1, [pc, #216]	; (800c690 <tcp_process_refused_data+0xf0>)
 800c5b6:	4837      	ldr	r0, [pc, #220]	; (800c694 <tcp_process_refused_data+0xf4>)
 800c5b8:	f009 f9e0 	bl	801597c <iprintf>
 800c5bc:	f06f 030f 	mvn.w	r3, #15
 800c5c0:	e060      	b.n	800c684 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5c6:	7b5b      	ldrb	r3, [r3, #13]
 800c5c8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5ce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00b      	beq.n	800c5f8 <tcp_process_refused_data+0x58>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6918      	ldr	r0, [r3, #16]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	47a0      	blx	r4
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]
 800c5f6:	e007      	b.n	800c608 <tcp_process_refused_data+0x68>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	6879      	ldr	r1, [r7, #4]
 800c5fe:	2000      	movs	r0, #0
 800c600:	f000 f8a4 	bl	800c74c <tcp_recv_null>
 800c604:	4603      	mov	r3, r0
 800c606:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d12a      	bne.n	800c666 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c610:	7bbb      	ldrb	r3, [r7, #14]
 800c612:	f003 0320 	and.w	r3, r3, #32
 800c616:	2b00      	cmp	r3, #0
 800c618:	d033      	beq.n	800c682 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c61e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c622:	d005      	beq.n	800c630 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c628:	3301      	adds	r3, #1
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00b      	beq.n	800c652 <tcp_process_refused_data+0xb2>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6918      	ldr	r0, [r3, #16]
 800c644:	2300      	movs	r3, #0
 800c646:	2200      	movs	r2, #0
 800c648:	6879      	ldr	r1, [r7, #4]
 800c64a:	47a0      	blx	r4
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]
 800c650:	e001      	b.n	800c656 <tcp_process_refused_data+0xb6>
 800c652:	2300      	movs	r3, #0
 800c654:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c65a:	f113 0f0d 	cmn.w	r3, #13
 800c65e:	d110      	bne.n	800c682 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c660:	f06f 030c 	mvn.w	r3, #12
 800c664:	e00e      	b.n	800c684 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c66a:	f113 0f0d 	cmn.w	r3, #13
 800c66e:	d102      	bne.n	800c676 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c670:	f06f 030c 	mvn.w	r3, #12
 800c674:	e006      	b.n	800c684 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c67c:	f06f 0304 	mvn.w	r3, #4
 800c680:	e000      	b.n	800c684 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd90      	pop	{r4, r7, pc}
 800c68c:	08017a70 	.word	0x08017a70
 800c690:	08017f80 	.word	0x08017f80
 800c694:	08017ab4 	.word	0x08017ab4

0800c698 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c6a0:	e007      	b.n	800c6b2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f80a 	bl	800c6c2 <tcp_seg_free>
    seg = next;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1f4      	bne.n	800c6a2 <tcp_segs_free+0xa>
  }
}
 800c6b8:	bf00      	nop
 800c6ba:	bf00      	nop
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b082      	sub	sp, #8
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00c      	beq.n	800c6ea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fe fd6d 	bl	800b1bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c6e2:	6879      	ldr	r1, [r7, #4]
 800c6e4:	2003      	movs	r0, #3
 800c6e6:	f7fd fee7 	bl	800a4b8 <memp_free>
  }
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <tcp_seg_copy+0x1c>
 800c702:	4b0f      	ldr	r3, [pc, #60]	; (800c740 <tcp_seg_copy+0x4c>)
 800c704:	f240 6282 	movw	r2, #1666	; 0x682
 800c708:	490e      	ldr	r1, [pc, #56]	; (800c744 <tcp_seg_copy+0x50>)
 800c70a:	480f      	ldr	r0, [pc, #60]	; (800c748 <tcp_seg_copy+0x54>)
 800c70c:	f009 f936 	bl	801597c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c710:	2003      	movs	r0, #3
 800c712:	f7fd fe61 	bl	800a3d8 <memp_malloc>
 800c716:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d101      	bne.n	800c722 <tcp_seg_copy+0x2e>
    return NULL;
 800c71e:	2300      	movs	r3, #0
 800c720:	e00a      	b.n	800c738 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c722:	2210      	movs	r2, #16
 800c724:	6879      	ldr	r1, [r7, #4]
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f009 f8f8 	bl	801591c <memcpy>
  pbuf_ref(cseg->p);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	4618      	mov	r0, r3
 800c732:	f7fe fde3 	bl	800b2fc <pbuf_ref>
  return cseg;
 800c736:	68fb      	ldr	r3, [r7, #12]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	08017a70 	.word	0x08017a70
 800c744:	08017fc4 	.word	0x08017fc4
 800c748:	08017ab4 	.word	0x08017ab4

0800c74c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
 800c758:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d109      	bne.n	800c774 <tcp_recv_null+0x28>
 800c760:	4b12      	ldr	r3, [pc, #72]	; (800c7ac <tcp_recv_null+0x60>)
 800c762:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c766:	4912      	ldr	r1, [pc, #72]	; (800c7b0 <tcp_recv_null+0x64>)
 800c768:	4812      	ldr	r0, [pc, #72]	; (800c7b4 <tcp_recv_null+0x68>)
 800c76a:	f009 f907 	bl	801597c <iprintf>
 800c76e:	f06f 030f 	mvn.w	r3, #15
 800c772:	e016      	b.n	800c7a2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d009      	beq.n	800c78e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	891b      	ldrh	r3, [r3, #8]
 800c77e:	4619      	mov	r1, r3
 800c780:	68b8      	ldr	r0, [r7, #8]
 800c782:	f7ff fb19 	bl	800bdb8 <tcp_recved>
    pbuf_free(p);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7fe fd18 	bl	800b1bc <pbuf_free>
 800c78c:	e008      	b.n	800c7a0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c78e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d104      	bne.n	800c7a0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c796:	68b8      	ldr	r0, [r7, #8]
 800c798:	f7ff f9be 	bl	800bb18 <tcp_close>
 800c79c:	4603      	mov	r3, r0
 800c79e:	e000      	b.n	800c7a2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	08017a70 	.word	0x08017a70
 800c7b0:	08017fe0 	.word	0x08017fe0
 800c7b4:	08017ab4 	.word	0x08017ab4

0800c7b8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	db01      	blt.n	800c7ce <tcp_kill_prio+0x16>
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	e000      	b.n	800c7d0 <tcp_kill_prio+0x18>
 800c7ce:	237f      	movs	r3, #127	; 0x7f
 800c7d0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c7d2:	7afb      	ldrb	r3, [r7, #11]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d034      	beq.n	800c842 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c7d8:	7afb      	ldrb	r3, [r7, #11]
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7e6:	4b19      	ldr	r3, [pc, #100]	; (800c84c <tcp_kill_prio+0x94>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	617b      	str	r3, [r7, #20]
 800c7ec:	e01f      	b.n	800c82e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	7d5b      	ldrb	r3, [r3, #21]
 800c7f2:	7afa      	ldrb	r2, [r7, #11]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d80c      	bhi.n	800c812 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c7fc:	7afa      	ldrb	r2, [r7, #11]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d112      	bne.n	800c828 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <tcp_kill_prio+0x98>)
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	6a1b      	ldr	r3, [r3, #32]
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d80a      	bhi.n	800c828 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c812:	4b0f      	ldr	r3, [pc, #60]	; (800c850 <tcp_kill_prio+0x98>)
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	7d5b      	ldrb	r3, [r3, #21]
 800c826:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	617b      	str	r3, [r7, #20]
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1dc      	bne.n	800c7ee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d004      	beq.n	800c844 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c83a:	6938      	ldr	r0, [r7, #16]
 800c83c:	f7ff fa56 	bl	800bcec <tcp_abort>
 800c840:	e000      	b.n	800c844 <tcp_kill_prio+0x8c>
    return;
 800c842:	bf00      	nop
  }
}
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	2000b034 	.word	0x2000b034
 800c850:	2000b028 	.word	0x2000b028

0800c854 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b086      	sub	sp, #24
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c85e:	79fb      	ldrb	r3, [r7, #7]
 800c860:	2b08      	cmp	r3, #8
 800c862:	d009      	beq.n	800c878 <tcp_kill_state+0x24>
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	2b09      	cmp	r3, #9
 800c868:	d006      	beq.n	800c878 <tcp_kill_state+0x24>
 800c86a:	4b1a      	ldr	r3, [pc, #104]	; (800c8d4 <tcp_kill_state+0x80>)
 800c86c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c870:	4919      	ldr	r1, [pc, #100]	; (800c8d8 <tcp_kill_state+0x84>)
 800c872:	481a      	ldr	r0, [pc, #104]	; (800c8dc <tcp_kill_state+0x88>)
 800c874:	f009 f882 	bl	801597c <iprintf>

  inactivity = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c87c:	2300      	movs	r3, #0
 800c87e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c880:	4b17      	ldr	r3, [pc, #92]	; (800c8e0 <tcp_kill_state+0x8c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	617b      	str	r3, [r7, #20]
 800c886:	e017      	b.n	800c8b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	7d1b      	ldrb	r3, [r3, #20]
 800c88c:	79fa      	ldrb	r2, [r7, #7]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d10f      	bne.n	800c8b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c892:	4b14      	ldr	r3, [pc, #80]	; (800c8e4 <tcp_kill_state+0x90>)
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d807      	bhi.n	800c8b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c8a2:	4b10      	ldr	r3, [pc, #64]	; (800c8e4 <tcp_kill_state+0x90>)
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1e4      	bne.n	800c888 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d003      	beq.n	800c8cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	6938      	ldr	r0, [r7, #16]
 800c8c8:	f7ff f952 	bl	800bb70 <tcp_abandon>
  }
}
 800c8cc:	bf00      	nop
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	08017a70 	.word	0x08017a70
 800c8d8:	08017ffc 	.word	0x08017ffc
 800c8dc:	08017ab4 	.word	0x08017ab4
 800c8e0:	2000b034 	.word	0x2000b034
 800c8e4:	2000b028 	.word	0x2000b028

0800c8e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8f6:	4b12      	ldr	r3, [pc, #72]	; (800c940 <tcp_kill_timewait+0x58>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	e012      	b.n	800c924 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c8fe:	4b11      	ldr	r3, [pc, #68]	; (800c944 <tcp_kill_timewait+0x5c>)
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d807      	bhi.n	800c91e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c90e:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <tcp_kill_timewait+0x5c>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	60fb      	str	r3, [r7, #12]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1e9      	bne.n	800c8fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c930:	68b8      	ldr	r0, [r7, #8]
 800c932:	f7ff f9db 	bl	800bcec <tcp_abort>
  }
}
 800c936:	bf00      	nop
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	2000b038 	.word	0x2000b038
 800c944:	2000b028 	.word	0x2000b028

0800c948 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c94e:	4b10      	ldr	r3, [pc, #64]	; (800c990 <tcp_handle_closepend+0x48>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c954:	e014      	b.n	800c980 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	8b5b      	ldrh	r3, [r3, #26]
 800c960:	f003 0308 	and.w	r3, r3, #8
 800c964:	2b00      	cmp	r3, #0
 800c966:	d009      	beq.n	800c97c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	8b5b      	ldrh	r3, [r3, #26]
 800c96c:	f023 0308 	bic.w	r3, r3, #8
 800c970:	b29a      	uxth	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7ff f864 	bl	800ba44 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e7      	bne.n	800c956 <tcp_handle_closepend+0xe>
  }
}
 800c986:	bf00      	nop
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	2000b034 	.word	0x2000b034

0800c994 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	4603      	mov	r3, r0
 800c99c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c99e:	2001      	movs	r0, #1
 800c9a0:	f7fd fd1a 	bl	800a3d8 <memp_malloc>
 800c9a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d126      	bne.n	800c9fa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c9ac:	f7ff ffcc 	bl	800c948 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c9b0:	f7ff ff9a 	bl	800c8e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9b4:	2001      	movs	r0, #1
 800c9b6:	f7fd fd0f 	bl	800a3d8 <memp_malloc>
 800c9ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d11b      	bne.n	800c9fa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c9c2:	2009      	movs	r0, #9
 800c9c4:	f7ff ff46 	bl	800c854 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9c8:	2001      	movs	r0, #1
 800c9ca:	f7fd fd05 	bl	800a3d8 <memp_malloc>
 800c9ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d111      	bne.n	800c9fa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c9d6:	2008      	movs	r0, #8
 800c9d8:	f7ff ff3c 	bl	800c854 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9dc:	2001      	movs	r0, #1
 800c9de:	f7fd fcfb 	bl	800a3d8 <memp_malloc>
 800c9e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d107      	bne.n	800c9fa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c9ea:	79fb      	ldrb	r3, [r7, #7]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff fee3 	bl	800c7b8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9f2:	2001      	movs	r0, #1
 800c9f4:	f7fd fcf0 	bl	800a3d8 <memp_malloc>
 800c9f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d03f      	beq.n	800ca80 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ca00:	229c      	movs	r2, #156	; 0x9c
 800ca02:	2100      	movs	r1, #0
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	f008 ffb1 	bl	801596c <memset>
    pcb->prio = prio;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	79fa      	ldrb	r2, [r7, #7]
 800ca0e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ca16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ca20:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	22ff      	movs	r2, #255	; 0xff
 800ca2e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ca36:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2206      	movs	r2, #6
 800ca3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2206      	movs	r2, #6
 800ca44:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca4c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ca56:	4b0d      	ldr	r3, [pc, #52]	; (800ca8c <tcp_alloc+0xf8>)
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ca5e:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <tcp_alloc+0xfc>)
 800ca60:	781a      	ldrb	r2, [r3, #0]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ca6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4a08      	ldr	r2, [pc, #32]	; (800ca94 <tcp_alloc+0x100>)
 800ca74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	4a07      	ldr	r2, [pc, #28]	; (800ca98 <tcp_alloc+0x104>)
 800ca7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ca80:	68fb      	ldr	r3, [r7, #12]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	2000b028 	.word	0x2000b028
 800ca90:	2000b03e 	.word	0x2000b03e
 800ca94:	0800c74d 	.word	0x0800c74d
 800ca98:	006ddd00 	.word	0x006ddd00

0800ca9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d107      	bne.n	800caba <tcp_pcb_purge+0x1e>
 800caaa:	4b21      	ldr	r3, [pc, #132]	; (800cb30 <tcp_pcb_purge+0x94>)
 800caac:	f640 0251 	movw	r2, #2129	; 0x851
 800cab0:	4920      	ldr	r1, [pc, #128]	; (800cb34 <tcp_pcb_purge+0x98>)
 800cab2:	4821      	ldr	r0, [pc, #132]	; (800cb38 <tcp_pcb_purge+0x9c>)
 800cab4:	f008 ff62 	bl	801597c <iprintf>
 800cab8:	e037      	b.n	800cb2a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	7d1b      	ldrb	r3, [r3, #20]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d033      	beq.n	800cb2a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cac6:	2b0a      	cmp	r3, #10
 800cac8:	d02f      	beq.n	800cb2a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d02b      	beq.n	800cb2a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d007      	beq.n	800caea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe fb6c 	bl	800b1bc <pbuf_free>
      pcb->refused_data = NULL;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f986 	bl	800ce04 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cafe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff fdc7 	bl	800c698 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7ff fdc2 	bl	800c698 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	66da      	str	r2, [r3, #108]	; 0x6c
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	08017a70 	.word	0x08017a70
 800cb34:	080180bc 	.word	0x080180bc
 800cb38:	08017ab4 	.word	0x08017ab4

0800cb3c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <tcp_pcb_remove+0x1e>
 800cb4c:	4b3e      	ldr	r3, [pc, #248]	; (800cc48 <tcp_pcb_remove+0x10c>)
 800cb4e:	f640 0283 	movw	r2, #2179	; 0x883
 800cb52:	493e      	ldr	r1, [pc, #248]	; (800cc4c <tcp_pcb_remove+0x110>)
 800cb54:	483e      	ldr	r0, [pc, #248]	; (800cc50 <tcp_pcb_remove+0x114>)
 800cb56:	f008 ff11 	bl	801597c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d106      	bne.n	800cb6e <tcp_pcb_remove+0x32>
 800cb60:	4b39      	ldr	r3, [pc, #228]	; (800cc48 <tcp_pcb_remove+0x10c>)
 800cb62:	f640 0284 	movw	r2, #2180	; 0x884
 800cb66:	493b      	ldr	r1, [pc, #236]	; (800cc54 <tcp_pcb_remove+0x118>)
 800cb68:	4839      	ldr	r0, [pc, #228]	; (800cc50 <tcp_pcb_remove+0x114>)
 800cb6a:	f008 ff07 	bl	801597c <iprintf>

  TCP_RMV(pcblist, pcb);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d105      	bne.n	800cb84 <tcp_pcb_remove+0x48>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68da      	ldr	r2, [r3, #12]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	e013      	b.n	800cbac <tcp_pcb_remove+0x70>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	e00c      	b.n	800cba6 <tcp_pcb_remove+0x6a>
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d104      	bne.n	800cba0 <tcp_pcb_remove+0x64>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	68da      	ldr	r2, [r3, #12]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	60da      	str	r2, [r3, #12]
 800cb9e:	e005      	b.n	800cbac <tcp_pcb_remove+0x70>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1ef      	bne.n	800cb8c <tcp_pcb_remove+0x50>
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cbb2:	6838      	ldr	r0, [r7, #0]
 800cbb4:	f7ff ff72 	bl	800ca9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	7d1b      	ldrb	r3, [r3, #20]
 800cbbc:	2b0a      	cmp	r3, #10
 800cbbe:	d013      	beq.n	800cbe8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d00f      	beq.n	800cbe8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	8b5b      	ldrh	r3, [r3, #26]
 800cbcc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d009      	beq.n	800cbe8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	8b5b      	ldrh	r3, [r3, #26]
 800cbd8:	f043 0302 	orr.w	r3, r3, #2
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cbe2:	6838      	ldr	r0, [r7, #0]
 800cbe4:	f002 ff6e 	bl	800fac4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	7d1b      	ldrb	r3, [r3, #20]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d020      	beq.n	800cc32 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d006      	beq.n	800cc06 <tcp_pcb_remove+0xca>
 800cbf8:	4b13      	ldr	r3, [pc, #76]	; (800cc48 <tcp_pcb_remove+0x10c>)
 800cbfa:	f640 0293 	movw	r2, #2195	; 0x893
 800cbfe:	4916      	ldr	r1, [pc, #88]	; (800cc58 <tcp_pcb_remove+0x11c>)
 800cc00:	4813      	ldr	r0, [pc, #76]	; (800cc50 <tcp_pcb_remove+0x114>)
 800cc02:	f008 febb 	bl	801597c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d006      	beq.n	800cc1c <tcp_pcb_remove+0xe0>
 800cc0e:	4b0e      	ldr	r3, [pc, #56]	; (800cc48 <tcp_pcb_remove+0x10c>)
 800cc10:	f640 0294 	movw	r2, #2196	; 0x894
 800cc14:	4911      	ldr	r1, [pc, #68]	; (800cc5c <tcp_pcb_remove+0x120>)
 800cc16:	480e      	ldr	r0, [pc, #56]	; (800cc50 <tcp_pcb_remove+0x114>)
 800cc18:	f008 feb0 	bl	801597c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d006      	beq.n	800cc32 <tcp_pcb_remove+0xf6>
 800cc24:	4b08      	ldr	r3, [pc, #32]	; (800cc48 <tcp_pcb_remove+0x10c>)
 800cc26:	f640 0296 	movw	r2, #2198	; 0x896
 800cc2a:	490d      	ldr	r1, [pc, #52]	; (800cc60 <tcp_pcb_remove+0x124>)
 800cc2c:	4808      	ldr	r0, [pc, #32]	; (800cc50 <tcp_pcb_remove+0x114>)
 800cc2e:	f008 fea5 	bl	801597c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2200      	movs	r2, #0
 800cc36:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cc3e:	bf00      	nop
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	08017a70 	.word	0x08017a70
 800cc4c:	080180d8 	.word	0x080180d8
 800cc50:	08017ab4 	.word	0x08017ab4
 800cc54:	080180f4 	.word	0x080180f4
 800cc58:	08018114 	.word	0x08018114
 800cc5c:	0801812c 	.word	0x0801812c
 800cc60:	08018148 	.word	0x08018148

0800cc64 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <tcp_next_iss+0x1c>
 800cc72:	4b0a      	ldr	r3, [pc, #40]	; (800cc9c <tcp_next_iss+0x38>)
 800cc74:	f640 02af 	movw	r2, #2223	; 0x8af
 800cc78:	4909      	ldr	r1, [pc, #36]	; (800cca0 <tcp_next_iss+0x3c>)
 800cc7a:	480a      	ldr	r0, [pc, #40]	; (800cca4 <tcp_next_iss+0x40>)
 800cc7c:	f008 fe7e 	bl	801597c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cc80:	4b09      	ldr	r3, [pc, #36]	; (800cca8 <tcp_next_iss+0x44>)
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	4b09      	ldr	r3, [pc, #36]	; (800ccac <tcp_next_iss+0x48>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4413      	add	r3, r2
 800cc8a:	4a07      	ldr	r2, [pc, #28]	; (800cca8 <tcp_next_iss+0x44>)
 800cc8c:	6013      	str	r3, [r2, #0]
  return iss;
 800cc8e:	4b06      	ldr	r3, [pc, #24]	; (800cca8 <tcp_next_iss+0x44>)
 800cc90:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	08017a70 	.word	0x08017a70
 800cca0:	08018160 	.word	0x08018160
 800cca4:	08017ab4 	.word	0x08017ab4
 800cca8:	20000058 	.word	0x20000058
 800ccac:	2000b028 	.word	0x2000b028

0800ccb0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
 800ccbc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d106      	bne.n	800ccd2 <tcp_eff_send_mss_netif+0x22>
 800ccc4:	4b14      	ldr	r3, [pc, #80]	; (800cd18 <tcp_eff_send_mss_netif+0x68>)
 800ccc6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ccca:	4914      	ldr	r1, [pc, #80]	; (800cd1c <tcp_eff_send_mss_netif+0x6c>)
 800cccc:	4814      	ldr	r0, [pc, #80]	; (800cd20 <tcp_eff_send_mss_netif+0x70>)
 800ccce:	f008 fe55 	bl	801597c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ccd8:	89fb      	ldrh	r3, [r7, #14]
 800ccda:	e019      	b.n	800cd10 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cce0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cce2:	8afb      	ldrh	r3, [r7, #22]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d012      	beq.n	800cd0e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cce8:	2328      	movs	r3, #40	; 0x28
 800ccea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ccec:	8afa      	ldrh	r2, [r7, #22]
 800ccee:	8abb      	ldrh	r3, [r7, #20]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d904      	bls.n	800ccfe <tcp_eff_send_mss_netif+0x4e>
 800ccf4:	8afa      	ldrh	r2, [r7, #22]
 800ccf6:	8abb      	ldrh	r3, [r7, #20]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	e000      	b.n	800cd00 <tcp_eff_send_mss_netif+0x50>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cd02:	8a7a      	ldrh	r2, [r7, #18]
 800cd04:	89fb      	ldrh	r3, [r7, #14]
 800cd06:	4293      	cmp	r3, r2
 800cd08:	bf28      	it	cs
 800cd0a:	4613      	movcs	r3, r2
 800cd0c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cd0e:	89fb      	ldrh	r3, [r7, #14]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3718      	adds	r7, #24
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	08017a70 	.word	0x08017a70
 800cd1c:	0801817c 	.word	0x0801817c
 800cd20:	08017ab4 	.word	0x08017ab4

0800cd24 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d119      	bne.n	800cd6c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cd38:	4b10      	ldr	r3, [pc, #64]	; (800cd7c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cd3a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cd3e:	4910      	ldr	r1, [pc, #64]	; (800cd80 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cd40:	4810      	ldr	r0, [pc, #64]	; (800cd84 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cd42:	f008 fe1b 	bl	801597c <iprintf>

  while (pcb != NULL) {
 800cd46:	e011      	b.n	800cd6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d108      	bne.n	800cd66 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	f7fe ffc6 	bl	800bcec <tcp_abort>
      pcb = next;
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e002      	b.n	800cd6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1ea      	bne.n	800cd48 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cd72:	bf00      	nop
 800cd74:	bf00      	nop
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	08017a70 	.word	0x08017a70
 800cd80:	080181a4 	.word	0x080181a4
 800cd84:	08017ab4 	.word	0x08017ab4

0800cd88 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d02a      	beq.n	800cdee <tcp_netif_ip_addr_changed+0x66>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d026      	beq.n	800cdee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cda0:	4b15      	ldr	r3, [pc, #84]	; (800cdf8 <tcp_netif_ip_addr_changed+0x70>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4619      	mov	r1, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7ff ffbc 	bl	800cd24 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cdac:	4b13      	ldr	r3, [pc, #76]	; (800cdfc <tcp_netif_ip_addr_changed+0x74>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7ff ffb6 	bl	800cd24 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d017      	beq.n	800cdee <tcp_netif_ip_addr_changed+0x66>
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d013      	beq.n	800cdee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cdc6:	4b0e      	ldr	r3, [pc, #56]	; (800ce00 <tcp_netif_ip_addr_changed+0x78>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	e00c      	b.n	800cde8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d103      	bne.n	800cde2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1ef      	bne.n	800cdce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cdee:	bf00      	nop
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	2000b034 	.word	0x2000b034
 800cdfc:	2000b02c 	.word	0x2000b02c
 800ce00:	2000b030 	.word	0x2000b030

0800ce04 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d007      	beq.n	800ce24 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff fc3d 	bl	800c698 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ce24:	bf00      	nop
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ce2c:	b590      	push	{r4, r7, lr}
 800ce2e:	b08d      	sub	sp, #52	; 0x34
 800ce30:	af04      	add	r7, sp, #16
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d105      	bne.n	800ce48 <tcp_input+0x1c>
 800ce3c:	4b9b      	ldr	r3, [pc, #620]	; (800d0ac <tcp_input+0x280>)
 800ce3e:	2283      	movs	r2, #131	; 0x83
 800ce40:	499b      	ldr	r1, [pc, #620]	; (800d0b0 <tcp_input+0x284>)
 800ce42:	489c      	ldr	r0, [pc, #624]	; (800d0b4 <tcp_input+0x288>)
 800ce44:	f008 fd9a 	bl	801597c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	4a9a      	ldr	r2, [pc, #616]	; (800d0b8 <tcp_input+0x28c>)
 800ce4e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	895b      	ldrh	r3, [r3, #10]
 800ce54:	2b13      	cmp	r3, #19
 800ce56:	f240 83d1 	bls.w	800d5fc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ce5a:	4b98      	ldr	r3, [pc, #608]	; (800d0bc <tcp_input+0x290>)
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	4a97      	ldr	r2, [pc, #604]	; (800d0bc <tcp_input+0x290>)
 800ce60:	6812      	ldr	r2, [r2, #0]
 800ce62:	4611      	mov	r1, r2
 800ce64:	4618      	mov	r0, r3
 800ce66:	f007 fdcf 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f040 83c7 	bne.w	800d600 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ce72:	4b92      	ldr	r3, [pc, #584]	; (800d0bc <tcp_input+0x290>)
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ce7a:	2be0      	cmp	r3, #224	; 0xe0
 800ce7c:	f000 83c0 	beq.w	800d600 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ce80:	4b8d      	ldr	r3, [pc, #564]	; (800d0b8 <tcp_input+0x28c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	899b      	ldrh	r3, [r3, #12]
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fc fe2d 	bl	8009ae8 <lwip_htons>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	0b1b      	lsrs	r3, r3, #12
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ce9a:	7cbb      	ldrb	r3, [r7, #18]
 800ce9c:	2b13      	cmp	r3, #19
 800ce9e:	f240 83b1 	bls.w	800d604 <tcp_input+0x7d8>
 800cea2:	7cbb      	ldrb	r3, [r7, #18]
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	891b      	ldrh	r3, [r3, #8]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	f200 83aa 	bhi.w	800d604 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ceb0:	7cbb      	ldrb	r3, [r7, #18]
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	3b14      	subs	r3, #20
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	4b81      	ldr	r3, [pc, #516]	; (800d0c0 <tcp_input+0x294>)
 800ceba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cebc:	4b81      	ldr	r3, [pc, #516]	; (800d0c4 <tcp_input+0x298>)
 800cebe:	2200      	movs	r2, #0
 800cec0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	895a      	ldrh	r2, [r3, #10]
 800cec6:	7cbb      	ldrb	r3, [r7, #18]
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d309      	bcc.n	800cee2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cece:	4b7c      	ldr	r3, [pc, #496]	; (800d0c0 <tcp_input+0x294>)
 800ced0:	881a      	ldrh	r2, [r3, #0]
 800ced2:	4b7d      	ldr	r3, [pc, #500]	; (800d0c8 <tcp_input+0x29c>)
 800ced4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ced6:	7cbb      	ldrb	r3, [r7, #18]
 800ced8:	4619      	mov	r1, r3
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7fe f8e8 	bl	800b0b0 <pbuf_remove_header>
 800cee0:	e04e      	b.n	800cf80 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d105      	bne.n	800cef6 <tcp_input+0xca>
 800ceea:	4b70      	ldr	r3, [pc, #448]	; (800d0ac <tcp_input+0x280>)
 800ceec:	22c2      	movs	r2, #194	; 0xc2
 800ceee:	4977      	ldr	r1, [pc, #476]	; (800d0cc <tcp_input+0x2a0>)
 800cef0:	4870      	ldr	r0, [pc, #448]	; (800d0b4 <tcp_input+0x288>)
 800cef2:	f008 fd43 	bl	801597c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cef6:	2114      	movs	r1, #20
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7fe f8d9 	bl	800b0b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	895a      	ldrh	r2, [r3, #10]
 800cf02:	4b71      	ldr	r3, [pc, #452]	; (800d0c8 <tcp_input+0x29c>)
 800cf04:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cf06:	4b6e      	ldr	r3, [pc, #440]	; (800d0c0 <tcp_input+0x294>)
 800cf08:	881a      	ldrh	r2, [r3, #0]
 800cf0a:	4b6f      	ldr	r3, [pc, #444]	; (800d0c8 <tcp_input+0x29c>)
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cf12:	4b6d      	ldr	r3, [pc, #436]	; (800d0c8 <tcp_input+0x29c>)
 800cf14:	881b      	ldrh	r3, [r3, #0]
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7fe f8c9 	bl	800b0b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	895b      	ldrh	r3, [r3, #10]
 800cf24:	8a3a      	ldrh	r2, [r7, #16]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	f200 836e 	bhi.w	800d608 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	4a64      	ldr	r2, [pc, #400]	; (800d0c4 <tcp_input+0x298>)
 800cf34:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	8a3a      	ldrh	r2, [r7, #16]
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fe f8b6 	bl	800b0b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	891a      	ldrh	r2, [r3, #8]
 800cf48:	8a3b      	ldrh	r3, [r7, #16]
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	895b      	ldrh	r3, [r3, #10]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d005      	beq.n	800cf66 <tcp_input+0x13a>
 800cf5a:	4b54      	ldr	r3, [pc, #336]	; (800d0ac <tcp_input+0x280>)
 800cf5c:	22df      	movs	r2, #223	; 0xdf
 800cf5e:	495c      	ldr	r1, [pc, #368]	; (800d0d0 <tcp_input+0x2a4>)
 800cf60:	4854      	ldr	r0, [pc, #336]	; (800d0b4 <tcp_input+0x288>)
 800cf62:	f008 fd0b 	bl	801597c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	891a      	ldrh	r2, [r3, #8]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	891b      	ldrh	r3, [r3, #8]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d005      	beq.n	800cf80 <tcp_input+0x154>
 800cf74:	4b4d      	ldr	r3, [pc, #308]	; (800d0ac <tcp_input+0x280>)
 800cf76:	22e0      	movs	r2, #224	; 0xe0
 800cf78:	4956      	ldr	r1, [pc, #344]	; (800d0d4 <tcp_input+0x2a8>)
 800cf7a:	484e      	ldr	r0, [pc, #312]	; (800d0b4 <tcp_input+0x288>)
 800cf7c:	f008 fcfe 	bl	801597c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cf80:	4b4d      	ldr	r3, [pc, #308]	; (800d0b8 <tcp_input+0x28c>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	4a4b      	ldr	r2, [pc, #300]	; (800d0b8 <tcp_input+0x28c>)
 800cf8a:	6814      	ldr	r4, [r2, #0]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fc fdab 	bl	8009ae8 <lwip_htons>
 800cf92:	4603      	mov	r3, r0
 800cf94:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cf96:	4b48      	ldr	r3, [pc, #288]	; (800d0b8 <tcp_input+0x28c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	885b      	ldrh	r3, [r3, #2]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	4a46      	ldr	r2, [pc, #280]	; (800d0b8 <tcp_input+0x28c>)
 800cfa0:	6814      	ldr	r4, [r2, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fc fda0 	bl	8009ae8 <lwip_htons>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cfac:	4b42      	ldr	r3, [pc, #264]	; (800d0b8 <tcp_input+0x28c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	4a41      	ldr	r2, [pc, #260]	; (800d0b8 <tcp_input+0x28c>)
 800cfb4:	6814      	ldr	r4, [r2, #0]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fc fdab 	bl	8009b12 <lwip_htonl>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	6063      	str	r3, [r4, #4]
 800cfc0:	6863      	ldr	r3, [r4, #4]
 800cfc2:	4a45      	ldr	r2, [pc, #276]	; (800d0d8 <tcp_input+0x2ac>)
 800cfc4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cfc6:	4b3c      	ldr	r3, [pc, #240]	; (800d0b8 <tcp_input+0x28c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	4a3a      	ldr	r2, [pc, #232]	; (800d0b8 <tcp_input+0x28c>)
 800cfce:	6814      	ldr	r4, [r2, #0]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fc fd9e 	bl	8009b12 <lwip_htonl>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	60a3      	str	r3, [r4, #8]
 800cfda:	68a3      	ldr	r3, [r4, #8]
 800cfdc:	4a3f      	ldr	r2, [pc, #252]	; (800d0dc <tcp_input+0x2b0>)
 800cfde:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cfe0:	4b35      	ldr	r3, [pc, #212]	; (800d0b8 <tcp_input+0x28c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	89db      	ldrh	r3, [r3, #14]
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	4a33      	ldr	r2, [pc, #204]	; (800d0b8 <tcp_input+0x28c>)
 800cfea:	6814      	ldr	r4, [r2, #0]
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fc fd7b 	bl	8009ae8 <lwip_htons>
 800cff2:	4603      	mov	r3, r0
 800cff4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cff6:	4b30      	ldr	r3, [pc, #192]	; (800d0b8 <tcp_input+0x28c>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	899b      	ldrh	r3, [r3, #12]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fc fd72 	bl	8009ae8 <lwip_htons>
 800d004:	4603      	mov	r3, r0
 800d006:	b2db      	uxtb	r3, r3
 800d008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	4b34      	ldr	r3, [pc, #208]	; (800d0e0 <tcp_input+0x2b4>)
 800d010:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	891a      	ldrh	r2, [r3, #8]
 800d016:	4b33      	ldr	r3, [pc, #204]	; (800d0e4 <tcp_input+0x2b8>)
 800d018:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d01a:	4b31      	ldr	r3, [pc, #196]	; (800d0e0 <tcp_input+0x2b4>)
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	f003 0303 	and.w	r3, r3, #3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00c      	beq.n	800d040 <tcp_input+0x214>
    tcplen++;
 800d026:	4b2f      	ldr	r3, [pc, #188]	; (800d0e4 <tcp_input+0x2b8>)
 800d028:	881b      	ldrh	r3, [r3, #0]
 800d02a:	3301      	adds	r3, #1
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	4b2d      	ldr	r3, [pc, #180]	; (800d0e4 <tcp_input+0x2b8>)
 800d030:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	891a      	ldrh	r2, [r3, #8]
 800d036:	4b2b      	ldr	r3, [pc, #172]	; (800d0e4 <tcp_input+0x2b8>)
 800d038:	881b      	ldrh	r3, [r3, #0]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	f200 82e6 	bhi.w	800d60c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d040:	2300      	movs	r3, #0
 800d042:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d044:	4b28      	ldr	r3, [pc, #160]	; (800d0e8 <tcp_input+0x2bc>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	61fb      	str	r3, [r7, #28]
 800d04a:	e09d      	b.n	800d188 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	7d1b      	ldrb	r3, [r3, #20]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d105      	bne.n	800d060 <tcp_input+0x234>
 800d054:	4b15      	ldr	r3, [pc, #84]	; (800d0ac <tcp_input+0x280>)
 800d056:	22fb      	movs	r2, #251	; 0xfb
 800d058:	4924      	ldr	r1, [pc, #144]	; (800d0ec <tcp_input+0x2c0>)
 800d05a:	4816      	ldr	r0, [pc, #88]	; (800d0b4 <tcp_input+0x288>)
 800d05c:	f008 fc8e 	bl	801597c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	7d1b      	ldrb	r3, [r3, #20]
 800d064:	2b0a      	cmp	r3, #10
 800d066:	d105      	bne.n	800d074 <tcp_input+0x248>
 800d068:	4b10      	ldr	r3, [pc, #64]	; (800d0ac <tcp_input+0x280>)
 800d06a:	22fc      	movs	r2, #252	; 0xfc
 800d06c:	4920      	ldr	r1, [pc, #128]	; (800d0f0 <tcp_input+0x2c4>)
 800d06e:	4811      	ldr	r0, [pc, #68]	; (800d0b4 <tcp_input+0x288>)
 800d070:	f008 fc84 	bl	801597c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	7d1b      	ldrb	r3, [r3, #20]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d105      	bne.n	800d088 <tcp_input+0x25c>
 800d07c:	4b0b      	ldr	r3, [pc, #44]	; (800d0ac <tcp_input+0x280>)
 800d07e:	22fd      	movs	r2, #253	; 0xfd
 800d080:	491c      	ldr	r1, [pc, #112]	; (800d0f4 <tcp_input+0x2c8>)
 800d082:	480c      	ldr	r0, [pc, #48]	; (800d0b4 <tcp_input+0x288>)
 800d084:	f008 fc7a 	bl	801597c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	7a1b      	ldrb	r3, [r3, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d033      	beq.n	800d0f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	7a1a      	ldrb	r2, [r3, #8]
 800d094:	4b09      	ldr	r3, [pc, #36]	; (800d0bc <tcp_input+0x290>)
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d09c:	3301      	adds	r3, #1
 800d09e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d029      	beq.n	800d0f8 <tcp_input+0x2cc>
      prev = pcb;
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	61bb      	str	r3, [r7, #24]
      continue;
 800d0a8:	e06b      	b.n	800d182 <tcp_input+0x356>
 800d0aa:	bf00      	nop
 800d0ac:	080181d8 	.word	0x080181d8
 800d0b0:	0801820c 	.word	0x0801820c
 800d0b4:	08018224 	.word	0x08018224
 800d0b8:	2000b050 	.word	0x2000b050
 800d0bc:	200058d8 	.word	0x200058d8
 800d0c0:	2000b054 	.word	0x2000b054
 800d0c4:	2000b058 	.word	0x2000b058
 800d0c8:	2000b056 	.word	0x2000b056
 800d0cc:	0801824c 	.word	0x0801824c
 800d0d0:	0801825c 	.word	0x0801825c
 800d0d4:	08018268 	.word	0x08018268
 800d0d8:	2000b060 	.word	0x2000b060
 800d0dc:	2000b064 	.word	0x2000b064
 800d0e0:	2000b06c 	.word	0x2000b06c
 800d0e4:	2000b06a 	.word	0x2000b06a
 800d0e8:	2000b034 	.word	0x2000b034
 800d0ec:	08018288 	.word	0x08018288
 800d0f0:	080182b0 	.word	0x080182b0
 800d0f4:	080182dc 	.word	0x080182dc
    }

    if (pcb->remote_port == tcphdr->src &&
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	8b1a      	ldrh	r2, [r3, #24]
 800d0fc:	4b72      	ldr	r3, [pc, #456]	; (800d2c8 <tcp_input+0x49c>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	881b      	ldrh	r3, [r3, #0]
 800d102:	b29b      	uxth	r3, r3
 800d104:	429a      	cmp	r2, r3
 800d106:	d13a      	bne.n	800d17e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	8ada      	ldrh	r2, [r3, #22]
 800d10c:	4b6e      	ldr	r3, [pc, #440]	; (800d2c8 <tcp_input+0x49c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	885b      	ldrh	r3, [r3, #2]
 800d112:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d114:	429a      	cmp	r2, r3
 800d116:	d132      	bne.n	800d17e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	4b6b      	ldr	r3, [pc, #428]	; (800d2cc <tcp_input+0x4a0>)
 800d11e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d120:	429a      	cmp	r2, r3
 800d122:	d12c      	bne.n	800d17e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	4b68      	ldr	r3, [pc, #416]	; (800d2cc <tcp_input+0x4a0>)
 800d12a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d126      	bne.n	800d17e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	69fa      	ldr	r2, [r7, #28]
 800d136:	429a      	cmp	r2, r3
 800d138:	d106      	bne.n	800d148 <tcp_input+0x31c>
 800d13a:	4b65      	ldr	r3, [pc, #404]	; (800d2d0 <tcp_input+0x4a4>)
 800d13c:	f240 120d 	movw	r2, #269	; 0x10d
 800d140:	4964      	ldr	r1, [pc, #400]	; (800d2d4 <tcp_input+0x4a8>)
 800d142:	4865      	ldr	r0, [pc, #404]	; (800d2d8 <tcp_input+0x4ac>)
 800d144:	f008 fc1a 	bl	801597c <iprintf>
      if (prev != NULL) {
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00a      	beq.n	800d164 <tcp_input+0x338>
        prev->next = pcb->next;
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	68da      	ldr	r2, [r3, #12]
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d156:	4b61      	ldr	r3, [pc, #388]	; (800d2dc <tcp_input+0x4b0>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d15e:	4a5f      	ldr	r2, [pc, #380]	; (800d2dc <tcp_input+0x4b0>)
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	69fa      	ldr	r2, [r7, #28]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d111      	bne.n	800d192 <tcp_input+0x366>
 800d16e:	4b58      	ldr	r3, [pc, #352]	; (800d2d0 <tcp_input+0x4a4>)
 800d170:	f240 1215 	movw	r2, #277	; 0x115
 800d174:	495a      	ldr	r1, [pc, #360]	; (800d2e0 <tcp_input+0x4b4>)
 800d176:	4858      	ldr	r0, [pc, #352]	; (800d2d8 <tcp_input+0x4ac>)
 800d178:	f008 fc00 	bl	801597c <iprintf>
      break;
 800d17c:	e009      	b.n	800d192 <tcp_input+0x366>
    }
    prev = pcb;
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	61fb      	str	r3, [r7, #28]
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f47f af5e 	bne.w	800d04c <tcp_input+0x220>
 800d190:	e000      	b.n	800d194 <tcp_input+0x368>
      break;
 800d192:	bf00      	nop
  }

  if (pcb == NULL) {
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	2b00      	cmp	r3, #0
 800d198:	f040 80aa 	bne.w	800d2f0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d19c:	4b51      	ldr	r3, [pc, #324]	; (800d2e4 <tcp_input+0x4b8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	61fb      	str	r3, [r7, #28]
 800d1a2:	e03f      	b.n	800d224 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	7d1b      	ldrb	r3, [r3, #20]
 800d1a8:	2b0a      	cmp	r3, #10
 800d1aa:	d006      	beq.n	800d1ba <tcp_input+0x38e>
 800d1ac:	4b48      	ldr	r3, [pc, #288]	; (800d2d0 <tcp_input+0x4a4>)
 800d1ae:	f240 121f 	movw	r2, #287	; 0x11f
 800d1b2:	494d      	ldr	r1, [pc, #308]	; (800d2e8 <tcp_input+0x4bc>)
 800d1b4:	4848      	ldr	r0, [pc, #288]	; (800d2d8 <tcp_input+0x4ac>)
 800d1b6:	f008 fbe1 	bl	801597c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	7a1b      	ldrb	r3, [r3, #8]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d009      	beq.n	800d1d6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	7a1a      	ldrb	r2, [r3, #8]
 800d1c6:	4b41      	ldr	r3, [pc, #260]	; (800d2cc <tcp_input+0x4a0>)
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d122      	bne.n	800d21c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	8b1a      	ldrh	r2, [r3, #24]
 800d1da:	4b3b      	ldr	r3, [pc, #236]	; (800d2c8 <tcp_input+0x49c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d11b      	bne.n	800d21e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	8ada      	ldrh	r2, [r3, #22]
 800d1ea:	4b37      	ldr	r3, [pc, #220]	; (800d2c8 <tcp_input+0x49c>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	885b      	ldrh	r3, [r3, #2]
 800d1f0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d113      	bne.n	800d21e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	685a      	ldr	r2, [r3, #4]
 800d1fa:	4b34      	ldr	r3, [pc, #208]	; (800d2cc <tcp_input+0x4a0>)
 800d1fc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d10d      	bne.n	800d21e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	4b31      	ldr	r3, [pc, #196]	; (800d2cc <tcp_input+0x4a0>)
 800d208:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d107      	bne.n	800d21e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d20e:	69f8      	ldr	r0, [r7, #28]
 800d210:	f000 fb56 	bl	800d8c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7fd ffd1 	bl	800b1bc <pbuf_free>
        return;
 800d21a:	e1fd      	b.n	800d618 <tcp_input+0x7ec>
        continue;
 800d21c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	61fb      	str	r3, [r7, #28]
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1bc      	bne.n	800d1a4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d22e:	4b2f      	ldr	r3, [pc, #188]	; (800d2ec <tcp_input+0x4c0>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	617b      	str	r3, [r7, #20]
 800d234:	e02a      	b.n	800d28c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	7a1b      	ldrb	r3, [r3, #8]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00c      	beq.n	800d258 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	7a1a      	ldrb	r2, [r3, #8]
 800d242:	4b22      	ldr	r3, [pc, #136]	; (800d2cc <tcp_input+0x4a0>)
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d24a:	3301      	adds	r3, #1
 800d24c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d24e:	429a      	cmp	r2, r3
 800d250:	d002      	beq.n	800d258 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	61bb      	str	r3, [r7, #24]
        continue;
 800d256:	e016      	b.n	800d286 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	8ada      	ldrh	r2, [r3, #22]
 800d25c:	4b1a      	ldr	r3, [pc, #104]	; (800d2c8 <tcp_input+0x49c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	885b      	ldrh	r3, [r3, #2]
 800d262:	b29b      	uxth	r3, r3
 800d264:	429a      	cmp	r2, r3
 800d266:	d10c      	bne.n	800d282 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	4b17      	ldr	r3, [pc, #92]	; (800d2cc <tcp_input+0x4a0>)
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	429a      	cmp	r2, r3
 800d272:	d00f      	beq.n	800d294 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00d      	beq.n	800d296 <tcp_input+0x46a>
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d009      	beq.n	800d296 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	617b      	str	r3, [r7, #20]
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1d1      	bne.n	800d236 <tcp_input+0x40a>
 800d292:	e000      	b.n	800d296 <tcp_input+0x46a>
            break;
 800d294:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d029      	beq.n	800d2f0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00a      	beq.n	800d2b8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	68da      	ldr	r2, [r3, #12]
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d2aa:	4b10      	ldr	r3, [pc, #64]	; (800d2ec <tcp_input+0x4c0>)
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d2b2:	4a0e      	ldr	r2, [pc, #56]	; (800d2ec <tcp_input+0x4c0>)
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d2b8:	6978      	ldr	r0, [r7, #20]
 800d2ba:	f000 fa03 	bl	800d6c4 <tcp_listen_input>
      }
      pbuf_free(p);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7fd ff7c 	bl	800b1bc <pbuf_free>
      return;
 800d2c4:	e1a8      	b.n	800d618 <tcp_input+0x7ec>
 800d2c6:	bf00      	nop
 800d2c8:	2000b050 	.word	0x2000b050
 800d2cc:	200058d8 	.word	0x200058d8
 800d2d0:	080181d8 	.word	0x080181d8
 800d2d4:	08018304 	.word	0x08018304
 800d2d8:	08018224 	.word	0x08018224
 800d2dc:	2000b034 	.word	0x2000b034
 800d2e0:	08018330 	.word	0x08018330
 800d2e4:	2000b038 	.word	0x2000b038
 800d2e8:	0801835c 	.word	0x0801835c
 800d2ec:	2000b030 	.word	0x2000b030
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 8158 	beq.w	800d5a8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d2f8:	4b95      	ldr	r3, [pc, #596]	; (800d550 <tcp_input+0x724>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	891a      	ldrh	r2, [r3, #8]
 800d302:	4b93      	ldr	r3, [pc, #588]	; (800d550 <tcp_input+0x724>)
 800d304:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d306:	4a92      	ldr	r2, [pc, #584]	; (800d550 <tcp_input+0x724>)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d30c:	4b91      	ldr	r3, [pc, #580]	; (800d554 <tcp_input+0x728>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a8f      	ldr	r2, [pc, #572]	; (800d550 <tcp_input+0x724>)
 800d312:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d314:	4b90      	ldr	r3, [pc, #576]	; (800d558 <tcp_input+0x72c>)
 800d316:	2200      	movs	r2, #0
 800d318:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d31a:	4b90      	ldr	r3, [pc, #576]	; (800d55c <tcp_input+0x730>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d320:	4b8f      	ldr	r3, [pc, #572]	; (800d560 <tcp_input+0x734>)
 800d322:	2200      	movs	r2, #0
 800d324:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d326:	4b8f      	ldr	r3, [pc, #572]	; (800d564 <tcp_input+0x738>)
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	f003 0308 	and.w	r3, r3, #8
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d006      	beq.n	800d340 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	7b5b      	ldrb	r3, [r3, #13]
 800d336:	f043 0301 	orr.w	r3, r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d344:	2b00      	cmp	r3, #0
 800d346:	d017      	beq.n	800d378 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d348:	69f8      	ldr	r0, [r7, #28]
 800d34a:	f7ff f929 	bl	800c5a0 <tcp_process_refused_data>
 800d34e:	4603      	mov	r3, r0
 800d350:	f113 0f0d 	cmn.w	r3, #13
 800d354:	d007      	beq.n	800d366 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00c      	beq.n	800d378 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d35e:	4b82      	ldr	r3, [pc, #520]	; (800d568 <tcp_input+0x73c>)
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d008      	beq.n	800d378 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f040 80e3 	bne.w	800d536 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d370:	69f8      	ldr	r0, [r7, #28]
 800d372:	f003 f9ad 	bl	80106d0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d376:	e0de      	b.n	800d536 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d378:	4a7c      	ldr	r2, [pc, #496]	; (800d56c <tcp_input+0x740>)
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d37e:	69f8      	ldr	r0, [r7, #28]
 800d380:	f000 fb18 	bl	800d9b4 <tcp_process>
 800d384:	4603      	mov	r3, r0
 800d386:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d38c:	f113 0f0d 	cmn.w	r3, #13
 800d390:	f000 80d3 	beq.w	800d53a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d394:	4b71      	ldr	r3, [pc, #452]	; (800d55c <tcp_input+0x730>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	f003 0308 	and.w	r3, r3, #8
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d015      	beq.n	800d3cc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d008      	beq.n	800d3bc <tcp_input+0x590>
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3b0:	69fa      	ldr	r2, [r7, #28]
 800d3b2:	6912      	ldr	r2, [r2, #16]
 800d3b4:	f06f 010d 	mvn.w	r1, #13
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d3bc:	69f9      	ldr	r1, [r7, #28]
 800d3be:	486c      	ldr	r0, [pc, #432]	; (800d570 <tcp_input+0x744>)
 800d3c0:	f7ff fbbc 	bl	800cb3c <tcp_pcb_remove>
        tcp_free(pcb);
 800d3c4:	69f8      	ldr	r0, [r7, #28]
 800d3c6:	f7fe f9a9 	bl	800b71c <tcp_free>
 800d3ca:	e0da      	b.n	800d582 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d3d0:	4b63      	ldr	r3, [pc, #396]	; (800d560 <tcp_input+0x734>)
 800d3d2:	881b      	ldrh	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d01d      	beq.n	800d414 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d3d8:	4b61      	ldr	r3, [pc, #388]	; (800d560 <tcp_input+0x734>)
 800d3da:	881b      	ldrh	r3, [r3, #0]
 800d3dc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00a      	beq.n	800d3fe <tcp_input+0x5d2>
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3ee:	69fa      	ldr	r2, [r7, #28]
 800d3f0:	6910      	ldr	r0, [r2, #16]
 800d3f2:	89fa      	ldrh	r2, [r7, #14]
 800d3f4:	69f9      	ldr	r1, [r7, #28]
 800d3f6:	4798      	blx	r3
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	74fb      	strb	r3, [r7, #19]
 800d3fc:	e001      	b.n	800d402 <tcp_input+0x5d6>
 800d3fe:	2300      	movs	r3, #0
 800d400:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d402:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d406:	f113 0f0d 	cmn.w	r3, #13
 800d40a:	f000 8098 	beq.w	800d53e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d40e:	4b54      	ldr	r3, [pc, #336]	; (800d560 <tcp_input+0x734>)
 800d410:	2200      	movs	r2, #0
 800d412:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d414:	69f8      	ldr	r0, [r7, #28]
 800d416:	f000 f915 	bl	800d644 <tcp_input_delayed_close>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f040 8090 	bne.w	800d542 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d422:	4b4d      	ldr	r3, [pc, #308]	; (800d558 <tcp_input+0x72c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d041      	beq.n	800d4ae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d006      	beq.n	800d440 <tcp_input+0x614>
 800d432:	4b50      	ldr	r3, [pc, #320]	; (800d574 <tcp_input+0x748>)
 800d434:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d438:	494f      	ldr	r1, [pc, #316]	; (800d578 <tcp_input+0x74c>)
 800d43a:	4850      	ldr	r0, [pc, #320]	; (800d57c <tcp_input+0x750>)
 800d43c:	f008 fa9e 	bl	801597c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	8b5b      	ldrh	r3, [r3, #26]
 800d444:	f003 0310 	and.w	r3, r3, #16
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d008      	beq.n	800d45e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d44c:	4b42      	ldr	r3, [pc, #264]	; (800d558 <tcp_input+0x72c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4618      	mov	r0, r3
 800d452:	f7fd feb3 	bl	800b1bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d456:	69f8      	ldr	r0, [r7, #28]
 800d458:	f7fe fc48 	bl	800bcec <tcp_abort>
            goto aborted;
 800d45c:	e091      	b.n	800d582 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00c      	beq.n	800d482 <tcp_input+0x656>
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	6918      	ldr	r0, [r3, #16]
 800d472:	4b39      	ldr	r3, [pc, #228]	; (800d558 <tcp_input+0x72c>)
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	2300      	movs	r3, #0
 800d478:	69f9      	ldr	r1, [r7, #28]
 800d47a:	47a0      	blx	r4
 800d47c:	4603      	mov	r3, r0
 800d47e:	74fb      	strb	r3, [r7, #19]
 800d480:	e008      	b.n	800d494 <tcp_input+0x668>
 800d482:	4b35      	ldr	r3, [pc, #212]	; (800d558 <tcp_input+0x72c>)
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	2300      	movs	r3, #0
 800d488:	69f9      	ldr	r1, [r7, #28]
 800d48a:	2000      	movs	r0, #0
 800d48c:	f7ff f95e 	bl	800c74c <tcp_recv_null>
 800d490:	4603      	mov	r3, r0
 800d492:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d494:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d498:	f113 0f0d 	cmn.w	r3, #13
 800d49c:	d053      	beq.n	800d546 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d49e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d003      	beq.n	800d4ae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d4a6:	4b2c      	ldr	r3, [pc, #176]	; (800d558 <tcp_input+0x72c>)
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d4ae:	4b2b      	ldr	r3, [pc, #172]	; (800d55c <tcp_input+0x730>)
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	f003 0320 	and.w	r3, r3, #32
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d030      	beq.n	800d51c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d009      	beq.n	800d4d6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4c6:	7b5a      	ldrb	r2, [r3, #13]
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4cc:	f042 0220 	orr.w	r2, r2, #32
 800d4d0:	b2d2      	uxtb	r2, r2
 800d4d2:	735a      	strb	r2, [r3, #13]
 800d4d4:	e022      	b.n	800d51c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d4de:	d005      	beq.n	800d4ec <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00b      	beq.n	800d50e <tcp_input+0x6e2>
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	6918      	ldr	r0, [r3, #16]
 800d500:	2300      	movs	r3, #0
 800d502:	2200      	movs	r2, #0
 800d504:	69f9      	ldr	r1, [r7, #28]
 800d506:	47a0      	blx	r4
 800d508:	4603      	mov	r3, r0
 800d50a:	74fb      	strb	r3, [r7, #19]
 800d50c:	e001      	b.n	800d512 <tcp_input+0x6e6>
 800d50e:	2300      	movs	r3, #0
 800d510:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d512:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d516:	f113 0f0d 	cmn.w	r3, #13
 800d51a:	d016      	beq.n	800d54a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d51c:	4b13      	ldr	r3, [pc, #76]	; (800d56c <tcp_input+0x740>)
 800d51e:	2200      	movs	r2, #0
 800d520:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d522:	69f8      	ldr	r0, [r7, #28]
 800d524:	f000 f88e 	bl	800d644 <tcp_input_delayed_close>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d128      	bne.n	800d580 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d52e:	69f8      	ldr	r0, [r7, #28]
 800d530:	f002 fac8 	bl	800fac4 <tcp_output>
 800d534:	e025      	b.n	800d582 <tcp_input+0x756>
        goto aborted;
 800d536:	bf00      	nop
 800d538:	e023      	b.n	800d582 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d53a:	bf00      	nop
 800d53c:	e021      	b.n	800d582 <tcp_input+0x756>
              goto aborted;
 800d53e:	bf00      	nop
 800d540:	e01f      	b.n	800d582 <tcp_input+0x756>
          goto aborted;
 800d542:	bf00      	nop
 800d544:	e01d      	b.n	800d582 <tcp_input+0x756>
            goto aborted;
 800d546:	bf00      	nop
 800d548:	e01b      	b.n	800d582 <tcp_input+0x756>
              goto aborted;
 800d54a:	bf00      	nop
 800d54c:	e019      	b.n	800d582 <tcp_input+0x756>
 800d54e:	bf00      	nop
 800d550:	2000b040 	.word	0x2000b040
 800d554:	2000b050 	.word	0x2000b050
 800d558:	2000b070 	.word	0x2000b070
 800d55c:	2000b06d 	.word	0x2000b06d
 800d560:	2000b068 	.word	0x2000b068
 800d564:	2000b06c 	.word	0x2000b06c
 800d568:	2000b06a 	.word	0x2000b06a
 800d56c:	2000b074 	.word	0x2000b074
 800d570:	2000b034 	.word	0x2000b034
 800d574:	080181d8 	.word	0x080181d8
 800d578:	0801838c 	.word	0x0801838c
 800d57c:	08018224 	.word	0x08018224
          goto aborted;
 800d580:	bf00      	nop
    tcp_input_pcb = NULL;
 800d582:	4b27      	ldr	r3, [pc, #156]	; (800d620 <tcp_input+0x7f4>)
 800d584:	2200      	movs	r2, #0
 800d586:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d588:	4b26      	ldr	r3, [pc, #152]	; (800d624 <tcp_input+0x7f8>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d58e:	4b26      	ldr	r3, [pc, #152]	; (800d628 <tcp_input+0x7fc>)
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d03f      	beq.n	800d616 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d596:	4b24      	ldr	r3, [pc, #144]	; (800d628 <tcp_input+0x7fc>)
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fd fe0e 	bl	800b1bc <pbuf_free>
      inseg.p = NULL;
 800d5a0:	4b21      	ldr	r3, [pc, #132]	; (800d628 <tcp_input+0x7fc>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d5a6:	e036      	b.n	800d616 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d5a8:	4b20      	ldr	r3, [pc, #128]	; (800d62c <tcp_input+0x800>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	899b      	ldrh	r3, [r3, #12]
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7fc fa99 	bl	8009ae8 <lwip_htons>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	f003 0304 	and.w	r3, r3, #4
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d118      	bne.n	800d5f4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5c2:	4b1b      	ldr	r3, [pc, #108]	; (800d630 <tcp_input+0x804>)
 800d5c4:	6819      	ldr	r1, [r3, #0]
 800d5c6:	4b1b      	ldr	r3, [pc, #108]	; (800d634 <tcp_input+0x808>)
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	4b1a      	ldr	r3, [pc, #104]	; (800d638 <tcp_input+0x80c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5d2:	4b16      	ldr	r3, [pc, #88]	; (800d62c <tcp_input+0x800>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5d6:	885b      	ldrh	r3, [r3, #2]
 800d5d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5da:	4a14      	ldr	r2, [pc, #80]	; (800d62c <tcp_input+0x800>)
 800d5dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5de:	8812      	ldrh	r2, [r2, #0]
 800d5e0:	b292      	uxth	r2, r2
 800d5e2:	9202      	str	r2, [sp, #8]
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	4b15      	ldr	r3, [pc, #84]	; (800d63c <tcp_input+0x810>)
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	4b15      	ldr	r3, [pc, #84]	; (800d640 <tcp_input+0x814>)
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	f003 f81c 	bl	801062c <tcp_rst>
    pbuf_free(p);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7fd fde1 	bl	800b1bc <pbuf_free>
  return;
 800d5fa:	e00c      	b.n	800d616 <tcp_input+0x7ea>
    goto dropped;
 800d5fc:	bf00      	nop
 800d5fe:	e006      	b.n	800d60e <tcp_input+0x7e2>
    goto dropped;
 800d600:	bf00      	nop
 800d602:	e004      	b.n	800d60e <tcp_input+0x7e2>
    goto dropped;
 800d604:	bf00      	nop
 800d606:	e002      	b.n	800d60e <tcp_input+0x7e2>
      goto dropped;
 800d608:	bf00      	nop
 800d60a:	e000      	b.n	800d60e <tcp_input+0x7e2>
      goto dropped;
 800d60c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7fd fdd4 	bl	800b1bc <pbuf_free>
 800d614:	e000      	b.n	800d618 <tcp_input+0x7ec>
  return;
 800d616:	bf00      	nop
}
 800d618:	3724      	adds	r7, #36	; 0x24
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd90      	pop	{r4, r7, pc}
 800d61e:	bf00      	nop
 800d620:	2000b074 	.word	0x2000b074
 800d624:	2000b070 	.word	0x2000b070
 800d628:	2000b040 	.word	0x2000b040
 800d62c:	2000b050 	.word	0x2000b050
 800d630:	2000b064 	.word	0x2000b064
 800d634:	2000b06a 	.word	0x2000b06a
 800d638:	2000b060 	.word	0x2000b060
 800d63c:	200058e8 	.word	0x200058e8
 800d640:	200058ec 	.word	0x200058ec

0800d644 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d106      	bne.n	800d660 <tcp_input_delayed_close+0x1c>
 800d652:	4b17      	ldr	r3, [pc, #92]	; (800d6b0 <tcp_input_delayed_close+0x6c>)
 800d654:	f240 225a 	movw	r2, #602	; 0x25a
 800d658:	4916      	ldr	r1, [pc, #88]	; (800d6b4 <tcp_input_delayed_close+0x70>)
 800d65a:	4817      	ldr	r0, [pc, #92]	; (800d6b8 <tcp_input_delayed_close+0x74>)
 800d65c:	f008 f98e 	bl	801597c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d660:	4b16      	ldr	r3, [pc, #88]	; (800d6bc <tcp_input_delayed_close+0x78>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	f003 0310 	and.w	r3, r3, #16
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d01c      	beq.n	800d6a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	8b5b      	ldrh	r3, [r3, #26]
 800d670:	f003 0310 	and.w	r3, r3, #16
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10d      	bne.n	800d694 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d008      	beq.n	800d694 <tcp_input_delayed_close+0x50>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	6912      	ldr	r2, [r2, #16]
 800d68c:	f06f 010e 	mvn.w	r1, #14
 800d690:	4610      	mov	r0, r2
 800d692:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	480a      	ldr	r0, [pc, #40]	; (800d6c0 <tcp_input_delayed_close+0x7c>)
 800d698:	f7ff fa50 	bl	800cb3c <tcp_pcb_remove>
    tcp_free(pcb);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7fe f83d 	bl	800b71c <tcp_free>
    return 1;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e000      	b.n	800d6a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3708      	adds	r7, #8
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	080181d8 	.word	0x080181d8
 800d6b4:	080183a8 	.word	0x080183a8
 800d6b8:	08018224 	.word	0x08018224
 800d6bc:	2000b06d 	.word	0x2000b06d
 800d6c0:	2000b034 	.word	0x2000b034

0800d6c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d6c4:	b590      	push	{r4, r7, lr}
 800d6c6:	b08b      	sub	sp, #44	; 0x2c
 800d6c8:	af04      	add	r7, sp, #16
 800d6ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d6cc:	4b6f      	ldr	r3, [pc, #444]	; (800d88c <tcp_listen_input+0x1c8>)
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	f003 0304 	and.w	r3, r3, #4
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f040 80d2 	bne.w	800d87e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d106      	bne.n	800d6ee <tcp_listen_input+0x2a>
 800d6e0:	4b6b      	ldr	r3, [pc, #428]	; (800d890 <tcp_listen_input+0x1cc>)
 800d6e2:	f240 2281 	movw	r2, #641	; 0x281
 800d6e6:	496b      	ldr	r1, [pc, #428]	; (800d894 <tcp_listen_input+0x1d0>)
 800d6e8:	486b      	ldr	r0, [pc, #428]	; (800d898 <tcp_listen_input+0x1d4>)
 800d6ea:	f008 f947 	bl	801597c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d6ee:	4b67      	ldr	r3, [pc, #412]	; (800d88c <tcp_listen_input+0x1c8>)
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	f003 0310 	and.w	r3, r3, #16
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d019      	beq.n	800d72e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6fa:	4b68      	ldr	r3, [pc, #416]	; (800d89c <tcp_listen_input+0x1d8>)
 800d6fc:	6819      	ldr	r1, [r3, #0]
 800d6fe:	4b68      	ldr	r3, [pc, #416]	; (800d8a0 <tcp_listen_input+0x1dc>)
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	461a      	mov	r2, r3
 800d704:	4b67      	ldr	r3, [pc, #412]	; (800d8a4 <tcp_listen_input+0x1e0>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d70a:	4b67      	ldr	r3, [pc, #412]	; (800d8a8 <tcp_listen_input+0x1e4>)
 800d70c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d70e:	885b      	ldrh	r3, [r3, #2]
 800d710:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d712:	4a65      	ldr	r2, [pc, #404]	; (800d8a8 <tcp_listen_input+0x1e4>)
 800d714:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d716:	8812      	ldrh	r2, [r2, #0]
 800d718:	b292      	uxth	r2, r2
 800d71a:	9202      	str	r2, [sp, #8]
 800d71c:	9301      	str	r3, [sp, #4]
 800d71e:	4b63      	ldr	r3, [pc, #396]	; (800d8ac <tcp_listen_input+0x1e8>)
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	4b63      	ldr	r3, [pc, #396]	; (800d8b0 <tcp_listen_input+0x1ec>)
 800d724:	4602      	mov	r2, r0
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f002 ff80 	bl	801062c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d72c:	e0a9      	b.n	800d882 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d72e:	4b57      	ldr	r3, [pc, #348]	; (800d88c <tcp_listen_input+0x1c8>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	f003 0302 	and.w	r3, r3, #2
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 80a3 	beq.w	800d882 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	7d5b      	ldrb	r3, [r3, #21]
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff f927 	bl	800c994 <tcp_alloc>
 800d746:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d111      	bne.n	800d772 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00a      	beq.n	800d76c <tcp_listen_input+0xa8>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	699b      	ldr	r3, [r3, #24]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	6910      	ldr	r0, [r2, #16]
 800d75e:	f04f 32ff 	mov.w	r2, #4294967295
 800d762:	2100      	movs	r1, #0
 800d764:	4798      	blx	r3
 800d766:	4603      	mov	r3, r0
 800d768:	73bb      	strb	r3, [r7, #14]
      return;
 800d76a:	e08b      	b.n	800d884 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d76c:	23f0      	movs	r3, #240	; 0xf0
 800d76e:	73bb      	strb	r3, [r7, #14]
      return;
 800d770:	e088      	b.n	800d884 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d772:	4b50      	ldr	r3, [pc, #320]	; (800d8b4 <tcp_listen_input+0x1f0>)
 800d774:	695a      	ldr	r2, [r3, #20]
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d77a:	4b4e      	ldr	r3, [pc, #312]	; (800d8b4 <tcp_listen_input+0x1f0>)
 800d77c:	691a      	ldr	r2, [r3, #16]
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	8ada      	ldrh	r2, [r3, #22]
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d78a:	4b47      	ldr	r3, [pc, #284]	; (800d8a8 <tcp_listen_input+0x1e4>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	b29a      	uxth	r2, r3
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2203      	movs	r2, #3
 800d79a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d79c:	4b41      	ldr	r3, [pc, #260]	; (800d8a4 <tcp_listen_input+0x1e0>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	1c5a      	adds	r2, r3, #1
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d7ae:	6978      	ldr	r0, [r7, #20]
 800d7b0:	f7ff fa58 	bl	800cc64 <tcp_next_iss>
 800d7b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	693a      	ldr	r2, [r7, #16]
 800d7c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	693a      	ldr	r2, [r7, #16]
 800d7cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d7ce:	4b35      	ldr	r3, [pc, #212]	; (800d8a4 <tcp_listen_input+0x1e0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	1e5a      	subs	r2, r3, #1
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	691a      	ldr	r2, [r3, #16]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	7a5b      	ldrb	r3, [r3, #9]
 800d7ea:	f003 030c 	and.w	r3, r3, #12
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	7a1a      	ldrb	r2, [r3, #8]
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d7fc:	4b2e      	ldr	r3, [pc, #184]	; (800d8b8 <tcp_listen_input+0x1f4>)
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	60da      	str	r2, [r3, #12]
 800d804:	4a2c      	ldr	r2, [pc, #176]	; (800d8b8 <tcp_listen_input+0x1f4>)
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	6013      	str	r3, [r2, #0]
 800d80a:	f003 f8d1 	bl	80109b0 <tcp_timer_needed>
 800d80e:	4b2b      	ldr	r3, [pc, #172]	; (800d8bc <tcp_listen_input+0x1f8>)
 800d810:	2201      	movs	r2, #1
 800d812:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d814:	6978      	ldr	r0, [r7, #20]
 800d816:	f001 fd8f 	bl	800f338 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d81a:	4b23      	ldr	r3, [pc, #140]	; (800d8a8 <tcp_listen_input+0x1e4>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	89db      	ldrh	r3, [r3, #14]
 800d820:	b29a      	uxth	r2, r3
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	3304      	adds	r3, #4
 800d83c:	4618      	mov	r0, r3
 800d83e:	f006 fe2f 	bl	80144a0 <ip4_route>
 800d842:	4601      	mov	r1, r0
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	3304      	adds	r3, #4
 800d848:	461a      	mov	r2, r3
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7ff fa30 	bl	800ccb0 <tcp_eff_send_mss_netif>
 800d850:	4603      	mov	r3, r0
 800d852:	461a      	mov	r2, r3
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d858:	2112      	movs	r1, #18
 800d85a:	6978      	ldr	r0, [r7, #20]
 800d85c:	f002 f844 	bl	800f8e8 <tcp_enqueue_flags>
 800d860:	4603      	mov	r3, r0
 800d862:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d004      	beq.n	800d876 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d86c:	2100      	movs	r1, #0
 800d86e:	6978      	ldr	r0, [r7, #20]
 800d870:	f7fe f97e 	bl	800bb70 <tcp_abandon>
      return;
 800d874:	e006      	b.n	800d884 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d876:	6978      	ldr	r0, [r7, #20]
 800d878:	f002 f924 	bl	800fac4 <tcp_output>
  return;
 800d87c:	e001      	b.n	800d882 <tcp_listen_input+0x1be>
    return;
 800d87e:	bf00      	nop
 800d880:	e000      	b.n	800d884 <tcp_listen_input+0x1c0>
  return;
 800d882:	bf00      	nop
}
 800d884:	371c      	adds	r7, #28
 800d886:	46bd      	mov	sp, r7
 800d888:	bd90      	pop	{r4, r7, pc}
 800d88a:	bf00      	nop
 800d88c:	2000b06c 	.word	0x2000b06c
 800d890:	080181d8 	.word	0x080181d8
 800d894:	080183d0 	.word	0x080183d0
 800d898:	08018224 	.word	0x08018224
 800d89c:	2000b064 	.word	0x2000b064
 800d8a0:	2000b06a 	.word	0x2000b06a
 800d8a4:	2000b060 	.word	0x2000b060
 800d8a8:	2000b050 	.word	0x2000b050
 800d8ac:	200058e8 	.word	0x200058e8
 800d8b0:	200058ec 	.word	0x200058ec
 800d8b4:	200058d8 	.word	0x200058d8
 800d8b8:	2000b034 	.word	0x2000b034
 800d8bc:	2000b03c 	.word	0x2000b03c

0800d8c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af04      	add	r7, sp, #16
 800d8c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d8c8:	4b2f      	ldr	r3, [pc, #188]	; (800d988 <tcp_timewait_input+0xc8>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	f003 0304 	and.w	r3, r3, #4
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d153      	bne.n	800d97c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d106      	bne.n	800d8e8 <tcp_timewait_input+0x28>
 800d8da:	4b2c      	ldr	r3, [pc, #176]	; (800d98c <tcp_timewait_input+0xcc>)
 800d8dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d8e0:	492b      	ldr	r1, [pc, #172]	; (800d990 <tcp_timewait_input+0xd0>)
 800d8e2:	482c      	ldr	r0, [pc, #176]	; (800d994 <tcp_timewait_input+0xd4>)
 800d8e4:	f008 f84a 	bl	801597c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d8e8:	4b27      	ldr	r3, [pc, #156]	; (800d988 <tcp_timewait_input+0xc8>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	f003 0302 	and.w	r3, r3, #2
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d02a      	beq.n	800d94a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d8f4:	4b28      	ldr	r3, [pc, #160]	; (800d998 <tcp_timewait_input+0xd8>)
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	db2d      	blt.n	800d95e <tcp_timewait_input+0x9e>
 800d902:	4b25      	ldr	r3, [pc, #148]	; (800d998 <tcp_timewait_input+0xd8>)
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90a:	6879      	ldr	r1, [r7, #4]
 800d90c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d90e:	440b      	add	r3, r1
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	dc23      	bgt.n	800d95e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d916:	4b21      	ldr	r3, [pc, #132]	; (800d99c <tcp_timewait_input+0xdc>)
 800d918:	6819      	ldr	r1, [r3, #0]
 800d91a:	4b21      	ldr	r3, [pc, #132]	; (800d9a0 <tcp_timewait_input+0xe0>)
 800d91c:	881b      	ldrh	r3, [r3, #0]
 800d91e:	461a      	mov	r2, r3
 800d920:	4b1d      	ldr	r3, [pc, #116]	; (800d998 <tcp_timewait_input+0xd8>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d926:	4b1f      	ldr	r3, [pc, #124]	; (800d9a4 <tcp_timewait_input+0xe4>)
 800d928:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d92a:	885b      	ldrh	r3, [r3, #2]
 800d92c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d92e:	4a1d      	ldr	r2, [pc, #116]	; (800d9a4 <tcp_timewait_input+0xe4>)
 800d930:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d932:	8812      	ldrh	r2, [r2, #0]
 800d934:	b292      	uxth	r2, r2
 800d936:	9202      	str	r2, [sp, #8]
 800d938:	9301      	str	r3, [sp, #4]
 800d93a:	4b1b      	ldr	r3, [pc, #108]	; (800d9a8 <tcp_timewait_input+0xe8>)
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	4b1b      	ldr	r3, [pc, #108]	; (800d9ac <tcp_timewait_input+0xec>)
 800d940:	4602      	mov	r2, r0
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f002 fe72 	bl	801062c <tcp_rst>
      return;
 800d948:	e01b      	b.n	800d982 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d94a:	4b0f      	ldr	r3, [pc, #60]	; (800d988 <tcp_timewait_input+0xc8>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d956:	4b16      	ldr	r3, [pc, #88]	; (800d9b0 <tcp_timewait_input+0xf0>)
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d95e:	4b10      	ldr	r3, [pc, #64]	; (800d9a0 <tcp_timewait_input+0xe0>)
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00c      	beq.n	800d980 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	8b5b      	ldrh	r3, [r3, #26]
 800d96a:	f043 0302 	orr.w	r3, r3, #2
 800d96e:	b29a      	uxth	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f002 f8a5 	bl	800fac4 <tcp_output>
  }
  return;
 800d97a:	e001      	b.n	800d980 <tcp_timewait_input+0xc0>
    return;
 800d97c:	bf00      	nop
 800d97e:	e000      	b.n	800d982 <tcp_timewait_input+0xc2>
  return;
 800d980:	bf00      	nop
}
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	2000b06c 	.word	0x2000b06c
 800d98c:	080181d8 	.word	0x080181d8
 800d990:	080183f0 	.word	0x080183f0
 800d994:	08018224 	.word	0x08018224
 800d998:	2000b060 	.word	0x2000b060
 800d99c:	2000b064 	.word	0x2000b064
 800d9a0:	2000b06a 	.word	0x2000b06a
 800d9a4:	2000b050 	.word	0x2000b050
 800d9a8:	200058e8 	.word	0x200058e8
 800d9ac:	200058ec 	.word	0x200058ec
 800d9b0:	2000b028 	.word	0x2000b028

0800d9b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d9b4:	b590      	push	{r4, r7, lr}
 800d9b6:	b08d      	sub	sp, #52	; 0x34
 800d9b8:	af04      	add	r7, sp, #16
 800d9ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d106      	bne.n	800d9d8 <tcp_process+0x24>
 800d9ca:	4b9d      	ldr	r3, [pc, #628]	; (800dc40 <tcp_process+0x28c>)
 800d9cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d9d0:	499c      	ldr	r1, [pc, #624]	; (800dc44 <tcp_process+0x290>)
 800d9d2:	489d      	ldr	r0, [pc, #628]	; (800dc48 <tcp_process+0x294>)
 800d9d4:	f007 ffd2 	bl	801597c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d9d8:	4b9c      	ldr	r3, [pc, #624]	; (800dc4c <tcp_process+0x298>)
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d04e      	beq.n	800da82 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	7d1b      	ldrb	r3, [r3, #20]
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d108      	bne.n	800d9fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9f0:	4b97      	ldr	r3, [pc, #604]	; (800dc50 <tcp_process+0x29c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d123      	bne.n	800da40 <tcp_process+0x8c>
        acceptable = 1;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	76fb      	strb	r3, [r7, #27]
 800d9fc:	e020      	b.n	800da40 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da02:	4b94      	ldr	r3, [pc, #592]	; (800dc54 <tcp_process+0x2a0>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	429a      	cmp	r2, r3
 800da08:	d102      	bne.n	800da10 <tcp_process+0x5c>
        acceptable = 1;
 800da0a:	2301      	movs	r3, #1
 800da0c:	76fb      	strb	r3, [r7, #27]
 800da0e:	e017      	b.n	800da40 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800da10:	4b90      	ldr	r3, [pc, #576]	; (800dc54 <tcp_process+0x2a0>)
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	db10      	blt.n	800da40 <tcp_process+0x8c>
 800da1e:	4b8d      	ldr	r3, [pc, #564]	; (800dc54 <tcp_process+0x2a0>)
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	6879      	ldr	r1, [r7, #4]
 800da28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da2a:	440b      	add	r3, r1
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dc06      	bgt.n	800da40 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	8b5b      	ldrh	r3, [r3, #26]
 800da36:	f043 0302 	orr.w	r3, r3, #2
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800da40:	7efb      	ldrb	r3, [r7, #27]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d01b      	beq.n	800da7e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	7d1b      	ldrb	r3, [r3, #20]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d106      	bne.n	800da5c <tcp_process+0xa8>
 800da4e:	4b7c      	ldr	r3, [pc, #496]	; (800dc40 <tcp_process+0x28c>)
 800da50:	f44f 724e 	mov.w	r2, #824	; 0x338
 800da54:	4980      	ldr	r1, [pc, #512]	; (800dc58 <tcp_process+0x2a4>)
 800da56:	487c      	ldr	r0, [pc, #496]	; (800dc48 <tcp_process+0x294>)
 800da58:	f007 ff90 	bl	801597c <iprintf>
      recv_flags |= TF_RESET;
 800da5c:	4b7f      	ldr	r3, [pc, #508]	; (800dc5c <tcp_process+0x2a8>)
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	f043 0308 	orr.w	r3, r3, #8
 800da64:	b2da      	uxtb	r2, r3
 800da66:	4b7d      	ldr	r3, [pc, #500]	; (800dc5c <tcp_process+0x2a8>)
 800da68:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	8b5b      	ldrh	r3, [r3, #26]
 800da6e:	f023 0301 	bic.w	r3, r3, #1
 800da72:	b29a      	uxth	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800da78:	f06f 030d 	mvn.w	r3, #13
 800da7c:	e37a      	b.n	800e174 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	e378      	b.n	800e174 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800da82:	4b72      	ldr	r3, [pc, #456]	; (800dc4c <tcp_process+0x298>)
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	f003 0302 	and.w	r3, r3, #2
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d010      	beq.n	800dab0 <tcp_process+0xfc>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	7d1b      	ldrb	r3, [r3, #20]
 800da92:	2b02      	cmp	r3, #2
 800da94:	d00c      	beq.n	800dab0 <tcp_process+0xfc>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	7d1b      	ldrb	r3, [r3, #20]
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d008      	beq.n	800dab0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	8b5b      	ldrh	r3, [r3, #26]
 800daa2:	f043 0302 	orr.w	r3, r3, #2
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	e361      	b.n	800e174 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	8b5b      	ldrh	r3, [r3, #26]
 800dab4:	f003 0310 	and.w	r3, r3, #16
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d103      	bne.n	800dac4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dabc:	4b68      	ldr	r3, [pc, #416]	; (800dc60 <tcp_process+0x2ac>)
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f001 fc2f 	bl	800f338 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	7d1b      	ldrb	r3, [r3, #20]
 800dade:	3b02      	subs	r3, #2
 800dae0:	2b07      	cmp	r3, #7
 800dae2:	f200 8337 	bhi.w	800e154 <tcp_process+0x7a0>
 800dae6:	a201      	add	r2, pc, #4	; (adr r2, 800daec <tcp_process+0x138>)
 800dae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daec:	0800db0d 	.word	0x0800db0d
 800daf0:	0800dd3d 	.word	0x0800dd3d
 800daf4:	0800deb5 	.word	0x0800deb5
 800daf8:	0800dedf 	.word	0x0800dedf
 800dafc:	0800e003 	.word	0x0800e003
 800db00:	0800deb5 	.word	0x0800deb5
 800db04:	0800e08f 	.word	0x0800e08f
 800db08:	0800e11f 	.word	0x0800e11f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800db0c:	4b4f      	ldr	r3, [pc, #316]	; (800dc4c <tcp_process+0x298>)
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 80e4 	beq.w	800dce2 <tcp_process+0x32e>
 800db1a:	4b4c      	ldr	r3, [pc, #304]	; (800dc4c <tcp_process+0x298>)
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	f003 0302 	and.w	r3, r3, #2
 800db22:	2b00      	cmp	r3, #0
 800db24:	f000 80dd 	beq.w	800dce2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db2c:	1c5a      	adds	r2, r3, #1
 800db2e:	4b48      	ldr	r3, [pc, #288]	; (800dc50 <tcp_process+0x29c>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	429a      	cmp	r2, r3
 800db34:	f040 80d5 	bne.w	800dce2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800db38:	4b46      	ldr	r3, [pc, #280]	; (800dc54 <tcp_process+0x2a0>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	1c5a      	adds	r2, r3, #1
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800db4a:	4b41      	ldr	r3, [pc, #260]	; (800dc50 <tcp_process+0x29c>)
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800db52:	4b44      	ldr	r3, [pc, #272]	; (800dc64 <tcp_process+0x2b0>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	89db      	ldrh	r3, [r3, #14]
 800db58:	b29a      	uxth	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800db6c:	4b39      	ldr	r3, [pc, #228]	; (800dc54 <tcp_process+0x2a0>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	1e5a      	subs	r2, r3, #1
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2204      	movs	r2, #4
 800db7a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3304      	adds	r3, #4
 800db84:	4618      	mov	r0, r3
 800db86:	f006 fc8b 	bl	80144a0 <ip4_route>
 800db8a:	4601      	mov	r1, r0
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	3304      	adds	r3, #4
 800db90:	461a      	mov	r2, r3
 800db92:	4620      	mov	r0, r4
 800db94:	f7ff f88c 	bl	800ccb0 <tcp_eff_send_mss_netif>
 800db98:	4603      	mov	r3, r0
 800db9a:	461a      	mov	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dba4:	009a      	lsls	r2, r3, #2
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	f241 111c 	movw	r1, #4380	; 0x111c
 800dbb0:	428b      	cmp	r3, r1
 800dbb2:	bf38      	it	cc
 800dbb4:	460b      	movcc	r3, r1
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d204      	bcs.n	800dbc4 <tcp_process+0x210>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	e00d      	b.n	800dbe0 <tcp_process+0x22c>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbc8:	005b      	lsls	r3, r3, #1
 800dbca:	f241 121c 	movw	r2, #4380	; 0x111c
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d904      	bls.n	800dbdc <tcp_process+0x228>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	e001      	b.n	800dbe0 <tcp_process+0x22c>
 800dbdc:	f241 131c 	movw	r3, #4380	; 0x111c
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d106      	bne.n	800dbfe <tcp_process+0x24a>
 800dbf0:	4b13      	ldr	r3, [pc, #76]	; (800dc40 <tcp_process+0x28c>)
 800dbf2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800dbf6:	491c      	ldr	r1, [pc, #112]	; (800dc68 <tcp_process+0x2b4>)
 800dbf8:	4813      	ldr	r0, [pc, #76]	; (800dc48 <tcp_process+0x294>)
 800dbfa:	f007 febf 	bl	801597c <iprintf>
        --pcb->snd_queuelen;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc04:	3b01      	subs	r3, #1
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc12:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d12a      	bne.n	800dc70 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <tcp_process+0x280>
 800dc26:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <tcp_process+0x28c>)
 800dc28:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dc2c:	490f      	ldr	r1, [pc, #60]	; (800dc6c <tcp_process+0x2b8>)
 800dc2e:	4806      	ldr	r0, [pc, #24]	; (800dc48 <tcp_process+0x294>)
 800dc30:	f007 fea4 	bl	801597c <iprintf>
          pcb->unsent = rseg->next;
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	66da      	str	r2, [r3, #108]	; 0x6c
 800dc3c:	e01c      	b.n	800dc78 <tcp_process+0x2c4>
 800dc3e:	bf00      	nop
 800dc40:	080181d8 	.word	0x080181d8
 800dc44:	08018410 	.word	0x08018410
 800dc48:	08018224 	.word	0x08018224
 800dc4c:	2000b06c 	.word	0x2000b06c
 800dc50:	2000b064 	.word	0x2000b064
 800dc54:	2000b060 	.word	0x2000b060
 800dc58:	0801842c 	.word	0x0801842c
 800dc5c:	2000b06d 	.word	0x2000b06d
 800dc60:	2000b028 	.word	0x2000b028
 800dc64:	2000b050 	.word	0x2000b050
 800dc68:	0801844c 	.word	0x0801844c
 800dc6c:	08018464 	.word	0x08018464
        } else {
          pcb->unacked = rseg->next;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dc78:	69f8      	ldr	r0, [r7, #28]
 800dc7a:	f7fe fd22 	bl	800c6c2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d104      	bne.n	800dc90 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc8c:	861a      	strh	r2, [r3, #48]	; 0x30
 800dc8e:	e006      	b.n	800dc9e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00a      	beq.n	800dcbe <tcp_process+0x30a>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	6910      	ldr	r0, [r2, #16]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	6879      	ldr	r1, [r7, #4]
 800dcb6:	4798      	blx	r3
 800dcb8:	4603      	mov	r3, r0
 800dcba:	76bb      	strb	r3, [r7, #26]
 800dcbc:	e001      	b.n	800dcc2 <tcp_process+0x30e>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dcc2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dcc6:	f113 0f0d 	cmn.w	r3, #13
 800dcca:	d102      	bne.n	800dcd2 <tcp_process+0x31e>
          return ERR_ABRT;
 800dccc:	f06f 030c 	mvn.w	r3, #12
 800dcd0:	e250      	b.n	800e174 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	8b5b      	ldrh	r3, [r3, #26]
 800dcd6:	f043 0302 	orr.w	r3, r3, #2
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dce0:	e23a      	b.n	800e158 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dce2:	4b98      	ldr	r3, [pc, #608]	; (800df44 <tcp_process+0x590>)
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	f003 0310 	and.w	r3, r3, #16
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f000 8234 	beq.w	800e158 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcf0:	4b95      	ldr	r3, [pc, #596]	; (800df48 <tcp_process+0x594>)
 800dcf2:	6819      	ldr	r1, [r3, #0]
 800dcf4:	4b95      	ldr	r3, [pc, #596]	; (800df4c <tcp_process+0x598>)
 800dcf6:	881b      	ldrh	r3, [r3, #0]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	4b95      	ldr	r3, [pc, #596]	; (800df50 <tcp_process+0x59c>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd00:	4b94      	ldr	r3, [pc, #592]	; (800df54 <tcp_process+0x5a0>)
 800dd02:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd04:	885b      	ldrh	r3, [r3, #2]
 800dd06:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd08:	4a92      	ldr	r2, [pc, #584]	; (800df54 <tcp_process+0x5a0>)
 800dd0a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd0c:	8812      	ldrh	r2, [r2, #0]
 800dd0e:	b292      	uxth	r2, r2
 800dd10:	9202      	str	r2, [sp, #8]
 800dd12:	9301      	str	r3, [sp, #4]
 800dd14:	4b90      	ldr	r3, [pc, #576]	; (800df58 <tcp_process+0x5a4>)
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	4b90      	ldr	r3, [pc, #576]	; (800df5c <tcp_process+0x5a8>)
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f002 fc85 	bl	801062c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd28:	2b05      	cmp	r3, #5
 800dd2a:	f200 8215 	bhi.w	800e158 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f002 fa4f 	bl	80101d8 <tcp_rexmit_rto>
      break;
 800dd3a:	e20d      	b.n	800e158 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dd3c:	4b81      	ldr	r3, [pc, #516]	; (800df44 <tcp_process+0x590>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	f003 0310 	and.w	r3, r3, #16
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f000 80a1 	beq.w	800de8c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd4a:	4b7f      	ldr	r3, [pc, #508]	; (800df48 <tcp_process+0x594>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	3b01      	subs	r3, #1
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	db7e      	blt.n	800de58 <tcp_process+0x4a4>
 800dd5a:	4b7b      	ldr	r3, [pc, #492]	; (800df48 <tcp_process+0x594>)
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	dc77      	bgt.n	800de58 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2204      	movs	r2, #4
 800dd6c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d102      	bne.n	800dd7c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dd76:	23fa      	movs	r3, #250	; 0xfa
 800dd78:	76bb      	strb	r3, [r7, #26]
 800dd7a:	e01d      	b.n	800ddb8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd80:	699b      	ldr	r3, [r3, #24]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d106      	bne.n	800dd94 <tcp_process+0x3e0>
 800dd86:	4b76      	ldr	r3, [pc, #472]	; (800df60 <tcp_process+0x5ac>)
 800dd88:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800dd8c:	4975      	ldr	r1, [pc, #468]	; (800df64 <tcp_process+0x5b0>)
 800dd8e:	4876      	ldr	r0, [pc, #472]	; (800df68 <tcp_process+0x5b4>)
 800dd90:	f007 fdf4 	bl	801597c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00a      	beq.n	800ddb4 <tcp_process+0x400>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	6910      	ldr	r0, [r2, #16]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	6879      	ldr	r1, [r7, #4]
 800ddac:	4798      	blx	r3
 800ddae:	4603      	mov	r3, r0
 800ddb0:	76bb      	strb	r3, [r7, #26]
 800ddb2:	e001      	b.n	800ddb8 <tcp_process+0x404>
 800ddb4:	23f0      	movs	r3, #240	; 0xf0
 800ddb6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ddb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00a      	beq.n	800ddd6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ddc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ddc4:	f113 0f0d 	cmn.w	r3, #13
 800ddc8:	d002      	beq.n	800ddd0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7fd ff8e 	bl	800bcec <tcp_abort>
            }
            return ERR_ABRT;
 800ddd0:	f06f 030c 	mvn.w	r3, #12
 800ddd4:	e1ce      	b.n	800e174 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 fae0 	bl	800e39c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dddc:	4b63      	ldr	r3, [pc, #396]	; (800df6c <tcp_process+0x5b8>)
 800ddde:	881b      	ldrh	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d005      	beq.n	800ddf0 <tcp_process+0x43c>
            recv_acked--;
 800dde4:	4b61      	ldr	r3, [pc, #388]	; (800df6c <tcp_process+0x5b8>)
 800dde6:	881b      	ldrh	r3, [r3, #0]
 800dde8:	3b01      	subs	r3, #1
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	4b5f      	ldr	r3, [pc, #380]	; (800df6c <tcp_process+0x5b8>)
 800ddee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddf4:	009a      	lsls	r2, r3, #2
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddfa:	005b      	lsls	r3, r3, #1
 800ddfc:	f241 111c 	movw	r1, #4380	; 0x111c
 800de00:	428b      	cmp	r3, r1
 800de02:	bf38      	it	cc
 800de04:	460b      	movcc	r3, r1
 800de06:	429a      	cmp	r2, r3
 800de08:	d204      	bcs.n	800de14 <tcp_process+0x460>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	b29b      	uxth	r3, r3
 800de12:	e00d      	b.n	800de30 <tcp_process+0x47c>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de18:	005b      	lsls	r3, r3, #1
 800de1a:	f241 121c 	movw	r2, #4380	; 0x111c
 800de1e:	4293      	cmp	r3, r2
 800de20:	d904      	bls.n	800de2c <tcp_process+0x478>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de26:	005b      	lsls	r3, r3, #1
 800de28:	b29b      	uxth	r3, r3
 800de2a:	e001      	b.n	800de30 <tcp_process+0x47c>
 800de2c:	f241 131c 	movw	r3, #4380	; 0x111c
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800de36:	4b4e      	ldr	r3, [pc, #312]	; (800df70 <tcp_process+0x5bc>)
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	f003 0320 	and.w	r3, r3, #32
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d037      	beq.n	800deb2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	8b5b      	ldrh	r3, [r3, #26]
 800de46:	f043 0302 	orr.w	r3, r3, #2
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2207      	movs	r2, #7
 800de54:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800de56:	e02c      	b.n	800deb2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de58:	4b3b      	ldr	r3, [pc, #236]	; (800df48 <tcp_process+0x594>)
 800de5a:	6819      	ldr	r1, [r3, #0]
 800de5c:	4b3b      	ldr	r3, [pc, #236]	; (800df4c <tcp_process+0x598>)
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	461a      	mov	r2, r3
 800de62:	4b3b      	ldr	r3, [pc, #236]	; (800df50 <tcp_process+0x59c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de68:	4b3a      	ldr	r3, [pc, #232]	; (800df54 <tcp_process+0x5a0>)
 800de6a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de6c:	885b      	ldrh	r3, [r3, #2]
 800de6e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de70:	4a38      	ldr	r2, [pc, #224]	; (800df54 <tcp_process+0x5a0>)
 800de72:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de74:	8812      	ldrh	r2, [r2, #0]
 800de76:	b292      	uxth	r2, r2
 800de78:	9202      	str	r2, [sp, #8]
 800de7a:	9301      	str	r3, [sp, #4]
 800de7c:	4b36      	ldr	r3, [pc, #216]	; (800df58 <tcp_process+0x5a4>)
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4b36      	ldr	r3, [pc, #216]	; (800df5c <tcp_process+0x5a8>)
 800de82:	4602      	mov	r2, r0
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f002 fbd1 	bl	801062c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800de8a:	e167      	b.n	800e15c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800de8c:	4b2d      	ldr	r3, [pc, #180]	; (800df44 <tcp_process+0x590>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	f003 0302 	and.w	r3, r3, #2
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 8161 	beq.w	800e15c <tcp_process+0x7a8>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	1e5a      	subs	r2, r3, #1
 800dea0:	4b2b      	ldr	r3, [pc, #172]	; (800df50 <tcp_process+0x59c>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	f040 8159 	bne.w	800e15c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f002 f9b6 	bl	801021c <tcp_rexmit>
      break;
 800deb0:	e154      	b.n	800e15c <tcp_process+0x7a8>
 800deb2:	e153      	b.n	800e15c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 fa71 	bl	800e39c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800deba:	4b2d      	ldr	r3, [pc, #180]	; (800df70 <tcp_process+0x5bc>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	f003 0320 	and.w	r3, r3, #32
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f000 814c 	beq.w	800e160 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	8b5b      	ldrh	r3, [r3, #26]
 800decc:	f043 0302 	orr.w	r3, r3, #2
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2207      	movs	r2, #7
 800deda:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dedc:	e140      	b.n	800e160 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fa5c 	bl	800e39c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dee4:	4b22      	ldr	r3, [pc, #136]	; (800df70 <tcp_process+0x5bc>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	f003 0320 	and.w	r3, r3, #32
 800deec:	2b00      	cmp	r3, #0
 800deee:	d071      	beq.n	800dfd4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800def0:	4b14      	ldr	r3, [pc, #80]	; (800df44 <tcp_process+0x590>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	f003 0310 	and.w	r3, r3, #16
 800def8:	2b00      	cmp	r3, #0
 800defa:	d060      	beq.n	800dfbe <tcp_process+0x60a>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df00:	4b11      	ldr	r3, [pc, #68]	; (800df48 <tcp_process+0x594>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	429a      	cmp	r2, r3
 800df06:	d15a      	bne.n	800dfbe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d156      	bne.n	800dfbe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	8b5b      	ldrh	r3, [r3, #26]
 800df14:	f043 0302 	orr.w	r3, r3, #2
 800df18:	b29a      	uxth	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7fe fdbc 	bl	800ca9c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800df24:	4b13      	ldr	r3, [pc, #76]	; (800df74 <tcp_process+0x5c0>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d105      	bne.n	800df3a <tcp_process+0x586>
 800df2e:	4b11      	ldr	r3, [pc, #68]	; (800df74 <tcp_process+0x5c0>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	4a0f      	ldr	r2, [pc, #60]	; (800df74 <tcp_process+0x5c0>)
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	e02e      	b.n	800df98 <tcp_process+0x5e4>
 800df3a:	4b0e      	ldr	r3, [pc, #56]	; (800df74 <tcp_process+0x5c0>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	617b      	str	r3, [r7, #20]
 800df40:	e027      	b.n	800df92 <tcp_process+0x5de>
 800df42:	bf00      	nop
 800df44:	2000b06c 	.word	0x2000b06c
 800df48:	2000b064 	.word	0x2000b064
 800df4c:	2000b06a 	.word	0x2000b06a
 800df50:	2000b060 	.word	0x2000b060
 800df54:	2000b050 	.word	0x2000b050
 800df58:	200058e8 	.word	0x200058e8
 800df5c:	200058ec 	.word	0x200058ec
 800df60:	080181d8 	.word	0x080181d8
 800df64:	08018478 	.word	0x08018478
 800df68:	08018224 	.word	0x08018224
 800df6c:	2000b068 	.word	0x2000b068
 800df70:	2000b06d 	.word	0x2000b06d
 800df74:	2000b034 	.word	0x2000b034
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d104      	bne.n	800df8c <tcp_process+0x5d8>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	68da      	ldr	r2, [r3, #12]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	60da      	str	r2, [r3, #12]
 800df8a:	e005      	b.n	800df98 <tcp_process+0x5e4>
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	617b      	str	r3, [r7, #20]
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1ef      	bne.n	800df78 <tcp_process+0x5c4>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	60da      	str	r2, [r3, #12]
 800df9e:	4b77      	ldr	r3, [pc, #476]	; (800e17c <tcp_process+0x7c8>)
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	220a      	movs	r2, #10
 800dfa8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dfaa:	4b75      	ldr	r3, [pc, #468]	; (800e180 <tcp_process+0x7cc>)
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	60da      	str	r2, [r3, #12]
 800dfb2:	4a73      	ldr	r2, [pc, #460]	; (800e180 <tcp_process+0x7cc>)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6013      	str	r3, [r2, #0]
 800dfb8:	f002 fcfa 	bl	80109b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dfbc:	e0d2      	b.n	800e164 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	8b5b      	ldrh	r3, [r3, #26]
 800dfc2:	f043 0302 	orr.w	r3, r3, #2
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2208      	movs	r2, #8
 800dfd0:	751a      	strb	r2, [r3, #20]
      break;
 800dfd2:	e0c7      	b.n	800e164 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dfd4:	4b6b      	ldr	r3, [pc, #428]	; (800e184 <tcp_process+0x7d0>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	f003 0310 	and.w	r3, r3, #16
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f000 80c1 	beq.w	800e164 <tcp_process+0x7b0>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfe6:	4b68      	ldr	r3, [pc, #416]	; (800e188 <tcp_process+0x7d4>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	f040 80ba 	bne.w	800e164 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f040 80b5 	bne.w	800e164 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2206      	movs	r2, #6
 800dffe:	751a      	strb	r2, [r3, #20]
      break;
 800e000:	e0b0      	b.n	800e164 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f9ca 	bl	800e39c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e008:	4b60      	ldr	r3, [pc, #384]	; (800e18c <tcp_process+0x7d8>)
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	f003 0320 	and.w	r3, r3, #32
 800e010:	2b00      	cmp	r3, #0
 800e012:	f000 80a9 	beq.w	800e168 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	8b5b      	ldrh	r3, [r3, #26]
 800e01a:	f043 0302 	orr.w	r3, r3, #2
 800e01e:	b29a      	uxth	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7fe fd39 	bl	800ca9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e02a:	4b59      	ldr	r3, [pc, #356]	; (800e190 <tcp_process+0x7dc>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d105      	bne.n	800e040 <tcp_process+0x68c>
 800e034:	4b56      	ldr	r3, [pc, #344]	; (800e190 <tcp_process+0x7dc>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	4a55      	ldr	r2, [pc, #340]	; (800e190 <tcp_process+0x7dc>)
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	e013      	b.n	800e068 <tcp_process+0x6b4>
 800e040:	4b53      	ldr	r3, [pc, #332]	; (800e190 <tcp_process+0x7dc>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	613b      	str	r3, [r7, #16]
 800e046:	e00c      	b.n	800e062 <tcp_process+0x6ae>
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d104      	bne.n	800e05c <tcp_process+0x6a8>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68da      	ldr	r2, [r3, #12]
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	60da      	str	r2, [r3, #12]
 800e05a:	e005      	b.n	800e068 <tcp_process+0x6b4>
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	613b      	str	r3, [r7, #16]
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1ef      	bne.n	800e048 <tcp_process+0x694>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2200      	movs	r2, #0
 800e06c:	60da      	str	r2, [r3, #12]
 800e06e:	4b43      	ldr	r3, [pc, #268]	; (800e17c <tcp_process+0x7c8>)
 800e070:	2201      	movs	r2, #1
 800e072:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	220a      	movs	r2, #10
 800e078:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e07a:	4b41      	ldr	r3, [pc, #260]	; (800e180 <tcp_process+0x7cc>)
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	60da      	str	r2, [r3, #12]
 800e082:	4a3f      	ldr	r2, [pc, #252]	; (800e180 <tcp_process+0x7cc>)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	f002 fc92 	bl	80109b0 <tcp_timer_needed>
      }
      break;
 800e08c:	e06c      	b.n	800e168 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f984 	bl	800e39c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e094:	4b3b      	ldr	r3, [pc, #236]	; (800e184 <tcp_process+0x7d0>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	f003 0310 	and.w	r3, r3, #16
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d065      	beq.n	800e16c <tcp_process+0x7b8>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0a4:	4b38      	ldr	r3, [pc, #224]	; (800e188 <tcp_process+0x7d4>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d15f      	bne.n	800e16c <tcp_process+0x7b8>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d15b      	bne.n	800e16c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7fe fcf1 	bl	800ca9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e0ba:	4b35      	ldr	r3, [pc, #212]	; (800e190 <tcp_process+0x7dc>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d105      	bne.n	800e0d0 <tcp_process+0x71c>
 800e0c4:	4b32      	ldr	r3, [pc, #200]	; (800e190 <tcp_process+0x7dc>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	4a31      	ldr	r2, [pc, #196]	; (800e190 <tcp_process+0x7dc>)
 800e0cc:	6013      	str	r3, [r2, #0]
 800e0ce:	e013      	b.n	800e0f8 <tcp_process+0x744>
 800e0d0:	4b2f      	ldr	r3, [pc, #188]	; (800e190 <tcp_process+0x7dc>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60fb      	str	r3, [r7, #12]
 800e0d6:	e00c      	b.n	800e0f2 <tcp_process+0x73e>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d104      	bne.n	800e0ec <tcp_process+0x738>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	68da      	ldr	r2, [r3, #12]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	60da      	str	r2, [r3, #12]
 800e0ea:	e005      	b.n	800e0f8 <tcp_process+0x744>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	60fb      	str	r3, [r7, #12]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1ef      	bne.n	800e0d8 <tcp_process+0x724>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	60da      	str	r2, [r3, #12]
 800e0fe:	4b1f      	ldr	r3, [pc, #124]	; (800e17c <tcp_process+0x7c8>)
 800e100:	2201      	movs	r2, #1
 800e102:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	220a      	movs	r2, #10
 800e108:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e10a:	4b1d      	ldr	r3, [pc, #116]	; (800e180 <tcp_process+0x7cc>)
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	60da      	str	r2, [r3, #12]
 800e112:	4a1b      	ldr	r2, [pc, #108]	; (800e180 <tcp_process+0x7cc>)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6013      	str	r3, [r2, #0]
 800e118:	f002 fc4a 	bl	80109b0 <tcp_timer_needed>
      }
      break;
 800e11c:	e026      	b.n	800e16c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f93c 	bl	800e39c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e124:	4b17      	ldr	r3, [pc, #92]	; (800e184 <tcp_process+0x7d0>)
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	f003 0310 	and.w	r3, r3, #16
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d01f      	beq.n	800e170 <tcp_process+0x7bc>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e134:	4b14      	ldr	r3, [pc, #80]	; (800e188 <tcp_process+0x7d4>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d119      	bne.n	800e170 <tcp_process+0x7bc>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e140:	2b00      	cmp	r3, #0
 800e142:	d115      	bne.n	800e170 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e144:	4b11      	ldr	r3, [pc, #68]	; (800e18c <tcp_process+0x7d8>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	f043 0310 	orr.w	r3, r3, #16
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	4b0f      	ldr	r3, [pc, #60]	; (800e18c <tcp_process+0x7d8>)
 800e150:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e152:	e00d      	b.n	800e170 <tcp_process+0x7bc>
    default:
      break;
 800e154:	bf00      	nop
 800e156:	e00c      	b.n	800e172 <tcp_process+0x7be>
      break;
 800e158:	bf00      	nop
 800e15a:	e00a      	b.n	800e172 <tcp_process+0x7be>
      break;
 800e15c:	bf00      	nop
 800e15e:	e008      	b.n	800e172 <tcp_process+0x7be>
      break;
 800e160:	bf00      	nop
 800e162:	e006      	b.n	800e172 <tcp_process+0x7be>
      break;
 800e164:	bf00      	nop
 800e166:	e004      	b.n	800e172 <tcp_process+0x7be>
      break;
 800e168:	bf00      	nop
 800e16a:	e002      	b.n	800e172 <tcp_process+0x7be>
      break;
 800e16c:	bf00      	nop
 800e16e:	e000      	b.n	800e172 <tcp_process+0x7be>
      break;
 800e170:	bf00      	nop
  }
  return ERR_OK;
 800e172:	2300      	movs	r3, #0
}
 800e174:	4618      	mov	r0, r3
 800e176:	3724      	adds	r7, #36	; 0x24
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd90      	pop	{r4, r7, pc}
 800e17c:	2000b03c 	.word	0x2000b03c
 800e180:	2000b038 	.word	0x2000b038
 800e184:	2000b06c 	.word	0x2000b06c
 800e188:	2000b064 	.word	0x2000b064
 800e18c:	2000b06d 	.word	0x2000b06d
 800e190:	2000b034 	.word	0x2000b034

0800e194 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e194:	b590      	push	{r4, r7, lr}
 800e196:	b085      	sub	sp, #20
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d106      	bne.n	800e1b2 <tcp_oos_insert_segment+0x1e>
 800e1a4:	4b3b      	ldr	r3, [pc, #236]	; (800e294 <tcp_oos_insert_segment+0x100>)
 800e1a6:	f240 421f 	movw	r2, #1055	; 0x41f
 800e1aa:	493b      	ldr	r1, [pc, #236]	; (800e298 <tcp_oos_insert_segment+0x104>)
 800e1ac:	483b      	ldr	r0, [pc, #236]	; (800e29c <tcp_oos_insert_segment+0x108>)
 800e1ae:	f007 fbe5 	bl	801597c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	899b      	ldrh	r3, [r3, #12]
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fb fc94 	bl	8009ae8 <lwip_htons>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	f003 0301 	and.w	r3, r3, #1
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d028      	beq.n	800e21e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e1cc:	6838      	ldr	r0, [r7, #0]
 800e1ce:	f7fe fa63 	bl	800c698 <tcp_segs_free>
    next = NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	603b      	str	r3, [r7, #0]
 800e1d6:	e056      	b.n	800e286 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	899b      	ldrh	r3, [r3, #12]
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fb fc81 	bl	8009ae8 <lwip_htons>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	f003 0301 	and.w	r3, r3, #1
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00d      	beq.n	800e20e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	899b      	ldrh	r3, [r3, #12]
 800e1f8:	b29c      	uxth	r4, r3
 800e1fa:	2001      	movs	r0, #1
 800e1fc:	f7fb fc74 	bl	8009ae8 <lwip_htons>
 800e200:	4603      	mov	r3, r0
 800e202:	461a      	mov	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	4322      	orrs	r2, r4
 800e20a:	b292      	uxth	r2, r2
 800e20c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f7fe fa52 	bl	800c6c2 <tcp_seg_free>
    while (next &&
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00e      	beq.n	800e242 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	891b      	ldrh	r3, [r3, #8]
 800e228:	461a      	mov	r2, r3
 800e22a:	4b1d      	ldr	r3, [pc, #116]	; (800e2a0 <tcp_oos_insert_segment+0x10c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	441a      	add	r2, r3
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	6839      	ldr	r1, [r7, #0]
 800e238:	8909      	ldrh	r1, [r1, #8]
 800e23a:	440b      	add	r3, r1
 800e23c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e23e:	2b00      	cmp	r3, #0
 800e240:	daca      	bge.n	800e1d8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d01e      	beq.n	800e286 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	891b      	ldrh	r3, [r3, #8]
 800e24c:	461a      	mov	r2, r3
 800e24e:	4b14      	ldr	r3, [pc, #80]	; (800e2a0 <tcp_oos_insert_segment+0x10c>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	441a      	add	r2, r3
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	dd12      	ble.n	800e286 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	b29a      	uxth	r2, r3
 800e268:	4b0d      	ldr	r3, [pc, #52]	; (800e2a0 <tcp_oos_insert_segment+0x10c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	b29a      	uxth	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	685a      	ldr	r2, [r3, #4]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	891b      	ldrh	r3, [r3, #8]
 800e27e:	4619      	mov	r1, r3
 800e280:	4610      	mov	r0, r2
 800e282:	f7fc fe15 	bl	800aeb0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	683a      	ldr	r2, [r7, #0]
 800e28a:	601a      	str	r2, [r3, #0]
}
 800e28c:	bf00      	nop
 800e28e:	3714      	adds	r7, #20
 800e290:	46bd      	mov	sp, r7
 800e292:	bd90      	pop	{r4, r7, pc}
 800e294:	080181d8 	.word	0x080181d8
 800e298:	08018498 	.word	0x08018498
 800e29c:	08018224 	.word	0x08018224
 800e2a0:	2000b060 	.word	0x2000b060

0800e2a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e2a4:	b5b0      	push	{r4, r5, r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	607a      	str	r2, [r7, #4]
 800e2b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e2b2:	e03e      	b.n	800e332 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fd f802 	bl	800b2cc <pbuf_clen>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2d2:	8a7a      	ldrh	r2, [r7, #18]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d906      	bls.n	800e2e6 <tcp_free_acked_segments+0x42>
 800e2d8:	4b2a      	ldr	r3, [pc, #168]	; (800e384 <tcp_free_acked_segments+0xe0>)
 800e2da:	f240 4257 	movw	r2, #1111	; 0x457
 800e2de:	492a      	ldr	r1, [pc, #168]	; (800e388 <tcp_free_acked_segments+0xe4>)
 800e2e0:	482a      	ldr	r0, [pc, #168]	; (800e38c <tcp_free_acked_segments+0xe8>)
 800e2e2:	f007 fb4b 	bl	801597c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e2ec:	8a7b      	ldrh	r3, [r7, #18]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	891a      	ldrh	r2, [r3, #8]
 800e2fc:	4b24      	ldr	r3, [pc, #144]	; (800e390 <tcp_free_acked_segments+0xec>)
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	4413      	add	r3, r2
 800e302:	b29a      	uxth	r2, r3
 800e304:	4b22      	ldr	r3, [pc, #136]	; (800e390 <tcp_free_acked_segments+0xec>)
 800e306:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e308:	6978      	ldr	r0, [r7, #20]
 800e30a:	f7fe f9da 	bl	800c6c2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00c      	beq.n	800e332 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d109      	bne.n	800e332 <tcp_free_acked_segments+0x8e>
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d106      	bne.n	800e332 <tcp_free_acked_segments+0x8e>
 800e324:	4b17      	ldr	r3, [pc, #92]	; (800e384 <tcp_free_acked_segments+0xe0>)
 800e326:	f240 4261 	movw	r2, #1121	; 0x461
 800e32a:	491a      	ldr	r1, [pc, #104]	; (800e394 <tcp_free_acked_segments+0xf0>)
 800e32c:	4817      	ldr	r0, [pc, #92]	; (800e38c <tcp_free_acked_segments+0xe8>)
 800e32e:	f007 fb25 	bl	801597c <iprintf>
  while (seg_list != NULL &&
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d020      	beq.n	800e37a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fb fbe7 	bl	8009b12 <lwip_htonl>
 800e344:	4604      	mov	r4, r0
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	891b      	ldrh	r3, [r3, #8]
 800e34a:	461d      	mov	r5, r3
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	899b      	ldrh	r3, [r3, #12]
 800e352:	b29b      	uxth	r3, r3
 800e354:	4618      	mov	r0, r3
 800e356:	f7fb fbc7 	bl	8009ae8 <lwip_htons>
 800e35a:	4603      	mov	r3, r0
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	f003 0303 	and.w	r3, r3, #3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d001      	beq.n	800e36a <tcp_free_acked_segments+0xc6>
 800e366:	2301      	movs	r3, #1
 800e368:	e000      	b.n	800e36c <tcp_free_acked_segments+0xc8>
 800e36a:	2300      	movs	r3, #0
 800e36c:	442b      	add	r3, r5
 800e36e:	18e2      	adds	r2, r4, r3
 800e370:	4b09      	ldr	r3, [pc, #36]	; (800e398 <tcp_free_acked_segments+0xf4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e376:	2b00      	cmp	r3, #0
 800e378:	dd9c      	ble.n	800e2b4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e37a:	68bb      	ldr	r3, [r7, #8]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bdb0      	pop	{r4, r5, r7, pc}
 800e384:	080181d8 	.word	0x080181d8
 800e388:	080184c0 	.word	0x080184c0
 800e38c:	08018224 	.word	0x08018224
 800e390:	2000b068 	.word	0x2000b068
 800e394:	080184e8 	.word	0x080184e8
 800e398:	2000b064 	.word	0x2000b064

0800e39c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e39c:	b5b0      	push	{r4, r5, r7, lr}
 800e39e:	b094      	sub	sp, #80	; 0x50
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d106      	bne.n	800e3bc <tcp_receive+0x20>
 800e3ae:	4b91      	ldr	r3, [pc, #580]	; (800e5f4 <tcp_receive+0x258>)
 800e3b0:	f240 427b 	movw	r2, #1147	; 0x47b
 800e3b4:	4990      	ldr	r1, [pc, #576]	; (800e5f8 <tcp_receive+0x25c>)
 800e3b6:	4891      	ldr	r0, [pc, #580]	; (800e5fc <tcp_receive+0x260>)
 800e3b8:	f007 fae0 	bl	801597c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7d1b      	ldrb	r3, [r3, #20]
 800e3c0:	2b03      	cmp	r3, #3
 800e3c2:	d806      	bhi.n	800e3d2 <tcp_receive+0x36>
 800e3c4:	4b8b      	ldr	r3, [pc, #556]	; (800e5f4 <tcp_receive+0x258>)
 800e3c6:	f240 427c 	movw	r2, #1148	; 0x47c
 800e3ca:	498d      	ldr	r1, [pc, #564]	; (800e600 <tcp_receive+0x264>)
 800e3cc:	488b      	ldr	r0, [pc, #556]	; (800e5fc <tcp_receive+0x260>)
 800e3ce:	f007 fad5 	bl	801597c <iprintf>

  if (flags & TCP_ACK) {
 800e3d2:	4b8c      	ldr	r3, [pc, #560]	; (800e604 <tcp_receive+0x268>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	f003 0310 	and.w	r3, r3, #16
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f000 8264 	beq.w	800e8a8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ec:	4413      	add	r3, r2
 800e3ee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3f4:	4b84      	ldr	r3, [pc, #528]	; (800e608 <tcp_receive+0x26c>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	db1b      	blt.n	800e436 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e402:	4b81      	ldr	r3, [pc, #516]	; (800e608 <tcp_receive+0x26c>)
 800e404:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e406:	429a      	cmp	r2, r3
 800e408:	d106      	bne.n	800e418 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e40e:	4b7f      	ldr	r3, [pc, #508]	; (800e60c <tcp_receive+0x270>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	2b00      	cmp	r3, #0
 800e416:	db0e      	blt.n	800e436 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e41c:	4b7b      	ldr	r3, [pc, #492]	; (800e60c <tcp_receive+0x270>)
 800e41e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e420:	429a      	cmp	r2, r3
 800e422:	d125      	bne.n	800e470 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e424:	4b7a      	ldr	r3, [pc, #488]	; (800e610 <tcp_receive+0x274>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	89db      	ldrh	r3, [r3, #14]
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e432:	429a      	cmp	r2, r3
 800e434:	d91c      	bls.n	800e470 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e436:	4b76      	ldr	r3, [pc, #472]	; (800e610 <tcp_receive+0x274>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	89db      	ldrh	r3, [r3, #14]
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e450:	429a      	cmp	r2, r3
 800e452:	d205      	bcs.n	800e460 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e460:	4b69      	ldr	r3, [pc, #420]	; (800e608 <tcp_receive+0x26c>)
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e468:	4b68      	ldr	r3, [pc, #416]	; (800e60c <tcp_receive+0x270>)
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e470:	4b66      	ldr	r3, [pc, #408]	; (800e60c <tcp_receive+0x270>)
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	dc58      	bgt.n	800e530 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e47e:	4b65      	ldr	r3, [pc, #404]	; (800e614 <tcp_receive+0x278>)
 800e480:	881b      	ldrh	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d14b      	bne.n	800e51e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e490:	4413      	add	r3, r2
 800e492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e494:	429a      	cmp	r2, r3
 800e496:	d142      	bne.n	800e51e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	db3d      	blt.n	800e51e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4a6:	4b59      	ldr	r3, [pc, #356]	; (800e60c <tcp_receive+0x270>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d137      	bne.n	800e51e <tcp_receive+0x182>
              found_dupack = 1;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4b8:	2bff      	cmp	r3, #255	; 0xff
 800e4ba:	d007      	beq.n	800e4cc <tcp_receive+0x130>
                ++pcb->dupacks;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d91b      	bls.n	800e50e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4e0:	4413      	add	r3, r2
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d30a      	bcc.n	800e504 <tcp_receive+0x168>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4f8:	4413      	add	r3, r2
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e502:	e004      	b.n	800e50e <tcp_receive+0x172>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e50a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e514:	2b02      	cmp	r3, #2
 800e516:	d902      	bls.n	800e51e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f001 feeb 	bl	80102f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e520:	2b00      	cmp	r3, #0
 800e522:	f040 8161 	bne.w	800e7e8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e52e:	e15b      	b.n	800e7e8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e530:	4b36      	ldr	r3, [pc, #216]	; (800e60c <tcp_receive+0x270>)
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	3b01      	subs	r3, #1
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	f2c0 814e 	blt.w	800e7de <tcp_receive+0x442>
 800e542:	4b32      	ldr	r3, [pc, #200]	; (800e60c <tcp_receive+0x270>)
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f300 8146 	bgt.w	800e7de <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	8b5b      	ldrh	r3, [r3, #26]
 800e556:	f003 0304 	and.w	r3, r3, #4
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d010      	beq.n	800e580 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	8b5b      	ldrh	r3, [r3, #26]
 800e562:	f023 0304 	bic.w	r3, r3, #4
 800e566:	b29a      	uxth	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e58e:	10db      	asrs	r3, r3, #3
 800e590:	b21b      	sxth	r3, r3
 800e592:	b29a      	uxth	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	4413      	add	r3, r2
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	b21a      	sxth	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e5a8:	4b18      	ldr	r3, [pc, #96]	; (800e60c <tcp_receive+0x270>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	1ad3      	subs	r3, r2, r3
 800e5b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e5c0:	4b12      	ldr	r3, [pc, #72]	; (800e60c <tcp_receive+0x270>)
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	7d1b      	ldrb	r3, [r3, #20]
 800e5cc:	2b03      	cmp	r3, #3
 800e5ce:	f240 8097 	bls.w	800e700 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d245      	bcs.n	800e66e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	8b5b      	ldrh	r3, [r3, #26]
 800e5e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d014      	beq.n	800e618 <tcp_receive+0x27c>
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	e013      	b.n	800e61a <tcp_receive+0x27e>
 800e5f2:	bf00      	nop
 800e5f4:	080181d8 	.word	0x080181d8
 800e5f8:	08018508 	.word	0x08018508
 800e5fc:	08018224 	.word	0x08018224
 800e600:	08018524 	.word	0x08018524
 800e604:	2000b06c 	.word	0x2000b06c
 800e608:	2000b060 	.word	0x2000b060
 800e60c:	2000b064 	.word	0x2000b064
 800e610:	2000b050 	.word	0x2000b050
 800e614:	2000b06a 	.word	0x2000b06a
 800e618:	2302      	movs	r3, #2
 800e61a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e61e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e622:	b29a      	uxth	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e628:	fb12 f303 	smulbb	r3, r2, r3
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e630:	4293      	cmp	r3, r2
 800e632:	bf28      	it	cs
 800e634:	4613      	movcs	r3, r2
 800e636:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e63e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e640:	4413      	add	r3, r2
 800e642:	b29a      	uxth	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d309      	bcc.n	800e662 <tcp_receive+0x2c6>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e654:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e656:	4413      	add	r3, r2
 800e658:	b29a      	uxth	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e660:	e04e      	b.n	800e700 <tcp_receive+0x364>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e668:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e66c:	e048      	b.n	800e700 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e674:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e676:	4413      	add	r3, r2
 800e678:	b29a      	uxth	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e680:	429a      	cmp	r2, r3
 800e682:	d309      	bcc.n	800e698 <tcp_receive+0x2fc>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e68a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e68c:	4413      	add	r3, r2
 800e68e:	b29a      	uxth	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e696:	e004      	b.n	800e6a2 <tcp_receive+0x306>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e69e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d326      	bcc.n	800e700 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6be:	1ad3      	subs	r3, r2, r3
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6d2:	4413      	add	r3, r2
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d30a      	bcc.n	800e6f6 <tcp_receive+0x35a>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6ea:	4413      	add	r3, r2
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e6f4:	e004      	b.n	800e700 <tcp_receive+0x364>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e708:	4a98      	ldr	r2, [pc, #608]	; (800e96c <tcp_receive+0x5d0>)
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7ff fdca 	bl	800e2a4 <tcp_free_acked_segments>
 800e710:	4602      	mov	r2, r0
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e71e:	4a94      	ldr	r2, [pc, #592]	; (800e970 <tcp_receive+0x5d4>)
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7ff fdbf 	bl	800e2a4 <tcp_free_acked_segments>
 800e726:	4602      	mov	r2, r0
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e730:	2b00      	cmp	r3, #0
 800e732:	d104      	bne.n	800e73e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e73a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e73c:	e002      	b.n	800e744 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d103      	bne.n	800e75a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2200      	movs	r2, #0
 800e756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e760:	4b84      	ldr	r3, [pc, #528]	; (800e974 <tcp_receive+0x5d8>)
 800e762:	881b      	ldrh	r3, [r3, #0]
 800e764:	4413      	add	r3, r2
 800e766:	b29a      	uxth	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	8b5b      	ldrh	r3, [r3, #26]
 800e772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e776:	2b00      	cmp	r3, #0
 800e778:	d035      	beq.n	800e7e6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d118      	bne.n	800e7b4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00c      	beq.n	800e7a4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	4618      	mov	r0, r3
 800e798:	f7fb f9bb 	bl	8009b12 <lwip_htonl>
 800e79c:	4603      	mov	r3, r0
 800e79e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	dc20      	bgt.n	800e7e6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	8b5b      	ldrh	r3, [r3, #26]
 800e7a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e7b2:	e018      	b.n	800e7e6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fb f9a6 	bl	8009b12 <lwip_htonl>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	1ae3      	subs	r3, r4, r3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	dc0b      	bgt.n	800e7e6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	8b5b      	ldrh	r3, [r3, #26]
 800e7d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e7dc:	e003      	b.n	800e7e6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f001 ff76 	bl	80106d0 <tcp_send_empty_ack>
 800e7e4:	e000      	b.n	800e7e8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e7e6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d05b      	beq.n	800e8a8 <tcp_receive+0x50c>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7f4:	4b60      	ldr	r3, [pc, #384]	; (800e978 <tcp_receive+0x5dc>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	da54      	bge.n	800e8a8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e7fe:	4b5f      	ldr	r3, [pc, #380]	; (800e97c <tcp_receive+0x5e0>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	b29a      	uxth	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e808:	b29b      	uxth	r3, r3
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e812:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e81c:	10db      	asrs	r3, r3, #3
 800e81e:	b21b      	sxth	r3, r3
 800e820:	b29b      	uxth	r3, r3
 800e822:	1ad3      	subs	r3, r2, r3
 800e824:	b29b      	uxth	r3, r3
 800e826:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e830:	b29a      	uxth	r2, r3
 800e832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e836:	4413      	add	r3, r2
 800e838:	b29b      	uxth	r3, r3
 800e83a:	b21a      	sxth	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e840:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e844:	2b00      	cmp	r3, #0
 800e846:	da05      	bge.n	800e854 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e84c:	425b      	negs	r3, r3
 800e84e:	b29b      	uxth	r3, r3
 800e850:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e854:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e85e:	109b      	asrs	r3, r3, #2
 800e860:	b21b      	sxth	r3, r3
 800e862:	b29b      	uxth	r3, r3
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	b29b      	uxth	r3, r3
 800e868:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e872:	b29a      	uxth	r2, r3
 800e874:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e878:	4413      	add	r3, r2
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	b21a      	sxth	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e888:	10db      	asrs	r3, r3, #3
 800e88a:	b21b      	sxth	r3, r3
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e894:	b29b      	uxth	r3, r3
 800e896:	4413      	add	r3, r2
 800e898:	b29b      	uxth	r3, r3
 800e89a:	b21a      	sxth	r2, r3
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e8a8:	4b35      	ldr	r3, [pc, #212]	; (800e980 <tcp_receive+0x5e4>)
 800e8aa:	881b      	ldrh	r3, [r3, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 84e2 	beq.w	800f276 <tcp_receive+0xeda>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	7d1b      	ldrb	r3, [r3, #20]
 800e8b6:	2b06      	cmp	r3, #6
 800e8b8:	f200 84dd 	bhi.w	800f276 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8c0:	4b30      	ldr	r3, [pc, #192]	; (800e984 <tcp_receive+0x5e8>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f2c0 808f 	blt.w	800e9ec <tcp_receive+0x650>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8d2:	4b2b      	ldr	r3, [pc, #172]	; (800e980 <tcp_receive+0x5e4>)
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4b2a      	ldr	r3, [pc, #168]	; (800e984 <tcp_receive+0x5e8>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	440b      	add	r3, r1
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	f300 8082 	bgt.w	800e9ec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e8e8:	4b27      	ldr	r3, [pc, #156]	; (800e988 <tcp_receive+0x5ec>)
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8f2:	4b24      	ldr	r3, [pc, #144]	; (800e984 <tcp_receive+0x5e8>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e8fa:	4b23      	ldr	r3, [pc, #140]	; (800e988 <tcp_receive+0x5ec>)
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d106      	bne.n	800e910 <tcp_receive+0x574>
 800e902:	4b22      	ldr	r3, [pc, #136]	; (800e98c <tcp_receive+0x5f0>)
 800e904:	f240 5294 	movw	r2, #1428	; 0x594
 800e908:	4921      	ldr	r1, [pc, #132]	; (800e990 <tcp_receive+0x5f4>)
 800e90a:	4822      	ldr	r0, [pc, #136]	; (800e994 <tcp_receive+0x5f8>)
 800e90c:	f007 f836 	bl	801597c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e916:	4293      	cmp	r3, r2
 800e918:	d906      	bls.n	800e928 <tcp_receive+0x58c>
 800e91a:	4b1c      	ldr	r3, [pc, #112]	; (800e98c <tcp_receive+0x5f0>)
 800e91c:	f240 5295 	movw	r2, #1429	; 0x595
 800e920:	491d      	ldr	r1, [pc, #116]	; (800e998 <tcp_receive+0x5fc>)
 800e922:	481c      	ldr	r0, [pc, #112]	; (800e994 <tcp_receive+0x5f8>)
 800e924:	f007 f82a 	bl	801597c <iprintf>
      off = (u16_t)off32;
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e92e:	4b16      	ldr	r3, [pc, #88]	; (800e988 <tcp_receive+0x5ec>)
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	891b      	ldrh	r3, [r3, #8]
 800e934:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e938:	429a      	cmp	r2, r3
 800e93a:	d906      	bls.n	800e94a <tcp_receive+0x5ae>
 800e93c:	4b13      	ldr	r3, [pc, #76]	; (800e98c <tcp_receive+0x5f0>)
 800e93e:	f240 5297 	movw	r2, #1431	; 0x597
 800e942:	4916      	ldr	r1, [pc, #88]	; (800e99c <tcp_receive+0x600>)
 800e944:	4813      	ldr	r0, [pc, #76]	; (800e994 <tcp_receive+0x5f8>)
 800e946:	f007 f819 	bl	801597c <iprintf>
      inseg.len -= off;
 800e94a:	4b0f      	ldr	r3, [pc, #60]	; (800e988 <tcp_receive+0x5ec>)
 800e94c:	891a      	ldrh	r2, [r3, #8]
 800e94e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	b29a      	uxth	r2, r3
 800e956:	4b0c      	ldr	r3, [pc, #48]	; (800e988 <tcp_receive+0x5ec>)
 800e958:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e95a:	4b0b      	ldr	r3, [pc, #44]	; (800e988 <tcp_receive+0x5ec>)
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	891a      	ldrh	r2, [r3, #8]
 800e960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e968:	e02a      	b.n	800e9c0 <tcp_receive+0x624>
 800e96a:	bf00      	nop
 800e96c:	08018540 	.word	0x08018540
 800e970:	08018548 	.word	0x08018548
 800e974:	2000b068 	.word	0x2000b068
 800e978:	2000b064 	.word	0x2000b064
 800e97c:	2000b028 	.word	0x2000b028
 800e980:	2000b06a 	.word	0x2000b06a
 800e984:	2000b060 	.word	0x2000b060
 800e988:	2000b040 	.word	0x2000b040
 800e98c:	080181d8 	.word	0x080181d8
 800e990:	08018550 	.word	0x08018550
 800e994:	08018224 	.word	0x08018224
 800e998:	08018560 	.word	0x08018560
 800e99c:	08018570 	.word	0x08018570
        off -= p->len;
 800e9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9a2:	895b      	ldrh	r3, [r3, #10]
 800e9a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e9a8:	1ad3      	subs	r3, r2, r3
 800e9aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9c2:	895b      	ldrh	r3, [r3, #10]
 800e9c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d8e9      	bhi.n	800e9a0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e9cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e9d4:	f7fc fb6c 	bl	800b0b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9dc:	4a91      	ldr	r2, [pc, #580]	; (800ec24 <tcp_receive+0x888>)
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	4b91      	ldr	r3, [pc, #580]	; (800ec28 <tcp_receive+0x88c>)
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	4a8f      	ldr	r2, [pc, #572]	; (800ec24 <tcp_receive+0x888>)
 800e9e6:	6812      	ldr	r2, [r2, #0]
 800e9e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e9ea:	e00d      	b.n	800ea08 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e9ec:	4b8d      	ldr	r3, [pc, #564]	; (800ec24 <tcp_receive+0x888>)
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	da06      	bge.n	800ea08 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	8b5b      	ldrh	r3, [r3, #26]
 800e9fe:	f043 0302 	orr.w	r3, r3, #2
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea08:	4b86      	ldr	r3, [pc, #536]	; (800ec24 <tcp_receive+0x888>)
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f2c0 842a 	blt.w	800f26c <tcp_receive+0xed0>
 800ea18:	4b82      	ldr	r3, [pc, #520]	; (800ec24 <tcp_receive+0x888>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea20:	6879      	ldr	r1, [r7, #4]
 800ea22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea24:	440b      	add	r3, r1
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	3301      	adds	r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f300 841e 	bgt.w	800f26c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea34:	4b7b      	ldr	r3, [pc, #492]	; (800ec24 <tcp_receive+0x888>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	f040 829a 	bne.w	800ef72 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ea3e:	4b7a      	ldr	r3, [pc, #488]	; (800ec28 <tcp_receive+0x88c>)
 800ea40:	891c      	ldrh	r4, [r3, #8]
 800ea42:	4b79      	ldr	r3, [pc, #484]	; (800ec28 <tcp_receive+0x88c>)
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	899b      	ldrh	r3, [r3, #12]
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fb f84c 	bl	8009ae8 <lwip_htons>
 800ea50:	4603      	mov	r3, r0
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	f003 0303 	and.w	r3, r3, #3
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d001      	beq.n	800ea60 <tcp_receive+0x6c4>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e000      	b.n	800ea62 <tcp_receive+0x6c6>
 800ea60:	2300      	movs	r3, #0
 800ea62:	4423      	add	r3, r4
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	4b71      	ldr	r3, [pc, #452]	; (800ec2c <tcp_receive+0x890>)
 800ea68:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea6e:	4b6f      	ldr	r3, [pc, #444]	; (800ec2c <tcp_receive+0x890>)
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d275      	bcs.n	800eb62 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ea76:	4b6c      	ldr	r3, [pc, #432]	; (800ec28 <tcp_receive+0x88c>)
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	899b      	ldrh	r3, [r3, #12]
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fb f832 	bl	8009ae8 <lwip_htons>
 800ea84:	4603      	mov	r3, r0
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	f003 0301 	and.w	r3, r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d01f      	beq.n	800ead0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ea90:	4b65      	ldr	r3, [pc, #404]	; (800ec28 <tcp_receive+0x88c>)
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	899b      	ldrh	r3, [r3, #12]
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	b21b      	sxth	r3, r3
 800ea9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea9e:	b21c      	sxth	r4, r3
 800eaa0:	4b61      	ldr	r3, [pc, #388]	; (800ec28 <tcp_receive+0x88c>)
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	899b      	ldrh	r3, [r3, #12]
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fb f81d 	bl	8009ae8 <lwip_htons>
 800eaae:	4603      	mov	r3, r0
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fb f814 	bl	8009ae8 <lwip_htons>
 800eac0:	4603      	mov	r3, r0
 800eac2:	b21b      	sxth	r3, r3
 800eac4:	4323      	orrs	r3, r4
 800eac6:	b21a      	sxth	r2, r3
 800eac8:	4b57      	ldr	r3, [pc, #348]	; (800ec28 <tcp_receive+0x88c>)
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	b292      	uxth	r2, r2
 800eace:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ead4:	4b54      	ldr	r3, [pc, #336]	; (800ec28 <tcp_receive+0x88c>)
 800ead6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ead8:	4b53      	ldr	r3, [pc, #332]	; (800ec28 <tcp_receive+0x88c>)
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	899b      	ldrh	r3, [r3, #12]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fb f801 	bl	8009ae8 <lwip_htons>
 800eae6:	4603      	mov	r3, r0
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	f003 0302 	and.w	r3, r3, #2
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d005      	beq.n	800eafe <tcp_receive+0x762>
            inseg.len -= 1;
 800eaf2:	4b4d      	ldr	r3, [pc, #308]	; (800ec28 <tcp_receive+0x88c>)
 800eaf4:	891b      	ldrh	r3, [r3, #8]
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	4b4b      	ldr	r3, [pc, #300]	; (800ec28 <tcp_receive+0x88c>)
 800eafc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800eafe:	4b4a      	ldr	r3, [pc, #296]	; (800ec28 <tcp_receive+0x88c>)
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	4a49      	ldr	r2, [pc, #292]	; (800ec28 <tcp_receive+0x88c>)
 800eb04:	8912      	ldrh	r2, [r2, #8]
 800eb06:	4611      	mov	r1, r2
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fc f9d1 	bl	800aeb0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800eb0e:	4b46      	ldr	r3, [pc, #280]	; (800ec28 <tcp_receive+0x88c>)
 800eb10:	891c      	ldrh	r4, [r3, #8]
 800eb12:	4b45      	ldr	r3, [pc, #276]	; (800ec28 <tcp_receive+0x88c>)
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	899b      	ldrh	r3, [r3, #12]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fa ffe4 	bl	8009ae8 <lwip_htons>
 800eb20:	4603      	mov	r3, r0
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	f003 0303 	and.w	r3, r3, #3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <tcp_receive+0x794>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e000      	b.n	800eb32 <tcp_receive+0x796>
 800eb30:	2300      	movs	r3, #0
 800eb32:	4423      	add	r3, r4
 800eb34:	b29a      	uxth	r2, r3
 800eb36:	4b3d      	ldr	r3, [pc, #244]	; (800ec2c <tcp_receive+0x890>)
 800eb38:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eb3a:	4b3c      	ldr	r3, [pc, #240]	; (800ec2c <tcp_receive+0x890>)
 800eb3c:	881b      	ldrh	r3, [r3, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	4b38      	ldr	r3, [pc, #224]	; (800ec24 <tcp_receive+0x888>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	441a      	add	r2, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4a:	6879      	ldr	r1, [r7, #4]
 800eb4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb4e:	440b      	add	r3, r1
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d006      	beq.n	800eb62 <tcp_receive+0x7c6>
 800eb54:	4b36      	ldr	r3, [pc, #216]	; (800ec30 <tcp_receive+0x894>)
 800eb56:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800eb5a:	4936      	ldr	r1, [pc, #216]	; (800ec34 <tcp_receive+0x898>)
 800eb5c:	4836      	ldr	r0, [pc, #216]	; (800ec38 <tcp_receive+0x89c>)
 800eb5e:	f006 ff0d 	bl	801597c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 80e7 	beq.w	800ed3a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eb6c:	4b2e      	ldr	r3, [pc, #184]	; (800ec28 <tcp_receive+0x88c>)
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	899b      	ldrh	r3, [r3, #12]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fa ffb7 	bl	8009ae8 <lwip_htons>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d010      	beq.n	800eba8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800eb86:	e00a      	b.n	800eb9e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb8c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f7fd fd92 	bl	800c6c2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1f0      	bne.n	800eb88 <tcp_receive+0x7ec>
 800eba6:	e0c8      	b.n	800ed3a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ebae:	e052      	b.n	800ec56 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ebb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	899b      	ldrh	r3, [r3, #12]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fa ff95 	bl	8009ae8 <lwip_htons>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	f003 0301 	and.w	r3, r3, #1
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d03d      	beq.n	800ec46 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ebca:	4b17      	ldr	r3, [pc, #92]	; (800ec28 <tcp_receive+0x88c>)
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	899b      	ldrh	r3, [r3, #12]
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fa ff88 	bl	8009ae8 <lwip_htons>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d130      	bne.n	800ec46 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ebe4:	4b10      	ldr	r3, [pc, #64]	; (800ec28 <tcp_receive+0x88c>)
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	899b      	ldrh	r3, [r3, #12]
 800ebea:	b29c      	uxth	r4, r3
 800ebec:	2001      	movs	r0, #1
 800ebee:	f7fa ff7b 	bl	8009ae8 <lwip_htons>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	4b0c      	ldr	r3, [pc, #48]	; (800ec28 <tcp_receive+0x88c>)
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	4322      	orrs	r2, r4
 800ebfc:	b292      	uxth	r2, r2
 800ebfe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ec00:	4b09      	ldr	r3, [pc, #36]	; (800ec28 <tcp_receive+0x88c>)
 800ec02:	891c      	ldrh	r4, [r3, #8]
 800ec04:	4b08      	ldr	r3, [pc, #32]	; (800ec28 <tcp_receive+0x88c>)
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	899b      	ldrh	r3, [r3, #12]
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fa ff6b 	bl	8009ae8 <lwip_htons>
 800ec12:	4603      	mov	r3, r0
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	f003 0303 	and.w	r3, r3, #3
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00e      	beq.n	800ec3c <tcp_receive+0x8a0>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	e00d      	b.n	800ec3e <tcp_receive+0x8a2>
 800ec22:	bf00      	nop
 800ec24:	2000b060 	.word	0x2000b060
 800ec28:	2000b040 	.word	0x2000b040
 800ec2c:	2000b06a 	.word	0x2000b06a
 800ec30:	080181d8 	.word	0x080181d8
 800ec34:	08018580 	.word	0x08018580
 800ec38:	08018224 	.word	0x08018224
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	4423      	add	r3, r4
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	4b98      	ldr	r3, [pc, #608]	; (800eea4 <tcp_receive+0xb08>)
 800ec44:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ec46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec48:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ec4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ec50:	6938      	ldr	r0, [r7, #16]
 800ec52:	f7fd fd36 	bl	800c6c2 <tcp_seg_free>
            while (next &&
 800ec56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00e      	beq.n	800ec7a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ec5c:	4b91      	ldr	r3, [pc, #580]	; (800eea4 <tcp_receive+0xb08>)
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	461a      	mov	r2, r3
 800ec62:	4b91      	ldr	r3, [pc, #580]	; (800eea8 <tcp_receive+0xb0c>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	441a      	add	r2, r3
 800ec68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec70:	8909      	ldrh	r1, [r1, #8]
 800ec72:	440b      	add	r3, r1
 800ec74:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	da9a      	bge.n	800ebb0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ec7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d059      	beq.n	800ed34 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ec80:	4b88      	ldr	r3, [pc, #544]	; (800eea4 <tcp_receive+0xb08>)
 800ec82:	881b      	ldrh	r3, [r3, #0]
 800ec84:	461a      	mov	r2, r3
 800ec86:	4b88      	ldr	r3, [pc, #544]	; (800eea8 <tcp_receive+0xb0c>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	441a      	add	r2, r3
 800ec8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	dd4d      	ble.n	800ed34 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ec98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	4b81      	ldr	r3, [pc, #516]	; (800eea8 <tcp_receive+0xb0c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	4b80      	ldr	r3, [pc, #512]	; (800eeac <tcp_receive+0xb10>)
 800ecac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ecae:	4b7f      	ldr	r3, [pc, #508]	; (800eeac <tcp_receive+0xb10>)
 800ecb0:	68db      	ldr	r3, [r3, #12]
 800ecb2:	899b      	ldrh	r3, [r3, #12]
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fa ff16 	bl	8009ae8 <lwip_htons>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	f003 0302 	and.w	r3, r3, #2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d005      	beq.n	800ecd4 <tcp_receive+0x938>
                inseg.len -= 1;
 800ecc8:	4b78      	ldr	r3, [pc, #480]	; (800eeac <tcp_receive+0xb10>)
 800ecca:	891b      	ldrh	r3, [r3, #8]
 800eccc:	3b01      	subs	r3, #1
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	4b76      	ldr	r3, [pc, #472]	; (800eeac <tcp_receive+0xb10>)
 800ecd2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ecd4:	4b75      	ldr	r3, [pc, #468]	; (800eeac <tcp_receive+0xb10>)
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	4a74      	ldr	r2, [pc, #464]	; (800eeac <tcp_receive+0xb10>)
 800ecda:	8912      	ldrh	r2, [r2, #8]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fc f8e6 	bl	800aeb0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ece4:	4b71      	ldr	r3, [pc, #452]	; (800eeac <tcp_receive+0xb10>)
 800ece6:	891c      	ldrh	r4, [r3, #8]
 800ece8:	4b70      	ldr	r3, [pc, #448]	; (800eeac <tcp_receive+0xb10>)
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	899b      	ldrh	r3, [r3, #12]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fa fef9 	bl	8009ae8 <lwip_htons>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	f003 0303 	and.w	r3, r3, #3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d001      	beq.n	800ed06 <tcp_receive+0x96a>
 800ed02:	2301      	movs	r3, #1
 800ed04:	e000      	b.n	800ed08 <tcp_receive+0x96c>
 800ed06:	2300      	movs	r3, #0
 800ed08:	4423      	add	r3, r4
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	4b65      	ldr	r3, [pc, #404]	; (800eea4 <tcp_receive+0xb08>)
 800ed0e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ed10:	4b64      	ldr	r3, [pc, #400]	; (800eea4 <tcp_receive+0xb08>)
 800ed12:	881b      	ldrh	r3, [r3, #0]
 800ed14:	461a      	mov	r2, r3
 800ed16:	4b64      	ldr	r3, [pc, #400]	; (800eea8 <tcp_receive+0xb0c>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	441a      	add	r2, r3
 800ed1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d006      	beq.n	800ed34 <tcp_receive+0x998>
 800ed26:	4b62      	ldr	r3, [pc, #392]	; (800eeb0 <tcp_receive+0xb14>)
 800ed28:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ed2c:	4961      	ldr	r1, [pc, #388]	; (800eeb4 <tcp_receive+0xb18>)
 800ed2e:	4862      	ldr	r0, [pc, #392]	; (800eeb8 <tcp_receive+0xb1c>)
 800ed30:	f006 fe24 	bl	801597c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed38:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ed3a:	4b5a      	ldr	r3, [pc, #360]	; (800eea4 <tcp_receive+0xb08>)
 800ed3c:	881b      	ldrh	r3, [r3, #0]
 800ed3e:	461a      	mov	r2, r3
 800ed40:	4b59      	ldr	r3, [pc, #356]	; (800eea8 <tcp_receive+0xb0c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	441a      	add	r2, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed4e:	4b55      	ldr	r3, [pc, #340]	; (800eea4 <tcp_receive+0xb08>)
 800ed50:	881b      	ldrh	r3, [r3, #0]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d206      	bcs.n	800ed64 <tcp_receive+0x9c8>
 800ed56:	4b56      	ldr	r3, [pc, #344]	; (800eeb0 <tcp_receive+0xb14>)
 800ed58:	f240 6207 	movw	r2, #1543	; 0x607
 800ed5c:	4957      	ldr	r1, [pc, #348]	; (800eebc <tcp_receive+0xb20>)
 800ed5e:	4856      	ldr	r0, [pc, #344]	; (800eeb8 <tcp_receive+0xb1c>)
 800ed60:	f006 fe0c 	bl	801597c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed68:	4b4e      	ldr	r3, [pc, #312]	; (800eea4 <tcp_receive+0xb08>)
 800ed6a:	881b      	ldrh	r3, [r3, #0]
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7fc ffc5 	bl	800bd04 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ed7a:	4b4c      	ldr	r3, [pc, #304]	; (800eeac <tcp_receive+0xb10>)
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	891b      	ldrh	r3, [r3, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d006      	beq.n	800ed92 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ed84:	4b49      	ldr	r3, [pc, #292]	; (800eeac <tcp_receive+0xb10>)
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	4a4d      	ldr	r2, [pc, #308]	; (800eec0 <tcp_receive+0xb24>)
 800ed8a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ed8c:	4b47      	ldr	r3, [pc, #284]	; (800eeac <tcp_receive+0xb10>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed92:	4b46      	ldr	r3, [pc, #280]	; (800eeac <tcp_receive+0xb10>)
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	899b      	ldrh	r3, [r3, #12]
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fa fea4 	bl	8009ae8 <lwip_htons>
 800eda0:	4603      	mov	r3, r0
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	f003 0301 	and.w	r3, r3, #1
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f000 80b8 	beq.w	800ef1e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800edae:	4b45      	ldr	r3, [pc, #276]	; (800eec4 <tcp_receive+0xb28>)
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	f043 0320 	orr.w	r3, r3, #32
 800edb6:	b2da      	uxtb	r2, r3
 800edb8:	4b42      	ldr	r3, [pc, #264]	; (800eec4 <tcp_receive+0xb28>)
 800edba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800edbc:	e0af      	b.n	800ef1e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	4a36      	ldr	r2, [pc, #216]	; (800eea8 <tcp_receive+0xb0c>)
 800edce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	891b      	ldrh	r3, [r3, #8]
 800edd4:	461c      	mov	r4, r3
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	899b      	ldrh	r3, [r3, #12]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	4618      	mov	r0, r3
 800ede0:	f7fa fe82 	bl	8009ae8 <lwip_htons>
 800ede4:	4603      	mov	r3, r0
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	f003 0303 	and.w	r3, r3, #3
 800edec:	2b00      	cmp	r3, #0
 800edee:	d001      	beq.n	800edf4 <tcp_receive+0xa58>
 800edf0:	2301      	movs	r3, #1
 800edf2:	e000      	b.n	800edf6 <tcp_receive+0xa5a>
 800edf4:	2300      	movs	r3, #0
 800edf6:	191a      	adds	r2, r3, r4
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfc:	441a      	add	r2, r3
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee06:	461c      	mov	r4, r3
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	891b      	ldrh	r3, [r3, #8]
 800ee0c:	461d      	mov	r5, r3
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	899b      	ldrh	r3, [r3, #12]
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fa fe66 	bl	8009ae8 <lwip_htons>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	f003 0303 	and.w	r3, r3, #3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <tcp_receive+0xa90>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e000      	b.n	800ee2e <tcp_receive+0xa92>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	442b      	add	r3, r5
 800ee30:	429c      	cmp	r4, r3
 800ee32:	d206      	bcs.n	800ee42 <tcp_receive+0xaa6>
 800ee34:	4b1e      	ldr	r3, [pc, #120]	; (800eeb0 <tcp_receive+0xb14>)
 800ee36:	f240 622b 	movw	r2, #1579	; 0x62b
 800ee3a:	4923      	ldr	r1, [pc, #140]	; (800eec8 <tcp_receive+0xb2c>)
 800ee3c:	481e      	ldr	r0, [pc, #120]	; (800eeb8 <tcp_receive+0xb1c>)
 800ee3e:	f006 fd9d 	bl	801597c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	891b      	ldrh	r3, [r3, #8]
 800ee46:	461c      	mov	r4, r3
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	899b      	ldrh	r3, [r3, #12]
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fa fe49 	bl	8009ae8 <lwip_htons>
 800ee56:	4603      	mov	r3, r0
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	f003 0303 	and.w	r3, r3, #3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d001      	beq.n	800ee66 <tcp_receive+0xaca>
 800ee62:	2301      	movs	r3, #1
 800ee64:	e000      	b.n	800ee68 <tcp_receive+0xacc>
 800ee66:	2300      	movs	r3, #0
 800ee68:	1919      	adds	r1, r3, r4
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ee6e:	b28b      	uxth	r3, r1
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	b29a      	uxth	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7fc ff43 	bl	800bd04 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	891b      	ldrh	r3, [r3, #8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d028      	beq.n	800eeda <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ee88:	4b0d      	ldr	r3, [pc, #52]	; (800eec0 <tcp_receive+0xb24>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d01d      	beq.n	800eecc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ee90:	4b0b      	ldr	r3, [pc, #44]	; (800eec0 <tcp_receive+0xb24>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4610      	mov	r0, r2
 800ee9c:	f7fc fa50 	bl	800b340 <pbuf_cat>
 800eea0:	e018      	b.n	800eed4 <tcp_receive+0xb38>
 800eea2:	bf00      	nop
 800eea4:	2000b06a 	.word	0x2000b06a
 800eea8:	2000b060 	.word	0x2000b060
 800eeac:	2000b040 	.word	0x2000b040
 800eeb0:	080181d8 	.word	0x080181d8
 800eeb4:	080185b8 	.word	0x080185b8
 800eeb8:	08018224 	.word	0x08018224
 800eebc:	080185f4 	.word	0x080185f4
 800eec0:	2000b070 	.word	0x2000b070
 800eec4:	2000b06d 	.word	0x2000b06d
 800eec8:	08018614 	.word	0x08018614
            } else {
              recv_data = cseg->p;
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	4a70      	ldr	r2, [pc, #448]	; (800f094 <tcp_receive+0xcf8>)
 800eed2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	2200      	movs	r2, #0
 800eed8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	899b      	ldrh	r3, [r3, #12]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fa fe00 	bl	8009ae8 <lwip_htons>
 800eee8:	4603      	mov	r3, r0
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	f003 0301 	and.w	r3, r3, #1
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00d      	beq.n	800ef10 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800eef4:	4b68      	ldr	r3, [pc, #416]	; (800f098 <tcp_receive+0xcfc>)
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	f043 0320 	orr.w	r3, r3, #32
 800eefc:	b2da      	uxtb	r2, r3
 800eefe:	4b66      	ldr	r3, [pc, #408]	; (800f098 <tcp_receive+0xcfc>)
 800ef00:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	7d1b      	ldrb	r3, [r3, #20]
 800ef06:	2b04      	cmp	r3, #4
 800ef08:	d102      	bne.n	800ef10 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2207      	movs	r2, #7
 800ef0e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ef18:	68b8      	ldr	r0, [r7, #8]
 800ef1a:	f7fd fbd2 	bl	800c6c2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d008      	beq.n	800ef38 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	685a      	ldr	r2, [r3, #4]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ef32:	429a      	cmp	r2, r3
 800ef34:	f43f af43 	beq.w	800edbe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	8b5b      	ldrh	r3, [r3, #26]
 800ef3c:	f003 0301 	and.w	r3, r3, #1
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d00e      	beq.n	800ef62 <tcp_receive+0xbc6>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	8b5b      	ldrh	r3, [r3, #26]
 800ef48:	f023 0301 	bic.w	r3, r3, #1
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	835a      	strh	r2, [r3, #26]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	8b5b      	ldrh	r3, [r3, #26]
 800ef56:	f043 0302 	orr.w	r3, r3, #2
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ef60:	e188      	b.n	800f274 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	8b5b      	ldrh	r3, [r3, #26]
 800ef66:	f043 0301 	orr.w	r3, r3, #1
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ef70:	e180      	b.n	800f274 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d106      	bne.n	800ef88 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ef7a:	4848      	ldr	r0, [pc, #288]	; (800f09c <tcp_receive+0xd00>)
 800ef7c:	f7fd fbba 	bl	800c6f4 <tcp_seg_copy>
 800ef80:	4602      	mov	r2, r0
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	675a      	str	r2, [r3, #116]	; 0x74
 800ef86:	e16d      	b.n	800f264 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef90:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef92:	e157      	b.n	800f244 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	685a      	ldr	r2, [r3, #4]
 800ef9a:	4b41      	ldr	r3, [pc, #260]	; (800f0a0 <tcp_receive+0xd04>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d11d      	bne.n	800efde <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800efa2:	4b3e      	ldr	r3, [pc, #248]	; (800f09c <tcp_receive+0xd00>)
 800efa4:	891a      	ldrh	r2, [r3, #8]
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	891b      	ldrh	r3, [r3, #8]
 800efaa:	429a      	cmp	r2, r3
 800efac:	f240 814f 	bls.w	800f24e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800efb0:	483a      	ldr	r0, [pc, #232]	; (800f09c <tcp_receive+0xd00>)
 800efb2:	f7fd fb9f 	bl	800c6f4 <tcp_seg_copy>
 800efb6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f000 8149 	beq.w	800f252 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800efc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d003      	beq.n	800efce <tcp_receive+0xc32>
                    prev->next = cseg;
 800efc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc8:	697a      	ldr	r2, [r7, #20]
 800efca:	601a      	str	r2, [r3, #0]
 800efcc:	e002      	b.n	800efd4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	697a      	ldr	r2, [r7, #20]
 800efd2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800efd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efd6:	6978      	ldr	r0, [r7, #20]
 800efd8:	f7ff f8dc 	bl	800e194 <tcp_oos_insert_segment>
                }
                break;
 800efdc:	e139      	b.n	800f252 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800efde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d117      	bne.n	800f014 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800efe4:	4b2e      	ldr	r3, [pc, #184]	; (800f0a0 <tcp_receive+0xd04>)
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	da57      	bge.n	800f0a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800eff4:	4829      	ldr	r0, [pc, #164]	; (800f09c <tcp_receive+0xd00>)
 800eff6:	f7fd fb7d 	bl	800c6f4 <tcp_seg_copy>
 800effa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	2b00      	cmp	r3, #0
 800f000:	f000 8129 	beq.w	800f256 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	69ba      	ldr	r2, [r7, #24]
 800f008:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f00a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f00c:	69b8      	ldr	r0, [r7, #24]
 800f00e:	f7ff f8c1 	bl	800e194 <tcp_oos_insert_segment>
                  }
                  break;
 800f012:	e120      	b.n	800f256 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f014:	4b22      	ldr	r3, [pc, #136]	; (800f0a0 <tcp_receive+0xd04>)
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	1ad3      	subs	r3, r2, r3
 800f020:	3b01      	subs	r3, #1
 800f022:	2b00      	cmp	r3, #0
 800f024:	db3e      	blt.n	800f0a4 <tcp_receive+0xd08>
 800f026:	4b1e      	ldr	r3, [pc, #120]	; (800f0a0 <tcp_receive+0xd04>)
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	3301      	adds	r3, #1
 800f034:	2b00      	cmp	r3, #0
 800f036:	dc35      	bgt.n	800f0a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f038:	4818      	ldr	r0, [pc, #96]	; (800f09c <tcp_receive+0xd00>)
 800f03a:	f7fd fb5b 	bl	800c6f4 <tcp_seg_copy>
 800f03e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	2b00      	cmp	r3, #0
 800f044:	f000 8109 	beq.w	800f25a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f050:	8912      	ldrh	r2, [r2, #8]
 800f052:	441a      	add	r2, r3
 800f054:	4b12      	ldr	r3, [pc, #72]	; (800f0a0 <tcp_receive+0xd04>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	1ad3      	subs	r3, r2, r3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	dd12      	ble.n	800f084 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f05e:	4b10      	ldr	r3, [pc, #64]	; (800f0a0 <tcp_receive+0xd04>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	b29a      	uxth	r2, r3
 800f064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	b29a      	uxth	r2, r3
 800f070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f072:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f076:	685a      	ldr	r2, [r3, #4]
 800f078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f07a:	891b      	ldrh	r3, [r3, #8]
 800f07c:	4619      	mov	r1, r3
 800f07e:	4610      	mov	r0, r2
 800f080:	f7fb ff16 	bl	800aeb0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f086:	69fa      	ldr	r2, [r7, #28]
 800f088:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f08a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f08c:	69f8      	ldr	r0, [r7, #28]
 800f08e:	f7ff f881 	bl	800e194 <tcp_oos_insert_segment>
                  }
                  break;
 800f092:	e0e2      	b.n	800f25a <tcp_receive+0xebe>
 800f094:	2000b070 	.word	0x2000b070
 800f098:	2000b06d 	.word	0x2000b06d
 800f09c:	2000b040 	.word	0x2000b040
 800f0a0:	2000b060 	.word	0x2000b060
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f040 80c6 	bne.w	800f23e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f0b2:	4b80      	ldr	r3, [pc, #512]	; (800f2b4 <tcp_receive+0xf18>)
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	f340 80bd 	ble.w	800f23e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	899b      	ldrh	r3, [r3, #12]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fa fd0b 	bl	8009ae8 <lwip_htons>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f040 80bf 	bne.w	800f25e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f0e0:	4875      	ldr	r0, [pc, #468]	; (800f2b8 <tcp_receive+0xf1c>)
 800f0e2:	f7fd fb07 	bl	800c6f4 <tcp_seg_copy>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f000 80b6 	beq.w	800f262 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0fe:	8912      	ldrh	r2, [r2, #8]
 800f100:	441a      	add	r2, r3
 800f102:	4b6c      	ldr	r3, [pc, #432]	; (800f2b4 <tcp_receive+0xf18>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	2b00      	cmp	r3, #0
 800f10a:	dd12      	ble.n	800f132 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f10c:	4b69      	ldr	r3, [pc, #420]	; (800f2b4 <tcp_receive+0xf18>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	b29a      	uxth	r2, r3
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f120:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f124:	685a      	ldr	r2, [r3, #4]
 800f126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f128:	891b      	ldrh	r3, [r3, #8]
 800f12a:	4619      	mov	r1, r3
 800f12c:	4610      	mov	r0, r2
 800f12e:	f7fb febf 	bl	800aeb0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f132:	4b62      	ldr	r3, [pc, #392]	; (800f2bc <tcp_receive+0xf20>)
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	461a      	mov	r2, r3
 800f138:	4b5e      	ldr	r3, [pc, #376]	; (800f2b4 <tcp_receive+0xf18>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	441a      	add	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f142:	6879      	ldr	r1, [r7, #4]
 800f144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f146:	440b      	add	r3, r1
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f340 8089 	ble.w	800f262 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	899b      	ldrh	r3, [r3, #12]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fa fcc4 	bl	8009ae8 <lwip_htons>
 800f160:	4603      	mov	r3, r0
 800f162:	b2db      	uxtb	r3, r3
 800f164:	f003 0301 	and.w	r3, r3, #1
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d022      	beq.n	800f1b2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	899b      	ldrh	r3, [r3, #12]
 800f174:	b29b      	uxth	r3, r3
 800f176:	b21b      	sxth	r3, r3
 800f178:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f17c:	b21c      	sxth	r4, r3
 800f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	899b      	ldrh	r3, [r3, #12]
 800f186:	b29b      	uxth	r3, r3
 800f188:	4618      	mov	r0, r3
 800f18a:	f7fa fcad 	bl	8009ae8 <lwip_htons>
 800f18e:	4603      	mov	r3, r0
 800f190:	b2db      	uxtb	r3, r3
 800f192:	b29b      	uxth	r3, r3
 800f194:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f198:	b29b      	uxth	r3, r3
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fa fca4 	bl	8009ae8 <lwip_htons>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	b21b      	sxth	r3, r3
 800f1a4:	4323      	orrs	r3, r4
 800f1a6:	b21a      	sxth	r2, r3
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	b292      	uxth	r2, r2
 800f1b0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1bc:	4413      	add	r3, r2
 800f1be:	b299      	uxth	r1, r3
 800f1c0:	4b3c      	ldr	r3, [pc, #240]	; (800f2b4 <tcp_receive+0xf18>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	1a8a      	subs	r2, r1, r2
 800f1cc:	b292      	uxth	r2, r2
 800f1ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	685a      	ldr	r2, [r3, #4]
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	891b      	ldrh	r3, [r3, #8]
 800f1dc:	4619      	mov	r1, r3
 800f1de:	4610      	mov	r0, r2
 800f1e0:	f7fb fe66 	bl	800aeb0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	891c      	ldrh	r4, [r3, #8]
 800f1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	899b      	ldrh	r3, [r3, #12]
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fa fc77 	bl	8009ae8 <lwip_htons>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	f003 0303 	and.w	r3, r3, #3
 800f202:	2b00      	cmp	r3, #0
 800f204:	d001      	beq.n	800f20a <tcp_receive+0xe6e>
 800f206:	2301      	movs	r3, #1
 800f208:	e000      	b.n	800f20c <tcp_receive+0xe70>
 800f20a:	2300      	movs	r3, #0
 800f20c:	4423      	add	r3, r4
 800f20e:	b29a      	uxth	r2, r3
 800f210:	4b2a      	ldr	r3, [pc, #168]	; (800f2bc <tcp_receive+0xf20>)
 800f212:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f214:	4b29      	ldr	r3, [pc, #164]	; (800f2bc <tcp_receive+0xf20>)
 800f216:	881b      	ldrh	r3, [r3, #0]
 800f218:	461a      	mov	r2, r3
 800f21a:	4b26      	ldr	r3, [pc, #152]	; (800f2b4 <tcp_receive+0xf18>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	441a      	add	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f224:	6879      	ldr	r1, [r7, #4]
 800f226:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f228:	440b      	add	r3, r1
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d019      	beq.n	800f262 <tcp_receive+0xec6>
 800f22e:	4b24      	ldr	r3, [pc, #144]	; (800f2c0 <tcp_receive+0xf24>)
 800f230:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f234:	4923      	ldr	r1, [pc, #140]	; (800f2c4 <tcp_receive+0xf28>)
 800f236:	4824      	ldr	r0, [pc, #144]	; (800f2c8 <tcp_receive+0xf2c>)
 800f238:	f006 fba0 	bl	801597c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f23c:	e011      	b.n	800f262 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	63bb      	str	r3, [r7, #56]	; 0x38
 800f244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f246:	2b00      	cmp	r3, #0
 800f248:	f47f aea4 	bne.w	800ef94 <tcp_receive+0xbf8>
 800f24c:	e00a      	b.n	800f264 <tcp_receive+0xec8>
                break;
 800f24e:	bf00      	nop
 800f250:	e008      	b.n	800f264 <tcp_receive+0xec8>
                break;
 800f252:	bf00      	nop
 800f254:	e006      	b.n	800f264 <tcp_receive+0xec8>
                  break;
 800f256:	bf00      	nop
 800f258:	e004      	b.n	800f264 <tcp_receive+0xec8>
                  break;
 800f25a:	bf00      	nop
 800f25c:	e002      	b.n	800f264 <tcp_receive+0xec8>
                  break;
 800f25e:	bf00      	nop
 800f260:	e000      	b.n	800f264 <tcp_receive+0xec8>
                break;
 800f262:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f001 fa33 	bl	80106d0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f26a:	e003      	b.n	800f274 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f001 fa2f 	bl	80106d0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f272:	e01a      	b.n	800f2aa <tcp_receive+0xf0e>
 800f274:	e019      	b.n	800f2aa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f276:	4b0f      	ldr	r3, [pc, #60]	; (800f2b4 <tcp_receive+0xf18>)
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	2b00      	cmp	r3, #0
 800f282:	db0a      	blt.n	800f29a <tcp_receive+0xefe>
 800f284:	4b0b      	ldr	r3, [pc, #44]	; (800f2b4 <tcp_receive+0xf18>)
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f290:	440b      	add	r3, r1
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	3301      	adds	r3, #1
 800f296:	2b00      	cmp	r3, #0
 800f298:	dd07      	ble.n	800f2aa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	8b5b      	ldrh	r3, [r3, #26]
 800f29e:	f043 0302 	orr.w	r3, r3, #2
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f2a8:	e7ff      	b.n	800f2aa <tcp_receive+0xf0e>
 800f2aa:	bf00      	nop
 800f2ac:	3750      	adds	r7, #80	; 0x50
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bdb0      	pop	{r4, r5, r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	2000b060 	.word	0x2000b060
 800f2b8:	2000b040 	.word	0x2000b040
 800f2bc:	2000b06a 	.word	0x2000b06a
 800f2c0:	080181d8 	.word	0x080181d8
 800f2c4:	08018580 	.word	0x08018580
 800f2c8:	08018224 	.word	0x08018224

0800f2cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f2d2:	4b15      	ldr	r3, [pc, #84]	; (800f328 <tcp_get_next_optbyte+0x5c>)
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	1c5a      	adds	r2, r3, #1
 800f2d8:	b291      	uxth	r1, r2
 800f2da:	4a13      	ldr	r2, [pc, #76]	; (800f328 <tcp_get_next_optbyte+0x5c>)
 800f2dc:	8011      	strh	r1, [r2, #0]
 800f2de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f2e0:	4b12      	ldr	r3, [pc, #72]	; (800f32c <tcp_get_next_optbyte+0x60>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d004      	beq.n	800f2f2 <tcp_get_next_optbyte+0x26>
 800f2e8:	4b11      	ldr	r3, [pc, #68]	; (800f330 <tcp_get_next_optbyte+0x64>)
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	88fa      	ldrh	r2, [r7, #6]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d208      	bcs.n	800f304 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f2f2:	4b10      	ldr	r3, [pc, #64]	; (800f334 <tcp_get_next_optbyte+0x68>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	3314      	adds	r3, #20
 800f2f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f2fa:	88fb      	ldrh	r3, [r7, #6]
 800f2fc:	683a      	ldr	r2, [r7, #0]
 800f2fe:	4413      	add	r3, r2
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	e00b      	b.n	800f31c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f304:	88fb      	ldrh	r3, [r7, #6]
 800f306:	b2da      	uxtb	r2, r3
 800f308:	4b09      	ldr	r3, [pc, #36]	; (800f330 <tcp_get_next_optbyte+0x64>)
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f312:	4b06      	ldr	r3, [pc, #24]	; (800f32c <tcp_get_next_optbyte+0x60>)
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	797b      	ldrb	r3, [r7, #5]
 800f318:	4413      	add	r3, r2
 800f31a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	2000b05c 	.word	0x2000b05c
 800f32c:	2000b058 	.word	0x2000b058
 800f330:	2000b056 	.word	0x2000b056
 800f334:	2000b050 	.word	0x2000b050

0800f338 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d106      	bne.n	800f354 <tcp_parseopt+0x1c>
 800f346:	4b32      	ldr	r3, [pc, #200]	; (800f410 <tcp_parseopt+0xd8>)
 800f348:	f240 727d 	movw	r2, #1917	; 0x77d
 800f34c:	4931      	ldr	r1, [pc, #196]	; (800f414 <tcp_parseopt+0xdc>)
 800f34e:	4832      	ldr	r0, [pc, #200]	; (800f418 <tcp_parseopt+0xe0>)
 800f350:	f006 fb14 	bl	801597c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f354:	4b31      	ldr	r3, [pc, #196]	; (800f41c <tcp_parseopt+0xe4>)
 800f356:	881b      	ldrh	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d055      	beq.n	800f408 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f35c:	4b30      	ldr	r3, [pc, #192]	; (800f420 <tcp_parseopt+0xe8>)
 800f35e:	2200      	movs	r2, #0
 800f360:	801a      	strh	r2, [r3, #0]
 800f362:	e045      	b.n	800f3f0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f364:	f7ff ffb2 	bl	800f2cc <tcp_get_next_optbyte>
 800f368:	4603      	mov	r3, r0
 800f36a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f36c:	7bfb      	ldrb	r3, [r7, #15]
 800f36e:	2b02      	cmp	r3, #2
 800f370:	d006      	beq.n	800f380 <tcp_parseopt+0x48>
 800f372:	2b02      	cmp	r3, #2
 800f374:	dc2b      	bgt.n	800f3ce <tcp_parseopt+0x96>
 800f376:	2b00      	cmp	r3, #0
 800f378:	d041      	beq.n	800f3fe <tcp_parseopt+0xc6>
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d127      	bne.n	800f3ce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f37e:	e037      	b.n	800f3f0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f380:	f7ff ffa4 	bl	800f2cc <tcp_get_next_optbyte>
 800f384:	4603      	mov	r3, r0
 800f386:	2b04      	cmp	r3, #4
 800f388:	d13b      	bne.n	800f402 <tcp_parseopt+0xca>
 800f38a:	4b25      	ldr	r3, [pc, #148]	; (800f420 <tcp_parseopt+0xe8>)
 800f38c:	881b      	ldrh	r3, [r3, #0]
 800f38e:	3301      	adds	r3, #1
 800f390:	4a22      	ldr	r2, [pc, #136]	; (800f41c <tcp_parseopt+0xe4>)
 800f392:	8812      	ldrh	r2, [r2, #0]
 800f394:	4293      	cmp	r3, r2
 800f396:	da34      	bge.n	800f402 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f398:	f7ff ff98 	bl	800f2cc <tcp_get_next_optbyte>
 800f39c:	4603      	mov	r3, r0
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	021b      	lsls	r3, r3, #8
 800f3a2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f3a4:	f7ff ff92 	bl	800f2cc <tcp_get_next_optbyte>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	89bb      	ldrh	r3, [r7, #12]
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f3b2:	89bb      	ldrh	r3, [r7, #12]
 800f3b4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f3b8:	d804      	bhi.n	800f3c4 <tcp_parseopt+0x8c>
 800f3ba:	89bb      	ldrh	r3, [r7, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <tcp_parseopt+0x8c>
 800f3c0:	89ba      	ldrh	r2, [r7, #12]
 800f3c2:	e001      	b.n	800f3c8 <tcp_parseopt+0x90>
 800f3c4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f3cc:	e010      	b.n	800f3f0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f3ce:	f7ff ff7d 	bl	800f2cc <tcp_get_next_optbyte>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f3d6:	7afb      	ldrb	r3, [r7, #11]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d914      	bls.n	800f406 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f3dc:	7afb      	ldrb	r3, [r7, #11]
 800f3de:	b29a      	uxth	r2, r3
 800f3e0:	4b0f      	ldr	r3, [pc, #60]	; (800f420 <tcp_parseopt+0xe8>)
 800f3e2:	881b      	ldrh	r3, [r3, #0]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	3b02      	subs	r3, #2
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	4b0c      	ldr	r3, [pc, #48]	; (800f420 <tcp_parseopt+0xe8>)
 800f3ee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f3f0:	4b0b      	ldr	r3, [pc, #44]	; (800f420 <tcp_parseopt+0xe8>)
 800f3f2:	881a      	ldrh	r2, [r3, #0]
 800f3f4:	4b09      	ldr	r3, [pc, #36]	; (800f41c <tcp_parseopt+0xe4>)
 800f3f6:	881b      	ldrh	r3, [r3, #0]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d3b3      	bcc.n	800f364 <tcp_parseopt+0x2c>
 800f3fc:	e004      	b.n	800f408 <tcp_parseopt+0xd0>
          return;
 800f3fe:	bf00      	nop
 800f400:	e002      	b.n	800f408 <tcp_parseopt+0xd0>
            return;
 800f402:	bf00      	nop
 800f404:	e000      	b.n	800f408 <tcp_parseopt+0xd0>
            return;
 800f406:	bf00      	nop
      }
    }
  }
}
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	080181d8 	.word	0x080181d8
 800f414:	0801863c 	.word	0x0801863c
 800f418:	08018224 	.word	0x08018224
 800f41c:	2000b054 	.word	0x2000b054
 800f420:	2000b05c 	.word	0x2000b05c

0800f424 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f424:	b480      	push	{r7}
 800f426:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f428:	4b05      	ldr	r3, [pc, #20]	; (800f440 <tcp_trigger_input_pcb_close+0x1c>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f043 0310 	orr.w	r3, r3, #16
 800f430:	b2da      	uxtb	r2, r3
 800f432:	4b03      	ldr	r3, [pc, #12]	; (800f440 <tcp_trigger_input_pcb_close+0x1c>)
 800f434:	701a      	strb	r2, [r3, #0]
}
 800f436:	bf00      	nop
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	2000b06d 	.word	0x2000b06d

0800f444 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d00a      	beq.n	800f46c <tcp_route+0x28>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	7a1b      	ldrb	r3, [r3, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d006      	beq.n	800f46c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	7a1b      	ldrb	r3, [r3, #8]
 800f462:	4618      	mov	r0, r3
 800f464:	f7fb fb4a 	bl	800aafc <netif_get_by_index>
 800f468:	4603      	mov	r3, r0
 800f46a:	e003      	b.n	800f474 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f005 f817 	bl	80144a0 <ip4_route>
 800f472:	4603      	mov	r3, r0
  }
}
 800f474:	4618      	mov	r0, r3
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f47c:	b590      	push	{r4, r7, lr}
 800f47e:	b087      	sub	sp, #28
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	603b      	str	r3, [r7, #0]
 800f488:	4613      	mov	r3, r2
 800f48a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d105      	bne.n	800f49e <tcp_create_segment+0x22>
 800f492:	4b44      	ldr	r3, [pc, #272]	; (800f5a4 <tcp_create_segment+0x128>)
 800f494:	22a3      	movs	r2, #163	; 0xa3
 800f496:	4944      	ldr	r1, [pc, #272]	; (800f5a8 <tcp_create_segment+0x12c>)
 800f498:	4844      	ldr	r0, [pc, #272]	; (800f5ac <tcp_create_segment+0x130>)
 800f49a:	f006 fa6f 	bl	801597c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d105      	bne.n	800f4b0 <tcp_create_segment+0x34>
 800f4a4:	4b3f      	ldr	r3, [pc, #252]	; (800f5a4 <tcp_create_segment+0x128>)
 800f4a6:	22a4      	movs	r2, #164	; 0xa4
 800f4a8:	4941      	ldr	r1, [pc, #260]	; (800f5b0 <tcp_create_segment+0x134>)
 800f4aa:	4840      	ldr	r0, [pc, #256]	; (800f5ac <tcp_create_segment+0x130>)
 800f4ac:	f006 fa66 	bl	801597c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f4b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	f003 0304 	and.w	r3, r3, #4
 800f4bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f4be:	2003      	movs	r0, #3
 800f4c0:	f7fa ff8a 	bl	800a3d8 <memp_malloc>
 800f4c4:	6138      	str	r0, [r7, #16]
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d104      	bne.n	800f4d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f4cc:	68b8      	ldr	r0, [r7, #8]
 800f4ce:	f7fb fe75 	bl	800b1bc <pbuf_free>
    return NULL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	e061      	b.n	800f59a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f4dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	891a      	ldrh	r2, [r3, #8]
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d205      	bcs.n	800f502 <tcp_create_segment+0x86>
 800f4f6:	4b2b      	ldr	r3, [pc, #172]	; (800f5a4 <tcp_create_segment+0x128>)
 800f4f8:	22b0      	movs	r2, #176	; 0xb0
 800f4fa:	492e      	ldr	r1, [pc, #184]	; (800f5b4 <tcp_create_segment+0x138>)
 800f4fc:	482b      	ldr	r0, [pc, #172]	; (800f5ac <tcp_create_segment+0x130>)
 800f4fe:	f006 fa3d 	bl	801597c <iprintf>
  seg->len = p->tot_len - optlen;
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	891a      	ldrh	r2, [r3, #8]
 800f506:	7dfb      	ldrb	r3, [r7, #23]
 800f508:	b29b      	uxth	r3, r3
 800f50a:	1ad3      	subs	r3, r2, r3
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f512:	2114      	movs	r1, #20
 800f514:	68b8      	ldr	r0, [r7, #8]
 800f516:	f7fb fdbb 	bl	800b090 <pbuf_add_header>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d004      	beq.n	800f52a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f520:	6938      	ldr	r0, [r7, #16]
 800f522:	f7fd f8ce 	bl	800c6c2 <tcp_seg_free>
    return NULL;
 800f526:	2300      	movs	r3, #0
 800f528:	e037      	b.n	800f59a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	685a      	ldr	r2, [r3, #4]
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	8ada      	ldrh	r2, [r3, #22]
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	68dc      	ldr	r4, [r3, #12]
 800f53c:	4610      	mov	r0, r2
 800f53e:	f7fa fad3 	bl	8009ae8 <lwip_htons>
 800f542:	4603      	mov	r3, r0
 800f544:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	8b1a      	ldrh	r2, [r3, #24]
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	68dc      	ldr	r4, [r3, #12]
 800f54e:	4610      	mov	r0, r2
 800f550:	f7fa faca 	bl	8009ae8 <lwip_htons>
 800f554:	4603      	mov	r3, r0
 800f556:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	68dc      	ldr	r4, [r3, #12]
 800f55c:	6838      	ldr	r0, [r7, #0]
 800f55e:	f7fa fad8 	bl	8009b12 <lwip_htonl>
 800f562:	4603      	mov	r3, r0
 800f564:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f566:	7dfb      	ldrb	r3, [r7, #23]
 800f568:	089b      	lsrs	r3, r3, #2
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	3305      	adds	r3, #5
 800f570:	b29b      	uxth	r3, r3
 800f572:	031b      	lsls	r3, r3, #12
 800f574:	b29a      	uxth	r2, r3
 800f576:	79fb      	ldrb	r3, [r7, #7]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	4313      	orrs	r3, r2
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	68dc      	ldr	r4, [r3, #12]
 800f582:	4610      	mov	r0, r2
 800f584:	f7fa fab0 	bl	8009ae8 <lwip_htons>
 800f588:	4603      	mov	r3, r0
 800f58a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	2200      	movs	r2, #0
 800f592:	749a      	strb	r2, [r3, #18]
 800f594:	2200      	movs	r2, #0
 800f596:	74da      	strb	r2, [r3, #19]
  return seg;
 800f598:	693b      	ldr	r3, [r7, #16]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	371c      	adds	r7, #28
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd90      	pop	{r4, r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	08018658 	.word	0x08018658
 800f5a8:	0801868c 	.word	0x0801868c
 800f5ac:	080186ac 	.word	0x080186ac
 800f5b0:	080186d4 	.word	0x080186d4
 800f5b4:	080186f8 	.word	0x080186f8

0800f5b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f5b8:	b590      	push	{r4, r7, lr}
 800f5ba:	b08b      	sub	sp, #44	; 0x2c
 800f5bc:	af02      	add	r7, sp, #8
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	61fb      	str	r3, [r7, #28]
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d106      	bne.n	800f5e4 <tcp_split_unsent_seg+0x2c>
 800f5d6:	4b95      	ldr	r3, [pc, #596]	; (800f82c <tcp_split_unsent_seg+0x274>)
 800f5d8:	f240 324b 	movw	r2, #843	; 0x34b
 800f5dc:	4994      	ldr	r1, [pc, #592]	; (800f830 <tcp_split_unsent_seg+0x278>)
 800f5de:	4895      	ldr	r0, [pc, #596]	; (800f834 <tcp_split_unsent_seg+0x27c>)
 800f5e0:	f006 f9cc 	bl	801597c <iprintf>

  useg = pcb->unsent;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d102      	bne.n	800f5f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f4:	e116      	b.n	800f824 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f5f6:	887b      	ldrh	r3, [r7, #2]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d109      	bne.n	800f610 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f5fc:	4b8b      	ldr	r3, [pc, #556]	; (800f82c <tcp_split_unsent_seg+0x274>)
 800f5fe:	f240 3253 	movw	r2, #851	; 0x353
 800f602:	498d      	ldr	r1, [pc, #564]	; (800f838 <tcp_split_unsent_seg+0x280>)
 800f604:	488b      	ldr	r0, [pc, #556]	; (800f834 <tcp_split_unsent_seg+0x27c>)
 800f606:	f006 f9b9 	bl	801597c <iprintf>
    return ERR_VAL;
 800f60a:	f06f 0305 	mvn.w	r3, #5
 800f60e:	e109      	b.n	800f824 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	891b      	ldrh	r3, [r3, #8]
 800f614:	887a      	ldrh	r2, [r7, #2]
 800f616:	429a      	cmp	r2, r3
 800f618:	d301      	bcc.n	800f61e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f61a:	2300      	movs	r3, #0
 800f61c:	e102      	b.n	800f824 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f622:	887a      	ldrh	r2, [r7, #2]
 800f624:	429a      	cmp	r2, r3
 800f626:	d906      	bls.n	800f636 <tcp_split_unsent_seg+0x7e>
 800f628:	4b80      	ldr	r3, [pc, #512]	; (800f82c <tcp_split_unsent_seg+0x274>)
 800f62a:	f240 325b 	movw	r2, #859	; 0x35b
 800f62e:	4983      	ldr	r1, [pc, #524]	; (800f83c <tcp_split_unsent_seg+0x284>)
 800f630:	4880      	ldr	r0, [pc, #512]	; (800f834 <tcp_split_unsent_seg+0x27c>)
 800f632:	f006 f9a3 	bl	801597c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	891b      	ldrh	r3, [r3, #8]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d106      	bne.n	800f64c <tcp_split_unsent_seg+0x94>
 800f63e:	4b7b      	ldr	r3, [pc, #492]	; (800f82c <tcp_split_unsent_seg+0x274>)
 800f640:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f644:	497e      	ldr	r1, [pc, #504]	; (800f840 <tcp_split_unsent_seg+0x288>)
 800f646:	487b      	ldr	r0, [pc, #492]	; (800f834 <tcp_split_unsent_seg+0x27c>)
 800f648:	f006 f998 	bl	801597c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	7a9b      	ldrb	r3, [r3, #10]
 800f650:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f652:	7bfb      	ldrb	r3, [r7, #15]
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	b2db      	uxtb	r3, r3
 800f658:	f003 0304 	and.w	r3, r3, #4
 800f65c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	891a      	ldrh	r2, [r3, #8]
 800f662:	887b      	ldrh	r3, [r7, #2]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f668:	7bbb      	ldrb	r3, [r7, #14]
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	89bb      	ldrh	r3, [r7, #12]
 800f66e:	4413      	add	r3, r2
 800f670:	b29b      	uxth	r3, r3
 800f672:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f676:	4619      	mov	r1, r3
 800f678:	2036      	movs	r0, #54	; 0x36
 800f67a:	f7fb fabb 	bl	800abf4 <pbuf_alloc>
 800f67e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	2b00      	cmp	r3, #0
 800f684:	f000 80b7 	beq.w	800f7f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	891a      	ldrh	r2, [r3, #8]
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	891b      	ldrh	r3, [r3, #8]
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	b29a      	uxth	r2, r3
 800f696:	887b      	ldrh	r3, [r7, #2]
 800f698:	4413      	add	r3, r2
 800f69a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	6858      	ldr	r0, [r3, #4]
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	685a      	ldr	r2, [r3, #4]
 800f6a4:	7bbb      	ldrb	r3, [r7, #14]
 800f6a6:	18d1      	adds	r1, r2, r3
 800f6a8:	897b      	ldrh	r3, [r7, #10]
 800f6aa:	89ba      	ldrh	r2, [r7, #12]
 800f6ac:	f7fb ff80 	bl	800b5b0 <pbuf_copy_partial>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	89bb      	ldrh	r3, [r7, #12]
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	f040 809f 	bne.w	800f7fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	899b      	ldrh	r3, [r3, #12]
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fa fa0f 	bl	8009ae8 <lwip_htons>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f6d8:	7efb      	ldrb	r3, [r7, #27]
 800f6da:	f003 0308 	and.w	r3, r3, #8
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d007      	beq.n	800f6f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f6e2:	7efb      	ldrb	r3, [r7, #27]
 800f6e4:	f023 0308 	bic.w	r3, r3, #8
 800f6e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f6ea:	7ebb      	ldrb	r3, [r7, #26]
 800f6ec:	f043 0308 	orr.w	r3, r3, #8
 800f6f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f6f2:	7efb      	ldrb	r3, [r7, #27]
 800f6f4:	f003 0301 	and.w	r3, r3, #1
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d007      	beq.n	800f70c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f6fc:	7efb      	ldrb	r3, [r7, #27]
 800f6fe:	f023 0301 	bic.w	r3, r3, #1
 800f702:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f704:	7ebb      	ldrb	r3, [r7, #26]
 800f706:	f043 0301 	orr.w	r3, r3, #1
 800f70a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	4618      	mov	r0, r3
 800f714:	f7fa f9fd 	bl	8009b12 <lwip_htonl>
 800f718:	4602      	mov	r2, r0
 800f71a:	887b      	ldrh	r3, [r7, #2]
 800f71c:	18d1      	adds	r1, r2, r3
 800f71e:	7eba      	ldrb	r2, [r7, #26]
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	460b      	mov	r3, r1
 800f726:	6939      	ldr	r1, [r7, #16]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7ff fea7 	bl	800f47c <tcp_create_segment>
 800f72e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d063      	beq.n	800f7fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fb fdc6 	bl	800b2cc <pbuf_clen>
 800f740:	4603      	mov	r3, r0
 800f742:	461a      	mov	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f74a:	1a9b      	subs	r3, r3, r2
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	6858      	ldr	r0, [r3, #4]
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	891a      	ldrh	r2, [r3, #8]
 800f75e:	89bb      	ldrh	r3, [r7, #12]
 800f760:	1ad3      	subs	r3, r2, r3
 800f762:	b29b      	uxth	r3, r3
 800f764:	4619      	mov	r1, r3
 800f766:	f7fb fba3 	bl	800aeb0 <pbuf_realloc>
  useg->len -= remainder;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	891a      	ldrh	r2, [r3, #8]
 800f76e:	89bb      	ldrh	r3, [r7, #12]
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	b29a      	uxth	r2, r3
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	899b      	ldrh	r3, [r3, #12]
 800f77e:	b29c      	uxth	r4, r3
 800f780:	7efb      	ldrb	r3, [r7, #27]
 800f782:	b29b      	uxth	r3, r3
 800f784:	4618      	mov	r0, r3
 800f786:	f7fa f9af 	bl	8009ae8 <lwip_htons>
 800f78a:	4603      	mov	r3, r0
 800f78c:	461a      	mov	r2, r3
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	4322      	orrs	r2, r4
 800f794:	b292      	uxth	r2, r2
 800f796:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fb fd95 	bl	800b2cc <pbuf_clen>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f7ac:	4413      	add	r3, r2
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fb fd86 	bl	800b2cc <pbuf_clen>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f7ca:	4413      	add	r3, r2
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	69fa      	ldr	r2, [r7, #28]
 800f7e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d103      	bne.n	800f7f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	e016      	b.n	800f824 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f7f6:	bf00      	nop
 800f7f8:	e002      	b.n	800f800 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f7fa:	bf00      	nop
 800f7fc:	e000      	b.n	800f800 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f7fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d006      	beq.n	800f814 <tcp_split_unsent_seg+0x25c>
 800f806:	4b09      	ldr	r3, [pc, #36]	; (800f82c <tcp_split_unsent_seg+0x274>)
 800f808:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f80c:	490d      	ldr	r1, [pc, #52]	; (800f844 <tcp_split_unsent_seg+0x28c>)
 800f80e:	4809      	ldr	r0, [pc, #36]	; (800f834 <tcp_split_unsent_seg+0x27c>)
 800f810:	f006 f8b4 	bl	801597c <iprintf>
  if (p != NULL) {
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d002      	beq.n	800f820 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f81a:	6938      	ldr	r0, [r7, #16]
 800f81c:	f7fb fcce 	bl	800b1bc <pbuf_free>
  }

  return ERR_MEM;
 800f820:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f824:	4618      	mov	r0, r3
 800f826:	3724      	adds	r7, #36	; 0x24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd90      	pop	{r4, r7, pc}
 800f82c:	08018658 	.word	0x08018658
 800f830:	080189ec 	.word	0x080189ec
 800f834:	080186ac 	.word	0x080186ac
 800f838:	08018a10 	.word	0x08018a10
 800f83c:	08018a34 	.word	0x08018a34
 800f840:	08018a44 	.word	0x08018a44
 800f844:	08018a54 	.word	0x08018a54

0800f848 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f848:	b590      	push	{r4, r7, lr}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d106      	bne.n	800f864 <tcp_send_fin+0x1c>
 800f856:	4b21      	ldr	r3, [pc, #132]	; (800f8dc <tcp_send_fin+0x94>)
 800f858:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f85c:	4920      	ldr	r1, [pc, #128]	; (800f8e0 <tcp_send_fin+0x98>)
 800f85e:	4821      	ldr	r0, [pc, #132]	; (800f8e4 <tcp_send_fin+0x9c>)
 800f860:	f006 f88c 	bl	801597c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d02e      	beq.n	800f8ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f870:	60fb      	str	r3, [r7, #12]
 800f872:	e002      	b.n	800f87a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1f8      	bne.n	800f874 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	899b      	ldrh	r3, [r3, #12]
 800f888:	b29b      	uxth	r3, r3
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fa f92c 	bl	8009ae8 <lwip_htons>
 800f890:	4603      	mov	r3, r0
 800f892:	b2db      	uxtb	r3, r3
 800f894:	f003 0307 	and.w	r3, r3, #7
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d116      	bne.n	800f8ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	899b      	ldrh	r3, [r3, #12]
 800f8a2:	b29c      	uxth	r4, r3
 800f8a4:	2001      	movs	r0, #1
 800f8a6:	f7fa f91f 	bl	8009ae8 <lwip_htons>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	4322      	orrs	r2, r4
 800f8b4:	b292      	uxth	r2, r2
 800f8b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	8b5b      	ldrh	r3, [r3, #26]
 800f8bc:	f043 0320 	orr.w	r3, r3, #32
 800f8c0:	b29a      	uxth	r2, r3
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	e004      	b.n	800f8d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f8ca:	2101      	movs	r1, #1
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 f80b 	bl	800f8e8 <tcp_enqueue_flags>
 800f8d2:	4603      	mov	r3, r0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3714      	adds	r7, #20
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd90      	pop	{r4, r7, pc}
 800f8dc:	08018658 	.word	0x08018658
 800f8e0:	08018a60 	.word	0x08018a60
 800f8e4:	080186ac 	.word	0x080186ac

0800f8e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b08a      	sub	sp, #40	; 0x28
 800f8ec:	af02      	add	r7, sp, #8
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f8fc:	78fb      	ldrb	r3, [r7, #3]
 800f8fe:	f003 0303 	and.w	r3, r3, #3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d106      	bne.n	800f914 <tcp_enqueue_flags+0x2c>
 800f906:	4b67      	ldr	r3, [pc, #412]	; (800faa4 <tcp_enqueue_flags+0x1bc>)
 800f908:	f240 4211 	movw	r2, #1041	; 0x411
 800f90c:	4966      	ldr	r1, [pc, #408]	; (800faa8 <tcp_enqueue_flags+0x1c0>)
 800f90e:	4867      	ldr	r0, [pc, #412]	; (800faac <tcp_enqueue_flags+0x1c4>)
 800f910:	f006 f834 	bl	801597c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d106      	bne.n	800f928 <tcp_enqueue_flags+0x40>
 800f91a:	4b62      	ldr	r3, [pc, #392]	; (800faa4 <tcp_enqueue_flags+0x1bc>)
 800f91c:	f240 4213 	movw	r2, #1043	; 0x413
 800f920:	4963      	ldr	r1, [pc, #396]	; (800fab0 <tcp_enqueue_flags+0x1c8>)
 800f922:	4862      	ldr	r0, [pc, #392]	; (800faac <tcp_enqueue_flags+0x1c4>)
 800f924:	f006 f82a 	bl	801597c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f928:	78fb      	ldrb	r3, [r7, #3]
 800f92a:	f003 0302 	and.w	r3, r3, #2
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d001      	beq.n	800f936 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f932:	2301      	movs	r3, #1
 800f934:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f936:	7ffb      	ldrb	r3, [r7, #31]
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	f003 0304 	and.w	r3, r3, #4
 800f940:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f942:	7dfb      	ldrb	r3, [r7, #23]
 800f944:	b29b      	uxth	r3, r3
 800f946:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f94a:	4619      	mov	r1, r3
 800f94c:	2036      	movs	r0, #54	; 0x36
 800f94e:	f7fb f951 	bl	800abf4 <pbuf_alloc>
 800f952:	6138      	str	r0, [r7, #16]
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d109      	bne.n	800f96e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	8b5b      	ldrh	r3, [r3, #26]
 800f95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f962:	b29a      	uxth	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f968:	f04f 33ff 	mov.w	r3, #4294967295
 800f96c:	e095      	b.n	800fa9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	895a      	ldrh	r2, [r3, #10]
 800f972:	7dfb      	ldrb	r3, [r7, #23]
 800f974:	b29b      	uxth	r3, r3
 800f976:	429a      	cmp	r2, r3
 800f978:	d206      	bcs.n	800f988 <tcp_enqueue_flags+0xa0>
 800f97a:	4b4a      	ldr	r3, [pc, #296]	; (800faa4 <tcp_enqueue_flags+0x1bc>)
 800f97c:	f240 4239 	movw	r2, #1081	; 0x439
 800f980:	494c      	ldr	r1, [pc, #304]	; (800fab4 <tcp_enqueue_flags+0x1cc>)
 800f982:	484a      	ldr	r0, [pc, #296]	; (800faac <tcp_enqueue_flags+0x1c4>)
 800f984:	f005 fffa 	bl	801597c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f98c:	78fa      	ldrb	r2, [r7, #3]
 800f98e:	7ffb      	ldrb	r3, [r7, #31]
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	460b      	mov	r3, r1
 800f994:	6939      	ldr	r1, [r7, #16]
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7ff fd70 	bl	800f47c <tcp_create_segment>
 800f99c:	60f8      	str	r0, [r7, #12]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d109      	bne.n	800f9b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	8b5b      	ldrh	r3, [r3, #26]
 800f9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b6:	e070      	b.n	800fa9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	f003 0303 	and.w	r3, r3, #3
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d006      	beq.n	800f9d2 <tcp_enqueue_flags+0xea>
 800f9c4:	4b37      	ldr	r3, [pc, #220]	; (800faa4 <tcp_enqueue_flags+0x1bc>)
 800f9c6:	f240 4242 	movw	r2, #1090	; 0x442
 800f9ca:	493b      	ldr	r1, [pc, #236]	; (800fab8 <tcp_enqueue_flags+0x1d0>)
 800f9cc:	4837      	ldr	r0, [pc, #220]	; (800faac <tcp_enqueue_flags+0x1c4>)
 800f9ce:	f005 ffd5 	bl	801597c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	891b      	ldrh	r3, [r3, #8]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d006      	beq.n	800f9e8 <tcp_enqueue_flags+0x100>
 800f9da:	4b32      	ldr	r3, [pc, #200]	; (800faa4 <tcp_enqueue_flags+0x1bc>)
 800f9dc:	f240 4243 	movw	r2, #1091	; 0x443
 800f9e0:	4936      	ldr	r1, [pc, #216]	; (800fabc <tcp_enqueue_flags+0x1d4>)
 800f9e2:	4832      	ldr	r0, [pc, #200]	; (800faac <tcp_enqueue_flags+0x1c4>)
 800f9e4:	f005 ffca 	bl	801597c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d103      	bne.n	800f9f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	66da      	str	r2, [r3, #108]	; 0x6c
 800f9f6:	e00d      	b.n	800fa14 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9fc:	61bb      	str	r3, [r7, #24]
 800f9fe:	e002      	b.n	800fa06 <tcp_enqueue_flags+0x11e>
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	61bb      	str	r3, [r7, #24]
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1f8      	bne.n	800fa00 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fa1c:	78fb      	ldrb	r3, [r7, #3]
 800fa1e:	f003 0302 	and.w	r3, r3, #2
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d104      	bne.n	800fa30 <tcp_enqueue_flags+0x148>
 800fa26:	78fb      	ldrb	r3, [r7, #3]
 800fa28:	f003 0301 	and.w	r3, r3, #1
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d004      	beq.n	800fa3a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa34:	1c5a      	adds	r2, r3, #1
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fa3a:	78fb      	ldrb	r3, [r7, #3]
 800fa3c:	f003 0301 	and.w	r3, r3, #1
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d006      	beq.n	800fa52 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	8b5b      	ldrh	r3, [r3, #26]
 800fa48:	f043 0320 	orr.w	r3, r3, #32
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fb fc38 	bl	800b2cc <pbuf_clen>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	461a      	mov	r2, r3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa66:	4413      	add	r3, r2
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00e      	beq.n	800fa98 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10a      	bne.n	800fa98 <tcp_enqueue_flags+0x1b0>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d106      	bne.n	800fa98 <tcp_enqueue_flags+0x1b0>
 800fa8a:	4b06      	ldr	r3, [pc, #24]	; (800faa4 <tcp_enqueue_flags+0x1bc>)
 800fa8c:	f240 4265 	movw	r2, #1125	; 0x465
 800fa90:	490b      	ldr	r1, [pc, #44]	; (800fac0 <tcp_enqueue_flags+0x1d8>)
 800fa92:	4806      	ldr	r0, [pc, #24]	; (800faac <tcp_enqueue_flags+0x1c4>)
 800fa94:	f005 ff72 	bl	801597c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3720      	adds	r7, #32
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	08018658 	.word	0x08018658
 800faa8:	08018a7c 	.word	0x08018a7c
 800faac:	080186ac 	.word	0x080186ac
 800fab0:	08018ad4 	.word	0x08018ad4
 800fab4:	08018af4 	.word	0x08018af4
 800fab8:	08018b30 	.word	0x08018b30
 800fabc:	08018b48 	.word	0x08018b48
 800fac0:	08018b74 	.word	0x08018b74

0800fac4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fac4:	b5b0      	push	{r4, r5, r7, lr}
 800fac6:	b08a      	sub	sp, #40	; 0x28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d106      	bne.n	800fae0 <tcp_output+0x1c>
 800fad2:	4b8a      	ldr	r3, [pc, #552]	; (800fcfc <tcp_output+0x238>)
 800fad4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fad8:	4989      	ldr	r1, [pc, #548]	; (800fd00 <tcp_output+0x23c>)
 800fada:	488a      	ldr	r0, [pc, #552]	; (800fd04 <tcp_output+0x240>)
 800fadc:	f005 ff4e 	bl	801597c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	7d1b      	ldrb	r3, [r3, #20]
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d106      	bne.n	800faf6 <tcp_output+0x32>
 800fae8:	4b84      	ldr	r3, [pc, #528]	; (800fcfc <tcp_output+0x238>)
 800faea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800faee:	4986      	ldr	r1, [pc, #536]	; (800fd08 <tcp_output+0x244>)
 800faf0:	4884      	ldr	r0, [pc, #528]	; (800fd04 <tcp_output+0x240>)
 800faf2:	f005 ff43 	bl	801597c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800faf6:	4b85      	ldr	r3, [pc, #532]	; (800fd0c <tcp_output+0x248>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d101      	bne.n	800fb04 <tcp_output+0x40>
    return ERR_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	e1ce      	b.n	800fea2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb10:	4293      	cmp	r3, r2
 800fb12:	bf28      	it	cs
 800fb14:	4613      	movcs	r3, r2
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d10b      	bne.n	800fb3e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	8b5b      	ldrh	r3, [r3, #26]
 800fb2a:	f003 0302 	and.w	r3, r3, #2
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f000 81aa 	beq.w	800fe88 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 fdcb 	bl	80106d0 <tcp_send_empty_ack>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	e1b1      	b.n	800fea2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fb3e:	6879      	ldr	r1, [r7, #4]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	3304      	adds	r3, #4
 800fb44:	461a      	mov	r2, r3
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff fc7c 	bl	800f444 <tcp_route>
 800fb4c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d102      	bne.n	800fb5a <tcp_output+0x96>
    return ERR_RTE;
 800fb54:	f06f 0303 	mvn.w	r3, #3
 800fb58:	e1a3      	b.n	800fea2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d003      	beq.n	800fb68 <tcp_output+0xa4>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d111      	bne.n	800fb8c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d002      	beq.n	800fb74 <tcp_output+0xb0>
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	3304      	adds	r3, #4
 800fb72:	e000      	b.n	800fb76 <tcp_output+0xb2>
 800fb74:	2300      	movs	r3, #0
 800fb76:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d102      	bne.n	800fb84 <tcp_output+0xc0>
      return ERR_RTE;
 800fb7e:	f06f 0303 	mvn.w	r3, #3
 800fb82:	e18e      	b.n	800fea2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7f9 ffbd 	bl	8009b12 <lwip_htonl>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb9e:	1ad3      	subs	r3, r2, r3
 800fba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fba2:	8912      	ldrh	r2, [r2, #8]
 800fba4:	4413      	add	r3, r2
 800fba6:	69ba      	ldr	r2, [r7, #24]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d227      	bcs.n	800fbfc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d114      	bne.n	800fbe4 <tcp_output+0x120>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d110      	bne.n	800fbe4 <tcp_output+0x120>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d10b      	bne.n	800fbe4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	8b5b      	ldrh	r3, [r3, #26]
 800fbe8:	f003 0302 	and.w	r3, r3, #2
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f000 814d 	beq.w	800fe8c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fd6c 	bl	80106d0 <tcp_send_empty_ack>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	e152      	b.n	800fea2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc08:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fc0a:	6a3b      	ldr	r3, [r7, #32]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f000 811c 	beq.w	800fe4a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fc12:	e002      	b.n	800fc1a <tcp_output+0x156>
 800fc14:	6a3b      	ldr	r3, [r7, #32]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	623b      	str	r3, [r7, #32]
 800fc1a:	6a3b      	ldr	r3, [r7, #32]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1f8      	bne.n	800fc14 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fc22:	e112      	b.n	800fe4a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	899b      	ldrh	r3, [r3, #12]
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7f9 ff5b 	bl	8009ae8 <lwip_htons>
 800fc32:	4603      	mov	r3, r0
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	f003 0304 	and.w	r3, r3, #4
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d006      	beq.n	800fc4c <tcp_output+0x188>
 800fc3e:	4b2f      	ldr	r3, [pc, #188]	; (800fcfc <tcp_output+0x238>)
 800fc40:	f240 5236 	movw	r2, #1334	; 0x536
 800fc44:	4932      	ldr	r1, [pc, #200]	; (800fd10 <tcp_output+0x24c>)
 800fc46:	482f      	ldr	r0, [pc, #188]	; (800fd04 <tcp_output+0x240>)
 800fc48:	f005 fe98 	bl	801597c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d01f      	beq.n	800fc94 <tcp_output+0x1d0>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	8b5b      	ldrh	r3, [r3, #26]
 800fc58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d119      	bne.n	800fc94 <tcp_output+0x1d0>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d00b      	beq.n	800fc80 <tcp_output+0x1bc>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d110      	bne.n	800fc94 <tcp_output+0x1d0>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc76:	891a      	ldrh	r2, [r3, #8]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d209      	bcs.n	800fc94 <tcp_output+0x1d0>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d004      	beq.n	800fc94 <tcp_output+0x1d0>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc90:	2b08      	cmp	r3, #8
 800fc92:	d901      	bls.n	800fc98 <tcp_output+0x1d4>
 800fc94:	2301      	movs	r3, #1
 800fc96:	e000      	b.n	800fc9a <tcp_output+0x1d6>
 800fc98:	2300      	movs	r3, #0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d106      	bne.n	800fcac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	8b5b      	ldrh	r3, [r3, #26]
 800fca2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f000 80e4 	beq.w	800fe74 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	7d1b      	ldrb	r3, [r3, #20]
 800fcb0:	2b02      	cmp	r3, #2
 800fcb2:	d00d      	beq.n	800fcd0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	899b      	ldrh	r3, [r3, #12]
 800fcba:	b29c      	uxth	r4, r3
 800fcbc:	2010      	movs	r0, #16
 800fcbe:	f7f9 ff13 	bl	8009ae8 <lwip_htons>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	4322      	orrs	r2, r4
 800fccc:	b292      	uxth	r2, r2
 800fcce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fcd0:	697a      	ldr	r2, [r7, #20]
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcd6:	f000 f909 	bl	800feec <tcp_output_segment>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fcde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d016      	beq.n	800fd14 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	8b5b      	ldrh	r3, [r3, #26]
 800fcea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	835a      	strh	r2, [r3, #26]
      return err;
 800fcf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcf8:	e0d3      	b.n	800fea2 <tcp_output+0x3de>
 800fcfa:	bf00      	nop
 800fcfc:	08018658 	.word	0x08018658
 800fd00:	08018b9c 	.word	0x08018b9c
 800fd04:	080186ac 	.word	0x080186ac
 800fd08:	08018bb4 	.word	0x08018bb4
 800fd0c:	2000b074 	.word	0x2000b074
 800fd10:	08018bdc 	.word	0x08018bdc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	7d1b      	ldrb	r3, [r3, #20]
 800fd20:	2b02      	cmp	r3, #2
 800fd22:	d006      	beq.n	800fd32 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	8b5b      	ldrh	r3, [r3, #26]
 800fd28:	f023 0303 	bic.w	r3, r3, #3
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7f9 feea 	bl	8009b12 <lwip_htonl>
 800fd3e:	4604      	mov	r4, r0
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	891b      	ldrh	r3, [r3, #8]
 800fd44:	461d      	mov	r5, r3
 800fd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	899b      	ldrh	r3, [r3, #12]
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7f9 feca 	bl	8009ae8 <lwip_htons>
 800fd54:	4603      	mov	r3, r0
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	f003 0303 	and.w	r3, r3, #3
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d001      	beq.n	800fd64 <tcp_output+0x2a0>
 800fd60:	2301      	movs	r3, #1
 800fd62:	e000      	b.n	800fd66 <tcp_output+0x2a2>
 800fd64:	2300      	movs	r3, #0
 800fd66:	442b      	add	r3, r5
 800fd68:	4423      	add	r3, r4
 800fd6a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	da02      	bge.n	800fd7e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd80:	891b      	ldrh	r3, [r3, #8]
 800fd82:	461c      	mov	r4, r3
 800fd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	899b      	ldrh	r3, [r3, #12]
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7f9 feab 	bl	8009ae8 <lwip_htons>
 800fd92:	4603      	mov	r3, r0
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	f003 0303 	and.w	r3, r3, #3
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <tcp_output+0x2de>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e000      	b.n	800fda4 <tcp_output+0x2e0>
 800fda2:	2300      	movs	r3, #0
 800fda4:	4423      	add	r3, r4
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d049      	beq.n	800fe3e <tcp_output+0x37a>
      seg->next = NULL;
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	2200      	movs	r2, #0
 800fdae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d105      	bne.n	800fdc4 <tcp_output+0x300>
        pcb->unacked = seg;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdbc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc0:	623b      	str	r3, [r7, #32]
 800fdc2:	e03f      	b.n	800fe44 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7f9 fea1 	bl	8009b12 <lwip_htonl>
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	6a3b      	ldr	r3, [r7, #32]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7f9 fe9a 	bl	8009b12 <lwip_htonl>
 800fdde:	4603      	mov	r3, r0
 800fde0:	1ae3      	subs	r3, r4, r3
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	da24      	bge.n	800fe30 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3370      	adds	r3, #112	; 0x70
 800fdea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fdec:	e002      	b.n	800fdf4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d011      	beq.n	800fe20 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7f9 fe84 	bl	8009b12 <lwip_htonl>
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7f9 fe7d 	bl	8009b12 <lwip_htonl>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	dbe6      	blt.n	800fdee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe26:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	e009      	b.n	800fe44 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fe30:	6a3b      	ldr	r3, [r7, #32]
 800fe32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe34:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fe36:	6a3b      	ldr	r3, [r7, #32]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	623b      	str	r3, [r7, #32]
 800fe3c:	e002      	b.n	800fe44 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fe3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe40:	f7fc fc3f 	bl	800c6c2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe48:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fe4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d012      	beq.n	800fe76 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7f9 fe5b 	bl	8009b12 <lwip_htonl>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe66:	8912      	ldrh	r2, [r2, #8]
 800fe68:	4413      	add	r3, r2
  while (seg != NULL &&
 800fe6a:	69ba      	ldr	r2, [r7, #24]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	f4bf aed9 	bcs.w	800fc24 <tcp_output+0x160>
 800fe72:	e000      	b.n	800fe76 <tcp_output+0x3b2>
      break;
 800fe74:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d108      	bne.n	800fe90 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fe86:	e004      	b.n	800fe92 <tcp_output+0x3ce>
    goto output_done;
 800fe88:	bf00      	nop
 800fe8a:	e002      	b.n	800fe92 <tcp_output+0x3ce>
    goto output_done;
 800fe8c:	bf00      	nop
 800fe8e:	e000      	b.n	800fe92 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fe90:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	8b5b      	ldrh	r3, [r3, #26]
 800fe96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fea0:	2300      	movs	r3, #0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3728      	adds	r7, #40	; 0x28
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bdb0      	pop	{r4, r5, r7, pc}
 800feaa:	bf00      	nop

0800feac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d106      	bne.n	800fec8 <tcp_output_segment_busy+0x1c>
 800feba:	4b09      	ldr	r3, [pc, #36]	; (800fee0 <tcp_output_segment_busy+0x34>)
 800febc:	f240 529a 	movw	r2, #1434	; 0x59a
 800fec0:	4908      	ldr	r1, [pc, #32]	; (800fee4 <tcp_output_segment_busy+0x38>)
 800fec2:	4809      	ldr	r0, [pc, #36]	; (800fee8 <tcp_output_segment_busy+0x3c>)
 800fec4:	f005 fd5a 	bl	801597c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	685b      	ldr	r3, [r3, #4]
 800fecc:	7b9b      	ldrb	r3, [r3, #14]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d001      	beq.n	800fed6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fed2:	2301      	movs	r3, #1
 800fed4:	e000      	b.n	800fed8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fed6:	2300      	movs	r3, #0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	08018658 	.word	0x08018658
 800fee4:	08018bf4 	.word	0x08018bf4
 800fee8:	080186ac 	.word	0x080186ac

0800feec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800feec:	b5b0      	push	{r4, r5, r7, lr}
 800feee:	b08c      	sub	sp, #48	; 0x30
 800fef0:	af04      	add	r7, sp, #16
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d106      	bne.n	800ff0c <tcp_output_segment+0x20>
 800fefe:	4b63      	ldr	r3, [pc, #396]	; (801008c <tcp_output_segment+0x1a0>)
 800ff00:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ff04:	4962      	ldr	r1, [pc, #392]	; (8010090 <tcp_output_segment+0x1a4>)
 800ff06:	4863      	ldr	r0, [pc, #396]	; (8010094 <tcp_output_segment+0x1a8>)
 800ff08:	f005 fd38 	bl	801597c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d106      	bne.n	800ff20 <tcp_output_segment+0x34>
 800ff12:	4b5e      	ldr	r3, [pc, #376]	; (801008c <tcp_output_segment+0x1a0>)
 800ff14:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ff18:	495f      	ldr	r1, [pc, #380]	; (8010098 <tcp_output_segment+0x1ac>)
 800ff1a:	485e      	ldr	r0, [pc, #376]	; (8010094 <tcp_output_segment+0x1a8>)
 800ff1c:	f005 fd2e 	bl	801597c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d106      	bne.n	800ff34 <tcp_output_segment+0x48>
 800ff26:	4b59      	ldr	r3, [pc, #356]	; (801008c <tcp_output_segment+0x1a0>)
 800ff28:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ff2c:	495b      	ldr	r1, [pc, #364]	; (801009c <tcp_output_segment+0x1b0>)
 800ff2e:	4859      	ldr	r0, [pc, #356]	; (8010094 <tcp_output_segment+0x1a8>)
 800ff30:	f005 fd24 	bl	801597c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ff34:	68f8      	ldr	r0, [r7, #12]
 800ff36:	f7ff ffb9 	bl	800feac <tcp_output_segment_busy>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ff40:	2300      	movs	r3, #0
 800ff42:	e09f      	b.n	8010084 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68dc      	ldr	r4, [r3, #12]
 800ff4c:	4610      	mov	r0, r2
 800ff4e:	f7f9 fde0 	bl	8009b12 <lwip_htonl>
 800ff52:	4603      	mov	r3, r0
 800ff54:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	68dc      	ldr	r4, [r3, #12]
 800ff5e:	4610      	mov	r0, r2
 800ff60:	f7f9 fdc2 	bl	8009ae8 <lwip_htons>
 800ff64:	4603      	mov	r3, r0
 800ff66:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6c:	68ba      	ldr	r2, [r7, #8]
 800ff6e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ff70:	441a      	add	r2, r3
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	3314      	adds	r3, #20
 800ff7c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	7a9b      	ldrb	r3, [r3, #10]
 800ff82:	f003 0301 	and.w	r3, r3, #1
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d015      	beq.n	800ffb6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	3304      	adds	r3, #4
 800ff8e:	461a      	mov	r2, r3
 800ff90:	6879      	ldr	r1, [r7, #4]
 800ff92:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ff96:	f7fc fe8b 	bl	800ccb0 <tcp_eff_send_mss_netif>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ff9e:	8b7b      	ldrh	r3, [r7, #26]
 800ffa0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7f9 fdb4 	bl	8009b12 <lwip_htonl>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	da02      	bge.n	800ffc6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d10c      	bne.n	800ffe8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ffce:	4b34      	ldr	r3, [pc, #208]	; (80100a0 <tcp_output_segment+0x1b4>)
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7f9 fd98 	bl	8009b12 <lwip_htonl>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	68da      	ldr	r2, [r3, #12]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	1ad3      	subs	r3, r2, r3
 800fff4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	8959      	ldrh	r1, [r3, #10]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	8b3a      	ldrh	r2, [r7, #24]
 8010002:	1a8a      	subs	r2, r1, r2
 8010004:	b292      	uxth	r2, r2
 8010006:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	8919      	ldrh	r1, [r3, #8]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	8b3a      	ldrh	r2, [r7, #24]
 8010014:	1a8a      	subs	r2, r1, r2
 8010016:	b292      	uxth	r2, r2
 8010018:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	68fa      	ldr	r2, [r7, #12]
 8010020:	68d2      	ldr	r2, [r2, #12]
 8010022:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	2200      	movs	r2, #0
 801002a:	741a      	strb	r2, [r3, #16]
 801002c:	2200      	movs	r2, #0
 801002e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	f103 0214 	add.w	r2, r3, #20
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	7a9b      	ldrb	r3, [r3, #10]
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	f003 0304 	and.w	r3, r3, #4
 8010042:	4413      	add	r3, r2
 8010044:	69fa      	ldr	r2, [r7, #28]
 8010046:	429a      	cmp	r2, r3
 8010048:	d006      	beq.n	8010058 <tcp_output_segment+0x16c>
 801004a:	4b10      	ldr	r3, [pc, #64]	; (801008c <tcp_output_segment+0x1a0>)
 801004c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010050:	4914      	ldr	r1, [pc, #80]	; (80100a4 <tcp_output_segment+0x1b8>)
 8010052:	4810      	ldr	r0, [pc, #64]	; (8010094 <tcp_output_segment+0x1a8>)
 8010054:	f005 fc92 	bl	801597c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6858      	ldr	r0, [r3, #4]
 801005c:	68b9      	ldr	r1, [r7, #8]
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	1d1c      	adds	r4, r3, #4
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	7add      	ldrb	r5, [r3, #11]
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	7a9b      	ldrb	r3, [r3, #10]
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	9202      	str	r2, [sp, #8]
 801006e:	2206      	movs	r2, #6
 8010070:	9201      	str	r2, [sp, #4]
 8010072:	9300      	str	r3, [sp, #0]
 8010074:	462b      	mov	r3, r5
 8010076:	4622      	mov	r2, r4
 8010078:	f004 fbee 	bl	8014858 <ip4_output_if>
 801007c:	4603      	mov	r3, r0
 801007e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3720      	adds	r7, #32
 8010088:	46bd      	mov	sp, r7
 801008a:	bdb0      	pop	{r4, r5, r7, pc}
 801008c:	08018658 	.word	0x08018658
 8010090:	08018c1c 	.word	0x08018c1c
 8010094:	080186ac 	.word	0x080186ac
 8010098:	08018c3c 	.word	0x08018c3c
 801009c:	08018c5c 	.word	0x08018c5c
 80100a0:	2000b028 	.word	0x2000b028
 80100a4:	08018c80 	.word	0x08018c80

080100a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80100a8:	b5b0      	push	{r4, r5, r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d106      	bne.n	80100c4 <tcp_rexmit_rto_prepare+0x1c>
 80100b6:	4b31      	ldr	r3, [pc, #196]	; (801017c <tcp_rexmit_rto_prepare+0xd4>)
 80100b8:	f240 6263 	movw	r2, #1635	; 0x663
 80100bc:	4930      	ldr	r1, [pc, #192]	; (8010180 <tcp_rexmit_rto_prepare+0xd8>)
 80100be:	4831      	ldr	r0, [pc, #196]	; (8010184 <tcp_rexmit_rto_prepare+0xdc>)
 80100c0:	f005 fc5c 	bl	801597c <iprintf>

  if (pcb->unacked == NULL) {
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d102      	bne.n	80100d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80100cc:	f06f 0305 	mvn.w	r3, #5
 80100d0:	e050      	b.n	8010174 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	e00b      	b.n	80100f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f7ff fee6 	bl	800feac <tcp_output_segment_busy>
 80100e0:	4603      	mov	r3, r0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d002      	beq.n	80100ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80100e6:	f06f 0305 	mvn.w	r3, #5
 80100ea:	e043      	b.n	8010174 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	60fb      	str	r3, [r7, #12]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1ef      	bne.n	80100da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80100fa:	68f8      	ldr	r0, [r7, #12]
 80100fc:	f7ff fed6 	bl	800feac <tcp_output_segment_busy>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d002      	beq.n	801010c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010106:	f06f 0305 	mvn.w	r3, #5
 801010a:	e033      	b.n	8010174 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2200      	movs	r2, #0
 8010120:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	8b5b      	ldrh	r3, [r3, #26]
 8010126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801012a:	b29a      	uxth	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	4618      	mov	r0, r3
 8010138:	f7f9 fceb 	bl	8009b12 <lwip_htonl>
 801013c:	4604      	mov	r4, r0
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	891b      	ldrh	r3, [r3, #8]
 8010142:	461d      	mov	r5, r3
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	899b      	ldrh	r3, [r3, #12]
 801014a:	b29b      	uxth	r3, r3
 801014c:	4618      	mov	r0, r3
 801014e:	f7f9 fccb 	bl	8009ae8 <lwip_htons>
 8010152:	4603      	mov	r3, r0
 8010154:	b2db      	uxtb	r3, r3
 8010156:	f003 0303 	and.w	r3, r3, #3
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <tcp_rexmit_rto_prepare+0xba>
 801015e:	2301      	movs	r3, #1
 8010160:	e000      	b.n	8010164 <tcp_rexmit_rto_prepare+0xbc>
 8010162:	2300      	movs	r3, #0
 8010164:	442b      	add	r3, r5
 8010166:	18e2      	adds	r2, r4, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2200      	movs	r2, #0
 8010170:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010172:	2300      	movs	r3, #0
}
 8010174:	4618      	mov	r0, r3
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bdb0      	pop	{r4, r5, r7, pc}
 801017c:	08018658 	.word	0x08018658
 8010180:	08018c94 	.word	0x08018c94
 8010184:	080186ac 	.word	0x080186ac

08010188 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <tcp_rexmit_rto_commit+0x1c>
 8010196:	4b0d      	ldr	r3, [pc, #52]	; (80101cc <tcp_rexmit_rto_commit+0x44>)
 8010198:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801019c:	490c      	ldr	r1, [pc, #48]	; (80101d0 <tcp_rexmit_rto_commit+0x48>)
 801019e:	480d      	ldr	r0, [pc, #52]	; (80101d4 <tcp_rexmit_rto_commit+0x4c>)
 80101a0:	f005 fbec 	bl	801597c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101aa:	2bff      	cmp	r3, #255	; 0xff
 80101ac:	d007      	beq.n	80101be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101b4:	3301      	adds	r3, #1
 80101b6:	b2da      	uxtb	r2, r3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff fc80 	bl	800fac4 <tcp_output>
}
 80101c4:	bf00      	nop
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	08018658 	.word	0x08018658
 80101d0:	08018cb8 	.word	0x08018cb8
 80101d4:	080186ac 	.word	0x080186ac

080101d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d106      	bne.n	80101f4 <tcp_rexmit_rto+0x1c>
 80101e6:	4b0a      	ldr	r3, [pc, #40]	; (8010210 <tcp_rexmit_rto+0x38>)
 80101e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80101ec:	4909      	ldr	r1, [pc, #36]	; (8010214 <tcp_rexmit_rto+0x3c>)
 80101ee:	480a      	ldr	r0, [pc, #40]	; (8010218 <tcp_rexmit_rto+0x40>)
 80101f0:	f005 fbc4 	bl	801597c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7ff ff57 	bl	80100a8 <tcp_rexmit_rto_prepare>
 80101fa:	4603      	mov	r3, r0
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d102      	bne.n	8010206 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f7ff ffc1 	bl	8010188 <tcp_rexmit_rto_commit>
  }
}
 8010206:	bf00      	nop
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	08018658 	.word	0x08018658
 8010214:	08018cdc 	.word	0x08018cdc
 8010218:	080186ac 	.word	0x080186ac

0801021c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801021c:	b590      	push	{r4, r7, lr}
 801021e:	b085      	sub	sp, #20
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d106      	bne.n	8010238 <tcp_rexmit+0x1c>
 801022a:	4b2f      	ldr	r3, [pc, #188]	; (80102e8 <tcp_rexmit+0xcc>)
 801022c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010230:	492e      	ldr	r1, [pc, #184]	; (80102ec <tcp_rexmit+0xd0>)
 8010232:	482f      	ldr	r0, [pc, #188]	; (80102f0 <tcp_rexmit+0xd4>)
 8010234:	f005 fba2 	bl	801597c <iprintf>

  if (pcb->unacked == NULL) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010240:	f06f 0305 	mvn.w	r3, #5
 8010244:	e04c      	b.n	80102e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801024a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801024c:	68b8      	ldr	r0, [r7, #8]
 801024e:	f7ff fe2d 	bl	800feac <tcp_output_segment_busy>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d002      	beq.n	801025e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010258:	f06f 0305 	mvn.w	r3, #5
 801025c:	e040      	b.n	80102e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	336c      	adds	r3, #108	; 0x6c
 801026a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801026c:	e002      	b.n	8010274 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d011      	beq.n	80102a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	4618      	mov	r0, r3
 8010286:	f7f9 fc44 	bl	8009b12 <lwip_htonl>
 801028a:	4604      	mov	r4, r0
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	4618      	mov	r0, r3
 8010294:	f7f9 fc3d 	bl	8009b12 <lwip_htonl>
 8010298:	4603      	mov	r3, r0
 801029a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801029c:	2b00      	cmp	r3, #0
 801029e:	dbe6      	blt.n	801026e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681a      	ldr	r2, [r3, #0]
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d103      	bne.n	80102be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102c4:	2bff      	cmp	r3, #255	; 0xff
 80102c6:	d007      	beq.n	80102d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102ce:	3301      	adds	r3, #1
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80102de:	2300      	movs	r3, #0
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3714      	adds	r7, #20
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd90      	pop	{r4, r7, pc}
 80102e8:	08018658 	.word	0x08018658
 80102ec:	08018cf8 	.word	0x08018cf8
 80102f0:	080186ac 	.word	0x080186ac

080102f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d106      	bne.n	8010310 <tcp_rexmit_fast+0x1c>
 8010302:	4b2a      	ldr	r3, [pc, #168]	; (80103ac <tcp_rexmit_fast+0xb8>)
 8010304:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010308:	4929      	ldr	r1, [pc, #164]	; (80103b0 <tcp_rexmit_fast+0xbc>)
 801030a:	482a      	ldr	r0, [pc, #168]	; (80103b4 <tcp_rexmit_fast+0xc0>)
 801030c:	f005 fb36 	bl	801597c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010314:	2b00      	cmp	r3, #0
 8010316:	d045      	beq.n	80103a4 <tcp_rexmit_fast+0xb0>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	8b5b      	ldrh	r3, [r3, #26]
 801031c:	f003 0304 	and.w	r3, r3, #4
 8010320:	2b00      	cmp	r3, #0
 8010322:	d13f      	bne.n	80103a4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7ff ff79 	bl	801021c <tcp_rexmit>
 801032a:	4603      	mov	r3, r0
 801032c:	2b00      	cmp	r3, #0
 801032e:	d139      	bne.n	80103a4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801033c:	4293      	cmp	r3, r2
 801033e:	bf28      	it	cs
 8010340:	4613      	movcs	r3, r2
 8010342:	b29b      	uxth	r3, r3
 8010344:	2b00      	cmp	r3, #0
 8010346:	da00      	bge.n	801034a <tcp_rexmit_fast+0x56>
 8010348:	3301      	adds	r3, #1
 801034a:	105b      	asrs	r3, r3, #1
 801034c:	b29a      	uxth	r2, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801035a:	461a      	mov	r2, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010360:	005b      	lsls	r3, r3, #1
 8010362:	429a      	cmp	r2, r3
 8010364:	d206      	bcs.n	8010374 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	b29a      	uxth	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801037e:	4619      	mov	r1, r3
 8010380:	0049      	lsls	r1, r1, #1
 8010382:	440b      	add	r3, r1
 8010384:	b29b      	uxth	r3, r3
 8010386:	4413      	add	r3, r2
 8010388:	b29a      	uxth	r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	8b5b      	ldrh	r3, [r3, #26]
 8010394:	f043 0304 	orr.w	r3, r3, #4
 8010398:	b29a      	uxth	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80103a4:	bf00      	nop
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	08018658 	.word	0x08018658
 80103b0:	08018d10 	.word	0x08018d10
 80103b4:	080186ac 	.word	0x080186ac

080103b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b086      	sub	sp, #24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	607b      	str	r3, [r7, #4]
 80103c2:	460b      	mov	r3, r1
 80103c4:	817b      	strh	r3, [r7, #10]
 80103c6:	4613      	mov	r3, r2
 80103c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80103ca:	897a      	ldrh	r2, [r7, #10]
 80103cc:	893b      	ldrh	r3, [r7, #8]
 80103ce:	4413      	add	r3, r2
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	3314      	adds	r3, #20
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80103da:	4619      	mov	r1, r3
 80103dc:	2022      	movs	r0, #34	; 0x22
 80103de:	f7fa fc09 	bl	800abf4 <pbuf_alloc>
 80103e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d04d      	beq.n	8010486 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80103ea:	897b      	ldrh	r3, [r7, #10]
 80103ec:	3313      	adds	r3, #19
 80103ee:	697a      	ldr	r2, [r7, #20]
 80103f0:	8952      	ldrh	r2, [r2, #10]
 80103f2:	4293      	cmp	r3, r2
 80103f4:	db06      	blt.n	8010404 <tcp_output_alloc_header_common+0x4c>
 80103f6:	4b26      	ldr	r3, [pc, #152]	; (8010490 <tcp_output_alloc_header_common+0xd8>)
 80103f8:	f240 7223 	movw	r2, #1827	; 0x723
 80103fc:	4925      	ldr	r1, [pc, #148]	; (8010494 <tcp_output_alloc_header_common+0xdc>)
 80103fe:	4826      	ldr	r0, [pc, #152]	; (8010498 <tcp_output_alloc_header_common+0xe0>)
 8010400:	f005 fabc 	bl	801597c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801040a:	8c3b      	ldrh	r3, [r7, #32]
 801040c:	4618      	mov	r0, r3
 801040e:	f7f9 fb6b 	bl	8009ae8 <lwip_htons>
 8010412:	4603      	mov	r3, r0
 8010414:	461a      	mov	r2, r3
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801041a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801041c:	4618      	mov	r0, r3
 801041e:	f7f9 fb63 	bl	8009ae8 <lwip_htons>
 8010422:	4603      	mov	r3, r0
 8010424:	461a      	mov	r2, r3
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010430:	68f8      	ldr	r0, [r7, #12]
 8010432:	f7f9 fb6e 	bl	8009b12 <lwip_htonl>
 8010436:	4602      	mov	r2, r0
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801043c:	897b      	ldrh	r3, [r7, #10]
 801043e:	089b      	lsrs	r3, r3, #2
 8010440:	b29b      	uxth	r3, r3
 8010442:	3305      	adds	r3, #5
 8010444:	b29b      	uxth	r3, r3
 8010446:	031b      	lsls	r3, r3, #12
 8010448:	b29a      	uxth	r2, r3
 801044a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801044e:	b29b      	uxth	r3, r3
 8010450:	4313      	orrs	r3, r2
 8010452:	b29b      	uxth	r3, r3
 8010454:	4618      	mov	r0, r3
 8010456:	f7f9 fb47 	bl	8009ae8 <lwip_htons>
 801045a:	4603      	mov	r3, r0
 801045c:	461a      	mov	r2, r3
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010462:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010464:	4618      	mov	r0, r3
 8010466:	f7f9 fb3f 	bl	8009ae8 <lwip_htons>
 801046a:	4603      	mov	r3, r0
 801046c:	461a      	mov	r2, r3
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	2200      	movs	r2, #0
 8010476:	741a      	strb	r2, [r3, #16]
 8010478:	2200      	movs	r2, #0
 801047a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	2200      	movs	r2, #0
 8010480:	749a      	strb	r2, [r3, #18]
 8010482:	2200      	movs	r2, #0
 8010484:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010486:	697b      	ldr	r3, [r7, #20]
}
 8010488:	4618      	mov	r0, r3
 801048a:	3718      	adds	r7, #24
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	08018658 	.word	0x08018658
 8010494:	08018d30 	.word	0x08018d30
 8010498:	080186ac 	.word	0x080186ac

0801049c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801049c:	b5b0      	push	{r4, r5, r7, lr}
 801049e:	b08a      	sub	sp, #40	; 0x28
 80104a0:	af04      	add	r7, sp, #16
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	607b      	str	r3, [r7, #4]
 80104a6:	460b      	mov	r3, r1
 80104a8:	817b      	strh	r3, [r7, #10]
 80104aa:	4613      	mov	r3, r2
 80104ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d106      	bne.n	80104c2 <tcp_output_alloc_header+0x26>
 80104b4:	4b15      	ldr	r3, [pc, #84]	; (801050c <tcp_output_alloc_header+0x70>)
 80104b6:	f240 7242 	movw	r2, #1858	; 0x742
 80104ba:	4915      	ldr	r1, [pc, #84]	; (8010510 <tcp_output_alloc_header+0x74>)
 80104bc:	4815      	ldr	r0, [pc, #84]	; (8010514 <tcp_output_alloc_header+0x78>)
 80104be:	f005 fa5d 	bl	801597c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	8adb      	ldrh	r3, [r3, #22]
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	8b12      	ldrh	r2, [r2, #24]
 80104ce:	68f9      	ldr	r1, [r7, #12]
 80104d0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80104d2:	893d      	ldrh	r5, [r7, #8]
 80104d4:	897c      	ldrh	r4, [r7, #10]
 80104d6:	9103      	str	r1, [sp, #12]
 80104d8:	2110      	movs	r1, #16
 80104da:	9102      	str	r1, [sp, #8]
 80104dc:	9201      	str	r2, [sp, #4]
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	462a      	mov	r2, r5
 80104e4:	4621      	mov	r1, r4
 80104e6:	f7ff ff67 	bl	80103b8 <tcp_output_alloc_header_common>
 80104ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d006      	beq.n	8010500 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f6:	68fa      	ldr	r2, [r7, #12]
 80104f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80104fa:	441a      	add	r2, r3
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010500:	697b      	ldr	r3, [r7, #20]
}
 8010502:	4618      	mov	r0, r3
 8010504:	3718      	adds	r7, #24
 8010506:	46bd      	mov	sp, r7
 8010508:	bdb0      	pop	{r4, r5, r7, pc}
 801050a:	bf00      	nop
 801050c:	08018658 	.word	0x08018658
 8010510:	08018d60 	.word	0x08018d60
 8010514:	080186ac 	.word	0x080186ac

08010518 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b088      	sub	sp, #32
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	4611      	mov	r1, r2
 8010524:	461a      	mov	r2, r3
 8010526:	460b      	mov	r3, r1
 8010528:	71fb      	strb	r3, [r7, #7]
 801052a:	4613      	mov	r3, r2
 801052c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d106      	bne.n	8010546 <tcp_output_fill_options+0x2e>
 8010538:	4b13      	ldr	r3, [pc, #76]	; (8010588 <tcp_output_fill_options+0x70>)
 801053a:	f240 7256 	movw	r2, #1878	; 0x756
 801053e:	4913      	ldr	r1, [pc, #76]	; (801058c <tcp_output_fill_options+0x74>)
 8010540:	4813      	ldr	r0, [pc, #76]	; (8010590 <tcp_output_fill_options+0x78>)
 8010542:	f005 fa1b 	bl	801597c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	3314      	adds	r3, #20
 8010550:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	f103 0214 	add.w	r2, r3, #20
 8010558:	8bfb      	ldrh	r3, [r7, #30]
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	4619      	mov	r1, r3
 801055e:	79fb      	ldrb	r3, [r7, #7]
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	f003 0304 	and.w	r3, r3, #4
 8010566:	440b      	add	r3, r1
 8010568:	4413      	add	r3, r2
 801056a:	697a      	ldr	r2, [r7, #20]
 801056c:	429a      	cmp	r2, r3
 801056e:	d006      	beq.n	801057e <tcp_output_fill_options+0x66>
 8010570:	4b05      	ldr	r3, [pc, #20]	; (8010588 <tcp_output_fill_options+0x70>)
 8010572:	f240 7275 	movw	r2, #1909	; 0x775
 8010576:	4907      	ldr	r1, [pc, #28]	; (8010594 <tcp_output_fill_options+0x7c>)
 8010578:	4805      	ldr	r0, [pc, #20]	; (8010590 <tcp_output_fill_options+0x78>)
 801057a:	f005 f9ff 	bl	801597c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801057e:	bf00      	nop
 8010580:	3720      	adds	r7, #32
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
 8010586:	bf00      	nop
 8010588:	08018658 	.word	0x08018658
 801058c:	08018d88 	.word	0x08018d88
 8010590:	080186ac 	.word	0x080186ac
 8010594:	08018c80 	.word	0x08018c80

08010598 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b08a      	sub	sp, #40	; 0x28
 801059c:	af04      	add	r7, sp, #16
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
 80105a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d106      	bne.n	80105ba <tcp_output_control_segment+0x22>
 80105ac:	4b1c      	ldr	r3, [pc, #112]	; (8010620 <tcp_output_control_segment+0x88>)
 80105ae:	f240 7287 	movw	r2, #1927	; 0x787
 80105b2:	491c      	ldr	r1, [pc, #112]	; (8010624 <tcp_output_control_segment+0x8c>)
 80105b4:	481c      	ldr	r0, [pc, #112]	; (8010628 <tcp_output_control_segment+0x90>)
 80105b6:	f005 f9e1 	bl	801597c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	6879      	ldr	r1, [r7, #4]
 80105be:	68f8      	ldr	r0, [r7, #12]
 80105c0:	f7fe ff40 	bl	800f444 <tcp_route>
 80105c4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d102      	bne.n	80105d2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80105cc:	23fc      	movs	r3, #252	; 0xfc
 80105ce:	75fb      	strb	r3, [r7, #23]
 80105d0:	e01c      	b.n	801060c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d006      	beq.n	80105e6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	7adb      	ldrb	r3, [r3, #11]
 80105dc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	7a9b      	ldrb	r3, [r3, #10]
 80105e2:	757b      	strb	r3, [r7, #21]
 80105e4:	e003      	b.n	80105ee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80105e6:	23ff      	movs	r3, #255	; 0xff
 80105e8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80105ea:	2300      	movs	r3, #0
 80105ec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80105ee:	7dba      	ldrb	r2, [r7, #22]
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	9302      	str	r3, [sp, #8]
 80105f4:	2306      	movs	r3, #6
 80105f6:	9301      	str	r3, [sp, #4]
 80105f8:	7d7b      	ldrb	r3, [r7, #21]
 80105fa:	9300      	str	r3, [sp, #0]
 80105fc:	4613      	mov	r3, r2
 80105fe:	683a      	ldr	r2, [r7, #0]
 8010600:	6879      	ldr	r1, [r7, #4]
 8010602:	68b8      	ldr	r0, [r7, #8]
 8010604:	f004 f928 	bl	8014858 <ip4_output_if>
 8010608:	4603      	mov	r3, r0
 801060a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801060c:	68b8      	ldr	r0, [r7, #8]
 801060e:	f7fa fdd5 	bl	800b1bc <pbuf_free>
  return err;
 8010612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010616:	4618      	mov	r0, r3
 8010618:	3718      	adds	r7, #24
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	08018658 	.word	0x08018658
 8010624:	08018db0 	.word	0x08018db0
 8010628:	080186ac 	.word	0x080186ac

0801062c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801062c:	b590      	push	{r4, r7, lr}
 801062e:	b08b      	sub	sp, #44	; 0x2c
 8010630:	af04      	add	r7, sp, #16
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	607a      	str	r2, [r7, #4]
 8010638:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d106      	bne.n	801064e <tcp_rst+0x22>
 8010640:	4b1f      	ldr	r3, [pc, #124]	; (80106c0 <tcp_rst+0x94>)
 8010642:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010646:	491f      	ldr	r1, [pc, #124]	; (80106c4 <tcp_rst+0x98>)
 8010648:	481f      	ldr	r0, [pc, #124]	; (80106c8 <tcp_rst+0x9c>)
 801064a:	f005 f997 	bl	801597c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010650:	2b00      	cmp	r3, #0
 8010652:	d106      	bne.n	8010662 <tcp_rst+0x36>
 8010654:	4b1a      	ldr	r3, [pc, #104]	; (80106c0 <tcp_rst+0x94>)
 8010656:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801065a:	491c      	ldr	r1, [pc, #112]	; (80106cc <tcp_rst+0xa0>)
 801065c:	481a      	ldr	r0, [pc, #104]	; (80106c8 <tcp_rst+0x9c>)
 801065e:	f005 f98d 	bl	801597c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010662:	2300      	movs	r3, #0
 8010664:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010666:	f246 0308 	movw	r3, #24584	; 0x6008
 801066a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801066c:	7dfb      	ldrb	r3, [r7, #23]
 801066e:	b29c      	uxth	r4, r3
 8010670:	68b8      	ldr	r0, [r7, #8]
 8010672:	f7f9 fa4e 	bl	8009b12 <lwip_htonl>
 8010676:	4602      	mov	r2, r0
 8010678:	8abb      	ldrh	r3, [r7, #20]
 801067a:	9303      	str	r3, [sp, #12]
 801067c:	2314      	movs	r3, #20
 801067e:	9302      	str	r3, [sp, #8]
 8010680:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010682:	9301      	str	r3, [sp, #4]
 8010684:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010686:	9300      	str	r3, [sp, #0]
 8010688:	4613      	mov	r3, r2
 801068a:	2200      	movs	r2, #0
 801068c:	4621      	mov	r1, r4
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f7ff fe92 	bl	80103b8 <tcp_output_alloc_header_common>
 8010694:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00c      	beq.n	80106b6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801069c:	7dfb      	ldrb	r3, [r7, #23]
 801069e:	2200      	movs	r2, #0
 80106a0:	6939      	ldr	r1, [r7, #16]
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f7ff ff38 	bl	8010518 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	6939      	ldr	r1, [r7, #16]
 80106ae:	68f8      	ldr	r0, [r7, #12]
 80106b0:	f7ff ff72 	bl	8010598 <tcp_output_control_segment>
 80106b4:	e000      	b.n	80106b8 <tcp_rst+0x8c>
    return;
 80106b6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80106b8:	371c      	adds	r7, #28
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd90      	pop	{r4, r7, pc}
 80106be:	bf00      	nop
 80106c0:	08018658 	.word	0x08018658
 80106c4:	08018ddc 	.word	0x08018ddc
 80106c8:	080186ac 	.word	0x080186ac
 80106cc:	08018df8 	.word	0x08018df8

080106d0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80106d0:	b590      	push	{r4, r7, lr}
 80106d2:	b087      	sub	sp, #28
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80106d8:	2300      	movs	r3, #0
 80106da:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80106dc:	2300      	movs	r3, #0
 80106de:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d106      	bne.n	80106f4 <tcp_send_empty_ack+0x24>
 80106e6:	4b28      	ldr	r3, [pc, #160]	; (8010788 <tcp_send_empty_ack+0xb8>)
 80106e8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80106ec:	4927      	ldr	r1, [pc, #156]	; (801078c <tcp_send_empty_ack+0xbc>)
 80106ee:	4828      	ldr	r0, [pc, #160]	; (8010790 <tcp_send_empty_ack+0xc0>)
 80106f0:	f005 f944 	bl	801597c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80106f4:	7dfb      	ldrb	r3, [r7, #23]
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	f003 0304 	and.w	r3, r3, #4
 80106fe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010700:	7d7b      	ldrb	r3, [r7, #21]
 8010702:	b29c      	uxth	r4, r3
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010708:	4618      	mov	r0, r3
 801070a:	f7f9 fa02 	bl	8009b12 <lwip_htonl>
 801070e:	4603      	mov	r3, r0
 8010710:	2200      	movs	r2, #0
 8010712:	4621      	mov	r1, r4
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff fec1 	bl	801049c <tcp_output_alloc_header>
 801071a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d109      	bne.n	8010736 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	8b5b      	ldrh	r3, [r3, #26]
 8010726:	f043 0303 	orr.w	r3, r3, #3
 801072a:	b29a      	uxth	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010730:	f06f 0301 	mvn.w	r3, #1
 8010734:	e023      	b.n	801077e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010736:	7dbb      	ldrb	r3, [r7, #22]
 8010738:	7dfa      	ldrb	r2, [r7, #23]
 801073a:	6939      	ldr	r1, [r7, #16]
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f7ff feeb 	bl	8010518 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	3304      	adds	r3, #4
 8010748:	6939      	ldr	r1, [r7, #16]
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f7ff ff24 	bl	8010598 <tcp_output_control_segment>
 8010750:	4603      	mov	r3, r0
 8010752:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d007      	beq.n	801076c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	8b5b      	ldrh	r3, [r3, #26]
 8010760:	f043 0303 	orr.w	r3, r3, #3
 8010764:	b29a      	uxth	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	835a      	strh	r2, [r3, #26]
 801076a:	e006      	b.n	801077a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	8b5b      	ldrh	r3, [r3, #26]
 8010770:	f023 0303 	bic.w	r3, r3, #3
 8010774:	b29a      	uxth	r2, r3
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801077a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801077e:	4618      	mov	r0, r3
 8010780:	371c      	adds	r7, #28
 8010782:	46bd      	mov	sp, r7
 8010784:	bd90      	pop	{r4, r7, pc}
 8010786:	bf00      	nop
 8010788:	08018658 	.word	0x08018658
 801078c:	08018e14 	.word	0x08018e14
 8010790:	080186ac 	.word	0x080186ac

08010794 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010794:	b590      	push	{r4, r7, lr}
 8010796:	b087      	sub	sp, #28
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801079c:	2300      	movs	r3, #0
 801079e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d106      	bne.n	80107b4 <tcp_keepalive+0x20>
 80107a6:	4b18      	ldr	r3, [pc, #96]	; (8010808 <tcp_keepalive+0x74>)
 80107a8:	f640 0224 	movw	r2, #2084	; 0x824
 80107ac:	4917      	ldr	r1, [pc, #92]	; (801080c <tcp_keepalive+0x78>)
 80107ae:	4818      	ldr	r0, [pc, #96]	; (8010810 <tcp_keepalive+0x7c>)
 80107b0:	f005 f8e4 	bl	801597c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80107b4:	7dfb      	ldrb	r3, [r7, #23]
 80107b6:	b29c      	uxth	r4, r3
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107bc:	3b01      	subs	r3, #1
 80107be:	4618      	mov	r0, r3
 80107c0:	f7f9 f9a7 	bl	8009b12 <lwip_htonl>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2200      	movs	r2, #0
 80107c8:	4621      	mov	r1, r4
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f7ff fe66 	bl	801049c <tcp_output_alloc_header>
 80107d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d102      	bne.n	80107de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80107d8:	f04f 33ff 	mov.w	r3, #4294967295
 80107dc:	e010      	b.n	8010800 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80107de:	7dfb      	ldrb	r3, [r7, #23]
 80107e0:	2200      	movs	r2, #0
 80107e2:	6939      	ldr	r1, [r7, #16]
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f7ff fe97 	bl	8010518 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	3304      	adds	r3, #4
 80107f0:	6939      	ldr	r1, [r7, #16]
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f7ff fed0 	bl	8010598 <tcp_output_control_segment>
 80107f8:	4603      	mov	r3, r0
 80107fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80107fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010800:	4618      	mov	r0, r3
 8010802:	371c      	adds	r7, #28
 8010804:	46bd      	mov	sp, r7
 8010806:	bd90      	pop	{r4, r7, pc}
 8010808:	08018658 	.word	0x08018658
 801080c:	08018e34 	.word	0x08018e34
 8010810:	080186ac 	.word	0x080186ac

08010814 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010814:	b590      	push	{r4, r7, lr}
 8010816:	b08b      	sub	sp, #44	; 0x2c
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801081c:	2300      	movs	r3, #0
 801081e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d106      	bne.n	8010836 <tcp_zero_window_probe+0x22>
 8010828:	4b4c      	ldr	r3, [pc, #304]	; (801095c <tcp_zero_window_probe+0x148>)
 801082a:	f640 024f 	movw	r2, #2127	; 0x84f
 801082e:	494c      	ldr	r1, [pc, #304]	; (8010960 <tcp_zero_window_probe+0x14c>)
 8010830:	484c      	ldr	r0, [pc, #304]	; (8010964 <tcp_zero_window_probe+0x150>)
 8010832:	f005 f8a3 	bl	801597c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801083a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801083c:	6a3b      	ldr	r3, [r7, #32]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d101      	bne.n	8010846 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010842:	2300      	movs	r3, #0
 8010844:	e086      	b.n	8010954 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801084c:	2bff      	cmp	r3, #255	; 0xff
 801084e:	d007      	beq.n	8010860 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010856:	3301      	adds	r3, #1
 8010858:	b2da      	uxtb	r2, r3
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010860:	6a3b      	ldr	r3, [r7, #32]
 8010862:	68db      	ldr	r3, [r3, #12]
 8010864:	899b      	ldrh	r3, [r3, #12]
 8010866:	b29b      	uxth	r3, r3
 8010868:	4618      	mov	r0, r3
 801086a:	f7f9 f93d 	bl	8009ae8 <lwip_htons>
 801086e:	4603      	mov	r3, r0
 8010870:	b2db      	uxtb	r3, r3
 8010872:	f003 0301 	and.w	r3, r3, #1
 8010876:	2b00      	cmp	r3, #0
 8010878:	d005      	beq.n	8010886 <tcp_zero_window_probe+0x72>
 801087a:	6a3b      	ldr	r3, [r7, #32]
 801087c:	891b      	ldrh	r3, [r3, #8]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d101      	bne.n	8010886 <tcp_zero_window_probe+0x72>
 8010882:	2301      	movs	r3, #1
 8010884:	e000      	b.n	8010888 <tcp_zero_window_probe+0x74>
 8010886:	2300      	movs	r3, #0
 8010888:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801088a:	7ffb      	ldrb	r3, [r7, #31]
 801088c:	2b00      	cmp	r3, #0
 801088e:	bf0c      	ite	eq
 8010890:	2301      	moveq	r3, #1
 8010892:	2300      	movne	r3, #0
 8010894:	b2db      	uxtb	r3, r3
 8010896:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801089c:	b299      	uxth	r1, r3
 801089e:	6a3b      	ldr	r3, [r7, #32]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	8bba      	ldrh	r2, [r7, #28]
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7ff fdf8 	bl	801049c <tcp_output_alloc_header>
 80108ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d102      	bne.n	80108ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80108b4:	f04f 33ff 	mov.w	r3, #4294967295
 80108b8:	e04c      	b.n	8010954 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80108c0:	7ffb      	ldrb	r3, [r7, #31]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d011      	beq.n	80108ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	899b      	ldrh	r3, [r3, #12]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	b21b      	sxth	r3, r3
 80108ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80108d2:	b21c      	sxth	r4, r3
 80108d4:	2011      	movs	r0, #17
 80108d6:	f7f9 f907 	bl	8009ae8 <lwip_htons>
 80108da:	4603      	mov	r3, r0
 80108dc:	b21b      	sxth	r3, r3
 80108de:	4323      	orrs	r3, r4
 80108e0:	b21b      	sxth	r3, r3
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	819a      	strh	r2, [r3, #12]
 80108e8:	e010      	b.n	801090c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	3314      	adds	r3, #20
 80108f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	6858      	ldr	r0, [r3, #4]
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	891a      	ldrh	r2, [r3, #8]
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	891b      	ldrh	r3, [r3, #8]
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	b29b      	uxth	r3, r3
 8010904:	2201      	movs	r2, #1
 8010906:	6939      	ldr	r1, [r7, #16]
 8010908:	f7fa fe52 	bl	800b5b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801090c:	6a3b      	ldr	r3, [r7, #32]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	4618      	mov	r0, r3
 8010914:	f7f9 f8fd 	bl	8009b12 <lwip_htonl>
 8010918:	4603      	mov	r3, r0
 801091a:	3301      	adds	r3, #1
 801091c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	1ad3      	subs	r3, r2, r3
 8010926:	2b00      	cmp	r3, #0
 8010928:	da02      	bge.n	8010930 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010934:	2200      	movs	r2, #0
 8010936:	69b9      	ldr	r1, [r7, #24]
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7ff fded 	bl	8010518 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	3304      	adds	r3, #4
 8010944:	69b9      	ldr	r1, [r7, #24]
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f7ff fe26 	bl	8010598 <tcp_output_control_segment>
 801094c:	4603      	mov	r3, r0
 801094e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010950:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010954:	4618      	mov	r0, r3
 8010956:	372c      	adds	r7, #44	; 0x2c
 8010958:	46bd      	mov	sp, r7
 801095a:	bd90      	pop	{r4, r7, pc}
 801095c:	08018658 	.word	0x08018658
 8010960:	08018e50 	.word	0x08018e50
 8010964:	080186ac 	.word	0x080186ac

08010968 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010970:	f7fa ff0c 	bl	800b78c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010974:	4b0a      	ldr	r3, [pc, #40]	; (80109a0 <tcpip_tcp_timer+0x38>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d103      	bne.n	8010984 <tcpip_tcp_timer+0x1c>
 801097c:	4b09      	ldr	r3, [pc, #36]	; (80109a4 <tcpip_tcp_timer+0x3c>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d005      	beq.n	8010990 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010984:	2200      	movs	r2, #0
 8010986:	4908      	ldr	r1, [pc, #32]	; (80109a8 <tcpip_tcp_timer+0x40>)
 8010988:	20fa      	movs	r0, #250	; 0xfa
 801098a:	f000 f8f3 	bl	8010b74 <sys_timeout>
 801098e:	e003      	b.n	8010998 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010990:	4b06      	ldr	r3, [pc, #24]	; (80109ac <tcpip_tcp_timer+0x44>)
 8010992:	2200      	movs	r2, #0
 8010994:	601a      	str	r2, [r3, #0]
  }
}
 8010996:	bf00      	nop
 8010998:	bf00      	nop
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	2000b034 	.word	0x2000b034
 80109a4:	2000b038 	.word	0x2000b038
 80109a8:	08010969 	.word	0x08010969
 80109ac:	2000b080 	.word	0x2000b080

080109b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80109b4:	4b0a      	ldr	r3, [pc, #40]	; (80109e0 <tcp_timer_needed+0x30>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d10f      	bne.n	80109dc <tcp_timer_needed+0x2c>
 80109bc:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <tcp_timer_needed+0x34>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d103      	bne.n	80109cc <tcp_timer_needed+0x1c>
 80109c4:	4b08      	ldr	r3, [pc, #32]	; (80109e8 <tcp_timer_needed+0x38>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d007      	beq.n	80109dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80109cc:	4b04      	ldr	r3, [pc, #16]	; (80109e0 <tcp_timer_needed+0x30>)
 80109ce:	2201      	movs	r2, #1
 80109d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80109d2:	2200      	movs	r2, #0
 80109d4:	4905      	ldr	r1, [pc, #20]	; (80109ec <tcp_timer_needed+0x3c>)
 80109d6:	20fa      	movs	r0, #250	; 0xfa
 80109d8:	f000 f8cc 	bl	8010b74 <sys_timeout>
  }
}
 80109dc:	bf00      	nop
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	2000b080 	.word	0x2000b080
 80109e4:	2000b034 	.word	0x2000b034
 80109e8:	2000b038 	.word	0x2000b038
 80109ec:	08010969 	.word	0x08010969

080109f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80109fc:	2006      	movs	r0, #6
 80109fe:	f7f9 fceb 	bl	800a3d8 <memp_malloc>
 8010a02:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d109      	bne.n	8010a1e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d151      	bne.n	8010ab4 <sys_timeout_abs+0xc4>
 8010a10:	4b2a      	ldr	r3, [pc, #168]	; (8010abc <sys_timeout_abs+0xcc>)
 8010a12:	22be      	movs	r2, #190	; 0xbe
 8010a14:	492a      	ldr	r1, [pc, #168]	; (8010ac0 <sys_timeout_abs+0xd0>)
 8010a16:	482b      	ldr	r0, [pc, #172]	; (8010ac4 <sys_timeout_abs+0xd4>)
 8010a18:	f004 ffb0 	bl	801597c <iprintf>
    return;
 8010a1c:	e04a      	b.n	8010ab4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	2200      	movs	r2, #0
 8010a22:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	68ba      	ldr	r2, [r7, #8]
 8010a28:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010a36:	4b24      	ldr	r3, [pc, #144]	; (8010ac8 <sys_timeout_abs+0xd8>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d103      	bne.n	8010a46 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010a3e:	4a22      	ldr	r2, [pc, #136]	; (8010ac8 <sys_timeout_abs+0xd8>)
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	6013      	str	r3, [r2, #0]
    return;
 8010a44:	e037      	b.n	8010ab6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	685a      	ldr	r2, [r3, #4]
 8010a4a:	4b1f      	ldr	r3, [pc, #124]	; (8010ac8 <sys_timeout_abs+0xd8>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	1ad3      	subs	r3, r2, r3
 8010a52:	0fdb      	lsrs	r3, r3, #31
 8010a54:	f003 0301 	and.w	r3, r3, #1
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d007      	beq.n	8010a6e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010a5e:	4b1a      	ldr	r3, [pc, #104]	; (8010ac8 <sys_timeout_abs+0xd8>)
 8010a60:	681a      	ldr	r2, [r3, #0]
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010a66:	4a18      	ldr	r2, [pc, #96]	; (8010ac8 <sys_timeout_abs+0xd8>)
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	6013      	str	r3, [r2, #0]
 8010a6c:	e023      	b.n	8010ab6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010a6e:	4b16      	ldr	r3, [pc, #88]	; (8010ac8 <sys_timeout_abs+0xd8>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	617b      	str	r3, [r7, #20]
 8010a74:	e01a      	b.n	8010aac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d00b      	beq.n	8010a96 <sys_timeout_abs+0xa6>
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	0fdb      	lsrs	r3, r3, #31
 8010a8c:	f003 0301 	and.w	r3, r3, #1
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d007      	beq.n	8010aa6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	693a      	ldr	r2, [r7, #16]
 8010aa2:	601a      	str	r2, [r3, #0]
        break;
 8010aa4:	e007      	b.n	8010ab6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	617b      	str	r3, [r7, #20]
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1e1      	bne.n	8010a76 <sys_timeout_abs+0x86>
 8010ab2:	e000      	b.n	8010ab6 <sys_timeout_abs+0xc6>
    return;
 8010ab4:	bf00      	nop
      }
    }
  }
}
 8010ab6:	3718      	adds	r7, #24
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	08018e74 	.word	0x08018e74
 8010ac0:	08018ea8 	.word	0x08018ea8
 8010ac4:	08018ee8 	.word	0x08018ee8
 8010ac8:	2000b078 	.word	0x2000b078

08010acc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b086      	sub	sp, #24
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	4798      	blx	r3

  now = sys_now();
 8010ade:	f7f8 fdef 	bl	80096c0 <sys_now>
 8010ae2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	4b0f      	ldr	r3, [pc, #60]	; (8010b28 <lwip_cyclic_timer+0x5c>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4413      	add	r3, r2
 8010aee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010af0:	68fa      	ldr	r2, [r7, #12]
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	0fdb      	lsrs	r3, r3, #31
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d009      	beq.n	8010b16 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	4413      	add	r3, r2
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	4907      	ldr	r1, [pc, #28]	; (8010b2c <lwip_cyclic_timer+0x60>)
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7ff ff6e 	bl	80109f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010b14:	e004      	b.n	8010b20 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	4904      	ldr	r1, [pc, #16]	; (8010b2c <lwip_cyclic_timer+0x60>)
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f7ff ff68 	bl	80109f0 <sys_timeout_abs>
}
 8010b20:	bf00      	nop
 8010b22:	3718      	adds	r7, #24
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	2000b07c 	.word	0x2000b07c
 8010b2c:	08010acd 	.word	0x08010acd

08010b30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010b36:	2301      	movs	r3, #1
 8010b38:	607b      	str	r3, [r7, #4]
 8010b3a:	e00e      	b.n	8010b5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010b3c:	4a0b      	ldr	r2, [pc, #44]	; (8010b6c <sys_timeouts_init+0x3c>)
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	00db      	lsls	r3, r3, #3
 8010b48:	4a08      	ldr	r2, [pc, #32]	; (8010b6c <sys_timeouts_init+0x3c>)
 8010b4a:	4413      	add	r3, r2
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	4908      	ldr	r1, [pc, #32]	; (8010b70 <sys_timeouts_init+0x40>)
 8010b50:	f000 f810 	bl	8010b74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	3301      	adds	r3, #1
 8010b58:	607b      	str	r3, [r7, #4]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b04      	cmp	r3, #4
 8010b5e:	d9ed      	bls.n	8010b3c <sys_timeouts_init+0xc>
  }
}
 8010b60:	bf00      	nop
 8010b62:	bf00      	nop
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	0801c4e0 	.word	0x0801c4e0
 8010b70:	08010acd 	.word	0x08010acd

08010b74 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b86:	d306      	bcc.n	8010b96 <sys_timeout+0x22>
 8010b88:	4b0a      	ldr	r3, [pc, #40]	; (8010bb4 <sys_timeout+0x40>)
 8010b8a:	f240 1229 	movw	r2, #297	; 0x129
 8010b8e:	490a      	ldr	r1, [pc, #40]	; (8010bb8 <sys_timeout+0x44>)
 8010b90:	480a      	ldr	r0, [pc, #40]	; (8010bbc <sys_timeout+0x48>)
 8010b92:	f004 fef3 	bl	801597c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010b96:	f7f8 fd93 	bl	80096c0 <sys_now>
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	68b9      	ldr	r1, [r7, #8]
 8010ba6:	6978      	ldr	r0, [r7, #20]
 8010ba8:	f7ff ff22 	bl	80109f0 <sys_timeout_abs>
#endif
}
 8010bac:	bf00      	nop
 8010bae:	3718      	adds	r7, #24
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	08018e74 	.word	0x08018e74
 8010bb8:	08018f10 	.word	0x08018f10
 8010bbc:	08018ee8 	.word	0x08018ee8

08010bc0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010bc6:	f7f8 fd7b 	bl	80096c0 <sys_now>
 8010bca:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010bcc:	4b1a      	ldr	r3, [pc, #104]	; (8010c38 <sys_check_timeouts+0x78>)
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d001      	beq.n	8010bda <sys_check_timeouts+0x1a>
 8010bd6:	f7f9 ffb7 	bl	800ab48 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010bda:	4b18      	ldr	r3, [pc, #96]	; (8010c3c <sys_check_timeouts+0x7c>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d022      	beq.n	8010c2c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	1ad3      	subs	r3, r2, r3
 8010bee:	0fdb      	lsrs	r3, r3, #31
 8010bf0:	f003 0301 	and.w	r3, r3, #1
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d11a      	bne.n	8010c30 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4a0f      	ldr	r2, [pc, #60]	; (8010c3c <sys_check_timeouts+0x7c>)
 8010c00:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	4a0b      	ldr	r2, [pc, #44]	; (8010c40 <sys_check_timeouts+0x80>)
 8010c14:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010c16:	68b9      	ldr	r1, [r7, #8]
 8010c18:	2006      	movs	r0, #6
 8010c1a:	f7f9 fc4d 	bl	800a4b8 <memp_free>
    if (handler != NULL) {
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d0d3      	beq.n	8010bcc <sys_check_timeouts+0xc>
      handler(arg);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6838      	ldr	r0, [r7, #0]
 8010c28:	4798      	blx	r3
  do {
 8010c2a:	e7cf      	b.n	8010bcc <sys_check_timeouts+0xc>
      return;
 8010c2c:	bf00      	nop
 8010c2e:	e000      	b.n	8010c32 <sys_check_timeouts+0x72>
      return;
 8010c30:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010c32:	3710      	adds	r7, #16
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	2000b025 	.word	0x2000b025
 8010c3c:	2000b078 	.word	0x2000b078
 8010c40:	2000b07c 	.word	0x2000b07c

08010c44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010c48:	f004 feb0 	bl	80159ac <rand>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	4b01      	ldr	r3, [pc, #4]	; (8010c64 <udp_init+0x20>)
 8010c5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010c60:	bf00      	nop
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	2000005c 	.word	0x2000005c

08010c68 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010c72:	4b17      	ldr	r3, [pc, #92]	; (8010cd0 <udp_new_port+0x68>)
 8010c74:	881b      	ldrh	r3, [r3, #0]
 8010c76:	1c5a      	adds	r2, r3, #1
 8010c78:	b291      	uxth	r1, r2
 8010c7a:	4a15      	ldr	r2, [pc, #84]	; (8010cd0 <udp_new_port+0x68>)
 8010c7c:	8011      	strh	r1, [r2, #0]
 8010c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d103      	bne.n	8010c8e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010c86:	4b12      	ldr	r3, [pc, #72]	; (8010cd0 <udp_new_port+0x68>)
 8010c88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010c8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c8e:	4b11      	ldr	r3, [pc, #68]	; (8010cd4 <udp_new_port+0x6c>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	603b      	str	r3, [r7, #0]
 8010c94:	e011      	b.n	8010cba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	8a5a      	ldrh	r2, [r3, #18]
 8010c9a:	4b0d      	ldr	r3, [pc, #52]	; (8010cd0 <udp_new_port+0x68>)
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d108      	bne.n	8010cb4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010ca2:	88fb      	ldrh	r3, [r7, #6]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	80fb      	strh	r3, [r7, #6]
 8010ca8:	88fb      	ldrh	r3, [r7, #6]
 8010caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010cae:	d3e0      	bcc.n	8010c72 <udp_new_port+0xa>
        return 0;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	e007      	b.n	8010cc4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	603b      	str	r3, [r7, #0]
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1ea      	bne.n	8010c96 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010cc0:	4b03      	ldr	r3, [pc, #12]	; (8010cd0 <udp_new_port+0x68>)
 8010cc2:	881b      	ldrh	r3, [r3, #0]
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr
 8010cd0:	2000005c 	.word	0x2000005c
 8010cd4:	2000b084 	.word	0x2000b084

08010cd8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d105      	bne.n	8010cf8 <udp_input_local_match+0x20>
 8010cec:	4b27      	ldr	r3, [pc, #156]	; (8010d8c <udp_input_local_match+0xb4>)
 8010cee:	2287      	movs	r2, #135	; 0x87
 8010cf0:	4927      	ldr	r1, [pc, #156]	; (8010d90 <udp_input_local_match+0xb8>)
 8010cf2:	4828      	ldr	r0, [pc, #160]	; (8010d94 <udp_input_local_match+0xbc>)
 8010cf4:	f004 fe42 	bl	801597c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d105      	bne.n	8010d0a <udp_input_local_match+0x32>
 8010cfe:	4b23      	ldr	r3, [pc, #140]	; (8010d8c <udp_input_local_match+0xb4>)
 8010d00:	2288      	movs	r2, #136	; 0x88
 8010d02:	4925      	ldr	r1, [pc, #148]	; (8010d98 <udp_input_local_match+0xc0>)
 8010d04:	4823      	ldr	r0, [pc, #140]	; (8010d94 <udp_input_local_match+0xbc>)
 8010d06:	f004 fe39 	bl	801597c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	7a1b      	ldrb	r3, [r3, #8]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00b      	beq.n	8010d2a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	7a1a      	ldrb	r2, [r3, #8]
 8010d16:	4b21      	ldr	r3, [pc, #132]	; (8010d9c <udp_input_local_match+0xc4>)
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d1e:	3301      	adds	r3, #1
 8010d20:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d001      	beq.n	8010d2a <udp_input_local_match+0x52>
    return 0;
 8010d26:	2300      	movs	r3, #0
 8010d28:	e02b      	b.n	8010d82 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010d2a:	79fb      	ldrb	r3, [r7, #7]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d018      	beq.n	8010d62 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d013      	beq.n	8010d5e <udp_input_local_match+0x86>
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00f      	beq.n	8010d5e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010d3e:	4b17      	ldr	r3, [pc, #92]	; (8010d9c <udp_input_local_match+0xc4>)
 8010d40:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d46:	d00a      	beq.n	8010d5e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681a      	ldr	r2, [r3, #0]
 8010d4c:	4b13      	ldr	r3, [pc, #76]	; (8010d9c <udp_input_local_match+0xc4>)
 8010d4e:	695b      	ldr	r3, [r3, #20]
 8010d50:	405a      	eors	r2, r3
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	3308      	adds	r3, #8
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d110      	bne.n	8010d80 <udp_input_local_match+0xa8>
          return 1;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e00f      	b.n	8010d82 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d009      	beq.n	8010d7c <udp_input_local_match+0xa4>
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d005      	beq.n	8010d7c <udp_input_local_match+0xa4>
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	4b09      	ldr	r3, [pc, #36]	; (8010d9c <udp_input_local_match+0xc4>)
 8010d76:	695b      	ldr	r3, [r3, #20]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d101      	bne.n	8010d80 <udp_input_local_match+0xa8>
        return 1;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e000      	b.n	8010d82 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	08018f5c 	.word	0x08018f5c
 8010d90:	08018f8c 	.word	0x08018f8c
 8010d94:	08018fb0 	.word	0x08018fb0
 8010d98:	08018fd8 	.word	0x08018fd8
 8010d9c:	200058d8 	.word	0x200058d8

08010da0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010da0:	b590      	push	{r4, r7, lr}
 8010da2:	b08d      	sub	sp, #52	; 0x34
 8010da4:	af02      	add	r7, sp, #8
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010daa:	2300      	movs	r3, #0
 8010dac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d105      	bne.n	8010dc0 <udp_input+0x20>
 8010db4:	4b7c      	ldr	r3, [pc, #496]	; (8010fa8 <udp_input+0x208>)
 8010db6:	22cf      	movs	r2, #207	; 0xcf
 8010db8:	497c      	ldr	r1, [pc, #496]	; (8010fac <udp_input+0x20c>)
 8010dba:	487d      	ldr	r0, [pc, #500]	; (8010fb0 <udp_input+0x210>)
 8010dbc:	f004 fdde 	bl	801597c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d105      	bne.n	8010dd2 <udp_input+0x32>
 8010dc6:	4b78      	ldr	r3, [pc, #480]	; (8010fa8 <udp_input+0x208>)
 8010dc8:	22d0      	movs	r2, #208	; 0xd0
 8010dca:	497a      	ldr	r1, [pc, #488]	; (8010fb4 <udp_input+0x214>)
 8010dcc:	4878      	ldr	r0, [pc, #480]	; (8010fb0 <udp_input+0x210>)
 8010dce:	f004 fdd5 	bl	801597c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	895b      	ldrh	r3, [r3, #10]
 8010dd6:	2b07      	cmp	r3, #7
 8010dd8:	d803      	bhi.n	8010de2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f7fa f9ee 	bl	800b1bc <pbuf_free>
    goto end;
 8010de0:	e0de      	b.n	8010fa0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010de8:	4b73      	ldr	r3, [pc, #460]	; (8010fb8 <udp_input+0x218>)
 8010dea:	695b      	ldr	r3, [r3, #20]
 8010dec:	4a72      	ldr	r2, [pc, #456]	; (8010fb8 <udp_input+0x218>)
 8010dee:	6812      	ldr	r2, [r2, #0]
 8010df0:	4611      	mov	r1, r2
 8010df2:	4618      	mov	r0, r3
 8010df4:	f003 fe08 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	881b      	ldrh	r3, [r3, #0]
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7f8 fe70 	bl	8009ae8 <lwip_htons>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	885b      	ldrh	r3, [r3, #2]
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7f8 fe68 	bl	8009ae8 <lwip_htons>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010e20:	2300      	movs	r3, #0
 8010e22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010e24:	2300      	movs	r3, #0
 8010e26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e28:	4b64      	ldr	r3, [pc, #400]	; (8010fbc <udp_input+0x21c>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8010e2e:	e054      	b.n	8010eda <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e32:	8a5b      	ldrh	r3, [r3, #18]
 8010e34:	89fa      	ldrh	r2, [r7, #14]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d14a      	bne.n	8010ed0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010e3a:	7cfb      	ldrb	r3, [r7, #19]
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	6839      	ldr	r1, [r7, #0]
 8010e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e42:	f7ff ff49 	bl	8010cd8 <udp_input_local_match>
 8010e46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d041      	beq.n	8010ed0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4e:	7c1b      	ldrb	r3, [r3, #16]
 8010e50:	f003 0304 	and.w	r3, r3, #4
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d11d      	bne.n	8010e94 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d102      	bne.n	8010e64 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e60:	61fb      	str	r3, [r7, #28]
 8010e62:	e017      	b.n	8010e94 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010e64:	7cfb      	ldrb	r3, [r7, #19]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d014      	beq.n	8010e94 <udp_input+0xf4>
 8010e6a:	4b53      	ldr	r3, [pc, #332]	; (8010fb8 <udp_input+0x218>)
 8010e6c:	695b      	ldr	r3, [r3, #20]
 8010e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e72:	d10f      	bne.n	8010e94 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	3304      	adds	r3, #4
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d008      	beq.n	8010e94 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e84:	681a      	ldr	r2, [r3, #0]
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	3304      	adds	r3, #4
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d101      	bne.n	8010e94 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e92:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e96:	8a9b      	ldrh	r3, [r3, #20]
 8010e98:	8a3a      	ldrh	r2, [r7, #16]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d118      	bne.n	8010ed0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d005      	beq.n	8010eb2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea8:	685a      	ldr	r2, [r3, #4]
 8010eaa:	4b43      	ldr	r3, [pc, #268]	; (8010fb8 <udp_input+0x218>)
 8010eac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d10e      	bne.n	8010ed0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010eb2:	6a3b      	ldr	r3, [r7, #32]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d014      	beq.n	8010ee2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eba:	68da      	ldr	r2, [r3, #12]
 8010ebc:	6a3b      	ldr	r3, [r7, #32]
 8010ebe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010ec0:	4b3e      	ldr	r3, [pc, #248]	; (8010fbc <udp_input+0x21c>)
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010ec8:	4a3c      	ldr	r2, [pc, #240]	; (8010fbc <udp_input+0x21c>)
 8010eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ecc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010ece:	e008      	b.n	8010ee2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d1a7      	bne.n	8010e30 <udp_input+0x90>
 8010ee0:	e000      	b.n	8010ee4 <udp_input+0x144>
        break;
 8010ee2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d101      	bne.n	8010eee <udp_input+0x14e>
    pcb = uncon_pcb;
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <udp_input+0x15a>
    for_us = 1;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	76fb      	strb	r3, [r7, #27]
 8010ef8:	e00a      	b.n	8010f10 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	3304      	adds	r3, #4
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	4b2d      	ldr	r3, [pc, #180]	; (8010fb8 <udp_input+0x218>)
 8010f02:	695b      	ldr	r3, [r3, #20]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	bf0c      	ite	eq
 8010f08:	2301      	moveq	r3, #1
 8010f0a:	2300      	movne	r3, #0
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010f10:	7efb      	ldrb	r3, [r7, #27]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d041      	beq.n	8010f9a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010f16:	2108      	movs	r1, #8
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f7fa f8c9 	bl	800b0b0 <pbuf_remove_header>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00a      	beq.n	8010f3a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010f24:	4b20      	ldr	r3, [pc, #128]	; (8010fa8 <udp_input+0x208>)
 8010f26:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010f2a:	4925      	ldr	r1, [pc, #148]	; (8010fc0 <udp_input+0x220>)
 8010f2c:	4820      	ldr	r0, [pc, #128]	; (8010fb0 <udp_input+0x210>)
 8010f2e:	f004 fd25 	bl	801597c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f7fa f942 	bl	800b1bc <pbuf_free>
      goto end;
 8010f38:	e032      	b.n	8010fa0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d012      	beq.n	8010f66 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f42:	699b      	ldr	r3, [r3, #24]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00a      	beq.n	8010f5e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	699c      	ldr	r4, [r3, #24]
 8010f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4e:	69d8      	ldr	r0, [r3, #28]
 8010f50:	8a3b      	ldrh	r3, [r7, #16]
 8010f52:	9300      	str	r3, [sp, #0]
 8010f54:	4b1b      	ldr	r3, [pc, #108]	; (8010fc4 <udp_input+0x224>)
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f5a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010f5c:	e021      	b.n	8010fa2 <udp_input+0x202>
        pbuf_free(p);
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7fa f92c 	bl	800b1bc <pbuf_free>
        goto end;
 8010f64:	e01c      	b.n	8010fa0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010f66:	7cfb      	ldrb	r3, [r7, #19]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d112      	bne.n	8010f92 <udp_input+0x1f2>
 8010f6c:	4b12      	ldr	r3, [pc, #72]	; (8010fb8 <udp_input+0x218>)
 8010f6e:	695b      	ldr	r3, [r3, #20]
 8010f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f74:	2be0      	cmp	r3, #224	; 0xe0
 8010f76:	d00c      	beq.n	8010f92 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010f78:	4b0f      	ldr	r3, [pc, #60]	; (8010fb8 <udp_input+0x218>)
 8010f7a:	899b      	ldrh	r3, [r3, #12]
 8010f7c:	3308      	adds	r3, #8
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	b21b      	sxth	r3, r3
 8010f82:	4619      	mov	r1, r3
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f7fa f906 	bl	800b196 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010f8a:	2103      	movs	r1, #3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f003 f9fd 	bl	801438c <icmp_dest_unreach>
      pbuf_free(p);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7fa f912 	bl	800b1bc <pbuf_free>
  return;
 8010f98:	e003      	b.n	8010fa2 <udp_input+0x202>
    pbuf_free(p);
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f7fa f90e 	bl	800b1bc <pbuf_free>
  return;
 8010fa0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010fa2:	372c      	adds	r7, #44	; 0x2c
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd90      	pop	{r4, r7, pc}
 8010fa8:	08018f5c 	.word	0x08018f5c
 8010fac:	08019000 	.word	0x08019000
 8010fb0:	08018fb0 	.word	0x08018fb0
 8010fb4:	08019018 	.word	0x08019018
 8010fb8:	200058d8 	.word	0x200058d8
 8010fbc:	2000b084 	.word	0x2000b084
 8010fc0:	08019034 	.word	0x08019034
 8010fc4:	200058e8 	.word	0x200058e8

08010fc8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b088      	sub	sp, #32
 8010fcc:	af02      	add	r7, sp, #8
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	607a      	str	r2, [r7, #4]
 8010fd4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d109      	bne.n	8010ff0 <udp_sendto_if+0x28>
 8010fdc:	4b2e      	ldr	r3, [pc, #184]	; (8011098 <udp_sendto_if+0xd0>)
 8010fde:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010fe2:	492e      	ldr	r1, [pc, #184]	; (801109c <udp_sendto_if+0xd4>)
 8010fe4:	482e      	ldr	r0, [pc, #184]	; (80110a0 <udp_sendto_if+0xd8>)
 8010fe6:	f004 fcc9 	bl	801597c <iprintf>
 8010fea:	f06f 030f 	mvn.w	r3, #15
 8010fee:	e04f      	b.n	8011090 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d109      	bne.n	801100a <udp_sendto_if+0x42>
 8010ff6:	4b28      	ldr	r3, [pc, #160]	; (8011098 <udp_sendto_if+0xd0>)
 8010ff8:	f240 2281 	movw	r2, #641	; 0x281
 8010ffc:	4929      	ldr	r1, [pc, #164]	; (80110a4 <udp_sendto_if+0xdc>)
 8010ffe:	4828      	ldr	r0, [pc, #160]	; (80110a0 <udp_sendto_if+0xd8>)
 8011000:	f004 fcbc 	bl	801597c <iprintf>
 8011004:	f06f 030f 	mvn.w	r3, #15
 8011008:	e042      	b.n	8011090 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d109      	bne.n	8011024 <udp_sendto_if+0x5c>
 8011010:	4b21      	ldr	r3, [pc, #132]	; (8011098 <udp_sendto_if+0xd0>)
 8011012:	f240 2282 	movw	r2, #642	; 0x282
 8011016:	4924      	ldr	r1, [pc, #144]	; (80110a8 <udp_sendto_if+0xe0>)
 8011018:	4821      	ldr	r0, [pc, #132]	; (80110a0 <udp_sendto_if+0xd8>)
 801101a:	f004 fcaf 	bl	801597c <iprintf>
 801101e:	f06f 030f 	mvn.w	r3, #15
 8011022:	e035      	b.n	8011090 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011024:	6a3b      	ldr	r3, [r7, #32]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d109      	bne.n	801103e <udp_sendto_if+0x76>
 801102a:	4b1b      	ldr	r3, [pc, #108]	; (8011098 <udp_sendto_if+0xd0>)
 801102c:	f240 2283 	movw	r2, #643	; 0x283
 8011030:	491e      	ldr	r1, [pc, #120]	; (80110ac <udp_sendto_if+0xe4>)
 8011032:	481b      	ldr	r0, [pc, #108]	; (80110a0 <udp_sendto_if+0xd8>)
 8011034:	f004 fca2 	bl	801597c <iprintf>
 8011038:	f06f 030f 	mvn.w	r3, #15
 801103c:	e028      	b.n	8011090 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d009      	beq.n	8011058 <udp_sendto_if+0x90>
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d005      	beq.n	8011058 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011054:	2be0      	cmp	r3, #224	; 0xe0
 8011056:	d103      	bne.n	8011060 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011058:	6a3b      	ldr	r3, [r7, #32]
 801105a:	3304      	adds	r3, #4
 801105c:	617b      	str	r3, [r7, #20]
 801105e:	e00b      	b.n	8011078 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	6a3b      	ldr	r3, [r7, #32]
 8011066:	3304      	adds	r3, #4
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	429a      	cmp	r2, r3
 801106c:	d002      	beq.n	8011074 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801106e:	f06f 0303 	mvn.w	r3, #3
 8011072:	e00d      	b.n	8011090 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011078:	887a      	ldrh	r2, [r7, #2]
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	6a3b      	ldr	r3, [r7, #32]
 8011080:	9300      	str	r3, [sp, #0]
 8011082:	4613      	mov	r3, r2
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	68b9      	ldr	r1, [r7, #8]
 8011088:	68f8      	ldr	r0, [r7, #12]
 801108a:	f000 f811 	bl	80110b0 <udp_sendto_if_src>
 801108e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011090:	4618      	mov	r0, r3
 8011092:	3718      	adds	r7, #24
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	08018f5c 	.word	0x08018f5c
 801109c:	080190d0 	.word	0x080190d0
 80110a0:	08018fb0 	.word	0x08018fb0
 80110a4:	080190ec 	.word	0x080190ec
 80110a8:	08019108 	.word	0x08019108
 80110ac:	08019128 	.word	0x08019128

080110b0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b08c      	sub	sp, #48	; 0x30
 80110b4:	af04      	add	r7, sp, #16
 80110b6:	60f8      	str	r0, [r7, #12]
 80110b8:	60b9      	str	r1, [r7, #8]
 80110ba:	607a      	str	r2, [r7, #4]
 80110bc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d109      	bne.n	80110d8 <udp_sendto_if_src+0x28>
 80110c4:	4b65      	ldr	r3, [pc, #404]	; (801125c <udp_sendto_if_src+0x1ac>)
 80110c6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80110ca:	4965      	ldr	r1, [pc, #404]	; (8011260 <udp_sendto_if_src+0x1b0>)
 80110cc:	4865      	ldr	r0, [pc, #404]	; (8011264 <udp_sendto_if_src+0x1b4>)
 80110ce:	f004 fc55 	bl	801597c <iprintf>
 80110d2:	f06f 030f 	mvn.w	r3, #15
 80110d6:	e0bc      	b.n	8011252 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d109      	bne.n	80110f2 <udp_sendto_if_src+0x42>
 80110de:	4b5f      	ldr	r3, [pc, #380]	; (801125c <udp_sendto_if_src+0x1ac>)
 80110e0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80110e4:	4960      	ldr	r1, [pc, #384]	; (8011268 <udp_sendto_if_src+0x1b8>)
 80110e6:	485f      	ldr	r0, [pc, #380]	; (8011264 <udp_sendto_if_src+0x1b4>)
 80110e8:	f004 fc48 	bl	801597c <iprintf>
 80110ec:	f06f 030f 	mvn.w	r3, #15
 80110f0:	e0af      	b.n	8011252 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d109      	bne.n	801110c <udp_sendto_if_src+0x5c>
 80110f8:	4b58      	ldr	r3, [pc, #352]	; (801125c <udp_sendto_if_src+0x1ac>)
 80110fa:	f240 22d3 	movw	r2, #723	; 0x2d3
 80110fe:	495b      	ldr	r1, [pc, #364]	; (801126c <udp_sendto_if_src+0x1bc>)
 8011100:	4858      	ldr	r0, [pc, #352]	; (8011264 <udp_sendto_if_src+0x1b4>)
 8011102:	f004 fc3b 	bl	801597c <iprintf>
 8011106:	f06f 030f 	mvn.w	r3, #15
 801110a:	e0a2      	b.n	8011252 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110e:	2b00      	cmp	r3, #0
 8011110:	d109      	bne.n	8011126 <udp_sendto_if_src+0x76>
 8011112:	4b52      	ldr	r3, [pc, #328]	; (801125c <udp_sendto_if_src+0x1ac>)
 8011114:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011118:	4955      	ldr	r1, [pc, #340]	; (8011270 <udp_sendto_if_src+0x1c0>)
 801111a:	4852      	ldr	r0, [pc, #328]	; (8011264 <udp_sendto_if_src+0x1b4>)
 801111c:	f004 fc2e 	bl	801597c <iprintf>
 8011120:	f06f 030f 	mvn.w	r3, #15
 8011124:	e095      	b.n	8011252 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011128:	2b00      	cmp	r3, #0
 801112a:	d109      	bne.n	8011140 <udp_sendto_if_src+0x90>
 801112c:	4b4b      	ldr	r3, [pc, #300]	; (801125c <udp_sendto_if_src+0x1ac>)
 801112e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011132:	4950      	ldr	r1, [pc, #320]	; (8011274 <udp_sendto_if_src+0x1c4>)
 8011134:	484b      	ldr	r0, [pc, #300]	; (8011264 <udp_sendto_if_src+0x1b4>)
 8011136:	f004 fc21 	bl	801597c <iprintf>
 801113a:	f06f 030f 	mvn.w	r3, #15
 801113e:	e088      	b.n	8011252 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	8a5b      	ldrh	r3, [r3, #18]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d10f      	bne.n	8011168 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011148:	68f9      	ldr	r1, [r7, #12]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	8a5b      	ldrh	r3, [r3, #18]
 801114e:	461a      	mov	r2, r3
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f000 f893 	bl	801127c <udp_bind>
 8011156:	4603      	mov	r3, r0
 8011158:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801115a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d002      	beq.n	8011168 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011162:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011166:	e074      	b.n	8011252 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	891b      	ldrh	r3, [r3, #8]
 801116c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011170:	4293      	cmp	r3, r2
 8011172:	d902      	bls.n	801117a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011174:	f04f 33ff 	mov.w	r3, #4294967295
 8011178:	e06b      	b.n	8011252 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801117a:	2108      	movs	r1, #8
 801117c:	68b8      	ldr	r0, [r7, #8]
 801117e:	f7f9 ff87 	bl	800b090 <pbuf_add_header>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d015      	beq.n	80111b4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011188:	f44f 7220 	mov.w	r2, #640	; 0x280
 801118c:	2108      	movs	r1, #8
 801118e:	2022      	movs	r0, #34	; 0x22
 8011190:	f7f9 fd30 	bl	800abf4 <pbuf_alloc>
 8011194:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d102      	bne.n	80111a2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801119c:	f04f 33ff 	mov.w	r3, #4294967295
 80111a0:	e057      	b.n	8011252 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	891b      	ldrh	r3, [r3, #8]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d006      	beq.n	80111b8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80111aa:	68b9      	ldr	r1, [r7, #8]
 80111ac:	69f8      	ldr	r0, [r7, #28]
 80111ae:	f7fa f91d 	bl	800b3ec <pbuf_chain>
 80111b2:	e001      	b.n	80111b8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80111b8:	69fb      	ldr	r3, [r7, #28]
 80111ba:	895b      	ldrh	r3, [r3, #10]
 80111bc:	2b07      	cmp	r3, #7
 80111be:	d806      	bhi.n	80111ce <udp_sendto_if_src+0x11e>
 80111c0:	4b26      	ldr	r3, [pc, #152]	; (801125c <udp_sendto_if_src+0x1ac>)
 80111c2:	f240 320d 	movw	r2, #781	; 0x30d
 80111c6:	492c      	ldr	r1, [pc, #176]	; (8011278 <udp_sendto_if_src+0x1c8>)
 80111c8:	4826      	ldr	r0, [pc, #152]	; (8011264 <udp_sendto_if_src+0x1b4>)
 80111ca:	f004 fbd7 	bl	801597c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	8a5b      	ldrh	r3, [r3, #18]
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f8 fc85 	bl	8009ae8 <lwip_htons>
 80111de:	4603      	mov	r3, r0
 80111e0:	461a      	mov	r2, r3
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80111e6:	887b      	ldrh	r3, [r7, #2]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7f8 fc7d 	bl	8009ae8 <lwip_htons>
 80111ee:	4603      	mov	r3, r0
 80111f0:	461a      	mov	r2, r3
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	2200      	movs	r2, #0
 80111fa:	719a      	strb	r2, [r3, #6]
 80111fc:	2200      	movs	r2, #0
 80111fe:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011200:	69fb      	ldr	r3, [r7, #28]
 8011202:	891b      	ldrh	r3, [r3, #8]
 8011204:	4618      	mov	r0, r3
 8011206:	f7f8 fc6f 	bl	8009ae8 <lwip_htons>
 801120a:	4603      	mov	r3, r0
 801120c:	461a      	mov	r2, r3
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011212:	2311      	movs	r3, #17
 8011214:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	7adb      	ldrb	r3, [r3, #11]
 801121a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	7a9b      	ldrb	r3, [r3, #10]
 8011220:	7cb9      	ldrb	r1, [r7, #18]
 8011222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011224:	9202      	str	r2, [sp, #8]
 8011226:	7cfa      	ldrb	r2, [r7, #19]
 8011228:	9201      	str	r2, [sp, #4]
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	460b      	mov	r3, r1
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011232:	69f8      	ldr	r0, [r7, #28]
 8011234:	f003 fb3a 	bl	80148ac <ip4_output_if_src>
 8011238:	4603      	mov	r3, r0
 801123a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801123c:	69fa      	ldr	r2, [r7, #28]
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	429a      	cmp	r2, r3
 8011242:	d004      	beq.n	801124e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011244:	69f8      	ldr	r0, [r7, #28]
 8011246:	f7f9 ffb9 	bl	800b1bc <pbuf_free>
    q = NULL;
 801124a:	2300      	movs	r3, #0
 801124c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801124e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011252:	4618      	mov	r0, r3
 8011254:	3720      	adds	r7, #32
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	08018f5c 	.word	0x08018f5c
 8011260:	08019148 	.word	0x08019148
 8011264:	08018fb0 	.word	0x08018fb0
 8011268:	08019168 	.word	0x08019168
 801126c:	08019188 	.word	0x08019188
 8011270:	080191ac 	.word	0x080191ac
 8011274:	080191d0 	.word	0x080191d0
 8011278:	080191f4 	.word	0x080191f4

0801127c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b086      	sub	sp, #24
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	4613      	mov	r3, r2
 8011288:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d101      	bne.n	8011294 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011290:	4b39      	ldr	r3, [pc, #228]	; (8011378 <udp_bind+0xfc>)
 8011292:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d109      	bne.n	80112ae <udp_bind+0x32>
 801129a:	4b38      	ldr	r3, [pc, #224]	; (801137c <udp_bind+0x100>)
 801129c:	f240 32b7 	movw	r2, #951	; 0x3b7
 80112a0:	4937      	ldr	r1, [pc, #220]	; (8011380 <udp_bind+0x104>)
 80112a2:	4838      	ldr	r0, [pc, #224]	; (8011384 <udp_bind+0x108>)
 80112a4:	f004 fb6a 	bl	801597c <iprintf>
 80112a8:	f06f 030f 	mvn.w	r3, #15
 80112ac:	e060      	b.n	8011370 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80112b2:	4b35      	ldr	r3, [pc, #212]	; (8011388 <udp_bind+0x10c>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	617b      	str	r3, [r7, #20]
 80112b8:	e009      	b.n	80112ce <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d102      	bne.n	80112c8 <udp_bind+0x4c>
      rebind = 1;
 80112c2:	2301      	movs	r3, #1
 80112c4:	74fb      	strb	r3, [r7, #19]
      break;
 80112c6:	e005      	b.n	80112d4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	617b      	str	r3, [r7, #20]
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1f2      	bne.n	80112ba <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80112d4:	88fb      	ldrh	r3, [r7, #6]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d109      	bne.n	80112ee <udp_bind+0x72>
    port = udp_new_port();
 80112da:	f7ff fcc5 	bl	8010c68 <udp_new_port>
 80112de:	4603      	mov	r3, r0
 80112e0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80112e2:	88fb      	ldrh	r3, [r7, #6]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d12c      	bne.n	8011342 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80112e8:	f06f 0307 	mvn.w	r3, #7
 80112ec:	e040      	b.n	8011370 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80112ee:	4b26      	ldr	r3, [pc, #152]	; (8011388 <udp_bind+0x10c>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	617b      	str	r3, [r7, #20]
 80112f4:	e022      	b.n	801133c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80112f6:	68fa      	ldr	r2, [r7, #12]
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d01b      	beq.n	8011336 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	8a5b      	ldrh	r3, [r3, #18]
 8011302:	88fa      	ldrh	r2, [r7, #6]
 8011304:	429a      	cmp	r2, r3
 8011306:	d116      	bne.n	8011336 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	681a      	ldr	r2, [r3, #0]
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011310:	429a      	cmp	r2, r3
 8011312:	d00d      	beq.n	8011330 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00a      	beq.n	8011330 <udp_bind+0xb4>
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d006      	beq.n	8011330 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011322:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011324:	2b00      	cmp	r3, #0
 8011326:	d003      	beq.n	8011330 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d102      	bne.n	8011336 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011330:	f06f 0307 	mvn.w	r3, #7
 8011334:	e01c      	b.n	8011370 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	617b      	str	r3, [r7, #20]
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d1d9      	bne.n	80112f6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d002      	beq.n	801134e <udp_bind+0xd2>
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	e000      	b.n	8011350 <udp_bind+0xd4>
 801134e:	2300      	movs	r3, #0
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	88fa      	ldrh	r2, [r7, #6]
 8011358:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801135a:	7cfb      	ldrb	r3, [r7, #19]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d106      	bne.n	801136e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011360:	4b09      	ldr	r3, [pc, #36]	; (8011388 <udp_bind+0x10c>)
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011368:	4a07      	ldr	r2, [pc, #28]	; (8011388 <udp_bind+0x10c>)
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801136e:	2300      	movs	r3, #0
}
 8011370:	4618      	mov	r0, r3
 8011372:	3718      	adds	r7, #24
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	0801c508 	.word	0x0801c508
 801137c:	08018f5c 	.word	0x08018f5c
 8011380:	08019224 	.word	0x08019224
 8011384:	08018fb0 	.word	0x08018fb0
 8011388:	2000b084 	.word	0x2000b084

0801138c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b086      	sub	sp, #24
 8011390:	af00      	add	r7, sp, #0
 8011392:	60f8      	str	r0, [r7, #12]
 8011394:	60b9      	str	r1, [r7, #8]
 8011396:	4613      	mov	r3, r2
 8011398:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d109      	bne.n	80113b4 <udp_connect+0x28>
 80113a0:	4b2c      	ldr	r3, [pc, #176]	; (8011454 <udp_connect+0xc8>)
 80113a2:	f240 4235 	movw	r2, #1077	; 0x435
 80113a6:	492c      	ldr	r1, [pc, #176]	; (8011458 <udp_connect+0xcc>)
 80113a8:	482c      	ldr	r0, [pc, #176]	; (801145c <udp_connect+0xd0>)
 80113aa:	f004 fae7 	bl	801597c <iprintf>
 80113ae:	f06f 030f 	mvn.w	r3, #15
 80113b2:	e04b      	b.n	801144c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d109      	bne.n	80113ce <udp_connect+0x42>
 80113ba:	4b26      	ldr	r3, [pc, #152]	; (8011454 <udp_connect+0xc8>)
 80113bc:	f240 4236 	movw	r2, #1078	; 0x436
 80113c0:	4927      	ldr	r1, [pc, #156]	; (8011460 <udp_connect+0xd4>)
 80113c2:	4826      	ldr	r0, [pc, #152]	; (801145c <udp_connect+0xd0>)
 80113c4:	f004 fada 	bl	801597c <iprintf>
 80113c8:	f06f 030f 	mvn.w	r3, #15
 80113cc:	e03e      	b.n	801144c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	8a5b      	ldrh	r3, [r3, #18]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d10f      	bne.n	80113f6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80113d6:	68f9      	ldr	r1, [r7, #12]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	8a5b      	ldrh	r3, [r3, #18]
 80113dc:	461a      	mov	r2, r3
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f7ff ff4c 	bl	801127c <udp_bind>
 80113e4:	4603      	mov	r3, r0
 80113e6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80113e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d002      	beq.n	80113f6 <udp_connect+0x6a>
      return err;
 80113f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113f4:	e02a      	b.n	801144c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d002      	beq.n	8011402 <udp_connect+0x76>
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	e000      	b.n	8011404 <udp_connect+0x78>
 8011402:	2300      	movs	r3, #0
 8011404:	68fa      	ldr	r2, [r7, #12]
 8011406:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	88fa      	ldrh	r2, [r7, #6]
 801140c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	7c1b      	ldrb	r3, [r3, #16]
 8011412:	f043 0304 	orr.w	r3, r3, #4
 8011416:	b2da      	uxtb	r2, r3
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801141c:	4b11      	ldr	r3, [pc, #68]	; (8011464 <udp_connect+0xd8>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	617b      	str	r3, [r7, #20]
 8011422:	e008      	b.n	8011436 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	429a      	cmp	r2, r3
 801142a:	d101      	bne.n	8011430 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801142c:	2300      	movs	r3, #0
 801142e:	e00d      	b.n	801144c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	617b      	str	r3, [r7, #20]
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1f3      	bne.n	8011424 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801143c:	4b09      	ldr	r3, [pc, #36]	; (8011464 <udp_connect+0xd8>)
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011444:	4a07      	ldr	r2, [pc, #28]	; (8011464 <udp_connect+0xd8>)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3718      	adds	r7, #24
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	08018f5c 	.word	0x08018f5c
 8011458:	0801923c 	.word	0x0801923c
 801145c:	08018fb0 	.word	0x08018fb0
 8011460:	08019258 	.word	0x08019258
 8011464:	2000b084 	.word	0x2000b084

08011468 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d107      	bne.n	801148a <udp_recv+0x22>
 801147a:	4b08      	ldr	r3, [pc, #32]	; (801149c <udp_recv+0x34>)
 801147c:	f240 428a 	movw	r2, #1162	; 0x48a
 8011480:	4907      	ldr	r1, [pc, #28]	; (80114a0 <udp_recv+0x38>)
 8011482:	4808      	ldr	r0, [pc, #32]	; (80114a4 <udp_recv+0x3c>)
 8011484:	f004 fa7a 	bl	801597c <iprintf>
 8011488:	e005      	b.n	8011496 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	68ba      	ldr	r2, [r7, #8]
 801148e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	61da      	str	r2, [r3, #28]
}
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	08018f5c 	.word	0x08018f5c
 80114a0:	08019290 	.word	0x08019290
 80114a4:	08018fb0 	.word	0x08018fb0

080114a8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d107      	bne.n	80114c6 <udp_remove+0x1e>
 80114b6:	4b19      	ldr	r3, [pc, #100]	; (801151c <udp_remove+0x74>)
 80114b8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80114bc:	4918      	ldr	r1, [pc, #96]	; (8011520 <udp_remove+0x78>)
 80114be:	4819      	ldr	r0, [pc, #100]	; (8011524 <udp_remove+0x7c>)
 80114c0:	f004 fa5c 	bl	801597c <iprintf>
 80114c4:	e026      	b.n	8011514 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80114c6:	4b18      	ldr	r3, [pc, #96]	; (8011528 <udp_remove+0x80>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d105      	bne.n	80114dc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80114d0:	4b15      	ldr	r3, [pc, #84]	; (8011528 <udp_remove+0x80>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	4a14      	ldr	r2, [pc, #80]	; (8011528 <udp_remove+0x80>)
 80114d8:	6013      	str	r3, [r2, #0]
 80114da:	e017      	b.n	801150c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80114dc:	4b12      	ldr	r3, [pc, #72]	; (8011528 <udp_remove+0x80>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	60fb      	str	r3, [r7, #12]
 80114e2:	e010      	b.n	8011506 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d009      	beq.n	8011500 <udp_remove+0x58>
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d104      	bne.n	8011500 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	68da      	ldr	r2, [r3, #12]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	60da      	str	r2, [r3, #12]
        break;
 80114fe:	e005      	b.n	801150c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	60fb      	str	r3, [r7, #12]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d1eb      	bne.n	80114e4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801150c:	6879      	ldr	r1, [r7, #4]
 801150e:	2000      	movs	r0, #0
 8011510:	f7f8 ffd2 	bl	800a4b8 <memp_free>
}
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	08018f5c 	.word	0x08018f5c
 8011520:	080192a8 	.word	0x080192a8
 8011524:	08018fb0 	.word	0x08018fb0
 8011528:	2000b084 	.word	0x2000b084

0801152c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011532:	2000      	movs	r0, #0
 8011534:	f7f8 ff50 	bl	800a3d8 <memp_malloc>
 8011538:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d007      	beq.n	8011550 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011540:	2220      	movs	r2, #32
 8011542:	2100      	movs	r1, #0
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f004 fa11 	bl	801596c <memset>
    pcb->ttl = UDP_TTL;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	22ff      	movs	r2, #255	; 0xff
 801154e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011550:	687b      	ldr	r3, [r7, #4]
}
 8011552:	4618      	mov	r0, r3
 8011554:	3708      	adds	r7, #8
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
	...

0801155c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801155c:	b480      	push	{r7}
 801155e:	b085      	sub	sp, #20
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d01e      	beq.n	80115aa <udp_netif_ip_addr_changed+0x4e>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d01a      	beq.n	80115aa <udp_netif_ip_addr_changed+0x4e>
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d017      	beq.n	80115aa <udp_netif_ip_addr_changed+0x4e>
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d013      	beq.n	80115aa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011582:	4b0d      	ldr	r3, [pc, #52]	; (80115b8 <udp_netif_ip_addr_changed+0x5c>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	60fb      	str	r3, [r7, #12]
 8011588:	e00c      	b.n	80115a4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	429a      	cmp	r2, r3
 8011594:	d103      	bne.n	801159e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	60fb      	str	r3, [r7, #12]
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d1ef      	bne.n	801158a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80115aa:	bf00      	nop
 80115ac:	3714      	adds	r7, #20
 80115ae:	46bd      	mov	sp, r7
 80115b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b4:	4770      	bx	lr
 80115b6:	bf00      	nop
 80115b8:	2000b084 	.word	0x2000b084

080115bc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80115c0:	4b20      	ldr	r3, [pc, #128]	; (8011644 <dhcp_inc_pcb_refcount+0x88>)
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d133      	bne.n	8011630 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80115c8:	4b1f      	ldr	r3, [pc, #124]	; (8011648 <dhcp_inc_pcb_refcount+0x8c>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d005      	beq.n	80115dc <dhcp_inc_pcb_refcount+0x20>
 80115d0:	4b1e      	ldr	r3, [pc, #120]	; (801164c <dhcp_inc_pcb_refcount+0x90>)
 80115d2:	22e5      	movs	r2, #229	; 0xe5
 80115d4:	491e      	ldr	r1, [pc, #120]	; (8011650 <dhcp_inc_pcb_refcount+0x94>)
 80115d6:	481f      	ldr	r0, [pc, #124]	; (8011654 <dhcp_inc_pcb_refcount+0x98>)
 80115d8:	f004 f9d0 	bl	801597c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80115dc:	f7ff ffa6 	bl	801152c <udp_new>
 80115e0:	4603      	mov	r3, r0
 80115e2:	4a19      	ldr	r2, [pc, #100]	; (8011648 <dhcp_inc_pcb_refcount+0x8c>)
 80115e4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80115e6:	4b18      	ldr	r3, [pc, #96]	; (8011648 <dhcp_inc_pcb_refcount+0x8c>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d102      	bne.n	80115f4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80115ee:	f04f 33ff 	mov.w	r3, #4294967295
 80115f2:	e024      	b.n	801163e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80115f4:	4b14      	ldr	r3, [pc, #80]	; (8011648 <dhcp_inc_pcb_refcount+0x8c>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	7a5a      	ldrb	r2, [r3, #9]
 80115fa:	4b13      	ldr	r3, [pc, #76]	; (8011648 <dhcp_inc_pcb_refcount+0x8c>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f042 0220 	orr.w	r2, r2, #32
 8011602:	b2d2      	uxtb	r2, r2
 8011604:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011606:	4b10      	ldr	r3, [pc, #64]	; (8011648 <dhcp_inc_pcb_refcount+0x8c>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2244      	movs	r2, #68	; 0x44
 801160c:	4912      	ldr	r1, [pc, #72]	; (8011658 <dhcp_inc_pcb_refcount+0x9c>)
 801160e:	4618      	mov	r0, r3
 8011610:	f7ff fe34 	bl	801127c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011614:	4b0c      	ldr	r3, [pc, #48]	; (8011648 <dhcp_inc_pcb_refcount+0x8c>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2243      	movs	r2, #67	; 0x43
 801161a:	490f      	ldr	r1, [pc, #60]	; (8011658 <dhcp_inc_pcb_refcount+0x9c>)
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff feb5 	bl	801138c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011622:	4b09      	ldr	r3, [pc, #36]	; (8011648 <dhcp_inc_pcb_refcount+0x8c>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	2200      	movs	r2, #0
 8011628:	490c      	ldr	r1, [pc, #48]	; (801165c <dhcp_inc_pcb_refcount+0xa0>)
 801162a:	4618      	mov	r0, r3
 801162c:	f7ff ff1c 	bl	8011468 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011630:	4b04      	ldr	r3, [pc, #16]	; (8011644 <dhcp_inc_pcb_refcount+0x88>)
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	3301      	adds	r3, #1
 8011636:	b2da      	uxtb	r2, r3
 8011638:	4b02      	ldr	r3, [pc, #8]	; (8011644 <dhcp_inc_pcb_refcount+0x88>)
 801163a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801163c:	2300      	movs	r3, #0
}
 801163e:	4618      	mov	r0, r3
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	2000b0b4 	.word	0x2000b0b4
 8011648:	2000b0b0 	.word	0x2000b0b0
 801164c:	080192c0 	.word	0x080192c0
 8011650:	080192f8 	.word	0x080192f8
 8011654:	08019320 	.word	0x08019320
 8011658:	0801c508 	.word	0x0801c508
 801165c:	08012ef5 	.word	0x08012ef5

08011660 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011664:	4b0e      	ldr	r3, [pc, #56]	; (80116a0 <dhcp_dec_pcb_refcount+0x40>)
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d105      	bne.n	8011678 <dhcp_dec_pcb_refcount+0x18>
 801166c:	4b0d      	ldr	r3, [pc, #52]	; (80116a4 <dhcp_dec_pcb_refcount+0x44>)
 801166e:	22ff      	movs	r2, #255	; 0xff
 8011670:	490d      	ldr	r1, [pc, #52]	; (80116a8 <dhcp_dec_pcb_refcount+0x48>)
 8011672:	480e      	ldr	r0, [pc, #56]	; (80116ac <dhcp_dec_pcb_refcount+0x4c>)
 8011674:	f004 f982 	bl	801597c <iprintf>
  dhcp_pcb_refcount--;
 8011678:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <dhcp_dec_pcb_refcount+0x40>)
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	3b01      	subs	r3, #1
 801167e:	b2da      	uxtb	r2, r3
 8011680:	4b07      	ldr	r3, [pc, #28]	; (80116a0 <dhcp_dec_pcb_refcount+0x40>)
 8011682:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011684:	4b06      	ldr	r3, [pc, #24]	; (80116a0 <dhcp_dec_pcb_refcount+0x40>)
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d107      	bne.n	801169c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801168c:	4b08      	ldr	r3, [pc, #32]	; (80116b0 <dhcp_dec_pcb_refcount+0x50>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4618      	mov	r0, r3
 8011692:	f7ff ff09 	bl	80114a8 <udp_remove>
    dhcp_pcb = NULL;
 8011696:	4b06      	ldr	r3, [pc, #24]	; (80116b0 <dhcp_dec_pcb_refcount+0x50>)
 8011698:	2200      	movs	r2, #0
 801169a:	601a      	str	r2, [r3, #0]
  }
}
 801169c:	bf00      	nop
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	2000b0b4 	.word	0x2000b0b4
 80116a4:	080192c0 	.word	0x080192c0
 80116a8:	08019348 	.word	0x08019348
 80116ac:	08019320 	.word	0x08019320
 80116b0:	2000b0b0 	.word	0x2000b0b0

080116b4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80116c2:	210c      	movs	r1, #12
 80116c4:	68f8      	ldr	r0, [r7, #12]
 80116c6:	f001 f857 	bl	8012778 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80116ca:	4b06      	ldr	r3, [pc, #24]	; (80116e4 <dhcp_handle_nak+0x30>)
 80116cc:	4a05      	ldr	r2, [pc, #20]	; (80116e4 <dhcp_handle_nak+0x30>)
 80116ce:	4905      	ldr	r1, [pc, #20]	; (80116e4 <dhcp_handle_nak+0x30>)
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f7f9 f893 	bl	800a7fc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 fc4a 	bl	8011f70 <dhcp_discover>
}
 80116dc:	bf00      	nop
 80116de:	3710      	adds	r7, #16
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	0801c508 	.word	0x0801c508

080116e8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80116f6:	2108      	movs	r1, #8
 80116f8:	68f8      	ldr	r0, [r7, #12]
 80116fa:	f001 f83d 	bl	8012778 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	331c      	adds	r3, #28
 8011702:	2200      	movs	r2, #0
 8011704:	4619      	mov	r1, r3
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f002 fb3e 	bl	8013d88 <etharp_query>
 801170c:	4603      	mov	r3, r0
 801170e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	799b      	ldrb	r3, [r3, #6]
 8011714:	2bff      	cmp	r3, #255	; 0xff
 8011716:	d005      	beq.n	8011724 <dhcp_check+0x3c>
    dhcp->tries++;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	799b      	ldrb	r3, [r3, #6]
 801171c:	3301      	adds	r3, #1
 801171e:	b2da      	uxtb	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011724:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011728:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801172a:	893b      	ldrh	r3, [r7, #8]
 801172c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011730:	4a06      	ldr	r2, [pc, #24]	; (801174c <dhcp_check+0x64>)
 8011732:	fb82 1203 	smull	r1, r2, r2, r3
 8011736:	1152      	asrs	r2, r2, #5
 8011738:	17db      	asrs	r3, r3, #31
 801173a:	1ad3      	subs	r3, r2, r3
 801173c:	b29a      	uxth	r2, r3
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8011742:	bf00      	nop
 8011744:	3710      	adds	r7, #16
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	10624dd3 	.word	0x10624dd3

08011750 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801175e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8011760:	4b0c      	ldr	r3, [pc, #48]	; (8011794 <dhcp_handle_offer+0x44>)
 8011762:	789b      	ldrb	r3, [r3, #2]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d011      	beq.n	801178c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2200      	movs	r2, #0
 801176c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801176e:	4b0a      	ldr	r3, [pc, #40]	; (8011798 <dhcp_handle_offer+0x48>)
 8011770:	689b      	ldr	r3, [r3, #8]
 8011772:	4618      	mov	r0, r3
 8011774:	f7f8 f9cd 	bl	8009b12 <lwip_htonl>
 8011778:	4602      	mov	r2, r0
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	691a      	ldr	r2, [r3, #16]
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f000 f808 	bl	801179c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801178c:	bf00      	nop
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	2000b0a8 	.word	0x2000b0a8
 8011798:	2000b088 	.word	0x2000b088

0801179c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801179c:	b5b0      	push	{r4, r5, r7, lr}
 801179e:	b08a      	sub	sp, #40	; 0x28
 80117a0:	af02      	add	r7, sp, #8
 80117a2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d109      	bne.n	80117be <dhcp_select+0x22>
 80117aa:	4b71      	ldr	r3, [pc, #452]	; (8011970 <dhcp_select+0x1d4>)
 80117ac:	f240 1277 	movw	r2, #375	; 0x177
 80117b0:	4970      	ldr	r1, [pc, #448]	; (8011974 <dhcp_select+0x1d8>)
 80117b2:	4871      	ldr	r0, [pc, #452]	; (8011978 <dhcp_select+0x1dc>)
 80117b4:	f004 f8e2 	bl	801597c <iprintf>
 80117b8:	f06f 030f 	mvn.w	r3, #15
 80117bc:	e0d3      	b.n	8011966 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80117c4:	69bb      	ldr	r3, [r7, #24]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d109      	bne.n	80117de <dhcp_select+0x42>
 80117ca:	4b69      	ldr	r3, [pc, #420]	; (8011970 <dhcp_select+0x1d4>)
 80117cc:	f240 1279 	movw	r2, #377	; 0x179
 80117d0:	496a      	ldr	r1, [pc, #424]	; (801197c <dhcp_select+0x1e0>)
 80117d2:	4869      	ldr	r0, [pc, #420]	; (8011978 <dhcp_select+0x1dc>)
 80117d4:	f004 f8d2 	bl	801597c <iprintf>
 80117d8:	f06f 0305 	mvn.w	r3, #5
 80117dc:	e0c3      	b.n	8011966 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80117de:	2101      	movs	r1, #1
 80117e0:	69b8      	ldr	r0, [r7, #24]
 80117e2:	f000 ffc9 	bl	8012778 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80117e6:	f107 030c 	add.w	r3, r7, #12
 80117ea:	2203      	movs	r2, #3
 80117ec:	69b9      	ldr	r1, [r7, #24]
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f001 fc4e 	bl	8013090 <dhcp_create_msg>
 80117f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f000 8085 	beq.w	8011908 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011804:	89b8      	ldrh	r0, [r7, #12]
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801180c:	2302      	movs	r3, #2
 801180e:	2239      	movs	r2, #57	; 0x39
 8011810:	f000 ffcc 	bl	80127ac <dhcp_option>
 8011814:	4603      	mov	r3, r0
 8011816:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011818:	89b8      	ldrh	r0, [r7, #12]
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011824:	461a      	mov	r2, r3
 8011826:	f001 f81b 	bl	8012860 <dhcp_option_short>
 801182a:	4603      	mov	r3, r0
 801182c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801182e:	89b8      	ldrh	r0, [r7, #12]
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011836:	2304      	movs	r3, #4
 8011838:	2232      	movs	r2, #50	; 0x32
 801183a:	f000 ffb7 	bl	80127ac <dhcp_option>
 801183e:	4603      	mov	r3, r0
 8011840:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011842:	89bc      	ldrh	r4, [r7, #12]
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801184a:	69bb      	ldr	r3, [r7, #24]
 801184c:	69db      	ldr	r3, [r3, #28]
 801184e:	4618      	mov	r0, r3
 8011850:	f7f8 f95f 	bl	8009b12 <lwip_htonl>
 8011854:	4603      	mov	r3, r0
 8011856:	461a      	mov	r2, r3
 8011858:	4629      	mov	r1, r5
 801185a:	4620      	mov	r0, r4
 801185c:	f001 f832 	bl	80128c4 <dhcp_option_long>
 8011860:	4603      	mov	r3, r0
 8011862:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011864:	89b8      	ldrh	r0, [r7, #12]
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801186c:	2304      	movs	r3, #4
 801186e:	2236      	movs	r2, #54	; 0x36
 8011870:	f000 ff9c 	bl	80127ac <dhcp_option>
 8011874:	4603      	mov	r3, r0
 8011876:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8011878:	89bc      	ldrh	r4, [r7, #12]
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	699b      	ldr	r3, [r3, #24]
 8011884:	4618      	mov	r0, r3
 8011886:	f7f8 f944 	bl	8009b12 <lwip_htonl>
 801188a:	4603      	mov	r3, r0
 801188c:	461a      	mov	r2, r3
 801188e:	4629      	mov	r1, r5
 8011890:	4620      	mov	r0, r4
 8011892:	f001 f817 	bl	80128c4 <dhcp_option_long>
 8011896:	4603      	mov	r3, r0
 8011898:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801189a:	89b8      	ldrh	r0, [r7, #12]
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118a2:	2303      	movs	r3, #3
 80118a4:	2237      	movs	r2, #55	; 0x37
 80118a6:	f000 ff81 	bl	80127ac <dhcp_option>
 80118aa:	4603      	mov	r3, r0
 80118ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118ae:	2300      	movs	r3, #0
 80118b0:	77bb      	strb	r3, [r7, #30]
 80118b2:	e00e      	b.n	80118d2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80118b4:	89b8      	ldrh	r0, [r7, #12]
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118bc:	7fbb      	ldrb	r3, [r7, #30]
 80118be:	4a30      	ldr	r2, [pc, #192]	; (8011980 <dhcp_select+0x1e4>)
 80118c0:	5cd3      	ldrb	r3, [r2, r3]
 80118c2:	461a      	mov	r2, r3
 80118c4:	f000 ffa6 	bl	8012814 <dhcp_option_byte>
 80118c8:	4603      	mov	r3, r0
 80118ca:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118cc:	7fbb      	ldrb	r3, [r7, #30]
 80118ce:	3301      	adds	r3, #1
 80118d0:	77bb      	strb	r3, [r7, #30]
 80118d2:	7fbb      	ldrb	r3, [r7, #30]
 80118d4:	2b02      	cmp	r3, #2
 80118d6:	d9ed      	bls.n	80118b4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80118d8:	89b8      	ldrh	r0, [r7, #12]
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	33f0      	adds	r3, #240	; 0xf0
 80118de:	697a      	ldr	r2, [r7, #20]
 80118e0:	4619      	mov	r1, r3
 80118e2:	f001 fcab 	bl	801323c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80118e6:	4b27      	ldr	r3, [pc, #156]	; (8011984 <dhcp_select+0x1e8>)
 80118e8:	6818      	ldr	r0, [r3, #0]
 80118ea:	4b27      	ldr	r3, [pc, #156]	; (8011988 <dhcp_select+0x1ec>)
 80118ec:	9301      	str	r3, [sp, #4]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	9300      	str	r3, [sp, #0]
 80118f2:	2343      	movs	r3, #67	; 0x43
 80118f4:	4a25      	ldr	r2, [pc, #148]	; (801198c <dhcp_select+0x1f0>)
 80118f6:	6979      	ldr	r1, [r7, #20]
 80118f8:	f7ff fbda 	bl	80110b0 <udp_sendto_if_src>
 80118fc:	4603      	mov	r3, r0
 80118fe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011900:	6978      	ldr	r0, [r7, #20]
 8011902:	f7f9 fc5b 	bl	800b1bc <pbuf_free>
 8011906:	e001      	b.n	801190c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011908:	23ff      	movs	r3, #255	; 0xff
 801190a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	799b      	ldrb	r3, [r3, #6]
 8011910:	2bff      	cmp	r3, #255	; 0xff
 8011912:	d005      	beq.n	8011920 <dhcp_select+0x184>
    dhcp->tries++;
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	799b      	ldrb	r3, [r3, #6]
 8011918:	3301      	adds	r3, #1
 801191a:	b2da      	uxtb	r2, r3
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011920:	69bb      	ldr	r3, [r7, #24]
 8011922:	799b      	ldrb	r3, [r3, #6]
 8011924:	2b05      	cmp	r3, #5
 8011926:	d80d      	bhi.n	8011944 <dhcp_select+0x1a8>
 8011928:	69bb      	ldr	r3, [r7, #24]
 801192a:	799b      	ldrb	r3, [r3, #6]
 801192c:	461a      	mov	r2, r3
 801192e:	2301      	movs	r3, #1
 8011930:	4093      	lsls	r3, r2
 8011932:	b29b      	uxth	r3, r3
 8011934:	461a      	mov	r2, r3
 8011936:	0152      	lsls	r2, r2, #5
 8011938:	1ad2      	subs	r2, r2, r3
 801193a:	0092      	lsls	r2, r2, #2
 801193c:	4413      	add	r3, r2
 801193e:	00db      	lsls	r3, r3, #3
 8011940:	b29b      	uxth	r3, r3
 8011942:	e001      	b.n	8011948 <dhcp_select+0x1ac>
 8011944:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011948:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801194a:	89fb      	ldrh	r3, [r7, #14]
 801194c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011950:	4a0f      	ldr	r2, [pc, #60]	; (8011990 <dhcp_select+0x1f4>)
 8011952:	fb82 1203 	smull	r1, r2, r2, r3
 8011956:	1152      	asrs	r2, r2, #5
 8011958:	17db      	asrs	r3, r3, #31
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	b29a      	uxth	r2, r3
 801195e:	69bb      	ldr	r3, [r7, #24]
 8011960:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011962:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011966:	4618      	mov	r0, r3
 8011968:	3720      	adds	r7, #32
 801196a:	46bd      	mov	sp, r7
 801196c:	bdb0      	pop	{r4, r5, r7, pc}
 801196e:	bf00      	nop
 8011970:	080192c0 	.word	0x080192c0
 8011974:	0801936c 	.word	0x0801936c
 8011978:	08019320 	.word	0x08019320
 801197c:	08019388 	.word	0x08019388
 8011980:	20000060 	.word	0x20000060
 8011984:	2000b0b0 	.word	0x2000b0b0
 8011988:	0801c508 	.word	0x0801c508
 801198c:	0801c50c 	.word	0x0801c50c
 8011990:	10624dd3 	.word	0x10624dd3

08011994 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801199a:	4b27      	ldr	r3, [pc, #156]	; (8011a38 <dhcp_coarse_tmr+0xa4>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	607b      	str	r3, [r7, #4]
 80119a0:	e042      	b.n	8011a28 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d039      	beq.n	8011a22 <dhcp_coarse_tmr+0x8e>
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	795b      	ldrb	r3, [r3, #5]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d035      	beq.n	8011a22 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	8a9b      	ldrh	r3, [r3, #20]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d012      	beq.n	80119e4 <dhcp_coarse_tmr+0x50>
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	8a5b      	ldrh	r3, [r3, #18]
 80119c2:	3301      	adds	r3, #1
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	825a      	strh	r2, [r3, #18]
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	8a5a      	ldrh	r2, [r3, #18]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	8a9b      	ldrh	r3, [r3, #20]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d106      	bne.n	80119e4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f000 fe34 	bl	8012644 <dhcp_release_and_stop>
        dhcp_start(netif);
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f000 f96b 	bl	8011cb8 <dhcp_start>
 80119e2:	e01e      	b.n	8011a22 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	8a1b      	ldrh	r3, [r3, #16]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d00b      	beq.n	8011a04 <dhcp_coarse_tmr+0x70>
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	8a1b      	ldrh	r3, [r3, #16]
 80119f0:	1e5a      	subs	r2, r3, #1
 80119f2:	b291      	uxth	r1, r2
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	8211      	strh	r1, [r2, #16]
 80119f8:	2b01      	cmp	r3, #1
 80119fa:	d103      	bne.n	8011a04 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 f8c7 	bl	8011b90 <dhcp_t2_timeout>
 8011a02:	e00e      	b.n	8011a22 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	89db      	ldrh	r3, [r3, #14]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d00a      	beq.n	8011a22 <dhcp_coarse_tmr+0x8e>
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	89db      	ldrh	r3, [r3, #14]
 8011a10:	1e5a      	subs	r2, r3, #1
 8011a12:	b291      	uxth	r1, r2
 8011a14:	683a      	ldr	r2, [r7, #0]
 8011a16:	81d1      	strh	r1, [r2, #14]
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d102      	bne.n	8011a22 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f000 f888 	bl	8011b32 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	607b      	str	r3, [r7, #4]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d1b9      	bne.n	80119a2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8011a2e:	bf00      	nop
 8011a30:	bf00      	nop
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	2000b01c 	.word	0x2000b01c

08011a3c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8011a42:	4b16      	ldr	r3, [pc, #88]	; (8011a9c <dhcp_fine_tmr+0x60>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	607b      	str	r3, [r7, #4]
 8011a48:	e020      	b.n	8011a8c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a4e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d017      	beq.n	8011a86 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	891b      	ldrh	r3, [r3, #8]
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	d906      	bls.n	8011a6c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	891b      	ldrh	r3, [r3, #8]
 8011a62:	3b01      	subs	r3, #1
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	811a      	strh	r2, [r3, #8]
 8011a6a:	e00c      	b.n	8011a86 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	891b      	ldrh	r3, [r3, #8]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d108      	bne.n	8011a86 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	891b      	ldrh	r3, [r3, #8]
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f000 f80d 	bl	8011aa0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	607b      	str	r3, [r7, #4]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d1db      	bne.n	8011a4a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8011a92:	bf00      	nop
 8011a94:	bf00      	nop
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	2000b01c 	.word	0x2000b01c

08011aa0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aac:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	795b      	ldrb	r3, [r3, #5]
 8011ab2:	2b0c      	cmp	r3, #12
 8011ab4:	d003      	beq.n	8011abe <dhcp_timeout+0x1e>
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	795b      	ldrb	r3, [r3, #5]
 8011aba:	2b06      	cmp	r3, #6
 8011abc:	d103      	bne.n	8011ac6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f000 fa56 	bl	8011f70 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011ac4:	e031      	b.n	8011b2a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	795b      	ldrb	r3, [r3, #5]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d10e      	bne.n	8011aec <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	799b      	ldrb	r3, [r3, #6]
 8011ad2:	2b05      	cmp	r3, #5
 8011ad4:	d803      	bhi.n	8011ade <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f7ff fe60 	bl	801179c <dhcp_select>
}
 8011adc:	e025      	b.n	8011b2a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f000 fdb0 	bl	8012644 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 f8e7 	bl	8011cb8 <dhcp_start>
}
 8011aea:	e01e      	b.n	8011b2a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	795b      	ldrb	r3, [r3, #5]
 8011af0:	2b08      	cmp	r3, #8
 8011af2:	d10b      	bne.n	8011b0c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	799b      	ldrb	r3, [r3, #6]
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d803      	bhi.n	8011b04 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f7ff fdf3 	bl	80116e8 <dhcp_check>
}
 8011b02:	e012      	b.n	8011b2a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f000 fad5 	bl	80120b4 <dhcp_bind>
}
 8011b0a:	e00e      	b.n	8011b2a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	795b      	ldrb	r3, [r3, #5]
 8011b10:	2b03      	cmp	r3, #3
 8011b12:	d10a      	bne.n	8011b2a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	799b      	ldrb	r3, [r3, #6]
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d803      	bhi.n	8011b24 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f000 fcdb 	bl	80124d8 <dhcp_reboot>
}
 8011b22:	e002      	b.n	8011b2a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f000 fa23 	bl	8011f70 <dhcp_discover>
}
 8011b2a:	bf00      	nop
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b084      	sub	sp, #16
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b3e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	795b      	ldrb	r3, [r3, #5]
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d007      	beq.n	8011b58 <dhcp_t1_timeout+0x26>
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	795b      	ldrb	r3, [r3, #5]
 8011b4c:	2b0a      	cmp	r3, #10
 8011b4e:	d003      	beq.n	8011b58 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011b54:	2b05      	cmp	r3, #5
 8011b56:	d117      	bne.n	8011b88 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 fb85 	bl	8012268 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	899b      	ldrh	r3, [r3, #12]
 8011b62:	461a      	mov	r2, r3
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	8a5b      	ldrh	r3, [r3, #18]
 8011b68:	1ad3      	subs	r3, r2, r3
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	dd0c      	ble.n	8011b88 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	899b      	ldrh	r3, [r3, #12]
 8011b72:	461a      	mov	r2, r3
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	8a5b      	ldrh	r3, [r3, #18]
 8011b78:	1ad3      	subs	r3, r2, r3
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	da00      	bge.n	8011b80 <dhcp_t1_timeout+0x4e>
 8011b7e:	3301      	adds	r3, #1
 8011b80:	105b      	asrs	r3, r3, #1
 8011b82:	b29a      	uxth	r2, r3
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8011b88:	bf00      	nop
 8011b8a:	3710      	adds	r7, #16
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b9c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	795b      	ldrb	r3, [r3, #5]
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d00b      	beq.n	8011bbe <dhcp_t2_timeout+0x2e>
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	795b      	ldrb	r3, [r3, #5]
 8011baa:	2b0a      	cmp	r3, #10
 8011bac:	d007      	beq.n	8011bbe <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011bb2:	2b05      	cmp	r3, #5
 8011bb4:	d003      	beq.n	8011bbe <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	795b      	ldrb	r3, [r3, #5]
 8011bba:	2b04      	cmp	r3, #4
 8011bbc:	d117      	bne.n	8011bee <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f000 fbee 	bl	80123a0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	8a9b      	ldrh	r3, [r3, #20]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	8a5b      	ldrh	r3, [r3, #18]
 8011bce:	1ad3      	subs	r3, r2, r3
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	dd0c      	ble.n	8011bee <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	8a9b      	ldrh	r3, [r3, #20]
 8011bd8:	461a      	mov	r2, r3
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	8a5b      	ldrh	r3, [r3, #18]
 8011bde:	1ad3      	subs	r3, r2, r3
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	da00      	bge.n	8011be6 <dhcp_t2_timeout+0x56>
 8011be4:	3301      	adds	r3, #1
 8011be6:	105b      	asrs	r3, r3, #1
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8011bee:	bf00      	nop
 8011bf0:	3710      	adds	r7, #16
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
	...

08011bf8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c06:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2200      	movs	r2, #0
 8011c12:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011c14:	4b26      	ldr	r3, [pc, #152]	; (8011cb0 <dhcp_handle_ack+0xb8>)
 8011c16:	78db      	ldrb	r3, [r3, #3]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d003      	beq.n	8011c24 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011c1c:	4b25      	ldr	r3, [pc, #148]	; (8011cb4 <dhcp_handle_ack+0xbc>)
 8011c1e:	68da      	ldr	r2, [r3, #12]
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011c24:	4b22      	ldr	r3, [pc, #136]	; (8011cb0 <dhcp_handle_ack+0xb8>)
 8011c26:	791b      	ldrb	r3, [r3, #4]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d004      	beq.n	8011c36 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011c2c:	4b21      	ldr	r3, [pc, #132]	; (8011cb4 <dhcp_handle_ack+0xbc>)
 8011c2e:	691a      	ldr	r2, [r3, #16]
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	62da      	str	r2, [r3, #44]	; 0x2c
 8011c34:	e004      	b.n	8011c40 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c3a:	085a      	lsrs	r2, r3, #1
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011c40:	4b1b      	ldr	r3, [pc, #108]	; (8011cb0 <dhcp_handle_ack+0xb8>)
 8011c42:	795b      	ldrb	r3, [r3, #5]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d004      	beq.n	8011c52 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011c48:	4b1a      	ldr	r3, [pc, #104]	; (8011cb4 <dhcp_handle_ack+0xbc>)
 8011c4a:	695a      	ldr	r2, [r3, #20]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8011c50:	e007      	b.n	8011c62 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c56:	4613      	mov	r3, r2
 8011c58:	00db      	lsls	r3, r3, #3
 8011c5a:	1a9b      	subs	r3, r3, r2
 8011c5c:	08da      	lsrs	r2, r3, #3
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	691a      	ldr	r2, [r3, #16]
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8011c6a:	4b11      	ldr	r3, [pc, #68]	; (8011cb0 <dhcp_handle_ack+0xb8>)
 8011c6c:	799b      	ldrb	r3, [r3, #6]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00b      	beq.n	8011c8a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8011c72:	4b10      	ldr	r3, [pc, #64]	; (8011cb4 <dhcp_handle_ack+0xbc>)
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7f7 ff4b 	bl	8009b12 <lwip_htonl>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2201      	movs	r2, #1
 8011c86:	71da      	strb	r2, [r3, #7]
 8011c88:	e002      	b.n	8011c90 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011c90:	4b07      	ldr	r3, [pc, #28]	; (8011cb0 <dhcp_handle_ack+0xb8>)
 8011c92:	79db      	ldrb	r3, [r3, #7]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d007      	beq.n	8011ca8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8011c98:	4b06      	ldr	r3, [pc, #24]	; (8011cb4 <dhcp_handle_ack+0xbc>)
 8011c9a:	69db      	ldr	r3, [r3, #28]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7f7 ff38 	bl	8009b12 <lwip_htonl>
 8011ca2:	4602      	mov	r2, r0
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011ca8:	bf00      	nop
 8011caa:	3710      	adds	r7, #16
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	2000b0a8 	.word	0x2000b0a8
 8011cb4:	2000b088 	.word	0x2000b088

08011cb8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b084      	sub	sp, #16
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d109      	bne.n	8011cda <dhcp_start+0x22>
 8011cc6:	4b37      	ldr	r3, [pc, #220]	; (8011da4 <dhcp_start+0xec>)
 8011cc8:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011ccc:	4936      	ldr	r1, [pc, #216]	; (8011da8 <dhcp_start+0xf0>)
 8011cce:	4837      	ldr	r0, [pc, #220]	; (8011dac <dhcp_start+0xf4>)
 8011cd0:	f003 fe54 	bl	801597c <iprintf>
 8011cd4:	f06f 030f 	mvn.w	r3, #15
 8011cd8:	e060      	b.n	8011d9c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011ce0:	f003 0301 	and.w	r3, r3, #1
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d109      	bne.n	8011cfc <dhcp_start+0x44>
 8011ce8:	4b2e      	ldr	r3, [pc, #184]	; (8011da4 <dhcp_start+0xec>)
 8011cea:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011cee:	4930      	ldr	r1, [pc, #192]	; (8011db0 <dhcp_start+0xf8>)
 8011cf0:	482e      	ldr	r0, [pc, #184]	; (8011dac <dhcp_start+0xf4>)
 8011cf2:	f003 fe43 	bl	801597c <iprintf>
 8011cf6:	f06f 030f 	mvn.w	r3, #15
 8011cfa:	e04f      	b.n	8011d9c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d00:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d06:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8011d0a:	d202      	bcs.n	8011d12 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d10:	e044      	b.n	8011d9c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d10d      	bne.n	8011d34 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011d18:	2034      	movs	r0, #52	; 0x34
 8011d1a:	f7f8 f9cd 	bl	800a0b8 <mem_malloc>
 8011d1e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d102      	bne.n	8011d2c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8011d26:	f04f 33ff 	mov.w	r3, #4294967295
 8011d2a:	e037      	b.n	8011d9c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	68fa      	ldr	r2, [r7, #12]
 8011d30:	625a      	str	r2, [r3, #36]	; 0x24
 8011d32:	e005      	b.n	8011d40 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	791b      	ldrb	r3, [r3, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011d3c:	f7ff fc90 	bl	8011660 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011d40:	2234      	movs	r2, #52	; 0x34
 8011d42:	2100      	movs	r1, #0
 8011d44:	68f8      	ldr	r0, [r7, #12]
 8011d46:	f003 fe11 	bl	801596c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011d4a:	f7ff fc37 	bl	80115bc <dhcp_inc_pcb_refcount>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d002      	beq.n	8011d5a <dhcp_start+0xa2>
    return ERR_MEM;
 8011d54:	f04f 33ff 	mov.w	r3, #4294967295
 8011d58:	e020      	b.n	8011d9c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d66:	f003 0304 	and.w	r3, r3, #4
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d105      	bne.n	8011d7a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8011d6e:	2102      	movs	r1, #2
 8011d70:	68f8      	ldr	r0, [r7, #12]
 8011d72:	f000 fd01 	bl	8012778 <dhcp_set_state>
    return ERR_OK;
 8011d76:	2300      	movs	r3, #0
 8011d78:	e010      	b.n	8011d9c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 f8f8 	bl	8011f70 <dhcp_discover>
 8011d80:	4603      	mov	r3, r0
 8011d82:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011d84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d005      	beq.n	8011d98 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 fc59 	bl	8012644 <dhcp_release_and_stop>
    return ERR_MEM;
 8011d92:	f04f 33ff 	mov.w	r3, #4294967295
 8011d96:	e001      	b.n	8011d9c <dhcp_start+0xe4>
  }
  return result;
 8011d98:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3710      	adds	r7, #16
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	080192c0 	.word	0x080192c0
 8011da8:	080193a4 	.word	0x080193a4
 8011dac:	08019320 	.word	0x08019320
 8011db0:	080193e8 	.word	0x080193e8

08011db4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d025      	beq.n	8011e14 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	795b      	ldrb	r3, [r3, #5]
 8011dcc:	2b0a      	cmp	r3, #10
 8011dce:	d008      	beq.n	8011de2 <dhcp_network_changed+0x2e>
 8011dd0:	2b0a      	cmp	r3, #10
 8011dd2:	dc0d      	bgt.n	8011df0 <dhcp_network_changed+0x3c>
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d01f      	beq.n	8011e18 <dhcp_network_changed+0x64>
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	db09      	blt.n	8011df0 <dhcp_network_changed+0x3c>
 8011ddc:	3b03      	subs	r3, #3
 8011dde:	2b02      	cmp	r3, #2
 8011de0:	d806      	bhi.n	8011df0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2200      	movs	r2, #0
 8011de6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f000 fb75 	bl	80124d8 <dhcp_reboot>
      break;
 8011dee:	e014      	b.n	8011e1a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	795b      	ldrb	r3, [r3, #5]
 8011df4:	2b0c      	cmp	r3, #12
 8011df6:	d906      	bls.n	8011e06 <dhcp_network_changed+0x52>
 8011df8:	4b09      	ldr	r3, [pc, #36]	; (8011e20 <dhcp_network_changed+0x6c>)
 8011dfa:	f240 326d 	movw	r2, #877	; 0x36d
 8011dfe:	4909      	ldr	r1, [pc, #36]	; (8011e24 <dhcp_network_changed+0x70>)
 8011e00:	4809      	ldr	r0, [pc, #36]	; (8011e28 <dhcp_network_changed+0x74>)
 8011e02:	f003 fdbb 	bl	801597c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	2200      	movs	r2, #0
 8011e0a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f000 f8af 	bl	8011f70 <dhcp_discover>
      break;
 8011e12:	e002      	b.n	8011e1a <dhcp_network_changed+0x66>
    return;
 8011e14:	bf00      	nop
 8011e16:	e000      	b.n	8011e1a <dhcp_network_changed+0x66>
      break;
 8011e18:	bf00      	nop
  }
}
 8011e1a:	3710      	adds	r7, #16
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	080192c0 	.word	0x080192c0
 8011e24:	0801940c 	.word	0x0801940c
 8011e28:	08019320 	.word	0x08019320

08011e2c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d107      	bne.n	8011e4c <dhcp_arp_reply+0x20>
 8011e3c:	4b0e      	ldr	r3, [pc, #56]	; (8011e78 <dhcp_arp_reply+0x4c>)
 8011e3e:	f240 328b 	movw	r2, #907	; 0x38b
 8011e42:	490e      	ldr	r1, [pc, #56]	; (8011e7c <dhcp_arp_reply+0x50>)
 8011e44:	480e      	ldr	r0, [pc, #56]	; (8011e80 <dhcp_arp_reply+0x54>)
 8011e46:	f003 fd99 	bl	801597c <iprintf>
 8011e4a:	e012      	b.n	8011e72 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e50:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00c      	beq.n	8011e72 <dhcp_arp_reply+0x46>
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	795b      	ldrb	r3, [r3, #5]
 8011e5c:	2b08      	cmp	r3, #8
 8011e5e:	d108      	bne.n	8011e72 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	69db      	ldr	r3, [r3, #28]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d102      	bne.n	8011e72 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f000 f809 	bl	8011e84 <dhcp_decline>
    }
  }
}
 8011e72:	3710      	adds	r7, #16
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	080192c0 	.word	0x080192c0
 8011e7c:	080193a4 	.word	0x080193a4
 8011e80:	08019320 	.word	0x08019320

08011e84 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011e84:	b5b0      	push	{r4, r5, r7, lr}
 8011e86:	b08a      	sub	sp, #40	; 0x28
 8011e88:	af02      	add	r7, sp, #8
 8011e8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e90:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011e92:	210c      	movs	r1, #12
 8011e94:	69b8      	ldr	r0, [r7, #24]
 8011e96:	f000 fc6f 	bl	8012778 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8011e9a:	f107 030c 	add.w	r3, r7, #12
 8011e9e:	2204      	movs	r2, #4
 8011ea0:	69b9      	ldr	r1, [r7, #24]
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f001 f8f4 	bl	8013090 <dhcp_create_msg>
 8011ea8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d035      	beq.n	8011f1c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011eb6:	89b8      	ldrh	r0, [r7, #12]
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ebe:	2304      	movs	r3, #4
 8011ec0:	2232      	movs	r2, #50	; 0x32
 8011ec2:	f000 fc73 	bl	80127ac <dhcp_option>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011eca:	89bc      	ldrh	r4, [r7, #12]
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011ed2:	69bb      	ldr	r3, [r7, #24]
 8011ed4:	69db      	ldr	r3, [r3, #28]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7f7 fe1b 	bl	8009b12 <lwip_htonl>
 8011edc:	4603      	mov	r3, r0
 8011ede:	461a      	mov	r2, r3
 8011ee0:	4629      	mov	r1, r5
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	f000 fcee 	bl	80128c4 <dhcp_option_long>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011eec:	89b8      	ldrh	r0, [r7, #12]
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	33f0      	adds	r3, #240	; 0xf0
 8011ef2:	697a      	ldr	r2, [r7, #20]
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	f001 f9a1 	bl	801323c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011efa:	4b19      	ldr	r3, [pc, #100]	; (8011f60 <dhcp_decline+0xdc>)
 8011efc:	6818      	ldr	r0, [r3, #0]
 8011efe:	4b19      	ldr	r3, [pc, #100]	; (8011f64 <dhcp_decline+0xe0>)
 8011f00:	9301      	str	r3, [sp, #4]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	9300      	str	r3, [sp, #0]
 8011f06:	2343      	movs	r3, #67	; 0x43
 8011f08:	4a17      	ldr	r2, [pc, #92]	; (8011f68 <dhcp_decline+0xe4>)
 8011f0a:	6979      	ldr	r1, [r7, #20]
 8011f0c:	f7ff f8d0 	bl	80110b0 <udp_sendto_if_src>
 8011f10:	4603      	mov	r3, r0
 8011f12:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011f14:	6978      	ldr	r0, [r7, #20]
 8011f16:	f7f9 f951 	bl	800b1bc <pbuf_free>
 8011f1a:	e001      	b.n	8011f20 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011f1c:	23ff      	movs	r3, #255	; 0xff
 8011f1e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	799b      	ldrb	r3, [r3, #6]
 8011f24:	2bff      	cmp	r3, #255	; 0xff
 8011f26:	d005      	beq.n	8011f34 <dhcp_decline+0xb0>
    dhcp->tries++;
 8011f28:	69bb      	ldr	r3, [r7, #24]
 8011f2a:	799b      	ldrb	r3, [r3, #6]
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	69bb      	ldr	r3, [r7, #24]
 8011f32:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8011f34:	f242 7310 	movw	r3, #10000	; 0x2710
 8011f38:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011f3a:	89fb      	ldrh	r3, [r7, #14]
 8011f3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011f40:	4a0a      	ldr	r2, [pc, #40]	; (8011f6c <dhcp_decline+0xe8>)
 8011f42:	fb82 1203 	smull	r1, r2, r2, r3
 8011f46:	1152      	asrs	r2, r2, #5
 8011f48:	17db      	asrs	r3, r3, #31
 8011f4a:	1ad3      	subs	r3, r2, r3
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	69bb      	ldr	r3, [r7, #24]
 8011f50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011f52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3720      	adds	r7, #32
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	2000b0b0 	.word	0x2000b0b0
 8011f64:	0801c508 	.word	0x0801c508
 8011f68:	0801c50c 	.word	0x0801c50c
 8011f6c:	10624dd3 	.word	0x10624dd3

08011f70 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b08a      	sub	sp, #40	; 0x28
 8011f74:	af02      	add	r7, sp, #8
 8011f76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011f82:	69bb      	ldr	r3, [r7, #24]
 8011f84:	2200      	movs	r2, #0
 8011f86:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011f88:	2106      	movs	r1, #6
 8011f8a:	69b8      	ldr	r0, [r7, #24]
 8011f8c:	f000 fbf4 	bl	8012778 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011f90:	f107 0308 	add.w	r3, r7, #8
 8011f94:	2201      	movs	r2, #1
 8011f96:	69b9      	ldr	r1, [r7, #24]
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f001 f879 	bl	8013090 <dhcp_create_msg>
 8011f9e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d04b      	beq.n	801203e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011fac:	8938      	ldrh	r0, [r7, #8]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	2239      	movs	r2, #57	; 0x39
 8011fb8:	f000 fbf8 	bl	80127ac <dhcp_option>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011fc0:	8938      	ldrh	r0, [r7, #8]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fcc:	461a      	mov	r2, r3
 8011fce:	f000 fc47 	bl	8012860 <dhcp_option_short>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011fd6:	8938      	ldrh	r0, [r7, #8]
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011fde:	2303      	movs	r3, #3
 8011fe0:	2237      	movs	r2, #55	; 0x37
 8011fe2:	f000 fbe3 	bl	80127ac <dhcp_option>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011fea:	2300      	movs	r3, #0
 8011fec:	77fb      	strb	r3, [r7, #31]
 8011fee:	e00e      	b.n	801200e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011ff0:	8938      	ldrh	r0, [r7, #8]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ff8:	7ffb      	ldrb	r3, [r7, #31]
 8011ffa:	4a29      	ldr	r2, [pc, #164]	; (80120a0 <dhcp_discover+0x130>)
 8011ffc:	5cd3      	ldrb	r3, [r2, r3]
 8011ffe:	461a      	mov	r2, r3
 8012000:	f000 fc08 	bl	8012814 <dhcp_option_byte>
 8012004:	4603      	mov	r3, r0
 8012006:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012008:	7ffb      	ldrb	r3, [r7, #31]
 801200a:	3301      	adds	r3, #1
 801200c:	77fb      	strb	r3, [r7, #31]
 801200e:	7ffb      	ldrb	r3, [r7, #31]
 8012010:	2b02      	cmp	r3, #2
 8012012:	d9ed      	bls.n	8011ff0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012014:	8938      	ldrh	r0, [r7, #8]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	33f0      	adds	r3, #240	; 0xf0
 801201a:	693a      	ldr	r2, [r7, #16]
 801201c:	4619      	mov	r1, r3
 801201e:	f001 f90d 	bl	801323c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012022:	4b20      	ldr	r3, [pc, #128]	; (80120a4 <dhcp_discover+0x134>)
 8012024:	6818      	ldr	r0, [r3, #0]
 8012026:	4b20      	ldr	r3, [pc, #128]	; (80120a8 <dhcp_discover+0x138>)
 8012028:	9301      	str	r3, [sp, #4]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	2343      	movs	r3, #67	; 0x43
 8012030:	4a1e      	ldr	r2, [pc, #120]	; (80120ac <dhcp_discover+0x13c>)
 8012032:	6939      	ldr	r1, [r7, #16]
 8012034:	f7ff f83c 	bl	80110b0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012038:	6938      	ldr	r0, [r7, #16]
 801203a:	f7f9 f8bf 	bl	800b1bc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801203e:	69bb      	ldr	r3, [r7, #24]
 8012040:	799b      	ldrb	r3, [r3, #6]
 8012042:	2bff      	cmp	r3, #255	; 0xff
 8012044:	d005      	beq.n	8012052 <dhcp_discover+0xe2>
    dhcp->tries++;
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	799b      	ldrb	r3, [r3, #6]
 801204a:	3301      	adds	r3, #1
 801204c:	b2da      	uxtb	r2, r3
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	799b      	ldrb	r3, [r3, #6]
 8012056:	2b05      	cmp	r3, #5
 8012058:	d80d      	bhi.n	8012076 <dhcp_discover+0x106>
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	799b      	ldrb	r3, [r3, #6]
 801205e:	461a      	mov	r2, r3
 8012060:	2301      	movs	r3, #1
 8012062:	4093      	lsls	r3, r2
 8012064:	b29b      	uxth	r3, r3
 8012066:	461a      	mov	r2, r3
 8012068:	0152      	lsls	r2, r2, #5
 801206a:	1ad2      	subs	r2, r2, r3
 801206c:	0092      	lsls	r2, r2, #2
 801206e:	4413      	add	r3, r2
 8012070:	00db      	lsls	r3, r3, #3
 8012072:	b29b      	uxth	r3, r3
 8012074:	e001      	b.n	801207a <dhcp_discover+0x10a>
 8012076:	f64e 2360 	movw	r3, #60000	; 0xea60
 801207a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801207c:	897b      	ldrh	r3, [r7, #10]
 801207e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012082:	4a0b      	ldr	r2, [pc, #44]	; (80120b0 <dhcp_discover+0x140>)
 8012084:	fb82 1203 	smull	r1, r2, r2, r3
 8012088:	1152      	asrs	r2, r2, #5
 801208a:	17db      	asrs	r3, r3, #31
 801208c:	1ad3      	subs	r3, r2, r3
 801208e:	b29a      	uxth	r2, r3
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012094:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012098:	4618      	mov	r0, r3
 801209a:	3720      	adds	r7, #32
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	20000060 	.word	0x20000060
 80120a4:	2000b0b0 	.word	0x2000b0b0
 80120a8:	0801c508 	.word	0x0801c508
 80120ac:	0801c50c 	.word	0x0801c50c
 80120b0:	10624dd3 	.word	0x10624dd3

080120b4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b088      	sub	sp, #32
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d107      	bne.n	80120d2 <dhcp_bind+0x1e>
 80120c2:	4b64      	ldr	r3, [pc, #400]	; (8012254 <dhcp_bind+0x1a0>)
 80120c4:	f240 4215 	movw	r2, #1045	; 0x415
 80120c8:	4963      	ldr	r1, [pc, #396]	; (8012258 <dhcp_bind+0x1a4>)
 80120ca:	4864      	ldr	r0, [pc, #400]	; (801225c <dhcp_bind+0x1a8>)
 80120cc:	f003 fc56 	bl	801597c <iprintf>
 80120d0:	e0bc      	b.n	801224c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120d6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d107      	bne.n	80120ee <dhcp_bind+0x3a>
 80120de:	4b5d      	ldr	r3, [pc, #372]	; (8012254 <dhcp_bind+0x1a0>)
 80120e0:	f240 4217 	movw	r2, #1047	; 0x417
 80120e4:	495e      	ldr	r1, [pc, #376]	; (8012260 <dhcp_bind+0x1ac>)
 80120e6:	485d      	ldr	r0, [pc, #372]	; (801225c <dhcp_bind+0x1a8>)
 80120e8:	f003 fc48 	bl	801597c <iprintf>
 80120ec:	e0ae      	b.n	801224c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80120ee:	69bb      	ldr	r3, [r7, #24]
 80120f0:	2200      	movs	r2, #0
 80120f2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80120f4:	69bb      	ldr	r3, [r7, #24]
 80120f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120fc:	d019      	beq.n	8012132 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012102:	331e      	adds	r3, #30
 8012104:	4a57      	ldr	r2, [pc, #348]	; (8012264 <dhcp_bind+0x1b0>)
 8012106:	fba2 2303 	umull	r2, r3, r2, r3
 801210a:	095b      	lsrs	r3, r3, #5
 801210c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012114:	d302      	bcc.n	801211c <dhcp_bind+0x68>
      timeout = 0xffff;
 8012116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801211a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	b29a      	uxth	r2, r3
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8012124:	69bb      	ldr	r3, [r7, #24]
 8012126:	8a9b      	ldrh	r3, [r3, #20]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d102      	bne.n	8012132 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	2201      	movs	r2, #1
 8012130:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801213a:	d01d      	beq.n	8012178 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801213c:	69bb      	ldr	r3, [r7, #24]
 801213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012140:	331e      	adds	r3, #30
 8012142:	4a48      	ldr	r2, [pc, #288]	; (8012264 <dhcp_bind+0x1b0>)
 8012144:	fba2 2303 	umull	r2, r3, r2, r3
 8012148:	095b      	lsrs	r3, r3, #5
 801214a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012152:	d302      	bcc.n	801215a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012158:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	b29a      	uxth	r2, r3
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012162:	69bb      	ldr	r3, [r7, #24]
 8012164:	895b      	ldrh	r3, [r3, #10]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d102      	bne.n	8012170 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	2201      	movs	r2, #1
 801216e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	895a      	ldrh	r2, [r3, #10]
 8012174:	69bb      	ldr	r3, [r7, #24]
 8012176:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012180:	d01d      	beq.n	80121be <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012182:	69bb      	ldr	r3, [r7, #24]
 8012184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012186:	331e      	adds	r3, #30
 8012188:	4a36      	ldr	r2, [pc, #216]	; (8012264 <dhcp_bind+0x1b0>)
 801218a:	fba2 2303 	umull	r2, r3, r2, r3
 801218e:	095b      	lsrs	r3, r3, #5
 8012190:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012198:	d302      	bcc.n	80121a0 <dhcp_bind+0xec>
      timeout = 0xffff;
 801219a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801219e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	899b      	ldrh	r3, [r3, #12]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d102      	bne.n	80121b6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	2201      	movs	r2, #1
 80121b4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	899a      	ldrh	r2, [r3, #12]
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80121be:	69bb      	ldr	r3, [r7, #24]
 80121c0:	895a      	ldrh	r2, [r3, #10]
 80121c2:	69bb      	ldr	r3, [r7, #24]
 80121c4:	899b      	ldrh	r3, [r3, #12]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d306      	bcc.n	80121d8 <dhcp_bind+0x124>
 80121ca:	69bb      	ldr	r3, [r7, #24]
 80121cc:	899b      	ldrh	r3, [r3, #12]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d002      	beq.n	80121d8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	2200      	movs	r2, #0
 80121d6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	79db      	ldrb	r3, [r3, #7]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d003      	beq.n	80121e8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	6a1b      	ldr	r3, [r3, #32]
 80121e4:	613b      	str	r3, [r7, #16]
 80121e6:	e014      	b.n	8012212 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	331c      	adds	r3, #28
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80121f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	db02      	blt.n	80121fe <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80121f8:	23ff      	movs	r3, #255	; 0xff
 80121fa:	613b      	str	r3, [r7, #16]
 80121fc:	e009      	b.n	8012212 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80121fe:	7dfb      	ldrb	r3, [r7, #23]
 8012200:	2bbf      	cmp	r3, #191	; 0xbf
 8012202:	d903      	bls.n	801220c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012204:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012208:	613b      	str	r3, [r7, #16]
 801220a:	e002      	b.n	8012212 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801220c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012210:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012216:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d108      	bne.n	8012230 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801221e:	69bb      	ldr	r3, [r7, #24]
 8012220:	69da      	ldr	r2, [r3, #28]
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	4013      	ands	r3, r2
 8012226:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801222e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012230:	210a      	movs	r1, #10
 8012232:	69b8      	ldr	r0, [r7, #24]
 8012234:	f000 faa0 	bl	8012778 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	f103 011c 	add.w	r1, r3, #28
 801223e:	f107 030c 	add.w	r3, r7, #12
 8012242:	f107 0210 	add.w	r2, r7, #16
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f7f8 fad8 	bl	800a7fc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801224c:	3720      	adds	r7, #32
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	080192c0 	.word	0x080192c0
 8012258:	08019420 	.word	0x08019420
 801225c:	08019320 	.word	0x08019320
 8012260:	0801943c 	.word	0x0801943c
 8012264:	88888889 	.word	0x88888889

08012268 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b08a      	sub	sp, #40	; 0x28
 801226c:	af02      	add	r7, sp, #8
 801226e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012274:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012276:	2105      	movs	r1, #5
 8012278:	69b8      	ldr	r0, [r7, #24]
 801227a:	f000 fa7d 	bl	8012778 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801227e:	f107 030c 	add.w	r3, r7, #12
 8012282:	2203      	movs	r2, #3
 8012284:	69b9      	ldr	r1, [r7, #24]
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 ff02 	bl	8013090 <dhcp_create_msg>
 801228c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d04e      	beq.n	8012332 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801229a:	89b8      	ldrh	r0, [r7, #12]
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80122a2:	2302      	movs	r3, #2
 80122a4:	2239      	movs	r2, #57	; 0x39
 80122a6:	f000 fa81 	bl	80127ac <dhcp_option>
 80122aa:	4603      	mov	r3, r0
 80122ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80122ae:	89b8      	ldrh	r0, [r7, #12]
 80122b0:	693b      	ldr	r3, [r7, #16]
 80122b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122ba:	461a      	mov	r2, r3
 80122bc:	f000 fad0 	bl	8012860 <dhcp_option_short>
 80122c0:	4603      	mov	r3, r0
 80122c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80122c4:	89b8      	ldrh	r0, [r7, #12]
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80122cc:	2303      	movs	r3, #3
 80122ce:	2237      	movs	r2, #55	; 0x37
 80122d0:	f000 fa6c 	bl	80127ac <dhcp_option>
 80122d4:	4603      	mov	r3, r0
 80122d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80122d8:	2300      	movs	r3, #0
 80122da:	77bb      	strb	r3, [r7, #30]
 80122dc:	e00e      	b.n	80122fc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80122de:	89b8      	ldrh	r0, [r7, #12]
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80122e6:	7fbb      	ldrb	r3, [r7, #30]
 80122e8:	4a2a      	ldr	r2, [pc, #168]	; (8012394 <dhcp_renew+0x12c>)
 80122ea:	5cd3      	ldrb	r3, [r2, r3]
 80122ec:	461a      	mov	r2, r3
 80122ee:	f000 fa91 	bl	8012814 <dhcp_option_byte>
 80122f2:	4603      	mov	r3, r0
 80122f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80122f6:	7fbb      	ldrb	r3, [r7, #30]
 80122f8:	3301      	adds	r3, #1
 80122fa:	77bb      	strb	r3, [r7, #30]
 80122fc:	7fbb      	ldrb	r3, [r7, #30]
 80122fe:	2b02      	cmp	r3, #2
 8012300:	d9ed      	bls.n	80122de <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012302:	89b8      	ldrh	r0, [r7, #12]
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	33f0      	adds	r3, #240	; 0xf0
 8012308:	697a      	ldr	r2, [r7, #20]
 801230a:	4619      	mov	r1, r3
 801230c:	f000 ff96 	bl	801323c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012310:	4b21      	ldr	r3, [pc, #132]	; (8012398 <dhcp_renew+0x130>)
 8012312:	6818      	ldr	r0, [r3, #0]
 8012314:	69bb      	ldr	r3, [r7, #24]
 8012316:	f103 0218 	add.w	r2, r3, #24
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	9300      	str	r3, [sp, #0]
 801231e:	2343      	movs	r3, #67	; 0x43
 8012320:	6979      	ldr	r1, [r7, #20]
 8012322:	f7fe fe51 	bl	8010fc8 <udp_sendto_if>
 8012326:	4603      	mov	r3, r0
 8012328:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801232a:	6978      	ldr	r0, [r7, #20]
 801232c:	f7f8 ff46 	bl	800b1bc <pbuf_free>
 8012330:	e001      	b.n	8012336 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012332:	23ff      	movs	r3, #255	; 0xff
 8012334:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	799b      	ldrb	r3, [r3, #6]
 801233a:	2bff      	cmp	r3, #255	; 0xff
 801233c:	d005      	beq.n	801234a <dhcp_renew+0xe2>
    dhcp->tries++;
 801233e:	69bb      	ldr	r3, [r7, #24]
 8012340:	799b      	ldrb	r3, [r3, #6]
 8012342:	3301      	adds	r3, #1
 8012344:	b2da      	uxtb	r2, r3
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	799b      	ldrb	r3, [r3, #6]
 801234e:	2b09      	cmp	r3, #9
 8012350:	d80a      	bhi.n	8012368 <dhcp_renew+0x100>
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	799b      	ldrb	r3, [r3, #6]
 8012356:	b29b      	uxth	r3, r3
 8012358:	461a      	mov	r2, r3
 801235a:	0152      	lsls	r2, r2, #5
 801235c:	1ad2      	subs	r2, r2, r3
 801235e:	0092      	lsls	r2, r2, #2
 8012360:	4413      	add	r3, r2
 8012362:	011b      	lsls	r3, r3, #4
 8012364:	b29b      	uxth	r3, r3
 8012366:	e001      	b.n	801236c <dhcp_renew+0x104>
 8012368:	f644 6320 	movw	r3, #20000	; 0x4e20
 801236c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801236e:	89fb      	ldrh	r3, [r7, #14]
 8012370:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012374:	4a09      	ldr	r2, [pc, #36]	; (801239c <dhcp_renew+0x134>)
 8012376:	fb82 1203 	smull	r1, r2, r2, r3
 801237a:	1152      	asrs	r2, r2, #5
 801237c:	17db      	asrs	r3, r3, #31
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	b29a      	uxth	r2, r3
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012386:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801238a:	4618      	mov	r0, r3
 801238c:	3720      	adds	r7, #32
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	20000060 	.word	0x20000060
 8012398:	2000b0b0 	.word	0x2000b0b0
 801239c:	10624dd3 	.word	0x10624dd3

080123a0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b08a      	sub	sp, #40	; 0x28
 80123a4:	af02      	add	r7, sp, #8
 80123a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ac:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80123ae:	2104      	movs	r1, #4
 80123b0:	69b8      	ldr	r0, [r7, #24]
 80123b2:	f000 f9e1 	bl	8012778 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80123b6:	f107 030c 	add.w	r3, r7, #12
 80123ba:	2203      	movs	r2, #3
 80123bc:	69b9      	ldr	r1, [r7, #24]
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 fe66 	bl	8013090 <dhcp_create_msg>
 80123c4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d04c      	beq.n	8012466 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80123d2:	89b8      	ldrh	r0, [r7, #12]
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123da:	2302      	movs	r3, #2
 80123dc:	2239      	movs	r2, #57	; 0x39
 80123de:	f000 f9e5 	bl	80127ac <dhcp_option>
 80123e2:	4603      	mov	r3, r0
 80123e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80123e6:	89b8      	ldrh	r0, [r7, #12]
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123f2:	461a      	mov	r2, r3
 80123f4:	f000 fa34 	bl	8012860 <dhcp_option_short>
 80123f8:	4603      	mov	r3, r0
 80123fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80123fc:	89b8      	ldrh	r0, [r7, #12]
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012404:	2303      	movs	r3, #3
 8012406:	2237      	movs	r2, #55	; 0x37
 8012408:	f000 f9d0 	bl	80127ac <dhcp_option>
 801240c:	4603      	mov	r3, r0
 801240e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012410:	2300      	movs	r3, #0
 8012412:	77bb      	strb	r3, [r7, #30]
 8012414:	e00e      	b.n	8012434 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012416:	89b8      	ldrh	r0, [r7, #12]
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801241e:	7fbb      	ldrb	r3, [r7, #30]
 8012420:	4a29      	ldr	r2, [pc, #164]	; (80124c8 <dhcp_rebind+0x128>)
 8012422:	5cd3      	ldrb	r3, [r2, r3]
 8012424:	461a      	mov	r2, r3
 8012426:	f000 f9f5 	bl	8012814 <dhcp_option_byte>
 801242a:	4603      	mov	r3, r0
 801242c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801242e:	7fbb      	ldrb	r3, [r7, #30]
 8012430:	3301      	adds	r3, #1
 8012432:	77bb      	strb	r3, [r7, #30]
 8012434:	7fbb      	ldrb	r3, [r7, #30]
 8012436:	2b02      	cmp	r3, #2
 8012438:	d9ed      	bls.n	8012416 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801243a:	89b8      	ldrh	r0, [r7, #12]
 801243c:	693b      	ldr	r3, [r7, #16]
 801243e:	33f0      	adds	r3, #240	; 0xf0
 8012440:	697a      	ldr	r2, [r7, #20]
 8012442:	4619      	mov	r1, r3
 8012444:	f000 fefa 	bl	801323c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012448:	4b20      	ldr	r3, [pc, #128]	; (80124cc <dhcp_rebind+0x12c>)
 801244a:	6818      	ldr	r0, [r3, #0]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	9300      	str	r3, [sp, #0]
 8012450:	2343      	movs	r3, #67	; 0x43
 8012452:	4a1f      	ldr	r2, [pc, #124]	; (80124d0 <dhcp_rebind+0x130>)
 8012454:	6979      	ldr	r1, [r7, #20]
 8012456:	f7fe fdb7 	bl	8010fc8 <udp_sendto_if>
 801245a:	4603      	mov	r3, r0
 801245c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801245e:	6978      	ldr	r0, [r7, #20]
 8012460:	f7f8 feac 	bl	800b1bc <pbuf_free>
 8012464:	e001      	b.n	801246a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012466:	23ff      	movs	r3, #255	; 0xff
 8012468:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	799b      	ldrb	r3, [r3, #6]
 801246e:	2bff      	cmp	r3, #255	; 0xff
 8012470:	d005      	beq.n	801247e <dhcp_rebind+0xde>
    dhcp->tries++;
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	799b      	ldrb	r3, [r3, #6]
 8012476:	3301      	adds	r3, #1
 8012478:	b2da      	uxtb	r2, r3
 801247a:	69bb      	ldr	r3, [r7, #24]
 801247c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	799b      	ldrb	r3, [r3, #6]
 8012482:	2b09      	cmp	r3, #9
 8012484:	d80a      	bhi.n	801249c <dhcp_rebind+0xfc>
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	799b      	ldrb	r3, [r3, #6]
 801248a:	b29b      	uxth	r3, r3
 801248c:	461a      	mov	r2, r3
 801248e:	0152      	lsls	r2, r2, #5
 8012490:	1ad2      	subs	r2, r2, r3
 8012492:	0092      	lsls	r2, r2, #2
 8012494:	4413      	add	r3, r2
 8012496:	00db      	lsls	r3, r3, #3
 8012498:	b29b      	uxth	r3, r3
 801249a:	e001      	b.n	80124a0 <dhcp_rebind+0x100>
 801249c:	f242 7310 	movw	r3, #10000	; 0x2710
 80124a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80124a2:	89fb      	ldrh	r3, [r7, #14]
 80124a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80124a8:	4a0a      	ldr	r2, [pc, #40]	; (80124d4 <dhcp_rebind+0x134>)
 80124aa:	fb82 1203 	smull	r1, r2, r2, r3
 80124ae:	1152      	asrs	r2, r2, #5
 80124b0:	17db      	asrs	r3, r3, #31
 80124b2:	1ad3      	subs	r3, r2, r3
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	69bb      	ldr	r3, [r7, #24]
 80124b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80124ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3720      	adds	r7, #32
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	20000060 	.word	0x20000060
 80124cc:	2000b0b0 	.word	0x2000b0b0
 80124d0:	0801c50c 	.word	0x0801c50c
 80124d4:	10624dd3 	.word	0x10624dd3

080124d8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80124d8:	b5b0      	push	{r4, r5, r7, lr}
 80124da:	b08a      	sub	sp, #40	; 0x28
 80124dc:	af02      	add	r7, sp, #8
 80124de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80124e6:	2103      	movs	r1, #3
 80124e8:	69b8      	ldr	r0, [r7, #24]
 80124ea:	f000 f945 	bl	8012778 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80124ee:	f107 030c 	add.w	r3, r7, #12
 80124f2:	2203      	movs	r2, #3
 80124f4:	69b9      	ldr	r1, [r7, #24]
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 fdca 	bl	8013090 <dhcp_create_msg>
 80124fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d066      	beq.n	80125d2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801250a:	89b8      	ldrh	r0, [r7, #12]
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012512:	2302      	movs	r3, #2
 8012514:	2239      	movs	r2, #57	; 0x39
 8012516:	f000 f949 	bl	80127ac <dhcp_option>
 801251a:	4603      	mov	r3, r0
 801251c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801251e:	89b8      	ldrh	r0, [r7, #12]
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	33f0      	adds	r3, #240	; 0xf0
 8012524:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012528:	4619      	mov	r1, r3
 801252a:	f000 f999 	bl	8012860 <dhcp_option_short>
 801252e:	4603      	mov	r3, r0
 8012530:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012532:	89b8      	ldrh	r0, [r7, #12]
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801253a:	2304      	movs	r3, #4
 801253c:	2232      	movs	r2, #50	; 0x32
 801253e:	f000 f935 	bl	80127ac <dhcp_option>
 8012542:	4603      	mov	r3, r0
 8012544:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012546:	89bc      	ldrh	r4, [r7, #12]
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	69db      	ldr	r3, [r3, #28]
 8012552:	4618      	mov	r0, r3
 8012554:	f7f7 fadd 	bl	8009b12 <lwip_htonl>
 8012558:	4603      	mov	r3, r0
 801255a:	461a      	mov	r2, r3
 801255c:	4629      	mov	r1, r5
 801255e:	4620      	mov	r0, r4
 8012560:	f000 f9b0 	bl	80128c4 <dhcp_option_long>
 8012564:	4603      	mov	r3, r0
 8012566:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012568:	89b8      	ldrh	r0, [r7, #12]
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012570:	2303      	movs	r3, #3
 8012572:	2237      	movs	r2, #55	; 0x37
 8012574:	f000 f91a 	bl	80127ac <dhcp_option>
 8012578:	4603      	mov	r3, r0
 801257a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801257c:	2300      	movs	r3, #0
 801257e:	77bb      	strb	r3, [r7, #30]
 8012580:	e00e      	b.n	80125a0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012582:	89b8      	ldrh	r0, [r7, #12]
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801258a:	7fbb      	ldrb	r3, [r7, #30]
 801258c:	4a29      	ldr	r2, [pc, #164]	; (8012634 <dhcp_reboot+0x15c>)
 801258e:	5cd3      	ldrb	r3, [r2, r3]
 8012590:	461a      	mov	r2, r3
 8012592:	f000 f93f 	bl	8012814 <dhcp_option_byte>
 8012596:	4603      	mov	r3, r0
 8012598:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801259a:	7fbb      	ldrb	r3, [r7, #30]
 801259c:	3301      	adds	r3, #1
 801259e:	77bb      	strb	r3, [r7, #30]
 80125a0:	7fbb      	ldrb	r3, [r7, #30]
 80125a2:	2b02      	cmp	r3, #2
 80125a4:	d9ed      	bls.n	8012582 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80125a6:	89b8      	ldrh	r0, [r7, #12]
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	33f0      	adds	r3, #240	; 0xf0
 80125ac:	697a      	ldr	r2, [r7, #20]
 80125ae:	4619      	mov	r1, r3
 80125b0:	f000 fe44 	bl	801323c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80125b4:	4b20      	ldr	r3, [pc, #128]	; (8012638 <dhcp_reboot+0x160>)
 80125b6:	6818      	ldr	r0, [r3, #0]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	9300      	str	r3, [sp, #0]
 80125bc:	2343      	movs	r3, #67	; 0x43
 80125be:	4a1f      	ldr	r2, [pc, #124]	; (801263c <dhcp_reboot+0x164>)
 80125c0:	6979      	ldr	r1, [r7, #20]
 80125c2:	f7fe fd01 	bl	8010fc8 <udp_sendto_if>
 80125c6:	4603      	mov	r3, r0
 80125c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80125ca:	6978      	ldr	r0, [r7, #20]
 80125cc:	f7f8 fdf6 	bl	800b1bc <pbuf_free>
 80125d0:	e001      	b.n	80125d6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80125d2:	23ff      	movs	r3, #255	; 0xff
 80125d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80125d6:	69bb      	ldr	r3, [r7, #24]
 80125d8:	799b      	ldrb	r3, [r3, #6]
 80125da:	2bff      	cmp	r3, #255	; 0xff
 80125dc:	d005      	beq.n	80125ea <dhcp_reboot+0x112>
    dhcp->tries++;
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	799b      	ldrb	r3, [r3, #6]
 80125e2:	3301      	adds	r3, #1
 80125e4:	b2da      	uxtb	r2, r3
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	799b      	ldrb	r3, [r3, #6]
 80125ee:	2b09      	cmp	r3, #9
 80125f0:	d80a      	bhi.n	8012608 <dhcp_reboot+0x130>
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	799b      	ldrb	r3, [r3, #6]
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	461a      	mov	r2, r3
 80125fa:	0152      	lsls	r2, r2, #5
 80125fc:	1ad2      	subs	r2, r2, r3
 80125fe:	0092      	lsls	r2, r2, #2
 8012600:	4413      	add	r3, r2
 8012602:	00db      	lsls	r3, r3, #3
 8012604:	b29b      	uxth	r3, r3
 8012606:	e001      	b.n	801260c <dhcp_reboot+0x134>
 8012608:	f242 7310 	movw	r3, #10000	; 0x2710
 801260c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801260e:	89fb      	ldrh	r3, [r7, #14]
 8012610:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012614:	4a0a      	ldr	r2, [pc, #40]	; (8012640 <dhcp_reboot+0x168>)
 8012616:	fb82 1203 	smull	r1, r2, r2, r3
 801261a:	1152      	asrs	r2, r2, #5
 801261c:	17db      	asrs	r3, r3, #31
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	b29a      	uxth	r2, r3
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012626:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3720      	adds	r7, #32
 801262e:	46bd      	mov	sp, r7
 8012630:	bdb0      	pop	{r4, r5, r7, pc}
 8012632:	bf00      	nop
 8012634:	20000060 	.word	0x20000060
 8012638:	2000b0b0 	.word	0x2000b0b0
 801263c:	0801c50c 	.word	0x0801c50c
 8012640:	10624dd3 	.word	0x10624dd3

08012644 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012644:	b5b0      	push	{r4, r5, r7, lr}
 8012646:	b08a      	sub	sp, #40	; 0x28
 8012648:	af02      	add	r7, sp, #8
 801264a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012650:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	2b00      	cmp	r3, #0
 8012656:	f000 8084 	beq.w	8012762 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	795b      	ldrb	r3, [r3, #5]
 801265e:	2b00      	cmp	r3, #0
 8012660:	f000 8081 	beq.w	8012766 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	699b      	ldr	r3, [r3, #24]
 8012668:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	2200      	movs	r2, #0
 801266e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	2200      	movs	r2, #0
 8012674:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	2200      	movs	r2, #0
 801267a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	2200      	movs	r2, #0
 8012680:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	2200      	movs	r2, #0
 8012686:	631a      	str	r2, [r3, #48]	; 0x30
 8012688:	69fb      	ldr	r3, [r7, #28]
 801268a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	62da      	str	r2, [r3, #44]	; 0x2c
 8012690:	69fb      	ldr	r3, [r7, #28]
 8012692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	2200      	movs	r2, #0
 801269c:	829a      	strh	r2, [r3, #20]
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	8a9a      	ldrh	r2, [r3, #20]
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	825a      	strh	r2, [r3, #18]
 80126a6:	69fb      	ldr	r3, [r7, #28]
 80126a8:	8a5a      	ldrh	r2, [r3, #18]
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	821a      	strh	r2, [r3, #16]
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	8a1a      	ldrh	r2, [r3, #16]
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 fdee 	bl	8013298 <dhcp_supplied_address>
 80126bc:	4603      	mov	r3, r0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d03b      	beq.n	801273a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80126c2:	f107 030e 	add.w	r3, r7, #14
 80126c6:	2207      	movs	r2, #7
 80126c8:	69f9      	ldr	r1, [r7, #28]
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f000 fce0 	bl	8013090 <dhcp_create_msg>
 80126d0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d030      	beq.n	801273a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	685b      	ldr	r3, [r3, #4]
 80126dc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80126de:	89f8      	ldrh	r0, [r7, #14]
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126e6:	2304      	movs	r3, #4
 80126e8:	2236      	movs	r2, #54	; 0x36
 80126ea:	f000 f85f 	bl	80127ac <dhcp_option>
 80126ee:	4603      	mov	r3, r0
 80126f0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80126f2:	89fc      	ldrh	r4, [r7, #14]
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7f7 fa08 	bl	8009b12 <lwip_htonl>
 8012702:	4603      	mov	r3, r0
 8012704:	461a      	mov	r2, r3
 8012706:	4629      	mov	r1, r5
 8012708:	4620      	mov	r0, r4
 801270a:	f000 f8db 	bl	80128c4 <dhcp_option_long>
 801270e:	4603      	mov	r3, r0
 8012710:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012712:	89f8      	ldrh	r0, [r7, #14]
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	33f0      	adds	r3, #240	; 0xf0
 8012718:	69ba      	ldr	r2, [r7, #24]
 801271a:	4619      	mov	r1, r3
 801271c:	f000 fd8e 	bl	801323c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012720:	4b13      	ldr	r3, [pc, #76]	; (8012770 <dhcp_release_and_stop+0x12c>)
 8012722:	6818      	ldr	r0, [r3, #0]
 8012724:	f107 0210 	add.w	r2, r7, #16
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	9300      	str	r3, [sp, #0]
 801272c:	2343      	movs	r3, #67	; 0x43
 801272e:	69b9      	ldr	r1, [r7, #24]
 8012730:	f7fe fc4a 	bl	8010fc8 <udp_sendto_if>
      pbuf_free(p_out);
 8012734:	69b8      	ldr	r0, [r7, #24]
 8012736:	f7f8 fd41 	bl	800b1bc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801273a:	4b0e      	ldr	r3, [pc, #56]	; (8012774 <dhcp_release_and_stop+0x130>)
 801273c:	4a0d      	ldr	r2, [pc, #52]	; (8012774 <dhcp_release_and_stop+0x130>)
 801273e:	490d      	ldr	r1, [pc, #52]	; (8012774 <dhcp_release_and_stop+0x130>)
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7f8 f85b 	bl	800a7fc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012746:	2100      	movs	r1, #0
 8012748:	69f8      	ldr	r0, [r7, #28]
 801274a:	f000 f815 	bl	8012778 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	791b      	ldrb	r3, [r3, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d008      	beq.n	8012768 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012756:	f7fe ff83 	bl	8011660 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	2200      	movs	r2, #0
 801275e:	711a      	strb	r2, [r3, #4]
 8012760:	e002      	b.n	8012768 <dhcp_release_and_stop+0x124>
    return;
 8012762:	bf00      	nop
 8012764:	e000      	b.n	8012768 <dhcp_release_and_stop+0x124>
    return;
 8012766:	bf00      	nop
  }
}
 8012768:	3720      	adds	r7, #32
 801276a:	46bd      	mov	sp, r7
 801276c:	bdb0      	pop	{r4, r5, r7, pc}
 801276e:	bf00      	nop
 8012770:	2000b0b0 	.word	0x2000b0b0
 8012774:	0801c508 	.word	0x0801c508

08012778 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	460b      	mov	r3, r1
 8012782:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	795b      	ldrb	r3, [r3, #5]
 8012788:	78fa      	ldrb	r2, [r7, #3]
 801278a:	429a      	cmp	r2, r3
 801278c:	d008      	beq.n	80127a0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	78fa      	ldrb	r2, [r7, #3]
 8012792:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2200      	movs	r2, #0
 8012798:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2200      	movs	r2, #0
 801279e:	811a      	strh	r2, [r3, #8]
  }
}
 80127a0:	bf00      	nop
 80127a2:	370c      	adds	r7, #12
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr

080127ac <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6039      	str	r1, [r7, #0]
 80127b4:	4611      	mov	r1, r2
 80127b6:	461a      	mov	r2, r3
 80127b8:	4603      	mov	r3, r0
 80127ba:	80fb      	strh	r3, [r7, #6]
 80127bc:	460b      	mov	r3, r1
 80127be:	717b      	strb	r3, [r7, #5]
 80127c0:	4613      	mov	r3, r2
 80127c2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80127c4:	88fa      	ldrh	r2, [r7, #6]
 80127c6:	793b      	ldrb	r3, [r7, #4]
 80127c8:	4413      	add	r3, r2
 80127ca:	3302      	adds	r3, #2
 80127cc:	2b44      	cmp	r3, #68	; 0x44
 80127ce:	d906      	bls.n	80127de <dhcp_option+0x32>
 80127d0:	4b0d      	ldr	r3, [pc, #52]	; (8012808 <dhcp_option+0x5c>)
 80127d2:	f240 529a 	movw	r2, #1434	; 0x59a
 80127d6:	490d      	ldr	r1, [pc, #52]	; (801280c <dhcp_option+0x60>)
 80127d8:	480d      	ldr	r0, [pc, #52]	; (8012810 <dhcp_option+0x64>)
 80127da:	f003 f8cf 	bl	801597c <iprintf>
  options[options_out_len++] = option_type;
 80127de:	88fb      	ldrh	r3, [r7, #6]
 80127e0:	1c5a      	adds	r2, r3, #1
 80127e2:	80fa      	strh	r2, [r7, #6]
 80127e4:	461a      	mov	r2, r3
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	4413      	add	r3, r2
 80127ea:	797a      	ldrb	r2, [r7, #5]
 80127ec:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80127ee:	88fb      	ldrh	r3, [r7, #6]
 80127f0:	1c5a      	adds	r2, r3, #1
 80127f2:	80fa      	strh	r2, [r7, #6]
 80127f4:	461a      	mov	r2, r3
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	4413      	add	r3, r2
 80127fa:	793a      	ldrb	r2, [r7, #4]
 80127fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80127fe:	88fb      	ldrh	r3, [r7, #6]
}
 8012800:	4618      	mov	r0, r3
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	080192c0 	.word	0x080192c0
 801280c:	08019454 	.word	0x08019454
 8012810:	08019320 	.word	0x08019320

08012814 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	4603      	mov	r3, r0
 801281c:	6039      	str	r1, [r7, #0]
 801281e:	80fb      	strh	r3, [r7, #6]
 8012820:	4613      	mov	r3, r2
 8012822:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012824:	88fb      	ldrh	r3, [r7, #6]
 8012826:	2b43      	cmp	r3, #67	; 0x43
 8012828:	d906      	bls.n	8012838 <dhcp_option_byte+0x24>
 801282a:	4b0a      	ldr	r3, [pc, #40]	; (8012854 <dhcp_option_byte+0x40>)
 801282c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8012830:	4909      	ldr	r1, [pc, #36]	; (8012858 <dhcp_option_byte+0x44>)
 8012832:	480a      	ldr	r0, [pc, #40]	; (801285c <dhcp_option_byte+0x48>)
 8012834:	f003 f8a2 	bl	801597c <iprintf>
  options[options_out_len++] = value;
 8012838:	88fb      	ldrh	r3, [r7, #6]
 801283a:	1c5a      	adds	r2, r3, #1
 801283c:	80fa      	strh	r2, [r7, #6]
 801283e:	461a      	mov	r2, r3
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	4413      	add	r3, r2
 8012844:	797a      	ldrb	r2, [r7, #5]
 8012846:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012848:	88fb      	ldrh	r3, [r7, #6]
}
 801284a:	4618      	mov	r0, r3
 801284c:	3708      	adds	r7, #8
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	bf00      	nop
 8012854:	080192c0 	.word	0x080192c0
 8012858:	08019498 	.word	0x08019498
 801285c:	08019320 	.word	0x08019320

08012860 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	4603      	mov	r3, r0
 8012868:	6039      	str	r1, [r7, #0]
 801286a:	80fb      	strh	r3, [r7, #6]
 801286c:	4613      	mov	r3, r2
 801286e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012870:	88fb      	ldrh	r3, [r7, #6]
 8012872:	3302      	adds	r3, #2
 8012874:	2b44      	cmp	r3, #68	; 0x44
 8012876:	d906      	bls.n	8012886 <dhcp_option_short+0x26>
 8012878:	4b0f      	ldr	r3, [pc, #60]	; (80128b8 <dhcp_option_short+0x58>)
 801287a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801287e:	490f      	ldr	r1, [pc, #60]	; (80128bc <dhcp_option_short+0x5c>)
 8012880:	480f      	ldr	r0, [pc, #60]	; (80128c0 <dhcp_option_short+0x60>)
 8012882:	f003 f87b 	bl	801597c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012886:	88bb      	ldrh	r3, [r7, #4]
 8012888:	0a1b      	lsrs	r3, r3, #8
 801288a:	b29a      	uxth	r2, r3
 801288c:	88fb      	ldrh	r3, [r7, #6]
 801288e:	1c59      	adds	r1, r3, #1
 8012890:	80f9      	strh	r1, [r7, #6]
 8012892:	4619      	mov	r1, r3
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	440b      	add	r3, r1
 8012898:	b2d2      	uxtb	r2, r2
 801289a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801289c:	88fb      	ldrh	r3, [r7, #6]
 801289e:	1c5a      	adds	r2, r3, #1
 80128a0:	80fa      	strh	r2, [r7, #6]
 80128a2:	461a      	mov	r2, r3
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	4413      	add	r3, r2
 80128a8:	88ba      	ldrh	r2, [r7, #4]
 80128aa:	b2d2      	uxtb	r2, r2
 80128ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80128ae:	88fb      	ldrh	r3, [r7, #6]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	080192c0 	.word	0x080192c0
 80128bc:	080194d0 	.word	0x080194d0
 80128c0:	08019320 	.word	0x08019320

080128c4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	4603      	mov	r3, r0
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80128d2:	89fb      	ldrh	r3, [r7, #14]
 80128d4:	3304      	adds	r3, #4
 80128d6:	2b44      	cmp	r3, #68	; 0x44
 80128d8:	d906      	bls.n	80128e8 <dhcp_option_long+0x24>
 80128da:	4b19      	ldr	r3, [pc, #100]	; (8012940 <dhcp_option_long+0x7c>)
 80128dc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80128e0:	4918      	ldr	r1, [pc, #96]	; (8012944 <dhcp_option_long+0x80>)
 80128e2:	4819      	ldr	r0, [pc, #100]	; (8012948 <dhcp_option_long+0x84>)
 80128e4:	f003 f84a 	bl	801597c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	0e1a      	lsrs	r2, r3, #24
 80128ec:	89fb      	ldrh	r3, [r7, #14]
 80128ee:	1c59      	adds	r1, r3, #1
 80128f0:	81f9      	strh	r1, [r7, #14]
 80128f2:	4619      	mov	r1, r3
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	440b      	add	r3, r1
 80128f8:	b2d2      	uxtb	r2, r2
 80128fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	0c1a      	lsrs	r2, r3, #16
 8012900:	89fb      	ldrh	r3, [r7, #14]
 8012902:	1c59      	adds	r1, r3, #1
 8012904:	81f9      	strh	r1, [r7, #14]
 8012906:	4619      	mov	r1, r3
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	440b      	add	r3, r1
 801290c:	b2d2      	uxtb	r2, r2
 801290e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	0a1a      	lsrs	r2, r3, #8
 8012914:	89fb      	ldrh	r3, [r7, #14]
 8012916:	1c59      	adds	r1, r3, #1
 8012918:	81f9      	strh	r1, [r7, #14]
 801291a:	4619      	mov	r1, r3
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	440b      	add	r3, r1
 8012920:	b2d2      	uxtb	r2, r2
 8012922:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8012924:	89fb      	ldrh	r3, [r7, #14]
 8012926:	1c5a      	adds	r2, r3, #1
 8012928:	81fa      	strh	r2, [r7, #14]
 801292a:	461a      	mov	r2, r3
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	4413      	add	r3, r2
 8012930:	687a      	ldr	r2, [r7, #4]
 8012932:	b2d2      	uxtb	r2, r2
 8012934:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012936:	89fb      	ldrh	r3, [r7, #14]
}
 8012938:	4618      	mov	r0, r3
 801293a:	3710      	adds	r7, #16
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}
 8012940:	080192c0 	.word	0x080192c0
 8012944:	0801950c 	.word	0x0801950c
 8012948:	08019320 	.word	0x08019320

0801294c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b090      	sub	sp, #64	; 0x40
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8012956:	2300      	movs	r3, #0
 8012958:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801295a:	2300      	movs	r3, #0
 801295c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801295e:	2208      	movs	r2, #8
 8012960:	2100      	movs	r1, #0
 8012962:	48b5      	ldr	r0, [pc, #724]	; (8012c38 <dhcp_parse_reply+0x2ec>)
 8012964:	f003 f802 	bl	801596c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	895b      	ldrh	r3, [r3, #10]
 801296c:	2b2b      	cmp	r3, #43	; 0x2b
 801296e:	d802      	bhi.n	8012976 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8012970:	f06f 0301 	mvn.w	r3, #1
 8012974:	e2a7      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801297c:	23f0      	movs	r3, #240	; 0xf0
 801297e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	891b      	ldrh	r3, [r3, #8]
 8012984:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801298a:	e00c      	b.n	80129a6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298e:	895b      	ldrh	r3, [r3, #10]
 8012990:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8012996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012998:	895b      	ldrh	r3, [r3, #10]
 801299a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801299c:	1ad3      	subs	r3, r2, r3
 801299e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80129a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80129a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d004      	beq.n	80129b6 <dhcp_parse_reply+0x6a>
 80129ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ae:	895b      	ldrh	r3, [r3, #10]
 80129b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d2ea      	bcs.n	801298c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80129b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d102      	bne.n	80129c2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80129bc:	f06f 0301 	mvn.w	r3, #1
 80129c0:	e281      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80129c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80129c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80129c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80129c8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80129ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80129d0:	e239      	b.n	8012e46 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80129d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129d6:	4413      	add	r3, r2
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80129dc:	2300      	movs	r3, #0
 80129de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80129e2:	f04f 33ff 	mov.w	r3, #4294967295
 80129e6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80129e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129ea:	3302      	adds	r3, #2
 80129ec:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80129ee:	8bfa      	ldrh	r2, [r7, #30]
 80129f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d202      	bcs.n	80129fc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80129f6:	f06f 0301 	mvn.w	r3, #1
 80129fa:	e264      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80129fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129fe:	3301      	adds	r3, #1
 8012a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a02:	8952      	ldrh	r2, [r2, #10]
 8012a04:	4293      	cmp	r3, r2
 8012a06:	da07      	bge.n	8012a18 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8012a08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a0e:	4413      	add	r3, r2
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a16:	e00b      	b.n	8012a30 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8012a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d004      	beq.n	8012a2a <dhcp_parse_reply+0xde>
 8012a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	e000      	b.n	8012a2c <dhcp_parse_reply+0xe0>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8012a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8012a38:	7dfb      	ldrb	r3, [r7, #23]
 8012a3a:	2b3b      	cmp	r3, #59	; 0x3b
 8012a3c:	f200 812c 	bhi.w	8012c98 <dhcp_parse_reply+0x34c>
 8012a40:	a201      	add	r2, pc, #4	; (adr r2, 8012a48 <dhcp_parse_reply+0xfc>)
 8012a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a46:	bf00      	nop
 8012a48:	08012b39 	.word	0x08012b39
 8012a4c:	08012b49 	.word	0x08012b49
 8012a50:	08012c99 	.word	0x08012c99
 8012a54:	08012b6b 	.word	0x08012b6b
 8012a58:	08012c99 	.word	0x08012c99
 8012a5c:	08012c99 	.word	0x08012c99
 8012a60:	08012c99 	.word	0x08012c99
 8012a64:	08012c99 	.word	0x08012c99
 8012a68:	08012c99 	.word	0x08012c99
 8012a6c:	08012c99 	.word	0x08012c99
 8012a70:	08012c99 	.word	0x08012c99
 8012a74:	08012c99 	.word	0x08012c99
 8012a78:	08012c99 	.word	0x08012c99
 8012a7c:	08012c99 	.word	0x08012c99
 8012a80:	08012c99 	.word	0x08012c99
 8012a84:	08012c99 	.word	0x08012c99
 8012a88:	08012c99 	.word	0x08012c99
 8012a8c:	08012c99 	.word	0x08012c99
 8012a90:	08012c99 	.word	0x08012c99
 8012a94:	08012c99 	.word	0x08012c99
 8012a98:	08012c99 	.word	0x08012c99
 8012a9c:	08012c99 	.word	0x08012c99
 8012aa0:	08012c99 	.word	0x08012c99
 8012aa4:	08012c99 	.word	0x08012c99
 8012aa8:	08012c99 	.word	0x08012c99
 8012aac:	08012c99 	.word	0x08012c99
 8012ab0:	08012c99 	.word	0x08012c99
 8012ab4:	08012c99 	.word	0x08012c99
 8012ab8:	08012c99 	.word	0x08012c99
 8012abc:	08012c99 	.word	0x08012c99
 8012ac0:	08012c99 	.word	0x08012c99
 8012ac4:	08012c99 	.word	0x08012c99
 8012ac8:	08012c99 	.word	0x08012c99
 8012acc:	08012c99 	.word	0x08012c99
 8012ad0:	08012c99 	.word	0x08012c99
 8012ad4:	08012c99 	.word	0x08012c99
 8012ad8:	08012c99 	.word	0x08012c99
 8012adc:	08012c99 	.word	0x08012c99
 8012ae0:	08012c99 	.word	0x08012c99
 8012ae4:	08012c99 	.word	0x08012c99
 8012ae8:	08012c99 	.word	0x08012c99
 8012aec:	08012c99 	.word	0x08012c99
 8012af0:	08012c99 	.word	0x08012c99
 8012af4:	08012c99 	.word	0x08012c99
 8012af8:	08012c99 	.word	0x08012c99
 8012afc:	08012c99 	.word	0x08012c99
 8012b00:	08012c99 	.word	0x08012c99
 8012b04:	08012c99 	.word	0x08012c99
 8012b08:	08012c99 	.word	0x08012c99
 8012b0c:	08012c99 	.word	0x08012c99
 8012b10:	08012c99 	.word	0x08012c99
 8012b14:	08012b97 	.word	0x08012b97
 8012b18:	08012bb9 	.word	0x08012bb9
 8012b1c:	08012bf5 	.word	0x08012bf5
 8012b20:	08012c17 	.word	0x08012c17
 8012b24:	08012c99 	.word	0x08012c99
 8012b28:	08012c99 	.word	0x08012c99
 8012b2c:	08012c99 	.word	0x08012c99
 8012b30:	08012c55 	.word	0x08012c55
 8012b34:	08012c77 	.word	0x08012c77
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8012b46:	e0ab      	b.n	8012ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b4c:	2b04      	cmp	r3, #4
 8012b4e:	d009      	beq.n	8012b64 <dhcp_parse_reply+0x218>
 8012b50:	4b3a      	ldr	r3, [pc, #232]	; (8012c3c <dhcp_parse_reply+0x2f0>)
 8012b52:	f240 622e 	movw	r2, #1582	; 0x62e
 8012b56:	493a      	ldr	r1, [pc, #232]	; (8012c40 <dhcp_parse_reply+0x2f4>)
 8012b58:	483a      	ldr	r0, [pc, #232]	; (8012c44 <dhcp_parse_reply+0x2f8>)
 8012b5a:	f002 ff0f 	bl	801597c <iprintf>
 8012b5e:	f06f 0305 	mvn.w	r3, #5
 8012b62:	e1b0      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012b64:	2306      	movs	r3, #6
 8012b66:	623b      	str	r3, [r7, #32]
        break;
 8012b68:	e09a      	b.n	8012ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8012b6a:	2304      	movs	r3, #4
 8012b6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012b70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012b74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d209      	bcs.n	8012b90 <dhcp_parse_reply+0x244>
 8012b7c:	4b2f      	ldr	r3, [pc, #188]	; (8012c3c <dhcp_parse_reply+0x2f0>)
 8012b7e:	f240 6233 	movw	r2, #1587	; 0x633
 8012b82:	4931      	ldr	r1, [pc, #196]	; (8012c48 <dhcp_parse_reply+0x2fc>)
 8012b84:	482f      	ldr	r0, [pc, #188]	; (8012c44 <dhcp_parse_reply+0x2f8>)
 8012b86:	f002 fef9 	bl	801597c <iprintf>
 8012b8a:	f06f 0305 	mvn.w	r3, #5
 8012b8e:	e19a      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012b90:	2307      	movs	r3, #7
 8012b92:	623b      	str	r3, [r7, #32]
        break;
 8012b94:	e084      	b.n	8012ca0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b9a:	2b04      	cmp	r3, #4
 8012b9c:	d009      	beq.n	8012bb2 <dhcp_parse_reply+0x266>
 8012b9e:	4b27      	ldr	r3, [pc, #156]	; (8012c3c <dhcp_parse_reply+0x2f0>)
 8012ba0:	f240 6241 	movw	r2, #1601	; 0x641
 8012ba4:	4926      	ldr	r1, [pc, #152]	; (8012c40 <dhcp_parse_reply+0x2f4>)
 8012ba6:	4827      	ldr	r0, [pc, #156]	; (8012c44 <dhcp_parse_reply+0x2f8>)
 8012ba8:	f002 fee8 	bl	801597c <iprintf>
 8012bac:	f06f 0305 	mvn.w	r3, #5
 8012bb0:	e189      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8012bb2:	2303      	movs	r3, #3
 8012bb4:	623b      	str	r3, [r7, #32]
        break;
 8012bb6:	e073      	b.n	8012ca0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d009      	beq.n	8012bd4 <dhcp_parse_reply+0x288>
 8012bc0:	4b1e      	ldr	r3, [pc, #120]	; (8012c3c <dhcp_parse_reply+0x2f0>)
 8012bc2:	f240 624f 	movw	r2, #1615	; 0x64f
 8012bc6:	4921      	ldr	r1, [pc, #132]	; (8012c4c <dhcp_parse_reply+0x300>)
 8012bc8:	481e      	ldr	r0, [pc, #120]	; (8012c44 <dhcp_parse_reply+0x2f8>)
 8012bca:	f002 fed7 	bl	801597c <iprintf>
 8012bce:	f06f 0305 	mvn.w	r3, #5
 8012bd2:	e178      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012bd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012bd6:	2bf0      	cmp	r3, #240	; 0xf0
 8012bd8:	d009      	beq.n	8012bee <dhcp_parse_reply+0x2a2>
 8012bda:	4b18      	ldr	r3, [pc, #96]	; (8012c3c <dhcp_parse_reply+0x2f0>)
 8012bdc:	f240 6251 	movw	r2, #1617	; 0x651
 8012be0:	491b      	ldr	r1, [pc, #108]	; (8012c50 <dhcp_parse_reply+0x304>)
 8012be2:	4818      	ldr	r0, [pc, #96]	; (8012c44 <dhcp_parse_reply+0x2f8>)
 8012be4:	f002 feca 	bl	801597c <iprintf>
 8012be8:	f06f 0305 	mvn.w	r3, #5
 8012bec:	e16b      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	623b      	str	r3, [r7, #32]
        break;
 8012bf2:	e055      	b.n	8012ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d009      	beq.n	8012c10 <dhcp_parse_reply+0x2c4>
 8012bfc:	4b0f      	ldr	r3, [pc, #60]	; (8012c3c <dhcp_parse_reply+0x2f0>)
 8012bfe:	f240 6255 	movw	r2, #1621	; 0x655
 8012c02:	4912      	ldr	r1, [pc, #72]	; (8012c4c <dhcp_parse_reply+0x300>)
 8012c04:	480f      	ldr	r0, [pc, #60]	; (8012c44 <dhcp_parse_reply+0x2f8>)
 8012c06:	f002 feb9 	bl	801597c <iprintf>
 8012c0a:	f06f 0305 	mvn.w	r3, #5
 8012c0e:	e15a      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012c10:	2301      	movs	r3, #1
 8012c12:	623b      	str	r3, [r7, #32]
        break;
 8012c14:	e044      	b.n	8012ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c1a:	2b04      	cmp	r3, #4
 8012c1c:	d009      	beq.n	8012c32 <dhcp_parse_reply+0x2e6>
 8012c1e:	4b07      	ldr	r3, [pc, #28]	; (8012c3c <dhcp_parse_reply+0x2f0>)
 8012c20:	f240 6259 	movw	r2, #1625	; 0x659
 8012c24:	4906      	ldr	r1, [pc, #24]	; (8012c40 <dhcp_parse_reply+0x2f4>)
 8012c26:	4807      	ldr	r0, [pc, #28]	; (8012c44 <dhcp_parse_reply+0x2f8>)
 8012c28:	f002 fea8 	bl	801597c <iprintf>
 8012c2c:	f06f 0305 	mvn.w	r3, #5
 8012c30:	e149      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8012c32:	2302      	movs	r3, #2
 8012c34:	623b      	str	r3, [r7, #32]
        break;
 8012c36:	e033      	b.n	8012ca0 <dhcp_parse_reply+0x354>
 8012c38:	2000b0a8 	.word	0x2000b0a8
 8012c3c:	080192c0 	.word	0x080192c0
 8012c40:	08019548 	.word	0x08019548
 8012c44:	08019320 	.word	0x08019320
 8012c48:	08019554 	.word	0x08019554
 8012c4c:	08019568 	.word	0x08019568
 8012c50:	08019574 	.word	0x08019574
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c58:	2b04      	cmp	r3, #4
 8012c5a:	d009      	beq.n	8012c70 <dhcp_parse_reply+0x324>
 8012c5c:	4b9c      	ldr	r3, [pc, #624]	; (8012ed0 <dhcp_parse_reply+0x584>)
 8012c5e:	f240 625d 	movw	r2, #1629	; 0x65d
 8012c62:	499c      	ldr	r1, [pc, #624]	; (8012ed4 <dhcp_parse_reply+0x588>)
 8012c64:	489c      	ldr	r0, [pc, #624]	; (8012ed8 <dhcp_parse_reply+0x58c>)
 8012c66:	f002 fe89 	bl	801597c <iprintf>
 8012c6a:	f06f 0305 	mvn.w	r3, #5
 8012c6e:	e12a      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8012c70:	2304      	movs	r3, #4
 8012c72:	623b      	str	r3, [r7, #32]
        break;
 8012c74:	e014      	b.n	8012ca0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c7a:	2b04      	cmp	r3, #4
 8012c7c:	d009      	beq.n	8012c92 <dhcp_parse_reply+0x346>
 8012c7e:	4b94      	ldr	r3, [pc, #592]	; (8012ed0 <dhcp_parse_reply+0x584>)
 8012c80:	f240 6261 	movw	r2, #1633	; 0x661
 8012c84:	4993      	ldr	r1, [pc, #588]	; (8012ed4 <dhcp_parse_reply+0x588>)
 8012c86:	4894      	ldr	r0, [pc, #592]	; (8012ed8 <dhcp_parse_reply+0x58c>)
 8012c88:	f002 fe78 	bl	801597c <iprintf>
 8012c8c:	f06f 0305 	mvn.w	r3, #5
 8012c90:	e119      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8012c92:	2305      	movs	r3, #5
 8012c94:	623b      	str	r3, [r7, #32]
        break;
 8012c96:	e003      	b.n	8012ca0 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8012c9e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8012ca0:	7dfb      	ldrb	r3, [r7, #23]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d103      	bne.n	8012cae <dhcp_parse_reply+0x362>
      offset++;
 8012ca6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ca8:	3301      	adds	r3, #1
 8012caa:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012cac:	e0a1      	b.n	8012df2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012cae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cb4:	4413      	add	r3, r2
 8012cb6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	dd02      	ble.n	8012cc4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8012cbe:	f06f 0301 	mvn.w	r3, #1
 8012cc2:	e100      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8012cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cc8:	b29a      	uxth	r2, r3
 8012cca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ccc:	4413      	add	r3, r2
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	3302      	adds	r3, #2
 8012cd2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	f000 808a 	beq.w	8012df2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012ce2:	6a3b      	ldr	r3, [r7, #32]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	db02      	blt.n	8012cee <dhcp_parse_reply+0x3a2>
 8012ce8:	6a3b      	ldr	r3, [r7, #32]
 8012cea:	2b07      	cmp	r3, #7
 8012cec:	dd06      	ble.n	8012cfc <dhcp_parse_reply+0x3b0>
 8012cee:	4b78      	ldr	r3, [pc, #480]	; (8012ed0 <dhcp_parse_reply+0x584>)
 8012cf0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012cf4:	4979      	ldr	r1, [pc, #484]	; (8012edc <dhcp_parse_reply+0x590>)
 8012cf6:	4878      	ldr	r0, [pc, #480]	; (8012ed8 <dhcp_parse_reply+0x58c>)
 8012cf8:	f002 fe40 	bl	801597c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012cfc:	4a78      	ldr	r2, [pc, #480]	; (8012ee0 <dhcp_parse_reply+0x594>)
 8012cfe:	6a3b      	ldr	r3, [r7, #32]
 8012d00:	4413      	add	r3, r2
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d174      	bne.n	8012df2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8012d08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d0c:	2b04      	cmp	r3, #4
 8012d0e:	bf28      	it	cs
 8012d10:	2304      	movcs	r3, #4
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8012d16:	8bfb      	ldrh	r3, [r7, #30]
 8012d18:	8aba      	ldrh	r2, [r7, #20]
 8012d1a:	f107 0108 	add.w	r1, r7, #8
 8012d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d20:	f7f8 fc46 	bl	800b5b0 <pbuf_copy_partial>
 8012d24:	4603      	mov	r3, r0
 8012d26:	461a      	mov	r2, r3
 8012d28:	8abb      	ldrh	r3, [r7, #20]
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d002      	beq.n	8012d34 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8012d2e:	f06f 0301 	mvn.w	r3, #1
 8012d32:	e0c8      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8012d34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d38:	2b04      	cmp	r3, #4
 8012d3a:	d933      	bls.n	8012da4 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d40:	f003 0303 	and.w	r3, r3, #3
 8012d44:	b2db      	uxtb	r3, r3
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d009      	beq.n	8012d5e <dhcp_parse_reply+0x412>
 8012d4a:	4b61      	ldr	r3, [pc, #388]	; (8012ed0 <dhcp_parse_reply+0x584>)
 8012d4c:	f240 6281 	movw	r2, #1665	; 0x681
 8012d50:	4964      	ldr	r1, [pc, #400]	; (8012ee4 <dhcp_parse_reply+0x598>)
 8012d52:	4861      	ldr	r0, [pc, #388]	; (8012ed8 <dhcp_parse_reply+0x58c>)
 8012d54:	f002 fe12 	bl	801597c <iprintf>
 8012d58:	f06f 0305 	mvn.w	r3, #5
 8012d5c:	e0b3      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8012d5e:	4a60      	ldr	r2, [pc, #384]	; (8012ee0 <dhcp_parse_reply+0x594>)
 8012d60:	6a3b      	ldr	r3, [r7, #32]
 8012d62:	4413      	add	r3, r2
 8012d64:	2201      	movs	r2, #1
 8012d66:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7f6 fed1 	bl	8009b12 <lwip_htonl>
 8012d70:	4602      	mov	r2, r0
 8012d72:	495d      	ldr	r1, [pc, #372]	; (8012ee8 <dhcp_parse_reply+0x59c>)
 8012d74:	6a3b      	ldr	r3, [r7, #32]
 8012d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d7e:	3b04      	subs	r3, #4
 8012d80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8012d84:	8bfb      	ldrh	r3, [r7, #30]
 8012d86:	3304      	adds	r3, #4
 8012d88:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012d8a:	8a7a      	ldrh	r2, [r7, #18]
 8012d8c:	8bfb      	ldrh	r3, [r7, #30]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d202      	bcs.n	8012d98 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8012d92:	f06f 0301 	mvn.w	r3, #1
 8012d96:	e096      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8012d98:	8a7b      	ldrh	r3, [r7, #18]
 8012d9a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8012d9c:	6a3b      	ldr	r3, [r7, #32]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012da2:	e79e      	b.n	8012ce2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8012da4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012da8:	2b04      	cmp	r3, #4
 8012daa:	d106      	bne.n	8012dba <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7f6 feaf 	bl	8009b12 <lwip_htonl>
 8012db4:	4603      	mov	r3, r0
 8012db6:	60bb      	str	r3, [r7, #8]
 8012db8:	e011      	b.n	8012dde <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012dba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d009      	beq.n	8012dd6 <dhcp_parse_reply+0x48a>
 8012dc2:	4b43      	ldr	r3, [pc, #268]	; (8012ed0 <dhcp_parse_reply+0x584>)
 8012dc4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012dc8:	4948      	ldr	r1, [pc, #288]	; (8012eec <dhcp_parse_reply+0x5a0>)
 8012dca:	4843      	ldr	r0, [pc, #268]	; (8012ed8 <dhcp_parse_reply+0x58c>)
 8012dcc:	f002 fdd6 	bl	801597c <iprintf>
 8012dd0:	f06f 0305 	mvn.w	r3, #5
 8012dd4:	e077      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8012dd6:	f107 0308 	add.w	r3, r7, #8
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012dde:	4a40      	ldr	r2, [pc, #256]	; (8012ee0 <dhcp_parse_reply+0x594>)
 8012de0:	6a3b      	ldr	r3, [r7, #32]
 8012de2:	4413      	add	r3, r2
 8012de4:	2201      	movs	r2, #1
 8012de6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012de8:	68ba      	ldr	r2, [r7, #8]
 8012dea:	493f      	ldr	r1, [pc, #252]	; (8012ee8 <dhcp_parse_reply+0x59c>)
 8012dec:	6a3b      	ldr	r3, [r7, #32]
 8012dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df4:	895b      	ldrh	r3, [r3, #10]
 8012df6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d324      	bcc.n	8012e46 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8012dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfe:	895b      	ldrh	r3, [r3, #10]
 8012e00:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e02:	1ad3      	subs	r3, r2, r3
 8012e04:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e08:	895b      	ldrh	r3, [r3, #10]
 8012e0a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012e0c:	1ad3      	subs	r3, r2, r3
 8012e0e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8012e10:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d213      	bcs.n	8012e40 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8012e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d109      	bne.n	8012e38 <dhcp_parse_reply+0x4ec>
 8012e24:	4b2a      	ldr	r3, [pc, #168]	; (8012ed0 <dhcp_parse_reply+0x584>)
 8012e26:	f240 629d 	movw	r2, #1693	; 0x69d
 8012e2a:	4931      	ldr	r1, [pc, #196]	; (8012ef0 <dhcp_parse_reply+0x5a4>)
 8012e2c:	482a      	ldr	r0, [pc, #168]	; (8012ed8 <dhcp_parse_reply+0x58c>)
 8012e2e:	f002 fda5 	bl	801597c <iprintf>
 8012e32:	f06f 0305 	mvn.w	r3, #5
 8012e36:	e046      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8012e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012e3e:	e002      	b.n	8012e46 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012e40:	f06f 0301 	mvn.w	r3, #1
 8012e44:	e03f      	b.n	8012ec6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d00a      	beq.n	8012e62 <dhcp_parse_reply+0x516>
 8012e4c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d206      	bcs.n	8012e62 <dhcp_parse_reply+0x516>
 8012e54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e58:	4413      	add	r3, r2
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	2bff      	cmp	r3, #255	; 0xff
 8012e5e:	f47f adb8 	bne.w	80129d2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012e62:	4b1f      	ldr	r3, [pc, #124]	; (8012ee0 <dhcp_parse_reply+0x594>)
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d018      	beq.n	8012e9c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012e6a:	4b1f      	ldr	r3, [pc, #124]	; (8012ee8 <dhcp_parse_reply+0x59c>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012e70:	4b1b      	ldr	r3, [pc, #108]	; (8012ee0 <dhcp_parse_reply+0x594>)
 8012e72:	2200      	movs	r2, #0
 8012e74:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2b01      	cmp	r3, #1
 8012e7a:	d102      	bne.n	8012e82 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e80:	e00c      	b.n	8012e9c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	2b02      	cmp	r3, #2
 8012e86:	d102      	bne.n	8012e8e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8012e88:	2301      	movs	r3, #1
 8012e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e8c:	e006      	b.n	8012e9c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2b03      	cmp	r3, #3
 8012e92:	d103      	bne.n	8012e9c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8012e94:	2301      	movs	r3, #1
 8012e96:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8012e98:	2301      	movs	r3, #1
 8012e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8012e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d006      	beq.n	8012eb0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012ea6:	236c      	movs	r3, #108	; 0x6c
 8012ea8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012eaa:	23ec      	movs	r3, #236	; 0xec
 8012eac:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012eae:	e56a      	b.n	8012986 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8012eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d006      	beq.n	8012ec4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8012eba:	232c      	movs	r3, #44	; 0x2c
 8012ebc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012ebe:	236c      	movs	r3, #108	; 0x6c
 8012ec0:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8012ec2:	e560      	b.n	8012986 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8012ec4:	2300      	movs	r3, #0
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3740      	adds	r7, #64	; 0x40
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	080192c0 	.word	0x080192c0
 8012ed4:	08019548 	.word	0x08019548
 8012ed8:	08019320 	.word	0x08019320
 8012edc:	0801958c 	.word	0x0801958c
 8012ee0:	2000b0a8 	.word	0x2000b0a8
 8012ee4:	080195a0 	.word	0x080195a0
 8012ee8:	2000b088 	.word	0x2000b088
 8012eec:	080195b8 	.word	0x080195b8
 8012ef0:	080195cc 	.word	0x080195cc

08012ef4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b08a      	sub	sp, #40	; 0x28
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	607a      	str	r2, [r7, #4]
 8012f00:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8012f02:	4b60      	ldr	r3, [pc, #384]	; (8013084 <dhcp_recv+0x190>)
 8012f04:	685b      	ldr	r3, [r3, #4]
 8012f06:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f08:	6a3b      	ldr	r3, [r7, #32]
 8012f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f0c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	685b      	ldr	r3, [r3, #4]
 8012f12:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012f14:	69fb      	ldr	r3, [r7, #28]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	f000 809d 	beq.w	8013056 <dhcp_recv+0x162>
 8012f1c:	69fb      	ldr	r3, [r7, #28]
 8012f1e:	791b      	ldrb	r3, [r3, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	f000 8098 	beq.w	8013056 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	895b      	ldrh	r3, [r3, #10]
 8012f2a:	2b2b      	cmp	r3, #43	; 0x2b
 8012f2c:	f240 8095 	bls.w	801305a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	2b02      	cmp	r3, #2
 8012f36:	f040 8092 	bne.w	801305e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f40:	e012      	b.n	8012f68 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f46:	6a3a      	ldr	r2, [r7, #32]
 8012f48:	4413      	add	r3, r2
 8012f4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f52:	69b9      	ldr	r1, [r7, #24]
 8012f54:	440b      	add	r3, r1
 8012f56:	7f1b      	ldrb	r3, [r3, #28]
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	f040 8082 	bne.w	8013062 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f62:	3301      	adds	r3, #1
 8012f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f68:	6a3b      	ldr	r3, [r7, #32]
 8012f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d203      	bcs.n	8012f7e <dhcp_recv+0x8a>
 8012f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f7a:	2b05      	cmp	r3, #5
 8012f7c:	d9e1      	bls.n	8012f42 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7f6 fdc5 	bl	8009b12 <lwip_htonl>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	69fb      	ldr	r3, [r7, #28]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d169      	bne.n	8013066 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012f92:	69f9      	ldr	r1, [r7, #28]
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7ff fcd9 	bl	801294c <dhcp_parse_reply>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d164      	bne.n	801306a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012fa0:	4b39      	ldr	r3, [pc, #228]	; (8013088 <dhcp_recv+0x194>)
 8012fa2:	785b      	ldrb	r3, [r3, #1]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d062      	beq.n	801306e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8012fae:	4b37      	ldr	r3, [pc, #220]	; (801308c <dhcp_recv+0x198>)
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012fb4:	7cfb      	ldrb	r3, [r7, #19]
 8012fb6:	2b05      	cmp	r3, #5
 8012fb8:	d12a      	bne.n	8013010 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	795b      	ldrb	r3, [r3, #5]
 8012fbe:	2b01      	cmp	r3, #1
 8012fc0:	d112      	bne.n	8012fe8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8012fc2:	6979      	ldr	r1, [r7, #20]
 8012fc4:	6a38      	ldr	r0, [r7, #32]
 8012fc6:	f7fe fe17 	bl	8011bf8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8012fca:	6a3b      	ldr	r3, [r7, #32]
 8012fcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012fd0:	f003 0308 	and.w	r3, r3, #8
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d003      	beq.n	8012fe0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012fd8:	6a38      	ldr	r0, [r7, #32]
 8012fda:	f7fe fb85 	bl	80116e8 <dhcp_check>
 8012fde:	e049      	b.n	8013074 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012fe0:	6a38      	ldr	r0, [r7, #32]
 8012fe2:	f7ff f867 	bl	80120b4 <dhcp_bind>
 8012fe6:	e045      	b.n	8013074 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	795b      	ldrb	r3, [r3, #5]
 8012fec:	2b03      	cmp	r3, #3
 8012fee:	d007      	beq.n	8013000 <dhcp_recv+0x10c>
 8012ff0:	69fb      	ldr	r3, [r7, #28]
 8012ff2:	795b      	ldrb	r3, [r3, #5]
 8012ff4:	2b04      	cmp	r3, #4
 8012ff6:	d003      	beq.n	8013000 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012ff8:	69fb      	ldr	r3, [r7, #28]
 8012ffa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012ffc:	2b05      	cmp	r3, #5
 8012ffe:	d139      	bne.n	8013074 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8013000:	6979      	ldr	r1, [r7, #20]
 8013002:	6a38      	ldr	r0, [r7, #32]
 8013004:	f7fe fdf8 	bl	8011bf8 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013008:	6a38      	ldr	r0, [r7, #32]
 801300a:	f7ff f853 	bl	80120b4 <dhcp_bind>
 801300e:	e031      	b.n	8013074 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013010:	7cfb      	ldrb	r3, [r7, #19]
 8013012:	2b06      	cmp	r3, #6
 8013014:	d113      	bne.n	801303e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013016:	69fb      	ldr	r3, [r7, #28]
 8013018:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801301a:	2b03      	cmp	r3, #3
 801301c:	d00b      	beq.n	8013036 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	795b      	ldrb	r3, [r3, #5]
 8013022:	2b01      	cmp	r3, #1
 8013024:	d007      	beq.n	8013036 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801302a:	2b04      	cmp	r3, #4
 801302c:	d003      	beq.n	8013036 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	795b      	ldrb	r3, [r3, #5]
 8013032:	2b05      	cmp	r3, #5
 8013034:	d103      	bne.n	801303e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013036:	6a38      	ldr	r0, [r7, #32]
 8013038:	f7fe fb3c 	bl	80116b4 <dhcp_handle_nak>
 801303c:	e01a      	b.n	8013074 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801303e:	7cfb      	ldrb	r3, [r7, #19]
 8013040:	2b02      	cmp	r3, #2
 8013042:	d116      	bne.n	8013072 <dhcp_recv+0x17e>
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	795b      	ldrb	r3, [r3, #5]
 8013048:	2b06      	cmp	r3, #6
 801304a:	d112      	bne.n	8013072 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801304c:	6979      	ldr	r1, [r7, #20]
 801304e:	6a38      	ldr	r0, [r7, #32]
 8013050:	f7fe fb7e 	bl	8011750 <dhcp_handle_offer>
 8013054:	e00e      	b.n	8013074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013056:	bf00      	nop
 8013058:	e00c      	b.n	8013074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801305a:	bf00      	nop
 801305c:	e00a      	b.n	8013074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801305e:	bf00      	nop
 8013060:	e008      	b.n	8013074 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8013062:	bf00      	nop
 8013064:	e006      	b.n	8013074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013066:	bf00      	nop
 8013068:	e004      	b.n	8013074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801306a:	bf00      	nop
 801306c:	e002      	b.n	8013074 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801306e:	bf00      	nop
 8013070:	e000      	b.n	8013074 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013072:	bf00      	nop
  pbuf_free(p);
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7f8 f8a1 	bl	800b1bc <pbuf_free>
}
 801307a:	bf00      	nop
 801307c:	3728      	adds	r7, #40	; 0x28
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	200058d8 	.word	0x200058d8
 8013088:	2000b0a8 	.word	0x2000b0a8
 801308c:	2000b088 	.word	0x2000b088

08013090 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b088      	sub	sp, #32
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	603b      	str	r3, [r7, #0]
 801309c:	4613      	mov	r3, r2
 801309e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d108      	bne.n	80130b8 <dhcp_create_msg+0x28>
 80130a6:	4b5f      	ldr	r3, [pc, #380]	; (8013224 <dhcp_create_msg+0x194>)
 80130a8:	f240 7269 	movw	r2, #1897	; 0x769
 80130ac:	495e      	ldr	r1, [pc, #376]	; (8013228 <dhcp_create_msg+0x198>)
 80130ae:	485f      	ldr	r0, [pc, #380]	; (801322c <dhcp_create_msg+0x19c>)
 80130b0:	f002 fc64 	bl	801597c <iprintf>
 80130b4:	2300      	movs	r3, #0
 80130b6:	e0b1      	b.n	801321c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d108      	bne.n	80130d0 <dhcp_create_msg+0x40>
 80130be:	4b59      	ldr	r3, [pc, #356]	; (8013224 <dhcp_create_msg+0x194>)
 80130c0:	f240 726a 	movw	r2, #1898	; 0x76a
 80130c4:	495a      	ldr	r1, [pc, #360]	; (8013230 <dhcp_create_msg+0x1a0>)
 80130c6:	4859      	ldr	r0, [pc, #356]	; (801322c <dhcp_create_msg+0x19c>)
 80130c8:	f002 fc58 	bl	801597c <iprintf>
 80130cc:	2300      	movs	r3, #0
 80130ce:	e0a5      	b.n	801321c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80130d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130d4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80130d8:	2036      	movs	r0, #54	; 0x36
 80130da:	f7f7 fd8b 	bl	800abf4 <pbuf_alloc>
 80130de:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d101      	bne.n	80130ea <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80130e6:	2300      	movs	r3, #0
 80130e8:	e098      	b.n	801321c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80130ea:	69bb      	ldr	r3, [r7, #24]
 80130ec:	895b      	ldrh	r3, [r3, #10]
 80130ee:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80130f2:	d206      	bcs.n	8013102 <dhcp_create_msg+0x72>
 80130f4:	4b4b      	ldr	r3, [pc, #300]	; (8013224 <dhcp_create_msg+0x194>)
 80130f6:	f240 7271 	movw	r2, #1905	; 0x771
 80130fa:	494e      	ldr	r1, [pc, #312]	; (8013234 <dhcp_create_msg+0x1a4>)
 80130fc:	484b      	ldr	r0, [pc, #300]	; (801322c <dhcp_create_msg+0x19c>)
 80130fe:	f002 fc3d 	bl	801597c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013102:	79fb      	ldrb	r3, [r7, #7]
 8013104:	2b03      	cmp	r3, #3
 8013106:	d103      	bne.n	8013110 <dhcp_create_msg+0x80>
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	795b      	ldrb	r3, [r3, #5]
 801310c:	2b03      	cmp	r3, #3
 801310e:	d10d      	bne.n	801312c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	799b      	ldrb	r3, [r3, #6]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d105      	bne.n	8013124 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013118:	f002 fc48 	bl	80159ac <rand>
 801311c:	4603      	mov	r3, r0
 801311e:	461a      	mov	r2, r3
 8013120:	4b45      	ldr	r3, [pc, #276]	; (8013238 <dhcp_create_msg+0x1a8>)
 8013122:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013124:	4b44      	ldr	r3, [pc, #272]	; (8013238 <dhcp_create_msg+0x1a8>)
 8013126:	681a      	ldr	r2, [r3, #0]
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801312c:	69bb      	ldr	r3, [r7, #24]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013132:	f44f 729a 	mov.w	r2, #308	; 0x134
 8013136:	2100      	movs	r1, #0
 8013138:	6978      	ldr	r0, [r7, #20]
 801313a:	f002 fc17 	bl	801596c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	2201      	movs	r2, #1
 8013142:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	2201      	movs	r2, #1
 8013148:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	4618      	mov	r0, r3
 801315a:	f7f6 fcda 	bl	8009b12 <lwip_htonl>
 801315e:	4602      	mov	r2, r0
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013164:	79fb      	ldrb	r3, [r7, #7]
 8013166:	2b08      	cmp	r3, #8
 8013168:	d010      	beq.n	801318c <dhcp_create_msg+0xfc>
 801316a:	79fb      	ldrb	r3, [r7, #7]
 801316c:	2b04      	cmp	r3, #4
 801316e:	d00d      	beq.n	801318c <dhcp_create_msg+0xfc>
 8013170:	79fb      	ldrb	r3, [r7, #7]
 8013172:	2b07      	cmp	r3, #7
 8013174:	d00a      	beq.n	801318c <dhcp_create_msg+0xfc>
 8013176:	79fb      	ldrb	r3, [r7, #7]
 8013178:	2b03      	cmp	r3, #3
 801317a:	d10c      	bne.n	8013196 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013180:	2b05      	cmp	r3, #5
 8013182:	d003      	beq.n	801318c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	795b      	ldrb	r3, [r3, #5]
 8013188:	2b04      	cmp	r3, #4
 801318a:	d104      	bne.n	8013196 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	3304      	adds	r3, #4
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	697b      	ldr	r3, [r7, #20]
 8013194:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013196:	2300      	movs	r3, #0
 8013198:	83fb      	strh	r3, [r7, #30]
 801319a:	e00c      	b.n	80131b6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801319c:	8bfa      	ldrh	r2, [r7, #30]
 801319e:	8bfb      	ldrh	r3, [r7, #30]
 80131a0:	68f9      	ldr	r1, [r7, #12]
 80131a2:	440a      	add	r2, r1
 80131a4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80131a8:	697a      	ldr	r2, [r7, #20]
 80131aa:	4413      	add	r3, r2
 80131ac:	460a      	mov	r2, r1
 80131ae:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80131b0:	8bfb      	ldrh	r3, [r7, #30]
 80131b2:	3301      	adds	r3, #1
 80131b4:	83fb      	strh	r3, [r7, #30]
 80131b6:	8bfb      	ldrh	r3, [r7, #30]
 80131b8:	2b05      	cmp	r3, #5
 80131ba:	d9ef      	bls.n	801319c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80131bc:	697b      	ldr	r3, [r7, #20]
 80131be:	2200      	movs	r2, #0
 80131c0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80131c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80131c8:	2200      	movs	r2, #0
 80131ca:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80131ce:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80131d2:	2200      	movs	r2, #0
 80131d4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80131d8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80131dc:	2200      	movs	r2, #0
 80131de:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80131e2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131ec:	2301      	movs	r3, #1
 80131ee:	2235      	movs	r2, #53	; 0x35
 80131f0:	2000      	movs	r0, #0
 80131f2:	f7ff fadb 	bl	80127ac <dhcp_option>
 80131f6:	4603      	mov	r3, r0
 80131f8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013200:	79fa      	ldrb	r2, [r7, #7]
 8013202:	8a7b      	ldrh	r3, [r7, #18]
 8013204:	4618      	mov	r0, r3
 8013206:	f7ff fb05 	bl	8012814 <dhcp_option_byte>
 801320a:	4603      	mov	r3, r0
 801320c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d002      	beq.n	801321a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	8a7a      	ldrh	r2, [r7, #18]
 8013218:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801321a:	69bb      	ldr	r3, [r7, #24]
}
 801321c:	4618      	mov	r0, r3
 801321e:	3720      	adds	r7, #32
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	080192c0 	.word	0x080192c0
 8013228:	080195e0 	.word	0x080195e0
 801322c:	08019320 	.word	0x08019320
 8013230:	08019600 	.word	0x08019600
 8013234:	08019620 	.word	0x08019620
 8013238:	2000b0b8 	.word	0x2000b0b8

0801323c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	4603      	mov	r3, r0
 8013244:	60b9      	str	r1, [r7, #8]
 8013246:	607a      	str	r2, [r7, #4]
 8013248:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801324a:	89fb      	ldrh	r3, [r7, #14]
 801324c:	1c5a      	adds	r2, r3, #1
 801324e:	81fa      	strh	r2, [r7, #14]
 8013250:	461a      	mov	r2, r3
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	4413      	add	r3, r2
 8013256:	22ff      	movs	r2, #255	; 0xff
 8013258:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801325a:	e007      	b.n	801326c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801325c:	89fb      	ldrh	r3, [r7, #14]
 801325e:	1c5a      	adds	r2, r3, #1
 8013260:	81fa      	strh	r2, [r7, #14]
 8013262:	461a      	mov	r2, r3
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	4413      	add	r3, r2
 8013268:	2200      	movs	r2, #0
 801326a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801326c:	89fb      	ldrh	r3, [r7, #14]
 801326e:	2b43      	cmp	r3, #67	; 0x43
 8013270:	d904      	bls.n	801327c <dhcp_option_trailer+0x40>
 8013272:	89fb      	ldrh	r3, [r7, #14]
 8013274:	f003 0303 	and.w	r3, r3, #3
 8013278:	2b00      	cmp	r3, #0
 801327a:	d002      	beq.n	8013282 <dhcp_option_trailer+0x46>
 801327c:	89fb      	ldrh	r3, [r7, #14]
 801327e:	2b43      	cmp	r3, #67	; 0x43
 8013280:	d9ec      	bls.n	801325c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013282:	89fb      	ldrh	r3, [r7, #14]
 8013284:	33f0      	adds	r3, #240	; 0xf0
 8013286:	b29b      	uxth	r3, r3
 8013288:	4619      	mov	r1, r3
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f7f7 fe10 	bl	800aeb0 <pbuf_realloc>
}
 8013290:	bf00      	nop
 8013292:	3710      	adds	r7, #16
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}

08013298 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013298:	b480      	push	{r7}
 801329a:	b085      	sub	sp, #20
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d017      	beq.n	80132d6 <dhcp_supplied_address+0x3e>
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d013      	beq.n	80132d6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	795b      	ldrb	r3, [r3, #5]
 80132b8:	2b0a      	cmp	r3, #10
 80132ba:	d007      	beq.n	80132cc <dhcp_supplied_address+0x34>
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	795b      	ldrb	r3, [r3, #5]
 80132c0:	2b05      	cmp	r3, #5
 80132c2:	d003      	beq.n	80132cc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80132c8:	2b04      	cmp	r3, #4
 80132ca:	d101      	bne.n	80132d0 <dhcp_supplied_address+0x38>
 80132cc:	2301      	movs	r3, #1
 80132ce:	e000      	b.n	80132d2 <dhcp_supplied_address+0x3a>
 80132d0:	2300      	movs	r3, #0
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	e000      	b.n	80132d8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80132d6:	2300      	movs	r3, #0
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3714      	adds	r7, #20
 80132dc:	46bd      	mov	sp, r7
 80132de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e2:	4770      	bx	lr

080132e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80132ec:	4915      	ldr	r1, [pc, #84]	; (8013344 <etharp_free_entry+0x60>)
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	4613      	mov	r3, r2
 80132f2:	005b      	lsls	r3, r3, #1
 80132f4:	4413      	add	r3, r2
 80132f6:	00db      	lsls	r3, r3, #3
 80132f8:	440b      	add	r3, r1
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d013      	beq.n	8013328 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013300:	4910      	ldr	r1, [pc, #64]	; (8013344 <etharp_free_entry+0x60>)
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	4613      	mov	r3, r2
 8013306:	005b      	lsls	r3, r3, #1
 8013308:	4413      	add	r3, r2
 801330a:	00db      	lsls	r3, r3, #3
 801330c:	440b      	add	r3, r1
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4618      	mov	r0, r3
 8013312:	f7f7 ff53 	bl	800b1bc <pbuf_free>
    arp_table[i].q = NULL;
 8013316:	490b      	ldr	r1, [pc, #44]	; (8013344 <etharp_free_entry+0x60>)
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	4613      	mov	r3, r2
 801331c:	005b      	lsls	r3, r3, #1
 801331e:	4413      	add	r3, r2
 8013320:	00db      	lsls	r3, r3, #3
 8013322:	440b      	add	r3, r1
 8013324:	2200      	movs	r2, #0
 8013326:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013328:	4906      	ldr	r1, [pc, #24]	; (8013344 <etharp_free_entry+0x60>)
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	4613      	mov	r3, r2
 801332e:	005b      	lsls	r3, r3, #1
 8013330:	4413      	add	r3, r2
 8013332:	00db      	lsls	r3, r3, #3
 8013334:	440b      	add	r3, r1
 8013336:	3314      	adds	r3, #20
 8013338:	2200      	movs	r2, #0
 801333a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801333c:	bf00      	nop
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	2000b0bc 	.word	0x2000b0bc

08013348 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801334e:	2300      	movs	r3, #0
 8013350:	607b      	str	r3, [r7, #4]
 8013352:	e096      	b.n	8013482 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013354:	494f      	ldr	r1, [pc, #316]	; (8013494 <etharp_tmr+0x14c>)
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	4613      	mov	r3, r2
 801335a:	005b      	lsls	r3, r3, #1
 801335c:	4413      	add	r3, r2
 801335e:	00db      	lsls	r3, r3, #3
 8013360:	440b      	add	r3, r1
 8013362:	3314      	adds	r3, #20
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013368:	78fb      	ldrb	r3, [r7, #3]
 801336a:	2b00      	cmp	r3, #0
 801336c:	f000 8086 	beq.w	801347c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013370:	4948      	ldr	r1, [pc, #288]	; (8013494 <etharp_tmr+0x14c>)
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	4613      	mov	r3, r2
 8013376:	005b      	lsls	r3, r3, #1
 8013378:	4413      	add	r3, r2
 801337a:	00db      	lsls	r3, r3, #3
 801337c:	440b      	add	r3, r1
 801337e:	3312      	adds	r3, #18
 8013380:	881b      	ldrh	r3, [r3, #0]
 8013382:	3301      	adds	r3, #1
 8013384:	b298      	uxth	r0, r3
 8013386:	4943      	ldr	r1, [pc, #268]	; (8013494 <etharp_tmr+0x14c>)
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	4613      	mov	r3, r2
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	4413      	add	r3, r2
 8013390:	00db      	lsls	r3, r3, #3
 8013392:	440b      	add	r3, r1
 8013394:	3312      	adds	r3, #18
 8013396:	4602      	mov	r2, r0
 8013398:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801339a:	493e      	ldr	r1, [pc, #248]	; (8013494 <etharp_tmr+0x14c>)
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	4613      	mov	r3, r2
 80133a0:	005b      	lsls	r3, r3, #1
 80133a2:	4413      	add	r3, r2
 80133a4:	00db      	lsls	r3, r3, #3
 80133a6:	440b      	add	r3, r1
 80133a8:	3312      	adds	r3, #18
 80133aa:	881b      	ldrh	r3, [r3, #0]
 80133ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80133b0:	d215      	bcs.n	80133de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80133b2:	4938      	ldr	r1, [pc, #224]	; (8013494 <etharp_tmr+0x14c>)
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	4613      	mov	r3, r2
 80133b8:	005b      	lsls	r3, r3, #1
 80133ba:	4413      	add	r3, r2
 80133bc:	00db      	lsls	r3, r3, #3
 80133be:	440b      	add	r3, r1
 80133c0:	3314      	adds	r3, #20
 80133c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d10e      	bne.n	80133e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80133c8:	4932      	ldr	r1, [pc, #200]	; (8013494 <etharp_tmr+0x14c>)
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	4613      	mov	r3, r2
 80133ce:	005b      	lsls	r3, r3, #1
 80133d0:	4413      	add	r3, r2
 80133d2:	00db      	lsls	r3, r3, #3
 80133d4:	440b      	add	r3, r1
 80133d6:	3312      	adds	r3, #18
 80133d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80133da:	2b04      	cmp	r3, #4
 80133dc:	d903      	bls.n	80133e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7ff ff80 	bl	80132e4 <etharp_free_entry>
 80133e4:	e04a      	b.n	801347c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80133e6:	492b      	ldr	r1, [pc, #172]	; (8013494 <etharp_tmr+0x14c>)
 80133e8:	687a      	ldr	r2, [r7, #4]
 80133ea:	4613      	mov	r3, r2
 80133ec:	005b      	lsls	r3, r3, #1
 80133ee:	4413      	add	r3, r2
 80133f0:	00db      	lsls	r3, r3, #3
 80133f2:	440b      	add	r3, r1
 80133f4:	3314      	adds	r3, #20
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	2b03      	cmp	r3, #3
 80133fa:	d10a      	bne.n	8013412 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80133fc:	4925      	ldr	r1, [pc, #148]	; (8013494 <etharp_tmr+0x14c>)
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	4613      	mov	r3, r2
 8013402:	005b      	lsls	r3, r3, #1
 8013404:	4413      	add	r3, r2
 8013406:	00db      	lsls	r3, r3, #3
 8013408:	440b      	add	r3, r1
 801340a:	3314      	adds	r3, #20
 801340c:	2204      	movs	r2, #4
 801340e:	701a      	strb	r2, [r3, #0]
 8013410:	e034      	b.n	801347c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013412:	4920      	ldr	r1, [pc, #128]	; (8013494 <etharp_tmr+0x14c>)
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	4613      	mov	r3, r2
 8013418:	005b      	lsls	r3, r3, #1
 801341a:	4413      	add	r3, r2
 801341c:	00db      	lsls	r3, r3, #3
 801341e:	440b      	add	r3, r1
 8013420:	3314      	adds	r3, #20
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	2b04      	cmp	r3, #4
 8013426:	d10a      	bne.n	801343e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013428:	491a      	ldr	r1, [pc, #104]	; (8013494 <etharp_tmr+0x14c>)
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	4613      	mov	r3, r2
 801342e:	005b      	lsls	r3, r3, #1
 8013430:	4413      	add	r3, r2
 8013432:	00db      	lsls	r3, r3, #3
 8013434:	440b      	add	r3, r1
 8013436:	3314      	adds	r3, #20
 8013438:	2202      	movs	r2, #2
 801343a:	701a      	strb	r2, [r3, #0]
 801343c:	e01e      	b.n	801347c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801343e:	4915      	ldr	r1, [pc, #84]	; (8013494 <etharp_tmr+0x14c>)
 8013440:	687a      	ldr	r2, [r7, #4]
 8013442:	4613      	mov	r3, r2
 8013444:	005b      	lsls	r3, r3, #1
 8013446:	4413      	add	r3, r2
 8013448:	00db      	lsls	r3, r3, #3
 801344a:	440b      	add	r3, r1
 801344c:	3314      	adds	r3, #20
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	2b01      	cmp	r3, #1
 8013452:	d113      	bne.n	801347c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013454:	490f      	ldr	r1, [pc, #60]	; (8013494 <etharp_tmr+0x14c>)
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	4613      	mov	r3, r2
 801345a:	005b      	lsls	r3, r3, #1
 801345c:	4413      	add	r3, r2
 801345e:	00db      	lsls	r3, r3, #3
 8013460:	440b      	add	r3, r1
 8013462:	3308      	adds	r3, #8
 8013464:	6818      	ldr	r0, [r3, #0]
 8013466:	687a      	ldr	r2, [r7, #4]
 8013468:	4613      	mov	r3, r2
 801346a:	005b      	lsls	r3, r3, #1
 801346c:	4413      	add	r3, r2
 801346e:	00db      	lsls	r3, r3, #3
 8013470:	4a08      	ldr	r2, [pc, #32]	; (8013494 <etharp_tmr+0x14c>)
 8013472:	4413      	add	r3, r2
 8013474:	3304      	adds	r3, #4
 8013476:	4619      	mov	r1, r3
 8013478:	f000 fe72 	bl	8014160 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	3301      	adds	r3, #1
 8013480:	607b      	str	r3, [r7, #4]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2b09      	cmp	r3, #9
 8013486:	f77f af65 	ble.w	8013354 <etharp_tmr+0xc>
      }
    }
  }
}
 801348a:	bf00      	nop
 801348c:	bf00      	nop
 801348e:	3708      	adds	r7, #8
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	2000b0bc 	.word	0x2000b0bc

08013498 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b08a      	sub	sp, #40	; 0x28
 801349c:	af00      	add	r7, sp, #0
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	460b      	mov	r3, r1
 80134a2:	607a      	str	r2, [r7, #4]
 80134a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80134a6:	230a      	movs	r3, #10
 80134a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80134aa:	230a      	movs	r3, #10
 80134ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80134ae:	230a      	movs	r3, #10
 80134b0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80134b2:	2300      	movs	r3, #0
 80134b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80134b6:	230a      	movs	r3, #10
 80134b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	83bb      	strh	r3, [r7, #28]
 80134be:	2300      	movs	r3, #0
 80134c0:	837b      	strh	r3, [r7, #26]
 80134c2:	2300      	movs	r3, #0
 80134c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80134c6:	2300      	movs	r3, #0
 80134c8:	843b      	strh	r3, [r7, #32]
 80134ca:	e0ae      	b.n	801362a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80134cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134d0:	49a6      	ldr	r1, [pc, #664]	; (801376c <etharp_find_entry+0x2d4>)
 80134d2:	4613      	mov	r3, r2
 80134d4:	005b      	lsls	r3, r3, #1
 80134d6:	4413      	add	r3, r2
 80134d8:	00db      	lsls	r3, r3, #3
 80134da:	440b      	add	r3, r1
 80134dc:	3314      	adds	r3, #20
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80134e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80134e6:	2b0a      	cmp	r3, #10
 80134e8:	d105      	bne.n	80134f6 <etharp_find_entry+0x5e>
 80134ea:	7dfb      	ldrb	r3, [r7, #23]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d102      	bne.n	80134f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80134f0:	8c3b      	ldrh	r3, [r7, #32]
 80134f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80134f4:	e095      	b.n	8013622 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80134f6:	7dfb      	ldrb	r3, [r7, #23]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 8092 	beq.w	8013622 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80134fe:	7dfb      	ldrb	r3, [r7, #23]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d009      	beq.n	8013518 <etharp_find_entry+0x80>
 8013504:	7dfb      	ldrb	r3, [r7, #23]
 8013506:	2b01      	cmp	r3, #1
 8013508:	d806      	bhi.n	8013518 <etharp_find_entry+0x80>
 801350a:	4b99      	ldr	r3, [pc, #612]	; (8013770 <etharp_find_entry+0x2d8>)
 801350c:	f240 1223 	movw	r2, #291	; 0x123
 8013510:	4998      	ldr	r1, [pc, #608]	; (8013774 <etharp_find_entry+0x2dc>)
 8013512:	4899      	ldr	r0, [pc, #612]	; (8013778 <etharp_find_entry+0x2e0>)
 8013514:	f002 fa32 	bl	801597c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d020      	beq.n	8013560 <etharp_find_entry+0xc8>
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	6819      	ldr	r1, [r3, #0]
 8013522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013526:	4891      	ldr	r0, [pc, #580]	; (801376c <etharp_find_entry+0x2d4>)
 8013528:	4613      	mov	r3, r2
 801352a:	005b      	lsls	r3, r3, #1
 801352c:	4413      	add	r3, r2
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	4403      	add	r3, r0
 8013532:	3304      	adds	r3, #4
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	4299      	cmp	r1, r3
 8013538:	d112      	bne.n	8013560 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d00c      	beq.n	801355a <etharp_find_entry+0xc2>
 8013540:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013544:	4989      	ldr	r1, [pc, #548]	; (801376c <etharp_find_entry+0x2d4>)
 8013546:	4613      	mov	r3, r2
 8013548:	005b      	lsls	r3, r3, #1
 801354a:	4413      	add	r3, r2
 801354c:	00db      	lsls	r3, r3, #3
 801354e:	440b      	add	r3, r1
 8013550:	3308      	adds	r3, #8
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	429a      	cmp	r2, r3
 8013558:	d102      	bne.n	8013560 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801355a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801355e:	e100      	b.n	8013762 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013560:	7dfb      	ldrb	r3, [r7, #23]
 8013562:	2b01      	cmp	r3, #1
 8013564:	d140      	bne.n	80135e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013566:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801356a:	4980      	ldr	r1, [pc, #512]	; (801376c <etharp_find_entry+0x2d4>)
 801356c:	4613      	mov	r3, r2
 801356e:	005b      	lsls	r3, r3, #1
 8013570:	4413      	add	r3, r2
 8013572:	00db      	lsls	r3, r3, #3
 8013574:	440b      	add	r3, r1
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d01a      	beq.n	80135b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801357c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013580:	497a      	ldr	r1, [pc, #488]	; (801376c <etharp_find_entry+0x2d4>)
 8013582:	4613      	mov	r3, r2
 8013584:	005b      	lsls	r3, r3, #1
 8013586:	4413      	add	r3, r2
 8013588:	00db      	lsls	r3, r3, #3
 801358a:	440b      	add	r3, r1
 801358c:	3312      	adds	r3, #18
 801358e:	881b      	ldrh	r3, [r3, #0]
 8013590:	8bba      	ldrh	r2, [r7, #28]
 8013592:	429a      	cmp	r2, r3
 8013594:	d845      	bhi.n	8013622 <etharp_find_entry+0x18a>
            old_queue = i;
 8013596:	8c3b      	ldrh	r3, [r7, #32]
 8013598:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801359a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801359e:	4973      	ldr	r1, [pc, #460]	; (801376c <etharp_find_entry+0x2d4>)
 80135a0:	4613      	mov	r3, r2
 80135a2:	005b      	lsls	r3, r3, #1
 80135a4:	4413      	add	r3, r2
 80135a6:	00db      	lsls	r3, r3, #3
 80135a8:	440b      	add	r3, r1
 80135aa:	3312      	adds	r3, #18
 80135ac:	881b      	ldrh	r3, [r3, #0]
 80135ae:	83bb      	strh	r3, [r7, #28]
 80135b0:	e037      	b.n	8013622 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80135b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135b6:	496d      	ldr	r1, [pc, #436]	; (801376c <etharp_find_entry+0x2d4>)
 80135b8:	4613      	mov	r3, r2
 80135ba:	005b      	lsls	r3, r3, #1
 80135bc:	4413      	add	r3, r2
 80135be:	00db      	lsls	r3, r3, #3
 80135c0:	440b      	add	r3, r1
 80135c2:	3312      	adds	r3, #18
 80135c4:	881b      	ldrh	r3, [r3, #0]
 80135c6:	8b7a      	ldrh	r2, [r7, #26]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d82a      	bhi.n	8013622 <etharp_find_entry+0x18a>
            old_pending = i;
 80135cc:	8c3b      	ldrh	r3, [r7, #32]
 80135ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80135d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135d4:	4965      	ldr	r1, [pc, #404]	; (801376c <etharp_find_entry+0x2d4>)
 80135d6:	4613      	mov	r3, r2
 80135d8:	005b      	lsls	r3, r3, #1
 80135da:	4413      	add	r3, r2
 80135dc:	00db      	lsls	r3, r3, #3
 80135de:	440b      	add	r3, r1
 80135e0:	3312      	adds	r3, #18
 80135e2:	881b      	ldrh	r3, [r3, #0]
 80135e4:	837b      	strh	r3, [r7, #26]
 80135e6:	e01c      	b.n	8013622 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80135e8:	7dfb      	ldrb	r3, [r7, #23]
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d919      	bls.n	8013622 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80135ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135f2:	495e      	ldr	r1, [pc, #376]	; (801376c <etharp_find_entry+0x2d4>)
 80135f4:	4613      	mov	r3, r2
 80135f6:	005b      	lsls	r3, r3, #1
 80135f8:	4413      	add	r3, r2
 80135fa:	00db      	lsls	r3, r3, #3
 80135fc:	440b      	add	r3, r1
 80135fe:	3312      	adds	r3, #18
 8013600:	881b      	ldrh	r3, [r3, #0]
 8013602:	8b3a      	ldrh	r2, [r7, #24]
 8013604:	429a      	cmp	r2, r3
 8013606:	d80c      	bhi.n	8013622 <etharp_find_entry+0x18a>
            old_stable = i;
 8013608:	8c3b      	ldrh	r3, [r7, #32]
 801360a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801360c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013610:	4956      	ldr	r1, [pc, #344]	; (801376c <etharp_find_entry+0x2d4>)
 8013612:	4613      	mov	r3, r2
 8013614:	005b      	lsls	r3, r3, #1
 8013616:	4413      	add	r3, r2
 8013618:	00db      	lsls	r3, r3, #3
 801361a:	440b      	add	r3, r1
 801361c:	3312      	adds	r3, #18
 801361e:	881b      	ldrh	r3, [r3, #0]
 8013620:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013622:	8c3b      	ldrh	r3, [r7, #32]
 8013624:	3301      	adds	r3, #1
 8013626:	b29b      	uxth	r3, r3
 8013628:	843b      	strh	r3, [r7, #32]
 801362a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801362e:	2b09      	cmp	r3, #9
 8013630:	f77f af4c 	ble.w	80134cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013634:	7afb      	ldrb	r3, [r7, #11]
 8013636:	f003 0302 	and.w	r3, r3, #2
 801363a:	2b00      	cmp	r3, #0
 801363c:	d108      	bne.n	8013650 <etharp_find_entry+0x1b8>
 801363e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013642:	2b0a      	cmp	r3, #10
 8013644:	d107      	bne.n	8013656 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013646:	7afb      	ldrb	r3, [r7, #11]
 8013648:	f003 0301 	and.w	r3, r3, #1
 801364c:	2b00      	cmp	r3, #0
 801364e:	d102      	bne.n	8013656 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013650:	f04f 33ff 	mov.w	r3, #4294967295
 8013654:	e085      	b.n	8013762 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013656:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801365a:	2b09      	cmp	r3, #9
 801365c:	dc02      	bgt.n	8013664 <etharp_find_entry+0x1cc>
    i = empty;
 801365e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013660:	843b      	strh	r3, [r7, #32]
 8013662:	e039      	b.n	80136d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013664:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013668:	2b09      	cmp	r3, #9
 801366a:	dc14      	bgt.n	8013696 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801366c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801366e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013674:	493d      	ldr	r1, [pc, #244]	; (801376c <etharp_find_entry+0x2d4>)
 8013676:	4613      	mov	r3, r2
 8013678:	005b      	lsls	r3, r3, #1
 801367a:	4413      	add	r3, r2
 801367c:	00db      	lsls	r3, r3, #3
 801367e:	440b      	add	r3, r1
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d018      	beq.n	80136b8 <etharp_find_entry+0x220>
 8013686:	4b3a      	ldr	r3, [pc, #232]	; (8013770 <etharp_find_entry+0x2d8>)
 8013688:	f240 126d 	movw	r2, #365	; 0x16d
 801368c:	493b      	ldr	r1, [pc, #236]	; (801377c <etharp_find_entry+0x2e4>)
 801368e:	483a      	ldr	r0, [pc, #232]	; (8013778 <etharp_find_entry+0x2e0>)
 8013690:	f002 f974 	bl	801597c <iprintf>
 8013694:	e010      	b.n	80136b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013696:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801369a:	2b09      	cmp	r3, #9
 801369c:	dc02      	bgt.n	80136a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801369e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136a0:	843b      	strh	r3, [r7, #32]
 80136a2:	e009      	b.n	80136b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80136a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80136a8:	2b09      	cmp	r3, #9
 80136aa:	dc02      	bgt.n	80136b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80136ac:	8bfb      	ldrh	r3, [r7, #30]
 80136ae:	843b      	strh	r3, [r7, #32]
 80136b0:	e002      	b.n	80136b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80136b2:	f04f 33ff 	mov.w	r3, #4294967295
 80136b6:	e054      	b.n	8013762 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80136b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136bc:	2b09      	cmp	r3, #9
 80136be:	dd06      	ble.n	80136ce <etharp_find_entry+0x236>
 80136c0:	4b2b      	ldr	r3, [pc, #172]	; (8013770 <etharp_find_entry+0x2d8>)
 80136c2:	f240 127f 	movw	r2, #383	; 0x17f
 80136c6:	492e      	ldr	r1, [pc, #184]	; (8013780 <etharp_find_entry+0x2e8>)
 80136c8:	482b      	ldr	r0, [pc, #172]	; (8013778 <etharp_find_entry+0x2e0>)
 80136ca:	f002 f957 	bl	801597c <iprintf>
    etharp_free_entry(i);
 80136ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7ff fe06 	bl	80132e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80136d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80136dc:	2b09      	cmp	r3, #9
 80136de:	dd06      	ble.n	80136ee <etharp_find_entry+0x256>
 80136e0:	4b23      	ldr	r3, [pc, #140]	; (8013770 <etharp_find_entry+0x2d8>)
 80136e2:	f240 1283 	movw	r2, #387	; 0x183
 80136e6:	4926      	ldr	r1, [pc, #152]	; (8013780 <etharp_find_entry+0x2e8>)
 80136e8:	4823      	ldr	r0, [pc, #140]	; (8013778 <etharp_find_entry+0x2e0>)
 80136ea:	f002 f947 	bl	801597c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80136ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136f2:	491e      	ldr	r1, [pc, #120]	; (801376c <etharp_find_entry+0x2d4>)
 80136f4:	4613      	mov	r3, r2
 80136f6:	005b      	lsls	r3, r3, #1
 80136f8:	4413      	add	r3, r2
 80136fa:	00db      	lsls	r3, r3, #3
 80136fc:	440b      	add	r3, r1
 80136fe:	3314      	adds	r3, #20
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d006      	beq.n	8013714 <etharp_find_entry+0x27c>
 8013706:	4b1a      	ldr	r3, [pc, #104]	; (8013770 <etharp_find_entry+0x2d8>)
 8013708:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801370c:	491d      	ldr	r1, [pc, #116]	; (8013784 <etharp_find_entry+0x2ec>)
 801370e:	481a      	ldr	r0, [pc, #104]	; (8013778 <etharp_find_entry+0x2e0>)
 8013710:	f002 f934 	bl	801597c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d00b      	beq.n	8013732 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801371a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	6819      	ldr	r1, [r3, #0]
 8013722:	4812      	ldr	r0, [pc, #72]	; (801376c <etharp_find_entry+0x2d4>)
 8013724:	4613      	mov	r3, r2
 8013726:	005b      	lsls	r3, r3, #1
 8013728:	4413      	add	r3, r2
 801372a:	00db      	lsls	r3, r3, #3
 801372c:	4403      	add	r3, r0
 801372e:	3304      	adds	r3, #4
 8013730:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013732:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013736:	490d      	ldr	r1, [pc, #52]	; (801376c <etharp_find_entry+0x2d4>)
 8013738:	4613      	mov	r3, r2
 801373a:	005b      	lsls	r3, r3, #1
 801373c:	4413      	add	r3, r2
 801373e:	00db      	lsls	r3, r3, #3
 8013740:	440b      	add	r3, r1
 8013742:	3312      	adds	r3, #18
 8013744:	2200      	movs	r2, #0
 8013746:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801374c:	4907      	ldr	r1, [pc, #28]	; (801376c <etharp_find_entry+0x2d4>)
 801374e:	4613      	mov	r3, r2
 8013750:	005b      	lsls	r3, r3, #1
 8013752:	4413      	add	r3, r2
 8013754:	00db      	lsls	r3, r3, #3
 8013756:	440b      	add	r3, r1
 8013758:	3308      	adds	r3, #8
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801375e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013762:	4618      	mov	r0, r3
 8013764:	3728      	adds	r7, #40	; 0x28
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	2000b0bc 	.word	0x2000b0bc
 8013770:	08019660 	.word	0x08019660
 8013774:	08019698 	.word	0x08019698
 8013778:	080196d8 	.word	0x080196d8
 801377c:	08019700 	.word	0x08019700
 8013780:	08019718 	.word	0x08019718
 8013784:	0801972c 	.word	0x0801972c

08013788 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b088      	sub	sp, #32
 801378c:	af02      	add	r7, sp, #8
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	607a      	str	r2, [r7, #4]
 8013794:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801379c:	2b06      	cmp	r3, #6
 801379e:	d006      	beq.n	80137ae <etharp_update_arp_entry+0x26>
 80137a0:	4b48      	ldr	r3, [pc, #288]	; (80138c4 <etharp_update_arp_entry+0x13c>)
 80137a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80137a6:	4948      	ldr	r1, [pc, #288]	; (80138c8 <etharp_update_arp_entry+0x140>)
 80137a8:	4848      	ldr	r0, [pc, #288]	; (80138cc <etharp_update_arp_entry+0x144>)
 80137aa:	f002 f8e7 	bl	801597c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d012      	beq.n	80137da <etharp_update_arp_entry+0x52>
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d00e      	beq.n	80137da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	68f9      	ldr	r1, [r7, #12]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f001 f920 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 80137c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d105      	bne.n	80137da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80137d6:	2be0      	cmp	r3, #224	; 0xe0
 80137d8:	d102      	bne.n	80137e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80137da:	f06f 030f 	mvn.w	r3, #15
 80137de:	e06c      	b.n	80138ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80137e0:	78fb      	ldrb	r3, [r7, #3]
 80137e2:	68fa      	ldr	r2, [r7, #12]
 80137e4:	4619      	mov	r1, r3
 80137e6:	68b8      	ldr	r0, [r7, #8]
 80137e8:	f7ff fe56 	bl	8013498 <etharp_find_entry>
 80137ec:	4603      	mov	r3, r0
 80137ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80137f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	da02      	bge.n	80137fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80137f8:	8afb      	ldrh	r3, [r7, #22]
 80137fa:	b25b      	sxtb	r3, r3
 80137fc:	e05d      	b.n	80138ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80137fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013802:	4933      	ldr	r1, [pc, #204]	; (80138d0 <etharp_update_arp_entry+0x148>)
 8013804:	4613      	mov	r3, r2
 8013806:	005b      	lsls	r3, r3, #1
 8013808:	4413      	add	r3, r2
 801380a:	00db      	lsls	r3, r3, #3
 801380c:	440b      	add	r3, r1
 801380e:	3314      	adds	r3, #20
 8013810:	2202      	movs	r2, #2
 8013812:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013814:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013818:	492d      	ldr	r1, [pc, #180]	; (80138d0 <etharp_update_arp_entry+0x148>)
 801381a:	4613      	mov	r3, r2
 801381c:	005b      	lsls	r3, r3, #1
 801381e:	4413      	add	r3, r2
 8013820:	00db      	lsls	r3, r3, #3
 8013822:	440b      	add	r3, r1
 8013824:	3308      	adds	r3, #8
 8013826:	68fa      	ldr	r2, [r7, #12]
 8013828:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801382a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801382e:	4613      	mov	r3, r2
 8013830:	005b      	lsls	r3, r3, #1
 8013832:	4413      	add	r3, r2
 8013834:	00db      	lsls	r3, r3, #3
 8013836:	3308      	adds	r3, #8
 8013838:	4a25      	ldr	r2, [pc, #148]	; (80138d0 <etharp_update_arp_entry+0x148>)
 801383a:	4413      	add	r3, r2
 801383c:	3304      	adds	r3, #4
 801383e:	2206      	movs	r2, #6
 8013840:	6879      	ldr	r1, [r7, #4]
 8013842:	4618      	mov	r0, r3
 8013844:	f002 f86a 	bl	801591c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013848:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801384c:	4920      	ldr	r1, [pc, #128]	; (80138d0 <etharp_update_arp_entry+0x148>)
 801384e:	4613      	mov	r3, r2
 8013850:	005b      	lsls	r3, r3, #1
 8013852:	4413      	add	r3, r2
 8013854:	00db      	lsls	r3, r3, #3
 8013856:	440b      	add	r3, r1
 8013858:	3312      	adds	r3, #18
 801385a:	2200      	movs	r2, #0
 801385c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801385e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013862:	491b      	ldr	r1, [pc, #108]	; (80138d0 <etharp_update_arp_entry+0x148>)
 8013864:	4613      	mov	r3, r2
 8013866:	005b      	lsls	r3, r3, #1
 8013868:	4413      	add	r3, r2
 801386a:	00db      	lsls	r3, r3, #3
 801386c:	440b      	add	r3, r1
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d021      	beq.n	80138b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013874:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013878:	4915      	ldr	r1, [pc, #84]	; (80138d0 <etharp_update_arp_entry+0x148>)
 801387a:	4613      	mov	r3, r2
 801387c:	005b      	lsls	r3, r3, #1
 801387e:	4413      	add	r3, r2
 8013880:	00db      	lsls	r3, r3, #3
 8013882:	440b      	add	r3, r1
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013888:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801388c:	4910      	ldr	r1, [pc, #64]	; (80138d0 <etharp_update_arp_entry+0x148>)
 801388e:	4613      	mov	r3, r2
 8013890:	005b      	lsls	r3, r3, #1
 8013892:	4413      	add	r3, r2
 8013894:	00db      	lsls	r3, r3, #3
 8013896:	440b      	add	r3, r1
 8013898:	2200      	movs	r2, #0
 801389a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80138a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138a6:	9300      	str	r3, [sp, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6939      	ldr	r1, [r7, #16]
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	f001 ffb9 	bl	8015824 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80138b2:	6938      	ldr	r0, [r7, #16]
 80138b4:	f7f7 fc82 	bl	800b1bc <pbuf_free>
  }
  return ERR_OK;
 80138b8:	2300      	movs	r3, #0
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3718      	adds	r7, #24
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	08019660 	.word	0x08019660
 80138c8:	08019758 	.word	0x08019758
 80138cc:	080196d8 	.word	0x080196d8
 80138d0:	2000b0bc 	.word	0x2000b0bc

080138d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138dc:	2300      	movs	r3, #0
 80138de:	60fb      	str	r3, [r7, #12]
 80138e0:	e01e      	b.n	8013920 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80138e2:	4913      	ldr	r1, [pc, #76]	; (8013930 <etharp_cleanup_netif+0x5c>)
 80138e4:	68fa      	ldr	r2, [r7, #12]
 80138e6:	4613      	mov	r3, r2
 80138e8:	005b      	lsls	r3, r3, #1
 80138ea:	4413      	add	r3, r2
 80138ec:	00db      	lsls	r3, r3, #3
 80138ee:	440b      	add	r3, r1
 80138f0:	3314      	adds	r3, #20
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80138f6:	7afb      	ldrb	r3, [r7, #11]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d00e      	beq.n	801391a <etharp_cleanup_netif+0x46>
 80138fc:	490c      	ldr	r1, [pc, #48]	; (8013930 <etharp_cleanup_netif+0x5c>)
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	4613      	mov	r3, r2
 8013902:	005b      	lsls	r3, r3, #1
 8013904:	4413      	add	r3, r2
 8013906:	00db      	lsls	r3, r3, #3
 8013908:	440b      	add	r3, r1
 801390a:	3308      	adds	r3, #8
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	429a      	cmp	r2, r3
 8013912:	d102      	bne.n	801391a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013914:	68f8      	ldr	r0, [r7, #12]
 8013916:	f7ff fce5 	bl	80132e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	3301      	adds	r3, #1
 801391e:	60fb      	str	r3, [r7, #12]
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	2b09      	cmp	r3, #9
 8013924:	dddd      	ble.n	80138e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013926:	bf00      	nop
 8013928:	bf00      	nop
 801392a:	3710      	adds	r7, #16
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	2000b0bc 	.word	0x2000b0bc

08013934 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013934:	b5b0      	push	{r4, r5, r7, lr}
 8013936:	b08a      	sub	sp, #40	; 0x28
 8013938:	af04      	add	r7, sp, #16
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d107      	bne.n	8013954 <etharp_input+0x20>
 8013944:	4b3f      	ldr	r3, [pc, #252]	; (8013a44 <etharp_input+0x110>)
 8013946:	f240 228a 	movw	r2, #650	; 0x28a
 801394a:	493f      	ldr	r1, [pc, #252]	; (8013a48 <etharp_input+0x114>)
 801394c:	483f      	ldr	r0, [pc, #252]	; (8013a4c <etharp_input+0x118>)
 801394e:	f002 f815 	bl	801597c <iprintf>
 8013952:	e074      	b.n	8013a3e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	881b      	ldrh	r3, [r3, #0]
 801395e:	b29b      	uxth	r3, r3
 8013960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013964:	d10c      	bne.n	8013980 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801396a:	2b06      	cmp	r3, #6
 801396c:	d108      	bne.n	8013980 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013972:	2b04      	cmp	r3, #4
 8013974:	d104      	bne.n	8013980 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	885b      	ldrh	r3, [r3, #2]
 801397a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801397c:	2b08      	cmp	r3, #8
 801397e:	d003      	beq.n	8013988 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f7f7 fc1b 	bl	800b1bc <pbuf_free>
    return;
 8013986:	e05a      	b.n	8013a3e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	330e      	adds	r3, #14
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	3318      	adds	r3, #24
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	3304      	adds	r3, #4
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d102      	bne.n	80139a8 <etharp_input+0x74>
    for_us = 0;
 80139a2:	2300      	movs	r3, #0
 80139a4:	75fb      	strb	r3, [r7, #23]
 80139a6:	e009      	b.n	80139bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80139a8:	68ba      	ldr	r2, [r7, #8]
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	3304      	adds	r3, #4
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	bf0c      	ite	eq
 80139b4:	2301      	moveq	r3, #1
 80139b6:	2300      	movne	r3, #0
 80139b8:	b2db      	uxtb	r3, r3
 80139ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	f103 0208 	add.w	r2, r3, #8
 80139c2:	7dfb      	ldrb	r3, [r7, #23]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d001      	beq.n	80139cc <etharp_input+0x98>
 80139c8:	2301      	movs	r3, #1
 80139ca:	e000      	b.n	80139ce <etharp_input+0x9a>
 80139cc:	2302      	movs	r3, #2
 80139ce:	f107 010c 	add.w	r1, r7, #12
 80139d2:	6838      	ldr	r0, [r7, #0]
 80139d4:	f7ff fed8 	bl	8013788 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	88db      	ldrh	r3, [r3, #6]
 80139dc:	b29b      	uxth	r3, r3
 80139de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139e2:	d003      	beq.n	80139ec <etharp_input+0xb8>
 80139e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139e8:	d01e      	beq.n	8013a28 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80139ea:	e025      	b.n	8013a38 <etharp_input+0x104>
      if (for_us) {
 80139ec:	7dfb      	ldrb	r3, [r7, #23]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d021      	beq.n	8013a36 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013a08:	693a      	ldr	r2, [r7, #16]
 8013a0a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013a0c:	2102      	movs	r1, #2
 8013a0e:	9103      	str	r1, [sp, #12]
 8013a10:	f107 010c 	add.w	r1, r7, #12
 8013a14:	9102      	str	r1, [sp, #8]
 8013a16:	9201      	str	r2, [sp, #4]
 8013a18:	9300      	str	r3, [sp, #0]
 8013a1a:	462b      	mov	r3, r5
 8013a1c:	4622      	mov	r2, r4
 8013a1e:	4601      	mov	r1, r0
 8013a20:	6838      	ldr	r0, [r7, #0]
 8013a22:	f000 faef 	bl	8014004 <etharp_raw>
      break;
 8013a26:	e006      	b.n	8013a36 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8013a28:	f107 030c 	add.w	r3, r7, #12
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	6838      	ldr	r0, [r7, #0]
 8013a30:	f7fe f9fc 	bl	8011e2c <dhcp_arp_reply>
      break;
 8013a34:	e000      	b.n	8013a38 <etharp_input+0x104>
      break;
 8013a36:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f7f7 fbbf 	bl	800b1bc <pbuf_free>
}
 8013a3e:	3718      	adds	r7, #24
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bdb0      	pop	{r4, r5, r7, pc}
 8013a44:	08019660 	.word	0x08019660
 8013a48:	080197b0 	.word	0x080197b0
 8013a4c:	080196d8 	.word	0x080196d8

08013a50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b086      	sub	sp, #24
 8013a54:	af02      	add	r7, sp, #8
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	4613      	mov	r3, r2
 8013a5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013a5e:	79fa      	ldrb	r2, [r7, #7]
 8013a60:	4944      	ldr	r1, [pc, #272]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013a62:	4613      	mov	r3, r2
 8013a64:	005b      	lsls	r3, r3, #1
 8013a66:	4413      	add	r3, r2
 8013a68:	00db      	lsls	r3, r3, #3
 8013a6a:	440b      	add	r3, r1
 8013a6c:	3314      	adds	r3, #20
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d806      	bhi.n	8013a82 <etharp_output_to_arp_index+0x32>
 8013a74:	4b40      	ldr	r3, [pc, #256]	; (8013b78 <etharp_output_to_arp_index+0x128>)
 8013a76:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013a7a:	4940      	ldr	r1, [pc, #256]	; (8013b7c <etharp_output_to_arp_index+0x12c>)
 8013a7c:	4840      	ldr	r0, [pc, #256]	; (8013b80 <etharp_output_to_arp_index+0x130>)
 8013a7e:	f001 ff7d 	bl	801597c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013a82:	79fa      	ldrb	r2, [r7, #7]
 8013a84:	493b      	ldr	r1, [pc, #236]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013a86:	4613      	mov	r3, r2
 8013a88:	005b      	lsls	r3, r3, #1
 8013a8a:	4413      	add	r3, r2
 8013a8c:	00db      	lsls	r3, r3, #3
 8013a8e:	440b      	add	r3, r1
 8013a90:	3314      	adds	r3, #20
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	2b02      	cmp	r3, #2
 8013a96:	d153      	bne.n	8013b40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013a98:	79fa      	ldrb	r2, [r7, #7]
 8013a9a:	4936      	ldr	r1, [pc, #216]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	005b      	lsls	r3, r3, #1
 8013aa0:	4413      	add	r3, r2
 8013aa2:	00db      	lsls	r3, r3, #3
 8013aa4:	440b      	add	r3, r1
 8013aa6:	3312      	adds	r3, #18
 8013aa8:	881b      	ldrh	r3, [r3, #0]
 8013aaa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013aae:	d919      	bls.n	8013ae4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013ab0:	79fa      	ldrb	r2, [r7, #7]
 8013ab2:	4613      	mov	r3, r2
 8013ab4:	005b      	lsls	r3, r3, #1
 8013ab6:	4413      	add	r3, r2
 8013ab8:	00db      	lsls	r3, r3, #3
 8013aba:	4a2e      	ldr	r2, [pc, #184]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013abc:	4413      	add	r3, r2
 8013abe:	3304      	adds	r3, #4
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	68f8      	ldr	r0, [r7, #12]
 8013ac4:	f000 fb4c 	bl	8014160 <etharp_request>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d138      	bne.n	8013b40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013ace:	79fa      	ldrb	r2, [r7, #7]
 8013ad0:	4928      	ldr	r1, [pc, #160]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013ad2:	4613      	mov	r3, r2
 8013ad4:	005b      	lsls	r3, r3, #1
 8013ad6:	4413      	add	r3, r2
 8013ad8:	00db      	lsls	r3, r3, #3
 8013ada:	440b      	add	r3, r1
 8013adc:	3314      	adds	r3, #20
 8013ade:	2203      	movs	r2, #3
 8013ae0:	701a      	strb	r2, [r3, #0]
 8013ae2:	e02d      	b.n	8013b40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013ae4:	79fa      	ldrb	r2, [r7, #7]
 8013ae6:	4923      	ldr	r1, [pc, #140]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013ae8:	4613      	mov	r3, r2
 8013aea:	005b      	lsls	r3, r3, #1
 8013aec:	4413      	add	r3, r2
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	440b      	add	r3, r1
 8013af2:	3312      	adds	r3, #18
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013afa:	d321      	bcc.n	8013b40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013afc:	79fa      	ldrb	r2, [r7, #7]
 8013afe:	4613      	mov	r3, r2
 8013b00:	005b      	lsls	r3, r3, #1
 8013b02:	4413      	add	r3, r2
 8013b04:	00db      	lsls	r3, r3, #3
 8013b06:	4a1b      	ldr	r2, [pc, #108]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013b08:	4413      	add	r3, r2
 8013b0a:	1d19      	adds	r1, r3, #4
 8013b0c:	79fa      	ldrb	r2, [r7, #7]
 8013b0e:	4613      	mov	r3, r2
 8013b10:	005b      	lsls	r3, r3, #1
 8013b12:	4413      	add	r3, r2
 8013b14:	00db      	lsls	r3, r3, #3
 8013b16:	3308      	adds	r3, #8
 8013b18:	4a16      	ldr	r2, [pc, #88]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013b1a:	4413      	add	r3, r2
 8013b1c:	3304      	adds	r3, #4
 8013b1e:	461a      	mov	r2, r3
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f000 fafb 	bl	801411c <etharp_request_dst>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d109      	bne.n	8013b40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013b2c:	79fa      	ldrb	r2, [r7, #7]
 8013b2e:	4911      	ldr	r1, [pc, #68]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013b30:	4613      	mov	r3, r2
 8013b32:	005b      	lsls	r3, r3, #1
 8013b34:	4413      	add	r3, r2
 8013b36:	00db      	lsls	r3, r3, #3
 8013b38:	440b      	add	r3, r1
 8013b3a:	3314      	adds	r3, #20
 8013b3c:	2203      	movs	r2, #3
 8013b3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8013b46:	79fa      	ldrb	r2, [r7, #7]
 8013b48:	4613      	mov	r3, r2
 8013b4a:	005b      	lsls	r3, r3, #1
 8013b4c:	4413      	add	r3, r2
 8013b4e:	00db      	lsls	r3, r3, #3
 8013b50:	3308      	adds	r3, #8
 8013b52:	4a08      	ldr	r2, [pc, #32]	; (8013b74 <etharp_output_to_arp_index+0x124>)
 8013b54:	4413      	add	r3, r2
 8013b56:	3304      	adds	r3, #4
 8013b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013b5c:	9200      	str	r2, [sp, #0]
 8013b5e:	460a      	mov	r2, r1
 8013b60:	68b9      	ldr	r1, [r7, #8]
 8013b62:	68f8      	ldr	r0, [r7, #12]
 8013b64:	f001 fe5e 	bl	8015824 <ethernet_output>
 8013b68:	4603      	mov	r3, r0
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3710      	adds	r7, #16
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	2000b0bc 	.word	0x2000b0bc
 8013b78:	08019660 	.word	0x08019660
 8013b7c:	080197d0 	.word	0x080197d0
 8013b80:	080196d8 	.word	0x080196d8

08013b84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b08a      	sub	sp, #40	; 0x28
 8013b88:	af02      	add	r7, sp, #8
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d106      	bne.n	8013ba8 <etharp_output+0x24>
 8013b9a:	4b73      	ldr	r3, [pc, #460]	; (8013d68 <etharp_output+0x1e4>)
 8013b9c:	f240 321e 	movw	r2, #798	; 0x31e
 8013ba0:	4972      	ldr	r1, [pc, #456]	; (8013d6c <etharp_output+0x1e8>)
 8013ba2:	4873      	ldr	r0, [pc, #460]	; (8013d70 <etharp_output+0x1ec>)
 8013ba4:	f001 feea 	bl	801597c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d106      	bne.n	8013bbc <etharp_output+0x38>
 8013bae:	4b6e      	ldr	r3, [pc, #440]	; (8013d68 <etharp_output+0x1e4>)
 8013bb0:	f240 321f 	movw	r2, #799	; 0x31f
 8013bb4:	496f      	ldr	r1, [pc, #444]	; (8013d74 <etharp_output+0x1f0>)
 8013bb6:	486e      	ldr	r0, [pc, #440]	; (8013d70 <etharp_output+0x1ec>)
 8013bb8:	f001 fee0 	bl	801597c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d106      	bne.n	8013bd0 <etharp_output+0x4c>
 8013bc2:	4b69      	ldr	r3, [pc, #420]	; (8013d68 <etharp_output+0x1e4>)
 8013bc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013bc8:	496b      	ldr	r1, [pc, #428]	; (8013d78 <etharp_output+0x1f4>)
 8013bca:	4869      	ldr	r0, [pc, #420]	; (8013d70 <etharp_output+0x1ec>)
 8013bcc:	f001 fed6 	bl	801597c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	68f9      	ldr	r1, [r7, #12]
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f000 ff16 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d002      	beq.n	8013be8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013be2:	4b66      	ldr	r3, [pc, #408]	; (8013d7c <etharp_output+0x1f8>)
 8013be4:	61fb      	str	r3, [r7, #28]
 8013be6:	e0af      	b.n	8013d48 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013bf0:	2be0      	cmp	r3, #224	; 0xe0
 8013bf2:	d118      	bne.n	8013c26 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013bfc:	235e      	movs	r3, #94	; 0x5e
 8013bfe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	3301      	adds	r3, #1
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	3302      	adds	r3, #2
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	3303      	adds	r3, #3
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013c1e:	f107 0310 	add.w	r3, r7, #16
 8013c22:	61fb      	str	r3, [r7, #28]
 8013c24:	e090      	b.n	8013d48 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681a      	ldr	r2, [r3, #0]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	3304      	adds	r3, #4
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	405a      	eors	r2, r3
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	3308      	adds	r3, #8
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	4013      	ands	r3, r2
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d012      	beq.n	8013c64 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013c44:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	d00b      	beq.n	8013c64 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	330c      	adds	r3, #12
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d003      	beq.n	8013c5e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	330c      	adds	r3, #12
 8013c5a:	61bb      	str	r3, [r7, #24]
 8013c5c:	e002      	b.n	8013c64 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013c5e:	f06f 0303 	mvn.w	r3, #3
 8013c62:	e07d      	b.n	8013d60 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013c64:	4b46      	ldr	r3, [pc, #280]	; (8013d80 <etharp_output+0x1fc>)
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	4619      	mov	r1, r3
 8013c6a:	4a46      	ldr	r2, [pc, #280]	; (8013d84 <etharp_output+0x200>)
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	005b      	lsls	r3, r3, #1
 8013c70:	440b      	add	r3, r1
 8013c72:	00db      	lsls	r3, r3, #3
 8013c74:	4413      	add	r3, r2
 8013c76:	3314      	adds	r3, #20
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d925      	bls.n	8013cca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013c7e:	4b40      	ldr	r3, [pc, #256]	; (8013d80 <etharp_output+0x1fc>)
 8013c80:	781b      	ldrb	r3, [r3, #0]
 8013c82:	4619      	mov	r1, r3
 8013c84:	4a3f      	ldr	r2, [pc, #252]	; (8013d84 <etharp_output+0x200>)
 8013c86:	460b      	mov	r3, r1
 8013c88:	005b      	lsls	r3, r3, #1
 8013c8a:	440b      	add	r3, r1
 8013c8c:	00db      	lsls	r3, r3, #3
 8013c8e:	4413      	add	r3, r2
 8013c90:	3308      	adds	r3, #8
 8013c92:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013c94:	68fa      	ldr	r2, [r7, #12]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d117      	bne.n	8013cca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013c9a:	69bb      	ldr	r3, [r7, #24]
 8013c9c:	681a      	ldr	r2, [r3, #0]
 8013c9e:	4b38      	ldr	r3, [pc, #224]	; (8013d80 <etharp_output+0x1fc>)
 8013ca0:	781b      	ldrb	r3, [r3, #0]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	4937      	ldr	r1, [pc, #220]	; (8013d84 <etharp_output+0x200>)
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	005b      	lsls	r3, r3, #1
 8013caa:	4403      	add	r3, r0
 8013cac:	00db      	lsls	r3, r3, #3
 8013cae:	440b      	add	r3, r1
 8013cb0:	3304      	adds	r3, #4
 8013cb2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d108      	bne.n	8013cca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013cb8:	4b31      	ldr	r3, [pc, #196]	; (8013d80 <etharp_output+0x1fc>)
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	68b9      	ldr	r1, [r7, #8]
 8013cc0:	68f8      	ldr	r0, [r7, #12]
 8013cc2:	f7ff fec5 	bl	8013a50 <etharp_output_to_arp_index>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	e04a      	b.n	8013d60 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013cca:	2300      	movs	r3, #0
 8013ccc:	75fb      	strb	r3, [r7, #23]
 8013cce:	e031      	b.n	8013d34 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013cd0:	7dfa      	ldrb	r2, [r7, #23]
 8013cd2:	492c      	ldr	r1, [pc, #176]	; (8013d84 <etharp_output+0x200>)
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	4413      	add	r3, r2
 8013cda:	00db      	lsls	r3, r3, #3
 8013cdc:	440b      	add	r3, r1
 8013cde:	3314      	adds	r3, #20
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	2b01      	cmp	r3, #1
 8013ce4:	d923      	bls.n	8013d2e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013ce6:	7dfa      	ldrb	r2, [r7, #23]
 8013ce8:	4926      	ldr	r1, [pc, #152]	; (8013d84 <etharp_output+0x200>)
 8013cea:	4613      	mov	r3, r2
 8013cec:	005b      	lsls	r3, r3, #1
 8013cee:	4413      	add	r3, r2
 8013cf0:	00db      	lsls	r3, r3, #3
 8013cf2:	440b      	add	r3, r1
 8013cf4:	3308      	adds	r3, #8
 8013cf6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013cf8:	68fa      	ldr	r2, [r7, #12]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d117      	bne.n	8013d2e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	6819      	ldr	r1, [r3, #0]
 8013d02:	7dfa      	ldrb	r2, [r7, #23]
 8013d04:	481f      	ldr	r0, [pc, #124]	; (8013d84 <etharp_output+0x200>)
 8013d06:	4613      	mov	r3, r2
 8013d08:	005b      	lsls	r3, r3, #1
 8013d0a:	4413      	add	r3, r2
 8013d0c:	00db      	lsls	r3, r3, #3
 8013d0e:	4403      	add	r3, r0
 8013d10:	3304      	adds	r3, #4
 8013d12:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013d14:	4299      	cmp	r1, r3
 8013d16:	d10a      	bne.n	8013d2e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013d18:	4a19      	ldr	r2, [pc, #100]	; (8013d80 <etharp_output+0x1fc>)
 8013d1a:	7dfb      	ldrb	r3, [r7, #23]
 8013d1c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013d1e:	7dfb      	ldrb	r3, [r7, #23]
 8013d20:	461a      	mov	r2, r3
 8013d22:	68b9      	ldr	r1, [r7, #8]
 8013d24:	68f8      	ldr	r0, [r7, #12]
 8013d26:	f7ff fe93 	bl	8013a50 <etharp_output_to_arp_index>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	e018      	b.n	8013d60 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013d2e:	7dfb      	ldrb	r3, [r7, #23]
 8013d30:	3301      	adds	r3, #1
 8013d32:	75fb      	strb	r3, [r7, #23]
 8013d34:	7dfb      	ldrb	r3, [r7, #23]
 8013d36:	2b09      	cmp	r3, #9
 8013d38:	d9ca      	bls.n	8013cd0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013d3a:	68ba      	ldr	r2, [r7, #8]
 8013d3c:	69b9      	ldr	r1, [r7, #24]
 8013d3e:	68f8      	ldr	r0, [r7, #12]
 8013d40:	f000 f822 	bl	8013d88 <etharp_query>
 8013d44:	4603      	mov	r3, r0
 8013d46:	e00b      	b.n	8013d60 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013d4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013d52:	9300      	str	r3, [sp, #0]
 8013d54:	69fb      	ldr	r3, [r7, #28]
 8013d56:	68b9      	ldr	r1, [r7, #8]
 8013d58:	68f8      	ldr	r0, [r7, #12]
 8013d5a:	f001 fd63 	bl	8015824 <ethernet_output>
 8013d5e:	4603      	mov	r3, r0
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3720      	adds	r7, #32
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}
 8013d68:	08019660 	.word	0x08019660
 8013d6c:	080197b0 	.word	0x080197b0
 8013d70:	080196d8 	.word	0x080196d8
 8013d74:	08019800 	.word	0x08019800
 8013d78:	080197a0 	.word	0x080197a0
 8013d7c:	0801c510 	.word	0x0801c510
 8013d80:	2000b1ac 	.word	0x2000b1ac
 8013d84:	2000b0bc 	.word	0x2000b0bc

08013d88 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b08c      	sub	sp, #48	; 0x30
 8013d8c:	af02      	add	r7, sp, #8
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	332a      	adds	r3, #42	; 0x2a
 8013d98:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013d9a:	23ff      	movs	r3, #255	; 0xff
 8013d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013da0:	2300      	movs	r3, #0
 8013da2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	68f9      	ldr	r1, [r7, #12]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f000 fe2c 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d10c      	bne.n	8013dd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013dbe:	2be0      	cmp	r3, #224	; 0xe0
 8013dc0:	d006      	beq.n	8013dd0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d003      	beq.n	8013dd0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d102      	bne.n	8013dd6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013dd0:	f06f 030f 	mvn.w	r3, #15
 8013dd4:	e101      	b.n	8013fda <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013dd6:	68fa      	ldr	r2, [r7, #12]
 8013dd8:	2101      	movs	r1, #1
 8013dda:	68b8      	ldr	r0, [r7, #8]
 8013ddc:	f7ff fb5c 	bl	8013498 <etharp_find_entry>
 8013de0:	4603      	mov	r3, r0
 8013de2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013de4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	da02      	bge.n	8013df2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013dec:	8a7b      	ldrh	r3, [r7, #18]
 8013dee:	b25b      	sxtb	r3, r3
 8013df0:	e0f3      	b.n	8013fda <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013df2:	8a7b      	ldrh	r3, [r7, #18]
 8013df4:	2b7e      	cmp	r3, #126	; 0x7e
 8013df6:	d906      	bls.n	8013e06 <etharp_query+0x7e>
 8013df8:	4b7a      	ldr	r3, [pc, #488]	; (8013fe4 <etharp_query+0x25c>)
 8013dfa:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013dfe:	497a      	ldr	r1, [pc, #488]	; (8013fe8 <etharp_query+0x260>)
 8013e00:	487a      	ldr	r0, [pc, #488]	; (8013fec <etharp_query+0x264>)
 8013e02:	f001 fdbb 	bl	801597c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013e06:	8a7b      	ldrh	r3, [r7, #18]
 8013e08:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013e0a:	7c7a      	ldrb	r2, [r7, #17]
 8013e0c:	4978      	ldr	r1, [pc, #480]	; (8013ff0 <etharp_query+0x268>)
 8013e0e:	4613      	mov	r3, r2
 8013e10:	005b      	lsls	r3, r3, #1
 8013e12:	4413      	add	r3, r2
 8013e14:	00db      	lsls	r3, r3, #3
 8013e16:	440b      	add	r3, r1
 8013e18:	3314      	adds	r3, #20
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d115      	bne.n	8013e4c <etharp_query+0xc4>
    is_new_entry = 1;
 8013e20:	2301      	movs	r3, #1
 8013e22:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013e24:	7c7a      	ldrb	r2, [r7, #17]
 8013e26:	4972      	ldr	r1, [pc, #456]	; (8013ff0 <etharp_query+0x268>)
 8013e28:	4613      	mov	r3, r2
 8013e2a:	005b      	lsls	r3, r3, #1
 8013e2c:	4413      	add	r3, r2
 8013e2e:	00db      	lsls	r3, r3, #3
 8013e30:	440b      	add	r3, r1
 8013e32:	3314      	adds	r3, #20
 8013e34:	2201      	movs	r2, #1
 8013e36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013e38:	7c7a      	ldrb	r2, [r7, #17]
 8013e3a:	496d      	ldr	r1, [pc, #436]	; (8013ff0 <etharp_query+0x268>)
 8013e3c:	4613      	mov	r3, r2
 8013e3e:	005b      	lsls	r3, r3, #1
 8013e40:	4413      	add	r3, r2
 8013e42:	00db      	lsls	r3, r3, #3
 8013e44:	440b      	add	r3, r1
 8013e46:	3308      	adds	r3, #8
 8013e48:	68fa      	ldr	r2, [r7, #12]
 8013e4a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013e4c:	7c7a      	ldrb	r2, [r7, #17]
 8013e4e:	4968      	ldr	r1, [pc, #416]	; (8013ff0 <etharp_query+0x268>)
 8013e50:	4613      	mov	r3, r2
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	4413      	add	r3, r2
 8013e56:	00db      	lsls	r3, r3, #3
 8013e58:	440b      	add	r3, r1
 8013e5a:	3314      	adds	r3, #20
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	2b01      	cmp	r3, #1
 8013e60:	d011      	beq.n	8013e86 <etharp_query+0xfe>
 8013e62:	7c7a      	ldrb	r2, [r7, #17]
 8013e64:	4962      	ldr	r1, [pc, #392]	; (8013ff0 <etharp_query+0x268>)
 8013e66:	4613      	mov	r3, r2
 8013e68:	005b      	lsls	r3, r3, #1
 8013e6a:	4413      	add	r3, r2
 8013e6c:	00db      	lsls	r3, r3, #3
 8013e6e:	440b      	add	r3, r1
 8013e70:	3314      	adds	r3, #20
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	d806      	bhi.n	8013e86 <etharp_query+0xfe>
 8013e78:	4b5a      	ldr	r3, [pc, #360]	; (8013fe4 <etharp_query+0x25c>)
 8013e7a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013e7e:	495d      	ldr	r1, [pc, #372]	; (8013ff4 <etharp_query+0x26c>)
 8013e80:	485a      	ldr	r0, [pc, #360]	; (8013fec <etharp_query+0x264>)
 8013e82:	f001 fd7b 	bl	801597c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013e86:	6a3b      	ldr	r3, [r7, #32]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d102      	bne.n	8013e92 <etharp_query+0x10a>
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d10c      	bne.n	8013eac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013e92:	68b9      	ldr	r1, [r7, #8]
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	f000 f963 	bl	8014160 <etharp_request>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d102      	bne.n	8013eac <etharp_query+0x124>
      return result;
 8013ea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013eaa:	e096      	b.n	8013fda <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d106      	bne.n	8013ec0 <etharp_query+0x138>
 8013eb2:	4b4c      	ldr	r3, [pc, #304]	; (8013fe4 <etharp_query+0x25c>)
 8013eb4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013eb8:	494f      	ldr	r1, [pc, #316]	; (8013ff8 <etharp_query+0x270>)
 8013eba:	484c      	ldr	r0, [pc, #304]	; (8013fec <etharp_query+0x264>)
 8013ebc:	f001 fd5e 	bl	801597c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013ec0:	7c7a      	ldrb	r2, [r7, #17]
 8013ec2:	494b      	ldr	r1, [pc, #300]	; (8013ff0 <etharp_query+0x268>)
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	005b      	lsls	r3, r3, #1
 8013ec8:	4413      	add	r3, r2
 8013eca:	00db      	lsls	r3, r3, #3
 8013ecc:	440b      	add	r3, r1
 8013ece:	3314      	adds	r3, #20
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	2b01      	cmp	r3, #1
 8013ed4:	d917      	bls.n	8013f06 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013ed6:	4a49      	ldr	r2, [pc, #292]	; (8013ffc <etharp_query+0x274>)
 8013ed8:	7c7b      	ldrb	r3, [r7, #17]
 8013eda:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013edc:	7c7a      	ldrb	r2, [r7, #17]
 8013ede:	4613      	mov	r3, r2
 8013ee0:	005b      	lsls	r3, r3, #1
 8013ee2:	4413      	add	r3, r2
 8013ee4:	00db      	lsls	r3, r3, #3
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	4a41      	ldr	r2, [pc, #260]	; (8013ff0 <etharp_query+0x268>)
 8013eea:	4413      	add	r3, r2
 8013eec:	3304      	adds	r3, #4
 8013eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013ef2:	9200      	str	r2, [sp, #0]
 8013ef4:	697a      	ldr	r2, [r7, #20]
 8013ef6:	6879      	ldr	r1, [r7, #4]
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f001 fc93 	bl	8015824 <ethernet_output>
 8013efe:	4603      	mov	r3, r0
 8013f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f04:	e067      	b.n	8013fd6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013f06:	7c7a      	ldrb	r2, [r7, #17]
 8013f08:	4939      	ldr	r1, [pc, #228]	; (8013ff0 <etharp_query+0x268>)
 8013f0a:	4613      	mov	r3, r2
 8013f0c:	005b      	lsls	r3, r3, #1
 8013f0e:	4413      	add	r3, r2
 8013f10:	00db      	lsls	r3, r3, #3
 8013f12:	440b      	add	r3, r1
 8013f14:	3314      	adds	r3, #20
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d15c      	bne.n	8013fd6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013f24:	e01c      	b.n	8013f60 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	895a      	ldrh	r2, [r3, #10]
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	891b      	ldrh	r3, [r3, #8]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d10a      	bne.n	8013f48 <etharp_query+0x1c0>
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d006      	beq.n	8013f48 <etharp_query+0x1c0>
 8013f3a:	4b2a      	ldr	r3, [pc, #168]	; (8013fe4 <etharp_query+0x25c>)
 8013f3c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013f40:	492f      	ldr	r1, [pc, #188]	; (8014000 <etharp_query+0x278>)
 8013f42:	482a      	ldr	r0, [pc, #168]	; (8013fec <etharp_query+0x264>)
 8013f44:	f001 fd1a 	bl	801597c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013f48:	69fb      	ldr	r3, [r7, #28]
 8013f4a:	7b1b      	ldrb	r3, [r3, #12]
 8013f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d002      	beq.n	8013f5a <etharp_query+0x1d2>
        copy_needed = 1;
 8013f54:	2301      	movs	r3, #1
 8013f56:	61bb      	str	r3, [r7, #24]
        break;
 8013f58:	e005      	b.n	8013f66 <etharp_query+0x1de>
      }
      p = p->next;
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d1df      	bne.n	8013f26 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013f66:	69bb      	ldr	r3, [r7, #24]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d007      	beq.n	8013f7c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013f6c:	687a      	ldr	r2, [r7, #4]
 8013f6e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013f72:	200e      	movs	r0, #14
 8013f74:	f7f7 fb8e 	bl	800b694 <pbuf_clone>
 8013f78:	61f8      	str	r0, [r7, #28]
 8013f7a:	e004      	b.n	8013f86 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013f80:	69f8      	ldr	r0, [r7, #28]
 8013f82:	f7f7 f9bb 	bl	800b2fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013f86:	69fb      	ldr	r3, [r7, #28]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d021      	beq.n	8013fd0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013f8c:	7c7a      	ldrb	r2, [r7, #17]
 8013f8e:	4918      	ldr	r1, [pc, #96]	; (8013ff0 <etharp_query+0x268>)
 8013f90:	4613      	mov	r3, r2
 8013f92:	005b      	lsls	r3, r3, #1
 8013f94:	4413      	add	r3, r2
 8013f96:	00db      	lsls	r3, r3, #3
 8013f98:	440b      	add	r3, r1
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00a      	beq.n	8013fb6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013fa0:	7c7a      	ldrb	r2, [r7, #17]
 8013fa2:	4913      	ldr	r1, [pc, #76]	; (8013ff0 <etharp_query+0x268>)
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	005b      	lsls	r3, r3, #1
 8013fa8:	4413      	add	r3, r2
 8013faa:	00db      	lsls	r3, r3, #3
 8013fac:	440b      	add	r3, r1
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7f7 f903 	bl	800b1bc <pbuf_free>
      }
      arp_table[i].q = p;
 8013fb6:	7c7a      	ldrb	r2, [r7, #17]
 8013fb8:	490d      	ldr	r1, [pc, #52]	; (8013ff0 <etharp_query+0x268>)
 8013fba:	4613      	mov	r3, r2
 8013fbc:	005b      	lsls	r3, r3, #1
 8013fbe:	4413      	add	r3, r2
 8013fc0:	00db      	lsls	r3, r3, #3
 8013fc2:	440b      	add	r3, r1
 8013fc4:	69fa      	ldr	r2, [r7, #28]
 8013fc6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fce:	e002      	b.n	8013fd6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013fd0:	23ff      	movs	r3, #255	; 0xff
 8013fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013fd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3728      	adds	r7, #40	; 0x28
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	08019660 	.word	0x08019660
 8013fe8:	0801980c 	.word	0x0801980c
 8013fec:	080196d8 	.word	0x080196d8
 8013ff0:	2000b0bc 	.word	0x2000b0bc
 8013ff4:	0801981c 	.word	0x0801981c
 8013ff8:	08019800 	.word	0x08019800
 8013ffc:	2000b1ac 	.word	0x2000b1ac
 8014000:	08019844 	.word	0x08019844

08014004 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b08a      	sub	sp, #40	; 0x28
 8014008:	af02      	add	r7, sp, #8
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
 8014010:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014012:	2300      	movs	r3, #0
 8014014:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d106      	bne.n	801402a <etharp_raw+0x26>
 801401c:	4b3a      	ldr	r3, [pc, #232]	; (8014108 <etharp_raw+0x104>)
 801401e:	f240 4257 	movw	r2, #1111	; 0x457
 8014022:	493a      	ldr	r1, [pc, #232]	; (801410c <etharp_raw+0x108>)
 8014024:	483a      	ldr	r0, [pc, #232]	; (8014110 <etharp_raw+0x10c>)
 8014026:	f001 fca9 	bl	801597c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801402a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801402e:	211c      	movs	r1, #28
 8014030:	200e      	movs	r0, #14
 8014032:	f7f6 fddf 	bl	800abf4 <pbuf_alloc>
 8014036:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014038:	69bb      	ldr	r3, [r7, #24]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d102      	bne.n	8014044 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801403e:	f04f 33ff 	mov.w	r3, #4294967295
 8014042:	e05d      	b.n	8014100 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014044:	69bb      	ldr	r3, [r7, #24]
 8014046:	895b      	ldrh	r3, [r3, #10]
 8014048:	2b1b      	cmp	r3, #27
 801404a:	d806      	bhi.n	801405a <etharp_raw+0x56>
 801404c:	4b2e      	ldr	r3, [pc, #184]	; (8014108 <etharp_raw+0x104>)
 801404e:	f240 4262 	movw	r2, #1122	; 0x462
 8014052:	4930      	ldr	r1, [pc, #192]	; (8014114 <etharp_raw+0x110>)
 8014054:	482e      	ldr	r0, [pc, #184]	; (8014110 <etharp_raw+0x10c>)
 8014056:	f001 fc91 	bl	801597c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014060:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014062:	4618      	mov	r0, r3
 8014064:	f7f5 fd40 	bl	8009ae8 <lwip_htons>
 8014068:	4603      	mov	r3, r0
 801406a:	461a      	mov	r2, r3
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014076:	2b06      	cmp	r3, #6
 8014078:	d006      	beq.n	8014088 <etharp_raw+0x84>
 801407a:	4b23      	ldr	r3, [pc, #140]	; (8014108 <etharp_raw+0x104>)
 801407c:	f240 4269 	movw	r2, #1129	; 0x469
 8014080:	4925      	ldr	r1, [pc, #148]	; (8014118 <etharp_raw+0x114>)
 8014082:	4823      	ldr	r0, [pc, #140]	; (8014110 <etharp_raw+0x10c>)
 8014084:	f001 fc7a 	bl	801597c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	3308      	adds	r3, #8
 801408c:	2206      	movs	r2, #6
 801408e:	6839      	ldr	r1, [r7, #0]
 8014090:	4618      	mov	r0, r3
 8014092:	f001 fc43 	bl	801591c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	3312      	adds	r3, #18
 801409a:	2206      	movs	r2, #6
 801409c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801409e:	4618      	mov	r0, r3
 80140a0:	f001 fc3c 	bl	801591c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	330e      	adds	r3, #14
 80140a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140aa:	6812      	ldr	r2, [r2, #0]
 80140ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	3318      	adds	r3, #24
 80140b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140b4:	6812      	ldr	r2, [r2, #0]
 80140b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	2200      	movs	r2, #0
 80140bc:	701a      	strb	r2, [r3, #0]
 80140be:	2200      	movs	r2, #0
 80140c0:	f042 0201 	orr.w	r2, r2, #1
 80140c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	2200      	movs	r2, #0
 80140ca:	f042 0208 	orr.w	r2, r2, #8
 80140ce:	709a      	strb	r2, [r3, #2]
 80140d0:	2200      	movs	r2, #0
 80140d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	2206      	movs	r2, #6
 80140d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	2204      	movs	r2, #4
 80140de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80140e0:	f640 0306 	movw	r3, #2054	; 0x806
 80140e4:	9300      	str	r3, [sp, #0]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	68ba      	ldr	r2, [r7, #8]
 80140ea:	69b9      	ldr	r1, [r7, #24]
 80140ec:	68f8      	ldr	r0, [r7, #12]
 80140ee:	f001 fb99 	bl	8015824 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80140f2:	69b8      	ldr	r0, [r7, #24]
 80140f4:	f7f7 f862 	bl	800b1bc <pbuf_free>
  p = NULL;
 80140f8:	2300      	movs	r3, #0
 80140fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80140fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014100:	4618      	mov	r0, r3
 8014102:	3720      	adds	r7, #32
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}
 8014108:	08019660 	.word	0x08019660
 801410c:	080197b0 	.word	0x080197b0
 8014110:	080196d8 	.word	0x080196d8
 8014114:	08019860 	.word	0x08019860
 8014118:	08019894 	.word	0x08019894

0801411c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b088      	sub	sp, #32
 8014120:	af04      	add	r7, sp, #16
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	60b9      	str	r1, [r7, #8]
 8014126:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014138:	2201      	movs	r2, #1
 801413a:	9203      	str	r2, [sp, #12]
 801413c:	68ba      	ldr	r2, [r7, #8]
 801413e:	9202      	str	r2, [sp, #8]
 8014140:	4a06      	ldr	r2, [pc, #24]	; (801415c <etharp_request_dst+0x40>)
 8014142:	9201      	str	r2, [sp, #4]
 8014144:	9300      	str	r3, [sp, #0]
 8014146:	4603      	mov	r3, r0
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	68f8      	ldr	r0, [r7, #12]
 801414c:	f7ff ff5a 	bl	8014004 <etharp_raw>
 8014150:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014152:	4618      	mov	r0, r3
 8014154:	3710      	adds	r7, #16
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
 801415a:	bf00      	nop
 801415c:	0801c518 	.word	0x0801c518

08014160 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801416a:	4a05      	ldr	r2, [pc, #20]	; (8014180 <etharp_request+0x20>)
 801416c:	6839      	ldr	r1, [r7, #0]
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f7ff ffd4 	bl	801411c <etharp_request_dst>
 8014174:	4603      	mov	r3, r0
}
 8014176:	4618      	mov	r0, r3
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	0801c510 	.word	0x0801c510

08014184 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b08e      	sub	sp, #56	; 0x38
 8014188:	af04      	add	r7, sp, #16
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801418e:	4b79      	ldr	r3, [pc, #484]	; (8014374 <icmp_input+0x1f0>)
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	f003 030f 	and.w	r3, r3, #15
 801419c:	b2db      	uxtb	r3, r3
 801419e:	009b      	lsls	r3, r3, #2
 80141a0:	b2db      	uxtb	r3, r3
 80141a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80141a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141a6:	2b13      	cmp	r3, #19
 80141a8:	f240 80cd 	bls.w	8014346 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	895b      	ldrh	r3, [r3, #10]
 80141b0:	2b03      	cmp	r3, #3
 80141b2:	f240 80ca 	bls.w	801434a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80141c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	f000 80b7 	beq.w	8014338 <icmp_input+0x1b4>
 80141ca:	2b08      	cmp	r3, #8
 80141cc:	f040 80b7 	bne.w	801433e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80141d0:	4b69      	ldr	r3, [pc, #420]	; (8014378 <icmp_input+0x1f4>)
 80141d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80141d4:	4b67      	ldr	r3, [pc, #412]	; (8014374 <icmp_input+0x1f0>)
 80141d6:	695b      	ldr	r3, [r3, #20]
 80141d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80141dc:	2be0      	cmp	r3, #224	; 0xe0
 80141de:	f000 80bb 	beq.w	8014358 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80141e2:	4b64      	ldr	r3, [pc, #400]	; (8014374 <icmp_input+0x1f0>)
 80141e4:	695b      	ldr	r3, [r3, #20]
 80141e6:	4a63      	ldr	r2, [pc, #396]	; (8014374 <icmp_input+0x1f0>)
 80141e8:	6812      	ldr	r2, [r2, #0]
 80141ea:	4611      	mov	r1, r2
 80141ec:	4618      	mov	r0, r3
 80141ee:	f000 fc0b 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	f040 80b1 	bne.w	801435c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	891b      	ldrh	r3, [r3, #8]
 80141fe:	2b07      	cmp	r3, #7
 8014200:	f240 80a5 	bls.w	801434e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014206:	330e      	adds	r3, #14
 8014208:	4619      	mov	r1, r3
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7f6 ff40 	bl	800b090 <pbuf_add_header>
 8014210:	4603      	mov	r3, r0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d04b      	beq.n	80142ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	891a      	ldrh	r2, [r3, #8]
 801421a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801421c:	4413      	add	r3, r2
 801421e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	891b      	ldrh	r3, [r3, #8]
 8014224:	8b7a      	ldrh	r2, [r7, #26]
 8014226:	429a      	cmp	r2, r3
 8014228:	f0c0 809a 	bcc.w	8014360 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801422c:	8b7b      	ldrh	r3, [r7, #26]
 801422e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014232:	4619      	mov	r1, r3
 8014234:	200e      	movs	r0, #14
 8014236:	f7f6 fcdd 	bl	800abf4 <pbuf_alloc>
 801423a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	2b00      	cmp	r3, #0
 8014240:	f000 8090 	beq.w	8014364 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	895b      	ldrh	r3, [r3, #10]
 8014248:	461a      	mov	r2, r3
 801424a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801424c:	3308      	adds	r3, #8
 801424e:	429a      	cmp	r2, r3
 8014250:	d203      	bcs.n	801425a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014252:	6978      	ldr	r0, [r7, #20]
 8014254:	f7f6 ffb2 	bl	800b1bc <pbuf_free>
          goto icmperr;
 8014258:	e085      	b.n	8014366 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014262:	4618      	mov	r0, r3
 8014264:	f001 fb5a 	bl	801591c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801426a:	4619      	mov	r1, r3
 801426c:	6978      	ldr	r0, [r7, #20]
 801426e:	f7f6 ff1f 	bl	800b0b0 <pbuf_remove_header>
 8014272:	4603      	mov	r3, r0
 8014274:	2b00      	cmp	r3, #0
 8014276:	d009      	beq.n	801428c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014278:	4b40      	ldr	r3, [pc, #256]	; (801437c <icmp_input+0x1f8>)
 801427a:	22b6      	movs	r2, #182	; 0xb6
 801427c:	4940      	ldr	r1, [pc, #256]	; (8014380 <icmp_input+0x1fc>)
 801427e:	4841      	ldr	r0, [pc, #260]	; (8014384 <icmp_input+0x200>)
 8014280:	f001 fb7c 	bl	801597c <iprintf>
          pbuf_free(r);
 8014284:	6978      	ldr	r0, [r7, #20]
 8014286:	f7f6 ff99 	bl	800b1bc <pbuf_free>
          goto icmperr;
 801428a:	e06c      	b.n	8014366 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801428c:	6879      	ldr	r1, [r7, #4]
 801428e:	6978      	ldr	r0, [r7, #20]
 8014290:	f7f7 f8bc 	bl	800b40c <pbuf_copy>
 8014294:	4603      	mov	r3, r0
 8014296:	2b00      	cmp	r3, #0
 8014298:	d003      	beq.n	80142a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801429a:	6978      	ldr	r0, [r7, #20]
 801429c:	f7f6 ff8e 	bl	800b1bc <pbuf_free>
          goto icmperr;
 80142a0:	e061      	b.n	8014366 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f7f6 ff8a 	bl	800b1bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	607b      	str	r3, [r7, #4]
 80142ac:	e00f      	b.n	80142ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80142ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142b0:	330e      	adds	r3, #14
 80142b2:	4619      	mov	r1, r3
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7f6 fefb 	bl	800b0b0 <pbuf_remove_header>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d006      	beq.n	80142ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80142c0:	4b2e      	ldr	r3, [pc, #184]	; (801437c <icmp_input+0x1f8>)
 80142c2:	22c7      	movs	r2, #199	; 0xc7
 80142c4:	4930      	ldr	r1, [pc, #192]	; (8014388 <icmp_input+0x204>)
 80142c6:	482f      	ldr	r0, [pc, #188]	; (8014384 <icmp_input+0x200>)
 80142c8:	f001 fb58 	bl	801597c <iprintf>
          goto icmperr;
 80142cc:	e04b      	b.n	8014366 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80142d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142d6:	4619      	mov	r1, r3
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f7f6 fed9 	bl	800b090 <pbuf_add_header>
 80142de:	4603      	mov	r3, r0
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d12b      	bne.n	801433c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80142ea:	69fb      	ldr	r3, [r7, #28]
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80142f2:	4b20      	ldr	r3, [pc, #128]	; (8014374 <icmp_input+0x1f0>)
 80142f4:	691a      	ldr	r2, [r3, #16]
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	2200      	movs	r2, #0
 80142fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	2200      	movs	r2, #0
 8014304:	709a      	strb	r2, [r3, #2]
 8014306:	2200      	movs	r2, #0
 8014308:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	22ff      	movs	r2, #255	; 0xff
 801430e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	2200      	movs	r2, #0
 8014314:	729a      	strb	r2, [r3, #10]
 8014316:	2200      	movs	r2, #0
 8014318:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	9302      	str	r3, [sp, #8]
 801431e:	2301      	movs	r3, #1
 8014320:	9301      	str	r3, [sp, #4]
 8014322:	2300      	movs	r3, #0
 8014324:	9300      	str	r3, [sp, #0]
 8014326:	23ff      	movs	r3, #255	; 0xff
 8014328:	2200      	movs	r2, #0
 801432a:	69f9      	ldr	r1, [r7, #28]
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f000 fa93 	bl	8014858 <ip4_output_if>
 8014332:	4603      	mov	r3, r0
 8014334:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014336:	e001      	b.n	801433c <icmp_input+0x1b8>
      break;
 8014338:	bf00      	nop
 801433a:	e000      	b.n	801433e <icmp_input+0x1ba>
      break;
 801433c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f7f6 ff3c 	bl	800b1bc <pbuf_free>
  return;
 8014344:	e013      	b.n	801436e <icmp_input+0x1ea>
    goto lenerr;
 8014346:	bf00      	nop
 8014348:	e002      	b.n	8014350 <icmp_input+0x1cc>
    goto lenerr;
 801434a:	bf00      	nop
 801434c:	e000      	b.n	8014350 <icmp_input+0x1cc>
        goto lenerr;
 801434e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f7f6 ff33 	bl	800b1bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014356:	e00a      	b.n	801436e <icmp_input+0x1ea>
        goto icmperr;
 8014358:	bf00      	nop
 801435a:	e004      	b.n	8014366 <icmp_input+0x1e2>
        goto icmperr;
 801435c:	bf00      	nop
 801435e:	e002      	b.n	8014366 <icmp_input+0x1e2>
          goto icmperr;
 8014360:	bf00      	nop
 8014362:	e000      	b.n	8014366 <icmp_input+0x1e2>
          goto icmperr;
 8014364:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f7f6 ff28 	bl	800b1bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801436c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801436e:	3728      	adds	r7, #40	; 0x28
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}
 8014374:	200058d8 	.word	0x200058d8
 8014378:	200058ec 	.word	0x200058ec
 801437c:	080198d8 	.word	0x080198d8
 8014380:	08019910 	.word	0x08019910
 8014384:	08019948 	.word	0x08019948
 8014388:	08019970 	.word	0x08019970

0801438c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
 8014394:	460b      	mov	r3, r1
 8014396:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014398:	78fb      	ldrb	r3, [r7, #3]
 801439a:	461a      	mov	r2, r3
 801439c:	2103      	movs	r1, #3
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 f814 	bl	80143cc <icmp_send_response>
}
 80143a4:	bf00      	nop
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	460b      	mov	r3, r1
 80143b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80143b8:	78fb      	ldrb	r3, [r7, #3]
 80143ba:	461a      	mov	r2, r3
 80143bc:	210b      	movs	r1, #11
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f000 f804 	bl	80143cc <icmp_send_response>
}
 80143c4:	bf00      	nop
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}

080143cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b08c      	sub	sp, #48	; 0x30
 80143d0:	af04      	add	r7, sp, #16
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	460b      	mov	r3, r1
 80143d6:	70fb      	strb	r3, [r7, #3]
 80143d8:	4613      	mov	r3, r2
 80143da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80143dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143e0:	2124      	movs	r1, #36	; 0x24
 80143e2:	2022      	movs	r0, #34	; 0x22
 80143e4:	f7f6 fc06 	bl	800abf4 <pbuf_alloc>
 80143e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80143ea:	69fb      	ldr	r3, [r7, #28]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d04c      	beq.n	801448a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80143f0:	69fb      	ldr	r3, [r7, #28]
 80143f2:	895b      	ldrh	r3, [r3, #10]
 80143f4:	2b23      	cmp	r3, #35	; 0x23
 80143f6:	d806      	bhi.n	8014406 <icmp_send_response+0x3a>
 80143f8:	4b26      	ldr	r3, [pc, #152]	; (8014494 <icmp_send_response+0xc8>)
 80143fa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80143fe:	4926      	ldr	r1, [pc, #152]	; (8014498 <icmp_send_response+0xcc>)
 8014400:	4826      	ldr	r0, [pc, #152]	; (801449c <icmp_send_response+0xd0>)
 8014402:	f001 fabb 	bl	801597c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	78fa      	ldrb	r2, [r7, #3]
 8014416:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	78ba      	ldrb	r2, [r7, #2]
 801441c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	2200      	movs	r2, #0
 8014422:	711a      	strb	r2, [r3, #4]
 8014424:	2200      	movs	r2, #0
 8014426:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	2200      	movs	r2, #0
 801442c:	719a      	strb	r2, [r3, #6]
 801442e:	2200      	movs	r2, #0
 8014430:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014432:	69fb      	ldr	r3, [r7, #28]
 8014434:	685b      	ldr	r3, [r3, #4]
 8014436:	f103 0008 	add.w	r0, r3, #8
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	221c      	movs	r2, #28
 8014440:	4619      	mov	r1, r3
 8014442:	f001 fa6b 	bl	801591c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801444c:	f107 030c 	add.w	r3, r7, #12
 8014450:	4618      	mov	r0, r3
 8014452:	f000 f825 	bl	80144a0 <ip4_route>
 8014456:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d011      	beq.n	8014482 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801445e:	697b      	ldr	r3, [r7, #20]
 8014460:	2200      	movs	r2, #0
 8014462:	709a      	strb	r2, [r3, #2]
 8014464:	2200      	movs	r2, #0
 8014466:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014468:	f107 020c 	add.w	r2, r7, #12
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	9302      	str	r3, [sp, #8]
 8014470:	2301      	movs	r3, #1
 8014472:	9301      	str	r3, [sp, #4]
 8014474:	2300      	movs	r3, #0
 8014476:	9300      	str	r3, [sp, #0]
 8014478:	23ff      	movs	r3, #255	; 0xff
 801447a:	2100      	movs	r1, #0
 801447c:	69f8      	ldr	r0, [r7, #28]
 801447e:	f000 f9eb 	bl	8014858 <ip4_output_if>
  }
  pbuf_free(q);
 8014482:	69f8      	ldr	r0, [r7, #28]
 8014484:	f7f6 fe9a 	bl	800b1bc <pbuf_free>
 8014488:	e000      	b.n	801448c <icmp_send_response+0xc0>
    return;
 801448a:	bf00      	nop
}
 801448c:	3720      	adds	r7, #32
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	080198d8 	.word	0x080198d8
 8014498:	080199a4 	.word	0x080199a4
 801449c:	08019948 	.word	0x08019948

080144a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80144a0:	b480      	push	{r7}
 80144a2:	b085      	sub	sp, #20
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80144a8:	4b33      	ldr	r3, [pc, #204]	; (8014578 <ip4_route+0xd8>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	60fb      	str	r3, [r7, #12]
 80144ae:	e036      	b.n	801451e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144b6:	f003 0301 	and.w	r3, r3, #1
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d02b      	beq.n	8014518 <ip4_route+0x78>
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144c6:	089b      	lsrs	r3, r3, #2
 80144c8:	f003 0301 	and.w	r3, r3, #1
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d022      	beq.n	8014518 <ip4_route+0x78>
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	3304      	adds	r3, #4
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d01d      	beq.n	8014518 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681a      	ldr	r2, [r3, #0]
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	3304      	adds	r3, #4
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	405a      	eors	r2, r3
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	3308      	adds	r3, #8
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	4013      	ands	r3, r2
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d101      	bne.n	80144f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	e038      	b.n	801456a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144fe:	f003 0302 	and.w	r3, r3, #2
 8014502:	2b00      	cmp	r3, #0
 8014504:	d108      	bne.n	8014518 <ip4_route+0x78>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	330c      	adds	r3, #12
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	429a      	cmp	r2, r3
 8014512:	d101      	bne.n	8014518 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	e028      	b.n	801456a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	60fb      	str	r3, [r7, #12]
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d1c5      	bne.n	80144b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014524:	4b15      	ldr	r3, [pc, #84]	; (801457c <ip4_route+0xdc>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d01a      	beq.n	8014562 <ip4_route+0xc2>
 801452c:	4b13      	ldr	r3, [pc, #76]	; (801457c <ip4_route+0xdc>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014534:	f003 0301 	and.w	r3, r3, #1
 8014538:	2b00      	cmp	r3, #0
 801453a:	d012      	beq.n	8014562 <ip4_route+0xc2>
 801453c:	4b0f      	ldr	r3, [pc, #60]	; (801457c <ip4_route+0xdc>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014544:	f003 0304 	and.w	r3, r3, #4
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00a      	beq.n	8014562 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801454c:	4b0b      	ldr	r3, [pc, #44]	; (801457c <ip4_route+0xdc>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	3304      	adds	r3, #4
 8014552:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014554:	2b00      	cmp	r3, #0
 8014556:	d004      	beq.n	8014562 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	b2db      	uxtb	r3, r3
 801455e:	2b7f      	cmp	r3, #127	; 0x7f
 8014560:	d101      	bne.n	8014566 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014562:	2300      	movs	r3, #0
 8014564:	e001      	b.n	801456a <ip4_route+0xca>
  }

  return netif_default;
 8014566:	4b05      	ldr	r3, [pc, #20]	; (801457c <ip4_route+0xdc>)
 8014568:	681b      	ldr	r3, [r3, #0]
}
 801456a:	4618      	mov	r0, r3
 801456c:	3714      	adds	r7, #20
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr
 8014576:	bf00      	nop
 8014578:	2000b01c 	.word	0x2000b01c
 801457c:	2000b020 	.word	0x2000b020

08014580 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801458e:	f003 0301 	and.w	r3, r3, #1
 8014592:	b2db      	uxtb	r3, r3
 8014594:	2b00      	cmp	r3, #0
 8014596:	d016      	beq.n	80145c6 <ip4_input_accept+0x46>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	3304      	adds	r3, #4
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d011      	beq.n	80145c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80145a2:	4b0b      	ldr	r3, [pc, #44]	; (80145d0 <ip4_input_accept+0x50>)
 80145a4:	695a      	ldr	r2, [r3, #20]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	3304      	adds	r3, #4
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d008      	beq.n	80145c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80145b0:	4b07      	ldr	r3, [pc, #28]	; (80145d0 <ip4_input_accept+0x50>)
 80145b2:	695b      	ldr	r3, [r3, #20]
 80145b4:	6879      	ldr	r1, [r7, #4]
 80145b6:	4618      	mov	r0, r3
 80145b8:	f000 fa26 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 80145bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d001      	beq.n	80145c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80145c2:	2301      	movs	r3, #1
 80145c4:	e000      	b.n	80145c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80145c6:	2300      	movs	r3, #0
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3708      	adds	r7, #8
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	200058d8 	.word	0x200058d8

080145d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b088      	sub	sp, #32
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80145de:	2301      	movs	r3, #1
 80145e0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80145e8:	69fb      	ldr	r3, [r7, #28]
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	091b      	lsrs	r3, r3, #4
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	2b04      	cmp	r3, #4
 80145f2:	d004      	beq.n	80145fe <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7f6 fde1 	bl	800b1bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80145fa:	2300      	movs	r3, #0
 80145fc:	e123      	b.n	8014846 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80145fe:	69fb      	ldr	r3, [r7, #28]
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	f003 030f 	and.w	r3, r3, #15
 8014606:	b2db      	uxtb	r3, r3
 8014608:	009b      	lsls	r3, r3, #2
 801460a:	b2db      	uxtb	r3, r3
 801460c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	885b      	ldrh	r3, [r3, #2]
 8014612:	b29b      	uxth	r3, r3
 8014614:	4618      	mov	r0, r3
 8014616:	f7f5 fa67 	bl	8009ae8 <lwip_htons>
 801461a:	4603      	mov	r3, r0
 801461c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	891b      	ldrh	r3, [r3, #8]
 8014622:	8a3a      	ldrh	r2, [r7, #16]
 8014624:	429a      	cmp	r2, r3
 8014626:	d204      	bcs.n	8014632 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8014628:	8a3b      	ldrh	r3, [r7, #16]
 801462a:	4619      	mov	r1, r3
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f7f6 fc3f 	bl	800aeb0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	895b      	ldrh	r3, [r3, #10]
 8014636:	8a7a      	ldrh	r2, [r7, #18]
 8014638:	429a      	cmp	r2, r3
 801463a:	d807      	bhi.n	801464c <ip4_input+0x78>
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	891b      	ldrh	r3, [r3, #8]
 8014640:	8a3a      	ldrh	r2, [r7, #16]
 8014642:	429a      	cmp	r2, r3
 8014644:	d802      	bhi.n	801464c <ip4_input+0x78>
 8014646:	8a7b      	ldrh	r3, [r7, #18]
 8014648:	2b13      	cmp	r3, #19
 801464a:	d804      	bhi.n	8014656 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f7f6 fdb5 	bl	800b1bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014652:	2300      	movs	r3, #0
 8014654:	e0f7      	b.n	8014846 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	691b      	ldr	r3, [r3, #16]
 801465a:	4a7d      	ldr	r2, [pc, #500]	; (8014850 <ip4_input+0x27c>)
 801465c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801465e:	69fb      	ldr	r3, [r7, #28]
 8014660:	68db      	ldr	r3, [r3, #12]
 8014662:	4a7b      	ldr	r2, [pc, #492]	; (8014850 <ip4_input+0x27c>)
 8014664:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014666:	4b7a      	ldr	r3, [pc, #488]	; (8014850 <ip4_input+0x27c>)
 8014668:	695b      	ldr	r3, [r3, #20]
 801466a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801466e:	2be0      	cmp	r3, #224	; 0xe0
 8014670:	d112      	bne.n	8014698 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014678:	f003 0301 	and.w	r3, r3, #1
 801467c:	b2db      	uxtb	r3, r3
 801467e:	2b00      	cmp	r3, #0
 8014680:	d007      	beq.n	8014692 <ip4_input+0xbe>
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	3304      	adds	r3, #4
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d002      	beq.n	8014692 <ip4_input+0xbe>
      netif = inp;
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	61bb      	str	r3, [r7, #24]
 8014690:	e02a      	b.n	80146e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014692:	2300      	movs	r3, #0
 8014694:	61bb      	str	r3, [r7, #24]
 8014696:	e027      	b.n	80146e8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014698:	6838      	ldr	r0, [r7, #0]
 801469a:	f7ff ff71 	bl	8014580 <ip4_input_accept>
 801469e:	4603      	mov	r3, r0
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d002      	beq.n	80146aa <ip4_input+0xd6>
      netif = inp;
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	61bb      	str	r3, [r7, #24]
 80146a8:	e01e      	b.n	80146e8 <ip4_input+0x114>
    } else {
      netif = NULL;
 80146aa:	2300      	movs	r3, #0
 80146ac:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80146ae:	4b68      	ldr	r3, [pc, #416]	; (8014850 <ip4_input+0x27c>)
 80146b0:	695b      	ldr	r3, [r3, #20]
 80146b2:	b2db      	uxtb	r3, r3
 80146b4:	2b7f      	cmp	r3, #127	; 0x7f
 80146b6:	d017      	beq.n	80146e8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80146b8:	4b66      	ldr	r3, [pc, #408]	; (8014854 <ip4_input+0x280>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	61bb      	str	r3, [r7, #24]
 80146be:	e00e      	b.n	80146de <ip4_input+0x10a>
          if (netif == inp) {
 80146c0:	69ba      	ldr	r2, [r7, #24]
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d006      	beq.n	80146d6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80146c8:	69b8      	ldr	r0, [r7, #24]
 80146ca:	f7ff ff59 	bl	8014580 <ip4_input_accept>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d108      	bne.n	80146e6 <ip4_input+0x112>
 80146d4:	e000      	b.n	80146d8 <ip4_input+0x104>
            continue;
 80146d6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	61bb      	str	r3, [r7, #24]
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d1ed      	bne.n	80146c0 <ip4_input+0xec>
 80146e4:	e000      	b.n	80146e8 <ip4_input+0x114>
            break;
 80146e6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80146e8:	69bb      	ldr	r3, [r7, #24]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d111      	bne.n	8014712 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80146ee:	69fb      	ldr	r3, [r7, #28]
 80146f0:	7a5b      	ldrb	r3, [r3, #9]
 80146f2:	2b11      	cmp	r3, #17
 80146f4:	d10d      	bne.n	8014712 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80146f6:	8a7b      	ldrh	r3, [r7, #18]
 80146f8:	69fa      	ldr	r2, [r7, #28]
 80146fa:	4413      	add	r3, r2
 80146fc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	885b      	ldrh	r3, [r3, #2]
 8014702:	b29b      	uxth	r3, r3
 8014704:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8014708:	d103      	bne.n	8014712 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801470e:	2300      	movs	r3, #0
 8014710:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d017      	beq.n	8014748 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8014718:	4b4d      	ldr	r3, [pc, #308]	; (8014850 <ip4_input+0x27c>)
 801471a:	691b      	ldr	r3, [r3, #16]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d013      	beq.n	8014748 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014720:	4b4b      	ldr	r3, [pc, #300]	; (8014850 <ip4_input+0x27c>)
 8014722:	691b      	ldr	r3, [r3, #16]
 8014724:	6839      	ldr	r1, [r7, #0]
 8014726:	4618      	mov	r0, r3
 8014728:	f000 f96e 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 801472c:	4603      	mov	r3, r0
 801472e:	2b00      	cmp	r3, #0
 8014730:	d105      	bne.n	801473e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014732:	4b47      	ldr	r3, [pc, #284]	; (8014850 <ip4_input+0x27c>)
 8014734:	691b      	ldr	r3, [r3, #16]
 8014736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801473a:	2be0      	cmp	r3, #224	; 0xe0
 801473c:	d104      	bne.n	8014748 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7f6 fd3c 	bl	800b1bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014744:	2300      	movs	r3, #0
 8014746:	e07e      	b.n	8014846 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d104      	bne.n	8014758 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f7f6 fd34 	bl	800b1bc <pbuf_free>
    return ERR_OK;
 8014754:	2300      	movs	r3, #0
 8014756:	e076      	b.n	8014846 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	88db      	ldrh	r3, [r3, #6]
 801475c:	b29b      	uxth	r3, r3
 801475e:	461a      	mov	r2, r3
 8014760:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014764:	4013      	ands	r3, r2
 8014766:	2b00      	cmp	r3, #0
 8014768:	d00b      	beq.n	8014782 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f000 fc92 	bl	8015094 <ip4_reass>
 8014770:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d101      	bne.n	801477c <ip4_input+0x1a8>
      return ERR_OK;
 8014778:	2300      	movs	r3, #0
 801477a:	e064      	b.n	8014846 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014782:	4a33      	ldr	r2, [pc, #204]	; (8014850 <ip4_input+0x27c>)
 8014784:	69bb      	ldr	r3, [r7, #24]
 8014786:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014788:	4a31      	ldr	r2, [pc, #196]	; (8014850 <ip4_input+0x27c>)
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801478e:	4a30      	ldr	r2, [pc, #192]	; (8014850 <ip4_input+0x27c>)
 8014790:	69fb      	ldr	r3, [r7, #28]
 8014792:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014794:	69fb      	ldr	r3, [r7, #28]
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	f003 030f 	and.w	r3, r3, #15
 801479c:	b2db      	uxtb	r3, r3
 801479e:	009b      	lsls	r3, r3, #2
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	b29a      	uxth	r2, r3
 80147a4:	4b2a      	ldr	r3, [pc, #168]	; (8014850 <ip4_input+0x27c>)
 80147a6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80147a8:	8a7b      	ldrh	r3, [r7, #18]
 80147aa:	4619      	mov	r1, r3
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f7f6 fc7f 	bl	800b0b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80147b2:	69fb      	ldr	r3, [r7, #28]
 80147b4:	7a5b      	ldrb	r3, [r3, #9]
 80147b6:	2b11      	cmp	r3, #17
 80147b8:	d006      	beq.n	80147c8 <ip4_input+0x1f4>
 80147ba:	2b11      	cmp	r3, #17
 80147bc:	dc13      	bgt.n	80147e6 <ip4_input+0x212>
 80147be:	2b01      	cmp	r3, #1
 80147c0:	d00c      	beq.n	80147dc <ip4_input+0x208>
 80147c2:	2b06      	cmp	r3, #6
 80147c4:	d005      	beq.n	80147d2 <ip4_input+0x1fe>
 80147c6:	e00e      	b.n	80147e6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80147c8:	6839      	ldr	r1, [r7, #0]
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f7fc fae8 	bl	8010da0 <udp_input>
        break;
 80147d0:	e026      	b.n	8014820 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80147d2:	6839      	ldr	r1, [r7, #0]
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f7f8 fb29 	bl	800ce2c <tcp_input>
        break;
 80147da:	e021      	b.n	8014820 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80147dc:	6839      	ldr	r1, [r7, #0]
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f7ff fcd0 	bl	8014184 <icmp_input>
        break;
 80147e4:	e01c      	b.n	8014820 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80147e6:	4b1a      	ldr	r3, [pc, #104]	; (8014850 <ip4_input+0x27c>)
 80147e8:	695b      	ldr	r3, [r3, #20]
 80147ea:	69b9      	ldr	r1, [r7, #24]
 80147ec:	4618      	mov	r0, r3
 80147ee:	f000 f90b 	bl	8014a08 <ip4_addr_isbroadcast_u32>
 80147f2:	4603      	mov	r3, r0
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d10f      	bne.n	8014818 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80147f8:	4b15      	ldr	r3, [pc, #84]	; (8014850 <ip4_input+0x27c>)
 80147fa:	695b      	ldr	r3, [r3, #20]
 80147fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014800:	2be0      	cmp	r3, #224	; 0xe0
 8014802:	d009      	beq.n	8014818 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014804:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014808:	4619      	mov	r1, r3
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7f6 fcc3 	bl	800b196 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014810:	2102      	movs	r1, #2
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f7ff fdba 	bl	801438c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f7f6 fccf 	bl	800b1bc <pbuf_free>
        break;
 801481e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014820:	4b0b      	ldr	r3, [pc, #44]	; (8014850 <ip4_input+0x27c>)
 8014822:	2200      	movs	r2, #0
 8014824:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014826:	4b0a      	ldr	r3, [pc, #40]	; (8014850 <ip4_input+0x27c>)
 8014828:	2200      	movs	r2, #0
 801482a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801482c:	4b08      	ldr	r3, [pc, #32]	; (8014850 <ip4_input+0x27c>)
 801482e:	2200      	movs	r2, #0
 8014830:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014832:	4b07      	ldr	r3, [pc, #28]	; (8014850 <ip4_input+0x27c>)
 8014834:	2200      	movs	r2, #0
 8014836:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014838:	4b05      	ldr	r3, [pc, #20]	; (8014850 <ip4_input+0x27c>)
 801483a:	2200      	movs	r2, #0
 801483c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801483e:	4b04      	ldr	r3, [pc, #16]	; (8014850 <ip4_input+0x27c>)
 8014840:	2200      	movs	r2, #0
 8014842:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014844:	2300      	movs	r3, #0
}
 8014846:	4618      	mov	r0, r3
 8014848:	3720      	adds	r7, #32
 801484a:	46bd      	mov	sp, r7
 801484c:	bd80      	pop	{r7, pc}
 801484e:	bf00      	nop
 8014850:	200058d8 	.word	0x200058d8
 8014854:	2000b01c 	.word	0x2000b01c

08014858 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b08a      	sub	sp, #40	; 0x28
 801485c:	af04      	add	r7, sp, #16
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d009      	beq.n	8014884 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d003      	beq.n	801487e <ip4_output_if+0x26>
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d102      	bne.n	8014884 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014880:	3304      	adds	r3, #4
 8014882:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014884:	78fa      	ldrb	r2, [r7, #3]
 8014886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014888:	9302      	str	r3, [sp, #8]
 801488a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801488e:	9301      	str	r3, [sp, #4]
 8014890:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014894:	9300      	str	r3, [sp, #0]
 8014896:	4613      	mov	r3, r2
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	6979      	ldr	r1, [r7, #20]
 801489c:	68f8      	ldr	r0, [r7, #12]
 801489e:	f000 f805 	bl	80148ac <ip4_output_if_src>
 80148a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3718      	adds	r7, #24
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}

080148ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b088      	sub	sp, #32
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	60b9      	str	r1, [r7, #8]
 80148b6:	607a      	str	r2, [r7, #4]
 80148b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	7b9b      	ldrb	r3, [r3, #14]
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d006      	beq.n	80148d0 <ip4_output_if_src+0x24>
 80148c2:	4b4b      	ldr	r3, [pc, #300]	; (80149f0 <ip4_output_if_src+0x144>)
 80148c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80148c8:	494a      	ldr	r1, [pc, #296]	; (80149f4 <ip4_output_if_src+0x148>)
 80148ca:	484b      	ldr	r0, [pc, #300]	; (80149f8 <ip4_output_if_src+0x14c>)
 80148cc:	f001 f856 	bl	801597c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d060      	beq.n	8014998 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80148d6:	2314      	movs	r3, #20
 80148d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80148da:	2114      	movs	r1, #20
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f7f6 fbd7 	bl	800b090 <pbuf_add_header>
 80148e2:	4603      	mov	r3, r0
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d002      	beq.n	80148ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80148e8:	f06f 0301 	mvn.w	r3, #1
 80148ec:	e07c      	b.n	80149e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	895b      	ldrh	r3, [r3, #10]
 80148f8:	2b13      	cmp	r3, #19
 80148fa:	d806      	bhi.n	801490a <ip4_output_if_src+0x5e>
 80148fc:	4b3c      	ldr	r3, [pc, #240]	; (80149f0 <ip4_output_if_src+0x144>)
 80148fe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014902:	493e      	ldr	r1, [pc, #248]	; (80149fc <ip4_output_if_src+0x150>)
 8014904:	483c      	ldr	r0, [pc, #240]	; (80149f8 <ip4_output_if_src+0x14c>)
 8014906:	f001 f839 	bl	801597c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	78fa      	ldrb	r2, [r7, #3]
 801490e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014916:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681a      	ldr	r2, [r3, #0]
 801491c:	69fb      	ldr	r3, [r7, #28]
 801491e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014920:	8b7b      	ldrh	r3, [r7, #26]
 8014922:	089b      	lsrs	r3, r3, #2
 8014924:	b29b      	uxth	r3, r3
 8014926:	b2db      	uxtb	r3, r3
 8014928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801492c:	b2da      	uxtb	r2, r3
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014938:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	891b      	ldrh	r3, [r3, #8]
 801493e:	4618      	mov	r0, r3
 8014940:	f7f5 f8d2 	bl	8009ae8 <lwip_htons>
 8014944:	4603      	mov	r3, r0
 8014946:	461a      	mov	r2, r3
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	2200      	movs	r2, #0
 8014950:	719a      	strb	r2, [r3, #6]
 8014952:	2200      	movs	r2, #0
 8014954:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014956:	4b2a      	ldr	r3, [pc, #168]	; (8014a00 <ip4_output_if_src+0x154>)
 8014958:	881b      	ldrh	r3, [r3, #0]
 801495a:	4618      	mov	r0, r3
 801495c:	f7f5 f8c4 	bl	8009ae8 <lwip_htons>
 8014960:	4603      	mov	r3, r0
 8014962:	461a      	mov	r2, r3
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014968:	4b25      	ldr	r3, [pc, #148]	; (8014a00 <ip4_output_if_src+0x154>)
 801496a:	881b      	ldrh	r3, [r3, #0]
 801496c:	3301      	adds	r3, #1
 801496e:	b29a      	uxth	r2, r3
 8014970:	4b23      	ldr	r3, [pc, #140]	; (8014a00 <ip4_output_if_src+0x154>)
 8014972:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d104      	bne.n	8014984 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801497a:	4b22      	ldr	r3, [pc, #136]	; (8014a04 <ip4_output_if_src+0x158>)
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	60da      	str	r2, [r3, #12]
 8014982:	e003      	b.n	801498c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	681a      	ldr	r2, [r3, #0]
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801498c:	69fb      	ldr	r3, [r7, #28]
 801498e:	2200      	movs	r2, #0
 8014990:	729a      	strb	r2, [r3, #10]
 8014992:	2200      	movs	r2, #0
 8014994:	72da      	strb	r2, [r3, #11]
 8014996:	e00f      	b.n	80149b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	895b      	ldrh	r3, [r3, #10]
 801499c:	2b13      	cmp	r3, #19
 801499e:	d802      	bhi.n	80149a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80149a0:	f06f 0301 	mvn.w	r3, #1
 80149a4:	e020      	b.n	80149e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80149ac:	69fb      	ldr	r3, [r7, #28]
 80149ae:	691b      	ldr	r3, [r3, #16]
 80149b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80149b2:	f107 0314 	add.w	r3, r7, #20
 80149b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80149b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00c      	beq.n	80149da <ip4_output_if_src+0x12e>
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	891a      	ldrh	r2, [r3, #8]
 80149c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d906      	bls.n	80149da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80149d0:	68f8      	ldr	r0, [r7, #12]
 80149d2:	f000 fd53 	bl	801547c <ip4_frag>
 80149d6:	4603      	mov	r3, r0
 80149d8:	e006      	b.n	80149e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80149da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149dc:	695b      	ldr	r3, [r3, #20]
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	68f9      	ldr	r1, [r7, #12]
 80149e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149e4:	4798      	blx	r3
 80149e6:	4603      	mov	r3, r0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3720      	adds	r7, #32
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	080199d0 	.word	0x080199d0
 80149f4:	08019a04 	.word	0x08019a04
 80149f8:	08019a10 	.word	0x08019a10
 80149fc:	08019a38 	.word	0x08019a38
 8014a00:	2000b1ae 	.word	0x2000b1ae
 8014a04:	0801c508 	.word	0x0801c508

08014a08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014a08:	b480      	push	{r7}
 8014a0a:	b085      	sub	sp, #20
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a1c:	d002      	beq.n	8014a24 <ip4_addr_isbroadcast_u32+0x1c>
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d101      	bne.n	8014a28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014a24:	2301      	movs	r3, #1
 8014a26:	e02a      	b.n	8014a7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014a2e:	f003 0302 	and.w	r3, r3, #2
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d101      	bne.n	8014a3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014a36:	2300      	movs	r3, #0
 8014a38:	e021      	b.n	8014a7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	3304      	adds	r3, #4
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d101      	bne.n	8014a4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014a46:	2300      	movs	r3, #0
 8014a48:	e019      	b.n	8014a7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014a4a:	68fa      	ldr	r2, [r7, #12]
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	3304      	adds	r3, #4
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	405a      	eors	r2, r3
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	3308      	adds	r3, #8
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4013      	ands	r3, r2
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d10d      	bne.n	8014a7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	3308      	adds	r3, #8
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	43da      	mvns	r2, r3
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	3308      	adds	r3, #8
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d101      	bne.n	8014a7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014a78:	2301      	movs	r3, #1
 8014a7a:	e000      	b.n	8014a7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014a7c:	2300      	movs	r3, #0
  }
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3714      	adds	r7, #20
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr
	...

08014a8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014a92:	2300      	movs	r3, #0
 8014a94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014a96:	4b12      	ldr	r3, [pc, #72]	; (8014ae0 <ip_reass_tmr+0x54>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014a9c:	e018      	b.n	8014ad0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	7fdb      	ldrb	r3, [r3, #31]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d00b      	beq.n	8014abe <ip_reass_tmr+0x32>
      r->timer--;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	7fdb      	ldrb	r3, [r3, #31]
 8014aaa:	3b01      	subs	r3, #1
 8014aac:	b2da      	uxtb	r2, r3
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	60fb      	str	r3, [r7, #12]
 8014abc:	e008      	b.n	8014ad0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014ac8:	68b9      	ldr	r1, [r7, #8]
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f000 f80a 	bl	8014ae4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d1e3      	bne.n	8014a9e <ip_reass_tmr+0x12>
    }
  }
}
 8014ad6:	bf00      	nop
 8014ad8:	bf00      	nop
 8014ada:	3710      	adds	r7, #16
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	2000b1b0 	.word	0x2000b1b0

08014ae4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b088      	sub	sp, #32
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014aee:	2300      	movs	r3, #0
 8014af0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014af2:	683a      	ldr	r2, [r7, #0]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d105      	bne.n	8014b06 <ip_reass_free_complete_datagram+0x22>
 8014afa:	4b45      	ldr	r3, [pc, #276]	; (8014c10 <ip_reass_free_complete_datagram+0x12c>)
 8014afc:	22ab      	movs	r2, #171	; 0xab
 8014afe:	4945      	ldr	r1, [pc, #276]	; (8014c14 <ip_reass_free_complete_datagram+0x130>)
 8014b00:	4845      	ldr	r0, [pc, #276]	; (8014c18 <ip_reass_free_complete_datagram+0x134>)
 8014b02:	f000 ff3b 	bl	801597c <iprintf>
  if (prev != NULL) {
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d00a      	beq.n	8014b22 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d005      	beq.n	8014b22 <ip_reass_free_complete_datagram+0x3e>
 8014b16:	4b3e      	ldr	r3, [pc, #248]	; (8014c10 <ip_reass_free_complete_datagram+0x12c>)
 8014b18:	22ad      	movs	r2, #173	; 0xad
 8014b1a:	4940      	ldr	r1, [pc, #256]	; (8014c1c <ip_reass_free_complete_datagram+0x138>)
 8014b1c:	483e      	ldr	r0, [pc, #248]	; (8014c18 <ip_reass_free_complete_datagram+0x134>)
 8014b1e:	f000 ff2d 	bl	801597c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	685b      	ldr	r3, [r3, #4]
 8014b28:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	889b      	ldrh	r3, [r3, #4]
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d12a      	bne.n	8014b8a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	6858      	ldr	r0, [r3, #4]
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	3308      	adds	r3, #8
 8014b4a:	2214      	movs	r2, #20
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	f000 fee5 	bl	801591c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014b52:	2101      	movs	r1, #1
 8014b54:	69b8      	ldr	r0, [r7, #24]
 8014b56:	f7ff fc29 	bl	80143ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014b5a:	69b8      	ldr	r0, [r7, #24]
 8014b5c:	f7f6 fbb6 	bl	800b2cc <pbuf_clen>
 8014b60:	4603      	mov	r3, r0
 8014b62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014b64:	8bfa      	ldrh	r2, [r7, #30]
 8014b66:	8a7b      	ldrh	r3, [r7, #18]
 8014b68:	4413      	add	r3, r2
 8014b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b6e:	db05      	blt.n	8014b7c <ip_reass_free_complete_datagram+0x98>
 8014b70:	4b27      	ldr	r3, [pc, #156]	; (8014c10 <ip_reass_free_complete_datagram+0x12c>)
 8014b72:	22bc      	movs	r2, #188	; 0xbc
 8014b74:	492a      	ldr	r1, [pc, #168]	; (8014c20 <ip_reass_free_complete_datagram+0x13c>)
 8014b76:	4828      	ldr	r0, [pc, #160]	; (8014c18 <ip_reass_free_complete_datagram+0x134>)
 8014b78:	f000 ff00 	bl	801597c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014b7c:	8bfa      	ldrh	r2, [r7, #30]
 8014b7e:	8a7b      	ldrh	r3, [r7, #18]
 8014b80:	4413      	add	r3, r2
 8014b82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014b84:	69b8      	ldr	r0, [r7, #24]
 8014b86:	f7f6 fb19 	bl	800b1bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014b90:	e01f      	b.n	8014bd2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014b92:	69bb      	ldr	r3, [r7, #24]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014b98:	69bb      	ldr	r3, [r7, #24]
 8014b9a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014ba2:	68f8      	ldr	r0, [r7, #12]
 8014ba4:	f7f6 fb92 	bl	800b2cc <pbuf_clen>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014bac:	8bfa      	ldrh	r2, [r7, #30]
 8014bae:	8a7b      	ldrh	r3, [r7, #18]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014bb6:	db05      	blt.n	8014bc4 <ip_reass_free_complete_datagram+0xe0>
 8014bb8:	4b15      	ldr	r3, [pc, #84]	; (8014c10 <ip_reass_free_complete_datagram+0x12c>)
 8014bba:	22cc      	movs	r2, #204	; 0xcc
 8014bbc:	4918      	ldr	r1, [pc, #96]	; (8014c20 <ip_reass_free_complete_datagram+0x13c>)
 8014bbe:	4816      	ldr	r0, [pc, #88]	; (8014c18 <ip_reass_free_complete_datagram+0x134>)
 8014bc0:	f000 fedc 	bl	801597c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014bc4:	8bfa      	ldrh	r2, [r7, #30]
 8014bc6:	8a7b      	ldrh	r3, [r7, #18]
 8014bc8:	4413      	add	r3, r2
 8014bca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014bcc:	68f8      	ldr	r0, [r7, #12]
 8014bce:	f7f6 faf5 	bl	800b1bc <pbuf_free>
  while (p != NULL) {
 8014bd2:	69bb      	ldr	r3, [r7, #24]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d1dc      	bne.n	8014b92 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014bd8:	6839      	ldr	r1, [r7, #0]
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f000 f8c2 	bl	8014d64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014be0:	4b10      	ldr	r3, [pc, #64]	; (8014c24 <ip_reass_free_complete_datagram+0x140>)
 8014be2:	881b      	ldrh	r3, [r3, #0]
 8014be4:	8bfa      	ldrh	r2, [r7, #30]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d905      	bls.n	8014bf6 <ip_reass_free_complete_datagram+0x112>
 8014bea:	4b09      	ldr	r3, [pc, #36]	; (8014c10 <ip_reass_free_complete_datagram+0x12c>)
 8014bec:	22d2      	movs	r2, #210	; 0xd2
 8014bee:	490e      	ldr	r1, [pc, #56]	; (8014c28 <ip_reass_free_complete_datagram+0x144>)
 8014bf0:	4809      	ldr	r0, [pc, #36]	; (8014c18 <ip_reass_free_complete_datagram+0x134>)
 8014bf2:	f000 fec3 	bl	801597c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014bf6:	4b0b      	ldr	r3, [pc, #44]	; (8014c24 <ip_reass_free_complete_datagram+0x140>)
 8014bf8:	881a      	ldrh	r2, [r3, #0]
 8014bfa:	8bfb      	ldrh	r3, [r7, #30]
 8014bfc:	1ad3      	subs	r3, r2, r3
 8014bfe:	b29a      	uxth	r2, r3
 8014c00:	4b08      	ldr	r3, [pc, #32]	; (8014c24 <ip_reass_free_complete_datagram+0x140>)
 8014c02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014c04:	8bfb      	ldrh	r3, [r7, #30]
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3720      	adds	r7, #32
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	08019a68 	.word	0x08019a68
 8014c14:	08019aa4 	.word	0x08019aa4
 8014c18:	08019ab0 	.word	0x08019ab0
 8014c1c:	08019ad8 	.word	0x08019ad8
 8014c20:	08019aec 	.word	0x08019aec
 8014c24:	2000b1b4 	.word	0x2000b1b4
 8014c28:	08019b0c 	.word	0x08019b0c

08014c2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b08a      	sub	sp, #40	; 0x28
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014c36:	2300      	movs	r3, #0
 8014c38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014c42:	2300      	movs	r3, #0
 8014c44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014c46:	2300      	movs	r3, #0
 8014c48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014c4a:	4b28      	ldr	r3, [pc, #160]	; (8014cec <ip_reass_remove_oldest_datagram+0xc0>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014c50:	e030      	b.n	8014cb4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c54:	695a      	ldr	r2, [r3, #20]
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	68db      	ldr	r3, [r3, #12]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d10c      	bne.n	8014c78 <ip_reass_remove_oldest_datagram+0x4c>
 8014c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c60:	699a      	ldr	r2, [r3, #24]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	691b      	ldr	r3, [r3, #16]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d106      	bne.n	8014c78 <ip_reass_remove_oldest_datagram+0x4c>
 8014c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6c:	899a      	ldrh	r2, [r3, #12]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	889b      	ldrh	r3, [r3, #4]
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d014      	beq.n	8014ca2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014c7e:	6a3b      	ldr	r3, [r7, #32]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d104      	bne.n	8014c8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	61bb      	str	r3, [r7, #24]
 8014c8c:	e009      	b.n	8014ca2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c90:	7fda      	ldrb	r2, [r3, #31]
 8014c92:	6a3b      	ldr	r3, [r7, #32]
 8014c94:	7fdb      	ldrb	r3, [r3, #31]
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d803      	bhi.n	8014ca2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d1cb      	bne.n	8014c52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014cba:	6a3b      	ldr	r3, [r7, #32]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d008      	beq.n	8014cd2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014cc0:	69b9      	ldr	r1, [r7, #24]
 8014cc2:	6a38      	ldr	r0, [r7, #32]
 8014cc4:	f7ff ff0e 	bl	8014ae4 <ip_reass_free_complete_datagram>
 8014cc8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014cca:	697a      	ldr	r2, [r7, #20]
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	4413      	add	r3, r2
 8014cd0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014cd2:	697a      	ldr	r2, [r7, #20]
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	da02      	bge.n	8014ce0 <ip_reass_remove_oldest_datagram+0xb4>
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	dcac      	bgt.n	8014c3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014ce0:	697b      	ldr	r3, [r7, #20]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3728      	adds	r7, #40	; 0x28
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	2000b1b0 	.word	0x2000b1b0

08014cf0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b084      	sub	sp, #16
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014cfa:	2004      	movs	r0, #4
 8014cfc:	f7f5 fb6c 	bl	800a3d8 <memp_malloc>
 8014d00:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d110      	bne.n	8014d2a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014d08:	6839      	ldr	r1, [r7, #0]
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7ff ff8e 	bl	8014c2c <ip_reass_remove_oldest_datagram>
 8014d10:	4602      	mov	r2, r0
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	4293      	cmp	r3, r2
 8014d16:	dc03      	bgt.n	8014d20 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014d18:	2004      	movs	r0, #4
 8014d1a:	f7f5 fb5d 	bl	800a3d8 <memp_malloc>
 8014d1e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d101      	bne.n	8014d2a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014d26:	2300      	movs	r3, #0
 8014d28:	e016      	b.n	8014d58 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014d2a:	2220      	movs	r2, #32
 8014d2c:	2100      	movs	r1, #0
 8014d2e:	68f8      	ldr	r0, [r7, #12]
 8014d30:	f000 fe1c 	bl	801596c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	220f      	movs	r2, #15
 8014d38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014d3a:	4b09      	ldr	r3, [pc, #36]	; (8014d60 <ip_reass_enqueue_new_datagram+0x70>)
 8014d3c:	681a      	ldr	r2, [r3, #0]
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014d42:	4a07      	ldr	r2, [pc, #28]	; (8014d60 <ip_reass_enqueue_new_datagram+0x70>)
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	3308      	adds	r3, #8
 8014d4c:	2214      	movs	r2, #20
 8014d4e:	6879      	ldr	r1, [r7, #4]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f000 fde3 	bl	801591c <memcpy>
  return ipr;
 8014d56:	68fb      	ldr	r3, [r7, #12]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	2000b1b0 	.word	0x2000b1b0

08014d64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b082      	sub	sp, #8
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014d6e:	4b10      	ldr	r3, [pc, #64]	; (8014db0 <ip_reass_dequeue_datagram+0x4c>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	687a      	ldr	r2, [r7, #4]
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d104      	bne.n	8014d82 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	4a0c      	ldr	r2, [pc, #48]	; (8014db0 <ip_reass_dequeue_datagram+0x4c>)
 8014d7e:	6013      	str	r3, [r2, #0]
 8014d80:	e00d      	b.n	8014d9e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d106      	bne.n	8014d96 <ip_reass_dequeue_datagram+0x32>
 8014d88:	4b0a      	ldr	r3, [pc, #40]	; (8014db4 <ip_reass_dequeue_datagram+0x50>)
 8014d8a:	f240 1245 	movw	r2, #325	; 0x145
 8014d8e:	490a      	ldr	r1, [pc, #40]	; (8014db8 <ip_reass_dequeue_datagram+0x54>)
 8014d90:	480a      	ldr	r0, [pc, #40]	; (8014dbc <ip_reass_dequeue_datagram+0x58>)
 8014d92:	f000 fdf3 	bl	801597c <iprintf>
    prev->next = ipr->next;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681a      	ldr	r2, [r3, #0]
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014d9e:	6879      	ldr	r1, [r7, #4]
 8014da0:	2004      	movs	r0, #4
 8014da2:	f7f5 fb89 	bl	800a4b8 <memp_free>
}
 8014da6:	bf00      	nop
 8014da8:	3708      	adds	r7, #8
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	2000b1b0 	.word	0x2000b1b0
 8014db4:	08019a68 	.word	0x08019a68
 8014db8:	08019b30 	.word	0x08019b30
 8014dbc:	08019ab0 	.word	0x08019ab0

08014dc0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b08c      	sub	sp, #48	; 0x30
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	60f8      	str	r0, [r7, #12]
 8014dc8:	60b9      	str	r1, [r7, #8]
 8014dca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	885b      	ldrh	r3, [r3, #2]
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7f4 fe81 	bl	8009ae8 <lwip_htons>
 8014de6:	4603      	mov	r3, r0
 8014de8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014dea:	69fb      	ldr	r3, [r7, #28]
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	f003 030f 	and.w	r3, r3, #15
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	009b      	lsls	r3, r3, #2
 8014df6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014df8:	7e7b      	ldrb	r3, [r7, #25]
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	8b7a      	ldrh	r2, [r7, #26]
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d202      	bcs.n	8014e08 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e02:	f04f 33ff 	mov.w	r3, #4294967295
 8014e06:	e135      	b.n	8015074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014e08:	7e7b      	ldrb	r3, [r7, #25]
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	8b7a      	ldrh	r2, [r7, #26]
 8014e0e:	1ad3      	subs	r3, r2, r3
 8014e10:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	88db      	ldrh	r3, [r3, #6]
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7f4 fe65 	bl	8009ae8 <lwip_htons>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	00db      	lsls	r3, r3, #3
 8014e28:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e32:	2200      	movs	r2, #0
 8014e34:	701a      	strb	r2, [r3, #0]
 8014e36:	2200      	movs	r2, #0
 8014e38:	705a      	strb	r2, [r3, #1]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	709a      	strb	r2, [r3, #2]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e44:	8afa      	ldrh	r2, [r7, #22]
 8014e46:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014e48:	8afa      	ldrh	r2, [r7, #22]
 8014e4a:	8b7b      	ldrh	r3, [r7, #26]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	b29a      	uxth	r2, r3
 8014e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e52:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e56:	88db      	ldrh	r3, [r3, #6]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	8afa      	ldrh	r2, [r7, #22]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d902      	bls.n	8014e66 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e60:	f04f 33ff 	mov.w	r3, #4294967295
 8014e64:	e106      	b.n	8015074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8014e6c:	e068      	b.n	8014f40 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e70:	685b      	ldr	r3, [r3, #4]
 8014e72:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e76:	889b      	ldrh	r3, [r3, #4]
 8014e78:	b29a      	uxth	r2, r3
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	889b      	ldrh	r3, [r3, #4]
 8014e7e:	b29b      	uxth	r3, r3
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d235      	bcs.n	8014ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e88:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d020      	beq.n	8014ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e92:	889b      	ldrh	r3, [r3, #4]
 8014e94:	b29a      	uxth	r2, r3
 8014e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e98:	88db      	ldrh	r3, [r3, #6]
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d307      	bcc.n	8014eb0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea2:	88db      	ldrh	r3, [r3, #6]
 8014ea4:	b29a      	uxth	r2, r3
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	889b      	ldrh	r3, [r3, #4]
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d902      	bls.n	8014eb6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8014eb4:	e0de      	b.n	8015074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb8:	68ba      	ldr	r2, [r7, #8]
 8014eba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ebe:	88db      	ldrh	r3, [r3, #6]
 8014ec0:	b29a      	uxth	r2, r3
 8014ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec4:	889b      	ldrh	r3, [r3, #4]
 8014ec6:	b29b      	uxth	r3, r3
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	d03d      	beq.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014ed0:	e03a      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ed4:	88db      	ldrh	r3, [r3, #6]
 8014ed6:	b29a      	uxth	r2, r3
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	889b      	ldrh	r3, [r3, #4]
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d902      	bls.n	8014ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee6:	e0c5      	b.n	8015074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	68ba      	ldr	r2, [r7, #8]
 8014eec:	605a      	str	r2, [r3, #4]
      break;
 8014eee:	e02b      	b.n	8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ef2:	889b      	ldrh	r3, [r3, #4]
 8014ef4:	b29a      	uxth	r2, r3
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	889b      	ldrh	r3, [r3, #4]
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	429a      	cmp	r2, r3
 8014efe:	d102      	bne.n	8014f06 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014f00:	f04f 33ff 	mov.w	r3, #4294967295
 8014f04:	e0b6      	b.n	8015074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f08:	889b      	ldrh	r3, [r3, #4]
 8014f0a:	b29a      	uxth	r2, r3
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	88db      	ldrh	r3, [r3, #6]
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d202      	bcs.n	8014f1c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014f16:	f04f 33ff 	mov.w	r3, #4294967295
 8014f1a:	e0ab      	b.n	8015074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d009      	beq.n	8014f36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f24:	88db      	ldrh	r3, [r3, #6]
 8014f26:	b29a      	uxth	r2, r3
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	889b      	ldrh	r3, [r3, #4]
 8014f2c:	b29b      	uxth	r3, r3
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d001      	beq.n	8014f36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014f32:	2300      	movs	r3, #0
 8014f34:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d193      	bne.n	8014e6e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014f46:	e000      	b.n	8014f4a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014f48:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d12d      	bne.n	8014fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d01c      	beq.n	8014f90 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f58:	88db      	ldrh	r3, [r3, #6]
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f5e:	889b      	ldrh	r3, [r3, #4]
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	429a      	cmp	r2, r3
 8014f64:	d906      	bls.n	8014f74 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014f66:	4b45      	ldr	r3, [pc, #276]	; (801507c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f68:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014f6c:	4944      	ldr	r1, [pc, #272]	; (8015080 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014f6e:	4845      	ldr	r0, [pc, #276]	; (8015084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f70:	f000 fd04 	bl	801597c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f76:	68ba      	ldr	r2, [r7, #8]
 8014f78:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7c:	88db      	ldrh	r3, [r3, #6]
 8014f7e:	b29a      	uxth	r2, r3
 8014f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f82:	889b      	ldrh	r3, [r3, #4]
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d010      	beq.n	8014fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	623b      	str	r3, [r7, #32]
 8014f8e:	e00d      	b.n	8014fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d006      	beq.n	8014fa6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014f98:	4b38      	ldr	r3, [pc, #224]	; (801507c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f9a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014f9e:	493a      	ldr	r1, [pc, #232]	; (8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014fa0:	4838      	ldr	r0, [pc, #224]	; (8015084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014fa2:	f000 fceb 	bl	801597c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	68ba      	ldr	r2, [r7, #8]
 8014faa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d105      	bne.n	8014fbe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	7f9b      	ldrb	r3, [r3, #30]
 8014fb6:	f003 0301 	and.w	r3, r3, #1
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d059      	beq.n	8015072 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014fbe:	6a3b      	ldr	r3, [r7, #32]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d04f      	beq.n	8015064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	685b      	ldr	r3, [r3, #4]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d006      	beq.n	8014fda <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	685b      	ldr	r3, [r3, #4]
 8014fd2:	889b      	ldrh	r3, [r3, #4]
 8014fd4:	b29b      	uxth	r3, r3
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d002      	beq.n	8014fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	623b      	str	r3, [r7, #32]
 8014fde:	e041      	b.n	8015064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014fea:	e012      	b.n	8015012 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fee:	685b      	ldr	r3, [r3, #4]
 8014ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff4:	88db      	ldrh	r3, [r3, #6]
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffa:	889b      	ldrh	r3, [r3, #4]
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d002      	beq.n	8015008 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015002:	2300      	movs	r3, #0
 8015004:	623b      	str	r3, [r7, #32]
            break;
 8015006:	e007      	b.n	8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015014:	2b00      	cmp	r3, #0
 8015016:	d1e9      	bne.n	8014fec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015018:	6a3b      	ldr	r3, [r7, #32]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d022      	beq.n	8015064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d106      	bne.n	8015034 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015026:	4b15      	ldr	r3, [pc, #84]	; (801507c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015028:	f240 12df 	movw	r2, #479	; 0x1df
 801502c:	4917      	ldr	r1, [pc, #92]	; (801508c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801502e:	4815      	ldr	r0, [pc, #84]	; (8015084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015030:	f000 fca4 	bl	801597c <iprintf>
          LWIP_ASSERT("sanity check",
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801503c:	429a      	cmp	r2, r3
 801503e:	d106      	bne.n	801504e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015040:	4b0e      	ldr	r3, [pc, #56]	; (801507c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015042:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015046:	4911      	ldr	r1, [pc, #68]	; (801508c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015048:	480e      	ldr	r0, [pc, #56]	; (8015084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801504a:	f000 fc97 	bl	801597c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d006      	beq.n	8015064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015056:	4b09      	ldr	r3, [pc, #36]	; (801507c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015058:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801505c:	490c      	ldr	r1, [pc, #48]	; (8015090 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801505e:	4809      	ldr	r0, [pc, #36]	; (8015084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015060:	f000 fc8c 	bl	801597c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	2b00      	cmp	r3, #0
 8015068:	bf14      	ite	ne
 801506a:	2301      	movne	r3, #1
 801506c:	2300      	moveq	r3, #0
 801506e:	b2db      	uxtb	r3, r3
 8015070:	e000      	b.n	8015074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015072:	2300      	movs	r3, #0
}
 8015074:	4618      	mov	r0, r3
 8015076:	3730      	adds	r7, #48	; 0x30
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}
 801507c:	08019a68 	.word	0x08019a68
 8015080:	08019b4c 	.word	0x08019b4c
 8015084:	08019ab0 	.word	0x08019ab0
 8015088:	08019b6c 	.word	0x08019b6c
 801508c:	08019ba4 	.word	0x08019ba4
 8015090:	08019bb4 	.word	0x08019bb4

08015094 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b08e      	sub	sp, #56	; 0x38
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80150a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	f003 030f 	and.w	r3, r3, #15
 80150aa:	b2db      	uxtb	r3, r3
 80150ac:	009b      	lsls	r3, r3, #2
 80150ae:	b2db      	uxtb	r3, r3
 80150b0:	2b14      	cmp	r3, #20
 80150b2:	f040 8171 	bne.w	8015398 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80150b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150b8:	88db      	ldrh	r3, [r3, #6]
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	4618      	mov	r0, r3
 80150be:	f7f4 fd13 	bl	8009ae8 <lwip_htons>
 80150c2:	4603      	mov	r3, r0
 80150c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80150c8:	b29b      	uxth	r3, r3
 80150ca:	00db      	lsls	r3, r3, #3
 80150cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80150ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d0:	885b      	ldrh	r3, [r3, #2]
 80150d2:	b29b      	uxth	r3, r3
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7f4 fd07 	bl	8009ae8 <lwip_htons>
 80150da:	4603      	mov	r3, r0
 80150dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80150de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	f003 030f 	and.w	r3, r3, #15
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	009b      	lsls	r3, r3, #2
 80150ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80150ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80150f6:	429a      	cmp	r2, r3
 80150f8:	f0c0 8150 	bcc.w	801539c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80150fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015100:	b29b      	uxth	r3, r3
 8015102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015104:	1ad3      	subs	r3, r2, r3
 8015106:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7f6 f8df 	bl	800b2cc <pbuf_clen>
 801510e:	4603      	mov	r3, r0
 8015110:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015112:	4b8c      	ldr	r3, [pc, #560]	; (8015344 <ip4_reass+0x2b0>)
 8015114:	881b      	ldrh	r3, [r3, #0]
 8015116:	461a      	mov	r2, r3
 8015118:	8c3b      	ldrh	r3, [r7, #32]
 801511a:	4413      	add	r3, r2
 801511c:	2b0a      	cmp	r3, #10
 801511e:	dd10      	ble.n	8015142 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015120:	8c3b      	ldrh	r3, [r7, #32]
 8015122:	4619      	mov	r1, r3
 8015124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015126:	f7ff fd81 	bl	8014c2c <ip_reass_remove_oldest_datagram>
 801512a:	4603      	mov	r3, r0
 801512c:	2b00      	cmp	r3, #0
 801512e:	f000 8137 	beq.w	80153a0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015132:	4b84      	ldr	r3, [pc, #528]	; (8015344 <ip4_reass+0x2b0>)
 8015134:	881b      	ldrh	r3, [r3, #0]
 8015136:	461a      	mov	r2, r3
 8015138:	8c3b      	ldrh	r3, [r7, #32]
 801513a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801513c:	2b0a      	cmp	r3, #10
 801513e:	f300 812f 	bgt.w	80153a0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015142:	4b81      	ldr	r3, [pc, #516]	; (8015348 <ip4_reass+0x2b4>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	633b      	str	r3, [r7, #48]	; 0x30
 8015148:	e015      	b.n	8015176 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801514c:	695a      	ldr	r2, [r3, #20]
 801514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	429a      	cmp	r2, r3
 8015154:	d10c      	bne.n	8015170 <ip4_reass+0xdc>
 8015156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015158:	699a      	ldr	r2, [r3, #24]
 801515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515c:	691b      	ldr	r3, [r3, #16]
 801515e:	429a      	cmp	r2, r3
 8015160:	d106      	bne.n	8015170 <ip4_reass+0xdc>
 8015162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015164:	899a      	ldrh	r2, [r3, #12]
 8015166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015168:	889b      	ldrh	r3, [r3, #4]
 801516a:	b29b      	uxth	r3, r3
 801516c:	429a      	cmp	r2, r3
 801516e:	d006      	beq.n	801517e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	633b      	str	r3, [r7, #48]	; 0x30
 8015176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015178:	2b00      	cmp	r3, #0
 801517a:	d1e6      	bne.n	801514a <ip4_reass+0xb6>
 801517c:	e000      	b.n	8015180 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801517e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015182:	2b00      	cmp	r3, #0
 8015184:	d109      	bne.n	801519a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015186:	8c3b      	ldrh	r3, [r7, #32]
 8015188:	4619      	mov	r1, r3
 801518a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801518c:	f7ff fdb0 	bl	8014cf0 <ip_reass_enqueue_new_datagram>
 8015190:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015194:	2b00      	cmp	r3, #0
 8015196:	d11c      	bne.n	80151d2 <ip4_reass+0x13e>
      goto nullreturn;
 8015198:	e105      	b.n	80153a6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801519c:	88db      	ldrh	r3, [r3, #6]
 801519e:	b29b      	uxth	r3, r3
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7f4 fca1 	bl	8009ae8 <lwip_htons>
 80151a6:	4603      	mov	r3, r0
 80151a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d110      	bne.n	80151d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80151b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b2:	89db      	ldrh	r3, [r3, #14]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7f4 fc97 	bl	8009ae8 <lwip_htons>
 80151ba:	4603      	mov	r3, r0
 80151bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d006      	beq.n	80151d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80151c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c6:	3308      	adds	r3, #8
 80151c8:	2214      	movs	r2, #20
 80151ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80151cc:	4618      	mov	r0, r3
 80151ce:	f000 fba5 	bl	801591c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80151d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d4:	88db      	ldrh	r3, [r3, #6]
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	f003 0320 	and.w	r3, r3, #32
 80151dc:	2b00      	cmp	r3, #0
 80151de:	bf0c      	ite	eq
 80151e0:	2301      	moveq	r3, #1
 80151e2:	2300      	movne	r3, #0
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d00e      	beq.n	801520c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80151ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80151f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80151f2:	4413      	add	r3, r2
 80151f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80151f6:	8b7a      	ldrh	r2, [r7, #26]
 80151f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80151fa:	429a      	cmp	r2, r3
 80151fc:	f0c0 80a0 	bcc.w	8015340 <ip4_reass+0x2ac>
 8015200:	8b7b      	ldrh	r3, [r7, #26]
 8015202:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015206:	4293      	cmp	r3, r2
 8015208:	f200 809a 	bhi.w	8015340 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801520c:	69fa      	ldr	r2, [r7, #28]
 801520e:	6879      	ldr	r1, [r7, #4]
 8015210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015212:	f7ff fdd5 	bl	8014dc0 <ip_reass_chain_frag_into_datagram_and_validate>
 8015216:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801521e:	f000 809b 	beq.w	8015358 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015222:	4b48      	ldr	r3, [pc, #288]	; (8015344 <ip4_reass+0x2b0>)
 8015224:	881a      	ldrh	r2, [r3, #0]
 8015226:	8c3b      	ldrh	r3, [r7, #32]
 8015228:	4413      	add	r3, r2
 801522a:	b29a      	uxth	r2, r3
 801522c:	4b45      	ldr	r3, [pc, #276]	; (8015344 <ip4_reass+0x2b0>)
 801522e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015230:	69fb      	ldr	r3, [r7, #28]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d00d      	beq.n	8015252 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015236:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801523a:	4413      	add	r3, r2
 801523c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015240:	8a7a      	ldrh	r2, [r7, #18]
 8015242:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015246:	7f9b      	ldrb	r3, [r3, #30]
 8015248:	f043 0301 	orr.w	r3, r3, #1
 801524c:	b2da      	uxtb	r2, r3
 801524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015250:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	2b01      	cmp	r3, #1
 8015256:	d171      	bne.n	801533c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801525a:	8b9b      	ldrh	r3, [r3, #28]
 801525c:	3314      	adds	r3, #20
 801525e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015274:	3308      	adds	r3, #8
 8015276:	2214      	movs	r2, #20
 8015278:	4619      	mov	r1, r3
 801527a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801527c:	f000 fb4e 	bl	801591c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015280:	8a3b      	ldrh	r3, [r7, #16]
 8015282:	4618      	mov	r0, r3
 8015284:	f7f4 fc30 	bl	8009ae8 <lwip_htons>
 8015288:	4603      	mov	r3, r0
 801528a:	461a      	mov	r2, r3
 801528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801528e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015292:	2200      	movs	r2, #0
 8015294:	719a      	strb	r2, [r3, #6]
 8015296:	2200      	movs	r2, #0
 8015298:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801529c:	2200      	movs	r2, #0
 801529e:	729a      	strb	r2, [r3, #10]
 80152a0:	2200      	movs	r2, #0
 80152a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80152a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80152aa:	e00d      	b.n	80152c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80152ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152ae:	685b      	ldr	r3, [r3, #4]
 80152b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80152b2:	2114      	movs	r1, #20
 80152b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80152b6:	f7f5 fefb 	bl	800b0b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80152ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f7f6 f83f 	bl	800b340 <pbuf_cat>
      r = iprh->next_pbuf;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80152c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d1ee      	bne.n	80152ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80152ce:	4b1e      	ldr	r3, [pc, #120]	; (8015348 <ip4_reass+0x2b4>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d102      	bne.n	80152de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80152d8:	2300      	movs	r3, #0
 80152da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152dc:	e010      	b.n	8015300 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80152de:	4b1a      	ldr	r3, [pc, #104]	; (8015348 <ip4_reass+0x2b4>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152e4:	e007      	b.n	80152f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80152e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d006      	beq.n	80152fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80152f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d1f4      	bne.n	80152e6 <ip4_reass+0x252>
 80152fc:	e000      	b.n	8015300 <ip4_reass+0x26c>
          break;
 80152fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015300:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015304:	f7ff fd2e 	bl	8014d64 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7f5 ffdf 	bl	800b2cc <pbuf_clen>
 801530e:	4603      	mov	r3, r0
 8015310:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015312:	4b0c      	ldr	r3, [pc, #48]	; (8015344 <ip4_reass+0x2b0>)
 8015314:	881b      	ldrh	r3, [r3, #0]
 8015316:	8c3a      	ldrh	r2, [r7, #32]
 8015318:	429a      	cmp	r2, r3
 801531a:	d906      	bls.n	801532a <ip4_reass+0x296>
 801531c:	4b0b      	ldr	r3, [pc, #44]	; (801534c <ip4_reass+0x2b8>)
 801531e:	f240 229b 	movw	r2, #667	; 0x29b
 8015322:	490b      	ldr	r1, [pc, #44]	; (8015350 <ip4_reass+0x2bc>)
 8015324:	480b      	ldr	r0, [pc, #44]	; (8015354 <ip4_reass+0x2c0>)
 8015326:	f000 fb29 	bl	801597c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801532a:	4b06      	ldr	r3, [pc, #24]	; (8015344 <ip4_reass+0x2b0>)
 801532c:	881a      	ldrh	r2, [r3, #0]
 801532e:	8c3b      	ldrh	r3, [r7, #32]
 8015330:	1ad3      	subs	r3, r2, r3
 8015332:	b29a      	uxth	r2, r3
 8015334:	4b03      	ldr	r3, [pc, #12]	; (8015344 <ip4_reass+0x2b0>)
 8015336:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	e038      	b.n	80153ae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801533c:	2300      	movs	r3, #0
 801533e:	e036      	b.n	80153ae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015340:	bf00      	nop
 8015342:	e00a      	b.n	801535a <ip4_reass+0x2c6>
 8015344:	2000b1b4 	.word	0x2000b1b4
 8015348:	2000b1b0 	.word	0x2000b1b0
 801534c:	08019a68 	.word	0x08019a68
 8015350:	08019bd8 	.word	0x08019bd8
 8015354:	08019ab0 	.word	0x08019ab0
    goto nullreturn_ipr;
 8015358:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801535c:	2b00      	cmp	r3, #0
 801535e:	d106      	bne.n	801536e <ip4_reass+0x2da>
 8015360:	4b15      	ldr	r3, [pc, #84]	; (80153b8 <ip4_reass+0x324>)
 8015362:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015366:	4915      	ldr	r1, [pc, #84]	; (80153bc <ip4_reass+0x328>)
 8015368:	4815      	ldr	r0, [pc, #84]	; (80153c0 <ip4_reass+0x32c>)
 801536a:	f000 fb07 	bl	801597c <iprintf>
  if (ipr->p == NULL) {
 801536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015370:	685b      	ldr	r3, [r3, #4]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d116      	bne.n	80153a4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015376:	4b13      	ldr	r3, [pc, #76]	; (80153c4 <ip4_reass+0x330>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801537c:	429a      	cmp	r2, r3
 801537e:	d006      	beq.n	801538e <ip4_reass+0x2fa>
 8015380:	4b0d      	ldr	r3, [pc, #52]	; (80153b8 <ip4_reass+0x324>)
 8015382:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015386:	4910      	ldr	r1, [pc, #64]	; (80153c8 <ip4_reass+0x334>)
 8015388:	480d      	ldr	r0, [pc, #52]	; (80153c0 <ip4_reass+0x32c>)
 801538a:	f000 faf7 	bl	801597c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801538e:	2100      	movs	r1, #0
 8015390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015392:	f7ff fce7 	bl	8014d64 <ip_reass_dequeue_datagram>
 8015396:	e006      	b.n	80153a6 <ip4_reass+0x312>
    goto nullreturn;
 8015398:	bf00      	nop
 801539a:	e004      	b.n	80153a6 <ip4_reass+0x312>
    goto nullreturn;
 801539c:	bf00      	nop
 801539e:	e002      	b.n	80153a6 <ip4_reass+0x312>
      goto nullreturn;
 80153a0:	bf00      	nop
 80153a2:	e000      	b.n	80153a6 <ip4_reass+0x312>
  }

nullreturn:
 80153a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f7f5 ff08 	bl	800b1bc <pbuf_free>
  return NULL;
 80153ac:	2300      	movs	r3, #0
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3738      	adds	r7, #56	; 0x38
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	08019a68 	.word	0x08019a68
 80153bc:	08019bf4 	.word	0x08019bf4
 80153c0:	08019ab0 	.word	0x08019ab0
 80153c4:	2000b1b0 	.word	0x2000b1b0
 80153c8:	08019c00 	.word	0x08019c00

080153cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80153d0:	2005      	movs	r0, #5
 80153d2:	f7f5 f801 	bl	800a3d8 <memp_malloc>
 80153d6:	4603      	mov	r3, r0
}
 80153d8:	4618      	mov	r0, r3
 80153da:	bd80      	pop	{r7, pc}

080153dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d106      	bne.n	80153f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80153ea:	4b07      	ldr	r3, [pc, #28]	; (8015408 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80153ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80153f0:	4906      	ldr	r1, [pc, #24]	; (801540c <ip_frag_free_pbuf_custom_ref+0x30>)
 80153f2:	4807      	ldr	r0, [pc, #28]	; (8015410 <ip_frag_free_pbuf_custom_ref+0x34>)
 80153f4:	f000 fac2 	bl	801597c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80153f8:	6879      	ldr	r1, [r7, #4]
 80153fa:	2005      	movs	r0, #5
 80153fc:	f7f5 f85c 	bl	800a4b8 <memp_free>
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}
 8015408:	08019a68 	.word	0x08019a68
 801540c:	08019c20 	.word	0x08019c20
 8015410:	08019ab0 	.word	0x08019ab0

08015414 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b084      	sub	sp, #16
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d106      	bne.n	8015434 <ipfrag_free_pbuf_custom+0x20>
 8015426:	4b11      	ldr	r3, [pc, #68]	; (801546c <ipfrag_free_pbuf_custom+0x58>)
 8015428:	f240 22ce 	movw	r2, #718	; 0x2ce
 801542c:	4910      	ldr	r1, [pc, #64]	; (8015470 <ipfrag_free_pbuf_custom+0x5c>)
 801542e:	4811      	ldr	r0, [pc, #68]	; (8015474 <ipfrag_free_pbuf_custom+0x60>)
 8015430:	f000 faa4 	bl	801597c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015434:	68fa      	ldr	r2, [r7, #12]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	429a      	cmp	r2, r3
 801543a:	d006      	beq.n	801544a <ipfrag_free_pbuf_custom+0x36>
 801543c:	4b0b      	ldr	r3, [pc, #44]	; (801546c <ipfrag_free_pbuf_custom+0x58>)
 801543e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015442:	490d      	ldr	r1, [pc, #52]	; (8015478 <ipfrag_free_pbuf_custom+0x64>)
 8015444:	480b      	ldr	r0, [pc, #44]	; (8015474 <ipfrag_free_pbuf_custom+0x60>)
 8015446:	f000 fa99 	bl	801597c <iprintf>
  if (pcr->original != NULL) {
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	695b      	ldr	r3, [r3, #20]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d004      	beq.n	801545c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	695b      	ldr	r3, [r3, #20]
 8015456:	4618      	mov	r0, r3
 8015458:	f7f5 feb0 	bl	800b1bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	f7ff ffbd 	bl	80153dc <ip_frag_free_pbuf_custom_ref>
}
 8015462:	bf00      	nop
 8015464:	3710      	adds	r7, #16
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	08019a68 	.word	0x08019a68
 8015470:	08019c2c 	.word	0x08019c2c
 8015474:	08019ab0 	.word	0x08019ab0
 8015478:	08019c38 	.word	0x08019c38

0801547c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b094      	sub	sp, #80	; 0x50
 8015480:	af02      	add	r7, sp, #8
 8015482:	60f8      	str	r0, [r7, #12]
 8015484:	60b9      	str	r1, [r7, #8]
 8015486:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015488:	2300      	movs	r3, #0
 801548a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015492:	3b14      	subs	r3, #20
 8015494:	2b00      	cmp	r3, #0
 8015496:	da00      	bge.n	801549a <ip4_frag+0x1e>
 8015498:	3307      	adds	r3, #7
 801549a:	10db      	asrs	r3, r3, #3
 801549c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801549e:	2314      	movs	r3, #20
 80154a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80154a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80154ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	f003 030f 	and.w	r3, r3, #15
 80154b4:	b2db      	uxtb	r3, r3
 80154b6:	009b      	lsls	r3, r3, #2
 80154b8:	b2db      	uxtb	r3, r3
 80154ba:	2b14      	cmp	r3, #20
 80154bc:	d002      	beq.n	80154c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80154be:	f06f 0305 	mvn.w	r3, #5
 80154c2:	e110      	b.n	80156e6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	895b      	ldrh	r3, [r3, #10]
 80154c8:	2b13      	cmp	r3, #19
 80154ca:	d809      	bhi.n	80154e0 <ip4_frag+0x64>
 80154cc:	4b88      	ldr	r3, [pc, #544]	; (80156f0 <ip4_frag+0x274>)
 80154ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80154d2:	4988      	ldr	r1, [pc, #544]	; (80156f4 <ip4_frag+0x278>)
 80154d4:	4888      	ldr	r0, [pc, #544]	; (80156f8 <ip4_frag+0x27c>)
 80154d6:	f000 fa51 	bl	801597c <iprintf>
 80154da:	f06f 0305 	mvn.w	r3, #5
 80154de:	e102      	b.n	80156e6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80154e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e2:	88db      	ldrh	r3, [r3, #6]
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7f4 fafe 	bl	8009ae8 <lwip_htons>
 80154ec:	4603      	mov	r3, r0
 80154ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80154f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80154f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80154fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80154fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015500:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	891b      	ldrh	r3, [r3, #8]
 8015506:	3b14      	subs	r3, #20
 8015508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801550c:	e0e1      	b.n	80156d2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801550e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015510:	00db      	lsls	r3, r3, #3
 8015512:	b29b      	uxth	r3, r3
 8015514:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015518:	4293      	cmp	r3, r2
 801551a:	bf28      	it	cs
 801551c:	4613      	movcs	r3, r2
 801551e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015520:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015524:	2114      	movs	r1, #20
 8015526:	200e      	movs	r0, #14
 8015528:	f7f5 fb64 	bl	800abf4 <pbuf_alloc>
 801552c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015530:	2b00      	cmp	r3, #0
 8015532:	f000 80d5 	beq.w	80156e0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015538:	895b      	ldrh	r3, [r3, #10]
 801553a:	2b13      	cmp	r3, #19
 801553c:	d806      	bhi.n	801554c <ip4_frag+0xd0>
 801553e:	4b6c      	ldr	r3, [pc, #432]	; (80156f0 <ip4_frag+0x274>)
 8015540:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015544:	496d      	ldr	r1, [pc, #436]	; (80156fc <ip4_frag+0x280>)
 8015546:	486c      	ldr	r0, [pc, #432]	; (80156f8 <ip4_frag+0x27c>)
 8015548:	f000 fa18 	bl	801597c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	2214      	movs	r2, #20
 8015552:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015554:	4618      	mov	r0, r3
 8015556:	f000 f9e1 	bl	801591c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015560:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015562:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015566:	e064      	b.n	8015632 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	895a      	ldrh	r2, [r3, #10]
 801556c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	895b      	ldrh	r3, [r3, #10]
 8015576:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015578:	429a      	cmp	r2, r3
 801557a:	d906      	bls.n	801558a <ip4_frag+0x10e>
 801557c:	4b5c      	ldr	r3, [pc, #368]	; (80156f0 <ip4_frag+0x274>)
 801557e:	f240 322d 	movw	r2, #813	; 0x32d
 8015582:	495f      	ldr	r1, [pc, #380]	; (8015700 <ip4_frag+0x284>)
 8015584:	485c      	ldr	r0, [pc, #368]	; (80156f8 <ip4_frag+0x27c>)
 8015586:	f000 f9f9 	bl	801597c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801558a:	8bfa      	ldrh	r2, [r7, #30]
 801558c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015590:	4293      	cmp	r3, r2
 8015592:	bf28      	it	cs
 8015594:	4613      	movcs	r3, r2
 8015596:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801559a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d105      	bne.n	80155ae <ip4_frag+0x132>
        poff = 0;
 80155a2:	2300      	movs	r3, #0
 80155a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	60fb      	str	r3, [r7, #12]
        continue;
 80155ac:	e041      	b.n	8015632 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80155ae:	f7ff ff0d 	bl	80153cc <ip_frag_alloc_pbuf_custom_ref>
 80155b2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80155b4:	69bb      	ldr	r3, [r7, #24]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d103      	bne.n	80155c2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80155ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155bc:	f7f5 fdfe 	bl	800b1bc <pbuf_free>
        goto memerr;
 80155c0:	e08f      	b.n	80156e2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80155c2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80155c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80155ca:	4413      	add	r3, r2
 80155cc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80155d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80155d4:	9201      	str	r2, [sp, #4]
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	4603      	mov	r3, r0
 80155da:	2241      	movs	r2, #65	; 0x41
 80155dc:	2000      	movs	r0, #0
 80155de:	f7f5 fc33 	bl	800ae48 <pbuf_alloced_custom>
 80155e2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d106      	bne.n	80155f8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80155ea:	69b8      	ldr	r0, [r7, #24]
 80155ec:	f7ff fef6 	bl	80153dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80155f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155f2:	f7f5 fde3 	bl	800b1bc <pbuf_free>
        goto memerr;
 80155f6:	e074      	b.n	80156e2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80155f8:	68f8      	ldr	r0, [r7, #12]
 80155fa:	f7f5 fe7f 	bl	800b2fc <pbuf_ref>
      pcr->original = p;
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	68fa      	ldr	r2, [r7, #12]
 8015602:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015604:	69bb      	ldr	r3, [r7, #24]
 8015606:	4a3f      	ldr	r2, [pc, #252]	; (8015704 <ip4_frag+0x288>)
 8015608:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801560a:	6979      	ldr	r1, [r7, #20]
 801560c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801560e:	f7f5 fe97 	bl	800b340 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015612:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015616:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801561a:	1ad3      	subs	r3, r2, r3
 801561c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015620:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015624:	2b00      	cmp	r3, #0
 8015626:	d004      	beq.n	8015632 <ip4_frag+0x1b6>
        poff = 0;
 8015628:	2300      	movs	r3, #0
 801562a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015632:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015636:	2b00      	cmp	r3, #0
 8015638:	d196      	bne.n	8015568 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801563a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801563c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015640:	4413      	add	r3, r2
 8015642:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015648:	f1a3 0213 	sub.w	r2, r3, #19
 801564c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015650:	429a      	cmp	r2, r3
 8015652:	bfcc      	ite	gt
 8015654:	2301      	movgt	r3, #1
 8015656:	2300      	movle	r3, #0
 8015658:	b2db      	uxtb	r3, r3
 801565a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801565c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015664:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015666:	6a3b      	ldr	r3, [r7, #32]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d002      	beq.n	8015672 <ip4_frag+0x1f6>
 801566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566e:	2b00      	cmp	r3, #0
 8015670:	d003      	beq.n	801567a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015672:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015678:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801567a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801567c:	4618      	mov	r0, r3
 801567e:	f7f4 fa33 	bl	8009ae8 <lwip_htons>
 8015682:	4603      	mov	r3, r0
 8015684:	461a      	mov	r2, r3
 8015686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015688:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801568a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801568c:	3314      	adds	r3, #20
 801568e:	b29b      	uxth	r3, r3
 8015690:	4618      	mov	r0, r3
 8015692:	f7f4 fa29 	bl	8009ae8 <lwip_htons>
 8015696:	4603      	mov	r3, r0
 8015698:	461a      	mov	r2, r3
 801569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801569c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a0:	2200      	movs	r2, #0
 80156a2:	729a      	strb	r2, [r3, #10]
 80156a4:	2200      	movs	r2, #0
 80156a6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	695b      	ldr	r3, [r3, #20]
 80156ac:	687a      	ldr	r2, [r7, #4]
 80156ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80156b0:	68b8      	ldr	r0, [r7, #8]
 80156b2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80156b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156b6:	f7f5 fd81 	bl	800b1bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 80156ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80156be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80156c0:	1ad3      	subs	r3, r2, r3
 80156c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80156c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80156ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156cc:	4413      	add	r3, r2
 80156ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80156d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	f47f af19 	bne.w	801550e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80156dc:	2300      	movs	r3, #0
 80156de:	e002      	b.n	80156e6 <ip4_frag+0x26a>
      goto memerr;
 80156e0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80156e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3748      	adds	r7, #72	; 0x48
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	08019a68 	.word	0x08019a68
 80156f4:	08019c44 	.word	0x08019c44
 80156f8:	08019ab0 	.word	0x08019ab0
 80156fc:	08019c60 	.word	0x08019c60
 8015700:	08019c80 	.word	0x08019c80
 8015704:	08015415 	.word	0x08015415

08015708 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b086      	sub	sp, #24
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015712:	230e      	movs	r3, #14
 8015714:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	895b      	ldrh	r3, [r3, #10]
 801571a:	2b0e      	cmp	r3, #14
 801571c:	d96e      	bls.n	80157fc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	7bdb      	ldrb	r3, [r3, #15]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d106      	bne.n	8015734 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801572c:	3301      	adds	r3, #1
 801572e:	b2da      	uxtb	r2, r3
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	7b1a      	ldrb	r2, [r3, #12]
 801573e:	7b5b      	ldrb	r3, [r3, #13]
 8015740:	021b      	lsls	r3, r3, #8
 8015742:	4313      	orrs	r3, r2
 8015744:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015746:	693b      	ldr	r3, [r7, #16]
 8015748:	781b      	ldrb	r3, [r3, #0]
 801574a:	f003 0301 	and.w	r3, r3, #1
 801574e:	2b00      	cmp	r3, #0
 8015750:	d023      	beq.n	801579a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	781b      	ldrb	r3, [r3, #0]
 8015756:	2b01      	cmp	r3, #1
 8015758:	d10f      	bne.n	801577a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801575a:	693b      	ldr	r3, [r7, #16]
 801575c:	785b      	ldrb	r3, [r3, #1]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d11b      	bne.n	801579a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015766:	2b5e      	cmp	r3, #94	; 0x5e
 8015768:	d117      	bne.n	801579a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	7b5b      	ldrb	r3, [r3, #13]
 801576e:	f043 0310 	orr.w	r3, r3, #16
 8015772:	b2da      	uxtb	r2, r3
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	735a      	strb	r2, [r3, #13]
 8015778:	e00f      	b.n	801579a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	2206      	movs	r2, #6
 801577e:	4928      	ldr	r1, [pc, #160]	; (8015820 <ethernet_input+0x118>)
 8015780:	4618      	mov	r0, r3
 8015782:	f000 f8bb 	bl	80158fc <memcmp>
 8015786:	4603      	mov	r3, r0
 8015788:	2b00      	cmp	r3, #0
 801578a:	d106      	bne.n	801579a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	7b5b      	ldrb	r3, [r3, #13]
 8015790:	f043 0308 	orr.w	r3, r3, #8
 8015794:	b2da      	uxtb	r2, r3
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801579a:	89fb      	ldrh	r3, [r7, #14]
 801579c:	2b08      	cmp	r3, #8
 801579e:	d003      	beq.n	80157a8 <ethernet_input+0xa0>
 80157a0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80157a4:	d014      	beq.n	80157d0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80157a6:	e032      	b.n	801580e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80157a8:	683b      	ldr	r3, [r7, #0]
 80157aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157ae:	f003 0308 	and.w	r3, r3, #8
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d024      	beq.n	8015800 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80157b6:	8afb      	ldrh	r3, [r7, #22]
 80157b8:	4619      	mov	r1, r3
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f7f5 fc78 	bl	800b0b0 <pbuf_remove_header>
 80157c0:	4603      	mov	r3, r0
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d11e      	bne.n	8015804 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80157c6:	6839      	ldr	r1, [r7, #0]
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f7fe ff03 	bl	80145d4 <ip4_input>
      break;
 80157ce:	e013      	b.n	80157f8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80157d0:	683b      	ldr	r3, [r7, #0]
 80157d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157d6:	f003 0308 	and.w	r3, r3, #8
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d014      	beq.n	8015808 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80157de:	8afb      	ldrh	r3, [r7, #22]
 80157e0:	4619      	mov	r1, r3
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f7f5 fc64 	bl	800b0b0 <pbuf_remove_header>
 80157e8:	4603      	mov	r3, r0
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d10e      	bne.n	801580c <ethernet_input+0x104>
        etharp_input(p, netif);
 80157ee:	6839      	ldr	r1, [r7, #0]
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f7fe f89f 	bl	8013934 <etharp_input>
      break;
 80157f6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80157f8:	2300      	movs	r3, #0
 80157fa:	e00c      	b.n	8015816 <ethernet_input+0x10e>
    goto free_and_return;
 80157fc:	bf00      	nop
 80157fe:	e006      	b.n	801580e <ethernet_input+0x106>
        goto free_and_return;
 8015800:	bf00      	nop
 8015802:	e004      	b.n	801580e <ethernet_input+0x106>
        goto free_and_return;
 8015804:	bf00      	nop
 8015806:	e002      	b.n	801580e <ethernet_input+0x106>
        goto free_and_return;
 8015808:	bf00      	nop
 801580a:	e000      	b.n	801580e <ethernet_input+0x106>
        goto free_and_return;
 801580c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f7f5 fcd4 	bl	800b1bc <pbuf_free>
  return ERR_OK;
 8015814:	2300      	movs	r3, #0
}
 8015816:	4618      	mov	r0, r3
 8015818:	3718      	adds	r7, #24
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	0801c510 	.word	0x0801c510

08015824 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015824:	b580      	push	{r7, lr}
 8015826:	b086      	sub	sp, #24
 8015828:	af00      	add	r7, sp, #0
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	60b9      	str	r1, [r7, #8]
 801582e:	607a      	str	r2, [r7, #4]
 8015830:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015832:	8c3b      	ldrh	r3, [r7, #32]
 8015834:	4618      	mov	r0, r3
 8015836:	f7f4 f957 	bl	8009ae8 <lwip_htons>
 801583a:	4603      	mov	r3, r0
 801583c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801583e:	210e      	movs	r1, #14
 8015840:	68b8      	ldr	r0, [r7, #8]
 8015842:	f7f5 fc25 	bl	800b090 <pbuf_add_header>
 8015846:	4603      	mov	r3, r0
 8015848:	2b00      	cmp	r3, #0
 801584a:	d125      	bne.n	8015898 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	685b      	ldr	r3, [r3, #4]
 8015850:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015852:	693b      	ldr	r3, [r7, #16]
 8015854:	8afa      	ldrh	r2, [r7, #22]
 8015856:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	2206      	movs	r2, #6
 801585c:	6839      	ldr	r1, [r7, #0]
 801585e:	4618      	mov	r0, r3
 8015860:	f000 f85c 	bl	801591c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015864:	693b      	ldr	r3, [r7, #16]
 8015866:	3306      	adds	r3, #6
 8015868:	2206      	movs	r2, #6
 801586a:	6879      	ldr	r1, [r7, #4]
 801586c:	4618      	mov	r0, r3
 801586e:	f000 f855 	bl	801591c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015878:	2b06      	cmp	r3, #6
 801587a:	d006      	beq.n	801588a <ethernet_output+0x66>
 801587c:	4b0a      	ldr	r3, [pc, #40]	; (80158a8 <ethernet_output+0x84>)
 801587e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015882:	490a      	ldr	r1, [pc, #40]	; (80158ac <ethernet_output+0x88>)
 8015884:	480a      	ldr	r0, [pc, #40]	; (80158b0 <ethernet_output+0x8c>)
 8015886:	f000 f879 	bl	801597c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	699b      	ldr	r3, [r3, #24]
 801588e:	68b9      	ldr	r1, [r7, #8]
 8015890:	68f8      	ldr	r0, [r7, #12]
 8015892:	4798      	blx	r3
 8015894:	4603      	mov	r3, r0
 8015896:	e002      	b.n	801589e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015898:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801589a:	f06f 0301 	mvn.w	r3, #1
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3718      	adds	r7, #24
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	08019c90 	.word	0x08019c90
 80158ac:	08019cc8 	.word	0x08019cc8
 80158b0:	08019cfc 	.word	0x08019cfc

080158b4 <__libc_init_array>:
 80158b4:	b570      	push	{r4, r5, r6, lr}
 80158b6:	4d0d      	ldr	r5, [pc, #52]	; (80158ec <__libc_init_array+0x38>)
 80158b8:	4c0d      	ldr	r4, [pc, #52]	; (80158f0 <__libc_init_array+0x3c>)
 80158ba:	1b64      	subs	r4, r4, r5
 80158bc:	10a4      	asrs	r4, r4, #2
 80158be:	2600      	movs	r6, #0
 80158c0:	42a6      	cmp	r6, r4
 80158c2:	d109      	bne.n	80158d8 <__libc_init_array+0x24>
 80158c4:	4d0b      	ldr	r5, [pc, #44]	; (80158f4 <__libc_init_array+0x40>)
 80158c6:	4c0c      	ldr	r4, [pc, #48]	; (80158f8 <__libc_init_array+0x44>)
 80158c8:	f001 fa5c 	bl	8016d84 <_init>
 80158cc:	1b64      	subs	r4, r4, r5
 80158ce:	10a4      	asrs	r4, r4, #2
 80158d0:	2600      	movs	r6, #0
 80158d2:	42a6      	cmp	r6, r4
 80158d4:	d105      	bne.n	80158e2 <__libc_init_array+0x2e>
 80158d6:	bd70      	pop	{r4, r5, r6, pc}
 80158d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80158dc:	4798      	blx	r3
 80158de:	3601      	adds	r6, #1
 80158e0:	e7ee      	b.n	80158c0 <__libc_init_array+0xc>
 80158e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80158e6:	4798      	blx	r3
 80158e8:	3601      	adds	r6, #1
 80158ea:	e7f2      	b.n	80158d2 <__libc_init_array+0x1e>
 80158ec:	0801c670 	.word	0x0801c670
 80158f0:	0801c670 	.word	0x0801c670
 80158f4:	0801c670 	.word	0x0801c670
 80158f8:	0801c674 	.word	0x0801c674

080158fc <memcmp>:
 80158fc:	b510      	push	{r4, lr}
 80158fe:	3901      	subs	r1, #1
 8015900:	4402      	add	r2, r0
 8015902:	4290      	cmp	r0, r2
 8015904:	d101      	bne.n	801590a <memcmp+0xe>
 8015906:	2000      	movs	r0, #0
 8015908:	e005      	b.n	8015916 <memcmp+0x1a>
 801590a:	7803      	ldrb	r3, [r0, #0]
 801590c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015910:	42a3      	cmp	r3, r4
 8015912:	d001      	beq.n	8015918 <memcmp+0x1c>
 8015914:	1b18      	subs	r0, r3, r4
 8015916:	bd10      	pop	{r4, pc}
 8015918:	3001      	adds	r0, #1
 801591a:	e7f2      	b.n	8015902 <memcmp+0x6>

0801591c <memcpy>:
 801591c:	440a      	add	r2, r1
 801591e:	4291      	cmp	r1, r2
 8015920:	f100 33ff 	add.w	r3, r0, #4294967295
 8015924:	d100      	bne.n	8015928 <memcpy+0xc>
 8015926:	4770      	bx	lr
 8015928:	b510      	push	{r4, lr}
 801592a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801592e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015932:	4291      	cmp	r1, r2
 8015934:	d1f9      	bne.n	801592a <memcpy+0xe>
 8015936:	bd10      	pop	{r4, pc}

08015938 <memmove>:
 8015938:	4288      	cmp	r0, r1
 801593a:	b510      	push	{r4, lr}
 801593c:	eb01 0402 	add.w	r4, r1, r2
 8015940:	d902      	bls.n	8015948 <memmove+0x10>
 8015942:	4284      	cmp	r4, r0
 8015944:	4623      	mov	r3, r4
 8015946:	d807      	bhi.n	8015958 <memmove+0x20>
 8015948:	1e43      	subs	r3, r0, #1
 801594a:	42a1      	cmp	r1, r4
 801594c:	d008      	beq.n	8015960 <memmove+0x28>
 801594e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015956:	e7f8      	b.n	801594a <memmove+0x12>
 8015958:	4402      	add	r2, r0
 801595a:	4601      	mov	r1, r0
 801595c:	428a      	cmp	r2, r1
 801595e:	d100      	bne.n	8015962 <memmove+0x2a>
 8015960:	bd10      	pop	{r4, pc}
 8015962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801596a:	e7f7      	b.n	801595c <memmove+0x24>

0801596c <memset>:
 801596c:	4402      	add	r2, r0
 801596e:	4603      	mov	r3, r0
 8015970:	4293      	cmp	r3, r2
 8015972:	d100      	bne.n	8015976 <memset+0xa>
 8015974:	4770      	bx	lr
 8015976:	f803 1b01 	strb.w	r1, [r3], #1
 801597a:	e7f9      	b.n	8015970 <memset+0x4>

0801597c <iprintf>:
 801597c:	b40f      	push	{r0, r1, r2, r3}
 801597e:	4b0a      	ldr	r3, [pc, #40]	; (80159a8 <iprintf+0x2c>)
 8015980:	b513      	push	{r0, r1, r4, lr}
 8015982:	681c      	ldr	r4, [r3, #0]
 8015984:	b124      	cbz	r4, 8015990 <iprintf+0x14>
 8015986:	69a3      	ldr	r3, [r4, #24]
 8015988:	b913      	cbnz	r3, 8015990 <iprintf+0x14>
 801598a:	4620      	mov	r0, r4
 801598c:	f000 f8e2 	bl	8015b54 <__sinit>
 8015990:	ab05      	add	r3, sp, #20
 8015992:	9a04      	ldr	r2, [sp, #16]
 8015994:	68a1      	ldr	r1, [r4, #8]
 8015996:	9301      	str	r3, [sp, #4]
 8015998:	4620      	mov	r0, r4
 801599a:	f000 fbfb 	bl	8016194 <_vfiprintf_r>
 801599e:	b002      	add	sp, #8
 80159a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159a4:	b004      	add	sp, #16
 80159a6:	4770      	bx	lr
 80159a8:	20000064 	.word	0x20000064

080159ac <rand>:
 80159ac:	4b16      	ldr	r3, [pc, #88]	; (8015a08 <rand+0x5c>)
 80159ae:	b510      	push	{r4, lr}
 80159b0:	681c      	ldr	r4, [r3, #0]
 80159b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80159b4:	b9b3      	cbnz	r3, 80159e4 <rand+0x38>
 80159b6:	2018      	movs	r0, #24
 80159b8:	f000 f97e 	bl	8015cb8 <malloc>
 80159bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80159be:	b928      	cbnz	r0, 80159cc <rand+0x20>
 80159c0:	4602      	mov	r2, r0
 80159c2:	4b12      	ldr	r3, [pc, #72]	; (8015a0c <rand+0x60>)
 80159c4:	4812      	ldr	r0, [pc, #72]	; (8015a10 <rand+0x64>)
 80159c6:	214e      	movs	r1, #78	; 0x4e
 80159c8:	f000 f84e 	bl	8015a68 <__assert_func>
 80159cc:	4a11      	ldr	r2, [pc, #68]	; (8015a14 <rand+0x68>)
 80159ce:	4b12      	ldr	r3, [pc, #72]	; (8015a18 <rand+0x6c>)
 80159d0:	e9c0 2300 	strd	r2, r3, [r0]
 80159d4:	4b11      	ldr	r3, [pc, #68]	; (8015a1c <rand+0x70>)
 80159d6:	6083      	str	r3, [r0, #8]
 80159d8:	230b      	movs	r3, #11
 80159da:	8183      	strh	r3, [r0, #12]
 80159dc:	2201      	movs	r2, #1
 80159de:	2300      	movs	r3, #0
 80159e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80159e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80159e6:	4a0e      	ldr	r2, [pc, #56]	; (8015a20 <rand+0x74>)
 80159e8:	6920      	ldr	r0, [r4, #16]
 80159ea:	6963      	ldr	r3, [r4, #20]
 80159ec:	490d      	ldr	r1, [pc, #52]	; (8015a24 <rand+0x78>)
 80159ee:	4342      	muls	r2, r0
 80159f0:	fb01 2203 	mla	r2, r1, r3, r2
 80159f4:	fba0 0101 	umull	r0, r1, r0, r1
 80159f8:	1c43      	adds	r3, r0, #1
 80159fa:	eb42 0001 	adc.w	r0, r2, r1
 80159fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8015a02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015a06:	bd10      	pop	{r4, pc}
 8015a08:	20000064 	.word	0x20000064
 8015a0c:	0801c524 	.word	0x0801c524
 8015a10:	0801c53b 	.word	0x0801c53b
 8015a14:	abcd330e 	.word	0xabcd330e
 8015a18:	e66d1234 	.word	0xe66d1234
 8015a1c:	0005deec 	.word	0x0005deec
 8015a20:	5851f42d 	.word	0x5851f42d
 8015a24:	4c957f2d 	.word	0x4c957f2d

08015a28 <siprintf>:
 8015a28:	b40e      	push	{r1, r2, r3}
 8015a2a:	b500      	push	{lr}
 8015a2c:	b09c      	sub	sp, #112	; 0x70
 8015a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8015a30:	9002      	str	r0, [sp, #8]
 8015a32:	9006      	str	r0, [sp, #24]
 8015a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a38:	4809      	ldr	r0, [pc, #36]	; (8015a60 <siprintf+0x38>)
 8015a3a:	9107      	str	r1, [sp, #28]
 8015a3c:	9104      	str	r1, [sp, #16]
 8015a3e:	4909      	ldr	r1, [pc, #36]	; (8015a64 <siprintf+0x3c>)
 8015a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a44:	9105      	str	r1, [sp, #20]
 8015a46:	6800      	ldr	r0, [r0, #0]
 8015a48:	9301      	str	r3, [sp, #4]
 8015a4a:	a902      	add	r1, sp, #8
 8015a4c:	f000 fa78 	bl	8015f40 <_svfiprintf_r>
 8015a50:	9b02      	ldr	r3, [sp, #8]
 8015a52:	2200      	movs	r2, #0
 8015a54:	701a      	strb	r2, [r3, #0]
 8015a56:	b01c      	add	sp, #112	; 0x70
 8015a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a5c:	b003      	add	sp, #12
 8015a5e:	4770      	bx	lr
 8015a60:	20000064 	.word	0x20000064
 8015a64:	ffff0208 	.word	0xffff0208

08015a68 <__assert_func>:
 8015a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a6a:	4614      	mov	r4, r2
 8015a6c:	461a      	mov	r2, r3
 8015a6e:	4b09      	ldr	r3, [pc, #36]	; (8015a94 <__assert_func+0x2c>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	4605      	mov	r5, r0
 8015a74:	68d8      	ldr	r0, [r3, #12]
 8015a76:	b14c      	cbz	r4, 8015a8c <__assert_func+0x24>
 8015a78:	4b07      	ldr	r3, [pc, #28]	; (8015a98 <__assert_func+0x30>)
 8015a7a:	9100      	str	r1, [sp, #0]
 8015a7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a80:	4906      	ldr	r1, [pc, #24]	; (8015a9c <__assert_func+0x34>)
 8015a82:	462b      	mov	r3, r5
 8015a84:	f000 f8e4 	bl	8015c50 <fiprintf>
 8015a88:	f000 ff6e 	bl	8016968 <abort>
 8015a8c:	4b04      	ldr	r3, [pc, #16]	; (8015aa0 <__assert_func+0x38>)
 8015a8e:	461c      	mov	r4, r3
 8015a90:	e7f3      	b.n	8015a7a <__assert_func+0x12>
 8015a92:	bf00      	nop
 8015a94:	20000064 	.word	0x20000064
 8015a98:	0801c596 	.word	0x0801c596
 8015a9c:	0801c5a3 	.word	0x0801c5a3
 8015aa0:	0801c5d1 	.word	0x0801c5d1

08015aa4 <std>:
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	b510      	push	{r4, lr}
 8015aa8:	4604      	mov	r4, r0
 8015aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8015aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015ab2:	6083      	str	r3, [r0, #8]
 8015ab4:	8181      	strh	r1, [r0, #12]
 8015ab6:	6643      	str	r3, [r0, #100]	; 0x64
 8015ab8:	81c2      	strh	r2, [r0, #14]
 8015aba:	6183      	str	r3, [r0, #24]
 8015abc:	4619      	mov	r1, r3
 8015abe:	2208      	movs	r2, #8
 8015ac0:	305c      	adds	r0, #92	; 0x5c
 8015ac2:	f7ff ff53 	bl	801596c <memset>
 8015ac6:	4b05      	ldr	r3, [pc, #20]	; (8015adc <std+0x38>)
 8015ac8:	6263      	str	r3, [r4, #36]	; 0x24
 8015aca:	4b05      	ldr	r3, [pc, #20]	; (8015ae0 <std+0x3c>)
 8015acc:	62a3      	str	r3, [r4, #40]	; 0x28
 8015ace:	4b05      	ldr	r3, [pc, #20]	; (8015ae4 <std+0x40>)
 8015ad0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015ad2:	4b05      	ldr	r3, [pc, #20]	; (8015ae8 <std+0x44>)
 8015ad4:	6224      	str	r4, [r4, #32]
 8015ad6:	6323      	str	r3, [r4, #48]	; 0x30
 8015ad8:	bd10      	pop	{r4, pc}
 8015ada:	bf00      	nop
 8015adc:	0801673d 	.word	0x0801673d
 8015ae0:	0801675f 	.word	0x0801675f
 8015ae4:	08016797 	.word	0x08016797
 8015ae8:	080167bb 	.word	0x080167bb

08015aec <_cleanup_r>:
 8015aec:	4901      	ldr	r1, [pc, #4]	; (8015af4 <_cleanup_r+0x8>)
 8015aee:	f000 b8c1 	b.w	8015c74 <_fwalk_reent>
 8015af2:	bf00      	nop
 8015af4:	08016aa5 	.word	0x08016aa5

08015af8 <__sfmoreglue>:
 8015af8:	b570      	push	{r4, r5, r6, lr}
 8015afa:	2268      	movs	r2, #104	; 0x68
 8015afc:	1e4d      	subs	r5, r1, #1
 8015afe:	4355      	muls	r5, r2
 8015b00:	460e      	mov	r6, r1
 8015b02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b06:	f000 f94b 	bl	8015da0 <_malloc_r>
 8015b0a:	4604      	mov	r4, r0
 8015b0c:	b140      	cbz	r0, 8015b20 <__sfmoreglue+0x28>
 8015b0e:	2100      	movs	r1, #0
 8015b10:	e9c0 1600 	strd	r1, r6, [r0]
 8015b14:	300c      	adds	r0, #12
 8015b16:	60a0      	str	r0, [r4, #8]
 8015b18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b1c:	f7ff ff26 	bl	801596c <memset>
 8015b20:	4620      	mov	r0, r4
 8015b22:	bd70      	pop	{r4, r5, r6, pc}

08015b24 <__sfp_lock_acquire>:
 8015b24:	4801      	ldr	r0, [pc, #4]	; (8015b2c <__sfp_lock_acquire+0x8>)
 8015b26:	f000 b8c5 	b.w	8015cb4 <__retarget_lock_acquire_recursive>
 8015b2a:	bf00      	nop
 8015b2c:	2000b1bd 	.word	0x2000b1bd

08015b30 <__sfp_lock_release>:
 8015b30:	4801      	ldr	r0, [pc, #4]	; (8015b38 <__sfp_lock_release+0x8>)
 8015b32:	f000 b8c0 	b.w	8015cb6 <__retarget_lock_release_recursive>
 8015b36:	bf00      	nop
 8015b38:	2000b1bd 	.word	0x2000b1bd

08015b3c <__sinit_lock_acquire>:
 8015b3c:	4801      	ldr	r0, [pc, #4]	; (8015b44 <__sinit_lock_acquire+0x8>)
 8015b3e:	f000 b8b9 	b.w	8015cb4 <__retarget_lock_acquire_recursive>
 8015b42:	bf00      	nop
 8015b44:	2000b1be 	.word	0x2000b1be

08015b48 <__sinit_lock_release>:
 8015b48:	4801      	ldr	r0, [pc, #4]	; (8015b50 <__sinit_lock_release+0x8>)
 8015b4a:	f000 b8b4 	b.w	8015cb6 <__retarget_lock_release_recursive>
 8015b4e:	bf00      	nop
 8015b50:	2000b1be 	.word	0x2000b1be

08015b54 <__sinit>:
 8015b54:	b510      	push	{r4, lr}
 8015b56:	4604      	mov	r4, r0
 8015b58:	f7ff fff0 	bl	8015b3c <__sinit_lock_acquire>
 8015b5c:	69a3      	ldr	r3, [r4, #24]
 8015b5e:	b11b      	cbz	r3, 8015b68 <__sinit+0x14>
 8015b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b64:	f7ff bff0 	b.w	8015b48 <__sinit_lock_release>
 8015b68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015b6c:	6523      	str	r3, [r4, #80]	; 0x50
 8015b6e:	4b13      	ldr	r3, [pc, #76]	; (8015bbc <__sinit+0x68>)
 8015b70:	4a13      	ldr	r2, [pc, #76]	; (8015bc0 <__sinit+0x6c>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	62a2      	str	r2, [r4, #40]	; 0x28
 8015b76:	42a3      	cmp	r3, r4
 8015b78:	bf04      	itt	eq
 8015b7a:	2301      	moveq	r3, #1
 8015b7c:	61a3      	streq	r3, [r4, #24]
 8015b7e:	4620      	mov	r0, r4
 8015b80:	f000 f820 	bl	8015bc4 <__sfp>
 8015b84:	6060      	str	r0, [r4, #4]
 8015b86:	4620      	mov	r0, r4
 8015b88:	f000 f81c 	bl	8015bc4 <__sfp>
 8015b8c:	60a0      	str	r0, [r4, #8]
 8015b8e:	4620      	mov	r0, r4
 8015b90:	f000 f818 	bl	8015bc4 <__sfp>
 8015b94:	2200      	movs	r2, #0
 8015b96:	60e0      	str	r0, [r4, #12]
 8015b98:	2104      	movs	r1, #4
 8015b9a:	6860      	ldr	r0, [r4, #4]
 8015b9c:	f7ff ff82 	bl	8015aa4 <std>
 8015ba0:	68a0      	ldr	r0, [r4, #8]
 8015ba2:	2201      	movs	r2, #1
 8015ba4:	2109      	movs	r1, #9
 8015ba6:	f7ff ff7d 	bl	8015aa4 <std>
 8015baa:	68e0      	ldr	r0, [r4, #12]
 8015bac:	2202      	movs	r2, #2
 8015bae:	2112      	movs	r1, #18
 8015bb0:	f7ff ff78 	bl	8015aa4 <std>
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	61a3      	str	r3, [r4, #24]
 8015bb8:	e7d2      	b.n	8015b60 <__sinit+0xc>
 8015bba:	bf00      	nop
 8015bbc:	0801c520 	.word	0x0801c520
 8015bc0:	08015aed 	.word	0x08015aed

08015bc4 <__sfp>:
 8015bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bc6:	4607      	mov	r7, r0
 8015bc8:	f7ff ffac 	bl	8015b24 <__sfp_lock_acquire>
 8015bcc:	4b1e      	ldr	r3, [pc, #120]	; (8015c48 <__sfp+0x84>)
 8015bce:	681e      	ldr	r6, [r3, #0]
 8015bd0:	69b3      	ldr	r3, [r6, #24]
 8015bd2:	b913      	cbnz	r3, 8015bda <__sfp+0x16>
 8015bd4:	4630      	mov	r0, r6
 8015bd6:	f7ff ffbd 	bl	8015b54 <__sinit>
 8015bda:	3648      	adds	r6, #72	; 0x48
 8015bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015be0:	3b01      	subs	r3, #1
 8015be2:	d503      	bpl.n	8015bec <__sfp+0x28>
 8015be4:	6833      	ldr	r3, [r6, #0]
 8015be6:	b30b      	cbz	r3, 8015c2c <__sfp+0x68>
 8015be8:	6836      	ldr	r6, [r6, #0]
 8015bea:	e7f7      	b.n	8015bdc <__sfp+0x18>
 8015bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015bf0:	b9d5      	cbnz	r5, 8015c28 <__sfp+0x64>
 8015bf2:	4b16      	ldr	r3, [pc, #88]	; (8015c4c <__sfp+0x88>)
 8015bf4:	60e3      	str	r3, [r4, #12]
 8015bf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015bfa:	6665      	str	r5, [r4, #100]	; 0x64
 8015bfc:	f000 f859 	bl	8015cb2 <__retarget_lock_init_recursive>
 8015c00:	f7ff ff96 	bl	8015b30 <__sfp_lock_release>
 8015c04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015c08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015c0c:	6025      	str	r5, [r4, #0]
 8015c0e:	61a5      	str	r5, [r4, #24]
 8015c10:	2208      	movs	r2, #8
 8015c12:	4629      	mov	r1, r5
 8015c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c18:	f7ff fea8 	bl	801596c <memset>
 8015c1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c24:	4620      	mov	r0, r4
 8015c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c28:	3468      	adds	r4, #104	; 0x68
 8015c2a:	e7d9      	b.n	8015be0 <__sfp+0x1c>
 8015c2c:	2104      	movs	r1, #4
 8015c2e:	4638      	mov	r0, r7
 8015c30:	f7ff ff62 	bl	8015af8 <__sfmoreglue>
 8015c34:	4604      	mov	r4, r0
 8015c36:	6030      	str	r0, [r6, #0]
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	d1d5      	bne.n	8015be8 <__sfp+0x24>
 8015c3c:	f7ff ff78 	bl	8015b30 <__sfp_lock_release>
 8015c40:	230c      	movs	r3, #12
 8015c42:	603b      	str	r3, [r7, #0]
 8015c44:	e7ee      	b.n	8015c24 <__sfp+0x60>
 8015c46:	bf00      	nop
 8015c48:	0801c520 	.word	0x0801c520
 8015c4c:	ffff0001 	.word	0xffff0001

08015c50 <fiprintf>:
 8015c50:	b40e      	push	{r1, r2, r3}
 8015c52:	b503      	push	{r0, r1, lr}
 8015c54:	4601      	mov	r1, r0
 8015c56:	ab03      	add	r3, sp, #12
 8015c58:	4805      	ldr	r0, [pc, #20]	; (8015c70 <fiprintf+0x20>)
 8015c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c5e:	6800      	ldr	r0, [r0, #0]
 8015c60:	9301      	str	r3, [sp, #4]
 8015c62:	f000 fa97 	bl	8016194 <_vfiprintf_r>
 8015c66:	b002      	add	sp, #8
 8015c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c6c:	b003      	add	sp, #12
 8015c6e:	4770      	bx	lr
 8015c70:	20000064 	.word	0x20000064

08015c74 <_fwalk_reent>:
 8015c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c78:	4606      	mov	r6, r0
 8015c7a:	4688      	mov	r8, r1
 8015c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015c80:	2700      	movs	r7, #0
 8015c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015c86:	f1b9 0901 	subs.w	r9, r9, #1
 8015c8a:	d505      	bpl.n	8015c98 <_fwalk_reent+0x24>
 8015c8c:	6824      	ldr	r4, [r4, #0]
 8015c8e:	2c00      	cmp	r4, #0
 8015c90:	d1f7      	bne.n	8015c82 <_fwalk_reent+0xe>
 8015c92:	4638      	mov	r0, r7
 8015c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c98:	89ab      	ldrh	r3, [r5, #12]
 8015c9a:	2b01      	cmp	r3, #1
 8015c9c:	d907      	bls.n	8015cae <_fwalk_reent+0x3a>
 8015c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	d003      	beq.n	8015cae <_fwalk_reent+0x3a>
 8015ca6:	4629      	mov	r1, r5
 8015ca8:	4630      	mov	r0, r6
 8015caa:	47c0      	blx	r8
 8015cac:	4307      	orrs	r7, r0
 8015cae:	3568      	adds	r5, #104	; 0x68
 8015cb0:	e7e9      	b.n	8015c86 <_fwalk_reent+0x12>

08015cb2 <__retarget_lock_init_recursive>:
 8015cb2:	4770      	bx	lr

08015cb4 <__retarget_lock_acquire_recursive>:
 8015cb4:	4770      	bx	lr

08015cb6 <__retarget_lock_release_recursive>:
 8015cb6:	4770      	bx	lr

08015cb8 <malloc>:
 8015cb8:	4b02      	ldr	r3, [pc, #8]	; (8015cc4 <malloc+0xc>)
 8015cba:	4601      	mov	r1, r0
 8015cbc:	6818      	ldr	r0, [r3, #0]
 8015cbe:	f000 b86f 	b.w	8015da0 <_malloc_r>
 8015cc2:	bf00      	nop
 8015cc4:	20000064 	.word	0x20000064

08015cc8 <_free_r>:
 8015cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015cca:	2900      	cmp	r1, #0
 8015ccc:	d044      	beq.n	8015d58 <_free_r+0x90>
 8015cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cd2:	9001      	str	r0, [sp, #4]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8015cda:	bfb8      	it	lt
 8015cdc:	18e4      	addlt	r4, r4, r3
 8015cde:	f000 ff95 	bl	8016c0c <__malloc_lock>
 8015ce2:	4a1e      	ldr	r2, [pc, #120]	; (8015d5c <_free_r+0x94>)
 8015ce4:	9801      	ldr	r0, [sp, #4]
 8015ce6:	6813      	ldr	r3, [r2, #0]
 8015ce8:	b933      	cbnz	r3, 8015cf8 <_free_r+0x30>
 8015cea:	6063      	str	r3, [r4, #4]
 8015cec:	6014      	str	r4, [r2, #0]
 8015cee:	b003      	add	sp, #12
 8015cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015cf4:	f000 bf90 	b.w	8016c18 <__malloc_unlock>
 8015cf8:	42a3      	cmp	r3, r4
 8015cfa:	d908      	bls.n	8015d0e <_free_r+0x46>
 8015cfc:	6825      	ldr	r5, [r4, #0]
 8015cfe:	1961      	adds	r1, r4, r5
 8015d00:	428b      	cmp	r3, r1
 8015d02:	bf01      	itttt	eq
 8015d04:	6819      	ldreq	r1, [r3, #0]
 8015d06:	685b      	ldreq	r3, [r3, #4]
 8015d08:	1949      	addeq	r1, r1, r5
 8015d0a:	6021      	streq	r1, [r4, #0]
 8015d0c:	e7ed      	b.n	8015cea <_free_r+0x22>
 8015d0e:	461a      	mov	r2, r3
 8015d10:	685b      	ldr	r3, [r3, #4]
 8015d12:	b10b      	cbz	r3, 8015d18 <_free_r+0x50>
 8015d14:	42a3      	cmp	r3, r4
 8015d16:	d9fa      	bls.n	8015d0e <_free_r+0x46>
 8015d18:	6811      	ldr	r1, [r2, #0]
 8015d1a:	1855      	adds	r5, r2, r1
 8015d1c:	42a5      	cmp	r5, r4
 8015d1e:	d10b      	bne.n	8015d38 <_free_r+0x70>
 8015d20:	6824      	ldr	r4, [r4, #0]
 8015d22:	4421      	add	r1, r4
 8015d24:	1854      	adds	r4, r2, r1
 8015d26:	42a3      	cmp	r3, r4
 8015d28:	6011      	str	r1, [r2, #0]
 8015d2a:	d1e0      	bne.n	8015cee <_free_r+0x26>
 8015d2c:	681c      	ldr	r4, [r3, #0]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	6053      	str	r3, [r2, #4]
 8015d32:	4421      	add	r1, r4
 8015d34:	6011      	str	r1, [r2, #0]
 8015d36:	e7da      	b.n	8015cee <_free_r+0x26>
 8015d38:	d902      	bls.n	8015d40 <_free_r+0x78>
 8015d3a:	230c      	movs	r3, #12
 8015d3c:	6003      	str	r3, [r0, #0]
 8015d3e:	e7d6      	b.n	8015cee <_free_r+0x26>
 8015d40:	6825      	ldr	r5, [r4, #0]
 8015d42:	1961      	adds	r1, r4, r5
 8015d44:	428b      	cmp	r3, r1
 8015d46:	bf04      	itt	eq
 8015d48:	6819      	ldreq	r1, [r3, #0]
 8015d4a:	685b      	ldreq	r3, [r3, #4]
 8015d4c:	6063      	str	r3, [r4, #4]
 8015d4e:	bf04      	itt	eq
 8015d50:	1949      	addeq	r1, r1, r5
 8015d52:	6021      	streq	r1, [r4, #0]
 8015d54:	6054      	str	r4, [r2, #4]
 8015d56:	e7ca      	b.n	8015cee <_free_r+0x26>
 8015d58:	b003      	add	sp, #12
 8015d5a:	bd30      	pop	{r4, r5, pc}
 8015d5c:	2000b1c0 	.word	0x2000b1c0

08015d60 <sbrk_aligned>:
 8015d60:	b570      	push	{r4, r5, r6, lr}
 8015d62:	4e0e      	ldr	r6, [pc, #56]	; (8015d9c <sbrk_aligned+0x3c>)
 8015d64:	460c      	mov	r4, r1
 8015d66:	6831      	ldr	r1, [r6, #0]
 8015d68:	4605      	mov	r5, r0
 8015d6a:	b911      	cbnz	r1, 8015d72 <sbrk_aligned+0x12>
 8015d6c:	f000 fcd6 	bl	801671c <_sbrk_r>
 8015d70:	6030      	str	r0, [r6, #0]
 8015d72:	4621      	mov	r1, r4
 8015d74:	4628      	mov	r0, r5
 8015d76:	f000 fcd1 	bl	801671c <_sbrk_r>
 8015d7a:	1c43      	adds	r3, r0, #1
 8015d7c:	d00a      	beq.n	8015d94 <sbrk_aligned+0x34>
 8015d7e:	1cc4      	adds	r4, r0, #3
 8015d80:	f024 0403 	bic.w	r4, r4, #3
 8015d84:	42a0      	cmp	r0, r4
 8015d86:	d007      	beq.n	8015d98 <sbrk_aligned+0x38>
 8015d88:	1a21      	subs	r1, r4, r0
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	f000 fcc6 	bl	801671c <_sbrk_r>
 8015d90:	3001      	adds	r0, #1
 8015d92:	d101      	bne.n	8015d98 <sbrk_aligned+0x38>
 8015d94:	f04f 34ff 	mov.w	r4, #4294967295
 8015d98:	4620      	mov	r0, r4
 8015d9a:	bd70      	pop	{r4, r5, r6, pc}
 8015d9c:	2000b1c4 	.word	0x2000b1c4

08015da0 <_malloc_r>:
 8015da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015da4:	1ccd      	adds	r5, r1, #3
 8015da6:	f025 0503 	bic.w	r5, r5, #3
 8015daa:	3508      	adds	r5, #8
 8015dac:	2d0c      	cmp	r5, #12
 8015dae:	bf38      	it	cc
 8015db0:	250c      	movcc	r5, #12
 8015db2:	2d00      	cmp	r5, #0
 8015db4:	4607      	mov	r7, r0
 8015db6:	db01      	blt.n	8015dbc <_malloc_r+0x1c>
 8015db8:	42a9      	cmp	r1, r5
 8015dba:	d905      	bls.n	8015dc8 <_malloc_r+0x28>
 8015dbc:	230c      	movs	r3, #12
 8015dbe:	603b      	str	r3, [r7, #0]
 8015dc0:	2600      	movs	r6, #0
 8015dc2:	4630      	mov	r0, r6
 8015dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dc8:	4e2e      	ldr	r6, [pc, #184]	; (8015e84 <_malloc_r+0xe4>)
 8015dca:	f000 ff1f 	bl	8016c0c <__malloc_lock>
 8015dce:	6833      	ldr	r3, [r6, #0]
 8015dd0:	461c      	mov	r4, r3
 8015dd2:	bb34      	cbnz	r4, 8015e22 <_malloc_r+0x82>
 8015dd4:	4629      	mov	r1, r5
 8015dd6:	4638      	mov	r0, r7
 8015dd8:	f7ff ffc2 	bl	8015d60 <sbrk_aligned>
 8015ddc:	1c43      	adds	r3, r0, #1
 8015dde:	4604      	mov	r4, r0
 8015de0:	d14d      	bne.n	8015e7e <_malloc_r+0xde>
 8015de2:	6834      	ldr	r4, [r6, #0]
 8015de4:	4626      	mov	r6, r4
 8015de6:	2e00      	cmp	r6, #0
 8015de8:	d140      	bne.n	8015e6c <_malloc_r+0xcc>
 8015dea:	6823      	ldr	r3, [r4, #0]
 8015dec:	4631      	mov	r1, r6
 8015dee:	4638      	mov	r0, r7
 8015df0:	eb04 0803 	add.w	r8, r4, r3
 8015df4:	f000 fc92 	bl	801671c <_sbrk_r>
 8015df8:	4580      	cmp	r8, r0
 8015dfa:	d13a      	bne.n	8015e72 <_malloc_r+0xd2>
 8015dfc:	6821      	ldr	r1, [r4, #0]
 8015dfe:	3503      	adds	r5, #3
 8015e00:	1a6d      	subs	r5, r5, r1
 8015e02:	f025 0503 	bic.w	r5, r5, #3
 8015e06:	3508      	adds	r5, #8
 8015e08:	2d0c      	cmp	r5, #12
 8015e0a:	bf38      	it	cc
 8015e0c:	250c      	movcc	r5, #12
 8015e0e:	4629      	mov	r1, r5
 8015e10:	4638      	mov	r0, r7
 8015e12:	f7ff ffa5 	bl	8015d60 <sbrk_aligned>
 8015e16:	3001      	adds	r0, #1
 8015e18:	d02b      	beq.n	8015e72 <_malloc_r+0xd2>
 8015e1a:	6823      	ldr	r3, [r4, #0]
 8015e1c:	442b      	add	r3, r5
 8015e1e:	6023      	str	r3, [r4, #0]
 8015e20:	e00e      	b.n	8015e40 <_malloc_r+0xa0>
 8015e22:	6822      	ldr	r2, [r4, #0]
 8015e24:	1b52      	subs	r2, r2, r5
 8015e26:	d41e      	bmi.n	8015e66 <_malloc_r+0xc6>
 8015e28:	2a0b      	cmp	r2, #11
 8015e2a:	d916      	bls.n	8015e5a <_malloc_r+0xba>
 8015e2c:	1961      	adds	r1, r4, r5
 8015e2e:	42a3      	cmp	r3, r4
 8015e30:	6025      	str	r5, [r4, #0]
 8015e32:	bf18      	it	ne
 8015e34:	6059      	strne	r1, [r3, #4]
 8015e36:	6863      	ldr	r3, [r4, #4]
 8015e38:	bf08      	it	eq
 8015e3a:	6031      	streq	r1, [r6, #0]
 8015e3c:	5162      	str	r2, [r4, r5]
 8015e3e:	604b      	str	r3, [r1, #4]
 8015e40:	4638      	mov	r0, r7
 8015e42:	f104 060b 	add.w	r6, r4, #11
 8015e46:	f000 fee7 	bl	8016c18 <__malloc_unlock>
 8015e4a:	f026 0607 	bic.w	r6, r6, #7
 8015e4e:	1d23      	adds	r3, r4, #4
 8015e50:	1af2      	subs	r2, r6, r3
 8015e52:	d0b6      	beq.n	8015dc2 <_malloc_r+0x22>
 8015e54:	1b9b      	subs	r3, r3, r6
 8015e56:	50a3      	str	r3, [r4, r2]
 8015e58:	e7b3      	b.n	8015dc2 <_malloc_r+0x22>
 8015e5a:	6862      	ldr	r2, [r4, #4]
 8015e5c:	42a3      	cmp	r3, r4
 8015e5e:	bf0c      	ite	eq
 8015e60:	6032      	streq	r2, [r6, #0]
 8015e62:	605a      	strne	r2, [r3, #4]
 8015e64:	e7ec      	b.n	8015e40 <_malloc_r+0xa0>
 8015e66:	4623      	mov	r3, r4
 8015e68:	6864      	ldr	r4, [r4, #4]
 8015e6a:	e7b2      	b.n	8015dd2 <_malloc_r+0x32>
 8015e6c:	4634      	mov	r4, r6
 8015e6e:	6876      	ldr	r6, [r6, #4]
 8015e70:	e7b9      	b.n	8015de6 <_malloc_r+0x46>
 8015e72:	230c      	movs	r3, #12
 8015e74:	603b      	str	r3, [r7, #0]
 8015e76:	4638      	mov	r0, r7
 8015e78:	f000 fece 	bl	8016c18 <__malloc_unlock>
 8015e7c:	e7a1      	b.n	8015dc2 <_malloc_r+0x22>
 8015e7e:	6025      	str	r5, [r4, #0]
 8015e80:	e7de      	b.n	8015e40 <_malloc_r+0xa0>
 8015e82:	bf00      	nop
 8015e84:	2000b1c0 	.word	0x2000b1c0

08015e88 <__ssputs_r>:
 8015e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e8c:	688e      	ldr	r6, [r1, #8]
 8015e8e:	429e      	cmp	r6, r3
 8015e90:	4682      	mov	sl, r0
 8015e92:	460c      	mov	r4, r1
 8015e94:	4690      	mov	r8, r2
 8015e96:	461f      	mov	r7, r3
 8015e98:	d838      	bhi.n	8015f0c <__ssputs_r+0x84>
 8015e9a:	898a      	ldrh	r2, [r1, #12]
 8015e9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015ea0:	d032      	beq.n	8015f08 <__ssputs_r+0x80>
 8015ea2:	6825      	ldr	r5, [r4, #0]
 8015ea4:	6909      	ldr	r1, [r1, #16]
 8015ea6:	eba5 0901 	sub.w	r9, r5, r1
 8015eaa:	6965      	ldr	r5, [r4, #20]
 8015eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015eb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	444b      	add	r3, r9
 8015eb8:	106d      	asrs	r5, r5, #1
 8015eba:	429d      	cmp	r5, r3
 8015ebc:	bf38      	it	cc
 8015ebe:	461d      	movcc	r5, r3
 8015ec0:	0553      	lsls	r3, r2, #21
 8015ec2:	d531      	bpl.n	8015f28 <__ssputs_r+0xa0>
 8015ec4:	4629      	mov	r1, r5
 8015ec6:	f7ff ff6b 	bl	8015da0 <_malloc_r>
 8015eca:	4606      	mov	r6, r0
 8015ecc:	b950      	cbnz	r0, 8015ee4 <__ssputs_r+0x5c>
 8015ece:	230c      	movs	r3, #12
 8015ed0:	f8ca 3000 	str.w	r3, [sl]
 8015ed4:	89a3      	ldrh	r3, [r4, #12]
 8015ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015eda:	81a3      	strh	r3, [r4, #12]
 8015edc:	f04f 30ff 	mov.w	r0, #4294967295
 8015ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ee4:	6921      	ldr	r1, [r4, #16]
 8015ee6:	464a      	mov	r2, r9
 8015ee8:	f7ff fd18 	bl	801591c <memcpy>
 8015eec:	89a3      	ldrh	r3, [r4, #12]
 8015eee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ef6:	81a3      	strh	r3, [r4, #12]
 8015ef8:	6126      	str	r6, [r4, #16]
 8015efa:	6165      	str	r5, [r4, #20]
 8015efc:	444e      	add	r6, r9
 8015efe:	eba5 0509 	sub.w	r5, r5, r9
 8015f02:	6026      	str	r6, [r4, #0]
 8015f04:	60a5      	str	r5, [r4, #8]
 8015f06:	463e      	mov	r6, r7
 8015f08:	42be      	cmp	r6, r7
 8015f0a:	d900      	bls.n	8015f0e <__ssputs_r+0x86>
 8015f0c:	463e      	mov	r6, r7
 8015f0e:	6820      	ldr	r0, [r4, #0]
 8015f10:	4632      	mov	r2, r6
 8015f12:	4641      	mov	r1, r8
 8015f14:	f7ff fd10 	bl	8015938 <memmove>
 8015f18:	68a3      	ldr	r3, [r4, #8]
 8015f1a:	1b9b      	subs	r3, r3, r6
 8015f1c:	60a3      	str	r3, [r4, #8]
 8015f1e:	6823      	ldr	r3, [r4, #0]
 8015f20:	4433      	add	r3, r6
 8015f22:	6023      	str	r3, [r4, #0]
 8015f24:	2000      	movs	r0, #0
 8015f26:	e7db      	b.n	8015ee0 <__ssputs_r+0x58>
 8015f28:	462a      	mov	r2, r5
 8015f2a:	f000 fe7b 	bl	8016c24 <_realloc_r>
 8015f2e:	4606      	mov	r6, r0
 8015f30:	2800      	cmp	r0, #0
 8015f32:	d1e1      	bne.n	8015ef8 <__ssputs_r+0x70>
 8015f34:	6921      	ldr	r1, [r4, #16]
 8015f36:	4650      	mov	r0, sl
 8015f38:	f7ff fec6 	bl	8015cc8 <_free_r>
 8015f3c:	e7c7      	b.n	8015ece <__ssputs_r+0x46>
	...

08015f40 <_svfiprintf_r>:
 8015f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f44:	4698      	mov	r8, r3
 8015f46:	898b      	ldrh	r3, [r1, #12]
 8015f48:	061b      	lsls	r3, r3, #24
 8015f4a:	b09d      	sub	sp, #116	; 0x74
 8015f4c:	4607      	mov	r7, r0
 8015f4e:	460d      	mov	r5, r1
 8015f50:	4614      	mov	r4, r2
 8015f52:	d50e      	bpl.n	8015f72 <_svfiprintf_r+0x32>
 8015f54:	690b      	ldr	r3, [r1, #16]
 8015f56:	b963      	cbnz	r3, 8015f72 <_svfiprintf_r+0x32>
 8015f58:	2140      	movs	r1, #64	; 0x40
 8015f5a:	f7ff ff21 	bl	8015da0 <_malloc_r>
 8015f5e:	6028      	str	r0, [r5, #0]
 8015f60:	6128      	str	r0, [r5, #16]
 8015f62:	b920      	cbnz	r0, 8015f6e <_svfiprintf_r+0x2e>
 8015f64:	230c      	movs	r3, #12
 8015f66:	603b      	str	r3, [r7, #0]
 8015f68:	f04f 30ff 	mov.w	r0, #4294967295
 8015f6c:	e0d1      	b.n	8016112 <_svfiprintf_r+0x1d2>
 8015f6e:	2340      	movs	r3, #64	; 0x40
 8015f70:	616b      	str	r3, [r5, #20]
 8015f72:	2300      	movs	r3, #0
 8015f74:	9309      	str	r3, [sp, #36]	; 0x24
 8015f76:	2320      	movs	r3, #32
 8015f78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f80:	2330      	movs	r3, #48	; 0x30
 8015f82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801612c <_svfiprintf_r+0x1ec>
 8015f86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f8a:	f04f 0901 	mov.w	r9, #1
 8015f8e:	4623      	mov	r3, r4
 8015f90:	469a      	mov	sl, r3
 8015f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f96:	b10a      	cbz	r2, 8015f9c <_svfiprintf_r+0x5c>
 8015f98:	2a25      	cmp	r2, #37	; 0x25
 8015f9a:	d1f9      	bne.n	8015f90 <_svfiprintf_r+0x50>
 8015f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8015fa0:	d00b      	beq.n	8015fba <_svfiprintf_r+0x7a>
 8015fa2:	465b      	mov	r3, fp
 8015fa4:	4622      	mov	r2, r4
 8015fa6:	4629      	mov	r1, r5
 8015fa8:	4638      	mov	r0, r7
 8015faa:	f7ff ff6d 	bl	8015e88 <__ssputs_r>
 8015fae:	3001      	adds	r0, #1
 8015fb0:	f000 80aa 	beq.w	8016108 <_svfiprintf_r+0x1c8>
 8015fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fb6:	445a      	add	r2, fp
 8015fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8015fba:	f89a 3000 	ldrb.w	r3, [sl]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	f000 80a2 	beq.w	8016108 <_svfiprintf_r+0x1c8>
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8015fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fce:	f10a 0a01 	add.w	sl, sl, #1
 8015fd2:	9304      	str	r3, [sp, #16]
 8015fd4:	9307      	str	r3, [sp, #28]
 8015fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015fda:	931a      	str	r3, [sp, #104]	; 0x68
 8015fdc:	4654      	mov	r4, sl
 8015fde:	2205      	movs	r2, #5
 8015fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fe4:	4851      	ldr	r0, [pc, #324]	; (801612c <_svfiprintf_r+0x1ec>)
 8015fe6:	f7ea f91b 	bl	8000220 <memchr>
 8015fea:	9a04      	ldr	r2, [sp, #16]
 8015fec:	b9d8      	cbnz	r0, 8016026 <_svfiprintf_r+0xe6>
 8015fee:	06d0      	lsls	r0, r2, #27
 8015ff0:	bf44      	itt	mi
 8015ff2:	2320      	movmi	r3, #32
 8015ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ff8:	0711      	lsls	r1, r2, #28
 8015ffa:	bf44      	itt	mi
 8015ffc:	232b      	movmi	r3, #43	; 0x2b
 8015ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016002:	f89a 3000 	ldrb.w	r3, [sl]
 8016006:	2b2a      	cmp	r3, #42	; 0x2a
 8016008:	d015      	beq.n	8016036 <_svfiprintf_r+0xf6>
 801600a:	9a07      	ldr	r2, [sp, #28]
 801600c:	4654      	mov	r4, sl
 801600e:	2000      	movs	r0, #0
 8016010:	f04f 0c0a 	mov.w	ip, #10
 8016014:	4621      	mov	r1, r4
 8016016:	f811 3b01 	ldrb.w	r3, [r1], #1
 801601a:	3b30      	subs	r3, #48	; 0x30
 801601c:	2b09      	cmp	r3, #9
 801601e:	d94e      	bls.n	80160be <_svfiprintf_r+0x17e>
 8016020:	b1b0      	cbz	r0, 8016050 <_svfiprintf_r+0x110>
 8016022:	9207      	str	r2, [sp, #28]
 8016024:	e014      	b.n	8016050 <_svfiprintf_r+0x110>
 8016026:	eba0 0308 	sub.w	r3, r0, r8
 801602a:	fa09 f303 	lsl.w	r3, r9, r3
 801602e:	4313      	orrs	r3, r2
 8016030:	9304      	str	r3, [sp, #16]
 8016032:	46a2      	mov	sl, r4
 8016034:	e7d2      	b.n	8015fdc <_svfiprintf_r+0x9c>
 8016036:	9b03      	ldr	r3, [sp, #12]
 8016038:	1d19      	adds	r1, r3, #4
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	9103      	str	r1, [sp, #12]
 801603e:	2b00      	cmp	r3, #0
 8016040:	bfbb      	ittet	lt
 8016042:	425b      	neglt	r3, r3
 8016044:	f042 0202 	orrlt.w	r2, r2, #2
 8016048:	9307      	strge	r3, [sp, #28]
 801604a:	9307      	strlt	r3, [sp, #28]
 801604c:	bfb8      	it	lt
 801604e:	9204      	strlt	r2, [sp, #16]
 8016050:	7823      	ldrb	r3, [r4, #0]
 8016052:	2b2e      	cmp	r3, #46	; 0x2e
 8016054:	d10c      	bne.n	8016070 <_svfiprintf_r+0x130>
 8016056:	7863      	ldrb	r3, [r4, #1]
 8016058:	2b2a      	cmp	r3, #42	; 0x2a
 801605a:	d135      	bne.n	80160c8 <_svfiprintf_r+0x188>
 801605c:	9b03      	ldr	r3, [sp, #12]
 801605e:	1d1a      	adds	r2, r3, #4
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	9203      	str	r2, [sp, #12]
 8016064:	2b00      	cmp	r3, #0
 8016066:	bfb8      	it	lt
 8016068:	f04f 33ff 	movlt.w	r3, #4294967295
 801606c:	3402      	adds	r4, #2
 801606e:	9305      	str	r3, [sp, #20]
 8016070:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801613c <_svfiprintf_r+0x1fc>
 8016074:	7821      	ldrb	r1, [r4, #0]
 8016076:	2203      	movs	r2, #3
 8016078:	4650      	mov	r0, sl
 801607a:	f7ea f8d1 	bl	8000220 <memchr>
 801607e:	b140      	cbz	r0, 8016092 <_svfiprintf_r+0x152>
 8016080:	2340      	movs	r3, #64	; 0x40
 8016082:	eba0 000a 	sub.w	r0, r0, sl
 8016086:	fa03 f000 	lsl.w	r0, r3, r0
 801608a:	9b04      	ldr	r3, [sp, #16]
 801608c:	4303      	orrs	r3, r0
 801608e:	3401      	adds	r4, #1
 8016090:	9304      	str	r3, [sp, #16]
 8016092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016096:	4826      	ldr	r0, [pc, #152]	; (8016130 <_svfiprintf_r+0x1f0>)
 8016098:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801609c:	2206      	movs	r2, #6
 801609e:	f7ea f8bf 	bl	8000220 <memchr>
 80160a2:	2800      	cmp	r0, #0
 80160a4:	d038      	beq.n	8016118 <_svfiprintf_r+0x1d8>
 80160a6:	4b23      	ldr	r3, [pc, #140]	; (8016134 <_svfiprintf_r+0x1f4>)
 80160a8:	bb1b      	cbnz	r3, 80160f2 <_svfiprintf_r+0x1b2>
 80160aa:	9b03      	ldr	r3, [sp, #12]
 80160ac:	3307      	adds	r3, #7
 80160ae:	f023 0307 	bic.w	r3, r3, #7
 80160b2:	3308      	adds	r3, #8
 80160b4:	9303      	str	r3, [sp, #12]
 80160b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160b8:	4433      	add	r3, r6
 80160ba:	9309      	str	r3, [sp, #36]	; 0x24
 80160bc:	e767      	b.n	8015f8e <_svfiprintf_r+0x4e>
 80160be:	fb0c 3202 	mla	r2, ip, r2, r3
 80160c2:	460c      	mov	r4, r1
 80160c4:	2001      	movs	r0, #1
 80160c6:	e7a5      	b.n	8016014 <_svfiprintf_r+0xd4>
 80160c8:	2300      	movs	r3, #0
 80160ca:	3401      	adds	r4, #1
 80160cc:	9305      	str	r3, [sp, #20]
 80160ce:	4619      	mov	r1, r3
 80160d0:	f04f 0c0a 	mov.w	ip, #10
 80160d4:	4620      	mov	r0, r4
 80160d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160da:	3a30      	subs	r2, #48	; 0x30
 80160dc:	2a09      	cmp	r2, #9
 80160de:	d903      	bls.n	80160e8 <_svfiprintf_r+0x1a8>
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d0c5      	beq.n	8016070 <_svfiprintf_r+0x130>
 80160e4:	9105      	str	r1, [sp, #20]
 80160e6:	e7c3      	b.n	8016070 <_svfiprintf_r+0x130>
 80160e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80160ec:	4604      	mov	r4, r0
 80160ee:	2301      	movs	r3, #1
 80160f0:	e7f0      	b.n	80160d4 <_svfiprintf_r+0x194>
 80160f2:	ab03      	add	r3, sp, #12
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	462a      	mov	r2, r5
 80160f8:	4b0f      	ldr	r3, [pc, #60]	; (8016138 <_svfiprintf_r+0x1f8>)
 80160fa:	a904      	add	r1, sp, #16
 80160fc:	4638      	mov	r0, r7
 80160fe:	f3af 8000 	nop.w
 8016102:	1c42      	adds	r2, r0, #1
 8016104:	4606      	mov	r6, r0
 8016106:	d1d6      	bne.n	80160b6 <_svfiprintf_r+0x176>
 8016108:	89ab      	ldrh	r3, [r5, #12]
 801610a:	065b      	lsls	r3, r3, #25
 801610c:	f53f af2c 	bmi.w	8015f68 <_svfiprintf_r+0x28>
 8016110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016112:	b01d      	add	sp, #116	; 0x74
 8016114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016118:	ab03      	add	r3, sp, #12
 801611a:	9300      	str	r3, [sp, #0]
 801611c:	462a      	mov	r2, r5
 801611e:	4b06      	ldr	r3, [pc, #24]	; (8016138 <_svfiprintf_r+0x1f8>)
 8016120:	a904      	add	r1, sp, #16
 8016122:	4638      	mov	r0, r7
 8016124:	f000 f9d4 	bl	80164d0 <_printf_i>
 8016128:	e7eb      	b.n	8016102 <_svfiprintf_r+0x1c2>
 801612a:	bf00      	nop
 801612c:	0801c634 	.word	0x0801c634
 8016130:	0801c63e 	.word	0x0801c63e
 8016134:	00000000 	.word	0x00000000
 8016138:	08015e89 	.word	0x08015e89
 801613c:	0801c63a 	.word	0x0801c63a

08016140 <__sfputc_r>:
 8016140:	6893      	ldr	r3, [r2, #8]
 8016142:	3b01      	subs	r3, #1
 8016144:	2b00      	cmp	r3, #0
 8016146:	b410      	push	{r4}
 8016148:	6093      	str	r3, [r2, #8]
 801614a:	da08      	bge.n	801615e <__sfputc_r+0x1e>
 801614c:	6994      	ldr	r4, [r2, #24]
 801614e:	42a3      	cmp	r3, r4
 8016150:	db01      	blt.n	8016156 <__sfputc_r+0x16>
 8016152:	290a      	cmp	r1, #10
 8016154:	d103      	bne.n	801615e <__sfputc_r+0x1e>
 8016156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801615a:	f000 bb33 	b.w	80167c4 <__swbuf_r>
 801615e:	6813      	ldr	r3, [r2, #0]
 8016160:	1c58      	adds	r0, r3, #1
 8016162:	6010      	str	r0, [r2, #0]
 8016164:	7019      	strb	r1, [r3, #0]
 8016166:	4608      	mov	r0, r1
 8016168:	f85d 4b04 	ldr.w	r4, [sp], #4
 801616c:	4770      	bx	lr

0801616e <__sfputs_r>:
 801616e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016170:	4606      	mov	r6, r0
 8016172:	460f      	mov	r7, r1
 8016174:	4614      	mov	r4, r2
 8016176:	18d5      	adds	r5, r2, r3
 8016178:	42ac      	cmp	r4, r5
 801617a:	d101      	bne.n	8016180 <__sfputs_r+0x12>
 801617c:	2000      	movs	r0, #0
 801617e:	e007      	b.n	8016190 <__sfputs_r+0x22>
 8016180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016184:	463a      	mov	r2, r7
 8016186:	4630      	mov	r0, r6
 8016188:	f7ff ffda 	bl	8016140 <__sfputc_r>
 801618c:	1c43      	adds	r3, r0, #1
 801618e:	d1f3      	bne.n	8016178 <__sfputs_r+0xa>
 8016190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016194 <_vfiprintf_r>:
 8016194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016198:	460d      	mov	r5, r1
 801619a:	b09d      	sub	sp, #116	; 0x74
 801619c:	4614      	mov	r4, r2
 801619e:	4698      	mov	r8, r3
 80161a0:	4606      	mov	r6, r0
 80161a2:	b118      	cbz	r0, 80161ac <_vfiprintf_r+0x18>
 80161a4:	6983      	ldr	r3, [r0, #24]
 80161a6:	b90b      	cbnz	r3, 80161ac <_vfiprintf_r+0x18>
 80161a8:	f7ff fcd4 	bl	8015b54 <__sinit>
 80161ac:	4b89      	ldr	r3, [pc, #548]	; (80163d4 <_vfiprintf_r+0x240>)
 80161ae:	429d      	cmp	r5, r3
 80161b0:	d11b      	bne.n	80161ea <_vfiprintf_r+0x56>
 80161b2:	6875      	ldr	r5, [r6, #4]
 80161b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80161b6:	07d9      	lsls	r1, r3, #31
 80161b8:	d405      	bmi.n	80161c6 <_vfiprintf_r+0x32>
 80161ba:	89ab      	ldrh	r3, [r5, #12]
 80161bc:	059a      	lsls	r2, r3, #22
 80161be:	d402      	bmi.n	80161c6 <_vfiprintf_r+0x32>
 80161c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80161c2:	f7ff fd77 	bl	8015cb4 <__retarget_lock_acquire_recursive>
 80161c6:	89ab      	ldrh	r3, [r5, #12]
 80161c8:	071b      	lsls	r3, r3, #28
 80161ca:	d501      	bpl.n	80161d0 <_vfiprintf_r+0x3c>
 80161cc:	692b      	ldr	r3, [r5, #16]
 80161ce:	b9eb      	cbnz	r3, 801620c <_vfiprintf_r+0x78>
 80161d0:	4629      	mov	r1, r5
 80161d2:	4630      	mov	r0, r6
 80161d4:	f000 fb5a 	bl	801688c <__swsetup_r>
 80161d8:	b1c0      	cbz	r0, 801620c <_vfiprintf_r+0x78>
 80161da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80161dc:	07dc      	lsls	r4, r3, #31
 80161de:	d50e      	bpl.n	80161fe <_vfiprintf_r+0x6a>
 80161e0:	f04f 30ff 	mov.w	r0, #4294967295
 80161e4:	b01d      	add	sp, #116	; 0x74
 80161e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ea:	4b7b      	ldr	r3, [pc, #492]	; (80163d8 <_vfiprintf_r+0x244>)
 80161ec:	429d      	cmp	r5, r3
 80161ee:	d101      	bne.n	80161f4 <_vfiprintf_r+0x60>
 80161f0:	68b5      	ldr	r5, [r6, #8]
 80161f2:	e7df      	b.n	80161b4 <_vfiprintf_r+0x20>
 80161f4:	4b79      	ldr	r3, [pc, #484]	; (80163dc <_vfiprintf_r+0x248>)
 80161f6:	429d      	cmp	r5, r3
 80161f8:	bf08      	it	eq
 80161fa:	68f5      	ldreq	r5, [r6, #12]
 80161fc:	e7da      	b.n	80161b4 <_vfiprintf_r+0x20>
 80161fe:	89ab      	ldrh	r3, [r5, #12]
 8016200:	0598      	lsls	r0, r3, #22
 8016202:	d4ed      	bmi.n	80161e0 <_vfiprintf_r+0x4c>
 8016204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016206:	f7ff fd56 	bl	8015cb6 <__retarget_lock_release_recursive>
 801620a:	e7e9      	b.n	80161e0 <_vfiprintf_r+0x4c>
 801620c:	2300      	movs	r3, #0
 801620e:	9309      	str	r3, [sp, #36]	; 0x24
 8016210:	2320      	movs	r3, #32
 8016212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016216:	f8cd 800c 	str.w	r8, [sp, #12]
 801621a:	2330      	movs	r3, #48	; 0x30
 801621c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80163e0 <_vfiprintf_r+0x24c>
 8016220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016224:	f04f 0901 	mov.w	r9, #1
 8016228:	4623      	mov	r3, r4
 801622a:	469a      	mov	sl, r3
 801622c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016230:	b10a      	cbz	r2, 8016236 <_vfiprintf_r+0xa2>
 8016232:	2a25      	cmp	r2, #37	; 0x25
 8016234:	d1f9      	bne.n	801622a <_vfiprintf_r+0x96>
 8016236:	ebba 0b04 	subs.w	fp, sl, r4
 801623a:	d00b      	beq.n	8016254 <_vfiprintf_r+0xc0>
 801623c:	465b      	mov	r3, fp
 801623e:	4622      	mov	r2, r4
 8016240:	4629      	mov	r1, r5
 8016242:	4630      	mov	r0, r6
 8016244:	f7ff ff93 	bl	801616e <__sfputs_r>
 8016248:	3001      	adds	r0, #1
 801624a:	f000 80aa 	beq.w	80163a2 <_vfiprintf_r+0x20e>
 801624e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016250:	445a      	add	r2, fp
 8016252:	9209      	str	r2, [sp, #36]	; 0x24
 8016254:	f89a 3000 	ldrb.w	r3, [sl]
 8016258:	2b00      	cmp	r3, #0
 801625a:	f000 80a2 	beq.w	80163a2 <_vfiprintf_r+0x20e>
 801625e:	2300      	movs	r3, #0
 8016260:	f04f 32ff 	mov.w	r2, #4294967295
 8016264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016268:	f10a 0a01 	add.w	sl, sl, #1
 801626c:	9304      	str	r3, [sp, #16]
 801626e:	9307      	str	r3, [sp, #28]
 8016270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016274:	931a      	str	r3, [sp, #104]	; 0x68
 8016276:	4654      	mov	r4, sl
 8016278:	2205      	movs	r2, #5
 801627a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801627e:	4858      	ldr	r0, [pc, #352]	; (80163e0 <_vfiprintf_r+0x24c>)
 8016280:	f7e9 ffce 	bl	8000220 <memchr>
 8016284:	9a04      	ldr	r2, [sp, #16]
 8016286:	b9d8      	cbnz	r0, 80162c0 <_vfiprintf_r+0x12c>
 8016288:	06d1      	lsls	r1, r2, #27
 801628a:	bf44      	itt	mi
 801628c:	2320      	movmi	r3, #32
 801628e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016292:	0713      	lsls	r3, r2, #28
 8016294:	bf44      	itt	mi
 8016296:	232b      	movmi	r3, #43	; 0x2b
 8016298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801629c:	f89a 3000 	ldrb.w	r3, [sl]
 80162a0:	2b2a      	cmp	r3, #42	; 0x2a
 80162a2:	d015      	beq.n	80162d0 <_vfiprintf_r+0x13c>
 80162a4:	9a07      	ldr	r2, [sp, #28]
 80162a6:	4654      	mov	r4, sl
 80162a8:	2000      	movs	r0, #0
 80162aa:	f04f 0c0a 	mov.w	ip, #10
 80162ae:	4621      	mov	r1, r4
 80162b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162b4:	3b30      	subs	r3, #48	; 0x30
 80162b6:	2b09      	cmp	r3, #9
 80162b8:	d94e      	bls.n	8016358 <_vfiprintf_r+0x1c4>
 80162ba:	b1b0      	cbz	r0, 80162ea <_vfiprintf_r+0x156>
 80162bc:	9207      	str	r2, [sp, #28]
 80162be:	e014      	b.n	80162ea <_vfiprintf_r+0x156>
 80162c0:	eba0 0308 	sub.w	r3, r0, r8
 80162c4:	fa09 f303 	lsl.w	r3, r9, r3
 80162c8:	4313      	orrs	r3, r2
 80162ca:	9304      	str	r3, [sp, #16]
 80162cc:	46a2      	mov	sl, r4
 80162ce:	e7d2      	b.n	8016276 <_vfiprintf_r+0xe2>
 80162d0:	9b03      	ldr	r3, [sp, #12]
 80162d2:	1d19      	adds	r1, r3, #4
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	9103      	str	r1, [sp, #12]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	bfbb      	ittet	lt
 80162dc:	425b      	neglt	r3, r3
 80162de:	f042 0202 	orrlt.w	r2, r2, #2
 80162e2:	9307      	strge	r3, [sp, #28]
 80162e4:	9307      	strlt	r3, [sp, #28]
 80162e6:	bfb8      	it	lt
 80162e8:	9204      	strlt	r2, [sp, #16]
 80162ea:	7823      	ldrb	r3, [r4, #0]
 80162ec:	2b2e      	cmp	r3, #46	; 0x2e
 80162ee:	d10c      	bne.n	801630a <_vfiprintf_r+0x176>
 80162f0:	7863      	ldrb	r3, [r4, #1]
 80162f2:	2b2a      	cmp	r3, #42	; 0x2a
 80162f4:	d135      	bne.n	8016362 <_vfiprintf_r+0x1ce>
 80162f6:	9b03      	ldr	r3, [sp, #12]
 80162f8:	1d1a      	adds	r2, r3, #4
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	9203      	str	r2, [sp, #12]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	bfb8      	it	lt
 8016302:	f04f 33ff 	movlt.w	r3, #4294967295
 8016306:	3402      	adds	r4, #2
 8016308:	9305      	str	r3, [sp, #20]
 801630a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80163f0 <_vfiprintf_r+0x25c>
 801630e:	7821      	ldrb	r1, [r4, #0]
 8016310:	2203      	movs	r2, #3
 8016312:	4650      	mov	r0, sl
 8016314:	f7e9 ff84 	bl	8000220 <memchr>
 8016318:	b140      	cbz	r0, 801632c <_vfiprintf_r+0x198>
 801631a:	2340      	movs	r3, #64	; 0x40
 801631c:	eba0 000a 	sub.w	r0, r0, sl
 8016320:	fa03 f000 	lsl.w	r0, r3, r0
 8016324:	9b04      	ldr	r3, [sp, #16]
 8016326:	4303      	orrs	r3, r0
 8016328:	3401      	adds	r4, #1
 801632a:	9304      	str	r3, [sp, #16]
 801632c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016330:	482c      	ldr	r0, [pc, #176]	; (80163e4 <_vfiprintf_r+0x250>)
 8016332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016336:	2206      	movs	r2, #6
 8016338:	f7e9 ff72 	bl	8000220 <memchr>
 801633c:	2800      	cmp	r0, #0
 801633e:	d03f      	beq.n	80163c0 <_vfiprintf_r+0x22c>
 8016340:	4b29      	ldr	r3, [pc, #164]	; (80163e8 <_vfiprintf_r+0x254>)
 8016342:	bb1b      	cbnz	r3, 801638c <_vfiprintf_r+0x1f8>
 8016344:	9b03      	ldr	r3, [sp, #12]
 8016346:	3307      	adds	r3, #7
 8016348:	f023 0307 	bic.w	r3, r3, #7
 801634c:	3308      	adds	r3, #8
 801634e:	9303      	str	r3, [sp, #12]
 8016350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016352:	443b      	add	r3, r7
 8016354:	9309      	str	r3, [sp, #36]	; 0x24
 8016356:	e767      	b.n	8016228 <_vfiprintf_r+0x94>
 8016358:	fb0c 3202 	mla	r2, ip, r2, r3
 801635c:	460c      	mov	r4, r1
 801635e:	2001      	movs	r0, #1
 8016360:	e7a5      	b.n	80162ae <_vfiprintf_r+0x11a>
 8016362:	2300      	movs	r3, #0
 8016364:	3401      	adds	r4, #1
 8016366:	9305      	str	r3, [sp, #20]
 8016368:	4619      	mov	r1, r3
 801636a:	f04f 0c0a 	mov.w	ip, #10
 801636e:	4620      	mov	r0, r4
 8016370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016374:	3a30      	subs	r2, #48	; 0x30
 8016376:	2a09      	cmp	r2, #9
 8016378:	d903      	bls.n	8016382 <_vfiprintf_r+0x1ee>
 801637a:	2b00      	cmp	r3, #0
 801637c:	d0c5      	beq.n	801630a <_vfiprintf_r+0x176>
 801637e:	9105      	str	r1, [sp, #20]
 8016380:	e7c3      	b.n	801630a <_vfiprintf_r+0x176>
 8016382:	fb0c 2101 	mla	r1, ip, r1, r2
 8016386:	4604      	mov	r4, r0
 8016388:	2301      	movs	r3, #1
 801638a:	e7f0      	b.n	801636e <_vfiprintf_r+0x1da>
 801638c:	ab03      	add	r3, sp, #12
 801638e:	9300      	str	r3, [sp, #0]
 8016390:	462a      	mov	r2, r5
 8016392:	4b16      	ldr	r3, [pc, #88]	; (80163ec <_vfiprintf_r+0x258>)
 8016394:	a904      	add	r1, sp, #16
 8016396:	4630      	mov	r0, r6
 8016398:	f3af 8000 	nop.w
 801639c:	4607      	mov	r7, r0
 801639e:	1c78      	adds	r0, r7, #1
 80163a0:	d1d6      	bne.n	8016350 <_vfiprintf_r+0x1bc>
 80163a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163a4:	07d9      	lsls	r1, r3, #31
 80163a6:	d405      	bmi.n	80163b4 <_vfiprintf_r+0x220>
 80163a8:	89ab      	ldrh	r3, [r5, #12]
 80163aa:	059a      	lsls	r2, r3, #22
 80163ac:	d402      	bmi.n	80163b4 <_vfiprintf_r+0x220>
 80163ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163b0:	f7ff fc81 	bl	8015cb6 <__retarget_lock_release_recursive>
 80163b4:	89ab      	ldrh	r3, [r5, #12]
 80163b6:	065b      	lsls	r3, r3, #25
 80163b8:	f53f af12 	bmi.w	80161e0 <_vfiprintf_r+0x4c>
 80163bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163be:	e711      	b.n	80161e4 <_vfiprintf_r+0x50>
 80163c0:	ab03      	add	r3, sp, #12
 80163c2:	9300      	str	r3, [sp, #0]
 80163c4:	462a      	mov	r2, r5
 80163c6:	4b09      	ldr	r3, [pc, #36]	; (80163ec <_vfiprintf_r+0x258>)
 80163c8:	a904      	add	r1, sp, #16
 80163ca:	4630      	mov	r0, r6
 80163cc:	f000 f880 	bl	80164d0 <_printf_i>
 80163d0:	e7e4      	b.n	801639c <_vfiprintf_r+0x208>
 80163d2:	bf00      	nop
 80163d4:	0801c5f4 	.word	0x0801c5f4
 80163d8:	0801c614 	.word	0x0801c614
 80163dc:	0801c5d4 	.word	0x0801c5d4
 80163e0:	0801c634 	.word	0x0801c634
 80163e4:	0801c63e 	.word	0x0801c63e
 80163e8:	00000000 	.word	0x00000000
 80163ec:	0801616f 	.word	0x0801616f
 80163f0:	0801c63a 	.word	0x0801c63a

080163f4 <_printf_common>:
 80163f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163f8:	4616      	mov	r6, r2
 80163fa:	4699      	mov	r9, r3
 80163fc:	688a      	ldr	r2, [r1, #8]
 80163fe:	690b      	ldr	r3, [r1, #16]
 8016400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016404:	4293      	cmp	r3, r2
 8016406:	bfb8      	it	lt
 8016408:	4613      	movlt	r3, r2
 801640a:	6033      	str	r3, [r6, #0]
 801640c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016410:	4607      	mov	r7, r0
 8016412:	460c      	mov	r4, r1
 8016414:	b10a      	cbz	r2, 801641a <_printf_common+0x26>
 8016416:	3301      	adds	r3, #1
 8016418:	6033      	str	r3, [r6, #0]
 801641a:	6823      	ldr	r3, [r4, #0]
 801641c:	0699      	lsls	r1, r3, #26
 801641e:	bf42      	ittt	mi
 8016420:	6833      	ldrmi	r3, [r6, #0]
 8016422:	3302      	addmi	r3, #2
 8016424:	6033      	strmi	r3, [r6, #0]
 8016426:	6825      	ldr	r5, [r4, #0]
 8016428:	f015 0506 	ands.w	r5, r5, #6
 801642c:	d106      	bne.n	801643c <_printf_common+0x48>
 801642e:	f104 0a19 	add.w	sl, r4, #25
 8016432:	68e3      	ldr	r3, [r4, #12]
 8016434:	6832      	ldr	r2, [r6, #0]
 8016436:	1a9b      	subs	r3, r3, r2
 8016438:	42ab      	cmp	r3, r5
 801643a:	dc26      	bgt.n	801648a <_printf_common+0x96>
 801643c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016440:	1e13      	subs	r3, r2, #0
 8016442:	6822      	ldr	r2, [r4, #0]
 8016444:	bf18      	it	ne
 8016446:	2301      	movne	r3, #1
 8016448:	0692      	lsls	r2, r2, #26
 801644a:	d42b      	bmi.n	80164a4 <_printf_common+0xb0>
 801644c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016450:	4649      	mov	r1, r9
 8016452:	4638      	mov	r0, r7
 8016454:	47c0      	blx	r8
 8016456:	3001      	adds	r0, #1
 8016458:	d01e      	beq.n	8016498 <_printf_common+0xa4>
 801645a:	6823      	ldr	r3, [r4, #0]
 801645c:	68e5      	ldr	r5, [r4, #12]
 801645e:	6832      	ldr	r2, [r6, #0]
 8016460:	f003 0306 	and.w	r3, r3, #6
 8016464:	2b04      	cmp	r3, #4
 8016466:	bf08      	it	eq
 8016468:	1aad      	subeq	r5, r5, r2
 801646a:	68a3      	ldr	r3, [r4, #8]
 801646c:	6922      	ldr	r2, [r4, #16]
 801646e:	bf0c      	ite	eq
 8016470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016474:	2500      	movne	r5, #0
 8016476:	4293      	cmp	r3, r2
 8016478:	bfc4      	itt	gt
 801647a:	1a9b      	subgt	r3, r3, r2
 801647c:	18ed      	addgt	r5, r5, r3
 801647e:	2600      	movs	r6, #0
 8016480:	341a      	adds	r4, #26
 8016482:	42b5      	cmp	r5, r6
 8016484:	d11a      	bne.n	80164bc <_printf_common+0xc8>
 8016486:	2000      	movs	r0, #0
 8016488:	e008      	b.n	801649c <_printf_common+0xa8>
 801648a:	2301      	movs	r3, #1
 801648c:	4652      	mov	r2, sl
 801648e:	4649      	mov	r1, r9
 8016490:	4638      	mov	r0, r7
 8016492:	47c0      	blx	r8
 8016494:	3001      	adds	r0, #1
 8016496:	d103      	bne.n	80164a0 <_printf_common+0xac>
 8016498:	f04f 30ff 	mov.w	r0, #4294967295
 801649c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164a0:	3501      	adds	r5, #1
 80164a2:	e7c6      	b.n	8016432 <_printf_common+0x3e>
 80164a4:	18e1      	adds	r1, r4, r3
 80164a6:	1c5a      	adds	r2, r3, #1
 80164a8:	2030      	movs	r0, #48	; 0x30
 80164aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80164ae:	4422      	add	r2, r4
 80164b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80164b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80164b8:	3302      	adds	r3, #2
 80164ba:	e7c7      	b.n	801644c <_printf_common+0x58>
 80164bc:	2301      	movs	r3, #1
 80164be:	4622      	mov	r2, r4
 80164c0:	4649      	mov	r1, r9
 80164c2:	4638      	mov	r0, r7
 80164c4:	47c0      	blx	r8
 80164c6:	3001      	adds	r0, #1
 80164c8:	d0e6      	beq.n	8016498 <_printf_common+0xa4>
 80164ca:	3601      	adds	r6, #1
 80164cc:	e7d9      	b.n	8016482 <_printf_common+0x8e>
	...

080164d0 <_printf_i>:
 80164d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80164d4:	7e0f      	ldrb	r7, [r1, #24]
 80164d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80164d8:	2f78      	cmp	r7, #120	; 0x78
 80164da:	4691      	mov	r9, r2
 80164dc:	4680      	mov	r8, r0
 80164de:	460c      	mov	r4, r1
 80164e0:	469a      	mov	sl, r3
 80164e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80164e6:	d807      	bhi.n	80164f8 <_printf_i+0x28>
 80164e8:	2f62      	cmp	r7, #98	; 0x62
 80164ea:	d80a      	bhi.n	8016502 <_printf_i+0x32>
 80164ec:	2f00      	cmp	r7, #0
 80164ee:	f000 80d8 	beq.w	80166a2 <_printf_i+0x1d2>
 80164f2:	2f58      	cmp	r7, #88	; 0x58
 80164f4:	f000 80a3 	beq.w	801663e <_printf_i+0x16e>
 80164f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80164fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016500:	e03a      	b.n	8016578 <_printf_i+0xa8>
 8016502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016506:	2b15      	cmp	r3, #21
 8016508:	d8f6      	bhi.n	80164f8 <_printf_i+0x28>
 801650a:	a101      	add	r1, pc, #4	; (adr r1, 8016510 <_printf_i+0x40>)
 801650c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016510:	08016569 	.word	0x08016569
 8016514:	0801657d 	.word	0x0801657d
 8016518:	080164f9 	.word	0x080164f9
 801651c:	080164f9 	.word	0x080164f9
 8016520:	080164f9 	.word	0x080164f9
 8016524:	080164f9 	.word	0x080164f9
 8016528:	0801657d 	.word	0x0801657d
 801652c:	080164f9 	.word	0x080164f9
 8016530:	080164f9 	.word	0x080164f9
 8016534:	080164f9 	.word	0x080164f9
 8016538:	080164f9 	.word	0x080164f9
 801653c:	08016689 	.word	0x08016689
 8016540:	080165ad 	.word	0x080165ad
 8016544:	0801666b 	.word	0x0801666b
 8016548:	080164f9 	.word	0x080164f9
 801654c:	080164f9 	.word	0x080164f9
 8016550:	080166ab 	.word	0x080166ab
 8016554:	080164f9 	.word	0x080164f9
 8016558:	080165ad 	.word	0x080165ad
 801655c:	080164f9 	.word	0x080164f9
 8016560:	080164f9 	.word	0x080164f9
 8016564:	08016673 	.word	0x08016673
 8016568:	682b      	ldr	r3, [r5, #0]
 801656a:	1d1a      	adds	r2, r3, #4
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	602a      	str	r2, [r5, #0]
 8016570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016578:	2301      	movs	r3, #1
 801657a:	e0a3      	b.n	80166c4 <_printf_i+0x1f4>
 801657c:	6820      	ldr	r0, [r4, #0]
 801657e:	6829      	ldr	r1, [r5, #0]
 8016580:	0606      	lsls	r6, r0, #24
 8016582:	f101 0304 	add.w	r3, r1, #4
 8016586:	d50a      	bpl.n	801659e <_printf_i+0xce>
 8016588:	680e      	ldr	r6, [r1, #0]
 801658a:	602b      	str	r3, [r5, #0]
 801658c:	2e00      	cmp	r6, #0
 801658e:	da03      	bge.n	8016598 <_printf_i+0xc8>
 8016590:	232d      	movs	r3, #45	; 0x2d
 8016592:	4276      	negs	r6, r6
 8016594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016598:	485e      	ldr	r0, [pc, #376]	; (8016714 <_printf_i+0x244>)
 801659a:	230a      	movs	r3, #10
 801659c:	e019      	b.n	80165d2 <_printf_i+0x102>
 801659e:	680e      	ldr	r6, [r1, #0]
 80165a0:	602b      	str	r3, [r5, #0]
 80165a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80165a6:	bf18      	it	ne
 80165a8:	b236      	sxthne	r6, r6
 80165aa:	e7ef      	b.n	801658c <_printf_i+0xbc>
 80165ac:	682b      	ldr	r3, [r5, #0]
 80165ae:	6820      	ldr	r0, [r4, #0]
 80165b0:	1d19      	adds	r1, r3, #4
 80165b2:	6029      	str	r1, [r5, #0]
 80165b4:	0601      	lsls	r1, r0, #24
 80165b6:	d501      	bpl.n	80165bc <_printf_i+0xec>
 80165b8:	681e      	ldr	r6, [r3, #0]
 80165ba:	e002      	b.n	80165c2 <_printf_i+0xf2>
 80165bc:	0646      	lsls	r6, r0, #25
 80165be:	d5fb      	bpl.n	80165b8 <_printf_i+0xe8>
 80165c0:	881e      	ldrh	r6, [r3, #0]
 80165c2:	4854      	ldr	r0, [pc, #336]	; (8016714 <_printf_i+0x244>)
 80165c4:	2f6f      	cmp	r7, #111	; 0x6f
 80165c6:	bf0c      	ite	eq
 80165c8:	2308      	moveq	r3, #8
 80165ca:	230a      	movne	r3, #10
 80165cc:	2100      	movs	r1, #0
 80165ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80165d2:	6865      	ldr	r5, [r4, #4]
 80165d4:	60a5      	str	r5, [r4, #8]
 80165d6:	2d00      	cmp	r5, #0
 80165d8:	bfa2      	ittt	ge
 80165da:	6821      	ldrge	r1, [r4, #0]
 80165dc:	f021 0104 	bicge.w	r1, r1, #4
 80165e0:	6021      	strge	r1, [r4, #0]
 80165e2:	b90e      	cbnz	r6, 80165e8 <_printf_i+0x118>
 80165e4:	2d00      	cmp	r5, #0
 80165e6:	d04d      	beq.n	8016684 <_printf_i+0x1b4>
 80165e8:	4615      	mov	r5, r2
 80165ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80165ee:	fb03 6711 	mls	r7, r3, r1, r6
 80165f2:	5dc7      	ldrb	r7, [r0, r7]
 80165f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80165f8:	4637      	mov	r7, r6
 80165fa:	42bb      	cmp	r3, r7
 80165fc:	460e      	mov	r6, r1
 80165fe:	d9f4      	bls.n	80165ea <_printf_i+0x11a>
 8016600:	2b08      	cmp	r3, #8
 8016602:	d10b      	bne.n	801661c <_printf_i+0x14c>
 8016604:	6823      	ldr	r3, [r4, #0]
 8016606:	07de      	lsls	r6, r3, #31
 8016608:	d508      	bpl.n	801661c <_printf_i+0x14c>
 801660a:	6923      	ldr	r3, [r4, #16]
 801660c:	6861      	ldr	r1, [r4, #4]
 801660e:	4299      	cmp	r1, r3
 8016610:	bfde      	ittt	le
 8016612:	2330      	movle	r3, #48	; 0x30
 8016614:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016618:	f105 35ff 	addle.w	r5, r5, #4294967295
 801661c:	1b52      	subs	r2, r2, r5
 801661e:	6122      	str	r2, [r4, #16]
 8016620:	f8cd a000 	str.w	sl, [sp]
 8016624:	464b      	mov	r3, r9
 8016626:	aa03      	add	r2, sp, #12
 8016628:	4621      	mov	r1, r4
 801662a:	4640      	mov	r0, r8
 801662c:	f7ff fee2 	bl	80163f4 <_printf_common>
 8016630:	3001      	adds	r0, #1
 8016632:	d14c      	bne.n	80166ce <_printf_i+0x1fe>
 8016634:	f04f 30ff 	mov.w	r0, #4294967295
 8016638:	b004      	add	sp, #16
 801663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801663e:	4835      	ldr	r0, [pc, #212]	; (8016714 <_printf_i+0x244>)
 8016640:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016644:	6829      	ldr	r1, [r5, #0]
 8016646:	6823      	ldr	r3, [r4, #0]
 8016648:	f851 6b04 	ldr.w	r6, [r1], #4
 801664c:	6029      	str	r1, [r5, #0]
 801664e:	061d      	lsls	r5, r3, #24
 8016650:	d514      	bpl.n	801667c <_printf_i+0x1ac>
 8016652:	07df      	lsls	r7, r3, #31
 8016654:	bf44      	itt	mi
 8016656:	f043 0320 	orrmi.w	r3, r3, #32
 801665a:	6023      	strmi	r3, [r4, #0]
 801665c:	b91e      	cbnz	r6, 8016666 <_printf_i+0x196>
 801665e:	6823      	ldr	r3, [r4, #0]
 8016660:	f023 0320 	bic.w	r3, r3, #32
 8016664:	6023      	str	r3, [r4, #0]
 8016666:	2310      	movs	r3, #16
 8016668:	e7b0      	b.n	80165cc <_printf_i+0xfc>
 801666a:	6823      	ldr	r3, [r4, #0]
 801666c:	f043 0320 	orr.w	r3, r3, #32
 8016670:	6023      	str	r3, [r4, #0]
 8016672:	2378      	movs	r3, #120	; 0x78
 8016674:	4828      	ldr	r0, [pc, #160]	; (8016718 <_printf_i+0x248>)
 8016676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801667a:	e7e3      	b.n	8016644 <_printf_i+0x174>
 801667c:	0659      	lsls	r1, r3, #25
 801667e:	bf48      	it	mi
 8016680:	b2b6      	uxthmi	r6, r6
 8016682:	e7e6      	b.n	8016652 <_printf_i+0x182>
 8016684:	4615      	mov	r5, r2
 8016686:	e7bb      	b.n	8016600 <_printf_i+0x130>
 8016688:	682b      	ldr	r3, [r5, #0]
 801668a:	6826      	ldr	r6, [r4, #0]
 801668c:	6961      	ldr	r1, [r4, #20]
 801668e:	1d18      	adds	r0, r3, #4
 8016690:	6028      	str	r0, [r5, #0]
 8016692:	0635      	lsls	r5, r6, #24
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	d501      	bpl.n	801669c <_printf_i+0x1cc>
 8016698:	6019      	str	r1, [r3, #0]
 801669a:	e002      	b.n	80166a2 <_printf_i+0x1d2>
 801669c:	0670      	lsls	r0, r6, #25
 801669e:	d5fb      	bpl.n	8016698 <_printf_i+0x1c8>
 80166a0:	8019      	strh	r1, [r3, #0]
 80166a2:	2300      	movs	r3, #0
 80166a4:	6123      	str	r3, [r4, #16]
 80166a6:	4615      	mov	r5, r2
 80166a8:	e7ba      	b.n	8016620 <_printf_i+0x150>
 80166aa:	682b      	ldr	r3, [r5, #0]
 80166ac:	1d1a      	adds	r2, r3, #4
 80166ae:	602a      	str	r2, [r5, #0]
 80166b0:	681d      	ldr	r5, [r3, #0]
 80166b2:	6862      	ldr	r2, [r4, #4]
 80166b4:	2100      	movs	r1, #0
 80166b6:	4628      	mov	r0, r5
 80166b8:	f7e9 fdb2 	bl	8000220 <memchr>
 80166bc:	b108      	cbz	r0, 80166c2 <_printf_i+0x1f2>
 80166be:	1b40      	subs	r0, r0, r5
 80166c0:	6060      	str	r0, [r4, #4]
 80166c2:	6863      	ldr	r3, [r4, #4]
 80166c4:	6123      	str	r3, [r4, #16]
 80166c6:	2300      	movs	r3, #0
 80166c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166cc:	e7a8      	b.n	8016620 <_printf_i+0x150>
 80166ce:	6923      	ldr	r3, [r4, #16]
 80166d0:	462a      	mov	r2, r5
 80166d2:	4649      	mov	r1, r9
 80166d4:	4640      	mov	r0, r8
 80166d6:	47d0      	blx	sl
 80166d8:	3001      	adds	r0, #1
 80166da:	d0ab      	beq.n	8016634 <_printf_i+0x164>
 80166dc:	6823      	ldr	r3, [r4, #0]
 80166de:	079b      	lsls	r3, r3, #30
 80166e0:	d413      	bmi.n	801670a <_printf_i+0x23a>
 80166e2:	68e0      	ldr	r0, [r4, #12]
 80166e4:	9b03      	ldr	r3, [sp, #12]
 80166e6:	4298      	cmp	r0, r3
 80166e8:	bfb8      	it	lt
 80166ea:	4618      	movlt	r0, r3
 80166ec:	e7a4      	b.n	8016638 <_printf_i+0x168>
 80166ee:	2301      	movs	r3, #1
 80166f0:	4632      	mov	r2, r6
 80166f2:	4649      	mov	r1, r9
 80166f4:	4640      	mov	r0, r8
 80166f6:	47d0      	blx	sl
 80166f8:	3001      	adds	r0, #1
 80166fa:	d09b      	beq.n	8016634 <_printf_i+0x164>
 80166fc:	3501      	adds	r5, #1
 80166fe:	68e3      	ldr	r3, [r4, #12]
 8016700:	9903      	ldr	r1, [sp, #12]
 8016702:	1a5b      	subs	r3, r3, r1
 8016704:	42ab      	cmp	r3, r5
 8016706:	dcf2      	bgt.n	80166ee <_printf_i+0x21e>
 8016708:	e7eb      	b.n	80166e2 <_printf_i+0x212>
 801670a:	2500      	movs	r5, #0
 801670c:	f104 0619 	add.w	r6, r4, #25
 8016710:	e7f5      	b.n	80166fe <_printf_i+0x22e>
 8016712:	bf00      	nop
 8016714:	0801c645 	.word	0x0801c645
 8016718:	0801c656 	.word	0x0801c656

0801671c <_sbrk_r>:
 801671c:	b538      	push	{r3, r4, r5, lr}
 801671e:	4d06      	ldr	r5, [pc, #24]	; (8016738 <_sbrk_r+0x1c>)
 8016720:	2300      	movs	r3, #0
 8016722:	4604      	mov	r4, r0
 8016724:	4608      	mov	r0, r1
 8016726:	602b      	str	r3, [r5, #0]
 8016728:	f7ec f9ba 	bl	8002aa0 <_sbrk>
 801672c:	1c43      	adds	r3, r0, #1
 801672e:	d102      	bne.n	8016736 <_sbrk_r+0x1a>
 8016730:	682b      	ldr	r3, [r5, #0]
 8016732:	b103      	cbz	r3, 8016736 <_sbrk_r+0x1a>
 8016734:	6023      	str	r3, [r4, #0]
 8016736:	bd38      	pop	{r3, r4, r5, pc}
 8016738:	2000b1b8 	.word	0x2000b1b8

0801673c <__sread>:
 801673c:	b510      	push	{r4, lr}
 801673e:	460c      	mov	r4, r1
 8016740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016744:	f000 fa9e 	bl	8016c84 <_read_r>
 8016748:	2800      	cmp	r0, #0
 801674a:	bfab      	itete	ge
 801674c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801674e:	89a3      	ldrhlt	r3, [r4, #12]
 8016750:	181b      	addge	r3, r3, r0
 8016752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016756:	bfac      	ite	ge
 8016758:	6563      	strge	r3, [r4, #84]	; 0x54
 801675a:	81a3      	strhlt	r3, [r4, #12]
 801675c:	bd10      	pop	{r4, pc}

0801675e <__swrite>:
 801675e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016762:	461f      	mov	r7, r3
 8016764:	898b      	ldrh	r3, [r1, #12]
 8016766:	05db      	lsls	r3, r3, #23
 8016768:	4605      	mov	r5, r0
 801676a:	460c      	mov	r4, r1
 801676c:	4616      	mov	r6, r2
 801676e:	d505      	bpl.n	801677c <__swrite+0x1e>
 8016770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016774:	2302      	movs	r3, #2
 8016776:	2200      	movs	r2, #0
 8016778:	f000 f9d0 	bl	8016b1c <_lseek_r>
 801677c:	89a3      	ldrh	r3, [r4, #12]
 801677e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016786:	81a3      	strh	r3, [r4, #12]
 8016788:	4632      	mov	r2, r6
 801678a:	463b      	mov	r3, r7
 801678c:	4628      	mov	r0, r5
 801678e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016792:	f000 b869 	b.w	8016868 <_write_r>

08016796 <__sseek>:
 8016796:	b510      	push	{r4, lr}
 8016798:	460c      	mov	r4, r1
 801679a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801679e:	f000 f9bd 	bl	8016b1c <_lseek_r>
 80167a2:	1c43      	adds	r3, r0, #1
 80167a4:	89a3      	ldrh	r3, [r4, #12]
 80167a6:	bf15      	itete	ne
 80167a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80167aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80167ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80167b2:	81a3      	strheq	r3, [r4, #12]
 80167b4:	bf18      	it	ne
 80167b6:	81a3      	strhne	r3, [r4, #12]
 80167b8:	bd10      	pop	{r4, pc}

080167ba <__sclose>:
 80167ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167be:	f000 b8db 	b.w	8016978 <_close_r>
	...

080167c4 <__swbuf_r>:
 80167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167c6:	460e      	mov	r6, r1
 80167c8:	4614      	mov	r4, r2
 80167ca:	4605      	mov	r5, r0
 80167cc:	b118      	cbz	r0, 80167d6 <__swbuf_r+0x12>
 80167ce:	6983      	ldr	r3, [r0, #24]
 80167d0:	b90b      	cbnz	r3, 80167d6 <__swbuf_r+0x12>
 80167d2:	f7ff f9bf 	bl	8015b54 <__sinit>
 80167d6:	4b21      	ldr	r3, [pc, #132]	; (801685c <__swbuf_r+0x98>)
 80167d8:	429c      	cmp	r4, r3
 80167da:	d12b      	bne.n	8016834 <__swbuf_r+0x70>
 80167dc:	686c      	ldr	r4, [r5, #4]
 80167de:	69a3      	ldr	r3, [r4, #24]
 80167e0:	60a3      	str	r3, [r4, #8]
 80167e2:	89a3      	ldrh	r3, [r4, #12]
 80167e4:	071a      	lsls	r2, r3, #28
 80167e6:	d52f      	bpl.n	8016848 <__swbuf_r+0x84>
 80167e8:	6923      	ldr	r3, [r4, #16]
 80167ea:	b36b      	cbz	r3, 8016848 <__swbuf_r+0x84>
 80167ec:	6923      	ldr	r3, [r4, #16]
 80167ee:	6820      	ldr	r0, [r4, #0]
 80167f0:	1ac0      	subs	r0, r0, r3
 80167f2:	6963      	ldr	r3, [r4, #20]
 80167f4:	b2f6      	uxtb	r6, r6
 80167f6:	4283      	cmp	r3, r0
 80167f8:	4637      	mov	r7, r6
 80167fa:	dc04      	bgt.n	8016806 <__swbuf_r+0x42>
 80167fc:	4621      	mov	r1, r4
 80167fe:	4628      	mov	r0, r5
 8016800:	f000 f950 	bl	8016aa4 <_fflush_r>
 8016804:	bb30      	cbnz	r0, 8016854 <__swbuf_r+0x90>
 8016806:	68a3      	ldr	r3, [r4, #8]
 8016808:	3b01      	subs	r3, #1
 801680a:	60a3      	str	r3, [r4, #8]
 801680c:	6823      	ldr	r3, [r4, #0]
 801680e:	1c5a      	adds	r2, r3, #1
 8016810:	6022      	str	r2, [r4, #0]
 8016812:	701e      	strb	r6, [r3, #0]
 8016814:	6963      	ldr	r3, [r4, #20]
 8016816:	3001      	adds	r0, #1
 8016818:	4283      	cmp	r3, r0
 801681a:	d004      	beq.n	8016826 <__swbuf_r+0x62>
 801681c:	89a3      	ldrh	r3, [r4, #12]
 801681e:	07db      	lsls	r3, r3, #31
 8016820:	d506      	bpl.n	8016830 <__swbuf_r+0x6c>
 8016822:	2e0a      	cmp	r6, #10
 8016824:	d104      	bne.n	8016830 <__swbuf_r+0x6c>
 8016826:	4621      	mov	r1, r4
 8016828:	4628      	mov	r0, r5
 801682a:	f000 f93b 	bl	8016aa4 <_fflush_r>
 801682e:	b988      	cbnz	r0, 8016854 <__swbuf_r+0x90>
 8016830:	4638      	mov	r0, r7
 8016832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016834:	4b0a      	ldr	r3, [pc, #40]	; (8016860 <__swbuf_r+0x9c>)
 8016836:	429c      	cmp	r4, r3
 8016838:	d101      	bne.n	801683e <__swbuf_r+0x7a>
 801683a:	68ac      	ldr	r4, [r5, #8]
 801683c:	e7cf      	b.n	80167de <__swbuf_r+0x1a>
 801683e:	4b09      	ldr	r3, [pc, #36]	; (8016864 <__swbuf_r+0xa0>)
 8016840:	429c      	cmp	r4, r3
 8016842:	bf08      	it	eq
 8016844:	68ec      	ldreq	r4, [r5, #12]
 8016846:	e7ca      	b.n	80167de <__swbuf_r+0x1a>
 8016848:	4621      	mov	r1, r4
 801684a:	4628      	mov	r0, r5
 801684c:	f000 f81e 	bl	801688c <__swsetup_r>
 8016850:	2800      	cmp	r0, #0
 8016852:	d0cb      	beq.n	80167ec <__swbuf_r+0x28>
 8016854:	f04f 37ff 	mov.w	r7, #4294967295
 8016858:	e7ea      	b.n	8016830 <__swbuf_r+0x6c>
 801685a:	bf00      	nop
 801685c:	0801c5f4 	.word	0x0801c5f4
 8016860:	0801c614 	.word	0x0801c614
 8016864:	0801c5d4 	.word	0x0801c5d4

08016868 <_write_r>:
 8016868:	b538      	push	{r3, r4, r5, lr}
 801686a:	4d07      	ldr	r5, [pc, #28]	; (8016888 <_write_r+0x20>)
 801686c:	4604      	mov	r4, r0
 801686e:	4608      	mov	r0, r1
 8016870:	4611      	mov	r1, r2
 8016872:	2200      	movs	r2, #0
 8016874:	602a      	str	r2, [r5, #0]
 8016876:	461a      	mov	r2, r3
 8016878:	f7e9 ff35 	bl	80006e6 <_write>
 801687c:	1c43      	adds	r3, r0, #1
 801687e:	d102      	bne.n	8016886 <_write_r+0x1e>
 8016880:	682b      	ldr	r3, [r5, #0]
 8016882:	b103      	cbz	r3, 8016886 <_write_r+0x1e>
 8016884:	6023      	str	r3, [r4, #0]
 8016886:	bd38      	pop	{r3, r4, r5, pc}
 8016888:	2000b1b8 	.word	0x2000b1b8

0801688c <__swsetup_r>:
 801688c:	4b32      	ldr	r3, [pc, #200]	; (8016958 <__swsetup_r+0xcc>)
 801688e:	b570      	push	{r4, r5, r6, lr}
 8016890:	681d      	ldr	r5, [r3, #0]
 8016892:	4606      	mov	r6, r0
 8016894:	460c      	mov	r4, r1
 8016896:	b125      	cbz	r5, 80168a2 <__swsetup_r+0x16>
 8016898:	69ab      	ldr	r3, [r5, #24]
 801689a:	b913      	cbnz	r3, 80168a2 <__swsetup_r+0x16>
 801689c:	4628      	mov	r0, r5
 801689e:	f7ff f959 	bl	8015b54 <__sinit>
 80168a2:	4b2e      	ldr	r3, [pc, #184]	; (801695c <__swsetup_r+0xd0>)
 80168a4:	429c      	cmp	r4, r3
 80168a6:	d10f      	bne.n	80168c8 <__swsetup_r+0x3c>
 80168a8:	686c      	ldr	r4, [r5, #4]
 80168aa:	89a3      	ldrh	r3, [r4, #12]
 80168ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80168b0:	0719      	lsls	r1, r3, #28
 80168b2:	d42c      	bmi.n	801690e <__swsetup_r+0x82>
 80168b4:	06dd      	lsls	r5, r3, #27
 80168b6:	d411      	bmi.n	80168dc <__swsetup_r+0x50>
 80168b8:	2309      	movs	r3, #9
 80168ba:	6033      	str	r3, [r6, #0]
 80168bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80168c0:	81a3      	strh	r3, [r4, #12]
 80168c2:	f04f 30ff 	mov.w	r0, #4294967295
 80168c6:	e03e      	b.n	8016946 <__swsetup_r+0xba>
 80168c8:	4b25      	ldr	r3, [pc, #148]	; (8016960 <__swsetup_r+0xd4>)
 80168ca:	429c      	cmp	r4, r3
 80168cc:	d101      	bne.n	80168d2 <__swsetup_r+0x46>
 80168ce:	68ac      	ldr	r4, [r5, #8]
 80168d0:	e7eb      	b.n	80168aa <__swsetup_r+0x1e>
 80168d2:	4b24      	ldr	r3, [pc, #144]	; (8016964 <__swsetup_r+0xd8>)
 80168d4:	429c      	cmp	r4, r3
 80168d6:	bf08      	it	eq
 80168d8:	68ec      	ldreq	r4, [r5, #12]
 80168da:	e7e6      	b.n	80168aa <__swsetup_r+0x1e>
 80168dc:	0758      	lsls	r0, r3, #29
 80168de:	d512      	bpl.n	8016906 <__swsetup_r+0x7a>
 80168e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168e2:	b141      	cbz	r1, 80168f6 <__swsetup_r+0x6a>
 80168e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168e8:	4299      	cmp	r1, r3
 80168ea:	d002      	beq.n	80168f2 <__swsetup_r+0x66>
 80168ec:	4630      	mov	r0, r6
 80168ee:	f7ff f9eb 	bl	8015cc8 <_free_r>
 80168f2:	2300      	movs	r3, #0
 80168f4:	6363      	str	r3, [r4, #52]	; 0x34
 80168f6:	89a3      	ldrh	r3, [r4, #12]
 80168f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80168fc:	81a3      	strh	r3, [r4, #12]
 80168fe:	2300      	movs	r3, #0
 8016900:	6063      	str	r3, [r4, #4]
 8016902:	6923      	ldr	r3, [r4, #16]
 8016904:	6023      	str	r3, [r4, #0]
 8016906:	89a3      	ldrh	r3, [r4, #12]
 8016908:	f043 0308 	orr.w	r3, r3, #8
 801690c:	81a3      	strh	r3, [r4, #12]
 801690e:	6923      	ldr	r3, [r4, #16]
 8016910:	b94b      	cbnz	r3, 8016926 <__swsetup_r+0x9a>
 8016912:	89a3      	ldrh	r3, [r4, #12]
 8016914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801691c:	d003      	beq.n	8016926 <__swsetup_r+0x9a>
 801691e:	4621      	mov	r1, r4
 8016920:	4630      	mov	r0, r6
 8016922:	f000 f933 	bl	8016b8c <__smakebuf_r>
 8016926:	89a0      	ldrh	r0, [r4, #12]
 8016928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801692c:	f010 0301 	ands.w	r3, r0, #1
 8016930:	d00a      	beq.n	8016948 <__swsetup_r+0xbc>
 8016932:	2300      	movs	r3, #0
 8016934:	60a3      	str	r3, [r4, #8]
 8016936:	6963      	ldr	r3, [r4, #20]
 8016938:	425b      	negs	r3, r3
 801693a:	61a3      	str	r3, [r4, #24]
 801693c:	6923      	ldr	r3, [r4, #16]
 801693e:	b943      	cbnz	r3, 8016952 <__swsetup_r+0xc6>
 8016940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016944:	d1ba      	bne.n	80168bc <__swsetup_r+0x30>
 8016946:	bd70      	pop	{r4, r5, r6, pc}
 8016948:	0781      	lsls	r1, r0, #30
 801694a:	bf58      	it	pl
 801694c:	6963      	ldrpl	r3, [r4, #20]
 801694e:	60a3      	str	r3, [r4, #8]
 8016950:	e7f4      	b.n	801693c <__swsetup_r+0xb0>
 8016952:	2000      	movs	r0, #0
 8016954:	e7f7      	b.n	8016946 <__swsetup_r+0xba>
 8016956:	bf00      	nop
 8016958:	20000064 	.word	0x20000064
 801695c:	0801c5f4 	.word	0x0801c5f4
 8016960:	0801c614 	.word	0x0801c614
 8016964:	0801c5d4 	.word	0x0801c5d4

08016968 <abort>:
 8016968:	b508      	push	{r3, lr}
 801696a:	2006      	movs	r0, #6
 801696c:	f000 f9c4 	bl	8016cf8 <raise>
 8016970:	2001      	movs	r0, #1
 8016972:	f7ec f839 	bl	80029e8 <_exit>
	...

08016978 <_close_r>:
 8016978:	b538      	push	{r3, r4, r5, lr}
 801697a:	4d06      	ldr	r5, [pc, #24]	; (8016994 <_close_r+0x1c>)
 801697c:	2300      	movs	r3, #0
 801697e:	4604      	mov	r4, r0
 8016980:	4608      	mov	r0, r1
 8016982:	602b      	str	r3, [r5, #0]
 8016984:	f7ec f857 	bl	8002a36 <_close>
 8016988:	1c43      	adds	r3, r0, #1
 801698a:	d102      	bne.n	8016992 <_close_r+0x1a>
 801698c:	682b      	ldr	r3, [r5, #0]
 801698e:	b103      	cbz	r3, 8016992 <_close_r+0x1a>
 8016990:	6023      	str	r3, [r4, #0]
 8016992:	bd38      	pop	{r3, r4, r5, pc}
 8016994:	2000b1b8 	.word	0x2000b1b8

08016998 <__sflush_r>:
 8016998:	898a      	ldrh	r2, [r1, #12]
 801699a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801699e:	4605      	mov	r5, r0
 80169a0:	0710      	lsls	r0, r2, #28
 80169a2:	460c      	mov	r4, r1
 80169a4:	d458      	bmi.n	8016a58 <__sflush_r+0xc0>
 80169a6:	684b      	ldr	r3, [r1, #4]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	dc05      	bgt.n	80169b8 <__sflush_r+0x20>
 80169ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	dc02      	bgt.n	80169b8 <__sflush_r+0x20>
 80169b2:	2000      	movs	r0, #0
 80169b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80169ba:	2e00      	cmp	r6, #0
 80169bc:	d0f9      	beq.n	80169b2 <__sflush_r+0x1a>
 80169be:	2300      	movs	r3, #0
 80169c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80169c4:	682f      	ldr	r7, [r5, #0]
 80169c6:	602b      	str	r3, [r5, #0]
 80169c8:	d032      	beq.n	8016a30 <__sflush_r+0x98>
 80169ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80169cc:	89a3      	ldrh	r3, [r4, #12]
 80169ce:	075a      	lsls	r2, r3, #29
 80169d0:	d505      	bpl.n	80169de <__sflush_r+0x46>
 80169d2:	6863      	ldr	r3, [r4, #4]
 80169d4:	1ac0      	subs	r0, r0, r3
 80169d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80169d8:	b10b      	cbz	r3, 80169de <__sflush_r+0x46>
 80169da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80169dc:	1ac0      	subs	r0, r0, r3
 80169de:	2300      	movs	r3, #0
 80169e0:	4602      	mov	r2, r0
 80169e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80169e4:	6a21      	ldr	r1, [r4, #32]
 80169e6:	4628      	mov	r0, r5
 80169e8:	47b0      	blx	r6
 80169ea:	1c43      	adds	r3, r0, #1
 80169ec:	89a3      	ldrh	r3, [r4, #12]
 80169ee:	d106      	bne.n	80169fe <__sflush_r+0x66>
 80169f0:	6829      	ldr	r1, [r5, #0]
 80169f2:	291d      	cmp	r1, #29
 80169f4:	d82c      	bhi.n	8016a50 <__sflush_r+0xb8>
 80169f6:	4a2a      	ldr	r2, [pc, #168]	; (8016aa0 <__sflush_r+0x108>)
 80169f8:	40ca      	lsrs	r2, r1
 80169fa:	07d6      	lsls	r6, r2, #31
 80169fc:	d528      	bpl.n	8016a50 <__sflush_r+0xb8>
 80169fe:	2200      	movs	r2, #0
 8016a00:	6062      	str	r2, [r4, #4]
 8016a02:	04d9      	lsls	r1, r3, #19
 8016a04:	6922      	ldr	r2, [r4, #16]
 8016a06:	6022      	str	r2, [r4, #0]
 8016a08:	d504      	bpl.n	8016a14 <__sflush_r+0x7c>
 8016a0a:	1c42      	adds	r2, r0, #1
 8016a0c:	d101      	bne.n	8016a12 <__sflush_r+0x7a>
 8016a0e:	682b      	ldr	r3, [r5, #0]
 8016a10:	b903      	cbnz	r3, 8016a14 <__sflush_r+0x7c>
 8016a12:	6560      	str	r0, [r4, #84]	; 0x54
 8016a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a16:	602f      	str	r7, [r5, #0]
 8016a18:	2900      	cmp	r1, #0
 8016a1a:	d0ca      	beq.n	80169b2 <__sflush_r+0x1a>
 8016a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a20:	4299      	cmp	r1, r3
 8016a22:	d002      	beq.n	8016a2a <__sflush_r+0x92>
 8016a24:	4628      	mov	r0, r5
 8016a26:	f7ff f94f 	bl	8015cc8 <_free_r>
 8016a2a:	2000      	movs	r0, #0
 8016a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8016a2e:	e7c1      	b.n	80169b4 <__sflush_r+0x1c>
 8016a30:	6a21      	ldr	r1, [r4, #32]
 8016a32:	2301      	movs	r3, #1
 8016a34:	4628      	mov	r0, r5
 8016a36:	47b0      	blx	r6
 8016a38:	1c41      	adds	r1, r0, #1
 8016a3a:	d1c7      	bne.n	80169cc <__sflush_r+0x34>
 8016a3c:	682b      	ldr	r3, [r5, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d0c4      	beq.n	80169cc <__sflush_r+0x34>
 8016a42:	2b1d      	cmp	r3, #29
 8016a44:	d001      	beq.n	8016a4a <__sflush_r+0xb2>
 8016a46:	2b16      	cmp	r3, #22
 8016a48:	d101      	bne.n	8016a4e <__sflush_r+0xb6>
 8016a4a:	602f      	str	r7, [r5, #0]
 8016a4c:	e7b1      	b.n	80169b2 <__sflush_r+0x1a>
 8016a4e:	89a3      	ldrh	r3, [r4, #12]
 8016a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a54:	81a3      	strh	r3, [r4, #12]
 8016a56:	e7ad      	b.n	80169b4 <__sflush_r+0x1c>
 8016a58:	690f      	ldr	r7, [r1, #16]
 8016a5a:	2f00      	cmp	r7, #0
 8016a5c:	d0a9      	beq.n	80169b2 <__sflush_r+0x1a>
 8016a5e:	0793      	lsls	r3, r2, #30
 8016a60:	680e      	ldr	r6, [r1, #0]
 8016a62:	bf08      	it	eq
 8016a64:	694b      	ldreq	r3, [r1, #20]
 8016a66:	600f      	str	r7, [r1, #0]
 8016a68:	bf18      	it	ne
 8016a6a:	2300      	movne	r3, #0
 8016a6c:	eba6 0807 	sub.w	r8, r6, r7
 8016a70:	608b      	str	r3, [r1, #8]
 8016a72:	f1b8 0f00 	cmp.w	r8, #0
 8016a76:	dd9c      	ble.n	80169b2 <__sflush_r+0x1a>
 8016a78:	6a21      	ldr	r1, [r4, #32]
 8016a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016a7c:	4643      	mov	r3, r8
 8016a7e:	463a      	mov	r2, r7
 8016a80:	4628      	mov	r0, r5
 8016a82:	47b0      	blx	r6
 8016a84:	2800      	cmp	r0, #0
 8016a86:	dc06      	bgt.n	8016a96 <__sflush_r+0xfe>
 8016a88:	89a3      	ldrh	r3, [r4, #12]
 8016a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a8e:	81a3      	strh	r3, [r4, #12]
 8016a90:	f04f 30ff 	mov.w	r0, #4294967295
 8016a94:	e78e      	b.n	80169b4 <__sflush_r+0x1c>
 8016a96:	4407      	add	r7, r0
 8016a98:	eba8 0800 	sub.w	r8, r8, r0
 8016a9c:	e7e9      	b.n	8016a72 <__sflush_r+0xda>
 8016a9e:	bf00      	nop
 8016aa0:	20400001 	.word	0x20400001

08016aa4 <_fflush_r>:
 8016aa4:	b538      	push	{r3, r4, r5, lr}
 8016aa6:	690b      	ldr	r3, [r1, #16]
 8016aa8:	4605      	mov	r5, r0
 8016aaa:	460c      	mov	r4, r1
 8016aac:	b913      	cbnz	r3, 8016ab4 <_fflush_r+0x10>
 8016aae:	2500      	movs	r5, #0
 8016ab0:	4628      	mov	r0, r5
 8016ab2:	bd38      	pop	{r3, r4, r5, pc}
 8016ab4:	b118      	cbz	r0, 8016abe <_fflush_r+0x1a>
 8016ab6:	6983      	ldr	r3, [r0, #24]
 8016ab8:	b90b      	cbnz	r3, 8016abe <_fflush_r+0x1a>
 8016aba:	f7ff f84b 	bl	8015b54 <__sinit>
 8016abe:	4b14      	ldr	r3, [pc, #80]	; (8016b10 <_fflush_r+0x6c>)
 8016ac0:	429c      	cmp	r4, r3
 8016ac2:	d11b      	bne.n	8016afc <_fflush_r+0x58>
 8016ac4:	686c      	ldr	r4, [r5, #4]
 8016ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d0ef      	beq.n	8016aae <_fflush_r+0xa>
 8016ace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016ad0:	07d0      	lsls	r0, r2, #31
 8016ad2:	d404      	bmi.n	8016ade <_fflush_r+0x3a>
 8016ad4:	0599      	lsls	r1, r3, #22
 8016ad6:	d402      	bmi.n	8016ade <_fflush_r+0x3a>
 8016ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ada:	f7ff f8eb 	bl	8015cb4 <__retarget_lock_acquire_recursive>
 8016ade:	4628      	mov	r0, r5
 8016ae0:	4621      	mov	r1, r4
 8016ae2:	f7ff ff59 	bl	8016998 <__sflush_r>
 8016ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ae8:	07da      	lsls	r2, r3, #31
 8016aea:	4605      	mov	r5, r0
 8016aec:	d4e0      	bmi.n	8016ab0 <_fflush_r+0xc>
 8016aee:	89a3      	ldrh	r3, [r4, #12]
 8016af0:	059b      	lsls	r3, r3, #22
 8016af2:	d4dd      	bmi.n	8016ab0 <_fflush_r+0xc>
 8016af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016af6:	f7ff f8de 	bl	8015cb6 <__retarget_lock_release_recursive>
 8016afa:	e7d9      	b.n	8016ab0 <_fflush_r+0xc>
 8016afc:	4b05      	ldr	r3, [pc, #20]	; (8016b14 <_fflush_r+0x70>)
 8016afe:	429c      	cmp	r4, r3
 8016b00:	d101      	bne.n	8016b06 <_fflush_r+0x62>
 8016b02:	68ac      	ldr	r4, [r5, #8]
 8016b04:	e7df      	b.n	8016ac6 <_fflush_r+0x22>
 8016b06:	4b04      	ldr	r3, [pc, #16]	; (8016b18 <_fflush_r+0x74>)
 8016b08:	429c      	cmp	r4, r3
 8016b0a:	bf08      	it	eq
 8016b0c:	68ec      	ldreq	r4, [r5, #12]
 8016b0e:	e7da      	b.n	8016ac6 <_fflush_r+0x22>
 8016b10:	0801c5f4 	.word	0x0801c5f4
 8016b14:	0801c614 	.word	0x0801c614
 8016b18:	0801c5d4 	.word	0x0801c5d4

08016b1c <_lseek_r>:
 8016b1c:	b538      	push	{r3, r4, r5, lr}
 8016b1e:	4d07      	ldr	r5, [pc, #28]	; (8016b3c <_lseek_r+0x20>)
 8016b20:	4604      	mov	r4, r0
 8016b22:	4608      	mov	r0, r1
 8016b24:	4611      	mov	r1, r2
 8016b26:	2200      	movs	r2, #0
 8016b28:	602a      	str	r2, [r5, #0]
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	f7eb ffaa 	bl	8002a84 <_lseek>
 8016b30:	1c43      	adds	r3, r0, #1
 8016b32:	d102      	bne.n	8016b3a <_lseek_r+0x1e>
 8016b34:	682b      	ldr	r3, [r5, #0]
 8016b36:	b103      	cbz	r3, 8016b3a <_lseek_r+0x1e>
 8016b38:	6023      	str	r3, [r4, #0]
 8016b3a:	bd38      	pop	{r3, r4, r5, pc}
 8016b3c:	2000b1b8 	.word	0x2000b1b8

08016b40 <__swhatbuf_r>:
 8016b40:	b570      	push	{r4, r5, r6, lr}
 8016b42:	460e      	mov	r6, r1
 8016b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b48:	2900      	cmp	r1, #0
 8016b4a:	b096      	sub	sp, #88	; 0x58
 8016b4c:	4614      	mov	r4, r2
 8016b4e:	461d      	mov	r5, r3
 8016b50:	da08      	bge.n	8016b64 <__swhatbuf_r+0x24>
 8016b52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016b56:	2200      	movs	r2, #0
 8016b58:	602a      	str	r2, [r5, #0]
 8016b5a:	061a      	lsls	r2, r3, #24
 8016b5c:	d410      	bmi.n	8016b80 <__swhatbuf_r+0x40>
 8016b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b62:	e00e      	b.n	8016b82 <__swhatbuf_r+0x42>
 8016b64:	466a      	mov	r2, sp
 8016b66:	f000 f8e3 	bl	8016d30 <_fstat_r>
 8016b6a:	2800      	cmp	r0, #0
 8016b6c:	dbf1      	blt.n	8016b52 <__swhatbuf_r+0x12>
 8016b6e:	9a01      	ldr	r2, [sp, #4]
 8016b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b78:	425a      	negs	r2, r3
 8016b7a:	415a      	adcs	r2, r3
 8016b7c:	602a      	str	r2, [r5, #0]
 8016b7e:	e7ee      	b.n	8016b5e <__swhatbuf_r+0x1e>
 8016b80:	2340      	movs	r3, #64	; 0x40
 8016b82:	2000      	movs	r0, #0
 8016b84:	6023      	str	r3, [r4, #0]
 8016b86:	b016      	add	sp, #88	; 0x58
 8016b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b8c <__smakebuf_r>:
 8016b8c:	898b      	ldrh	r3, [r1, #12]
 8016b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b90:	079d      	lsls	r5, r3, #30
 8016b92:	4606      	mov	r6, r0
 8016b94:	460c      	mov	r4, r1
 8016b96:	d507      	bpl.n	8016ba8 <__smakebuf_r+0x1c>
 8016b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b9c:	6023      	str	r3, [r4, #0]
 8016b9e:	6123      	str	r3, [r4, #16]
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	6163      	str	r3, [r4, #20]
 8016ba4:	b002      	add	sp, #8
 8016ba6:	bd70      	pop	{r4, r5, r6, pc}
 8016ba8:	ab01      	add	r3, sp, #4
 8016baa:	466a      	mov	r2, sp
 8016bac:	f7ff ffc8 	bl	8016b40 <__swhatbuf_r>
 8016bb0:	9900      	ldr	r1, [sp, #0]
 8016bb2:	4605      	mov	r5, r0
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	f7ff f8f3 	bl	8015da0 <_malloc_r>
 8016bba:	b948      	cbnz	r0, 8016bd0 <__smakebuf_r+0x44>
 8016bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bc0:	059a      	lsls	r2, r3, #22
 8016bc2:	d4ef      	bmi.n	8016ba4 <__smakebuf_r+0x18>
 8016bc4:	f023 0303 	bic.w	r3, r3, #3
 8016bc8:	f043 0302 	orr.w	r3, r3, #2
 8016bcc:	81a3      	strh	r3, [r4, #12]
 8016bce:	e7e3      	b.n	8016b98 <__smakebuf_r+0xc>
 8016bd0:	4b0d      	ldr	r3, [pc, #52]	; (8016c08 <__smakebuf_r+0x7c>)
 8016bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8016bd4:	89a3      	ldrh	r3, [r4, #12]
 8016bd6:	6020      	str	r0, [r4, #0]
 8016bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bdc:	81a3      	strh	r3, [r4, #12]
 8016bde:	9b00      	ldr	r3, [sp, #0]
 8016be0:	6163      	str	r3, [r4, #20]
 8016be2:	9b01      	ldr	r3, [sp, #4]
 8016be4:	6120      	str	r0, [r4, #16]
 8016be6:	b15b      	cbz	r3, 8016c00 <__smakebuf_r+0x74>
 8016be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bec:	4630      	mov	r0, r6
 8016bee:	f000 f8b1 	bl	8016d54 <_isatty_r>
 8016bf2:	b128      	cbz	r0, 8016c00 <__smakebuf_r+0x74>
 8016bf4:	89a3      	ldrh	r3, [r4, #12]
 8016bf6:	f023 0303 	bic.w	r3, r3, #3
 8016bfa:	f043 0301 	orr.w	r3, r3, #1
 8016bfe:	81a3      	strh	r3, [r4, #12]
 8016c00:	89a0      	ldrh	r0, [r4, #12]
 8016c02:	4305      	orrs	r5, r0
 8016c04:	81a5      	strh	r5, [r4, #12]
 8016c06:	e7cd      	b.n	8016ba4 <__smakebuf_r+0x18>
 8016c08:	08015aed 	.word	0x08015aed

08016c0c <__malloc_lock>:
 8016c0c:	4801      	ldr	r0, [pc, #4]	; (8016c14 <__malloc_lock+0x8>)
 8016c0e:	f7ff b851 	b.w	8015cb4 <__retarget_lock_acquire_recursive>
 8016c12:	bf00      	nop
 8016c14:	2000b1bc 	.word	0x2000b1bc

08016c18 <__malloc_unlock>:
 8016c18:	4801      	ldr	r0, [pc, #4]	; (8016c20 <__malloc_unlock+0x8>)
 8016c1a:	f7ff b84c 	b.w	8015cb6 <__retarget_lock_release_recursive>
 8016c1e:	bf00      	nop
 8016c20:	2000b1bc 	.word	0x2000b1bc

08016c24 <_realloc_r>:
 8016c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c28:	4680      	mov	r8, r0
 8016c2a:	4614      	mov	r4, r2
 8016c2c:	460e      	mov	r6, r1
 8016c2e:	b921      	cbnz	r1, 8016c3a <_realloc_r+0x16>
 8016c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c34:	4611      	mov	r1, r2
 8016c36:	f7ff b8b3 	b.w	8015da0 <_malloc_r>
 8016c3a:	b92a      	cbnz	r2, 8016c48 <_realloc_r+0x24>
 8016c3c:	f7ff f844 	bl	8015cc8 <_free_r>
 8016c40:	4625      	mov	r5, r4
 8016c42:	4628      	mov	r0, r5
 8016c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c48:	f000 f894 	bl	8016d74 <_malloc_usable_size_r>
 8016c4c:	4284      	cmp	r4, r0
 8016c4e:	4607      	mov	r7, r0
 8016c50:	d802      	bhi.n	8016c58 <_realloc_r+0x34>
 8016c52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016c56:	d812      	bhi.n	8016c7e <_realloc_r+0x5a>
 8016c58:	4621      	mov	r1, r4
 8016c5a:	4640      	mov	r0, r8
 8016c5c:	f7ff f8a0 	bl	8015da0 <_malloc_r>
 8016c60:	4605      	mov	r5, r0
 8016c62:	2800      	cmp	r0, #0
 8016c64:	d0ed      	beq.n	8016c42 <_realloc_r+0x1e>
 8016c66:	42bc      	cmp	r4, r7
 8016c68:	4622      	mov	r2, r4
 8016c6a:	4631      	mov	r1, r6
 8016c6c:	bf28      	it	cs
 8016c6e:	463a      	movcs	r2, r7
 8016c70:	f7fe fe54 	bl	801591c <memcpy>
 8016c74:	4631      	mov	r1, r6
 8016c76:	4640      	mov	r0, r8
 8016c78:	f7ff f826 	bl	8015cc8 <_free_r>
 8016c7c:	e7e1      	b.n	8016c42 <_realloc_r+0x1e>
 8016c7e:	4635      	mov	r5, r6
 8016c80:	e7df      	b.n	8016c42 <_realloc_r+0x1e>
	...

08016c84 <_read_r>:
 8016c84:	b538      	push	{r3, r4, r5, lr}
 8016c86:	4d07      	ldr	r5, [pc, #28]	; (8016ca4 <_read_r+0x20>)
 8016c88:	4604      	mov	r4, r0
 8016c8a:	4608      	mov	r0, r1
 8016c8c:	4611      	mov	r1, r2
 8016c8e:	2200      	movs	r2, #0
 8016c90:	602a      	str	r2, [r5, #0]
 8016c92:	461a      	mov	r2, r3
 8016c94:	f7eb feb2 	bl	80029fc <_read>
 8016c98:	1c43      	adds	r3, r0, #1
 8016c9a:	d102      	bne.n	8016ca2 <_read_r+0x1e>
 8016c9c:	682b      	ldr	r3, [r5, #0]
 8016c9e:	b103      	cbz	r3, 8016ca2 <_read_r+0x1e>
 8016ca0:	6023      	str	r3, [r4, #0]
 8016ca2:	bd38      	pop	{r3, r4, r5, pc}
 8016ca4:	2000b1b8 	.word	0x2000b1b8

08016ca8 <_raise_r>:
 8016ca8:	291f      	cmp	r1, #31
 8016caa:	b538      	push	{r3, r4, r5, lr}
 8016cac:	4604      	mov	r4, r0
 8016cae:	460d      	mov	r5, r1
 8016cb0:	d904      	bls.n	8016cbc <_raise_r+0x14>
 8016cb2:	2316      	movs	r3, #22
 8016cb4:	6003      	str	r3, [r0, #0]
 8016cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8016cba:	bd38      	pop	{r3, r4, r5, pc}
 8016cbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016cbe:	b112      	cbz	r2, 8016cc6 <_raise_r+0x1e>
 8016cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016cc4:	b94b      	cbnz	r3, 8016cda <_raise_r+0x32>
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	f000 f830 	bl	8016d2c <_getpid_r>
 8016ccc:	462a      	mov	r2, r5
 8016cce:	4601      	mov	r1, r0
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016cd6:	f000 b817 	b.w	8016d08 <_kill_r>
 8016cda:	2b01      	cmp	r3, #1
 8016cdc:	d00a      	beq.n	8016cf4 <_raise_r+0x4c>
 8016cde:	1c59      	adds	r1, r3, #1
 8016ce0:	d103      	bne.n	8016cea <_raise_r+0x42>
 8016ce2:	2316      	movs	r3, #22
 8016ce4:	6003      	str	r3, [r0, #0]
 8016ce6:	2001      	movs	r0, #1
 8016ce8:	e7e7      	b.n	8016cba <_raise_r+0x12>
 8016cea:	2400      	movs	r4, #0
 8016cec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	4798      	blx	r3
 8016cf4:	2000      	movs	r0, #0
 8016cf6:	e7e0      	b.n	8016cba <_raise_r+0x12>

08016cf8 <raise>:
 8016cf8:	4b02      	ldr	r3, [pc, #8]	; (8016d04 <raise+0xc>)
 8016cfa:	4601      	mov	r1, r0
 8016cfc:	6818      	ldr	r0, [r3, #0]
 8016cfe:	f7ff bfd3 	b.w	8016ca8 <_raise_r>
 8016d02:	bf00      	nop
 8016d04:	20000064 	.word	0x20000064

08016d08 <_kill_r>:
 8016d08:	b538      	push	{r3, r4, r5, lr}
 8016d0a:	4d07      	ldr	r5, [pc, #28]	; (8016d28 <_kill_r+0x20>)
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	4604      	mov	r4, r0
 8016d10:	4608      	mov	r0, r1
 8016d12:	4611      	mov	r1, r2
 8016d14:	602b      	str	r3, [r5, #0]
 8016d16:	f7eb fe55 	bl	80029c4 <_kill>
 8016d1a:	1c43      	adds	r3, r0, #1
 8016d1c:	d102      	bne.n	8016d24 <_kill_r+0x1c>
 8016d1e:	682b      	ldr	r3, [r5, #0]
 8016d20:	b103      	cbz	r3, 8016d24 <_kill_r+0x1c>
 8016d22:	6023      	str	r3, [r4, #0]
 8016d24:	bd38      	pop	{r3, r4, r5, pc}
 8016d26:	bf00      	nop
 8016d28:	2000b1b8 	.word	0x2000b1b8

08016d2c <_getpid_r>:
 8016d2c:	f7eb be42 	b.w	80029b4 <_getpid>

08016d30 <_fstat_r>:
 8016d30:	b538      	push	{r3, r4, r5, lr}
 8016d32:	4d07      	ldr	r5, [pc, #28]	; (8016d50 <_fstat_r+0x20>)
 8016d34:	2300      	movs	r3, #0
 8016d36:	4604      	mov	r4, r0
 8016d38:	4608      	mov	r0, r1
 8016d3a:	4611      	mov	r1, r2
 8016d3c:	602b      	str	r3, [r5, #0]
 8016d3e:	f7eb fe86 	bl	8002a4e <_fstat>
 8016d42:	1c43      	adds	r3, r0, #1
 8016d44:	d102      	bne.n	8016d4c <_fstat_r+0x1c>
 8016d46:	682b      	ldr	r3, [r5, #0]
 8016d48:	b103      	cbz	r3, 8016d4c <_fstat_r+0x1c>
 8016d4a:	6023      	str	r3, [r4, #0]
 8016d4c:	bd38      	pop	{r3, r4, r5, pc}
 8016d4e:	bf00      	nop
 8016d50:	2000b1b8 	.word	0x2000b1b8

08016d54 <_isatty_r>:
 8016d54:	b538      	push	{r3, r4, r5, lr}
 8016d56:	4d06      	ldr	r5, [pc, #24]	; (8016d70 <_isatty_r+0x1c>)
 8016d58:	2300      	movs	r3, #0
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	4608      	mov	r0, r1
 8016d5e:	602b      	str	r3, [r5, #0]
 8016d60:	f7eb fe85 	bl	8002a6e <_isatty>
 8016d64:	1c43      	adds	r3, r0, #1
 8016d66:	d102      	bne.n	8016d6e <_isatty_r+0x1a>
 8016d68:	682b      	ldr	r3, [r5, #0]
 8016d6a:	b103      	cbz	r3, 8016d6e <_isatty_r+0x1a>
 8016d6c:	6023      	str	r3, [r4, #0]
 8016d6e:	bd38      	pop	{r3, r4, r5, pc}
 8016d70:	2000b1b8 	.word	0x2000b1b8

08016d74 <_malloc_usable_size_r>:
 8016d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d78:	1f18      	subs	r0, r3, #4
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	bfbc      	itt	lt
 8016d7e:	580b      	ldrlt	r3, [r1, r0]
 8016d80:	18c0      	addlt	r0, r0, r3
 8016d82:	4770      	bx	lr

08016d84 <_init>:
 8016d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d86:	bf00      	nop
 8016d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d8a:	bc08      	pop	{r3}
 8016d8c:	469e      	mov	lr, r3
 8016d8e:	4770      	bx	lr

08016d90 <_fini>:
 8016d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d92:	bf00      	nop
 8016d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d96:	bc08      	pop	{r3}
 8016d98:	469e      	mov	lr, r3
 8016d9a:	4770      	bx	lr
