
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e24  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008378  08008378  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08008378  08008378  00018378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008380  08008380  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08008410  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  080084b0  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b64  200001c8  08008550  000201c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000d2c  08008550  00020d2c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017e9f  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e2e  00000000  00000000  00038097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001238  00000000  00000000  0003aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010f8  00000000  00000000  0003c100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000287b5  00000000  00000000  0003d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000169c0  00000000  00000000  000659ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6af2  00000000  00000000  0007c36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00172e5f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000050a8  00000000  00000000  00172eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800653c 	.word	0x0800653c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	0800653c 	.word	0x0800653c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
extern int indexMenu=0;
extern int screen=0;
static uint32_t last_arriba_time = 0; // keeps track of the last time "ARRIBA" was displayed

int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fac5 	bl	8001b46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f852 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f9f6 	bl	80009b0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005c4:	f000 f908 	bl	80007d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f994 	bl	80008f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 f9c2 	bl	8000954 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80005d0:	f000 f950 	bl	8000874 <MX_I2C2_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8ae 	bl	8000734 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005d8:	f000 fad6 	bl	8000b88 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 80005dc:	f000 ffac 	bl	8001538 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 80005e0:	f000 ffb6 	bl	8001550 <ssd1306_OhmioMenuPrincipal>
  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH

	  HAL_ADC_Start(&hadc1);
 80005e4:	481b      	ldr	r0, [pc, #108]	; (8000654 <main+0xa0>)
 80005e6:	f001 fb73 	bl	8001cd0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
 80005ea:	210a      	movs	r1, #10
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0xa0>)
 80005ee:	f001 fc71 	bl	8001ed4 <HAL_ADC_PollForConversion>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10e      	bne.n	8000616 <main+0x62>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc1);
 80005f8:	4816      	ldr	r0, [pc, #88]	; (8000654 <main+0xa0>)
 80005fa:	f001 fcf6 	bl	8001fea <HAL_ADC_GetValue>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a15      	ldr	r2, [pc, #84]	; (8000658 <main+0xa4>)
 8000602:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen);
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <main+0xa4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <main+0xa8>)
 800060a:	6811      	ldr	r1, [r2, #0]
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <main+0xac>)
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 ff57 	bl	80014c4 <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 800 && analog_value_keypad <= 900){
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <main+0xa4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800061e:	d311      	bcc.n	8000644 <main+0x90>
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <main+0xa4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000628:	d80c      	bhi.n	8000644 <main+0x90>
		   if (indexMenu==2){
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <main+0xa8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b02      	cmp	r3, #2
 8000630:	d103      	bne.n	800063a <main+0x86>
			   indexMenu=0;
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <main+0xa8>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	e004      	b.n	8000644 <main+0x90>
		   }else{
			   indexMenu++;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <main+0xa8>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <main+0xa8>)
 8000642:	6013      	str	r3, [r2, #0]





	  HAL_ADC_Stop(&hadc1);
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <main+0xa0>)
 8000646:	f001 fc11 	bl	8001e6c <HAL_ADC_Stop>
	  HAL_Delay(50);
 800064a:	2032      	movs	r0, #50	; 0x32
 800064c:	f001 fad8 	bl	8001c00 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000650:	e7c8      	b.n	80005e4 <main+0x30>
 8000652:	bf00      	nop
 8000654:	2000021c 	.word	0x2000021c
 8000658:	20000264 	.word	0x20000264
 800065c:	200008fc 	.word	0x200008fc
 8000660:	20000900 	.word	0x20000900

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 fafa 	bl	8005c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f003 faa8 	bl	8003bdc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <SystemClock_Config+0xc8>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <SystemClock_Config+0xcc>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006d8:	2348      	movs	r3, #72	; 0x48
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e0:	2303      	movs	r3, #3
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fa87 	bl	8003bfc <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 fa0a 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fd15 	bl	8004144 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000720:	f000 f9f4 	bl	8000b0c <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_ADC1_Init+0x98>)
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_ADC1_Init+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 800078e:	2201      	movs	r2, #1
 8000790:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_ADC1_Init+0x98>)
 8000794:	f001 fa58 	bl	8001c48 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f9b5 	bl	8000b0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b4:	f001 fc26 	bl	8002004 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007be:	f000 f9a5 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000021c 	.word	0x2000021c
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ETH_Init+0x84>)
 80007de:	4a20      	ldr	r2, [pc, #128]	; (8000860 <MX_ETH_Init+0x88>)
 80007e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_ETH_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_ETH_Init+0x8c>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_ETH_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_ETH_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_ETH_Init+0x84>)
 8000808:	4a16      	ldr	r2, [pc, #88]	; (8000864 <MX_ETH_Init+0x8c>)
 800080a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_ETH_Init+0x84>)
 800080e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000812:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ETH_Init+0x84>)
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_ETH_Init+0x90>)
 8000818:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_ETH_Init+0x84>)
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_ETH_Init+0x94>)
 800081e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_ETH_Init+0x84>)
 8000822:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000826:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x84>)
 800082a:	f001 ff21 	bl	8002670 <HAL_ETH_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 f96a 	bl	8000b0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000838:	2238      	movs	r2, #56	; 0x38
 800083a:	2100      	movs	r1, #0
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_ETH_Init+0x98>)
 800083e:	f005 fa15 	bl	8005c6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_ETH_Init+0x98>)
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_ETH_Init+0x98>)
 800084a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800084e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_ETH_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000268 	.word	0x20000268
 8000860:	40028000 	.word	0x40028000
 8000864:	20000904 	.word	0x20000904
 8000868:	20000128 	.word	0x20000128
 800086c:	20000088 	.word	0x20000088
 8000870:	200001e4 	.word	0x200001e4

08000874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_I2C2_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_I2C2_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_I2C2_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <MX_I2C2_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_I2C2_Init+0x74>)
 800088c:	2201      	movs	r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_I2C2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008b0:	f002 fbca 	bl	8003048 <HAL_I2C_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ba:	f000 f927 	bl	8000b0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008c2:	f002 ffab 	bl	800381c <HAL_I2CEx_ConfigAnalogFilter>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 f91e 	bl	8000b0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_I2C2_Init+0x74>)
 80008d4:	f002 ffed 	bl	80038b2 <HAL_I2CEx_ConfigDigitalFilter>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 f915 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000318 	.word	0x20000318
 80008ec:	40005800 	.word	0x40005800
 80008f0:	00301739 	.word	0x00301739

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USART3_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <MX_USART3_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART3_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000938:	f004 fa1a 	bl	8004d70 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f8e3 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000036c 	.word	0x2000036c
 8000950:	40004800 	.word	0x40004800

08000954 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800095e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2206      	movs	r2, #6
 8000964:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2202      	movs	r2, #2
 8000976:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2201      	movs	r2, #1
 800097c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2201      	movs	r2, #1
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	f002 ffd7 	bl	800394a <HAL_PCD_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 f8b3 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200003f4 	.word	0x200003f4

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <MX_GPIO_Init+0x14c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a4c      	ldr	r2, [pc, #304]	; (8000afc <MX_GPIO_Init+0x14c>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <MX_GPIO_Init+0x14c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009de:	4b47      	ldr	r3, [pc, #284]	; (8000afc <MX_GPIO_Init+0x14c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a46      	ldr	r2, [pc, #280]	; (8000afc <MX_GPIO_Init+0x14c>)
 80009e4:	f043 0320 	orr.w	r3, r3, #32
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0320 	and.w	r3, r3, #32
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	4b41      	ldr	r3, [pc, #260]	; (8000afc <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a40      	ldr	r2, [pc, #256]	; (8000afc <MX_GPIO_Init+0x14c>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b38      	ldr	r3, [pc, #224]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a34      	ldr	r2, [pc, #208]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a2e      	ldr	r2, [pc, #184]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	4b29      	ldr	r3, [pc, #164]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a28      	ldr	r2, [pc, #160]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a74:	4822      	ldr	r0, [pc, #136]	; (8000b00 <MX_GPIO_Init+0x150>)
 8000a76:	f002 facd 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4821      	ldr	r0, [pc, #132]	; (8000b04 <MX_GPIO_Init+0x154>)
 8000a80:	f002 fac8 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481b      	ldr	r0, [pc, #108]	; (8000b08 <MX_GPIO_Init+0x158>)
 8000a9c:	f002 f90e 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aa0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <MX_GPIO_Init+0x150>)
 8000aba:	f002 f8ff 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <MX_GPIO_Init+0x154>)
 8000ad6:	f002 f8f1 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_GPIO_Init+0x154>)
 8000aee:	f002 f8e5 	bl	8002cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	; 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40020800 	.word	0x40020800

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>

08000b16 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af04      	add	r7, sp, #16
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	9302      	str	r3, [sp, #8]
 8000b34:	2301      	movs	r3, #1
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2178      	movs	r1, #120	; 0x78
 8000b42:	4803      	ldr	r0, [pc, #12]	; (8000b50 <ssd1306_WriteCommand+0x2c>)
 8000b44:	f002 fb10 	bl	8003168 <HAL_I2C_Mem_Write>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000318 	.word	0x20000318

08000b54 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af04      	add	r7, sp, #16
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	f04f 32ff 	mov.w	r2, #4294967295
 8000b66:	9202      	str	r2, [sp, #8]
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	2240      	movs	r2, #64	; 0x40
 8000b72:	2178      	movs	r1, #120	; 0x78
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <ssd1306_WriteData+0x30>)
 8000b76:	f002 faf7 	bl	8003168 <HAL_I2C_Mem_Write>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000318 	.word	0x20000318

08000b88 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b8c:	f7ff ffc3 	bl	8000b16 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b90:	2064      	movs	r0, #100	; 0x64
 8000b92:	f001 f835 	bl	8001c00 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 fa34 	bl	8001004 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b9c:	2020      	movs	r0, #32
 8000b9e:	f7ff ffc1 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ffbe 	bl	8000b24 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ba8:	20b0      	movs	r0, #176	; 0xb0
 8000baa:	f7ff ffbb 	bl	8000b24 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000bae:	20c8      	movs	r0, #200	; 0xc8
 8000bb0:	f7ff ffb8 	bl	8000b24 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ffb5 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000bba:	2010      	movs	r0, #16
 8000bbc:	f7ff ffb2 	bl	8000b24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000bc0:	2040      	movs	r0, #64	; 0x40
 8000bc2:	f7ff ffaf 	bl	8000b24 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000bc6:	20ff      	movs	r0, #255	; 0xff
 8000bc8:	f000 fa09 	bl	8000fde <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000bcc:	20a1      	movs	r0, #161	; 0xa1
 8000bce:	f7ff ffa9 	bl	8000b24 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bd2:	20a6      	movs	r0, #166	; 0xa6
 8000bd4:	f7ff ffa6 	bl	8000b24 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bd8:	20a8      	movs	r0, #168	; 0xa8
 8000bda:	f7ff ffa3 	bl	8000b24 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bde:	203f      	movs	r0, #63	; 0x3f
 8000be0:	f7ff ffa0 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000be4:	20a4      	movs	r0, #164	; 0xa4
 8000be6:	f7ff ff9d 	bl	8000b24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bea:	20d3      	movs	r0, #211	; 0xd3
 8000bec:	f7ff ff9a 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff97 	bl	8000b24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bf6:	20d5      	movs	r0, #213	; 0xd5
 8000bf8:	f7ff ff94 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bfc:	20f0      	movs	r0, #240	; 0xf0
 8000bfe:	f7ff ff91 	bl	8000b24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c02:	20d9      	movs	r0, #217	; 0xd9
 8000c04:	f7ff ff8e 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c08:	2022      	movs	r0, #34	; 0x22
 8000c0a:	f7ff ff8b 	bl	8000b24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c0e:	20da      	movs	r0, #218	; 0xda
 8000c10:	f7ff ff88 	bl	8000b24 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c14:	2012      	movs	r0, #18
 8000c16:	f7ff ff85 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c1a:	20db      	movs	r0, #219	; 0xdb
 8000c1c:	f7ff ff82 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c20:	2020      	movs	r0, #32
 8000c22:	f7ff ff7f 	bl	8000b24 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c26:	208d      	movs	r0, #141	; 0x8d
 8000c28:	f7ff ff7c 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c2c:	2014      	movs	r0, #20
 8000c2e:	f7ff ff79 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 f9e6 	bl	8001004 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 f80f 	bl	8000c5c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c3e:	f000 f831 	bl	8000ca4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <ssd1306_Init+0xd0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <ssd1306_Init+0xd0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c4e:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <ssd1306_Init+0xd0>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	711a      	strb	r2, [r3, #4]
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000d0c 	.word	0x20000d0c

08000c5c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e00d      	b.n	8000c88 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <ssd1306_Fill+0x1a>
 8000c72:	2100      	movs	r1, #0
 8000c74:	e000      	b.n	8000c78 <ssd1306_Fill+0x1c>
 8000c76:	21ff      	movs	r1, #255	; 0xff
 8000c78:	4a09      	ldr	r2, [pc, #36]	; (8000ca0 <ssd1306_Fill+0x44>)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	460a      	mov	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8e:	d3ed      	bcc.n	8000c6c <ssd1306_Fill+0x10>
    }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	2000090c 	.word	0x2000090c

08000ca4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e016      	b.n	8000cde <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	3b50      	subs	r3, #80	; 0x50
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff34 	bl	8000b24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff ff31 	bl	8000b24 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000cc2:	2010      	movs	r0, #16
 8000cc4:	f7ff ff2e 	bl	8000b24 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	01db      	lsls	r3, r3, #7
 8000ccc:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <ssd1306_UpdateScreen+0x4c>)
 8000cce:	4413      	add	r3, r2
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff3e 	bl	8000b54 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d9e5      	bls.n	8000cb0 <ssd1306_UpdateScreen+0xc>
    }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000090c 	.word	0x2000090c

08000cf4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	71bb      	strb	r3, [r7, #6]
 8000d02:	4613      	mov	r3, r2
 8000d04:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db3d      	blt.n	8000d8a <ssd1306_DrawPixel+0x96>
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	2b3f      	cmp	r3, #63	; 0x3f
 8000d12:	d83a      	bhi.n	8000d8a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d11a      	bne.n	8000d50 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	b2d8      	uxtb	r0, r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	01db      	lsls	r3, r3, #7
 8000d26:	4413      	add	r3, r2
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <ssd1306_DrawPixel+0xa4>)
 8000d2a:	5cd3      	ldrb	r3, [r2, r3]
 8000d2c:	b25a      	sxtb	r2, r3
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b259      	sxtb	r1, r3
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	4603      	mov	r3, r0
 8000d44:	01db      	lsls	r3, r3, #7
 8000d46:	4413      	add	r3, r2
 8000d48:	b2c9      	uxtb	r1, r1
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <ssd1306_DrawPixel+0xa4>)
 8000d4c:	54d1      	strb	r1, [r2, r3]
 8000d4e:	e01d      	b.n	8000d8c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d50:	79fa      	ldrb	r2, [r7, #7]
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	b2d8      	uxtb	r0, r3
 8000d58:	4603      	mov	r3, r0
 8000d5a:	01db      	lsls	r3, r3, #7
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <ssd1306_DrawPixel+0xa4>)
 8000d60:	5cd3      	ldrb	r3, [r2, r3]
 8000d62:	b25a      	sxtb	r2, r3
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	4013      	ands	r3, r2
 8000d78:	b259      	sxtb	r1, r3
 8000d7a:	79fa      	ldrb	r2, [r7, #7]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	01db      	lsls	r3, r3, #7
 8000d80:	4413      	add	r3, r2
 8000d82:	b2c9      	uxtb	r1, r1
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <ssd1306_DrawPixel+0xa4>)
 8000d86:	54d1      	strb	r1, [r2, r3]
 8000d88:	e000      	b.n	8000d8c <ssd1306_DrawPixel+0x98>
        return;
 8000d8a:	bf00      	nop
    }
}
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000090c 	.word	0x2000090c

08000d9c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4604      	mov	r4, r0
 8000da4:	1d38      	adds	r0, r7, #4
 8000da6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000daa:	461a      	mov	r2, r3
 8000dac:	4623      	mov	r3, r4
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	4613      	mov	r3, r2
 8000db2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b1f      	cmp	r3, #31
 8000db8:	d902      	bls.n	8000dc0 <ssd1306_WriteChar+0x24>
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b7e      	cmp	r3, #126	; 0x7e
 8000dbe:	d901      	bls.n	8000dc4 <ssd1306_WriteChar+0x28>
        return 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e06d      	b.n	8000ea0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000dc4:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <ssd1306_WriteChar+0x10c>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	793b      	ldrb	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	2b80      	cmp	r3, #128	; 0x80
 8000dd0:	dc06      	bgt.n	8000de0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000dd2:	4b35      	ldr	r3, [pc, #212]	; (8000ea8 <ssd1306_WriteChar+0x10c>)
 8000dd4:	885b      	ldrh	r3, [r3, #2]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	797b      	ldrb	r3, [r7, #5]
 8000dda:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ddc:	2b40      	cmp	r3, #64	; 0x40
 8000dde:	dd01      	ble.n	8000de4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	e05d      	b.n	8000ea0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	e04c      	b.n	8000e84 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	3b20      	subs	r3, #32
 8000df0:	7979      	ldrb	r1, [r7, #5]
 8000df2:	fb01 f303 	mul.w	r3, r1, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	e034      	b.n	8000e74 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d012      	beq.n	8000e40 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <ssd1306_WriteChar+0x10c>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b2d8      	uxtb	r0, r3
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <ssd1306_WriteChar+0x10c>)
 8000e2a:	885b      	ldrh	r3, [r3, #2]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4413      	add	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	7bba      	ldrb	r2, [r7, #14]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff ff5b 	bl	8000cf4 <ssd1306_DrawPixel>
 8000e3e:	e016      	b.n	8000e6e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <ssd1306_WriteChar+0x10c>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b2d8      	uxtb	r0, r3
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <ssd1306_WriteChar+0x10c>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4413      	add	r3, r2
 8000e5a:	b2d9      	uxtb	r1, r3
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf0c      	ite	eq
 8000e62:	2301      	moveq	r3, #1
 8000e64:	2300      	movne	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f7ff ff43 	bl	8000cf4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	793b      	ldrb	r3, [r7, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d3c5      	bcc.n	8000e0a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3301      	adds	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	461a      	mov	r2, r3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d3ad      	bcc.n	8000dea <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <ssd1306_WriteChar+0x10c>)
 8000e90:	881a      	ldrh	r2, [r3, #0]
 8000e92:	793b      	ldrb	r3, [r7, #4]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <ssd1306_WriteChar+0x10c>)
 8000e9c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3724      	adds	r7, #36	; 0x24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	20000d0c 	.word	0x20000d0c

08000eac <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	1d38      	adds	r0, r7, #4
 8000eb6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000eba:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000ebc:	e012      	b.n	8000ee4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	7818      	ldrb	r0, [r3, #0]
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	1d3a      	adds	r2, r7, #4
 8000ec6:	ca06      	ldmia	r2, {r1, r2}
 8000ec8:	f7ff ff68 	bl	8000d9c <ssd1306_WriteChar>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d002      	beq.n	8000ede <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	e008      	b.n	8000ef0 <ssd1306_WriteString+0x44>
        }
        str++;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1e8      	bne.n	8000ebe <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	781b      	ldrb	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <ssd1306_SetCursor+0x2c>)
 8000f0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <ssd1306_SetCursor+0x2c>)
 8000f16:	805a      	strh	r2, [r3, #2]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	20000d0c 	.word	0x20000d0c

08000f28 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	603a      	str	r2, [r7, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	460b      	mov	r3, r1
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f3e:	797b      	ldrb	r3, [r7, #5]
 8000f40:	3307      	adds	r3, #7
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da00      	bge.n	8000f48 <ssd1306_DrawBitmap+0x20>
 8000f46:	3307      	adds	r3, #7
 8000f48:	10db      	asrs	r3, r3, #3
 8000f4a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db3e      	blt.n	8000fd6 <ssd1306_DrawBitmap+0xae>
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f5c:	d83b      	bhi.n	8000fd6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73bb      	strb	r3, [r7, #14]
 8000f62:	e033      	b.n	8000fcc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	737b      	strb	r3, [r7, #13]
 8000f68:	e026      	b.n	8000fb8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000f6a:	7b7b      	ldrb	r3, [r7, #13]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e00d      	b.n	8000f98 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f82:	fb02 f303 	mul.w	r3, r2, r3
 8000f86:	7b7a      	ldrb	r2, [r7, #13]
 8000f88:	08d2      	lsrs	r2, r2, #3
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	da08      	bge.n	8000fb2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	7b7b      	ldrb	r3, [r7, #13]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	7f3a      	ldrb	r2, [r7, #28]
 8000faa:	79b9      	ldrb	r1, [r7, #6]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fea1 	bl	8000cf4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	737b      	strb	r3, [r7, #13]
 8000fb8:	7b7a      	ldrb	r2, [r7, #13]
 8000fba:	797b      	ldrb	r3, [r7, #5]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3d4      	bcc.n	8000f6a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	73bb      	strb	r3, [r7, #14]
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	71bb      	strb	r3, [r7, #6]
 8000fcc:	7bba      	ldrb	r2, [r7, #14]
 8000fce:	7e3b      	ldrb	r3, [r7, #24]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3c7      	bcc.n	8000f64 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000fd4:	e000      	b.n	8000fd8 <ssd1306_DrawBitmap+0xb0>
        return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000fe8:	2381      	movs	r3, #129	; 0x81
 8000fea:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd98 	bl	8000b24 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fd94 	bl	8000b24 <ssd1306_WriteCommand>
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001014:	23af      	movs	r3, #175	; 0xaf
 8001016:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <ssd1306_SetDisplayOn+0x38>)
 800101a:	2201      	movs	r2, #1
 800101c:	715a      	strb	r2, [r3, #5]
 800101e:	e004      	b.n	800102a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001020:	23ae      	movs	r3, #174	; 0xae
 8001022:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <ssd1306_SetDisplayOn+0x38>)
 8001026:	2200      	movs	r2, #0
 8001028:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fd79 	bl	8000b24 <ssd1306_WriteCommand>
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000d0c 	.word	0x20000d0c

08001040 <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fe06 	bl	8000c5c <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4619      	mov	r1, r3
 8001054:	2002      	movs	r0, #2
 8001056:	f7ff ff4f 	bl	8000ef8 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <ssd1306_TestFonts1+0x88>)
 800105c:	2301      	movs	r3, #1
 800105e:	ca06      	ldmia	r2, {r1, r2}
 8001060:	481a      	ldr	r0, [pc, #104]	; (80010cc <ssd1306_TestFonts1+0x8c>)
 8001062:	f7ff ff23 	bl	8000eac <ssd1306_WriteString>
    y += 26;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	331a      	adds	r3, #26
 800106a:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4619      	mov	r1, r3
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff ff41 	bl	8000ef8 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <ssd1306_TestFonts1+0x90>)
 8001078:	2301      	movs	r3, #1
 800107a:	ca06      	ldmia	r2, {r1, r2}
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <ssd1306_TestFonts1+0x94>)
 800107e:	f7ff ff15 	bl	8000eac <ssd1306_WriteString>
    y += 10;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	330a      	adds	r3, #10
 8001086:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4619      	mov	r1, r3
 800108c:	2002      	movs	r0, #2
 800108e:	f7ff ff33 	bl	8000ef8 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <ssd1306_TestFonts1+0x98>)
 8001094:	2301      	movs	r3, #1
 8001096:	ca06      	ldmia	r2, {r1, r2}
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <ssd1306_TestFonts1+0x9c>)
 800109a:	f7ff ff07 	bl	8000eac <ssd1306_WriteString>
    y += 10;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	330a      	adds	r3, #10
 80010a2:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4619      	mov	r1, r3
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff ff25 	bl	8000ef8 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.1", Font_6x8, White);
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <ssd1306_TestFonts1+0x98>)
 80010b0:	2301      	movs	r3, #1
 80010b2:	ca06      	ldmia	r2, {r1, r2}
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <ssd1306_TestFonts1+0xa0>)
 80010b6:	f7ff fef9 	bl	8000eac <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 80010ba:	f7ff fdf3 	bl	8000ca4 <ssd1306_UpdateScreen>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000010 	.word	0x20000010
 80010cc:	08006554 	.word	0x08006554
 80010d0:	20000008 	.word	0x20000008
 80010d4:	08006560 	.word	0x08006560
 80010d8:	20000000 	.word	0x20000000
 80010dc:	0800656c 	.word	0x0800656c
 80010e0:	08006580 	.word	0x08006580

080010e4 <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    char stringDirection[10] = "";
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fda9 	bl	8000c5c <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 800110a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800110e:	4619      	mov	r1, r3
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff fef1 	bl	8000ef8 <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 8001116:	4a6b      	ldr	r2, [pc, #428]	; (80012c4 <ssd1306_PrintPrincipalMenu+0x1e0>)
 8001118:	2301      	movs	r3, #1
 800111a:	ca06      	ldmia	r2, {r1, r2}
 800111c:	486a      	ldr	r0, [pc, #424]	; (80012c8 <ssd1306_PrintPrincipalMenu+0x1e4>)
 800111e:	f7ff fec5 	bl	8000eac <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001126:	3314      	adds	r3, #20
 8001128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 800112c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001130:	4619      	mov	r1, r3
 8001132:	2002      	movs	r0, #2
 8001134:	f7ff fee0 	bl	8000ef8 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <ssd1306_PrintPrincipalMenu+0x68>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 800113e:	4a63      	ldr	r2, [pc, #396]	; (80012cc <ssd1306_PrintPrincipalMenu+0x1e8>)
 8001140:	2300      	movs	r3, #0
 8001142:	ca06      	ldmia	r2, {r1, r2}
 8001144:	4862      	ldr	r0, [pc, #392]	; (80012d0 <ssd1306_PrintPrincipalMenu+0x1ec>)
 8001146:	f7ff feb1 	bl	8000eac <ssd1306_WriteString>
 800114a:	e005      	b.n	8001158 <ssd1306_PrintPrincipalMenu+0x74>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 800114c:	4a5f      	ldr	r2, [pc, #380]	; (80012cc <ssd1306_PrintPrincipalMenu+0x1e8>)
 800114e:	2301      	movs	r3, #1
 8001150:	ca06      	ldmia	r2, {r1, r2}
 8001152:	485f      	ldr	r0, [pc, #380]	; (80012d0 <ssd1306_PrintPrincipalMenu+0x1ec>)
 8001154:	f7ff feaa 	bl	8000eac <ssd1306_WriteString>

	    }
	    y += 10;
 8001158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800115c:	330a      	adds	r3, #10
 800115e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001166:	4619      	mov	r1, r3
 8001168:	2002      	movs	r0, #2
 800116a:	f7ff fec5 	bl	8000ef8 <ssd1306_SetCursor>
	    if(indexMenu==1){
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <ssd1306_PrintPrincipalMenu+0x9e>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 8001174:	4a55      	ldr	r2, [pc, #340]	; (80012cc <ssd1306_PrintPrincipalMenu+0x1e8>)
 8001176:	2300      	movs	r3, #0
 8001178:	ca06      	ldmia	r2, {r1, r2}
 800117a:	4856      	ldr	r0, [pc, #344]	; (80012d4 <ssd1306_PrintPrincipalMenu+0x1f0>)
 800117c:	f7ff fe96 	bl	8000eac <ssd1306_WriteString>
 8001180:	e005      	b.n	800118e <ssd1306_PrintPrincipalMenu+0xaa>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 8001182:	4a52      	ldr	r2, [pc, #328]	; (80012cc <ssd1306_PrintPrincipalMenu+0x1e8>)
 8001184:	2301      	movs	r3, #1
 8001186:	ca06      	ldmia	r2, {r1, r2}
 8001188:	4852      	ldr	r0, [pc, #328]	; (80012d4 <ssd1306_PrintPrincipalMenu+0x1f0>)
 800118a:	f7ff fe8f 	bl	8000eac <ssd1306_WriteString>

	    }
		y += 10;
 800118e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001192:	330a      	adds	r3, #10
 8001194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800119c:	4619      	mov	r1, r3
 800119e:	2002      	movs	r0, #2
 80011a0:	f7ff feaa 	bl	8000ef8 <ssd1306_SetCursor>
	    if(indexMenu==2){
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d106      	bne.n	80011b8 <ssd1306_PrintPrincipalMenu+0xd4>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 80011aa:	4a48      	ldr	r2, [pc, #288]	; (80012cc <ssd1306_PrintPrincipalMenu+0x1e8>)
 80011ac:	2300      	movs	r3, #0
 80011ae:	ca06      	ldmia	r2, {r1, r2}
 80011b0:	4849      	ldr	r0, [pc, #292]	; (80012d8 <ssd1306_PrintPrincipalMenu+0x1f4>)
 80011b2:	f7ff fe7b 	bl	8000eac <ssd1306_WriteString>
 80011b6:	e005      	b.n	80011c4 <ssd1306_PrintPrincipalMenu+0xe0>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 80011b8:	4a44      	ldr	r2, [pc, #272]	; (80012cc <ssd1306_PrintPrincipalMenu+0x1e8>)
 80011ba:	2301      	movs	r3, #1
 80011bc:	ca06      	ldmia	r2, {r1, r2}
 80011be:	4846      	ldr	r0, [pc, #280]	; (80012d8 <ssd1306_PrintPrincipalMenu+0x1f4>)
 80011c0:	f7ff fe74 	bl	8000eac <ssd1306_WriteString>

	    }
		y += 10;
 80011c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c8:	330a      	adds	r3, #10
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		#endif



	        if(value >= 0 && value <= 100){
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db12      	blt.n	80011fa <ssd1306_PrintPrincipalMenu+0x116>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	dc0f      	bgt.n	80011fa <ssd1306_PrintPrincipalMenu+0x116>
	            strcpy(stringDirection, "SELECT");
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4a3f      	ldr	r2, [pc, #252]	; (80012dc <ssd1306_PrintPrincipalMenu+0x1f8>)
 80011e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e4:	6018      	str	r0, [r3, #0]
 80011e6:	3304      	adds	r3, #4
 80011e8:	8019      	strh	r1, [r3, #0]
 80011ea:	3302      	adds	r3, #2
 80011ec:	0c0a      	lsrs	r2, r1, #16
 80011ee:	701a      	strb	r2, [r3, #0]
	            if(indexMenu=2){
 80011f0:	2302      	movs	r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
	            	screen=3;
 80011f4:	2303      	movs	r3, #3
 80011f6:	607b      	str	r3, [r7, #4]
	            if(indexMenu=2){
 80011f8:	e02d      	b.n	8001256 <ssd1306_PrintPrincipalMenu+0x172>
	            }
	        }

	        else if(value >= 2850 && value <= 2950){
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f640 3221 	movw	r2, #2849	; 0xb21
 8001200:	4293      	cmp	r3, r2
 8001202:	dd0c      	ble.n	800121e <ssd1306_PrintPrincipalMenu+0x13a>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f640 3286 	movw	r2, #2950	; 0xb86
 800120a:	4293      	cmp	r3, r2
 800120c:	dc07      	bgt.n	800121e <ssd1306_PrintPrincipalMenu+0x13a>
	            strcpy(stringDirection, "DERECHA");
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4a33      	ldr	r2, [pc, #204]	; (80012e0 <ssd1306_PrintPrincipalMenu+0x1fc>)
 8001214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001218:	e883 0003 	stmia.w	r3, {r0, r1}
 800121c:	e01b      	b.n	8001256 <ssd1306_PrintPrincipalMenu+0x172>
	        }
	        else if(value >= 1850 && value <= 1950){
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f240 7239 	movw	r2, #1849	; 0x739
 8001224:	4293      	cmp	r3, r2
 8001226:	dd0b      	ble.n	8001240 <ssd1306_PrintPrincipalMenu+0x15c>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f240 729e 	movw	r2, #1950	; 0x79e
 800122e:	4293      	cmp	r3, r2
 8001230:	dc06      	bgt.n	8001240 <ssd1306_PrintPrincipalMenu+0x15c>
	            strcpy(stringDirection, "IZQUIERDA");
 8001232:	4a2c      	ldr	r2, [pc, #176]	; (80012e4 <ssd1306_PrintPrincipalMenu+0x200>)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	ca07      	ldmia	r2, {r0, r1, r2}
 800123a:	c303      	stmia	r3!, {r0, r1}
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	e00a      	b.n	8001256 <ssd1306_PrintPrincipalMenu+0x172>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <ssd1306_PrintPrincipalMenu+0x204>)
 8001246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124a:	6018      	str	r0, [r3, #0]
 800124c:	3304      	adds	r3, #4
 800124e:	8019      	strh	r1, [r3, #0]
 8001250:	3302      	adds	r3, #2
 8001252:	0c0a      	lsrs	r2, r1, #16
 8001254:	701a      	strb	r2, [r3, #0]
	        }


	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(55, 20);
 8001256:	2114      	movs	r1, #20
 8001258:	2037      	movs	r0, #55	; 0x37
 800125a:	f7ff fe4d 	bl	8000ef8 <ssd1306_SetCursor>
	    char index_str[3]; // assuming index is a single-digit number
	    sprintf(index_str, "%d", indexMenu); // convert index to a string
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	4921      	ldr	r1, [pc, #132]	; (80012ec <ssd1306_PrintPrincipalMenu+0x208>)
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fd08 	bl	8005c7c <siprintf>
	    ssd1306_SetCursor(50, y); // set the cursor position
 800126c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001270:	4619      	mov	r1, r3
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f7ff fe40 	bl	8000ef8 <ssd1306_SetCursor>
	    ssd1306_WriteString(index_str, Font_7x10, White); // write the string to the display    y += 10;
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <ssd1306_PrintPrincipalMenu+0x1e8>)
 800127a:	f107 0018 	add.w	r0, r7, #24
 800127e:	2301      	movs	r3, #1
 8001280:	ca06      	ldmia	r2, {r1, r2}
 8001282:	f7ff fe13 	bl	8000eac <ssd1306_WriteString>
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(55, 30);
 8001286:	211e      	movs	r1, #30
 8001288:	2037      	movs	r0, #55	; 0x37
 800128a:	f7ff fe35 	bl	8000ef8 <ssd1306_SetCursor>
	    char screen_str[3]; // assuming index is a single-digit number
	    sprintf(screen_str, "%d", screen); // convert index to a string
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4915      	ldr	r1, [pc, #84]	; (80012ec <ssd1306_PrintPrincipalMenu+0x208>)
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fcf0 	bl	8005c7c <siprintf>
	    ssd1306_SetCursor(20, y); // set the cursor position
 800129c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a0:	4619      	mov	r1, r3
 80012a2:	2014      	movs	r0, #20
 80012a4:	f7ff fe28 	bl	8000ef8 <ssd1306_SetCursor>
	    ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
 80012a8:	4a08      	ldr	r2, [pc, #32]	; (80012cc <ssd1306_PrintPrincipalMenu+0x1e8>)
 80012aa:	f107 0014 	add.w	r0, r7, #20
 80012ae:	2301      	movs	r3, #1
 80012b0:	ca06      	ldmia	r2, {r1, r2}
 80012b2:	f7ff fdfb 	bl	8000eac <ssd1306_WriteString>
	    #endif

	    ssd1306_UpdateScreen();
 80012b6:	f7ff fcf5 	bl	8000ca4 <ssd1306_UpdateScreen>
}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000010 	.word	0x20000010
 80012c8:	0800658c 	.word	0x0800658c
 80012cc:	20000008 	.word	0x20000008
 80012d0:	08006594 	.word	0x08006594
 80012d4:	080065a0 	.word	0x080065a0
 80012d8:	080065a8 	.word	0x080065a8
 80012dc:	080065b4 	.word	0x080065b4
 80012e0:	080065bc 	.word	0x080065bc
 80012e4:	080065c4 	.word	0x080065c4
 80012e8:	080065d0 	.word	0x080065d0
 80012ec:	080065d8 	.word	0x080065d8

080012f0 <ssd1306_PrintSettingsMenu>:

void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    char stringDirection[10] = "";
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fca3 	bl	8000c5c <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800131a:	4619      	mov	r1, r3
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff fdeb 	bl	8000ef8 <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 8001322:	4a5e      	ldr	r2, [pc, #376]	; (800149c <ssd1306_PrintSettingsMenu+0x1ac>)
 8001324:	2301      	movs	r3, #1
 8001326:	ca06      	ldmia	r2, {r1, r2}
 8001328:	485d      	ldr	r0, [pc, #372]	; (80014a0 <ssd1306_PrintSettingsMenu+0x1b0>)
 800132a:	f7ff fdbf 	bl	8000eac <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800132e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001332:	3314      	adds	r3, #20
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800133c:	4619      	mov	r1, r3
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff fdda 	bl	8000ef8 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <ssd1306_PrintSettingsMenu+0x68>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 800134a:	4a56      	ldr	r2, [pc, #344]	; (80014a4 <ssd1306_PrintSettingsMenu+0x1b4>)
 800134c:	2300      	movs	r3, #0
 800134e:	ca06      	ldmia	r2, {r1, r2}
 8001350:	4855      	ldr	r0, [pc, #340]	; (80014a8 <ssd1306_PrintSettingsMenu+0x1b8>)
 8001352:	f7ff fdab 	bl	8000eac <ssd1306_WriteString>
 8001356:	e005      	b.n	8001364 <ssd1306_PrintSettingsMenu+0x74>
	    }
	    else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <ssd1306_PrintSettingsMenu+0x1b4>)
 800135a:	2301      	movs	r3, #1
 800135c:	ca06      	ldmia	r2, {r1, r2}
 800135e:	4852      	ldr	r0, [pc, #328]	; (80014a8 <ssd1306_PrintSettingsMenu+0x1b8>)
 8001360:	f7ff fda4 	bl	8000eac <ssd1306_WriteString>

	    }
		y += 10;
 8001364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001368:	330a      	adds	r3, #10
 800136a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800136e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001372:	4619      	mov	r1, r3
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff fdbf 	bl	8000ef8 <ssd1306_SetCursor>
		if(indexMenu==1){
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <ssd1306_PrintSettingsMenu+0x9e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001380:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <ssd1306_PrintSettingsMenu+0x1b4>)
 8001382:	2300      	movs	r3, #0
 8001384:	ca06      	ldmia	r2, {r1, r2}
 8001386:	4849      	ldr	r0, [pc, #292]	; (80014ac <ssd1306_PrintSettingsMenu+0x1bc>)
 8001388:	f7ff fd90 	bl	8000eac <ssd1306_WriteString>
 800138c:	e005      	b.n	800139a <ssd1306_PrintSettingsMenu+0xaa>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 800138e:	4a45      	ldr	r2, [pc, #276]	; (80014a4 <ssd1306_PrintSettingsMenu+0x1b4>)
 8001390:	2301      	movs	r3, #1
 8001392:	ca06      	ldmia	r2, {r1, r2}
 8001394:	4845      	ldr	r0, [pc, #276]	; (80014ac <ssd1306_PrintSettingsMenu+0x1bc>)
 8001396:	f7ff fd89 	bl	8000eac <ssd1306_WriteString>
		}
		y += 10;
 800139a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800139e:	330a      	adds	r3, #10
 80013a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		#endif

		if(value >= 0 && value <= 100){
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db13      	blt.n	80013d2 <ssd1306_PrintSettingsMenu+0xe2>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b64      	cmp	r3, #100	; 0x64
 80013ae:	dc10      	bgt.n	80013d2 <ssd1306_PrintSettingsMenu+0xe2>
			strcpy(stringDirection, "SELECT");
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <ssd1306_PrintSettingsMenu+0x1c0>)
 80013b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ba:	6018      	str	r0, [r3, #0]
 80013bc:	3304      	adds	r3, #4
 80013be:	8019      	strh	r1, [r3, #0]
 80013c0:	3302      	adds	r3, #2
 80013c2:	0c0a      	lsrs	r2, r1, #16
 80013c4:	701a      	strb	r2, [r3, #0]
			if(indexMenu==1){
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d130      	bne.n	800142e <ssd1306_PrintSettingsMenu+0x13e>
				screen=0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
			if(indexMenu==1){
 80013d0:	e02d      	b.n	800142e <ssd1306_PrintSettingsMenu+0x13e>
			}
		}

		else if(value >= 2850 && value <= 2950){
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f640 3221 	movw	r2, #2849	; 0xb21
 80013d8:	4293      	cmp	r3, r2
 80013da:	dd0c      	ble.n	80013f6 <ssd1306_PrintSettingsMenu+0x106>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f640 3286 	movw	r2, #2950	; 0xb86
 80013e2:	4293      	cmp	r3, r2
 80013e4:	dc07      	bgt.n	80013f6 <ssd1306_PrintSettingsMenu+0x106>
			strcpy(stringDirection, "DERECHA");
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <ssd1306_PrintSettingsMenu+0x1c4>)
 80013ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80013f4:	e01b      	b.n	800142e <ssd1306_PrintSettingsMenu+0x13e>
		}
		else if(value >= 1850 && value <= 1950){
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f240 7239 	movw	r2, #1849	; 0x739
 80013fc:	4293      	cmp	r3, r2
 80013fe:	dd0b      	ble.n	8001418 <ssd1306_PrintSettingsMenu+0x128>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f240 729e 	movw	r2, #1950	; 0x79e
 8001406:	4293      	cmp	r3, r2
 8001408:	dc06      	bgt.n	8001418 <ssd1306_PrintSettingsMenu+0x128>
			strcpy(stringDirection, "IZQUIERDA");
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <ssd1306_PrintSettingsMenu+0x1c8>)
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	ca07      	ldmia	r2, {r0, r1, r2}
 8001412:	c303      	stmia	r3!, {r0, r1}
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	e00a      	b.n	800142e <ssd1306_PrintSettingsMenu+0x13e>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <ssd1306_PrintSettingsMenu+0x1cc>)
 800141e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001422:	6018      	str	r0, [r3, #0]
 8001424:	3304      	adds	r3, #4
 8001426:	8019      	strh	r1, [r3, #0]
 8001428:	3302      	adds	r3, #2
 800142a:	0c0a      	lsrs	r2, r1, #16
 800142c:	701a      	strb	r2, [r3, #0]
		}


		#ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(55, 20);
 800142e:	2114      	movs	r1, #20
 8001430:	2037      	movs	r0, #55	; 0x37
 8001432:	f7ff fd61 	bl	8000ef8 <ssd1306_SetCursor>
	    char index_str[3]; // assuming index is a single-digit number
	    sprintf(index_str, "%d", indexMenu); // convert index to a string
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	4920      	ldr	r1, [pc, #128]	; (80014c0 <ssd1306_PrintSettingsMenu+0x1d0>)
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fc1c 	bl	8005c7c <siprintf>
	    ssd1306_SetCursor(50, y); // set the cursor position
 8001444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001448:	4619      	mov	r1, r3
 800144a:	2032      	movs	r0, #50	; 0x32
 800144c:	f7ff fd54 	bl	8000ef8 <ssd1306_SetCursor>
	    ssd1306_WriteString(index_str, Font_7x10, White); // write the string to the display    y += 10;
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <ssd1306_PrintSettingsMenu+0x1b4>)
 8001452:	f107 0018 	add.w	r0, r7, #24
 8001456:	2301      	movs	r3, #1
 8001458:	ca06      	ldmia	r2, {r1, r2}
 800145a:	f7ff fd27 	bl	8000eac <ssd1306_WriteString>
	    #endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(55, 30);
 800145e:	211e      	movs	r1, #30
 8001460:	2037      	movs	r0, #55	; 0x37
 8001462:	f7ff fd49 	bl	8000ef8 <ssd1306_SetCursor>
	    char screen_str[3]; // assuming index is a single-digit number
	    sprintf(screen_str, "%d", screen); // convert index to a string
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4914      	ldr	r1, [pc, #80]	; (80014c0 <ssd1306_PrintSettingsMenu+0x1d0>)
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fc04 	bl	8005c7c <siprintf>
	    ssd1306_SetCursor(10, y); // set the cursor position
 8001474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001478:	4619      	mov	r1, r3
 800147a:	200a      	movs	r0, #10
 800147c:	f7ff fd3c 	bl	8000ef8 <ssd1306_SetCursor>
	    ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
 8001480:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <ssd1306_PrintSettingsMenu+0x1b4>)
 8001482:	f107 0014 	add.w	r0, r7, #20
 8001486:	2301      	movs	r3, #1
 8001488:	ca06      	ldmia	r2, {r1, r2}
 800148a:	f7ff fd0f 	bl	8000eac <ssd1306_WriteString>
	    #endif

	    ssd1306_UpdateScreen();
 800148e:	f7ff fc09 	bl	8000ca4 <ssd1306_UpdateScreen>
}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000010 	.word	0x20000010
 80014a0:	080065a8 	.word	0x080065a8
 80014a4:	20000008 	.word	0x20000008
 80014a8:	080065dc 	.word	0x080065dc
 80014ac:	080065ec 	.word	0x080065ec
 80014b0:	080065b4 	.word	0x080065b4
 80014b4:	080065bc 	.word	0x080065bc
 80014b8:	080065c4 	.word	0x080065c4
 80014bc:	080065d0 	.word	0x080065d0
 80014c0:	080065d8 	.word	0x080065d8

080014c4 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	if(screen==0){
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d105      	bne.n	80014e2 <ssd1306_DisplayAnalogValue+0x1e>
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fe02 	bl	80010e4 <ssd1306_PrintPrincipalMenu>
 80014e0:	e007      	b.n	80014f2 <ssd1306_DisplayAnalogValue+0x2e>
	}else if (screen==3){
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d104      	bne.n	80014f2 <ssd1306_DisplayAnalogValue+0x2e>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	68b9      	ldr	r1, [r7, #8]
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff feff 	bl	80012f0 <ssd1306_PrintSettingsMenu>
	}
    HAL_Delay(50);
 80014f2:	2032      	movs	r0, #50	; 0x32
 80014f4:	f000 fb84 	bl	8001c00 <HAL_Delay>
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fba8 	bl	8000c5c <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	2340      	movs	r3, #64	; 0x40
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2348      	movs	r3, #72	; 0x48
 8001516:	4a07      	ldr	r2, [pc, #28]	; (8001534 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 8001518:	2100      	movs	r1, #0
 800151a:	2020      	movs	r0, #32
 800151c:	f7ff fd04 	bl	8000f28 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 8001520:	f7ff fbc0 	bl	8000ca4 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8001524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001528:	f000 fb6a 	bl	8001c00 <HAL_Delay>

}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	080080ec 	.word	0x080080ec

08001538 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 800153c:	f7ff fb24 	bl	8000b88 <ssd1306_Init>
    ssd1306_TestFonts1();
 8001540:	f7ff fd7e 	bl	8001040 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8001544:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001548:	f000 fb5a 	bl	8001c00 <HAL_Delay>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001554:	f7ff fb18 	bl	8000b88 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8001558:	f7ff ffd2 	bl	8001500 <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 800155c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001560:	f000 fb4e 	bl	8001c00 <HAL_Delay>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x44>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_MspInit+0x44>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_MspInit+0x44>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x44>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x44>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x44>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a15      	ldr	r2, [pc, #84]	; (8001624 <HAL_ADC_MspInit+0x74>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d123      	bne.n	800161a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_ADC_MspInit+0x78>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_ADC_MspInit+0x78>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_ADC_MspInit+0x78>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_ADC_MspInit+0x78>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_ADC_MspInit+0x78>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_ADC_MspInit+0x78>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001602:	2301      	movs	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <HAL_ADC_MspInit+0x7c>)
 8001616:	f001 fb51 	bl	8002cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40012000 	.word	0x40012000
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000

08001630 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a4e      	ldr	r2, [pc, #312]	; (8001788 <HAL_ETH_MspInit+0x158>)
 800164e:	4293      	cmp	r3, r2
 8001650:	f040 8096 	bne.w	8001780 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001654:	4b4d      	ldr	r3, [pc, #308]	; (800178c <HAL_ETH_MspInit+0x15c>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_ETH_MspInit+0x15c>)
 800165a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165e:	6313      	str	r3, [r2, #48]	; 0x30
 8001660:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_ETH_MspInit+0x15c>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_ETH_MspInit+0x15c>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_ETH_MspInit+0x15c>)
 8001672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001676:	6313      	str	r3, [r2, #48]	; 0x30
 8001678:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_ETH_MspInit+0x15c>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_ETH_MspInit+0x15c>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a40      	ldr	r2, [pc, #256]	; (800178c <HAL_ETH_MspInit+0x15c>)
 800168a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b3e      	ldr	r3, [pc, #248]	; (800178c <HAL_ETH_MspInit+0x15c>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_ETH_MspInit+0x15c>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a3a      	ldr	r2, [pc, #232]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a34      	ldr	r2, [pc, #208]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a2e      	ldr	r2, [pc, #184]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b2c      	ldr	r3, [pc, #176]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4a28      	ldr	r2, [pc, #160]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ee:	6313      	str	r3, [r2, #48]	; 0x30
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <HAL_ETH_MspInit+0x15c>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016fc:	2332      	movs	r3, #50	; 0x32
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800170c:	230b      	movs	r3, #11
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	481e      	ldr	r0, [pc, #120]	; (8001790 <HAL_ETH_MspInit+0x160>)
 8001718:	f001 fad0 	bl	8002cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800171c:	2386      	movs	r3, #134	; 0x86
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800172c:	230b      	movs	r3, #11
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4817      	ldr	r0, [pc, #92]	; (8001794 <HAL_ETH_MspInit+0x164>)
 8001738:	f001 fac0 	bl	8002cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800174e:	230b      	movs	r3, #11
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <HAL_ETH_MspInit+0x168>)
 800175a:	f001 faaf 	bl	8002cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800175e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001770:	230b      	movs	r3, #11
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4808      	ldr	r0, [pc, #32]	; (800179c <HAL_ETH_MspInit+0x16c>)
 800177c:	f001 fa9e 	bl	8002cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3738      	adds	r7, #56	; 0x38
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40028000 	.word	0x40028000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020800 	.word	0x40020800
 8001794:	40020000 	.word	0x40020000
 8001798:	40020400 	.word	0x40020400
 800179c:	40021800 	.word	0x40021800

080017a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b0aa      	sub	sp, #168	; 0xa8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	2284      	movs	r2, #132	; 0x84
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fa53 	bl	8005c6c <memset>
  if(hi2c->Instance==I2C2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a21      	ldr	r2, [pc, #132]	; (8001850 <HAL_I2C_MspInit+0xb0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d13b      	bne.n	8001848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fed6 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017ea:	f7ff f98f 	bl	8000b0c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_I2C_MspInit+0xb4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a18      	ldr	r2, [pc, #96]	; (8001854 <HAL_I2C_MspInit+0xb4>)
 80017f4:	f043 0320 	orr.w	r3, r3, #32
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_I2C_MspInit+0xb4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001806:	2303      	movs	r3, #3
 8001808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180c:	2312      	movs	r3, #18
 800180e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800181e:	2304      	movs	r3, #4
 8001820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001824:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001828:	4619      	mov	r1, r3
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <HAL_I2C_MspInit+0xb8>)
 800182c:	f001 fa46 	bl	8002cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_I2C_MspInit+0xb4>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_I2C_MspInit+0xb4>)
 8001836:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_I2C_MspInit+0xb4>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	37a8      	adds	r7, #168	; 0xa8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40005800 	.word	0x40005800
 8001854:	40023800 	.word	0x40023800
 8001858:	40021400 	.word	0x40021400

0800185c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0aa      	sub	sp, #168	; 0xa8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	2284      	movs	r2, #132	; 0x84
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f004 f9f5 	bl	8005c6c <memset>
  if(huart->Instance==USART3)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_UART_MspInit+0xb4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d13c      	bne.n	8001906 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800188c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001890:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001892:	2300      	movs	r3, #0
 8001894:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fe78 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018a6:	f7ff f931 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_UART_MspInit+0xb8>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_UART_MspInit+0xb8>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_UART_MspInit+0xb8>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_UART_MspInit+0xb8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_UART_MspInit+0xb8>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_UART_MspInit+0xb8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f4:	2307      	movs	r3, #7
 80018f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <HAL_UART_MspInit+0xbc>)
 8001902:	f001 f9db 	bl	8002cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	37a8      	adds	r7, #168	; 0xa8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40004800 	.word	0x40004800
 8001914:	40023800 	.word	0x40023800
 8001918:	40020c00 	.word	0x40020c00

0800191c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0ac      	sub	sp, #176	; 0xb0
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	2284      	movs	r2, #132	; 0x84
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f004 f995 	bl	8005c6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800194a:	d159      	bne.n	8001a00 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800194c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001950:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fe17 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001968:	f7ff f8d0 	bl	8000b0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001984:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800199e:	230a      	movs	r3, #10
 80019a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4818      	ldr	r0, [pc, #96]	; (8001a0c <HAL_PCD_MspInit+0xf0>)
 80019ac:	f001 f986 	bl	8002cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019c8:	4619      	mov	r1, r3
 80019ca:	4810      	ldr	r0, [pc, #64]	; (8001a0c <HAL_PCD_MspInit+0xf0>)
 80019cc:	f001 f976 	bl	8002cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 80019d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019da:	6353      	str	r3, [r2, #52]	; 0x34
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 80019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	6453      	str	r3, [r2, #68]	; 0x44
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_PCD_MspInit+0xec>)
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	37b0      	adds	r7, #176	; 0xb0
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <NMI_Handler+0x4>

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f8b0 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f004 f8b2 	bl	8005bfc <__errno>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20050000 	.word	0x20050000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20000d14 	.word	0x20000d14
 8001acc:	20000d30 	.word	0x20000d30

08001ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001afa:	490e      	ldr	r1, [pc, #56]	; (8001b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b10:	4c0b      	ldr	r4, [pc, #44]	; (8001b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b1e:	f7ff ffd7 	bl	8001ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f004 f871 	bl	8005c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b26:	f7fe fd45 	bl	80005b4 <main>
  bx  lr    
 8001b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b38:	08008388 	.word	0x08008388
  ldr r2, =_sbss
 8001b3c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001b40:	20000d2c 	.word	0x20000d2c

08001b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>

08001b46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	f000 fd5c 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f000 f805 	bl	8001b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b56:	f7ff fd07 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x54>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x58>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fd69 	bl	8002656 <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f000 fd3f 	bl	800261e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_InitTick+0x5c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000018 	.word	0x20000018
 8001bb8:	20000020 	.word	0x20000020
 8001bbc:	2000001c 	.word	0x2000001c

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000020 	.word	0x20000020
 8001be4:	20000d18 	.word	0x20000d18

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000d18 	.word	0x20000d18

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000020 	.word	0x20000020

08001c48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e031      	b.n	8001cc2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fca2 	bl	80015b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d116      	bne.n	8001cb4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_ADC_Init+0x84>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fb0a 	bl	80022b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb2:	e001      	b.n	8001cb8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	ffffeefd 	.word	0xffffeefd

08001cd0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Start+0x1a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0ad      	b.n	8001e46 <HAL_ADC_Start+0x176>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d018      	beq.n	8001d32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_ADC_Start+0x184>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_ADC_Start+0x188>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9a      	lsrs	r2, r3, #18
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d24:	e002      	b.n	8001d2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d175      	bne.n	8001e2c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d44:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <HAL_ADC_Start+0x18c>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7a:	d106      	bne.n	8001d8a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f023 0206 	bic.w	r2, r3, #6
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001da0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001da2:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <HAL_ADC_Start+0x190>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d143      	bne.n	8001e44 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	e03a      	b.n	8001e44 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_ADC_Start+0x194>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d10e      	bne.n	8001df6 <HAL_ADC_Start+0x126>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d107      	bne.n	8001df6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_ADC_Start+0x190>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d120      	bne.n	8001e44 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_ADC_Start+0x198>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d11b      	bne.n	8001e44 <HAL_ADC_Start+0x174>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d114      	bne.n	8001e44 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	e00b      	b.n	8001e44 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f043 0210 	orr.w	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000018 	.word	0x20000018
 8001e58:	431bde83 	.word	0x431bde83
 8001e5c:	fffff8fe 	.word	0xfffff8fe
 8001e60:	40012300 	.word	0x40012300
 8001e64:	40012000 	.word	0x40012000
 8001e68:	40012200 	.word	0x40012200

08001e6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Stop+0x16>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e01f      	b.n	8001ec2 <HAL_ADC_Stop+0x56>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_ADC_Stop+0x64>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	ffffeefe 	.word	0xffffeefe

08001ed4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef0:	d113      	bne.n	8001f1a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f00:	d10b      	bne.n	8001f1a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f043 0220 	orr.w	r2, r3, #32
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e063      	b.n	8001fe2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f1a:	f7ff fe65 	bl	8001be8 <HAL_GetTick>
 8001f1e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f20:	e021      	b.n	8001f66 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d01d      	beq.n	8001f66 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_ADC_PollForConversion+0x6c>
 8001f30:	f7ff fe5a 	bl	8001be8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d212      	bcs.n	8001f66 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d00b      	beq.n	8001f66 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f043 0204 	orr.w	r2, r3, #4
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e03d      	b.n	8001fe2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d1d6      	bne.n	8001f22 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0212 	mvn.w	r2, #18
 8001f7c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d123      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d11f      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1c>
 800201c:	2302      	movs	r3, #2
 800201e:	e136      	b.n	800228e <HAL_ADC_ConfigChannel+0x28a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b09      	cmp	r3, #9
 800202e:	d93a      	bls.n	80020a6 <HAL_ADC_ConfigChannel+0xa2>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002038:	d035      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68d9      	ldr	r1, [r3, #12]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	3b1e      	subs	r3, #30
 8002050:	2207      	movs	r2, #7
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a8d      	ldr	r2, [pc, #564]	; (800229c <HAL_ADC_ConfigChannel+0x298>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10a      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68d9      	ldr	r1, [r3, #12]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	061a      	lsls	r2, r3, #24
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800207e:	e035      	b.n	80020ec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	4603      	mov	r3, r0
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4403      	add	r3, r0
 8002098:	3b1e      	subs	r3, #30
 800209a:	409a      	lsls	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a4:	e022      	b.n	80020ec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6919      	ldr	r1, [r3, #16]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43da      	mvns	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	400a      	ands	r2, r1
 80020c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6919      	ldr	r1, [r3, #16]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	4603      	mov	r3, r0
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4403      	add	r3, r0
 80020e2:	409a      	lsls	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d824      	bhi.n	800213e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b05      	subs	r3, #5
 8002106:	221f      	movs	r2, #31
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43da      	mvns	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	400a      	ands	r2, r1
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4618      	mov	r0, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b05      	subs	r3, #5
 8002130:	fa00 f203 	lsl.w	r2, r0, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	; 0x34
 800213c:	e04c      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d824      	bhi.n	8002190 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b23      	subs	r3, #35	; 0x23
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b23      	subs	r3, #35	; 0x23
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
 800218e:	e023      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b41      	subs	r3, #65	; 0x41
 80021a2:	221f      	movs	r2, #31
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43da      	mvns	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	400a      	ands	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3b41      	subs	r3, #65	; 0x41
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <HAL_ADC_ConfigChannel+0x29c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10a      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1f4>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80021ec:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80021f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_ADC_ConfigChannel+0x29c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10f      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x21e>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b12      	cmp	r3, #18
 8002208:	d10b      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002210:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002214:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800221c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002220:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <HAL_ADC_ConfigChannel+0x29c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d12b      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x280>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1a      	ldr	r2, [pc, #104]	; (800229c <HAL_ADC_ConfigChannel+0x298>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d003      	beq.n	800223e <HAL_ADC_ConfigChannel+0x23a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b11      	cmp	r3, #17
 800223c:	d122      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800223e:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002244:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002248:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002250:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002254:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_ADC_ConfigChannel+0x298>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d111      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_ADC_ConfigChannel+0x2a8>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0c9a      	lsrs	r2, r3, #18
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002276:	e002      	b.n	800227e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3b01      	subs	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	10000012 	.word	0x10000012
 80022a0:	40012000 	.word	0x40012000
 80022a4:	40012300 	.word	0x40012300
 80022a8:	20000018 	.word	0x20000018
 80022ac:	431bde83 	.word	0x431bde83

080022b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80022b8:	4b78      	ldr	r3, [pc, #480]	; (800249c <ADC_Init+0x1ec>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a77      	ldr	r2, [pc, #476]	; (800249c <ADC_Init+0x1ec>)
 80022be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022c4:	4b75      	ldr	r3, [pc, #468]	; (800249c <ADC_Init+0x1ec>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4973      	ldr	r1, [pc, #460]	; (800249c <ADC_Init+0x1ec>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	021a      	lsls	r2, r3, #8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <ADC_Init+0x1f0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d022      	beq.n	800238a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6899      	ldr	r1, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	e00f      	b.n	80023aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0202 	bic.w	r2, r2, #2
 80023b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	005a      	lsls	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	3b01      	subs	r3, #1
 8002404:	035a      	lsls	r2, r3, #13
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	e007      	b.n	8002420 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800241e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	3b01      	subs	r3, #1
 800243c:	051a      	lsls	r2, r3, #20
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002462:	025a      	lsls	r2, r3, #9
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	029a      	lsls	r2, r3, #10
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40012300 	.word	0x40012300
 80024a0:	0f000001 	.word	0x0f000001

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <__NVIC_SetPriorityGrouping+0x40>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d2:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <__NVIC_SetPriorityGrouping+0x40>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	60d3      	str	r3, [r2, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00
 80024e8:	05fa0000 	.word	0x05fa0000

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff8e 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff47 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff5c 	bl	80024ec <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff8e 	bl	800255c <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5d 	bl	8002508 <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffb0 	bl	80025c4 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06a      	b.n	8002758 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2223      	movs	r2, #35	; 0x23
 8002690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7fe ffcb 	bl	8001630 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_ETH_Init+0xf0>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a30      	ldr	r2, [pc, #192]	; (8002760 <HAL_ETH_Init+0xf0>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_ETH_Init+0xf0>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <HAL_ETH_Init+0xf4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <HAL_ETH_Init+0xf4>)
 80026b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_ETH_Init+0xf4>)
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4927      	ldr	r1, [pc, #156]	; (8002764 <HAL_ETH_Init+0xf4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_ETH_Init+0xf4>)
 80026ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e8:	f7ff fa7e 	bl	8001be8 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026ee:	e011      	b.n	8002714 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026f0:	f7ff fa7a 	bl	8001be8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026fe:	d909      	bls.n	8002714 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	22e0      	movs	r2, #224	; 0xe0
 800270c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e021      	b.n	8002758 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1e4      	bne.n	80026f0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f958 	bl	80029dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f9ff 	bl	8002b30 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa55 	bl	8002be2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	461a      	mov	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f9bd 	bl	8002ac0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2210      	movs	r2, #16
 8002752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	40013800 	.word	0x40013800

08002768 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <ETH_SetMACConfig+0x15c>)
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7c1b      	ldrb	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <ETH_SetMACConfig+0x28>
 800278a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800278e:	e000      	b.n	8002792 <ETH_SetMACConfig+0x2a>
 8002790:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7c5b      	ldrb	r3, [r3, #17]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <ETH_SetMACConfig+0x38>
 800279a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800279e:	e000      	b.n	80027a2 <ETH_SetMACConfig+0x3a>
 80027a0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	7fdb      	ldrb	r3, [r3, #31]
 80027ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	7f92      	ldrb	r2, [r2, #30]
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d102      	bne.n	80027c6 <ETH_SetMACConfig+0x5e>
 80027c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c4:	e000      	b.n	80027c8 <ETH_SetMACConfig+0x60>
 80027c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80027c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7f1b      	ldrb	r3, [r3, #28]
 80027ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	791b      	ldrb	r3, [r3, #4]
 80027dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80027de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027e6:	2a00      	cmp	r2, #0
 80027e8:	d102      	bne.n	80027f0 <ETH_SetMACConfig+0x88>
 80027ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ee:	e000      	b.n	80027f2 <ETH_SetMACConfig+0x8a>
 80027f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	7bdb      	ldrb	r3, [r3, #15]
 80027f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002800:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002808:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800280a:	4313      	orrs	r3, r2
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002822:	2001      	movs	r0, #1
 8002824:	f7ff f9ec 	bl	8001c00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800283e:	4013      	ands	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002846:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800284e:	2a00      	cmp	r2, #0
 8002850:	d101      	bne.n	8002856 <ETH_SetMACConfig+0xee>
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	e000      	b.n	8002858 <ETH_SetMACConfig+0xf0>
 8002856:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002858:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800285e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002866:	2a01      	cmp	r2, #1
 8002868:	d101      	bne.n	800286e <ETH_SetMACConfig+0x106>
 800286a:	2208      	movs	r2, #8
 800286c:	e000      	b.n	8002870 <ETH_SetMACConfig+0x108>
 800286e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002870:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002878:	2a01      	cmp	r2, #1
 800287a:	d101      	bne.n	8002880 <ETH_SetMACConfig+0x118>
 800287c:	2204      	movs	r2, #4
 800287e:	e000      	b.n	8002882 <ETH_SetMACConfig+0x11a>
 8002880:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002882:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800288a:	2a01      	cmp	r2, #1
 800288c:	d101      	bne.n	8002892 <ETH_SetMACConfig+0x12a>
 800288e:	2202      	movs	r2, #2
 8002890:	e000      	b.n	8002894 <ETH_SetMACConfig+0x12c>
 8002892:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002894:	4313      	orrs	r3, r2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff f9a7 	bl	8001c00 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	ff20810f 	.word	0xff20810f

080028c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <ETH_SetDMAConfig+0x110>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	7b1b      	ldrb	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <ETH_SetDMAConfig+0x2c>
 80028ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028f2:	e000      	b.n	80028f6 <ETH_SetDMAConfig+0x2e>
 80028f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7b5b      	ldrb	r3, [r3, #13]
 80028fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	7f52      	ldrb	r2, [r2, #29]
 8002902:	2a00      	cmp	r2, #0
 8002904:	d102      	bne.n	800290c <ETH_SetDMAConfig+0x44>
 8002906:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800290a:	e000      	b.n	800290e <ETH_SetDMAConfig+0x46>
 800290c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800290e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	7b9b      	ldrb	r3, [r3, #14]
 8002914:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002916:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800291c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	7f1b      	ldrb	r3, [r3, #28]
 8002922:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002924:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	7f9b      	ldrb	r3, [r3, #30]
 800292a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800292c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002932:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800293a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800293c:	4313      	orrs	r3, r2
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294c:	461a      	mov	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800295e:	2001      	movs	r0, #1
 8002960:	f7ff f94e 	bl	8001c00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296c:	461a      	mov	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	791b      	ldrb	r3, [r3, #4]
 8002976:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800297c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002982:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002988:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002990:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002992:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800299a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029bc:	2001      	movs	r0, #1
 80029be:	f7ff f91f 	bl	8001c00 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	f8de3f23 	.word	0xf8de3f23

080029dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b0a6      	sub	sp, #152	; 0x98
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a42:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fe86 	bl	8002768 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a90:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a96:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a9c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ff08 	bl	80028c8 <ETH_SetDMAConfig>
}
 8002ab8:	bf00      	nop
 8002aba:	3798      	adds	r7, #152	; 0x98
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3305      	adds	r3, #5
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	3204      	adds	r2, #4
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <ETH_MACAddressConfig+0x68>)
 8002ae2:	4413      	add	r3, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3303      	adds	r3, #3
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	061a      	lsls	r2, r3, #24
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3302      	adds	r3, #2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3301      	adds	r3, #1
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	4313      	orrs	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	7812      	ldrb	r2, [r2, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <ETH_MACAddressConfig+0x6c>)
 8002b12:	4413      	add	r3, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	6013      	str	r3, [r2, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40028040 	.word	0x40028040
 8002b2c:	40028044 	.word	0x40028044

08002b30 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e03e      	b.n	8002bbc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68d9      	ldr	r1, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2200      	movs	r2, #0
 8002b66:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	3206      	adds	r2, #6
 8002b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d80c      	bhi.n	8002ba0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68d9      	ldr	r1, [r3, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	e004      	b.n	8002baa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d9bd      	bls.n	8002b3e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd4:	611a      	str	r2, [r3, #16]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e046      	b.n	8002c7e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6919      	ldr	r1, [r3, #16]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c2c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002c34:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	3212      	adds	r2, #18
 8002c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d80c      	bhi.n	8002c6e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6919      	ldr	r1, [r3, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	e004      	b.n	8002c78 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d9b5      	bls.n	8002bf0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cae:	60da      	str	r2, [r3, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e175      	b.n	8002fc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f040 8164 	bne.w	8002fc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d005      	beq.n	8002d12 <HAL_GPIO_Init+0x56>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d130      	bne.n	8002d74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 0201 	and.w	r2, r3, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d017      	beq.n	8002db0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d123      	bne.n	8002e04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	08da      	lsrs	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	08da      	lsrs	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3208      	adds	r2, #8
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0203 	and.w	r2, r3, #3
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80be 	beq.w	8002fc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a65      	ldr	r2, [pc, #404]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_GPIO_Init+0x324>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e5e:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_GPIO_Init+0x328>)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	3302      	adds	r3, #2
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_GPIO_Init+0x32c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d037      	beq.n	8002efa <HAL_GPIO_Init+0x23e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a57      	ldr	r2, [pc, #348]	; (8002fec <HAL_GPIO_Init+0x330>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_GPIO_Init+0x23a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a56      	ldr	r2, [pc, #344]	; (8002ff0 <HAL_GPIO_Init+0x334>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02b      	beq.n	8002ef2 <HAL_GPIO_Init+0x236>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_GPIO_Init+0x338>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d025      	beq.n	8002eee <HAL_GPIO_Init+0x232>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a54      	ldr	r2, [pc, #336]	; (8002ff8 <HAL_GPIO_Init+0x33c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_GPIO_Init+0x22e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a53      	ldr	r2, [pc, #332]	; (8002ffc <HAL_GPIO_Init+0x340>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x22a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_GPIO_Init+0x344>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x226>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a51      	ldr	r2, [pc, #324]	; (8003004 <HAL_GPIO_Init+0x348>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x222>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a50      	ldr	r2, [pc, #320]	; (8003008 <HAL_GPIO_Init+0x34c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x21e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4f      	ldr	r2, [pc, #316]	; (800300c <HAL_GPIO_Init+0x350>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x21a>
 8002ed2:	2309      	movs	r3, #9
 8002ed4:	e012      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ed6:	230a      	movs	r3, #10
 8002ed8:	e010      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eda:	2308      	movs	r3, #8
 8002edc:	e00e      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e00c      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ee2:	2306      	movs	r3, #6
 8002ee4:	e00a      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eea:	2304      	movs	r3, #4
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x240>
 8002efa:	2300      	movs	r3, #0
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f002 0203 	and.w	r2, r2, #3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4093      	lsls	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f0c:	4935      	ldr	r1, [pc, #212]	; (8002fe4 <HAL_GPIO_Init+0x328>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a34      	ldr	r2, [pc, #208]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f92:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_GPIO_Init+0x354>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	f67f ae86 	bls.w	8002cdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40021400 	.word	0x40021400
 8003000:	40021800 	.word	0x40021800
 8003004:	40021c00 	.word	0x40021c00
 8003008:	40022000 	.word	0x40022000
 800300c:	40022400 	.word	0x40022400
 8003010:	40013c00 	.word	0x40013c00

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003030:	e003      	b.n	800303a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	041a      	lsls	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	619a      	str	r2, [r3, #24]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07f      	b.n	800315a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe fb96 	bl	80017a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e006      	b.n	80030d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d104      	bne.n	80030e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_I2C_Init+0x11c>)
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	02008000 	.word	0x02008000

08003168 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b20      	cmp	r3, #32
 800318c:	f040 80f9 	bne.w	8003382 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_I2C_Mem_Write+0x34>
 8003196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0ed      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Mem_Write+0x4e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0e6      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031be:	f7fe fd13 	bl	8001be8 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2319      	movs	r3, #25
 80031ca:	2201      	movs	r2, #1
 80031cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f955 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0d1      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2221      	movs	r2, #33	; 0x21
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003208:	88f8      	ldrh	r0, [r7, #6]
 800320a:	893a      	ldrh	r2, [r7, #8]
 800320c:	8979      	ldrh	r1, [r7, #10]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4603      	mov	r3, r0
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f8b9 	bl	8003390 <I2C_RequestMemoryWrite>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0a9      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2bff      	cmp	r3, #255	; 0xff
 8003238:	d90e      	bls.n	8003258 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22ff      	movs	r2, #255	; 0xff
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	2300      	movs	r3, #0
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fab1 	bl	80037b8 <I2C_TransferConfig>
 8003256:	e00f      	b.n	8003278 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	b2da      	uxtb	r2, r3
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	2300      	movs	r3, #0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 faa0 	bl	80037b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f93f 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e07b      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d034      	beq.n	8003330 <HAL_I2C_Mem_Write+0x1c8>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d130      	bne.n	8003330 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f8d1 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e04d      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2bff      	cmp	r3, #255	; 0xff
 80032f0:	d90e      	bls.n	8003310 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	22ff      	movs	r2, #255	; 0xff
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	2300      	movs	r3, #0
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fa55 	bl	80037b8 <I2C_TransferConfig>
 800330e:	e00f      	b.n	8003330 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	b2da      	uxtb	r2, r3
 8003320:	8979      	ldrh	r1, [r7, #10]
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa44 	bl	80037b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d19e      	bne.n	8003278 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f91e 	bl	8003580 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e01a      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2220      	movs	r2, #32
 8003354:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_I2C_Mem_Write+0x224>)
 8003362:	400b      	ands	r3, r1
 8003364:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	fe00e800 	.word	0xfe00e800

08003390 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	8979      	ldrh	r1, [r7, #10]
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <I2C_RequestMemoryWrite+0xa4>)
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f9fd 	bl	80037b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	69b9      	ldr	r1, [r7, #24]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f89c 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e02c      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
 80033e2:	e015      	b.n	8003410 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f882 	bl	8003500 <I2C_WaitOnTXISFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e012      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003406:	893b      	ldrh	r3, [r7, #8]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f830 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	80002000 	.word	0x80002000

08003438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d103      	bne.n	8003456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d007      	beq.n	8003474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	619a      	str	r2, [r3, #24]
  }
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003490:	e022      	b.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d01e      	beq.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe fba5 	bl	8001be8 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d113      	bne.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e00f      	b.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d0cd      	beq.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800350c:	e02c      	b.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f870 	bl	80035f8 <I2C_IsErrorOccurred>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e02a      	b.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d01e      	beq.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fe fb5d 	bl	8001be8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d113      	bne.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e007      	b.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d1cb      	bne.n	800350e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800358c:	e028      	b.n	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f830 	bl	80035f8 <I2C_IsErrorOccurred>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e026      	b.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fe fb21 	bl	8001be8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d113      	bne.n	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e007      	b.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d1cf      	bne.n	800358e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d068      	beq.n	80036f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2210      	movs	r2, #16
 800362a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800362c:	e049      	b.n	80036c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d045      	beq.n	80036c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7fe fad7 	bl	8001be8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_IsErrorOccurred+0x54>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d13a      	bne.n	80036c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003656:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800365e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366e:	d121      	bne.n	80036b4 <I2C_IsErrorOccurred+0xbc>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003676:	d01d      	beq.n	80036b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b20      	cmp	r3, #32
 800367c:	d01a      	beq.n	80036b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800368c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800368e:	f7fe faab 	bl	8001be8 <HAL_GetTick>
 8003692:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003694:	e00e      	b.n	80036b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003696:	f7fe faa7 	bl	8001be8 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b19      	cmp	r3, #25
 80036a2:	d907      	bls.n	80036b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	f043 0320 	orr.w	r3, r3, #32
 80036aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80036b2:	e006      	b.n	80036c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d1e9      	bne.n	8003696 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d003      	beq.n	80036d8 <I2C_IsErrorOccurred+0xe0>
 80036d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0aa      	beq.n	800362e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2220      	movs	r2, #32
 80036e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f043 0304 	orr.w	r3, r3, #4
 80036ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003718:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800373a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	f043 0302 	orr.w	r3, r3, #2
 8003752:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01c      	beq.n	80037a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff fe63 	bl	8003438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <I2C_IsErrorOccurred+0x1bc>)
 800377e:	400b      	ands	r3, r1
 8003780:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	fe00e800 	.word	0xfe00e800

080037b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	817b      	strh	r3, [r7, #10]
 80037c6:	4613      	mov	r3, r2
 80037c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ca:	897b      	ldrh	r3, [r7, #10]
 80037cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037d0:	7a7b      	ldrb	r3, [r7, #9]
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	0d5b      	lsrs	r3, r3, #21
 80037f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <I2C_TransferConfig+0x60>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	43db      	mvns	r3, r3
 80037fc:	ea02 0103 	and.w	r1, r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	03ff63ff 	.word	0x03ff63ff

0800381c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d138      	bne.n	80038a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800383c:	2302      	movs	r3, #2
 800383e:	e032      	b.n	80038a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800386e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d139      	bne.n	800393c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e033      	b.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2224      	movs	r2, #36	; 0x24
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003904:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e000      	b.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800394a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394c:	b08f      	sub	sp, #60	; 0x3c
 800394e:	af0a      	add	r7, sp, #40	; 0x28
 8003950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e116      	b.n	8003b8a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd ffd0 	bl	800191c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2203      	movs	r2, #3
 8003980:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f001 fe92 	bl	80056c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	687e      	ldr	r6, [r7, #4]
 80039a8:	466d      	mov	r5, sp
 80039aa:	f106 0410 	add.w	r4, r6, #16
 80039ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80039be:	1d33      	adds	r3, r6, #4
 80039c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039c2:	6838      	ldr	r0, [r7, #0]
 80039c4:	f001 fe26 	bl	8005614 <USB_CoreInit>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0d7      	b.n	8003b8a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fe80 	bl	80056e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	e04a      	b.n	8003a82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	333d      	adds	r3, #61	; 0x3d
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	333c      	adds	r3, #60	; 0x3c
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	b298      	uxth	r0, r3
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3344      	adds	r3, #68	; 0x44
 8003a28:	4602      	mov	r2, r0
 8003a2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3340      	adds	r3, #64	; 0x40
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3348      	adds	r3, #72	; 0x48
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	334c      	adds	r3, #76	; 0x4c
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3354      	adds	r3, #84	; 0x54
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d3af      	bcc.n	80039ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e044      	b.n	8003b1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d3b5      	bcc.n	8003a92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	687e      	ldr	r6, [r7, #4]
 8003b2e:	466d      	mov	r5, sp
 8003b30:	f106 0410 	add.w	r4, r6, #16
 8003b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b40:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b44:	1d33      	adds	r3, r6, #4
 8003b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b48:	6838      	ldr	r0, [r7, #0]
 8003b4a:	f001 fe19 	bl	8005780 <USB_DevInit>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e014      	b.n	8003b8a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f80b 	bl	8003b94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 ffd7 	bl	8005b36 <USB_DevDisconnect>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	10000003 	.word	0x10000003

08003bdc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40007000 	.word	0x40007000

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c04:	2300      	movs	r3, #0
 8003c06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e291      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8087 	beq.w	8003d2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c20:	4b96      	ldr	r3, [pc, #600]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d00c      	beq.n	8003c46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2c:	4b93      	ldr	r3, [pc, #588]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d112      	bne.n	8003c5e <HAL_RCC_OscConfig+0x62>
 8003c38:	4b90      	ldr	r3, [pc, #576]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c46:	4b8d      	ldr	r3, [pc, #564]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d06c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x130>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d168      	bne.n	8003d2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e26b      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x7a>
 8003c68:	4b84      	ldr	r3, [pc, #528]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a83      	ldr	r2, [pc, #524]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e02e      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x9c>
 8003c7e:	4b7f      	ldr	r3, [pc, #508]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7e      	ldr	r2, [pc, #504]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b7c      	ldr	r3, [pc, #496]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a7b      	ldr	r2, [pc, #492]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0xc0>
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a75      	ldr	r2, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a72      	ldr	r2, [pc, #456]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd8>
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd ff84 	bl	8001be8 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fd ff80 	bl	8001be8 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e21f      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xe8>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fd ff70 	bl	8001be8 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fd ff6c 	bl	8001be8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e20b      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	4b57      	ldr	r3, [pc, #348]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x110>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d069      	beq.n	8003e0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d3a:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d46:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d11c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x190>
 8003d52:	4b4a      	ldr	r3, [pc, #296]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d116      	bne.n	8003d8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5e:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x17a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e1df      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d76:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	493d      	ldr	r1, [pc, #244]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	e040      	b.n	8003e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d023      	beq.n	8003ddc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d94:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a38      	ldr	r2, [pc, #224]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd ff22 	bl	8001be8 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fd ff1e 	bl	8001be8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1bd      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4929      	ldr	r1, [pc, #164]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
 8003dda:	e018      	b.n	8003e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fd fefe 	bl	8001be8 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df0:	f7fd fefa 	bl	8001be8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e199      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d038      	beq.n	8003e8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d019      	beq.n	8003e56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e22:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fd fedb 	bl	8001be8 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e36:	f7fd fed7 	bl	8001be8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e176      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x23a>
 8003e54:	e01a      	b.n	8003e8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <HAL_RCC_OscConfig+0x280>)
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fd fec1 	bl	8001be8 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6a:	f7fd febd 	bl	8001be8 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d903      	bls.n	8003e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e15c      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
 8003e7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	4b91      	ldr	r3, [pc, #580]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80a4 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9a:	4b8b      	ldr	r3, [pc, #556]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	4b88      	ldr	r3, [pc, #544]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a87      	ldr	r2, [pc, #540]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec2:	4b82      	ldr	r3, [pc, #520]	; (80040cc <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d118      	bne.n	8003f00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ece:	4b7f      	ldr	r3, [pc, #508]	; (80040cc <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a7e      	ldr	r2, [pc, #504]	; (80040cc <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fd fe85 	bl	8001be8 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fd fe81 	bl	8001be8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b64      	cmp	r3, #100	; 0x64
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e120      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef4:	4b75      	ldr	r3, [pc, #468]	; (80040cc <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x31a>
 8003f08:	4b6f      	ldr	r3, [pc, #444]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a6e      	ldr	r2, [pc, #440]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	e02d      	b.n	8003f72 <HAL_RCC_OscConfig+0x376>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x33c>
 8003f1e:	4b6a      	ldr	r3, [pc, #424]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a69      	ldr	r2, [pc, #420]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2a:	4b67      	ldr	r3, [pc, #412]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a66      	ldr	r2, [pc, #408]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	e01c      	b.n	8003f72 <HAL_RCC_OscConfig+0x376>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b05      	cmp	r3, #5
 8003f3e:	d10c      	bne.n	8003f5a <HAL_RCC_OscConfig+0x35e>
 8003f40:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	4a60      	ldr	r2, [pc, #384]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4c:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	e00b      	b.n	8003f72 <HAL_RCC_OscConfig+0x376>
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	4a5a      	ldr	r2, [pc, #360]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6713      	str	r3, [r2, #112]	; 0x70
 8003f66:	4b58      	ldr	r3, [pc, #352]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	4a57      	ldr	r2, [pc, #348]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d015      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7fd fe35 	bl	8001be8 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fd fe31 	bl	8001be8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e0ce      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ee      	beq.n	8003f82 <HAL_RCC_OscConfig+0x386>
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fd fe1f 	bl	8001be8 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fd fe1b 	bl	8001be8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	4b40      	ldr	r3, [pc, #256]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ee      	bne.n	8003fae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d105      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd6:	4b3c      	ldr	r3, [pc, #240]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	4a3b      	ldr	r2, [pc, #236]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80a4 	beq.w	8004134 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fec:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d06b      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d149      	bne.n	8004094 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004000:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a30      	ldr	r2, [pc, #192]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd fdec 	bl	8001be8 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd fde8 	bl	8001be8 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e087      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	019b      	lsls	r3, r3, #6
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	3b01      	subs	r3, #1
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	4313      	orrs	r3, r2
 8004058:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 800405a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800405e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8004066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fdbc 	bl	8001be8 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004074:	f7fd fdb8 	bl	8001be8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e057      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x478>
 8004092:	e04f      	b.n	8004134 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0b      	ldr	r2, [pc, #44]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 800409a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800409e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd fda2 	bl	8001be8 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fd fd9e 	bl	8001be8 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e03d      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_RCC_OscConfig+0x4cc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x4ac>
 80040c6:	e035      	b.n	8004134 <HAL_RCC_OscConfig+0x538>
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_RCC_OscConfig+0x544>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d028      	beq.n	8004130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d121      	bne.n	8004130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d11a      	bne.n	8004130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004100:	4013      	ands	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004106:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004108:	4293      	cmp	r3, r2
 800410a:	d111      	bne.n	8004130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	3b01      	subs	r3, #1
 800411a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800

08004144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0d0      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800415c:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d910      	bls.n	800418c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b67      	ldr	r3, [pc, #412]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 020f 	bic.w	r2, r3, #15
 8004172:	4965      	ldr	r1, [pc, #404]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0b8      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d020      	beq.n	80041da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a4:	4b59      	ldr	r3, [pc, #356]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a58      	ldr	r2, [pc, #352]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80041aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041bc:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c8:	4b50      	ldr	r3, [pc, #320]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	494d      	ldr	r1, [pc, #308]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d040      	beq.n	8004268 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b47      	ldr	r3, [pc, #284]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d115      	bne.n	8004226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e07f      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004206:	4b41      	ldr	r3, [pc, #260]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e073      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004216:	4b3d      	ldr	r3, [pc, #244]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e06b      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004226:	4b39      	ldr	r3, [pc, #228]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 0203 	bic.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4936      	ldr	r1, [pc, #216]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	4313      	orrs	r3, r2
 8004236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004238:	f7fd fcd6 	bl	8001be8 <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	e00a      	b.n	8004256 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004240:	f7fd fcd2 	bl	8001be8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e053      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	4b2d      	ldr	r3, [pc, #180]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 020c 	and.w	r2, r3, #12
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	429a      	cmp	r2, r3
 8004266:	d1eb      	bne.n	8004240 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004268:	4b27      	ldr	r3, [pc, #156]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d210      	bcs.n	8004298 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 020f 	bic.w	r2, r3, #15
 800427e:	4922      	ldr	r1, [pc, #136]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e032      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4916      	ldr	r1, [pc, #88]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	490e      	ldr	r1, [pc, #56]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042d6:	f000 f821 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	490a      	ldr	r1, [pc, #40]	; (8004310 <HAL_RCC_ClockConfig+0x1cc>)
 80042e8:	5ccb      	ldrb	r3, [r1, r3]
 80042ea:	fa22 f303 	lsr.w	r3, r2, r3
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1d0>)
 80042f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_ClockConfig+0x1d4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fc32 	bl	8001b60 <HAL_InitTick>

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023c00 	.word	0x40023c00
 800430c:	40023800 	.word	0x40023800
 8004310:	0800832c 	.word	0x0800832c
 8004314:	20000018 	.word	0x20000018
 8004318:	2000001c 	.word	0x2000001c

0800431c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004320:	b094      	sub	sp, #80	; 0x50
 8004322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	647b      	str	r3, [r7, #68]	; 0x44
 8004328:	2300      	movs	r3, #0
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432c:	2300      	movs	r3, #0
 800432e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004334:	4b79      	ldr	r3, [pc, #484]	; (800451c <HAL_RCC_GetSysClockFreq+0x200>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d00d      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0x40>
 8004340:	2b08      	cmp	r3, #8
 8004342:	f200 80e1 	bhi.w	8004508 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x34>
 800434a:	2b04      	cmp	r3, #4
 800434c:	d003      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x3a>
 800434e:	e0db      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004350:	4b73      	ldr	r3, [pc, #460]	; (8004520 <HAL_RCC_GetSysClockFreq+0x204>)
 8004352:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004354:	e0db      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004356:	4b73      	ldr	r3, [pc, #460]	; (8004524 <HAL_RCC_GetSysClockFreq+0x208>)
 8004358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800435a:	e0d8      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800435c:	4b6f      	ldr	r3, [pc, #444]	; (800451c <HAL_RCC_GetSysClockFreq+0x200>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004364:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004366:	4b6d      	ldr	r3, [pc, #436]	; (800451c <HAL_RCC_GetSysClockFreq+0x200>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d063      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004372:	4b6a      	ldr	r3, [pc, #424]	; (800451c <HAL_RCC_GetSysClockFreq+0x200>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	2200      	movs	r2, #0
 800437a:	63bb      	str	r3, [r7, #56]	; 0x38
 800437c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
 8004386:	2300      	movs	r3, #0
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
 800438a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	0159      	lsls	r1, r3, #5
 800439c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a0:	0150      	lsls	r0, r2, #5
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4621      	mov	r1, r4
 80043a8:	1a51      	subs	r1, r2, r1
 80043aa:	6139      	str	r1, [r7, #16]
 80043ac:	4629      	mov	r1, r5
 80043ae:	eb63 0301 	sbc.w	r3, r3, r1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043c0:	4659      	mov	r1, fp
 80043c2:	018b      	lsls	r3, r1, #6
 80043c4:	4651      	mov	r1, sl
 80043c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ca:	4651      	mov	r1, sl
 80043cc:	018a      	lsls	r2, r1, #6
 80043ce:	4651      	mov	r1, sl
 80043d0:	ebb2 0801 	subs.w	r8, r2, r1
 80043d4:	4659      	mov	r1, fp
 80043d6:	eb63 0901 	sbc.w	r9, r3, r1
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ee:	4690      	mov	r8, r2
 80043f0:	4699      	mov	r9, r3
 80043f2:	4623      	mov	r3, r4
 80043f4:	eb18 0303 	adds.w	r3, r8, r3
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	462b      	mov	r3, r5
 80043fc:	eb49 0303 	adc.w	r3, r9, r3
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800440e:	4629      	mov	r1, r5
 8004410:	024b      	lsls	r3, r1, #9
 8004412:	4621      	mov	r1, r4
 8004414:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004418:	4621      	mov	r1, r4
 800441a:	024a      	lsls	r2, r1, #9
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004422:	2200      	movs	r2, #0
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
 8004426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800442c:	f7fb ff40 	bl	80002b0 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004438:	e058      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443a:	4b38      	ldr	r3, [pc, #224]	; (800451c <HAL_RCC_GetSysClockFreq+0x200>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	099b      	lsrs	r3, r3, #6
 8004440:	2200      	movs	r2, #0
 8004442:	4618      	mov	r0, r3
 8004444:	4611      	mov	r1, r2
 8004446:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	2300      	movs	r3, #0
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
 8004450:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	f04f 0000 	mov.w	r0, #0
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	0159      	lsls	r1, r3, #5
 8004462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004466:	0150      	lsls	r0, r2, #5
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4641      	mov	r1, r8
 800446e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004472:	4649      	mov	r1, r9
 8004474:	eb63 0b01 	sbc.w	fp, r3, r1
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004484:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004488:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800448c:	ebb2 040a 	subs.w	r4, r2, sl
 8004490:	eb63 050b 	sbc.w	r5, r3, fp
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	00eb      	lsls	r3, r5, #3
 800449e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044a2:	00e2      	lsls	r2, r4, #3
 80044a4:	4614      	mov	r4, r2
 80044a6:	461d      	mov	r5, r3
 80044a8:	4643      	mov	r3, r8
 80044aa:	18e3      	adds	r3, r4, r3
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	464b      	mov	r3, r9
 80044b0:	eb45 0303 	adc.w	r3, r5, r3
 80044b4:	607b      	str	r3, [r7, #4]
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044c2:	4629      	mov	r1, r5
 80044c4:	028b      	lsls	r3, r1, #10
 80044c6:	4621      	mov	r1, r4
 80044c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044cc:	4621      	mov	r1, r4
 80044ce:	028a      	lsls	r2, r1, #10
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d6:	2200      	movs	r2, #0
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	61fa      	str	r2, [r7, #28]
 80044dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e0:	f7fb fee6 	bl	80002b0 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4613      	mov	r3, r2
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_GetSysClockFreq+0x200>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80044fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004506:	e002      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetSysClockFreq+0x204>)
 800450a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800450c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004510:	4618      	mov	r0, r3
 8004512:	3750      	adds	r7, #80	; 0x50
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	00f42400 	.word	0x00f42400
 8004524:	007a1200 	.word	0x007a1200

08004528 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <HAL_RCC_GetHCLKFreq+0x14>)
 800452e:	681b      	ldr	r3, [r3, #0]
}
 8004530:	4618      	mov	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000018 	.word	0x20000018

08004540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004544:	f7ff fff0 	bl	8004528 <HAL_RCC_GetHCLKFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0a9b      	lsrs	r3, r3, #10
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4903      	ldr	r1, [pc, #12]	; (8004564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40023800 	.word	0x40023800
 8004564:	0800833c 	.word	0x0800833c

08004568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800456c:	f7ff ffdc 	bl	8004528 <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	0b5b      	lsrs	r3, r3, #13
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4903      	ldr	r1, [pc, #12]	; (800458c <HAL_RCC_GetPCLK2Freq+0x24>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40023800 	.word	0x40023800
 800458c:	0800833c 	.word	0x0800833c

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045b8:	4b69      	ldr	r3, [pc, #420]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a68      	ldr	r2, [pc, #416]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045c2:	6093      	str	r3, [r2, #8]
 80045c4:	4b66      	ldr	r3, [pc, #408]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	4964      	ldr	r1, [pc, #400]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d017      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ea:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	4959      	ldr	r1, [pc, #356]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800460a:	2301      	movs	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d017      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004626:	4b4e      	ldr	r3, [pc, #312]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	494a      	ldr	r1, [pc, #296]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004646:	2301      	movs	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 808b 	beq.w	800478a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004674:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	4a39      	ldr	r2, [pc, #228]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	6413      	str	r3, [r2, #64]	; 0x40
 8004680:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800468c:	4b35      	ldr	r3, [pc, #212]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a34      	ldr	r2, [pc, #208]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fd faa6 	bl	8001be8 <HAL_GetTick>
 800469c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a0:	f7fd faa2 	bl	8001be8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e357      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046b2:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d035      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d02e      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046dc:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e6:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a1a      	ldr	r2, [pc, #104]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046fe:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004704:	4b16      	ldr	r3, [pc, #88]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d114      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fa6a 	bl	8001be8 <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fd fa66 	bl	8001be8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e319      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004746:	d111      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004756:	400b      	ands	r3, r1
 8004758:	4901      	ldr	r1, [pc, #4]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
 800475e:	e00b      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004760:	40023800 	.word	0x40023800
 8004764:	40007000 	.word	0x40007000
 8004768:	0ffffcff 	.word	0x0ffffcff
 800476c:	4baa      	ldr	r3, [pc, #680]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4aa9      	ldr	r2, [pc, #676]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004772:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004776:	6093      	str	r3, [r2, #8]
 8004778:	4ba7      	ldr	r3, [pc, #668]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	49a4      	ldr	r1, [pc, #656]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004786:	4313      	orrs	r3, r2
 8004788:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	d010      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004796:	4ba0      	ldr	r3, [pc, #640]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479c:	4a9e      	ldr	r2, [pc, #632]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80047a6:	4b9c      	ldr	r3, [pc, #624]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	4999      	ldr	r1, [pc, #612]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c4:	4b94      	ldr	r3, [pc, #592]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d2:	4991      	ldr	r1, [pc, #580]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047e6:	4b8c      	ldr	r3, [pc, #560]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f4:	4988      	ldr	r1, [pc, #544]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004808:	4b83      	ldr	r3, [pc, #524]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004816:	4980      	ldr	r1, [pc, #512]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800482a:	4b7b      	ldr	r3, [pc, #492]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4977      	ldr	r1, [pc, #476]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484c:	4b72      	ldr	r3, [pc, #456]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	496f      	ldr	r1, [pc, #444]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486e:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f023 020c 	bic.w	r2, r3, #12
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487c:	4966      	ldr	r1, [pc, #408]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	495e      	ldr	r1, [pc, #376]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c0:	4955      	ldr	r1, [pc, #340]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d4:	4b50      	ldr	r3, [pc, #320]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	494d      	ldr	r1, [pc, #308]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048f6:	4b48      	ldr	r3, [pc, #288]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	4944      	ldr	r1, [pc, #272]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004918:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	493c      	ldr	r1, [pc, #240]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	4933      	ldr	r1, [pc, #204]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800495c:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	492b      	ldr	r1, [pc, #172]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d011      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004984:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498c:	4922      	ldr	r1, [pc, #136]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800499c:	d101      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049be:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	4912      	ldr	r1, [pc, #72]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049e0:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f0:	4909      	ldr	r1, [pc, #36]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d006      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80d9 	beq.w	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a0c:	4b02      	ldr	r3, [pc, #8]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a01      	ldr	r2, [pc, #4]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a16:	e001      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1e:	f7fd f8e3 	bl	8001be8 <HAL_GetTick>
 8004a22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a26:	f7fd f8df 	bl	8001be8 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b64      	cmp	r3, #100	; 0x64
 8004a32:	d901      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e194      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a38:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f0      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d021      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a58:	4b64      	ldr	r3, [pc, #400]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a66:	4b61      	ldr	r3, [pc, #388]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6c:	0e1b      	lsrs	r3, r3, #24
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	019a      	lsls	r2, r3, #6
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	4957      	ldr	r1, [pc, #348]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02e      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004abe:	d129      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ac0:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad4:	0f1b      	lsrs	r3, r3, #28
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	019a      	lsls	r2, r3, #6
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	071b      	lsls	r3, r3, #28
 8004af4:	493d      	ldr	r1, [pc, #244]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004afc:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b02:	f023 021f 	bic.w	r2, r3, #31
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	4937      	ldr	r1, [pc, #220]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01d      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b20:	4b32      	ldr	r3, [pc, #200]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b26:	0e1b      	lsrs	r3, r3, #24
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b34:	0f1b      	lsrs	r3, r3, #28
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	019a      	lsls	r2, r3, #6
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	4925      	ldr	r1, [pc, #148]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d011      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	019a      	lsls	r2, r3, #6
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	071b      	lsls	r3, r3, #28
 8004b84:	4919      	ldr	r1, [pc, #100]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fd f826 	bl	8001be8 <HAL_GetTick>
 8004b9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ba0:	f7fd f822 	bl	8001be8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0d7      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 80cd 	bne.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a08      	ldr	r2, [pc, #32]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fd f809 	bl	8001be8 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bda:	f7fd f805 	bl	8001be8 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	; 0x64
 8004be6:	d903      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0ba      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004bec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf0:	4b5e      	ldr	r3, [pc, #376]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfc:	d0ed      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02e      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d12a      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c26:	4b51      	ldr	r3, [pc, #324]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c34:	4b4d      	ldr	r3, [pc, #308]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	0f1b      	lsrs	r3, r3, #28
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	019a      	lsls	r2, r3, #6
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	071b      	lsls	r3, r3, #28
 8004c5a:	4944      	ldr	r1, [pc, #272]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c62:	4b42      	ldr	r3, [pc, #264]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	493d      	ldr	r1, [pc, #244]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c90:	d11d      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ca0:	4b32      	ldr	r3, [pc, #200]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	0f1b      	lsrs	r3, r3, #28
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	019a      	lsls	r2, r3, #6
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	4929      	ldr	r1, [pc, #164]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d028      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	0e1b      	lsrs	r3, r3, #24
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ce8:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	019a      	lsls	r2, r3, #6
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	431a      	orrs	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	071b      	lsls	r3, r3, #28
 8004d0e:	4917      	ldr	r1, [pc, #92]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4911      	ldr	r1, [pc, #68]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d38:	f7fc ff56 	bl	8001be8 <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d40:	f7fc ff52 	bl	8001be8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e007      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5e:	d1ef      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e040      	b.n	8004e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fc fd62 	bl	800185c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0201 	bic.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f82c 	bl	8004e0c <UART_SetConfig>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e022      	b.n	8004e04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa84 	bl	80052d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fb0b 	bl	8005418 <UART_CheckIdleState>
 8004e02:	4603      	mov	r3, r0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4ba6      	ldr	r3, [pc, #664]	; (80050d0 <UART_SetConfig+0x2c4>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	6979      	ldr	r1, [r7, #20]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a94      	ldr	r2, [pc, #592]	; (80050d4 <UART_SetConfig+0x2c8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d120      	bne.n	8004eca <UART_SetConfig+0xbe>
 8004e88:	4b93      	ldr	r3, [pc, #588]	; (80050d8 <UART_SetConfig+0x2cc>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d816      	bhi.n	8004ec4 <UART_SetConfig+0xb8>
 8004e96:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0x90>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004ead 	.word	0x08004ead
 8004ea0:	08004eb9 	.word	0x08004eb9
 8004ea4:	08004eb3 	.word	0x08004eb3
 8004ea8:	08004ebf 	.word	0x08004ebf
 8004eac:	2301      	movs	r3, #1
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e150      	b.n	8005154 <UART_SetConfig+0x348>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e14d      	b.n	8005154 <UART_SetConfig+0x348>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e14a      	b.n	8005154 <UART_SetConfig+0x348>
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e147      	b.n	8005154 <UART_SetConfig+0x348>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e144      	b.n	8005154 <UART_SetConfig+0x348>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a83      	ldr	r2, [pc, #524]	; (80050dc <UART_SetConfig+0x2d0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d132      	bne.n	8004f3a <UART_SetConfig+0x12e>
 8004ed4:	4b80      	ldr	r3, [pc, #512]	; (80050d8 <UART_SetConfig+0x2cc>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d828      	bhi.n	8004f34 <UART_SetConfig+0x128>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0xdc>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08004f35 	.word	0x08004f35
 8004ef0:	08004f35 	.word	0x08004f35
 8004ef4:	08004f35 	.word	0x08004f35
 8004ef8:	08004f29 	.word	0x08004f29
 8004efc:	08004f35 	.word	0x08004f35
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f23 	.word	0x08004f23
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f35 	.word	0x08004f35
 8004f18:	08004f2f 	.word	0x08004f2f
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e118      	b.n	8005154 <UART_SetConfig+0x348>
 8004f22:	2302      	movs	r3, #2
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e115      	b.n	8005154 <UART_SetConfig+0x348>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e112      	b.n	8005154 <UART_SetConfig+0x348>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e10f      	b.n	8005154 <UART_SetConfig+0x348>
 8004f34:	2310      	movs	r3, #16
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e10c      	b.n	8005154 <UART_SetConfig+0x348>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a68      	ldr	r2, [pc, #416]	; (80050e0 <UART_SetConfig+0x2d4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d120      	bne.n	8004f86 <UART_SetConfig+0x17a>
 8004f44:	4b64      	ldr	r3, [pc, #400]	; (80050d8 <UART_SetConfig+0x2cc>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f4e:	2b30      	cmp	r3, #48	; 0x30
 8004f50:	d013      	beq.n	8004f7a <UART_SetConfig+0x16e>
 8004f52:	2b30      	cmp	r3, #48	; 0x30
 8004f54:	d814      	bhi.n	8004f80 <UART_SetConfig+0x174>
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d009      	beq.n	8004f6e <UART_SetConfig+0x162>
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d810      	bhi.n	8004f80 <UART_SetConfig+0x174>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <UART_SetConfig+0x15c>
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d006      	beq.n	8004f74 <UART_SetConfig+0x168>
 8004f66:	e00b      	b.n	8004f80 <UART_SetConfig+0x174>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e0f2      	b.n	8005154 <UART_SetConfig+0x348>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	77fb      	strb	r3, [r7, #31]
 8004f72:	e0ef      	b.n	8005154 <UART_SetConfig+0x348>
 8004f74:	2304      	movs	r3, #4
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e0ec      	b.n	8005154 <UART_SetConfig+0x348>
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e0e9      	b.n	8005154 <UART_SetConfig+0x348>
 8004f80:	2310      	movs	r3, #16
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e0e6      	b.n	8005154 <UART_SetConfig+0x348>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a56      	ldr	r2, [pc, #344]	; (80050e4 <UART_SetConfig+0x2d8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d120      	bne.n	8004fd2 <UART_SetConfig+0x1c6>
 8004f90:	4b51      	ldr	r3, [pc, #324]	; (80050d8 <UART_SetConfig+0x2cc>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f9c:	d013      	beq.n	8004fc6 <UART_SetConfig+0x1ba>
 8004f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004fa0:	d814      	bhi.n	8004fcc <UART_SetConfig+0x1c0>
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d009      	beq.n	8004fba <UART_SetConfig+0x1ae>
 8004fa6:	2b80      	cmp	r3, #128	; 0x80
 8004fa8:	d810      	bhi.n	8004fcc <UART_SetConfig+0x1c0>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <UART_SetConfig+0x1a8>
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d006      	beq.n	8004fc0 <UART_SetConfig+0x1b4>
 8004fb2:	e00b      	b.n	8004fcc <UART_SetConfig+0x1c0>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e0cc      	b.n	8005154 <UART_SetConfig+0x348>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e0c9      	b.n	8005154 <UART_SetConfig+0x348>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e0c6      	b.n	8005154 <UART_SetConfig+0x348>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e0c3      	b.n	8005154 <UART_SetConfig+0x348>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e0c0      	b.n	8005154 <UART_SetConfig+0x348>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a44      	ldr	r2, [pc, #272]	; (80050e8 <UART_SetConfig+0x2dc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d125      	bne.n	8005028 <UART_SetConfig+0x21c>
 8004fdc:	4b3e      	ldr	r3, [pc, #248]	; (80050d8 <UART_SetConfig+0x2cc>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fea:	d017      	beq.n	800501c <UART_SetConfig+0x210>
 8004fec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff0:	d817      	bhi.n	8005022 <UART_SetConfig+0x216>
 8004ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff6:	d00b      	beq.n	8005010 <UART_SetConfig+0x204>
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffc:	d811      	bhi.n	8005022 <UART_SetConfig+0x216>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <UART_SetConfig+0x1fe>
 8005002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005006:	d006      	beq.n	8005016 <UART_SetConfig+0x20a>
 8005008:	e00b      	b.n	8005022 <UART_SetConfig+0x216>
 800500a:	2300      	movs	r3, #0
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e0a1      	b.n	8005154 <UART_SetConfig+0x348>
 8005010:	2302      	movs	r3, #2
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e09e      	b.n	8005154 <UART_SetConfig+0x348>
 8005016:	2304      	movs	r3, #4
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e09b      	b.n	8005154 <UART_SetConfig+0x348>
 800501c:	2308      	movs	r3, #8
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e098      	b.n	8005154 <UART_SetConfig+0x348>
 8005022:	2310      	movs	r3, #16
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e095      	b.n	8005154 <UART_SetConfig+0x348>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2f      	ldr	r2, [pc, #188]	; (80050ec <UART_SetConfig+0x2e0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d125      	bne.n	800507e <UART_SetConfig+0x272>
 8005032:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <UART_SetConfig+0x2cc>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800503c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005040:	d017      	beq.n	8005072 <UART_SetConfig+0x266>
 8005042:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005046:	d817      	bhi.n	8005078 <UART_SetConfig+0x26c>
 8005048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504c:	d00b      	beq.n	8005066 <UART_SetConfig+0x25a>
 800504e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005052:	d811      	bhi.n	8005078 <UART_SetConfig+0x26c>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <UART_SetConfig+0x254>
 8005058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505c:	d006      	beq.n	800506c <UART_SetConfig+0x260>
 800505e:	e00b      	b.n	8005078 <UART_SetConfig+0x26c>
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e076      	b.n	8005154 <UART_SetConfig+0x348>
 8005066:	2302      	movs	r3, #2
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e073      	b.n	8005154 <UART_SetConfig+0x348>
 800506c:	2304      	movs	r3, #4
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e070      	b.n	8005154 <UART_SetConfig+0x348>
 8005072:	2308      	movs	r3, #8
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e06d      	b.n	8005154 <UART_SetConfig+0x348>
 8005078:	2310      	movs	r3, #16
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e06a      	b.n	8005154 <UART_SetConfig+0x348>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <UART_SetConfig+0x2e4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d138      	bne.n	80050fa <UART_SetConfig+0x2ee>
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <UART_SetConfig+0x2cc>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005092:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005096:	d017      	beq.n	80050c8 <UART_SetConfig+0x2bc>
 8005098:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800509c:	d82a      	bhi.n	80050f4 <UART_SetConfig+0x2e8>
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a2:	d00b      	beq.n	80050bc <UART_SetConfig+0x2b0>
 80050a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a8:	d824      	bhi.n	80050f4 <UART_SetConfig+0x2e8>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <UART_SetConfig+0x2aa>
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b2:	d006      	beq.n	80050c2 <UART_SetConfig+0x2b6>
 80050b4:	e01e      	b.n	80050f4 <UART_SetConfig+0x2e8>
 80050b6:	2300      	movs	r3, #0
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e04b      	b.n	8005154 <UART_SetConfig+0x348>
 80050bc:	2302      	movs	r3, #2
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e048      	b.n	8005154 <UART_SetConfig+0x348>
 80050c2:	2304      	movs	r3, #4
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e045      	b.n	8005154 <UART_SetConfig+0x348>
 80050c8:	2308      	movs	r3, #8
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e042      	b.n	8005154 <UART_SetConfig+0x348>
 80050ce:	bf00      	nop
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	40011000 	.word	0x40011000
 80050d8:	40023800 	.word	0x40023800
 80050dc:	40004400 	.word	0x40004400
 80050e0:	40004800 	.word	0x40004800
 80050e4:	40004c00 	.word	0x40004c00
 80050e8:	40005000 	.word	0x40005000
 80050ec:	40011400 	.word	0x40011400
 80050f0:	40007800 	.word	0x40007800
 80050f4:	2310      	movs	r3, #16
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e02c      	b.n	8005154 <UART_SetConfig+0x348>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a72      	ldr	r2, [pc, #456]	; (80052c8 <UART_SetConfig+0x4bc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d125      	bne.n	8005150 <UART_SetConfig+0x344>
 8005104:	4b71      	ldr	r3, [pc, #452]	; (80052cc <UART_SetConfig+0x4c0>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800510e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005112:	d017      	beq.n	8005144 <UART_SetConfig+0x338>
 8005114:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005118:	d817      	bhi.n	800514a <UART_SetConfig+0x33e>
 800511a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511e:	d00b      	beq.n	8005138 <UART_SetConfig+0x32c>
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005124:	d811      	bhi.n	800514a <UART_SetConfig+0x33e>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <UART_SetConfig+0x326>
 800512a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512e:	d006      	beq.n	800513e <UART_SetConfig+0x332>
 8005130:	e00b      	b.n	800514a <UART_SetConfig+0x33e>
 8005132:	2300      	movs	r3, #0
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e00d      	b.n	8005154 <UART_SetConfig+0x348>
 8005138:	2302      	movs	r3, #2
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e00a      	b.n	8005154 <UART_SetConfig+0x348>
 800513e:	2304      	movs	r3, #4
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e007      	b.n	8005154 <UART_SetConfig+0x348>
 8005144:	2308      	movs	r3, #8
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e004      	b.n	8005154 <UART_SetConfig+0x348>
 800514a:	2310      	movs	r3, #16
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	e001      	b.n	8005154 <UART_SetConfig+0x348>
 8005150:	2310      	movs	r3, #16
 8005152:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800515c:	d15b      	bne.n	8005216 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800515e:	7ffb      	ldrb	r3, [r7, #31]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d828      	bhi.n	80051b6 <UART_SetConfig+0x3aa>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x360>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	08005191 	.word	0x08005191
 8005170:	08005199 	.word	0x08005199
 8005174:	080051a1 	.word	0x080051a1
 8005178:	080051b7 	.word	0x080051b7
 800517c:	080051a7 	.word	0x080051a7
 8005180:	080051b7 	.word	0x080051b7
 8005184:	080051b7 	.word	0x080051b7
 8005188:	080051b7 	.word	0x080051b7
 800518c:	080051af 	.word	0x080051af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005190:	f7ff f9d6 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8005194:	61b8      	str	r0, [r7, #24]
        break;
 8005196:	e013      	b.n	80051c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005198:	f7ff f9e6 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 800519c:	61b8      	str	r0, [r7, #24]
        break;
 800519e:	e00f      	b.n	80051c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051a0:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <UART_SetConfig+0x4c4>)
 80051a2:	61bb      	str	r3, [r7, #24]
        break;
 80051a4:	e00c      	b.n	80051c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051a6:	f7ff f8b9 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80051aa:	61b8      	str	r0, [r7, #24]
        break;
 80051ac:	e008      	b.n	80051c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b2:	61bb      	str	r3, [r7, #24]
        break;
 80051b4:	e004      	b.n	80051c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	77bb      	strb	r3, [r7, #30]
        break;
 80051be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d074      	beq.n	80052b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	005a      	lsls	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d916      	bls.n	8005210 <UART_SetConfig+0x404>
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e8:	d212      	bcs.n	8005210 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f023 030f 	bic.w	r3, r3, #15
 80051f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	085b      	lsrs	r3, r3, #1
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	b29a      	uxth	r2, r3
 8005200:	89fb      	ldrh	r3, [r7, #14]
 8005202:	4313      	orrs	r3, r2
 8005204:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	89fa      	ldrh	r2, [r7, #14]
 800520c:	60da      	str	r2, [r3, #12]
 800520e:	e04f      	b.n	80052b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	77bb      	strb	r3, [r7, #30]
 8005214:	e04c      	b.n	80052b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d828      	bhi.n	800526e <UART_SetConfig+0x462>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0x418>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005249 	.word	0x08005249
 8005228:	08005251 	.word	0x08005251
 800522c:	08005259 	.word	0x08005259
 8005230:	0800526f 	.word	0x0800526f
 8005234:	0800525f 	.word	0x0800525f
 8005238:	0800526f 	.word	0x0800526f
 800523c:	0800526f 	.word	0x0800526f
 8005240:	0800526f 	.word	0x0800526f
 8005244:	08005267 	.word	0x08005267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005248:	f7ff f97a 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 800524c:	61b8      	str	r0, [r7, #24]
        break;
 800524e:	e013      	b.n	8005278 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005250:	f7ff f98a 	bl	8004568 <HAL_RCC_GetPCLK2Freq>
 8005254:	61b8      	str	r0, [r7, #24]
        break;
 8005256:	e00f      	b.n	8005278 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <UART_SetConfig+0x4c4>)
 800525a:	61bb      	str	r3, [r7, #24]
        break;
 800525c:	e00c      	b.n	8005278 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800525e:	f7ff f85d 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8005262:	61b8      	str	r0, [r7, #24]
        break;
 8005264:	e008      	b.n	8005278 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800526a:	61bb      	str	r3, [r7, #24]
        break;
 800526c:	e004      	b.n	8005278 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	77bb      	strb	r3, [r7, #30]
        break;
 8005276:	bf00      	nop
    }

    if (pclk != 0U)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d018      	beq.n	80052b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	085a      	lsrs	r2, r3, #1
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	441a      	add	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b0f      	cmp	r3, #15
 8005296:	d909      	bls.n	80052ac <UART_SetConfig+0x4a0>
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529e:	d205      	bcs.n	80052ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e001      	b.n	80052b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40007c00 	.word	0x40007c00
 80052cc:	40023800 	.word	0x40023800
 80052d0:	00f42400 	.word	0x00f42400

080052d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01a      	beq.n	80053ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d2:	d10a      	bne.n	80053ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af02      	add	r7, sp, #8
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005428:	f7fc fbde 	bl	8001be8 <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b08      	cmp	r3, #8
 800543a:	d10e      	bne.n	800545a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800543c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f81b 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e011      	b.n	800547e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b09c      	sub	sp, #112	; 0x70
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005496:	e0a7      	b.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	f000 80a3 	beq.w	80055e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fc fba1 	bl	8001be8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80054b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d13f      	bne.n	8005538 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054cc:	667b      	str	r3, [r7, #100]	; 0x64
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e6      	bne.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	663b      	str	r3, [r7, #96]	; 0x60
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3308      	adds	r3, #8
 8005508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800550a:	64ba      	str	r2, [r7, #72]	; 0x48
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e5      	bne.n	80054ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e068      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d050      	beq.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005554:	d148      	bne.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005574:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
 8005580:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e6      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3308      	adds	r3, #8
 8005598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	613b      	str	r3, [r7, #16]
   return(result);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3308      	adds	r3, #8
 80055b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055b2:	623a      	str	r2, [r7, #32]
 80055b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	69f9      	ldr	r1, [r7, #28]
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e5      	bne.n	8005592 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e010      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	429a      	cmp	r2, r3
 8005604:	f43f af48 	beq.w	8005498 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3770      	adds	r7, #112	; 0x70
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005614:	b084      	sub	sp, #16
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	f107 001c 	add.w	r0, r7, #28
 8005622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2b01      	cmp	r3, #1
 800562a:	d120      	bne.n	800566e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <USB_CoreInit+0xac>)
 800563e:	4013      	ands	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d105      	bne.n	8005662 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fa96 	bl	8005b94 <USB_CoreReset>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	e010      	b.n	8005690 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fa8a 	bl	8005b94 <USB_CoreReset>
 8005680:	4603      	mov	r3, r0
 8005682:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2b01      	cmp	r3, #1
 8005694:	d10b      	bne.n	80056ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f043 0206 	orr.w	r2, r3, #6
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f043 0220 	orr.w	r2, r3, #32
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ba:	b004      	add	sp, #16
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	ffbdffbf 	.word	0xffbdffbf

080056c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f023 0201 	bic.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	460b      	mov	r3, r1
 80056f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d115      	bne.n	8005734 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005714:	2001      	movs	r0, #1
 8005716:	f7fc fa73 	bl	8001c00 <HAL_Delay>
      ms++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fa29 	bl	8005b78 <USB_GetMode>
 8005726:	4603      	mov	r3, r0
 8005728:	2b01      	cmp	r3, #1
 800572a:	d01e      	beq.n	800576a <USB_SetCurrentMode+0x84>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b31      	cmp	r3, #49	; 0x31
 8005730:	d9f0      	bls.n	8005714 <USB_SetCurrentMode+0x2e>
 8005732:	e01a      	b.n	800576a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d115      	bne.n	8005766 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005746:	2001      	movs	r0, #1
 8005748:	f7fc fa5a 	bl	8001c00 <HAL_Delay>
      ms++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa10 	bl	8005b78 <USB_GetMode>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <USB_SetCurrentMode+0x84>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b31      	cmp	r3, #49	; 0x31
 8005762:	d9f0      	bls.n	8005746 <USB_SetCurrentMode+0x60>
 8005764:	e001      	b.n	800576a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e005      	b.n	8005776 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b32      	cmp	r3, #50	; 0x32
 800576e:	d101      	bne.n	8005774 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005780:	b084      	sub	sp, #16
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800578e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	e009      	b.n	80057b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3340      	adds	r3, #64	; 0x40
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3301      	adds	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b0e      	cmp	r3, #14
 80057b8:	d9f2      	bls.n	80057a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11c      	bne.n	80057fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ce:	f043 0302 	orr.w	r3, r3, #2
 80057d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e005      	b.n	8005806 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	4619      	mov	r1, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005820:	461a      	mov	r2, r3
 8005822:	680b      	ldr	r3, [r1, #0]
 8005824:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b01      	cmp	r3, #1
 800582a:	d10c      	bne.n	8005846 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005832:	2100      	movs	r1, #0
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f965 	bl	8005b04 <USB_SetDevSpeed>
 800583a:	e008      	b.n	800584e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800583c:	2101      	movs	r1, #1
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f960 	bl	8005b04 <USB_SetDevSpeed>
 8005844:	e003      	b.n	800584e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005846:	2103      	movs	r1, #3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f95b 	bl	8005b04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800584e:	2110      	movs	r1, #16
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f8f3 	bl	8005a3c <USB_FlushTxFifo>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f91f 	bl	8005aa4 <USB_FlushRxFifo>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005876:	461a      	mov	r2, r3
 8005878:	2300      	movs	r3, #0
 800587a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	461a      	mov	r2, r3
 8005884:	2300      	movs	r3, #0
 8005886:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588e:	461a      	mov	r2, r3
 8005890:	2300      	movs	r3, #0
 8005892:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	e043      	b.n	8005922 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b0:	d118      	bne.n	80058e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	461a      	mov	r2, r3
 80058c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e013      	b.n	80058f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	461a      	mov	r2, r3
 80058dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e008      	b.n	80058f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	461a      	mov	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	461a      	mov	r2, r3
 8005916:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800591a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	3301      	adds	r3, #1
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	429a      	cmp	r2, r3
 8005928:	d3b7      	bcc.n	800589a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e043      	b.n	80059b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005946:	d118      	bne.n	800597a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	461a      	mov	r2, r3
 800595c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	e013      	b.n	800598c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	461a      	mov	r2, r3
 8005972:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	e008      	b.n	800598c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	461a      	mov	r2, r3
 8005988:	2300      	movs	r3, #0
 800598a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	461a      	mov	r2, r3
 800599a:	2300      	movs	r3, #0
 800599c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	461a      	mov	r2, r3
 80059ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3301      	adds	r3, #1
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d3b7      	bcc.n	8005930 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f043 0210 	orr.w	r2, r3, #16
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <USB_DevInit+0x2b4>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f043 0208 	orr.w	r2, r3, #8
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d105      	bne.n	8005a24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699a      	ldr	r2, [r3, #24]
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <USB_DevInit+0x2b8>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a30:	b004      	add	sp, #16
 8005a32:	4770      	bx	lr
 8005a34:	803c3800 	.word	0x803c3800
 8005a38:	40000004 	.word	0x40000004

08005a3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a13      	ldr	r2, [pc, #76]	; (8005aa0 <USB_FlushTxFifo+0x64>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e01b      	b.n	8005a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	daf2      	bge.n	8005a4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	019b      	lsls	r3, r3, #6
 8005a6c:	f043 0220 	orr.w	r2, r3, #32
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a08      	ldr	r2, [pc, #32]	; (8005aa0 <USB_FlushTxFifo+0x64>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e006      	b.n	8005a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	d0f0      	beq.n	8005a74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	00030d40 	.word	0x00030d40

08005aa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4a11      	ldr	r2, [pc, #68]	; (8005b00 <USB_FlushRxFifo+0x5c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e018      	b.n	8005af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	daf2      	bge.n	8005ab0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <USB_FlushRxFifo+0x5c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e006      	b.n	8005af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d0f0      	beq.n	8005ad4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	00030d40 	.word	0x00030d40

08005b04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b50:	f023 0303 	bic.w	r3, r3, #3
 8005b54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0301 	and.w	r3, r3, #1
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <USB_CoreReset+0x64>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e01b      	b.n	8005bea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	daf2      	bge.n	8005ba0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f043 0201 	orr.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <USB_CoreReset+0x64>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d901      	bls.n	8005bdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e006      	b.n	8005bea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d0f0      	beq.n	8005bca <USB_CoreReset+0x36>

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	00030d40 	.word	0x00030d40

08005bfc <__errno>:
 8005bfc:	4b01      	ldr	r3, [pc, #4]	; (8005c04 <__errno+0x8>)
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000024 	.word	0x20000024

08005c08 <__libc_init_array>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	4d0d      	ldr	r5, [pc, #52]	; (8005c40 <__libc_init_array+0x38>)
 8005c0c:	4c0d      	ldr	r4, [pc, #52]	; (8005c44 <__libc_init_array+0x3c>)
 8005c0e:	1b64      	subs	r4, r4, r5
 8005c10:	10a4      	asrs	r4, r4, #2
 8005c12:	2600      	movs	r6, #0
 8005c14:	42a6      	cmp	r6, r4
 8005c16:	d109      	bne.n	8005c2c <__libc_init_array+0x24>
 8005c18:	4d0b      	ldr	r5, [pc, #44]	; (8005c48 <__libc_init_array+0x40>)
 8005c1a:	4c0c      	ldr	r4, [pc, #48]	; (8005c4c <__libc_init_array+0x44>)
 8005c1c:	f000 fc8e 	bl	800653c <_init>
 8005c20:	1b64      	subs	r4, r4, r5
 8005c22:	10a4      	asrs	r4, r4, #2
 8005c24:	2600      	movs	r6, #0
 8005c26:	42a6      	cmp	r6, r4
 8005c28:	d105      	bne.n	8005c36 <__libc_init_array+0x2e>
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c30:	4798      	blx	r3
 8005c32:	3601      	adds	r6, #1
 8005c34:	e7ee      	b.n	8005c14 <__libc_init_array+0xc>
 8005c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3a:	4798      	blx	r3
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	e7f2      	b.n	8005c26 <__libc_init_array+0x1e>
 8005c40:	08008380 	.word	0x08008380
 8005c44:	08008380 	.word	0x08008380
 8005c48:	08008380 	.word	0x08008380
 8005c4c:	08008384 	.word	0x08008384

08005c50 <memcpy>:
 8005c50:	440a      	add	r2, r1
 8005c52:	4291      	cmp	r1, r2
 8005c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c58:	d100      	bne.n	8005c5c <memcpy+0xc>
 8005c5a:	4770      	bx	lr
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c66:	4291      	cmp	r1, r2
 8005c68:	d1f9      	bne.n	8005c5e <memcpy+0xe>
 8005c6a:	bd10      	pop	{r4, pc}

08005c6c <memset>:
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d100      	bne.n	8005c76 <memset+0xa>
 8005c74:	4770      	bx	lr
 8005c76:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7a:	e7f9      	b.n	8005c70 <memset+0x4>

08005c7c <siprintf>:
 8005c7c:	b40e      	push	{r1, r2, r3}
 8005c7e:	b500      	push	{lr}
 8005c80:	b09c      	sub	sp, #112	; 0x70
 8005c82:	ab1d      	add	r3, sp, #116	; 0x74
 8005c84:	9002      	str	r0, [sp, #8]
 8005c86:	9006      	str	r0, [sp, #24]
 8005c88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c8c:	4809      	ldr	r0, [pc, #36]	; (8005cb4 <siprintf+0x38>)
 8005c8e:	9107      	str	r1, [sp, #28]
 8005c90:	9104      	str	r1, [sp, #16]
 8005c92:	4909      	ldr	r1, [pc, #36]	; (8005cb8 <siprintf+0x3c>)
 8005c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c98:	9105      	str	r1, [sp, #20]
 8005c9a:	6800      	ldr	r0, [r0, #0]
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	a902      	add	r1, sp, #8
 8005ca0:	f000 f868 	bl	8005d74 <_svfiprintf_r>
 8005ca4:	9b02      	ldr	r3, [sp, #8]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	b01c      	add	sp, #112	; 0x70
 8005cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cb0:	b003      	add	sp, #12
 8005cb2:	4770      	bx	lr
 8005cb4:	20000024 	.word	0x20000024
 8005cb8:	ffff0208 	.word	0xffff0208

08005cbc <__ssputs_r>:
 8005cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc0:	688e      	ldr	r6, [r1, #8]
 8005cc2:	429e      	cmp	r6, r3
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	4690      	mov	r8, r2
 8005cca:	461f      	mov	r7, r3
 8005ccc:	d838      	bhi.n	8005d40 <__ssputs_r+0x84>
 8005cce:	898a      	ldrh	r2, [r1, #12]
 8005cd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cd4:	d032      	beq.n	8005d3c <__ssputs_r+0x80>
 8005cd6:	6825      	ldr	r5, [r4, #0]
 8005cd8:	6909      	ldr	r1, [r1, #16]
 8005cda:	eba5 0901 	sub.w	r9, r5, r1
 8005cde:	6965      	ldr	r5, [r4, #20]
 8005ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ce8:	3301      	adds	r3, #1
 8005cea:	444b      	add	r3, r9
 8005cec:	106d      	asrs	r5, r5, #1
 8005cee:	429d      	cmp	r5, r3
 8005cf0:	bf38      	it	cc
 8005cf2:	461d      	movcc	r5, r3
 8005cf4:	0553      	lsls	r3, r2, #21
 8005cf6:	d531      	bpl.n	8005d5c <__ssputs_r+0xa0>
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	f000 fb55 	bl	80063a8 <_malloc_r>
 8005cfe:	4606      	mov	r6, r0
 8005d00:	b950      	cbnz	r0, 8005d18 <__ssputs_r+0x5c>
 8005d02:	230c      	movs	r3, #12
 8005d04:	f8ca 3000 	str.w	r3, [sl]
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d0e:	81a3      	strh	r3, [r4, #12]
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d18:	6921      	ldr	r1, [r4, #16]
 8005d1a:	464a      	mov	r2, r9
 8005d1c:	f7ff ff98 	bl	8005c50 <memcpy>
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	6126      	str	r6, [r4, #16]
 8005d2e:	6165      	str	r5, [r4, #20]
 8005d30:	444e      	add	r6, r9
 8005d32:	eba5 0509 	sub.w	r5, r5, r9
 8005d36:	6026      	str	r6, [r4, #0]
 8005d38:	60a5      	str	r5, [r4, #8]
 8005d3a:	463e      	mov	r6, r7
 8005d3c:	42be      	cmp	r6, r7
 8005d3e:	d900      	bls.n	8005d42 <__ssputs_r+0x86>
 8005d40:	463e      	mov	r6, r7
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	4632      	mov	r2, r6
 8005d46:	4641      	mov	r1, r8
 8005d48:	f000 faa8 	bl	800629c <memmove>
 8005d4c:	68a3      	ldr	r3, [r4, #8]
 8005d4e:	1b9b      	subs	r3, r3, r6
 8005d50:	60a3      	str	r3, [r4, #8]
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	4433      	add	r3, r6
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e7db      	b.n	8005d14 <__ssputs_r+0x58>
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	f000 fb97 	bl	8006490 <_realloc_r>
 8005d62:	4606      	mov	r6, r0
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d1e1      	bne.n	8005d2c <__ssputs_r+0x70>
 8005d68:	6921      	ldr	r1, [r4, #16]
 8005d6a:	4650      	mov	r0, sl
 8005d6c:	f000 fab0 	bl	80062d0 <_free_r>
 8005d70:	e7c7      	b.n	8005d02 <__ssputs_r+0x46>
	...

08005d74 <_svfiprintf_r>:
 8005d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	4698      	mov	r8, r3
 8005d7a:	898b      	ldrh	r3, [r1, #12]
 8005d7c:	061b      	lsls	r3, r3, #24
 8005d7e:	b09d      	sub	sp, #116	; 0x74
 8005d80:	4607      	mov	r7, r0
 8005d82:	460d      	mov	r5, r1
 8005d84:	4614      	mov	r4, r2
 8005d86:	d50e      	bpl.n	8005da6 <_svfiprintf_r+0x32>
 8005d88:	690b      	ldr	r3, [r1, #16]
 8005d8a:	b963      	cbnz	r3, 8005da6 <_svfiprintf_r+0x32>
 8005d8c:	2140      	movs	r1, #64	; 0x40
 8005d8e:	f000 fb0b 	bl	80063a8 <_malloc_r>
 8005d92:	6028      	str	r0, [r5, #0]
 8005d94:	6128      	str	r0, [r5, #16]
 8005d96:	b920      	cbnz	r0, 8005da2 <_svfiprintf_r+0x2e>
 8005d98:	230c      	movs	r3, #12
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	e0d1      	b.n	8005f46 <_svfiprintf_r+0x1d2>
 8005da2:	2340      	movs	r3, #64	; 0x40
 8005da4:	616b      	str	r3, [r5, #20]
 8005da6:	2300      	movs	r3, #0
 8005da8:	9309      	str	r3, [sp, #36]	; 0x24
 8005daa:	2320      	movs	r3, #32
 8005dac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005db4:	2330      	movs	r3, #48	; 0x30
 8005db6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f60 <_svfiprintf_r+0x1ec>
 8005dba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dbe:	f04f 0901 	mov.w	r9, #1
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	469a      	mov	sl, r3
 8005dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dca:	b10a      	cbz	r2, 8005dd0 <_svfiprintf_r+0x5c>
 8005dcc:	2a25      	cmp	r2, #37	; 0x25
 8005dce:	d1f9      	bne.n	8005dc4 <_svfiprintf_r+0x50>
 8005dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8005dd4:	d00b      	beq.n	8005dee <_svfiprintf_r+0x7a>
 8005dd6:	465b      	mov	r3, fp
 8005dd8:	4622      	mov	r2, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ff6d 	bl	8005cbc <__ssputs_r>
 8005de2:	3001      	adds	r0, #1
 8005de4:	f000 80aa 	beq.w	8005f3c <_svfiprintf_r+0x1c8>
 8005de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dea:	445a      	add	r2, fp
 8005dec:	9209      	str	r2, [sp, #36]	; 0x24
 8005dee:	f89a 3000 	ldrb.w	r3, [sl]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80a2 	beq.w	8005f3c <_svfiprintf_r+0x1c8>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e02:	f10a 0a01 	add.w	sl, sl, #1
 8005e06:	9304      	str	r3, [sp, #16]
 8005e08:	9307      	str	r3, [sp, #28]
 8005e0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e0e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e10:	4654      	mov	r4, sl
 8005e12:	2205      	movs	r2, #5
 8005e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e18:	4851      	ldr	r0, [pc, #324]	; (8005f60 <_svfiprintf_r+0x1ec>)
 8005e1a:	f7fa f9f9 	bl	8000210 <memchr>
 8005e1e:	9a04      	ldr	r2, [sp, #16]
 8005e20:	b9d8      	cbnz	r0, 8005e5a <_svfiprintf_r+0xe6>
 8005e22:	06d0      	lsls	r0, r2, #27
 8005e24:	bf44      	itt	mi
 8005e26:	2320      	movmi	r3, #32
 8005e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e2c:	0711      	lsls	r1, r2, #28
 8005e2e:	bf44      	itt	mi
 8005e30:	232b      	movmi	r3, #43	; 0x2b
 8005e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e36:	f89a 3000 	ldrb.w	r3, [sl]
 8005e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e3c:	d015      	beq.n	8005e6a <_svfiprintf_r+0xf6>
 8005e3e:	9a07      	ldr	r2, [sp, #28]
 8005e40:	4654      	mov	r4, sl
 8005e42:	2000      	movs	r0, #0
 8005e44:	f04f 0c0a 	mov.w	ip, #10
 8005e48:	4621      	mov	r1, r4
 8005e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e4e:	3b30      	subs	r3, #48	; 0x30
 8005e50:	2b09      	cmp	r3, #9
 8005e52:	d94e      	bls.n	8005ef2 <_svfiprintf_r+0x17e>
 8005e54:	b1b0      	cbz	r0, 8005e84 <_svfiprintf_r+0x110>
 8005e56:	9207      	str	r2, [sp, #28]
 8005e58:	e014      	b.n	8005e84 <_svfiprintf_r+0x110>
 8005e5a:	eba0 0308 	sub.w	r3, r0, r8
 8005e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	46a2      	mov	sl, r4
 8005e68:	e7d2      	b.n	8005e10 <_svfiprintf_r+0x9c>
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	1d19      	adds	r1, r3, #4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	9103      	str	r1, [sp, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bfbb      	ittet	lt
 8005e76:	425b      	neglt	r3, r3
 8005e78:	f042 0202 	orrlt.w	r2, r2, #2
 8005e7c:	9307      	strge	r3, [sp, #28]
 8005e7e:	9307      	strlt	r3, [sp, #28]
 8005e80:	bfb8      	it	lt
 8005e82:	9204      	strlt	r2, [sp, #16]
 8005e84:	7823      	ldrb	r3, [r4, #0]
 8005e86:	2b2e      	cmp	r3, #46	; 0x2e
 8005e88:	d10c      	bne.n	8005ea4 <_svfiprintf_r+0x130>
 8005e8a:	7863      	ldrb	r3, [r4, #1]
 8005e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8e:	d135      	bne.n	8005efc <_svfiprintf_r+0x188>
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	1d1a      	adds	r2, r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	9203      	str	r2, [sp, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bfb8      	it	lt
 8005e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ea0:	3402      	adds	r4, #2
 8005ea2:	9305      	str	r3, [sp, #20]
 8005ea4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f70 <_svfiprintf_r+0x1fc>
 8005ea8:	7821      	ldrb	r1, [r4, #0]
 8005eaa:	2203      	movs	r2, #3
 8005eac:	4650      	mov	r0, sl
 8005eae:	f7fa f9af 	bl	8000210 <memchr>
 8005eb2:	b140      	cbz	r0, 8005ec6 <_svfiprintf_r+0x152>
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	eba0 000a 	sub.w	r0, r0, sl
 8005eba:	fa03 f000 	lsl.w	r0, r3, r0
 8005ebe:	9b04      	ldr	r3, [sp, #16]
 8005ec0:	4303      	orrs	r3, r0
 8005ec2:	3401      	adds	r4, #1
 8005ec4:	9304      	str	r3, [sp, #16]
 8005ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eca:	4826      	ldr	r0, [pc, #152]	; (8005f64 <_svfiprintf_r+0x1f0>)
 8005ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ed0:	2206      	movs	r2, #6
 8005ed2:	f7fa f99d 	bl	8000210 <memchr>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d038      	beq.n	8005f4c <_svfiprintf_r+0x1d8>
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <_svfiprintf_r+0x1f4>)
 8005edc:	bb1b      	cbnz	r3, 8005f26 <_svfiprintf_r+0x1b2>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	f023 0307 	bic.w	r3, r3, #7
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eec:	4433      	add	r3, r6
 8005eee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef0:	e767      	b.n	8005dc2 <_svfiprintf_r+0x4e>
 8005ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	2001      	movs	r0, #1
 8005efa:	e7a5      	b.n	8005e48 <_svfiprintf_r+0xd4>
 8005efc:	2300      	movs	r3, #0
 8005efe:	3401      	adds	r4, #1
 8005f00:	9305      	str	r3, [sp, #20]
 8005f02:	4619      	mov	r1, r3
 8005f04:	f04f 0c0a 	mov.w	ip, #10
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f0e:	3a30      	subs	r2, #48	; 0x30
 8005f10:	2a09      	cmp	r2, #9
 8005f12:	d903      	bls.n	8005f1c <_svfiprintf_r+0x1a8>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0c5      	beq.n	8005ea4 <_svfiprintf_r+0x130>
 8005f18:	9105      	str	r1, [sp, #20]
 8005f1a:	e7c3      	b.n	8005ea4 <_svfiprintf_r+0x130>
 8005f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f20:	4604      	mov	r4, r0
 8005f22:	2301      	movs	r3, #1
 8005f24:	e7f0      	b.n	8005f08 <_svfiprintf_r+0x194>
 8005f26:	ab03      	add	r3, sp, #12
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	462a      	mov	r2, r5
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <_svfiprintf_r+0x1f8>)
 8005f2e:	a904      	add	r1, sp, #16
 8005f30:	4638      	mov	r0, r7
 8005f32:	f3af 8000 	nop.w
 8005f36:	1c42      	adds	r2, r0, #1
 8005f38:	4606      	mov	r6, r0
 8005f3a:	d1d6      	bne.n	8005eea <_svfiprintf_r+0x176>
 8005f3c:	89ab      	ldrh	r3, [r5, #12]
 8005f3e:	065b      	lsls	r3, r3, #25
 8005f40:	f53f af2c 	bmi.w	8005d9c <_svfiprintf_r+0x28>
 8005f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f46:	b01d      	add	sp, #116	; 0x74
 8005f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4c:	ab03      	add	r3, sp, #12
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <_svfiprintf_r+0x1f8>)
 8005f54:	a904      	add	r1, sp, #16
 8005f56:	4638      	mov	r0, r7
 8005f58:	f000 f87a 	bl	8006050 <_printf_i>
 8005f5c:	e7eb      	b.n	8005f36 <_svfiprintf_r+0x1c2>
 8005f5e:	bf00      	nop
 8005f60:	08008344 	.word	0x08008344
 8005f64:	0800834e 	.word	0x0800834e
 8005f68:	00000000 	.word	0x00000000
 8005f6c:	08005cbd 	.word	0x08005cbd
 8005f70:	0800834a 	.word	0x0800834a

08005f74 <_printf_common>:
 8005f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	4616      	mov	r6, r2
 8005f7a:	4699      	mov	r9, r3
 8005f7c:	688a      	ldr	r2, [r1, #8]
 8005f7e:	690b      	ldr	r3, [r1, #16]
 8005f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	bfb8      	it	lt
 8005f88:	4613      	movlt	r3, r2
 8005f8a:	6033      	str	r3, [r6, #0]
 8005f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f90:	4607      	mov	r7, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	b10a      	cbz	r2, 8005f9a <_printf_common+0x26>
 8005f96:	3301      	adds	r3, #1
 8005f98:	6033      	str	r3, [r6, #0]
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	0699      	lsls	r1, r3, #26
 8005f9e:	bf42      	ittt	mi
 8005fa0:	6833      	ldrmi	r3, [r6, #0]
 8005fa2:	3302      	addmi	r3, #2
 8005fa4:	6033      	strmi	r3, [r6, #0]
 8005fa6:	6825      	ldr	r5, [r4, #0]
 8005fa8:	f015 0506 	ands.w	r5, r5, #6
 8005fac:	d106      	bne.n	8005fbc <_printf_common+0x48>
 8005fae:	f104 0a19 	add.w	sl, r4, #25
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	6832      	ldr	r2, [r6, #0]
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	42ab      	cmp	r3, r5
 8005fba:	dc26      	bgt.n	800600a <_printf_common+0x96>
 8005fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fc0:	1e13      	subs	r3, r2, #0
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	bf18      	it	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	0692      	lsls	r2, r2, #26
 8005fca:	d42b      	bmi.n	8006024 <_printf_common+0xb0>
 8005fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d01e      	beq.n	8006018 <_printf_common+0xa4>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	68e5      	ldr	r5, [r4, #12]
 8005fde:	6832      	ldr	r2, [r6, #0]
 8005fe0:	f003 0306 	and.w	r3, r3, #6
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	bf08      	it	eq
 8005fe8:	1aad      	subeq	r5, r5, r2
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	6922      	ldr	r2, [r4, #16]
 8005fee:	bf0c      	ite	eq
 8005ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ff4:	2500      	movne	r5, #0
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	bfc4      	itt	gt
 8005ffa:	1a9b      	subgt	r3, r3, r2
 8005ffc:	18ed      	addgt	r5, r5, r3
 8005ffe:	2600      	movs	r6, #0
 8006000:	341a      	adds	r4, #26
 8006002:	42b5      	cmp	r5, r6
 8006004:	d11a      	bne.n	800603c <_printf_common+0xc8>
 8006006:	2000      	movs	r0, #0
 8006008:	e008      	b.n	800601c <_printf_common+0xa8>
 800600a:	2301      	movs	r3, #1
 800600c:	4652      	mov	r2, sl
 800600e:	4649      	mov	r1, r9
 8006010:	4638      	mov	r0, r7
 8006012:	47c0      	blx	r8
 8006014:	3001      	adds	r0, #1
 8006016:	d103      	bne.n	8006020 <_printf_common+0xac>
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	3501      	adds	r5, #1
 8006022:	e7c6      	b.n	8005fb2 <_printf_common+0x3e>
 8006024:	18e1      	adds	r1, r4, r3
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	2030      	movs	r0, #48	; 0x30
 800602a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800602e:	4422      	add	r2, r4
 8006030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006038:	3302      	adds	r3, #2
 800603a:	e7c7      	b.n	8005fcc <_printf_common+0x58>
 800603c:	2301      	movs	r3, #1
 800603e:	4622      	mov	r2, r4
 8006040:	4649      	mov	r1, r9
 8006042:	4638      	mov	r0, r7
 8006044:	47c0      	blx	r8
 8006046:	3001      	adds	r0, #1
 8006048:	d0e6      	beq.n	8006018 <_printf_common+0xa4>
 800604a:	3601      	adds	r6, #1
 800604c:	e7d9      	b.n	8006002 <_printf_common+0x8e>
	...

08006050 <_printf_i>:
 8006050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	7e0f      	ldrb	r7, [r1, #24]
 8006056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006058:	2f78      	cmp	r7, #120	; 0x78
 800605a:	4691      	mov	r9, r2
 800605c:	4680      	mov	r8, r0
 800605e:	460c      	mov	r4, r1
 8006060:	469a      	mov	sl, r3
 8006062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006066:	d807      	bhi.n	8006078 <_printf_i+0x28>
 8006068:	2f62      	cmp	r7, #98	; 0x62
 800606a:	d80a      	bhi.n	8006082 <_printf_i+0x32>
 800606c:	2f00      	cmp	r7, #0
 800606e:	f000 80d8 	beq.w	8006222 <_printf_i+0x1d2>
 8006072:	2f58      	cmp	r7, #88	; 0x58
 8006074:	f000 80a3 	beq.w	80061be <_printf_i+0x16e>
 8006078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800607c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006080:	e03a      	b.n	80060f8 <_printf_i+0xa8>
 8006082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006086:	2b15      	cmp	r3, #21
 8006088:	d8f6      	bhi.n	8006078 <_printf_i+0x28>
 800608a:	a101      	add	r1, pc, #4	; (adr r1, 8006090 <_printf_i+0x40>)
 800608c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006090:	080060e9 	.word	0x080060e9
 8006094:	080060fd 	.word	0x080060fd
 8006098:	08006079 	.word	0x08006079
 800609c:	08006079 	.word	0x08006079
 80060a0:	08006079 	.word	0x08006079
 80060a4:	08006079 	.word	0x08006079
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	08006079 	.word	0x08006079
 80060b0:	08006079 	.word	0x08006079
 80060b4:	08006079 	.word	0x08006079
 80060b8:	08006079 	.word	0x08006079
 80060bc:	08006209 	.word	0x08006209
 80060c0:	0800612d 	.word	0x0800612d
 80060c4:	080061eb 	.word	0x080061eb
 80060c8:	08006079 	.word	0x08006079
 80060cc:	08006079 	.word	0x08006079
 80060d0:	0800622b 	.word	0x0800622b
 80060d4:	08006079 	.word	0x08006079
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	08006079 	.word	0x08006079
 80060e0:	08006079 	.word	0x08006079
 80060e4:	080061f3 	.word	0x080061f3
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	1d1a      	adds	r2, r3, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	602a      	str	r2, [r5, #0]
 80060f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0a3      	b.n	8006244 <_printf_i+0x1f4>
 80060fc:	6820      	ldr	r0, [r4, #0]
 80060fe:	6829      	ldr	r1, [r5, #0]
 8006100:	0606      	lsls	r6, r0, #24
 8006102:	f101 0304 	add.w	r3, r1, #4
 8006106:	d50a      	bpl.n	800611e <_printf_i+0xce>
 8006108:	680e      	ldr	r6, [r1, #0]
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	2e00      	cmp	r6, #0
 800610e:	da03      	bge.n	8006118 <_printf_i+0xc8>
 8006110:	232d      	movs	r3, #45	; 0x2d
 8006112:	4276      	negs	r6, r6
 8006114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006118:	485e      	ldr	r0, [pc, #376]	; (8006294 <_printf_i+0x244>)
 800611a:	230a      	movs	r3, #10
 800611c:	e019      	b.n	8006152 <_printf_i+0x102>
 800611e:	680e      	ldr	r6, [r1, #0]
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006126:	bf18      	it	ne
 8006128:	b236      	sxthne	r6, r6
 800612a:	e7ef      	b.n	800610c <_printf_i+0xbc>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	6820      	ldr	r0, [r4, #0]
 8006130:	1d19      	adds	r1, r3, #4
 8006132:	6029      	str	r1, [r5, #0]
 8006134:	0601      	lsls	r1, r0, #24
 8006136:	d501      	bpl.n	800613c <_printf_i+0xec>
 8006138:	681e      	ldr	r6, [r3, #0]
 800613a:	e002      	b.n	8006142 <_printf_i+0xf2>
 800613c:	0646      	lsls	r6, r0, #25
 800613e:	d5fb      	bpl.n	8006138 <_printf_i+0xe8>
 8006140:	881e      	ldrh	r6, [r3, #0]
 8006142:	4854      	ldr	r0, [pc, #336]	; (8006294 <_printf_i+0x244>)
 8006144:	2f6f      	cmp	r7, #111	; 0x6f
 8006146:	bf0c      	ite	eq
 8006148:	2308      	moveq	r3, #8
 800614a:	230a      	movne	r3, #10
 800614c:	2100      	movs	r1, #0
 800614e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006152:	6865      	ldr	r5, [r4, #4]
 8006154:	60a5      	str	r5, [r4, #8]
 8006156:	2d00      	cmp	r5, #0
 8006158:	bfa2      	ittt	ge
 800615a:	6821      	ldrge	r1, [r4, #0]
 800615c:	f021 0104 	bicge.w	r1, r1, #4
 8006160:	6021      	strge	r1, [r4, #0]
 8006162:	b90e      	cbnz	r6, 8006168 <_printf_i+0x118>
 8006164:	2d00      	cmp	r5, #0
 8006166:	d04d      	beq.n	8006204 <_printf_i+0x1b4>
 8006168:	4615      	mov	r5, r2
 800616a:	fbb6 f1f3 	udiv	r1, r6, r3
 800616e:	fb03 6711 	mls	r7, r3, r1, r6
 8006172:	5dc7      	ldrb	r7, [r0, r7]
 8006174:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006178:	4637      	mov	r7, r6
 800617a:	42bb      	cmp	r3, r7
 800617c:	460e      	mov	r6, r1
 800617e:	d9f4      	bls.n	800616a <_printf_i+0x11a>
 8006180:	2b08      	cmp	r3, #8
 8006182:	d10b      	bne.n	800619c <_printf_i+0x14c>
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	07de      	lsls	r6, r3, #31
 8006188:	d508      	bpl.n	800619c <_printf_i+0x14c>
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	6861      	ldr	r1, [r4, #4]
 800618e:	4299      	cmp	r1, r3
 8006190:	bfde      	ittt	le
 8006192:	2330      	movle	r3, #48	; 0x30
 8006194:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006198:	f105 35ff 	addle.w	r5, r5, #4294967295
 800619c:	1b52      	subs	r2, r2, r5
 800619e:	6122      	str	r2, [r4, #16]
 80061a0:	f8cd a000 	str.w	sl, [sp]
 80061a4:	464b      	mov	r3, r9
 80061a6:	aa03      	add	r2, sp, #12
 80061a8:	4621      	mov	r1, r4
 80061aa:	4640      	mov	r0, r8
 80061ac:	f7ff fee2 	bl	8005f74 <_printf_common>
 80061b0:	3001      	adds	r0, #1
 80061b2:	d14c      	bne.n	800624e <_printf_i+0x1fe>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	b004      	add	sp, #16
 80061ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061be:	4835      	ldr	r0, [pc, #212]	; (8006294 <_printf_i+0x244>)
 80061c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061c4:	6829      	ldr	r1, [r5, #0]
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80061cc:	6029      	str	r1, [r5, #0]
 80061ce:	061d      	lsls	r5, r3, #24
 80061d0:	d514      	bpl.n	80061fc <_printf_i+0x1ac>
 80061d2:	07df      	lsls	r7, r3, #31
 80061d4:	bf44      	itt	mi
 80061d6:	f043 0320 	orrmi.w	r3, r3, #32
 80061da:	6023      	strmi	r3, [r4, #0]
 80061dc:	b91e      	cbnz	r6, 80061e6 <_printf_i+0x196>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	f023 0320 	bic.w	r3, r3, #32
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	2310      	movs	r3, #16
 80061e8:	e7b0      	b.n	800614c <_printf_i+0xfc>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	f043 0320 	orr.w	r3, r3, #32
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	2378      	movs	r3, #120	; 0x78
 80061f4:	4828      	ldr	r0, [pc, #160]	; (8006298 <_printf_i+0x248>)
 80061f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061fa:	e7e3      	b.n	80061c4 <_printf_i+0x174>
 80061fc:	0659      	lsls	r1, r3, #25
 80061fe:	bf48      	it	mi
 8006200:	b2b6      	uxthmi	r6, r6
 8006202:	e7e6      	b.n	80061d2 <_printf_i+0x182>
 8006204:	4615      	mov	r5, r2
 8006206:	e7bb      	b.n	8006180 <_printf_i+0x130>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	6826      	ldr	r6, [r4, #0]
 800620c:	6961      	ldr	r1, [r4, #20]
 800620e:	1d18      	adds	r0, r3, #4
 8006210:	6028      	str	r0, [r5, #0]
 8006212:	0635      	lsls	r5, r6, #24
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	d501      	bpl.n	800621c <_printf_i+0x1cc>
 8006218:	6019      	str	r1, [r3, #0]
 800621a:	e002      	b.n	8006222 <_printf_i+0x1d2>
 800621c:	0670      	lsls	r0, r6, #25
 800621e:	d5fb      	bpl.n	8006218 <_printf_i+0x1c8>
 8006220:	8019      	strh	r1, [r3, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	4615      	mov	r5, r2
 8006228:	e7ba      	b.n	80061a0 <_printf_i+0x150>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	1d1a      	adds	r2, r3, #4
 800622e:	602a      	str	r2, [r5, #0]
 8006230:	681d      	ldr	r5, [r3, #0]
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	2100      	movs	r1, #0
 8006236:	4628      	mov	r0, r5
 8006238:	f7f9 ffea 	bl	8000210 <memchr>
 800623c:	b108      	cbz	r0, 8006242 <_printf_i+0x1f2>
 800623e:	1b40      	subs	r0, r0, r5
 8006240:	6060      	str	r0, [r4, #4]
 8006242:	6863      	ldr	r3, [r4, #4]
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	2300      	movs	r3, #0
 8006248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624c:	e7a8      	b.n	80061a0 <_printf_i+0x150>
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	462a      	mov	r2, r5
 8006252:	4649      	mov	r1, r9
 8006254:	4640      	mov	r0, r8
 8006256:	47d0      	blx	sl
 8006258:	3001      	adds	r0, #1
 800625a:	d0ab      	beq.n	80061b4 <_printf_i+0x164>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	079b      	lsls	r3, r3, #30
 8006260:	d413      	bmi.n	800628a <_printf_i+0x23a>
 8006262:	68e0      	ldr	r0, [r4, #12]
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	4298      	cmp	r0, r3
 8006268:	bfb8      	it	lt
 800626a:	4618      	movlt	r0, r3
 800626c:	e7a4      	b.n	80061b8 <_printf_i+0x168>
 800626e:	2301      	movs	r3, #1
 8006270:	4632      	mov	r2, r6
 8006272:	4649      	mov	r1, r9
 8006274:	4640      	mov	r0, r8
 8006276:	47d0      	blx	sl
 8006278:	3001      	adds	r0, #1
 800627a:	d09b      	beq.n	80061b4 <_printf_i+0x164>
 800627c:	3501      	adds	r5, #1
 800627e:	68e3      	ldr	r3, [r4, #12]
 8006280:	9903      	ldr	r1, [sp, #12]
 8006282:	1a5b      	subs	r3, r3, r1
 8006284:	42ab      	cmp	r3, r5
 8006286:	dcf2      	bgt.n	800626e <_printf_i+0x21e>
 8006288:	e7eb      	b.n	8006262 <_printf_i+0x212>
 800628a:	2500      	movs	r5, #0
 800628c:	f104 0619 	add.w	r6, r4, #25
 8006290:	e7f5      	b.n	800627e <_printf_i+0x22e>
 8006292:	bf00      	nop
 8006294:	08008355 	.word	0x08008355
 8006298:	08008366 	.word	0x08008366

0800629c <memmove>:
 800629c:	4288      	cmp	r0, r1
 800629e:	b510      	push	{r4, lr}
 80062a0:	eb01 0402 	add.w	r4, r1, r2
 80062a4:	d902      	bls.n	80062ac <memmove+0x10>
 80062a6:	4284      	cmp	r4, r0
 80062a8:	4623      	mov	r3, r4
 80062aa:	d807      	bhi.n	80062bc <memmove+0x20>
 80062ac:	1e43      	subs	r3, r0, #1
 80062ae:	42a1      	cmp	r1, r4
 80062b0:	d008      	beq.n	80062c4 <memmove+0x28>
 80062b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062ba:	e7f8      	b.n	80062ae <memmove+0x12>
 80062bc:	4402      	add	r2, r0
 80062be:	4601      	mov	r1, r0
 80062c0:	428a      	cmp	r2, r1
 80062c2:	d100      	bne.n	80062c6 <memmove+0x2a>
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062ce:	e7f7      	b.n	80062c0 <memmove+0x24>

080062d0 <_free_r>:
 80062d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062d2:	2900      	cmp	r1, #0
 80062d4:	d044      	beq.n	8006360 <_free_r+0x90>
 80062d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062da:	9001      	str	r0, [sp, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f1a1 0404 	sub.w	r4, r1, #4
 80062e2:	bfb8      	it	lt
 80062e4:	18e4      	addlt	r4, r4, r3
 80062e6:	f000 f913 	bl	8006510 <__malloc_lock>
 80062ea:	4a1e      	ldr	r2, [pc, #120]	; (8006364 <_free_r+0x94>)
 80062ec:	9801      	ldr	r0, [sp, #4]
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	b933      	cbnz	r3, 8006300 <_free_r+0x30>
 80062f2:	6063      	str	r3, [r4, #4]
 80062f4:	6014      	str	r4, [r2, #0]
 80062f6:	b003      	add	sp, #12
 80062f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062fc:	f000 b90e 	b.w	800651c <__malloc_unlock>
 8006300:	42a3      	cmp	r3, r4
 8006302:	d908      	bls.n	8006316 <_free_r+0x46>
 8006304:	6825      	ldr	r5, [r4, #0]
 8006306:	1961      	adds	r1, r4, r5
 8006308:	428b      	cmp	r3, r1
 800630a:	bf01      	itttt	eq
 800630c:	6819      	ldreq	r1, [r3, #0]
 800630e:	685b      	ldreq	r3, [r3, #4]
 8006310:	1949      	addeq	r1, r1, r5
 8006312:	6021      	streq	r1, [r4, #0]
 8006314:	e7ed      	b.n	80062f2 <_free_r+0x22>
 8006316:	461a      	mov	r2, r3
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	b10b      	cbz	r3, 8006320 <_free_r+0x50>
 800631c:	42a3      	cmp	r3, r4
 800631e:	d9fa      	bls.n	8006316 <_free_r+0x46>
 8006320:	6811      	ldr	r1, [r2, #0]
 8006322:	1855      	adds	r5, r2, r1
 8006324:	42a5      	cmp	r5, r4
 8006326:	d10b      	bne.n	8006340 <_free_r+0x70>
 8006328:	6824      	ldr	r4, [r4, #0]
 800632a:	4421      	add	r1, r4
 800632c:	1854      	adds	r4, r2, r1
 800632e:	42a3      	cmp	r3, r4
 8006330:	6011      	str	r1, [r2, #0]
 8006332:	d1e0      	bne.n	80062f6 <_free_r+0x26>
 8006334:	681c      	ldr	r4, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	6053      	str	r3, [r2, #4]
 800633a:	4421      	add	r1, r4
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	e7da      	b.n	80062f6 <_free_r+0x26>
 8006340:	d902      	bls.n	8006348 <_free_r+0x78>
 8006342:	230c      	movs	r3, #12
 8006344:	6003      	str	r3, [r0, #0]
 8006346:	e7d6      	b.n	80062f6 <_free_r+0x26>
 8006348:	6825      	ldr	r5, [r4, #0]
 800634a:	1961      	adds	r1, r4, r5
 800634c:	428b      	cmp	r3, r1
 800634e:	bf04      	itt	eq
 8006350:	6819      	ldreq	r1, [r3, #0]
 8006352:	685b      	ldreq	r3, [r3, #4]
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	bf04      	itt	eq
 8006358:	1949      	addeq	r1, r1, r5
 800635a:	6021      	streq	r1, [r4, #0]
 800635c:	6054      	str	r4, [r2, #4]
 800635e:	e7ca      	b.n	80062f6 <_free_r+0x26>
 8006360:	b003      	add	sp, #12
 8006362:	bd30      	pop	{r4, r5, pc}
 8006364:	20000d1c 	.word	0x20000d1c

08006368 <sbrk_aligned>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4e0e      	ldr	r6, [pc, #56]	; (80063a4 <sbrk_aligned+0x3c>)
 800636c:	460c      	mov	r4, r1
 800636e:	6831      	ldr	r1, [r6, #0]
 8006370:	4605      	mov	r5, r0
 8006372:	b911      	cbnz	r1, 800637a <sbrk_aligned+0x12>
 8006374:	f000 f8bc 	bl	80064f0 <_sbrk_r>
 8006378:	6030      	str	r0, [r6, #0]
 800637a:	4621      	mov	r1, r4
 800637c:	4628      	mov	r0, r5
 800637e:	f000 f8b7 	bl	80064f0 <_sbrk_r>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	d00a      	beq.n	800639c <sbrk_aligned+0x34>
 8006386:	1cc4      	adds	r4, r0, #3
 8006388:	f024 0403 	bic.w	r4, r4, #3
 800638c:	42a0      	cmp	r0, r4
 800638e:	d007      	beq.n	80063a0 <sbrk_aligned+0x38>
 8006390:	1a21      	subs	r1, r4, r0
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f8ac 	bl	80064f0 <_sbrk_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d101      	bne.n	80063a0 <sbrk_aligned+0x38>
 800639c:	f04f 34ff 	mov.w	r4, #4294967295
 80063a0:	4620      	mov	r0, r4
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	20000d20 	.word	0x20000d20

080063a8 <_malloc_r>:
 80063a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	1ccd      	adds	r5, r1, #3
 80063ae:	f025 0503 	bic.w	r5, r5, #3
 80063b2:	3508      	adds	r5, #8
 80063b4:	2d0c      	cmp	r5, #12
 80063b6:	bf38      	it	cc
 80063b8:	250c      	movcc	r5, #12
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	4607      	mov	r7, r0
 80063be:	db01      	blt.n	80063c4 <_malloc_r+0x1c>
 80063c0:	42a9      	cmp	r1, r5
 80063c2:	d905      	bls.n	80063d0 <_malloc_r+0x28>
 80063c4:	230c      	movs	r3, #12
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	2600      	movs	r6, #0
 80063ca:	4630      	mov	r0, r6
 80063cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d0:	4e2e      	ldr	r6, [pc, #184]	; (800648c <_malloc_r+0xe4>)
 80063d2:	f000 f89d 	bl	8006510 <__malloc_lock>
 80063d6:	6833      	ldr	r3, [r6, #0]
 80063d8:	461c      	mov	r4, r3
 80063da:	bb34      	cbnz	r4, 800642a <_malloc_r+0x82>
 80063dc:	4629      	mov	r1, r5
 80063de:	4638      	mov	r0, r7
 80063e0:	f7ff ffc2 	bl	8006368 <sbrk_aligned>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	4604      	mov	r4, r0
 80063e8:	d14d      	bne.n	8006486 <_malloc_r+0xde>
 80063ea:	6834      	ldr	r4, [r6, #0]
 80063ec:	4626      	mov	r6, r4
 80063ee:	2e00      	cmp	r6, #0
 80063f0:	d140      	bne.n	8006474 <_malloc_r+0xcc>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	4631      	mov	r1, r6
 80063f6:	4638      	mov	r0, r7
 80063f8:	eb04 0803 	add.w	r8, r4, r3
 80063fc:	f000 f878 	bl	80064f0 <_sbrk_r>
 8006400:	4580      	cmp	r8, r0
 8006402:	d13a      	bne.n	800647a <_malloc_r+0xd2>
 8006404:	6821      	ldr	r1, [r4, #0]
 8006406:	3503      	adds	r5, #3
 8006408:	1a6d      	subs	r5, r5, r1
 800640a:	f025 0503 	bic.w	r5, r5, #3
 800640e:	3508      	adds	r5, #8
 8006410:	2d0c      	cmp	r5, #12
 8006412:	bf38      	it	cc
 8006414:	250c      	movcc	r5, #12
 8006416:	4629      	mov	r1, r5
 8006418:	4638      	mov	r0, r7
 800641a:	f7ff ffa5 	bl	8006368 <sbrk_aligned>
 800641e:	3001      	adds	r0, #1
 8006420:	d02b      	beq.n	800647a <_malloc_r+0xd2>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	442b      	add	r3, r5
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	e00e      	b.n	8006448 <_malloc_r+0xa0>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	1b52      	subs	r2, r2, r5
 800642e:	d41e      	bmi.n	800646e <_malloc_r+0xc6>
 8006430:	2a0b      	cmp	r2, #11
 8006432:	d916      	bls.n	8006462 <_malloc_r+0xba>
 8006434:	1961      	adds	r1, r4, r5
 8006436:	42a3      	cmp	r3, r4
 8006438:	6025      	str	r5, [r4, #0]
 800643a:	bf18      	it	ne
 800643c:	6059      	strne	r1, [r3, #4]
 800643e:	6863      	ldr	r3, [r4, #4]
 8006440:	bf08      	it	eq
 8006442:	6031      	streq	r1, [r6, #0]
 8006444:	5162      	str	r2, [r4, r5]
 8006446:	604b      	str	r3, [r1, #4]
 8006448:	4638      	mov	r0, r7
 800644a:	f104 060b 	add.w	r6, r4, #11
 800644e:	f000 f865 	bl	800651c <__malloc_unlock>
 8006452:	f026 0607 	bic.w	r6, r6, #7
 8006456:	1d23      	adds	r3, r4, #4
 8006458:	1af2      	subs	r2, r6, r3
 800645a:	d0b6      	beq.n	80063ca <_malloc_r+0x22>
 800645c:	1b9b      	subs	r3, r3, r6
 800645e:	50a3      	str	r3, [r4, r2]
 8006460:	e7b3      	b.n	80063ca <_malloc_r+0x22>
 8006462:	6862      	ldr	r2, [r4, #4]
 8006464:	42a3      	cmp	r3, r4
 8006466:	bf0c      	ite	eq
 8006468:	6032      	streq	r2, [r6, #0]
 800646a:	605a      	strne	r2, [r3, #4]
 800646c:	e7ec      	b.n	8006448 <_malloc_r+0xa0>
 800646e:	4623      	mov	r3, r4
 8006470:	6864      	ldr	r4, [r4, #4]
 8006472:	e7b2      	b.n	80063da <_malloc_r+0x32>
 8006474:	4634      	mov	r4, r6
 8006476:	6876      	ldr	r6, [r6, #4]
 8006478:	e7b9      	b.n	80063ee <_malloc_r+0x46>
 800647a:	230c      	movs	r3, #12
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	4638      	mov	r0, r7
 8006480:	f000 f84c 	bl	800651c <__malloc_unlock>
 8006484:	e7a1      	b.n	80063ca <_malloc_r+0x22>
 8006486:	6025      	str	r5, [r4, #0]
 8006488:	e7de      	b.n	8006448 <_malloc_r+0xa0>
 800648a:	bf00      	nop
 800648c:	20000d1c 	.word	0x20000d1c

08006490 <_realloc_r>:
 8006490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006494:	4680      	mov	r8, r0
 8006496:	4614      	mov	r4, r2
 8006498:	460e      	mov	r6, r1
 800649a:	b921      	cbnz	r1, 80064a6 <_realloc_r+0x16>
 800649c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	4611      	mov	r1, r2
 80064a2:	f7ff bf81 	b.w	80063a8 <_malloc_r>
 80064a6:	b92a      	cbnz	r2, 80064b4 <_realloc_r+0x24>
 80064a8:	f7ff ff12 	bl	80062d0 <_free_r>
 80064ac:	4625      	mov	r5, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b4:	f000 f838 	bl	8006528 <_malloc_usable_size_r>
 80064b8:	4284      	cmp	r4, r0
 80064ba:	4607      	mov	r7, r0
 80064bc:	d802      	bhi.n	80064c4 <_realloc_r+0x34>
 80064be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064c2:	d812      	bhi.n	80064ea <_realloc_r+0x5a>
 80064c4:	4621      	mov	r1, r4
 80064c6:	4640      	mov	r0, r8
 80064c8:	f7ff ff6e 	bl	80063a8 <_malloc_r>
 80064cc:	4605      	mov	r5, r0
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d0ed      	beq.n	80064ae <_realloc_r+0x1e>
 80064d2:	42bc      	cmp	r4, r7
 80064d4:	4622      	mov	r2, r4
 80064d6:	4631      	mov	r1, r6
 80064d8:	bf28      	it	cs
 80064da:	463a      	movcs	r2, r7
 80064dc:	f7ff fbb8 	bl	8005c50 <memcpy>
 80064e0:	4631      	mov	r1, r6
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7ff fef4 	bl	80062d0 <_free_r>
 80064e8:	e7e1      	b.n	80064ae <_realloc_r+0x1e>
 80064ea:	4635      	mov	r5, r6
 80064ec:	e7df      	b.n	80064ae <_realloc_r+0x1e>
	...

080064f0 <_sbrk_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d06      	ldr	r5, [pc, #24]	; (800650c <_sbrk_r+0x1c>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	602b      	str	r3, [r5, #0]
 80064fc:	f7fb fab2 	bl	8001a64 <_sbrk>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_sbrk_r+0x1a>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_sbrk_r+0x1a>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20000d24 	.word	0x20000d24

08006510 <__malloc_lock>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__malloc_lock+0x8>)
 8006512:	f000 b811 	b.w	8006538 <__retarget_lock_acquire_recursive>
 8006516:	bf00      	nop
 8006518:	20000d28 	.word	0x20000d28

0800651c <__malloc_unlock>:
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__malloc_unlock+0x8>)
 800651e:	f000 b80c 	b.w	800653a <__retarget_lock_release_recursive>
 8006522:	bf00      	nop
 8006524:	20000d28 	.word	0x20000d28

08006528 <_malloc_usable_size_r>:
 8006528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800652c:	1f18      	subs	r0, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfbc      	itt	lt
 8006532:	580b      	ldrlt	r3, [r1, r0]
 8006534:	18c0      	addlt	r0, r0, r3
 8006536:	4770      	bx	lr

08006538 <__retarget_lock_acquire_recursive>:
 8006538:	4770      	bx	lr

0800653a <__retarget_lock_release_recursive>:
 800653a:	4770      	bx	lr

0800653c <_init>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr

08006548 <_fini>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	bf00      	nop
 800654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654e:	bc08      	pop	{r3}
 8006550:	469e      	mov	lr, r3
 8006552:	4770      	bx	lr
