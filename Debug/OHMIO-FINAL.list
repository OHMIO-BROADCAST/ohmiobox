
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015058  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005688  08015228  08015228  00025228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8b0  0801a8b0  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8b0  0801a8b0  0002a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a8b8  0801a8b8  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a8b8  0801a8b8  0002a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a8bc  0801a8bc  0002a8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0801a8c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000ac  0801a96c  000300ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000014c  0801aa0c  0003014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ae74  200001ec  0801aaac  000301ec  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000b060  0801aaac  0003b060  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002beb8  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000067f5  00000000  00000000  0005c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f00  00000000  00000000  000628d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001dc8  00000000  00000000  000647d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034bd1  00000000  00000000  00066598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032283  00000000  00000000  0009b169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a247  00000000  00000000  000cd3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d7633  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008af0  00000000  00000000  001d7684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015210 	.word	0x08015210

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	08015210 	.word	0x08015210

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SCB_EnableICache+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d2:	f3bf 8f6f 	isb	sy
}
 80005d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SCB_EnableICache+0x48>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SCB_EnableICache+0x48>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SCB_EnableDCache+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SCB_EnableDCache+0x84>)
 8000616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0b5b      	lsrs	r3, r3, #13
 8000620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000624:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800062e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000638:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCB_EnableDCache+0x84>)
 8000640:	4313      	orrs	r3, r2
 8000642:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ef      	bne.n	8000630 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	60fa      	str	r2, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e5      	bne.n	8000626 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableDCache+0x84>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableDCache+0x84>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <main>:
extern struct netif gnetif;

static uint32_t last_arriba_time = 0; // keeps track of the last time "ARRIBA" was displayed
unsigned int analog_value_keypad;
int main(void)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b083      	sub	sp, #12
 800068c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068e:	f000 fb91 	bl	8000db4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000692:	f7ff ff8f 	bl	80005b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000696:	f7ff ffb3 	bl	8000600 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f002 f8b7 	bl	800280c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f931 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fad9 	bl	8000c58 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a6:	f000 fa79 	bl	8000b9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006aa:	f000 faa7 	bl	8000bfc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80006ae:	f000 fa35 	bl	8000b1c <MX_I2C2_Init>
  MX_ADC1_Init();
 80006b2:	f000 f98f 	bl	80009d4 <MX_ADC1_Init>
  MX_ADC3_Init();
 80006b6:	f000 f9df 	bl	8000a78 <MX_ADC3_Init>
  MX_LWIP_Init();
 80006ba:	f007 f82f 	bl	800771c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80006be:	f000 fbc1 	bl	8000e44 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 80006c2:	f001 fc27 	bl	8001f14 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 80006c6:	f001 fc31 	bl	8001f2c <ssd1306_OhmioMenuPrincipal>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH
    ethernetif_input(&gnetif);
 80006ca:	4887      	ldr	r0, [pc, #540]	; (80008e8 <main+0x260>)
 80006cc:	f007 f9d6 	bl	8007a7c <ethernetif_input>
    sys_check_timeouts();
 80006d0:	f00e fcbc 	bl	800f04c <sys_check_timeouts>
           ip4_addr_get_u32(netif_ip4_netmask(&gnetif)));

    printf("Local Gateway: %s\n"
       ip4_addr_get_u32(netif_ip4_gw(&gnetif))); */

	  HAL_ADC_Start(&hadc3);
 80006d4:	4885      	ldr	r0, [pc, #532]	; (80008ec <main+0x264>)
 80006d6:	f002 f967 	bl	80029a8 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc3, 10)==HAL_OK){
 80006da:	210a      	movs	r1, #10
 80006dc:	4883      	ldr	r0, [pc, #524]	; (80008ec <main+0x264>)
 80006de:	f002 fa65 	bl	8002bac <HAL_ADC_PollForConversion>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d113      	bne.n	8000710 <main+0x88>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc3);
 80006e8:	4880      	ldr	r0, [pc, #512]	; (80008ec <main+0x264>)
 80006ea:	f002 faea 	bl	8002cc2 <HAL_ADC_GetValue>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a7f      	ldr	r2, [pc, #508]	; (80008f0 <main+0x268>)
 80006f2:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen, ip4_addr_get_u32(netif_ip4_addr(&gnetif)), ip4_addr_get_u32(netif_ip4_gw(&gnetif)) );
 80006f4:	4b7e      	ldr	r3, [pc, #504]	; (80008f0 <main+0x268>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	4b7e      	ldr	r3, [pc, #504]	; (80008f4 <main+0x26c>)
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	4b7e      	ldr	r3, [pc, #504]	; (80008f8 <main+0x270>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b7e      	ldr	r3, [pc, #504]	; (80008fc <main+0x274>)
 8000702:	681c      	ldr	r4, [r3, #0]
 8000704:	4b7e      	ldr	r3, [pc, #504]	; (8000900 <main+0x278>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4623      	mov	r3, r4
 800070c:	f001 fba2 	bl	8001e54 <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 800 && analog_value_keypad <= 900){
 8000710:	4b77      	ldr	r3, [pc, #476]	; (80008f0 <main+0x268>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000718:	d335      	bcc.n	8000786 <main+0xfe>
 800071a:	4b75      	ldr	r3, [pc, #468]	; (80008f0 <main+0x268>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000722:	d830      	bhi.n	8000786 <main+0xfe>
        if(screen==1){
 8000724:	4b74      	ldr	r3, [pc, #464]	; (80008f8 <main+0x270>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d10d      	bne.n	8000748 <main+0xc0>
          if (indexMenu==4){
 800072c:	4b71      	ldr	r3, [pc, #452]	; (80008f4 <main+0x26c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b04      	cmp	r3, #4
 8000732:	d103      	bne.n	800073c <main+0xb4>
            indexMenu=0;
 8000734:	4b6f      	ldr	r3, [pc, #444]	; (80008f4 <main+0x26c>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e024      	b.n	8000786 <main+0xfe>
          }
          else{
            indexMenu++;
 800073c:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <main+0x26c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	4a6c      	ldr	r2, [pc, #432]	; (80008f4 <main+0x26c>)
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	e01e      	b.n	8000786 <main+0xfe>
          }
        }else if(screen==4){
 8000748:	4b6b      	ldr	r3, [pc, #428]	; (80008f8 <main+0x270>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b04      	cmp	r3, #4
 800074e:	d10d      	bne.n	800076c <main+0xe4>
          if (indexMenu==4){
 8000750:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <main+0x26c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b04      	cmp	r3, #4
 8000756:	d103      	bne.n	8000760 <main+0xd8>
            indexMenu=0;
 8000758:	4b66      	ldr	r3, [pc, #408]	; (80008f4 <main+0x26c>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e012      	b.n	8000786 <main+0xfe>
          }
          else{
            indexMenu++;
 8000760:	4b64      	ldr	r3, [pc, #400]	; (80008f4 <main+0x26c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a63      	ldr	r2, [pc, #396]	; (80008f4 <main+0x26c>)
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	e00c      	b.n	8000786 <main+0xfe>
          }
        }
        else{
          if (indexMenu==2){
 800076c:	4b61      	ldr	r3, [pc, #388]	; (80008f4 <main+0x26c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d103      	bne.n	800077c <main+0xf4>
            indexMenu=0;
 8000774:	4b5f      	ldr	r3, [pc, #380]	; (80008f4 <main+0x26c>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	e004      	b.n	8000786 <main+0xfe>
          }
          else{
            indexMenu++;
 800077c:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <main+0x26c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a5c      	ldr	r2, [pc, #368]	; (80008f4 <main+0x26c>)
 8000784:	6013      	str	r3, [r2, #0]
	   //screen=4 -> BROADCASt
     //screen=5 -> CLOUD



	      if(analog_value_keypad >= 0 && analog_value_keypad <= 100){
 8000786:	4b5a      	ldr	r3, [pc, #360]	; (80008f0 <main+0x268>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b64      	cmp	r3, #100	; 0x64
 800078c:	f200 80a4 	bhi.w	80008d8 <main+0x250>
			//Select
	    	//Menu Principal
			if(screen==0){
 8000790:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <main+0x270>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d125      	bne.n	80007e4 <main+0x15c>
				if(indexMenu==0){
 8000798:	4b56      	ldr	r3, [pc, #344]	; (80008f4 <main+0x26c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d108      	bne.n	80007b2 <main+0x12a>
					//option Dashboard
					screen=1;
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <main+0x270>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80007a6:	4b53      	ldr	r3, [pc, #332]	; (80008f4 <main+0x26c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80007ac:	f000 fbd8 	bl	8000f60 <ssd1306_UpdateScreen>
 80007b0:	e018      	b.n	80007e4 <main+0x15c>
				}else if (indexMenu==1){
 80007b2:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <main+0x26c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d108      	bne.n	80007cc <main+0x144>
					//option Energy
					screen=2;
 80007ba:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <main+0x270>)
 80007bc:	2202      	movs	r2, #2
 80007be:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80007c0:	4b4c      	ldr	r3, [pc, #304]	; (80008f4 <main+0x26c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80007c6:	f000 fbcb 	bl	8000f60 <ssd1306_UpdateScreen>
 80007ca:	e00b      	b.n	80007e4 <main+0x15c>
				}else if (indexMenu==2){
 80007cc:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <main+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d107      	bne.n	80007e4 <main+0x15c>
					screen=3;
 80007d4:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <main+0x270>)
 80007d6:	2203      	movs	r2, #3
 80007d8:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80007da:	4b46      	ldr	r3, [pc, #280]	; (80008f4 <main+0x26c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80007e0:	f000 fbbe 	bl	8000f60 <ssd1306_UpdateScreen>
				}
			}
			// Dashboard
				if(screen==1){
 80007e4:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <main+0x270>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d125      	bne.n	8000838 <main+0x1b0>
					if (indexMenu==0){
 80007ec:	4b41      	ldr	r3, [pc, #260]	; (80008f4 <main+0x26c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d108      	bne.n	8000806 <main+0x17e>
						//option RF
						screen=4;
 80007f4:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <main+0x270>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 80007fa:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <main+0x26c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000800:	f000 fbae 	bl	8000f60 <ssd1306_UpdateScreen>
 8000804:	e018      	b.n	8000838 <main+0x1b0>
					}else if (indexMenu==1){
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <main+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d108      	bne.n	8000820 <main+0x198>
						//option RF
						screen=5;
 800080e:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <main+0x270>)
 8000810:	2205      	movs	r2, #5
 8000812:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000814:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <main+0x26c>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800081a:	f000 fba1 	bl	8000f60 <ssd1306_UpdateScreen>
 800081e:	e00b      	b.n	8000838 <main+0x1b0>
					}
          else if (indexMenu==2){
 8000820:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <main+0x26c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d107      	bne.n	8000838 <main+0x1b0>
						//option Atras back
						screen=0;
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <main+0x270>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <main+0x26c>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000834:	f000 fb94 	bl	8000f60 <ssd1306_UpdateScreen>
					}
				}
			// Energy
				if(screen==2){
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <main+0x270>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d10f      	bne.n	8000860 <main+0x1d8>
					if(indexMenu==0){
 8000840:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <main+0x26c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00b      	beq.n	8000860 <main+0x1d8>
						//option power no hace nada
						//screen=1;
					}else if (indexMenu==2){
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <main+0x26c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d107      	bne.n	8000860 <main+0x1d8>
						//option Atras back
						screen=0;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <main+0x270>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <main+0x26c>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800085c:	f000 fb80 	bl	8000f60 <ssd1306_UpdateScreen>
					}
				}
			// Settings
			if(screen==3){
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <main+0x270>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d10f      	bne.n	8000888 <main+0x200>
				if(indexMenu==0){
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <main+0x26c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00b      	beq.n	8000888 <main+0x200>
					//option Version no hace nada
					//screen=1;
				}else if (indexMenu==2){
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <main+0x26c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d107      	bne.n	8000888 <main+0x200>
					//option Atras back
					screen=0;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <main+0x270>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <main+0x26c>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000884:	f000 fb6c 	bl	8000f60 <ssd1306_UpdateScreen>
				}
			}
      // BROADCAST
      if(screen==4){
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <main+0x270>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b04      	cmp	r3, #4
 800088e:	d10f      	bne.n	80008b0 <main+0x228>
        if(indexMenu==0){
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <main+0x26c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <main+0x228>
					//screen=1;
				}
        else if (indexMenu==4){
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <main+0x26c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d107      	bne.n	80008b0 <main+0x228>
					//option Atras back
					screen=1;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <main+0x270>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <main+0x26c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80008ac:	f000 fb58 	bl	8000f60 <ssd1306_UpdateScreen>
				}
      }
      // CLOUD
      if(screen==5){
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <main+0x270>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d10f      	bne.n	80008d8 <main+0x250>
        if(indexMenu==0){
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <main+0x26c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d00b      	beq.n	80008d8 <main+0x250>
					//screen=1;
				}
        else if (indexMenu==2){
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <main+0x26c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d107      	bne.n	80008d8 <main+0x250>
					//option Atras back
					screen=1;
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <main+0x270>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <main+0x26c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80008d4:	f000 fb44 	bl	8000f60 <ssd1306_UpdateScreen>
      }
	      }



	  HAL_ADC_Stop(&hadc3);
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <main+0x264>)
 80008da:	f002 f933 	bl	8002b44 <HAL_ADC_Stop>
	  HAL_Delay(50);
 80008de:	2032      	movs	r0, #50	; 0x32
 80008e0:	f001 fffa 	bl	80028d8 <HAL_Delay>
    ethernetif_input(&gnetif);
 80008e4:	e6f1      	b.n	80006ca <main+0x42>
 80008e6:	bf00      	nop
 80008e8:	20000c98 	.word	0x20000c98
 80008ec:	20000250 	.word	0x20000250
 80008f0:	20000884 	.word	0x20000884
 80008f4:	2000087c 	.word	0x2000087c
 80008f8:	20000880 	.word	0x20000880
 80008fc:	20000c9c 	.word	0x20000c9c
 8000900:	20000ca4 	.word	0x20000ca4

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2230      	movs	r2, #48	; 0x30
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f013 fa70 	bl	8013df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000928:	f004 fee8 	bl	80056fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <SystemClock_Config+0xc8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <SystemClock_Config+0xc8>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <SystemClock_Config+0xc8>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <SystemClock_Config+0xcc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <SystemClock_Config+0xcc>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <SystemClock_Config+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000964:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000978:	2348      	movs	r3, #72	; 0x48
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000980:	2303      	movs	r3, #3
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fec7 	bl	800571c <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000994:	f000 fa17 	bl	8000dc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099c:	2302      	movs	r3, #2
 800099e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2102      	movs	r1, #2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f005 f955 	bl	8005c64 <HAL_RCC_ClockConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009c0:	f000 fa01 	bl	8000dc6 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3750      	adds	r7, #80	; 0x50
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40007000 	.word	0x40007000

080009d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <MX_ADC1_Init+0xa0>)
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a34:	f001 ff74 	bl	8002920 <HAL_ADC_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f9c2 	bl	8000dc6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a42:	2304      	movs	r3, #4
 8000a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a54:	f002 f942 	bl	8002cdc <HAL_ADC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a5e:	f000 f9b2 	bl	8000dc6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000208 	.word	0x20000208
 8000a70:	40012000 	.word	0x40012000
 8000a74:	0f000001 	.word	0x0f000001

08000a78 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <MX_ADC3_Init+0x9c>)
 8000a8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <MX_ADC3_Init+0xa0>)
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000ad8:	f001 ff22 	bl	8002920 <HAL_ADC_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 f970 	bl	8000dc6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_ADC3_Init+0x98>)
 8000af8:	f002 f8f0 	bl	8002cdc <HAL_ADC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000b02:	f000 f960 	bl	8000dc6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000250 	.word	0x20000250
 8000b14:	40012200 	.word	0x40012200
 8000b18:	0f000001 	.word	0x0f000001

08000b1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_I2C2_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <MX_I2C2_Init+0x7c>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b58:	f004 f806 	bl	8004b68 <HAL_I2C_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b62:	f000 f930 	bl	8000dc6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b6a:	f004 fbe7 	bl	800533c <HAL_I2CEx_ConfigAnalogFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b74:	f000 f927 	bl	8000dc6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_I2C2_Init+0x74>)
 8000b7c:	f004 fc29 	bl	80053d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f91e 	bl	8000dc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000298 	.word	0x20000298
 8000b94:	40005800 	.word	0x40005800
 8000b98:	00301739 	.word	0x00301739

08000b9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART3_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART3_UART_Init+0x58>)
 8000be0:	f005 fe56 	bl	8006890 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f000 f8ec 	bl	8000dc6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200002ec 	.word	0x200002ec
 8000bf8:	40004800 	.word	0x40004800

08000bfc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2206      	movs	r2, #6
 8000c0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c40:	f004 fc13 	bl	800546a <HAL_PCD_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f000 f8bc 	bl	8000dc6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000374 	.word	0x20000374

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a4c      	ldr	r2, [pc, #304]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c86:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a46      	ldr	r2, [pc, #280]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a34      	ldr	r2, [pc, #208]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_GPIO_Init+0x14c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d1c:	4822      	ldr	r0, [pc, #136]	; (8000da8 <MX_GPIO_Init+0x150>)
 8000d1e:	f003 ff09 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <MX_GPIO_Init+0x154>)
 8000d28:	f003 ff04 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_GPIO_Init+0x158>)
 8000d44:	f003 fd4a 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d48:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_GPIO_Init+0x150>)
 8000d62:	f003 fd3b 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d66:	2340      	movs	r3, #64	; 0x40
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <MX_GPIO_Init+0x154>)
 8000d7e:	f003 fd2d 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_GPIO_Init+0x154>)
 8000d96:	f003 fd21 	bl	80047dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3730      	adds	r7, #48	; 0x30
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40021800 	.word	0x40021800
 8000db0:	40020800 	.word	0x40020800

08000db4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000db8:	f002 faf2 	bl	80033a0 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	f002 fb07 	bl	80033d0 <HAL_MPU_Enable>

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dca:	b672      	cpsid	i
}
 8000dcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dce:	e7fe      	b.n	8000dce <Error_Handler+0x8>

08000dd0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2178      	movs	r1, #120	; 0x78
 8000dfe:	4803      	ldr	r0, [pc, #12]	; (8000e0c <ssd1306_WriteCommand+0x2c>)
 8000e00:	f003 ff42 	bl	8004c88 <HAL_I2C_Mem_Write>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000298 	.word	0x20000298

08000e10 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af04      	add	r7, sp, #16
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e22:	9202      	str	r2, [sp, #8]
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	2240      	movs	r2, #64	; 0x40
 8000e2e:	2178      	movs	r1, #120	; 0x78
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <ssd1306_WriteData+0x30>)
 8000e32:	f003 ff29 	bl	8004c88 <HAL_I2C_Mem_Write>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000298 	.word	0x20000298

08000e44 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000e48:	f7ff ffc2 	bl	8000dd0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000e4c:	2064      	movs	r0, #100	; 0x64
 8000e4e:	f001 fd43 	bl	80028d8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 fa34 	bl	80012c0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000e58:	2020      	movs	r0, #32
 8000e5a:	f7ff ffc1 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff ffbe 	bl	8000de0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e64:	20b0      	movs	r0, #176	; 0xb0
 8000e66:	f7ff ffbb 	bl	8000de0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000e6a:	20c8      	movs	r0, #200	; 0xc8
 8000e6c:	f7ff ffb8 	bl	8000de0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff ffb5 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000e76:	2010      	movs	r0, #16
 8000e78:	f7ff ffb2 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000e7c:	2040      	movs	r0, #64	; 0x40
 8000e7e:	f7ff ffaf 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000e82:	20ff      	movs	r0, #255	; 0xff
 8000e84:	f000 fa09 	bl	800129a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000e88:	20a1      	movs	r0, #161	; 0xa1
 8000e8a:	f7ff ffa9 	bl	8000de0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000e8e:	20a6      	movs	r0, #166	; 0xa6
 8000e90:	f7ff ffa6 	bl	8000de0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000e94:	20a8      	movs	r0, #168	; 0xa8
 8000e96:	f7ff ffa3 	bl	8000de0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000e9a:	203f      	movs	r0, #63	; 0x3f
 8000e9c:	f7ff ffa0 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ea0:	20a4      	movs	r0, #164	; 0xa4
 8000ea2:	f7ff ff9d 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000ea6:	20d3      	movs	r0, #211	; 0xd3
 8000ea8:	f7ff ff9a 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff ff97 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000eb2:	20d5      	movs	r0, #213	; 0xd5
 8000eb4:	f7ff ff94 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000eb8:	20f0      	movs	r0, #240	; 0xf0
 8000eba:	f7ff ff91 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ebe:	20d9      	movs	r0, #217	; 0xd9
 8000ec0:	f7ff ff8e 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000ec4:	2022      	movs	r0, #34	; 0x22
 8000ec6:	f7ff ff8b 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000eca:	20da      	movs	r0, #218	; 0xda
 8000ecc:	f7ff ff88 	bl	8000de0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000ed0:	2012      	movs	r0, #18
 8000ed2:	f7ff ff85 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000ed6:	20db      	movs	r0, #219	; 0xdb
 8000ed8:	f7ff ff82 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000edc:	2020      	movs	r0, #32
 8000ede:	f7ff ff7f 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000ee2:	208d      	movs	r0, #141	; 0x8d
 8000ee4:	f7ff ff7c 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000ee8:	2014      	movs	r0, #20
 8000eea:	f7ff ff79 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 f9e6 	bl	80012c0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f80f 	bl	8000f18 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000efa:	f000 f831 	bl	8000f60 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <ssd1306_Init+0xd0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <ssd1306_Init+0xd0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000f0a:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <ssd1306_Init+0xd0>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	711a      	strb	r2, [r3, #4]
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000c88 	.word	0x20000c88

08000f18 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	e00d      	b.n	8000f44 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <ssd1306_Fill+0x1a>
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e000      	b.n	8000f34 <ssd1306_Fill+0x1c>
 8000f32:	21ff      	movs	r1, #255	; 0xff
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <ssd1306_Fill+0x44>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	460a      	mov	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3301      	adds	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4a:	d3ed      	bcc.n	8000f28 <ssd1306_Fill+0x10>
    }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000888 	.word	0x20000888

08000f60 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	e016      	b.n	8000f9a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	3b50      	subs	r3, #80	; 0x50
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff34 	bl	8000de0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f7ff ff31 	bl	8000de0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000f7e:	2010      	movs	r0, #16
 8000f80:	f7ff ff2e 	bl	8000de0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	01db      	lsls	r3, r3, #7
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <ssd1306_UpdateScreen+0x4c>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff3e 	bl	8000e10 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	3301      	adds	r3, #1
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d9e5      	bls.n	8000f6c <ssd1306_UpdateScreen+0xc>
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000888 	.word	0x20000888

08000fb0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	71bb      	strb	r3, [r7, #6]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db3d      	blt.n	8001046 <ssd1306_DrawPixel+0x96>
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b3f      	cmp	r3, #63	; 0x3f
 8000fce:	d83a      	bhi.n	8001046 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000fd0:	797b      	ldrb	r3, [r7, #5]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11a      	bne.n	800100c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	b2d8      	uxtb	r0, r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	01db      	lsls	r3, r3, #7
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <ssd1306_DrawPixel+0xa4>)
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	b25a      	sxtb	r2, r3
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b259      	sxtb	r1, r3
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	4603      	mov	r3, r0
 8001000:	01db      	lsls	r3, r3, #7
 8001002:	4413      	add	r3, r2
 8001004:	b2c9      	uxtb	r1, r1
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <ssd1306_DrawPixel+0xa4>)
 8001008:	54d1      	strb	r1, [r2, r3]
 800100a:	e01d      	b.n	8001048 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	b2d8      	uxtb	r0, r3
 8001014:	4603      	mov	r3, r0
 8001016:	01db      	lsls	r3, r3, #7
 8001018:	4413      	add	r3, r2
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <ssd1306_DrawPixel+0xa4>)
 800101c:	5cd3      	ldrb	r3, [r2, r3]
 800101e:	b25a      	sxtb	r2, r3
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	b25b      	sxtb	r3, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4013      	ands	r3, r2
 8001034:	b259      	sxtb	r1, r3
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	4603      	mov	r3, r0
 800103a:	01db      	lsls	r3, r3, #7
 800103c:	4413      	add	r3, r2
 800103e:	b2c9      	uxtb	r1, r1
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <ssd1306_DrawPixel+0xa4>)
 8001042:	54d1      	strb	r1, [r2, r3]
 8001044:	e000      	b.n	8001048 <ssd1306_DrawPixel+0x98>
        return;
 8001046:	bf00      	nop
    }
}
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000888 	.word	0x20000888

08001058 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	4604      	mov	r4, r0
 8001060:	1d38      	adds	r0, r7, #4
 8001062:	e880 0006 	stmia.w	r0, {r1, r2}
 8001066:	461a      	mov	r2, r3
 8001068:	4623      	mov	r3, r4
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	4613      	mov	r3, r2
 800106e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b1f      	cmp	r3, #31
 8001074:	d902      	bls.n	800107c <ssd1306_WriteChar+0x24>
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b7e      	cmp	r3, #126	; 0x7e
 800107a:	d901      	bls.n	8001080 <ssd1306_WriteChar+0x28>
        return 0;
 800107c:	2300      	movs	r3, #0
 800107e:	e06d      	b.n	800115c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001080:	4b38      	ldr	r3, [pc, #224]	; (8001164 <ssd1306_WriteChar+0x10c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	2b80      	cmp	r3, #128	; 0x80
 800108c:	dc06      	bgt.n	800109c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <ssd1306_WriteChar+0x10c>)
 8001090:	885b      	ldrh	r3, [r3, #2]
 8001092:	461a      	mov	r2, r3
 8001094:	797b      	ldrb	r3, [r7, #5]
 8001096:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001098:	2b40      	cmp	r3, #64	; 0x40
 800109a:	dd01      	ble.n	80010a0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e05d      	b.n	800115c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e04c      	b.n	8001140 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	3b20      	subs	r3, #32
 80010ac:	7979      	ldrb	r1, [r7, #5]
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	440b      	add	r3, r1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	e034      	b.n	8001130 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d012      	beq.n	80010fc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <ssd1306_WriteChar+0x10c>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	b2d8      	uxtb	r0, r3
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <ssd1306_WriteChar+0x10c>)
 80010e6:	885b      	ldrh	r3, [r3, #2]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	7bba      	ldrb	r2, [r7, #14]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff ff5b 	bl	8000fb0 <ssd1306_DrawPixel>
 80010fa:	e016      	b.n	800112a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <ssd1306_WriteChar+0x10c>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b2d8      	uxtb	r0, r3
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <ssd1306_WriteChar+0x10c>)
 800110c:	885b      	ldrh	r3, [r3, #2]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b2d9      	uxtb	r1, r3
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf0c      	ite	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	2300      	movne	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	f7ff ff43 	bl	8000fb0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3301      	adds	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	793b      	ldrb	r3, [r7, #4]
 8001132:	461a      	mov	r2, r3
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	4293      	cmp	r3, r2
 8001138:	d3c5      	bcc.n	80010c6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	797b      	ldrb	r3, [r7, #5]
 8001142:	461a      	mov	r2, r3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	4293      	cmp	r3, r2
 8001148:	d3ad      	bcc.n	80010a6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <ssd1306_WriteChar+0x10c>)
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4413      	add	r3, r2
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <ssd1306_WriteChar+0x10c>)
 8001158:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3724      	adds	r7, #36	; 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	20000c88 	.word	0x20000c88

08001168 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	1d38      	adds	r0, r7, #4
 8001172:	e880 0006 	stmia.w	r0, {r1, r2}
 8001176:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001178:	e012      	b.n	80011a0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	7818      	ldrb	r0, [r3, #0]
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	1d3a      	adds	r2, r7, #4
 8001182:	ca06      	ldmia	r2, {r1, r2}
 8001184:	f7ff ff68 	bl	8001058 <ssd1306_WriteChar>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d002      	beq.n	800119a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	e008      	b.n	80011ac <ssd1306_WriteString+0x44>
        }
        str++;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e8      	bne.n	800117a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	781b      	ldrb	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <ssd1306_SetCursor+0x2c>)
 80011ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <ssd1306_SetCursor+0x2c>)
 80011d2:	805a      	strh	r2, [r3, #2]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000c88 	.word	0x20000c88

080011e4 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	603a      	str	r2, [r7, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	460b      	mov	r3, r1
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	4613      	mov	r3, r2
 80011f8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80011fa:	797b      	ldrb	r3, [r7, #5]
 80011fc:	3307      	adds	r3, #7
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da00      	bge.n	8001204 <ssd1306_DrawBitmap+0x20>
 8001202:	3307      	adds	r3, #7
 8001204:	10db      	asrs	r3, r3, #3
 8001206:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db3e      	blt.n	8001292 <ssd1306_DrawBitmap+0xae>
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	2b3f      	cmp	r3, #63	; 0x3f
 8001218:	d83b      	bhi.n	8001292 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800121a:	2300      	movs	r3, #0
 800121c:	73bb      	strb	r3, [r7, #14]
 800121e:	e033      	b.n	8001288 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	737b      	strb	r3, [r7, #13]
 8001224:	e026      	b.n	8001274 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001226:	7b7b      	ldrb	r3, [r7, #13]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e00d      	b.n	8001254 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	7b7a      	ldrb	r2, [r7, #13]
 8001244:	08d2      	lsrs	r2, r2, #3
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	4413      	add	r3, r2
 800124a:	461a      	mov	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da08      	bge.n	800126e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	4413      	add	r3, r2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	7f3a      	ldrb	r2, [r7, #28]
 8001266:	79b9      	ldrb	r1, [r7, #6]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fea1 	bl	8000fb0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800126e:	7b7b      	ldrb	r3, [r7, #13]
 8001270:	3301      	adds	r3, #1
 8001272:	737b      	strb	r3, [r7, #13]
 8001274:	7b7a      	ldrb	r2, [r7, #13]
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3d4      	bcc.n	8001226 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	3301      	adds	r3, #1
 8001280:	73bb      	strb	r3, [r7, #14]
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	3301      	adds	r3, #1
 8001286:	71bb      	strb	r3, [r7, #6]
 8001288:	7bba      	ldrb	r2, [r7, #14]
 800128a:	7e3b      	ldrb	r3, [r7, #24]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3c7      	bcc.n	8001220 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001290:	e000      	b.n	8001294 <ssd1306_DrawBitmap+0xb0>
        return;
 8001292:	bf00      	nop
}
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80012a4:	2381      	movs	r3, #129	; 0x81
 80012a6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fd98 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd94 	bl	8000de0 <ssd1306_WriteCommand>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80012d0:	23af      	movs	r3, #175	; 0xaf
 80012d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <ssd1306_SetDisplayOn+0x38>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	715a      	strb	r2, [r3, #5]
 80012da:	e004      	b.n	80012e6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80012dc:	23ae      	movs	r3, #174	; 0xae
 80012de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <ssd1306_SetDisplayOn+0x38>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd79 	bl	8000de0 <ssd1306_WriteCommand>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000c88 	.word	0x20000c88

080012fc <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fe06 	bl	8000f18 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4619      	mov	r1, r3
 8001310:	2002      	movs	r0, #2
 8001312:	f7ff ff4f 	bl	80011b4 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <ssd1306_TestFonts1+0x88>)
 8001318:	2301      	movs	r3, #1
 800131a:	ca06      	ldmia	r2, {r1, r2}
 800131c:	481a      	ldr	r0, [pc, #104]	; (8001388 <ssd1306_TestFonts1+0x8c>)
 800131e:	f7ff ff23 	bl	8001168 <ssd1306_WriteString>
    y += 26;
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	331a      	adds	r3, #26
 8001326:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	4619      	mov	r1, r3
 800132c:	2002      	movs	r0, #2
 800132e:	f7ff ff41 	bl	80011b4 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <ssd1306_TestFonts1+0x90>)
 8001334:	2301      	movs	r3, #1
 8001336:	ca06      	ldmia	r2, {r1, r2}
 8001338:	4815      	ldr	r0, [pc, #84]	; (8001390 <ssd1306_TestFonts1+0x94>)
 800133a:	f7ff ff15 	bl	8001168 <ssd1306_WriteString>
    y += 10;
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	330a      	adds	r3, #10
 8001342:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4619      	mov	r1, r3
 8001348:	2002      	movs	r0, #2
 800134a:	f7ff ff33 	bl	80011b4 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <ssd1306_TestFonts1+0x98>)
 8001350:	2301      	movs	r3, #1
 8001352:	ca06      	ldmia	r2, {r1, r2}
 8001354:	4810      	ldr	r0, [pc, #64]	; (8001398 <ssd1306_TestFonts1+0x9c>)
 8001356:	f7ff ff07 	bl	8001168 <ssd1306_WriteString>
    y += 10;
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	330a      	adds	r3, #10
 800135e:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4619      	mov	r1, r3
 8001364:	2002      	movs	r0, #2
 8001366:	f7ff ff25 	bl	80011b4 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.0", Font_6x8, White);
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <ssd1306_TestFonts1+0x98>)
 800136c:	2301      	movs	r3, #1
 800136e:	ca06      	ldmia	r2, {r1, r2}
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <ssd1306_TestFonts1+0xa0>)
 8001372:	f7ff fef9 	bl	8001168 <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 8001376:	f7ff fdf3 	bl	8000f60 <ssd1306_UpdateScreen>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000010 	.word	0x20000010
 8001388:	08015228 	.word	0x08015228
 800138c:	20000008 	.word	0x20000008
 8001390:	08015234 	.word	0x08015234
 8001394:	20000000 	.word	0x20000000
 8001398:	08015240 	.word	0x08015240
 800139c:	08015254 	.word	0x08015254

080013a0 <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fdaa 	bl	8000f18 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
 80013c6:	4619      	mov	r1, r3
 80013c8:	2002      	movs	r0, #2
 80013ca:	f7ff fef3 	bl	80011b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 80013ce:	4a51      	ldr	r2, [pc, #324]	; (8001514 <ssd1306_PrintPrincipalMenu+0x174>)
 80013d0:	2301      	movs	r3, #1
 80013d2:	ca06      	ldmia	r2, {r1, r2}
 80013d4:	4850      	ldr	r0, [pc, #320]	; (8001518 <ssd1306_PrintPrincipalMenu+0x178>)
 80013d6:	f7ff fec7 	bl	8001168 <ssd1306_WriteString>
	    //INTERNET
		  ssd1306_DrawBitmap(70,y,icon_rf,15,15,White);
 80013da:	7ff9      	ldrb	r1, [r7, #31]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	230f      	movs	r3, #15
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	230f      	movs	r3, #15
 80013e6:	4a4d      	ldr	r2, [pc, #308]	; (800151c <ssd1306_PrintPrincipalMenu+0x17c>)
 80013e8:	2046      	movs	r0, #70	; 0x46
 80013ea:	f7ff fefb 	bl	80011e4 <ssd1306_DrawBitmap>

	    //BATERIA
		  ssd1306_DrawBitmap(90,y,icon_cloud,15,15,White);
 80013ee:	7ff9      	ldrb	r1, [r7, #31]
 80013f0:	2301      	movs	r3, #1
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	230f      	movs	r3, #15
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	230f      	movs	r3, #15
 80013fa:	4a49      	ldr	r2, [pc, #292]	; (8001520 <ssd1306_PrintPrincipalMenu+0x180>)
 80013fc:	205a      	movs	r0, #90	; 0x5a
 80013fe:	f7ff fef1 	bl	80011e4 <ssd1306_DrawBitmap>

	    //SEÑAL GSM
		  ssd1306_DrawBitmap(110,y,icon_battery_full,15,15,White);
 8001402:	7ff9      	ldrb	r1, [r7, #31]
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	230f      	movs	r3, #15
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	230f      	movs	r3, #15
 800140e:	4a45      	ldr	r2, [pc, #276]	; (8001524 <ssd1306_PrintPrincipalMenu+0x184>)
 8001410:	206e      	movs	r0, #110	; 0x6e
 8001412:	f7ff fee7 	bl	80011e4 <ssd1306_DrawBitmap>



	    y += 20;
 8001416:	7ffb      	ldrb	r3, [r7, #31]
 8001418:	3314      	adds	r3, #20
 800141a:	77fb      	strb	r3, [r7, #31]
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 800141c:	7ffb      	ldrb	r3, [r7, #31]
 800141e:	4619      	mov	r1, r3
 8001420:	2002      	movs	r0, #2
 8001422:	f7ff fec7 	bl	80011b4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d106      	bne.n	800143a <ssd1306_PrintPrincipalMenu+0x9a>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 800142c:	4a3e      	ldr	r2, [pc, #248]	; (8001528 <ssd1306_PrintPrincipalMenu+0x188>)
 800142e:	2300      	movs	r3, #0
 8001430:	ca06      	ldmia	r2, {r1, r2}
 8001432:	483e      	ldr	r0, [pc, #248]	; (800152c <ssd1306_PrintPrincipalMenu+0x18c>)
 8001434:	f7ff fe98 	bl	8001168 <ssd1306_WriteString>
 8001438:	e005      	b.n	8001446 <ssd1306_PrintPrincipalMenu+0xa6>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 800143a:	4a3b      	ldr	r2, [pc, #236]	; (8001528 <ssd1306_PrintPrincipalMenu+0x188>)
 800143c:	2301      	movs	r3, #1
 800143e:	ca06      	ldmia	r2, {r1, r2}
 8001440:	483a      	ldr	r0, [pc, #232]	; (800152c <ssd1306_PrintPrincipalMenu+0x18c>)
 8001442:	f7ff fe91 	bl	8001168 <ssd1306_WriteString>

	    }
	    y += 10;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	330a      	adds	r3, #10
 800144a:	77fb      	strb	r3, [r7, #31]
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800144c:	7ffb      	ldrb	r3, [r7, #31]
 800144e:	4619      	mov	r1, r3
 8001450:	2002      	movs	r0, #2
 8001452:	f7ff feaf 	bl	80011b4 <ssd1306_SetCursor>
	    if(indexMenu==1){
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <ssd1306_PrintPrincipalMenu+0xca>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 800145c:	4a32      	ldr	r2, [pc, #200]	; (8001528 <ssd1306_PrintPrincipalMenu+0x188>)
 800145e:	2300      	movs	r3, #0
 8001460:	ca06      	ldmia	r2, {r1, r2}
 8001462:	4833      	ldr	r0, [pc, #204]	; (8001530 <ssd1306_PrintPrincipalMenu+0x190>)
 8001464:	f7ff fe80 	bl	8001168 <ssd1306_WriteString>
 8001468:	e005      	b.n	8001476 <ssd1306_PrintPrincipalMenu+0xd6>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <ssd1306_PrintPrincipalMenu+0x188>)
 800146c:	2301      	movs	r3, #1
 800146e:	ca06      	ldmia	r2, {r1, r2}
 8001470:	482f      	ldr	r0, [pc, #188]	; (8001530 <ssd1306_PrintPrincipalMenu+0x190>)
 8001472:	f7ff fe79 	bl	8001168 <ssd1306_WriteString>

	    }
		y += 10;
 8001476:	7ffb      	ldrb	r3, [r7, #31]
 8001478:	330a      	adds	r3, #10
 800147a:	77fb      	strb	r3, [r7, #31]

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800147c:	7ffb      	ldrb	r3, [r7, #31]
 800147e:	4619      	mov	r1, r3
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff fe97 	bl	80011b4 <ssd1306_SetCursor>
	    if(indexMenu==2){
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d106      	bne.n	800149a <ssd1306_PrintPrincipalMenu+0xfa>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 800148c:	4a26      	ldr	r2, [pc, #152]	; (8001528 <ssd1306_PrintPrincipalMenu+0x188>)
 800148e:	2300      	movs	r3, #0
 8001490:	ca06      	ldmia	r2, {r1, r2}
 8001492:	4828      	ldr	r0, [pc, #160]	; (8001534 <ssd1306_PrintPrincipalMenu+0x194>)
 8001494:	f7ff fe68 	bl	8001168 <ssd1306_WriteString>
 8001498:	e005      	b.n	80014a6 <ssd1306_PrintPrincipalMenu+0x106>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <ssd1306_PrintPrincipalMenu+0x188>)
 800149c:	2301      	movs	r3, #1
 800149e:	ca06      	ldmia	r2, {r1, r2}
 80014a0:	4824      	ldr	r0, [pc, #144]	; (8001534 <ssd1306_PrintPrincipalMenu+0x194>)
 80014a2:	f7ff fe61 	bl	8001168 <ssd1306_WriteString>

	    }
		y += 10;
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
 80014a8:	330a      	adds	r3, #10
 80014aa:	77fb      	strb	r3, [r7, #31]
		#endif




	         if(value >= 2850 && value <= 2950){
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f640 3221 	movw	r2, #2849	; 0xb21
 80014b2:	4293      	cmp	r3, r2
 80014b4:	dd0c      	ble.n	80014d0 <ssd1306_PrintPrincipalMenu+0x130>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f640 3286 	movw	r2, #2950	; 0xb86
 80014bc:	4293      	cmp	r3, r2
 80014be:	dc07      	bgt.n	80014d0 <ssd1306_PrintPrincipalMenu+0x130>
	            strcpy(stringDirection, "DERECHA");
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <ssd1306_PrintPrincipalMenu+0x198>)
 80014c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80014ce:	e01b      	b.n	8001508 <ssd1306_PrintPrincipalMenu+0x168>
	        }
	        else if(value >= 1850 && value <= 1950){
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f240 7239 	movw	r2, #1849	; 0x739
 80014d6:	4293      	cmp	r3, r2
 80014d8:	dd0b      	ble.n	80014f2 <ssd1306_PrintPrincipalMenu+0x152>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f240 729e 	movw	r2, #1950	; 0x79e
 80014e0:	4293      	cmp	r3, r2
 80014e2:	dc06      	bgt.n	80014f2 <ssd1306_PrintPrincipalMenu+0x152>
	            strcpy(stringDirection, "IZQUIERDA");
 80014e4:	4a15      	ldr	r2, [pc, #84]	; (800153c <ssd1306_PrintPrincipalMenu+0x19c>)
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ec:	c303      	stmia	r3!, {r0, r1}
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	e00a      	b.n	8001508 <ssd1306_PrintPrincipalMenu+0x168>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <ssd1306_PrintPrincipalMenu+0x1a0>)
 80014f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014fc:	6018      	str	r0, [r3, #0]
 80014fe:	3304      	adds	r3, #4
 8001500:	8019      	strh	r1, [r3, #0]
 8001502:	3302      	adds	r3, #2
 8001504:	0c0a      	lsrs	r2, r1, #16
 8001506:	701a      	strb	r2, [r3, #0]
	         //sprintf(screen_str, "%d", screen); // convert index to a string
	         //ssd1306_SetCursor(20, y); // set the cursor position
	         //ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
	         //   #endif

	    ssd1306_UpdateScreen();
 8001508:	f7ff fd2a 	bl	8000f60 <ssd1306_UpdateScreen>
}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000010 	.word	0x20000010
 8001518:	08015260 	.word	0x08015260
 800151c:	08019c1c 	.word	0x08019c1c
 8001520:	08019bdc 	.word	0x08019bdc
 8001524:	08019bfc 	.word	0x08019bfc
 8001528:	20000008 	.word	0x20000008
 800152c:	08015268 	.word	0x08015268
 8001530:	08015274 	.word	0x08015274
 8001534:	0801527c 	.word	0x0801527c
 8001538:	08015288 	.word	0x08015288
 800153c:	08015290 	.word	0x08015290
 8001540:	0801529c 	.word	0x0801529c

08001544 <ssd1306_PrintDashboardMenu>:

void ssd1306_PrintDashboardMenu(int value, int indexMenu, int screen){
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af02      	add	r7, sp, #8
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fcd8 	bl	8000f18 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(20, y);
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	4619      	mov	r1, r3
 800156c:	2014      	movs	r0, #20
 800156e:	f7ff fe21 	bl	80011b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 8001572:	4a73      	ldr	r2, [pc, #460]	; (8001740 <ssd1306_PrintDashboardMenu+0x1fc>)
 8001574:	2301      	movs	r3, #1
 8001576:	ca06      	ldmia	r2, {r1, r2}
 8001578:	4872      	ldr	r0, [pc, #456]	; (8001744 <ssd1306_PrintDashboardMenu+0x200>)
 800157a:	f7ff fdf5 	bl	8001168 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	3314      	adds	r3, #20
 8001582:	77fb      	strb	r3, [r7, #31]
	    #endif

		ssd1306_SetCursor(2, y);
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	4619      	mov	r1, r3
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff fe13 	bl	80011b4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11d      	bne.n	80015d0 <ssd1306_PrintDashboardMenu+0x8c>
			ssd1306_DrawBitmap(2,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 8001594:	7ff9      	ldrb	r1, [r7, #31]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2328      	movs	r3, #40	; 0x28
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2328      	movs	r3, #40	; 0x28
 80015a0:	4a69      	ldr	r2, [pc, #420]	; (8001748 <ssd1306_PrintDashboardMenu+0x204>)
 80015a2:	2002      	movs	r0, #2
 80015a4:	f7ff fe1e 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_1_RF,40,40, White);
 80015a8:	7ff9      	ldrb	r1, [r7, #31]
 80015aa:	2301      	movs	r3, #1
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	2328      	movs	r3, #40	; 0x28
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2328      	movs	r3, #40	; 0x28
 80015b4:	4a65      	ldr	r2, [pc, #404]	; (800174c <ssd1306_PrintDashboardMenu+0x208>)
 80015b6:	202c      	movs	r0, #44	; 0x2c
 80015b8:	f7ff fe14 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_3_CLOUD,40,40, White);
 80015bc:	7ff9      	ldrb	r1, [r7, #31]
 80015be:	2301      	movs	r3, #1
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2328      	movs	r3, #40	; 0x28
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2328      	movs	r3, #40	; 0x28
 80015c8:	4a61      	ldr	r2, [pc, #388]	; (8001750 <ssd1306_PrintDashboardMenu+0x20c>)
 80015ca:	2056      	movs	r0, #86	; 0x56
 80015cc:	f7ff fe0a 	bl	80011e4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==1){
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d11d      	bne.n	8001612 <ssd1306_PrintDashboardMenu+0xce>
			ssd1306_DrawBitmap(2,y,Dashboard_1_RF,40,40, White);
 80015d6:	7ff9      	ldrb	r1, [r7, #31]
 80015d8:	2301      	movs	r3, #1
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2328      	movs	r3, #40	; 0x28
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2328      	movs	r3, #40	; 0x28
 80015e2:	4a5c      	ldr	r2, [pc, #368]	; (8001754 <ssd1306_PrintDashboardMenu+0x210>)
 80015e4:	2002      	movs	r0, #2
 80015e6:	f7ff fdfd 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_3_CLOUD,40,40, White);
 80015ea:	7ff9      	ldrb	r1, [r7, #31]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2328      	movs	r3, #40	; 0x28
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2328      	movs	r3, #40	; 0x28
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <ssd1306_PrintDashboardMenu+0x214>)
 80015f8:	202c      	movs	r0, #44	; 0x2c
 80015fa:	f7ff fdf3 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_4_LORA,40,40, White);
 80015fe:	7ff9      	ldrb	r1, [r7, #31]
 8001600:	2301      	movs	r3, #1
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	2328      	movs	r3, #40	; 0x28
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2328      	movs	r3, #40	; 0x28
 800160a:	4a54      	ldr	r2, [pc, #336]	; (800175c <ssd1306_PrintDashboardMenu+0x218>)
 800160c:	2056      	movs	r0, #86	; 0x56
 800160e:	f7ff fde9 	bl	80011e4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==2){
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d11d      	bne.n	8001654 <ssd1306_PrintDashboardMenu+0x110>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 8001618:	7ff9      	ldrb	r1, [r7, #31]
 800161a:	2301      	movs	r3, #1
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2328      	movs	r3, #40	; 0x28
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2328      	movs	r3, #40	; 0x28
 8001624:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <ssd1306_PrintDashboardMenu+0x20c>)
 8001626:	2002      	movs	r0, #2
 8001628:	f7ff fddc 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_4_LORA,40,40, White);
 800162c:	7ff9      	ldrb	r1, [r7, #31]
 800162e:	2301      	movs	r3, #1
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	2328      	movs	r3, #40	; 0x28
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2328      	movs	r3, #40	; 0x28
 8001638:	4a49      	ldr	r2, [pc, #292]	; (8001760 <ssd1306_PrintDashboardMenu+0x21c>)
 800163a:	202c      	movs	r0, #44	; 0x2c
 800163c:	f7ff fdd2 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_5_BACK,40,40, White);
 8001640:	7ff9      	ldrb	r1, [r7, #31]
 8001642:	2301      	movs	r3, #1
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	2328      	movs	r3, #40	; 0x28
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2328      	movs	r3, #40	; 0x28
 800164c:	4a45      	ldr	r2, [pc, #276]	; (8001764 <ssd1306_PrintDashboardMenu+0x220>)
 800164e:	2056      	movs	r0, #86	; 0x56
 8001650:	f7ff fdc8 	bl	80011e4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==3){
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d11d      	bne.n	8001696 <ssd1306_PrintDashboardMenu+0x152>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 800165a:	7ff9      	ldrb	r1, [r7, #31]
 800165c:	2301      	movs	r3, #1
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	2328      	movs	r3, #40	; 0x28
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2328      	movs	r3, #40	; 0x28
 8001666:	4a3a      	ldr	r2, [pc, #232]	; (8001750 <ssd1306_PrintDashboardMenu+0x20c>)
 8001668:	2002      	movs	r0, #2
 800166a:	f7ff fdbb 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_5_BACK,40,40, White);
 800166e:	7ff9      	ldrb	r1, [r7, #31]
 8001670:	2301      	movs	r3, #1
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2328      	movs	r3, #40	; 0x28
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2328      	movs	r3, #40	; 0x28
 800167a:	4a3b      	ldr	r2, [pc, #236]	; (8001768 <ssd1306_PrintDashboardMenu+0x224>)
 800167c:	202c      	movs	r0, #44	; 0x2c
 800167e:	f7ff fdb1 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 8001682:	7ff9      	ldrb	r1, [r7, #31]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2328      	movs	r3, #40	; 0x28
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2328      	movs	r3, #40	; 0x28
 800168e:	4a2e      	ldr	r2, [pc, #184]	; (8001748 <ssd1306_PrintDashboardMenu+0x204>)
 8001690:	2056      	movs	r0, #86	; 0x56
 8001692:	f7ff fda7 	bl	80011e4 <ssd1306_DrawBitmap>
		}
		if(indexMenu==4){
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d11d      	bne.n	80016d8 <ssd1306_PrintDashboardMenu+0x194>
			ssd1306_DrawBitmap(2,y,Dashboard_5_BACK,40,40, White);
 800169c:	7ff9      	ldrb	r1, [r7, #31]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	2328      	movs	r3, #40	; 0x28
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2328      	movs	r3, #40	; 0x28
 80016a8:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <ssd1306_PrintDashboardMenu+0x220>)
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff fd9a 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_2_BLOCKCHAIN,40,40, White);
 80016b0:	7ff9      	ldrb	r1, [r7, #31]
 80016b2:	2301      	movs	r3, #1
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	2328      	movs	r3, #40	; 0x28
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2328      	movs	r3, #40	; 0x28
 80016bc:	4a2b      	ldr	r2, [pc, #172]	; (800176c <ssd1306_PrintDashboardMenu+0x228>)
 80016be:	202c      	movs	r0, #44	; 0x2c
 80016c0:	f7ff fd90 	bl	80011e4 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_1_RF,40,40, White);
 80016c4:	7ff9      	ldrb	r1, [r7, #31]
 80016c6:	2301      	movs	r3, #1
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	2328      	movs	r3, #40	; 0x28
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2328      	movs	r3, #40	; 0x28
 80016d0:	4a20      	ldr	r2, [pc, #128]	; (8001754 <ssd1306_PrintDashboardMenu+0x210>)
 80016d2:	2056      	movs	r0, #86	; 0x56
 80016d4:	f7ff fd86 	bl	80011e4 <ssd1306_DrawBitmap>
		}
		 if(value >= 2850 && value <= 2950){
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f640 3221 	movw	r2, #2849	; 0xb21
 80016de:	4293      	cmp	r3, r2
 80016e0:	dd0c      	ble.n	80016fc <ssd1306_PrintDashboardMenu+0x1b8>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f640 3286 	movw	r2, #2950	; 0xb86
 80016e8:	4293      	cmp	r3, r2
 80016ea:	dc07      	bgt.n	80016fc <ssd1306_PrintDashboardMenu+0x1b8>
			strcpy(stringDirection, "DERECHA");
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <ssd1306_PrintDashboardMenu+0x22c>)
 80016f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80016fa:	e01b      	b.n	8001734 <ssd1306_PrintDashboardMenu+0x1f0>
		}
		else if(value >= 1850 && value <= 1950){
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f240 7239 	movw	r2, #1849	; 0x739
 8001702:	4293      	cmp	r3, r2
 8001704:	dd0b      	ble.n	800171e <ssd1306_PrintDashboardMenu+0x1da>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f240 729e 	movw	r2, #1950	; 0x79e
 800170c:	4293      	cmp	r3, r2
 800170e:	dc06      	bgt.n	800171e <ssd1306_PrintDashboardMenu+0x1da>
			strcpy(stringDirection, "IZQUIERDA");
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <ssd1306_PrintDashboardMenu+0x230>)
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	ca07      	ldmia	r2, {r0, r1, r2}
 8001718:	c303      	stmia	r3!, {r0, r1}
 800171a:	801a      	strh	r2, [r3, #0]
 800171c:	e00a      	b.n	8001734 <ssd1306_PrintDashboardMenu+0x1f0>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <ssd1306_PrintDashboardMenu+0x234>)
 8001724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001728:	6018      	str	r0, [r3, #0]
 800172a:	3304      	adds	r3, #4
 800172c:	8019      	strh	r1, [r3, #0]
 800172e:	3302      	adds	r3, #2
 8001730:	0c0a      	lsrs	r2, r1, #16
 8001732:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001734:	f7ff fc14 	bl	8000f60 <ssd1306_UpdateScreen>
}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000010 	.word	0x20000010
 8001744:	08015228 	.word	0x08015228
 8001748:	08019dcc 	.word	0x08019dcc
 800174c:	0801a0ec 	.word	0x0801a0ec
 8001750:	08019e94 	.word	0x08019e94
 8001754:	08019d04 	.word	0x08019d04
 8001758:	0801a27c 	.word	0x0801a27c
 800175c:	08019c3c 	.word	0x08019c3c
 8001760:	0801a024 	.word	0x0801a024
 8001764:	08019f5c 	.word	0x08019f5c
 8001768:	0801a344 	.word	0x0801a344
 800176c:	0801a1b4 	.word	0x0801a1b4
 8001770:	08015288 	.word	0x08015288
 8001774:	08015290 	.word	0x08015290
 8001778:	0801529c 	.word	0x0801529c

0800177c <ssd1306_PrintEnergyMenu>:

void ssd1306_PrintEnergyMenu(int value, int indexMenu, int screen){
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fbbc 	bl	8000f18 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80017a0:	7ffb      	ldrb	r3, [r7, #31]
 80017a2:	4619      	mov	r1, r3
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff fd05 	bl	80011b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("ENERGY", Font_11x18, White);
 80017aa:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <ssd1306_PrintEnergyMenu+0x138>)
 80017ac:	2301      	movs	r3, #1
 80017ae:	ca06      	ldmia	r2, {r1, r2}
 80017b0:	4841      	ldr	r0, [pc, #260]	; (80018b8 <ssd1306_PrintEnergyMenu+0x13c>)
 80017b2:	f7ff fcd9 	bl	8001168 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	3314      	adds	r3, #20
 80017ba:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
 80017be:	4619      	mov	r1, r3
 80017c0:	2002      	movs	r0, #2
 80017c2:	f7ff fcf7 	bl	80011b4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d106      	bne.n	80017da <ssd1306_PrintEnergyMenu+0x5e>
	        ssd1306_WriteString("Power Supply", Font_7x10, Black);
 80017cc:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <ssd1306_PrintEnergyMenu+0x140>)
 80017ce:	2300      	movs	r3, #0
 80017d0:	ca06      	ldmia	r2, {r1, r2}
 80017d2:	483b      	ldr	r0, [pc, #236]	; (80018c0 <ssd1306_PrintEnergyMenu+0x144>)
 80017d4:	f7ff fcc8 	bl	8001168 <ssd1306_WriteString>
 80017d8:	e005      	b.n	80017e6 <ssd1306_PrintEnergyMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("Power Supply", Font_7x10, White);
 80017da:	4a38      	ldr	r2, [pc, #224]	; (80018bc <ssd1306_PrintEnergyMenu+0x140>)
 80017dc:	2301      	movs	r3, #1
 80017de:	ca06      	ldmia	r2, {r1, r2}
 80017e0:	4837      	ldr	r0, [pc, #220]	; (80018c0 <ssd1306_PrintEnergyMenu+0x144>)
 80017e2:	f7ff fcc1 	bl	8001168 <ssd1306_WriteString>
	    }
		y += 10;
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	330a      	adds	r3, #10
 80017ea:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
 80017ee:	4619      	mov	r1, r3
 80017f0:	2002      	movs	r0, #2
 80017f2:	f7ff fcdf 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==1){
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <ssd1306_PrintEnergyMenu+0x8e>
	        ssd1306_WriteString("Status: 80%", Font_7x10, Black);
 80017fc:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <ssd1306_PrintEnergyMenu+0x140>)
 80017fe:	2300      	movs	r3, #0
 8001800:	ca06      	ldmia	r2, {r1, r2}
 8001802:	4830      	ldr	r0, [pc, #192]	; (80018c4 <ssd1306_PrintEnergyMenu+0x148>)
 8001804:	f7ff fcb0 	bl	8001168 <ssd1306_WriteString>
 8001808:	e005      	b.n	8001816 <ssd1306_PrintEnergyMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Status: 80%", Font_7x10, White);
 800180a:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <ssd1306_PrintEnergyMenu+0x140>)
 800180c:	2301      	movs	r3, #1
 800180e:	ca06      	ldmia	r2, {r1, r2}
 8001810:	482c      	ldr	r0, [pc, #176]	; (80018c4 <ssd1306_PrintEnergyMenu+0x148>)
 8001812:	f7ff fca9 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	330a      	adds	r3, #10
 800181a:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800181c:	7ffb      	ldrb	r3, [r7, #31]
 800181e:	4619      	mov	r1, r3
 8001820:	2002      	movs	r0, #2
 8001822:	f7ff fcc7 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d106      	bne.n	800183a <ssd1306_PrintEnergyMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 800182c:	4a23      	ldr	r2, [pc, #140]	; (80018bc <ssd1306_PrintEnergyMenu+0x140>)
 800182e:	2300      	movs	r3, #0
 8001830:	ca06      	ldmia	r2, {r1, r2}
 8001832:	4825      	ldr	r0, [pc, #148]	; (80018c8 <ssd1306_PrintEnergyMenu+0x14c>)
 8001834:	f7ff fc98 	bl	8001168 <ssd1306_WriteString>
 8001838:	e005      	b.n	8001846 <ssd1306_PrintEnergyMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 800183a:	4a20      	ldr	r2, [pc, #128]	; (80018bc <ssd1306_PrintEnergyMenu+0x140>)
 800183c:	2301      	movs	r3, #1
 800183e:	ca06      	ldmia	r2, {r1, r2}
 8001840:	4821      	ldr	r0, [pc, #132]	; (80018c8 <ssd1306_PrintEnergyMenu+0x14c>)
 8001842:	f7ff fc91 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	330a      	adds	r3, #10
 800184a:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f640 3221 	movw	r2, #2849	; 0xb21
 8001852:	4293      	cmp	r3, r2
 8001854:	dd0c      	ble.n	8001870 <ssd1306_PrintEnergyMenu+0xf4>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f640 3286 	movw	r2, #2950	; 0xb86
 800185c:	4293      	cmp	r3, r2
 800185e:	dc07      	bgt.n	8001870 <ssd1306_PrintEnergyMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4a19      	ldr	r2, [pc, #100]	; (80018cc <ssd1306_PrintEnergyMenu+0x150>)
 8001866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800186a:	e883 0003 	stmia.w	r3, {r0, r1}
 800186e:	e01b      	b.n	80018a8 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f240 7239 	movw	r2, #1849	; 0x739
 8001876:	4293      	cmp	r3, r2
 8001878:	dd0b      	ble.n	8001892 <ssd1306_PrintEnergyMenu+0x116>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001880:	4293      	cmp	r3, r2
 8001882:	dc06      	bgt.n	8001892 <ssd1306_PrintEnergyMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <ssd1306_PrintEnergyMenu+0x154>)
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	ca07      	ldmia	r2, {r0, r1, r2}
 800188c:	c303      	stmia	r3!, {r0, r1}
 800188e:	801a      	strh	r2, [r3, #0]
 8001890:	e00a      	b.n	80018a8 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <ssd1306_PrintEnergyMenu+0x158>)
 8001898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189c:	6018      	str	r0, [r3, #0]
 800189e:	3304      	adds	r3, #4
 80018a0:	8019      	strh	r1, [r3, #0]
 80018a2:	3302      	adds	r3, #2
 80018a4:	0c0a      	lsrs	r2, r1, #16
 80018a6:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 80018a8:	f7ff fb5a 	bl	8000f60 <ssd1306_UpdateScreen>
}
 80018ac:	bf00      	nop
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000010 	.word	0x20000010
 80018b8:	08015274 	.word	0x08015274
 80018bc:	20000008 	.word	0x20000008
 80018c0:	080152a4 	.word	0x080152a4
 80018c4:	080152b4 	.word	0x080152b4
 80018c8:	080152c0 	.word	0x080152c0
 80018cc:	08015288 	.word	0x08015288
 80018d0:	08015290 	.word	0x08015290
 80018d4:	0801529c 	.word	0x0801529c

080018d8 <ssd1306_PrintRFMenu>:

void ssd1306_PrintRFMenu(int value, int indexMenu, int screen){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
		 uint8_t y = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	f107 0318 	add.w	r3, r7, #24
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff fb0e 	bl	8000f18 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	4619      	mov	r1, r3
 8001900:	2023      	movs	r0, #35	; 0x23
 8001902:	f7ff fc57 	bl	80011b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("BROADCAST", Font_7x10, White);
 8001906:	4a5a      	ldr	r2, [pc, #360]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 8001908:	2301      	movs	r3, #1
 800190a:	ca06      	ldmia	r2, {r1, r2}
 800190c:	4859      	ldr	r0, [pc, #356]	; (8001a74 <ssd1306_PrintRFMenu+0x19c>)
 800190e:	f7ff fc2b 	bl	8001168 <ssd1306_WriteString>
	    y += 10;
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	330a      	adds	r3, #10
 8001916:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	4619      	mov	r1, r3
 800191c:	2002      	movs	r0, #2
 800191e:	f7ff fc49 	bl	80011b4 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d106      	bne.n	8001936 <ssd1306_PrintRFMenu+0x5e>
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, Black);
 8001928:	4a51      	ldr	r2, [pc, #324]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 800192a:	2300      	movs	r3, #0
 800192c:	ca06      	ldmia	r2, {r1, r2}
 800192e:	4852      	ldr	r0, [pc, #328]	; (8001a78 <ssd1306_PrintRFMenu+0x1a0>)
 8001930:	f7ff fc1a 	bl	8001168 <ssd1306_WriteString>
 8001934:	e005      	b.n	8001942 <ssd1306_PrintRFMenu+0x6a>
			}
			else{
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, White);
 8001936:	4a4e      	ldr	r2, [pc, #312]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 8001938:	2301      	movs	r3, #1
 800193a:	ca06      	ldmia	r2, {r1, r2}
 800193c:	484e      	ldr	r0, [pc, #312]	; (8001a78 <ssd1306_PrintRFMenu+0x1a0>)
 800193e:	f7ff fc13 	bl	8001168 <ssd1306_WriteString>
			}
		y += 10;
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	330a      	adds	r3, #10
 8001946:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001948:	7ffb      	ldrb	r3, [r7, #31]
 800194a:	4619      	mov	r1, r3
 800194c:	2002      	movs	r0, #2
 800194e:	f7ff fc31 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d106      	bne.n	8001966 <ssd1306_PrintRFMenu+0x8e>
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, Black);
 8001958:	4a45      	ldr	r2, [pc, #276]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 800195a:	2300      	movs	r3, #0
 800195c:	ca06      	ldmia	r2, {r1, r2}
 800195e:	4847      	ldr	r0, [pc, #284]	; (8001a7c <ssd1306_PrintRFMenu+0x1a4>)
 8001960:	f7ff fc02 	bl	8001168 <ssd1306_WriteString>
 8001964:	e005      	b.n	8001972 <ssd1306_PrintRFMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, White);
 8001966:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 8001968:	2301      	movs	r3, #1
 800196a:	ca06      	ldmia	r2, {r1, r2}
 800196c:	4843      	ldr	r0, [pc, #268]	; (8001a7c <ssd1306_PrintRFMenu+0x1a4>)
 800196e:	f7ff fbfb 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 8001972:	7ffb      	ldrb	r3, [r7, #31]
 8001974:	330a      	adds	r3, #10
 8001976:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetCursor(2, y);
 8001978:	7ffb      	ldrb	r3, [r7, #31]
 800197a:	4619      	mov	r1, r3
 800197c:	2002      	movs	r0, #2
 800197e:	f7ff fc19 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d106      	bne.n	8001996 <ssd1306_PrintRFMenu+0xbe>
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, Black);
 8001988:	4a39      	ldr	r2, [pc, #228]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 800198a:	2300      	movs	r3, #0
 800198c:	ca06      	ldmia	r2, {r1, r2}
 800198e:	483c      	ldr	r0, [pc, #240]	; (8001a80 <ssd1306_PrintRFMenu+0x1a8>)
 8001990:	f7ff fbea 	bl	8001168 <ssd1306_WriteString>
 8001994:	e005      	b.n	80019a2 <ssd1306_PrintRFMenu+0xca>
		}
		else{
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, White);
 8001996:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 8001998:	2301      	movs	r3, #1
 800199a:	ca06      	ldmia	r2, {r1, r2}
 800199c:	4838      	ldr	r0, [pc, #224]	; (8001a80 <ssd1306_PrintRFMenu+0x1a8>)
 800199e:	f7ff fbe3 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	330a      	adds	r3, #10
 80019a6:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 80019a8:	7ffb      	ldrb	r3, [r7, #31]
 80019aa:	4619      	mov	r1, r3
 80019ac:	2002      	movs	r0, #2
 80019ae:	f7ff fc01 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==3){
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d106      	bne.n	80019c6 <ssd1306_PrintRFMenu+0xee>
	        ssd1306_WriteString("BER: 0.5", Font_7x10, Black);
 80019b8:	4a2d      	ldr	r2, [pc, #180]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 80019ba:	2300      	movs	r3, #0
 80019bc:	ca06      	ldmia	r2, {r1, r2}
 80019be:	4831      	ldr	r0, [pc, #196]	; (8001a84 <ssd1306_PrintRFMenu+0x1ac>)
 80019c0:	f7ff fbd2 	bl	8001168 <ssd1306_WriteString>
 80019c4:	e005      	b.n	80019d2 <ssd1306_PrintRFMenu+0xfa>
		}
		else{
	        ssd1306_WriteString("BER: 0.5", Font_7x10, White);
 80019c6:	4a2a      	ldr	r2, [pc, #168]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 80019c8:	2301      	movs	r3, #1
 80019ca:	ca06      	ldmia	r2, {r1, r2}
 80019cc:	482d      	ldr	r0, [pc, #180]	; (8001a84 <ssd1306_PrintRFMenu+0x1ac>)
 80019ce:	f7ff fbcb 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	330a      	adds	r3, #10
 80019d6:	77fb      	strb	r3, [r7, #31]

		

		ssd1306_SetCursor(2, y);
 80019d8:	7ffb      	ldrb	r3, [r7, #31]
 80019da:	4619      	mov	r1, r3
 80019dc:	2002      	movs	r0, #2
 80019de:	f7ff fbe9 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==4){
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d106      	bne.n	80019f6 <ssd1306_PrintRFMenu+0x11e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 80019e8:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 80019ea:	2300      	movs	r3, #0
 80019ec:	ca06      	ldmia	r2, {r1, r2}
 80019ee:	4826      	ldr	r0, [pc, #152]	; (8001a88 <ssd1306_PrintRFMenu+0x1b0>)
 80019f0:	f7ff fbba 	bl	8001168 <ssd1306_WriteString>
 80019f4:	e005      	b.n	8001a02 <ssd1306_PrintRFMenu+0x12a>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 80019f6:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <ssd1306_PrintRFMenu+0x198>)
 80019f8:	2301      	movs	r3, #1
 80019fa:	ca06      	ldmia	r2, {r1, r2}
 80019fc:	4822      	ldr	r0, [pc, #136]	; (8001a88 <ssd1306_PrintRFMenu+0x1b0>)
 80019fe:	f7ff fbb3 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 8001a02:	7ffb      	ldrb	r3, [r7, #31]
 8001a04:	330a      	adds	r3, #10
 8001a06:	77fb      	strb	r3, [r7, #31]

		



		 if(value >= 2850 && value <= 2950){
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f640 3221 	movw	r2, #2849	; 0xb21
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	dd0c      	ble.n	8001a2c <ssd1306_PrintRFMenu+0x154>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f640 3286 	movw	r2, #2950	; 0xb86
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	dc07      	bgt.n	8001a2c <ssd1306_PrintRFMenu+0x154>
			strcpy(stringDirection, "DERECHA");
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <ssd1306_PrintRFMenu+0x1b4>)
 8001a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a26:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a2a:	e01b      	b.n	8001a64 <ssd1306_PrintRFMenu+0x18c>
		}
		else if(value >= 1850 && value <= 1950){
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f240 7239 	movw	r2, #1849	; 0x739
 8001a32:	4293      	cmp	r3, r2
 8001a34:	dd0b      	ble.n	8001a4e <ssd1306_PrintRFMenu+0x176>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f240 729e 	movw	r2, #1950	; 0x79e
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	dc06      	bgt.n	8001a4e <ssd1306_PrintRFMenu+0x176>
			strcpy(stringDirection, "IZQUIERDA");
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <ssd1306_PrintRFMenu+0x1b8>)
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a48:	c303      	stmia	r3!, {r0, r1}
 8001a4a:	801a      	strh	r2, [r3, #0]
 8001a4c:	e00a      	b.n	8001a64 <ssd1306_PrintRFMenu+0x18c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <ssd1306_PrintRFMenu+0x1bc>)
 8001a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a58:	6018      	str	r0, [r3, #0]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	8019      	strh	r1, [r3, #0]
 8001a5e:	3302      	adds	r3, #2
 8001a60:	0c0a      	lsrs	r2, r1, #16
 8001a62:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001a64:	f7ff fa7c 	bl	8000f60 <ssd1306_UpdateScreen>
}
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000008 	.word	0x20000008
 8001a74:	080152c8 	.word	0x080152c8
 8001a78:	080152d4 	.word	0x080152d4
 8001a7c:	080152e8 	.word	0x080152e8
 8001a80:	080152fc 	.word	0x080152fc
 8001a84:	08015308 	.word	0x08015308
 8001a88:	080152c0 	.word	0x080152c0
 8001a8c:	08015288 	.word	0x08015288
 8001a90:	08015290 	.word	0x08015290
 8001a94:	0801529c 	.word	0x0801529c

08001a98 <ssd1306_PrintCloudMenu>:
void ssd1306_PrintCloudMenu(int value, int indexMenu, int screen, uint32_t  IPv4, uint32_t  Gateway){
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b093      	sub	sp, #76	; 0x4c
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
		 uint8_t y = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	    char stringDirection[10] = "";
 8001aac:	2300      	movs	r3, #0
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff fa2c 	bl	8000f18 <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	2023      	movs	r0, #35	; 0x23
 8001ac8:	f7ff fb74 	bl	80011b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("CLOUD", Font_7x10, White);
 8001acc:	4a7f      	ldr	r2, [pc, #508]	; (8001ccc <ssd1306_PrintCloudMenu+0x234>)
 8001ace:	2301      	movs	r3, #1
 8001ad0:	ca06      	ldmia	r2, {r1, r2}
 8001ad2:	487f      	ldr	r0, [pc, #508]	; (8001cd0 <ssd1306_PrintCloudMenu+0x238>)
 8001ad4:	f7ff fb48 	bl	8001168 <ssd1306_WriteString>
	    y += 10;
 8001ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001adc:	330a      	adds	r3, #10
 8001ade:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		char ip_string[16]; // arreglo de caracteres para almacenar la dirección IP como cadena

		// Convertir la dirección IP a una cadena de caracteres
		sprintf(ip_string, "%d.%d.%d.%d", (int)((IPv4>>24)&0xff), (int)((IPv4>>16)&0xff), (int)((IPv4>>8)&0xff), (int)(IPv4&0xff));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	0e1b      	lsrs	r3, r3, #24
 8001ae6:	461c      	mov	r4, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	b2d9      	uxtb	r1, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	460b      	mov	r3, r1
 8001b02:	4622      	mov	r2, r4
 8001b04:	4973      	ldr	r1, [pc, #460]	; (8001cd4 <ssd1306_PrintCloudMenu+0x23c>)
 8001b06:	f012 f9d5 	bl	8013eb4 <siprintf>

		char ip_gateway[16]; // arreglo de caracteres para almacenar la dirección IP como cadena

		// Convertir la dirección IP a una cadena de caracteres
		sprintf(ip_gateway, "%d.%d.%d.%d", (int)((Gateway>>24)&0xff), (int)((Gateway>>16)&0xff), (int)((Gateway>>8)&0xff), (int)(Gateway&0xff));
 8001b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b0c:	0e1b      	lsrs	r3, r3, #24
 8001b0e:	461c      	mov	r4, r3
 8001b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	b2d9      	uxtb	r1, r3
 8001b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f107 0014 	add.w	r0, r7, #20
 8001b24:	9201      	str	r2, [sp, #4]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	4969      	ldr	r1, [pc, #420]	; (8001cd4 <ssd1306_PrintCloudMenu+0x23c>)
 8001b2e:	f012 f9c1 	bl	8013eb4 <siprintf>


		ssd1306_SetCursor(2, y);
 8001b32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b36:	4619      	mov	r1, r3
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7ff fb3b 	bl	80011b4 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d118      	bne.n	8001b76 <ssd1306_PrintCloudMenu+0xde>
				ssd1306_WriteString("IPv4:", Font_7x10, Black);
 8001b44:	4a61      	ldr	r2, [pc, #388]	; (8001ccc <ssd1306_PrintCloudMenu+0x234>)
 8001b46:	2300      	movs	r3, #0
 8001b48:	ca06      	ldmia	r2, {r1, r2}
 8001b4a:	4863      	ldr	r0, [pc, #396]	; (8001cd8 <ssd1306_PrintCloudMenu+0x240>)
 8001b4c:	f7ff fb0c 	bl	8001168 <ssd1306_WriteString>
				y += 10;
 8001b50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b54:	330a      	adds	r3, #10
 8001b56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				ssd1306_SetCursor(2, y);
 8001b5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b5e:	4619      	mov	r1, r3
 8001b60:	2002      	movs	r0, #2
 8001b62:	f7ff fb27 	bl	80011b4 <ssd1306_SetCursor>
				ssd1306_WriteString(ip_string, Font_6x8, Black);
 8001b66:	4a5d      	ldr	r2, [pc, #372]	; (8001cdc <ssd1306_PrintCloudMenu+0x244>)
 8001b68:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	ca06      	ldmia	r2, {r1, r2}
 8001b70:	f7ff fafa 	bl	8001168 <ssd1306_WriteString>
 8001b74:	e017      	b.n	8001ba6 <ssd1306_PrintCloudMenu+0x10e>

			}
			else{
				ssd1306_WriteString("IPV4:", Font_7x10, White);
 8001b76:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <ssd1306_PrintCloudMenu+0x234>)
 8001b78:	2301      	movs	r3, #1
 8001b7a:	ca06      	ldmia	r2, {r1, r2}
 8001b7c:	4858      	ldr	r0, [pc, #352]	; (8001ce0 <ssd1306_PrintCloudMenu+0x248>)
 8001b7e:	f7ff faf3 	bl	8001168 <ssd1306_WriteString>
				y += 10;
 8001b82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b86:	330a      	adds	r3, #10
 8001b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				ssd1306_SetCursor(2, y);
 8001b8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b90:	4619      	mov	r1, r3
 8001b92:	2002      	movs	r0, #2
 8001b94:	f7ff fb0e 	bl	80011b4 <ssd1306_SetCursor>
				ssd1306_WriteString(ip_string, Font_6x8, White);
 8001b98:	4a50      	ldr	r2, [pc, #320]	; (8001cdc <ssd1306_PrintCloudMenu+0x244>)
 8001b9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	ca06      	ldmia	r2, {r1, r2}
 8001ba2:	f7ff fae1 	bl	8001168 <ssd1306_WriteString>
			}
		y += 10;
 8001ba6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001baa:	330a      	adds	r3, #10
 8001bac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		
		ssd1306_SetCursor(2, y);
 8001bb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f7ff fafc 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d118      	bne.n	8001bf4 <ssd1306_PrintCloudMenu+0x15c>
			ssd1306_WriteString("Gateway:", Font_7x10, Black);
 8001bc2:	4a42      	ldr	r2, [pc, #264]	; (8001ccc <ssd1306_PrintCloudMenu+0x234>)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	ca06      	ldmia	r2, {r1, r2}
 8001bc8:	4846      	ldr	r0, [pc, #280]	; (8001ce4 <ssd1306_PrintCloudMenu+0x24c>)
 8001bca:	f7ff facd 	bl	8001168 <ssd1306_WriteString>
			y += 10;
 8001bce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bd2:	330a      	adds	r3, #10
 8001bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ssd1306_SetCursor(2, y);
 8001bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7ff fae8 	bl	80011b4 <ssd1306_SetCursor>
			ssd1306_WriteString(ip_gateway, Font_6x8, Black);	
 8001be4:	4a3d      	ldr	r2, [pc, #244]	; (8001cdc <ssd1306_PrintCloudMenu+0x244>)
 8001be6:	f107 0014 	add.w	r0, r7, #20
 8001bea:	2300      	movs	r3, #0
 8001bec:	ca06      	ldmia	r2, {r1, r2}
 8001bee:	f7ff fabb 	bl	8001168 <ssd1306_WriteString>
 8001bf2:	e017      	b.n	8001c24 <ssd1306_PrintCloudMenu+0x18c>
		}
		else{
		ssd1306_WriteString("Gateway:", Font_7x10, White);
 8001bf4:	4a35      	ldr	r2, [pc, #212]	; (8001ccc <ssd1306_PrintCloudMenu+0x234>)
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	ca06      	ldmia	r2, {r1, r2}
 8001bfa:	483a      	ldr	r0, [pc, #232]	; (8001ce4 <ssd1306_PrintCloudMenu+0x24c>)
 8001bfc:	f7ff fab4 	bl	8001168 <ssd1306_WriteString>
			y += 10;
 8001c00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c04:	330a      	adds	r3, #10
 8001c06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ssd1306_SetCursor(2, y);
 8001c0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c0e:	4619      	mov	r1, r3
 8001c10:	2002      	movs	r0, #2
 8001c12:	f7ff facf 	bl	80011b4 <ssd1306_SetCursor>
			ssd1306_WriteString(ip_gateway, Font_6x8, White);
 8001c16:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <ssd1306_PrintCloudMenu+0x244>)
 8001c18:	f107 0014 	add.w	r0, r7, #20
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	ca06      	ldmia	r2, {r1, r2}
 8001c20:	f7ff faa2 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 8001c24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c28:	330a      	adds	r3, #10
 8001c2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		y += 10; */

		

		ssd1306_SetCursor(2, y);
 8001c2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c32:	4619      	mov	r1, r3
 8001c34:	2002      	movs	r0, #2
 8001c36:	f7ff fabd 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d106      	bne.n	8001c4e <ssd1306_PrintCloudMenu+0x1b6>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <ssd1306_PrintCloudMenu+0x234>)
 8001c42:	2300      	movs	r3, #0
 8001c44:	ca06      	ldmia	r2, {r1, r2}
 8001c46:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <ssd1306_PrintCloudMenu+0x250>)
 8001c48:	f7ff fa8e 	bl	8001168 <ssd1306_WriteString>
 8001c4c:	e005      	b.n	8001c5a <ssd1306_PrintCloudMenu+0x1c2>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <ssd1306_PrintCloudMenu+0x234>)
 8001c50:	2301      	movs	r3, #1
 8001c52:	ca06      	ldmia	r2, {r1, r2}
 8001c54:	4824      	ldr	r0, [pc, #144]	; (8001ce8 <ssd1306_PrintCloudMenu+0x250>)
 8001c56:	f7ff fa87 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 8001c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c5e:	330a      	adds	r3, #10
 8001c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		 if(value >= 2850 && value <= 2950){
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f640 3221 	movw	r2, #2849	; 0xb21
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	dd0c      	ble.n	8001c88 <ssd1306_PrintCloudMenu+0x1f0>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f640 3286 	movw	r2, #2950	; 0xb86
 8001c74:	4293      	cmp	r3, r2
 8001c76:	dc07      	bgt.n	8001c88 <ssd1306_PrintCloudMenu+0x1f0>
			strcpy(stringDirection, "DERECHA");
 8001c78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <ssd1306_PrintCloudMenu+0x254>)
 8001c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c82:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c86:	e01b      	b.n	8001cc0 <ssd1306_PrintCloudMenu+0x228>
		}
		else if(value >= 1850 && value <= 1950){
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f240 7239 	movw	r2, #1849	; 0x739
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	dd0b      	ble.n	8001caa <ssd1306_PrintCloudMenu+0x212>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f240 729e 	movw	r2, #1950	; 0x79e
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	dc06      	bgt.n	8001caa <ssd1306_PrintCloudMenu+0x212>
			strcpy(stringDirection, "IZQUIERDA");
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <ssd1306_PrintCloudMenu+0x258>)
 8001c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ca4:	c303      	stmia	r3!, {r0, r1}
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	e00a      	b.n	8001cc0 <ssd1306_PrintCloudMenu+0x228>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001caa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <ssd1306_PrintCloudMenu+0x25c>)
 8001cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb4:	6018      	str	r0, [r3, #0]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	8019      	strh	r1, [r3, #0]
 8001cba:	3302      	adds	r3, #2
 8001cbc:	0c0a      	lsrs	r2, r1, #16
 8001cbe:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001cc0:	f7ff f94e 	bl	8000f60 <ssd1306_UpdateScreen>
}
 8001cc4:	bf00      	nop
 8001cc6:	3744      	adds	r7, #68	; 0x44
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	08015314 	.word	0x08015314
 8001cd4:	0801531c 	.word	0x0801531c
 8001cd8:	08015328 	.word	0x08015328
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	08015330 	.word	0x08015330
 8001ce4:	08015338 	.word	0x08015338
 8001ce8:	080152c0 	.word	0x080152c0
 8001cec:	08015288 	.word	0x08015288
 8001cf0:	08015290 	.word	0x08015290
 8001cf4:	0801529c 	.word	0x0801529c

08001cf8 <ssd1306_PrintSettingsMenu>:

void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	f107 0318 	add.w	r3, r7, #24
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff f8fe 	bl	8000f18 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff fa47 	bl	80011b4 <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 8001d26:	4a42      	ldr	r2, [pc, #264]	; (8001e30 <ssd1306_PrintSettingsMenu+0x138>)
 8001d28:	2301      	movs	r3, #1
 8001d2a:	ca06      	ldmia	r2, {r1, r2}
 8001d2c:	4841      	ldr	r0, [pc, #260]	; (8001e34 <ssd1306_PrintSettingsMenu+0x13c>)
 8001d2e:	f7ff fa1b 	bl	8001168 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	3314      	adds	r3, #20
 8001d36:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001d38:	7ffb      	ldrb	r3, [r7, #31]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	f7ff fa39 	bl	80011b4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d106      	bne.n	8001d56 <ssd1306_PrintSettingsMenu+0x5e>
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, Black);
 8001d48:	4a3b      	ldr	r2, [pc, #236]	; (8001e38 <ssd1306_PrintSettingsMenu+0x140>)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	ca06      	ldmia	r2, {r1, r2}
 8001d4e:	483b      	ldr	r0, [pc, #236]	; (8001e3c <ssd1306_PrintSettingsMenu+0x144>)
 8001d50:	f7ff fa0a 	bl	8001168 <ssd1306_WriteString>
 8001d54:	e005      	b.n	8001d62 <ssd1306_PrintSettingsMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, White);
 8001d56:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <ssd1306_PrintSettingsMenu+0x140>)
 8001d58:	2301      	movs	r3, #1
 8001d5a:	ca06      	ldmia	r2, {r1, r2}
 8001d5c:	4837      	ldr	r0, [pc, #220]	; (8001e3c <ssd1306_PrintSettingsMenu+0x144>)
 8001d5e:	f7ff fa03 	bl	8001168 <ssd1306_WriteString>
	    }
		y += 10;
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
 8001d64:	330a      	adds	r3, #10
 8001d66:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f7ff fa21 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d106      	bne.n	8001d86 <ssd1306_PrintSettingsMenu+0x8e>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 8001d78:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <ssd1306_PrintSettingsMenu+0x140>)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	ca06      	ldmia	r2, {r1, r2}
 8001d7e:	4830      	ldr	r0, [pc, #192]	; (8001e40 <ssd1306_PrintSettingsMenu+0x148>)
 8001d80:	f7ff f9f2 	bl	8001168 <ssd1306_WriteString>
 8001d84:	e005      	b.n	8001d92 <ssd1306_PrintSettingsMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 8001d86:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <ssd1306_PrintSettingsMenu+0x140>)
 8001d88:	2301      	movs	r3, #1
 8001d8a:	ca06      	ldmia	r2, {r1, r2}
 8001d8c:	482c      	ldr	r0, [pc, #176]	; (8001e40 <ssd1306_PrintSettingsMenu+0x148>)
 8001d8e:	f7ff f9eb 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 8001d92:	7ffb      	ldrb	r3, [r7, #31]
 8001d94:	330a      	adds	r3, #10
 8001d96:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f7ff fa09 	bl	80011b4 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d106      	bne.n	8001db6 <ssd1306_PrintSettingsMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001da8:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <ssd1306_PrintSettingsMenu+0x140>)
 8001daa:	2300      	movs	r3, #0
 8001dac:	ca06      	ldmia	r2, {r1, r2}
 8001dae:	4825      	ldr	r0, [pc, #148]	; (8001e44 <ssd1306_PrintSettingsMenu+0x14c>)
 8001db0:	f7ff f9da 	bl	8001168 <ssd1306_WriteString>
 8001db4:	e005      	b.n	8001dc2 <ssd1306_PrintSettingsMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001db6:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <ssd1306_PrintSettingsMenu+0x140>)
 8001db8:	2301      	movs	r3, #1
 8001dba:	ca06      	ldmia	r2, {r1, r2}
 8001dbc:	4821      	ldr	r0, [pc, #132]	; (8001e44 <ssd1306_PrintSettingsMenu+0x14c>)
 8001dbe:	f7ff f9d3 	bl	8001168 <ssd1306_WriteString>
		}
		y += 10;
 8001dc2:	7ffb      	ldrb	r3, [r7, #31]
 8001dc4:	330a      	adds	r3, #10
 8001dc6:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f640 3221 	movw	r2, #2849	; 0xb21
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	dd0c      	ble.n	8001dec <ssd1306_PrintSettingsMenu+0xf4>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f640 3286 	movw	r2, #2950	; 0xb86
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	dc07      	bgt.n	8001dec <ssd1306_PrintSettingsMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <ssd1306_PrintSettingsMenu+0x150>)
 8001de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001de6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001dea:	e01b      	b.n	8001e24 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f240 7239 	movw	r2, #1849	; 0x739
 8001df2:	4293      	cmp	r3, r2
 8001df4:	dd0b      	ble.n	8001e0e <ssd1306_PrintSettingsMenu+0x116>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f240 729e 	movw	r2, #1950	; 0x79e
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	dc06      	bgt.n	8001e0e <ssd1306_PrintSettingsMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <ssd1306_PrintSettingsMenu+0x154>)
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e08:	c303      	stmia	r3!, {r0, r1}
 8001e0a:	801a      	strh	r2, [r3, #0]
 8001e0c:	e00a      	b.n	8001e24 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <ssd1306_PrintSettingsMenu+0x158>)
 8001e14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e18:	6018      	str	r0, [r3, #0]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	8019      	strh	r1, [r3, #0]
 8001e1e:	3302      	adds	r3, #2
 8001e20:	0c0a      	lsrs	r2, r1, #16
 8001e22:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001e24:	f7ff f89c 	bl	8000f60 <ssd1306_UpdateScreen>
}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000010 	.word	0x20000010
 8001e34:	0801527c 	.word	0x0801527c
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	08015344 	.word	0x08015344
 8001e40:	08015354 	.word	0x08015354
 8001e44:	080152c0 	.word	0x080152c0
 8001e48:	08015288 	.word	0x08015288
 8001e4c:	08015290 	.word	0x08015290
 8001e50:	0801529c 	.word	0x0801529c

08001e54 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen, char IPv4, const Gateway) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	70fb      	strb	r3, [r7, #3]
	if (screen==1){
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d105      	bne.n	8001e74 <ssd1306_DisplayAnalogValue+0x20>
			   ssd1306_PrintDashboardMenu(value, indexMenu, screen);
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fb69 	bl	8001544 <ssd1306_PrintDashboardMenu>
 8001e72:	e02c      	b.n	8001ece <ssd1306_DisplayAnalogValue+0x7a>
		}
	else if (screen==2){
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d105      	bne.n	8001e86 <ssd1306_DisplayAnalogValue+0x32>
		   ssd1306_PrintEnergyMenu(value, indexMenu, screen);
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7ff fc7c 	bl	800177c <ssd1306_PrintEnergyMenu>
 8001e84:	e023      	b.n	8001ece <ssd1306_DisplayAnalogValue+0x7a>
	}
	else if (screen==3){
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d105      	bne.n	8001e98 <ssd1306_DisplayAnalogValue+0x44>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff ff31 	bl	8001cf8 <ssd1306_PrintSettingsMenu>
 8001e96:	e01a      	b.n	8001ece <ssd1306_DisplayAnalogValue+0x7a>
	}else if (screen==4){
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d105      	bne.n	8001eaa <ssd1306_DisplayAnalogValue+0x56>
		   ssd1306_PrintRFMenu(value, indexMenu, screen);
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff fd18 	bl	80018d8 <ssd1306_PrintRFMenu>
 8001ea8:	e011      	b.n	8001ece <ssd1306_DisplayAnalogValue+0x7a>
	}
	else if (screen==5){
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d109      	bne.n	8001ec4 <ssd1306_DisplayAnalogValue+0x70>
		   ssd1306_PrintCloudMenu(value, indexMenu, screen, IPv4, Gateway);
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff fdeb 	bl	8001a98 <ssd1306_PrintCloudMenu>
 8001ec2:	e004      	b.n	8001ece <ssd1306_DisplayAnalogValue+0x7a>
	}
	else{
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7ff fa69 	bl	80013a0 <ssd1306_PrintPrincipalMenu>
	}
    HAL_Delay(50);
 8001ece:	2032      	movs	r0, #50	; 0x32
 8001ed0:	f000 fd02 	bl	80028d8 <HAL_Delay>
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff f818 	bl	8000f18 <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 8001ee8:	2301      	movs	r3, #1
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2348      	movs	r3, #72	; 0x48
 8001ef2:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2020      	movs	r0, #32
 8001ef8:	f7ff f974 	bl	80011e4 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 8001efc:	f7ff f830 	bl	8000f60 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8001f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f04:	f000 fce8 	bl	80028d8 <HAL_Delay>

}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	0801a40c 	.word	0x0801a40c

08001f14 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001f18:	f7fe ff94 	bl	8000e44 <ssd1306_Init>
    ssd1306_TestFonts1();
 8001f1c:	f7ff f9ee 	bl	80012fc <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8001f20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f24:	f000 fcd8 	bl	80028d8 <HAL_Delay>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001f30:	f7fe ff88 	bl	8000e44 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8001f34:	f7ff ffd2 	bl	8001edc <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 8001f38:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f3c:	f000 fccc 	bl	80028d8 <HAL_Delay>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_MspInit+0x44>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_MspInit+0x44>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_MspInit+0x44>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_MspInit+0x44>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_MspInit+0x44>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_MspInit+0x44>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <HAL_ADC_MspInit+0xc8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d124      	bne.n	8001ff8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a23      	ldr	r2, [pc, #140]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fde:	2310      	movs	r3, #16
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481a      	ldr	r0, [pc, #104]	; (800205c <HAL_ADC_MspInit+0xd0>)
 8001ff2:	f002 fbf3 	bl	80047dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ff6:	e028      	b.n	800204a <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_ADC_MspInit+0xd4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d123      	bne.n	800204a <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a14      	ldr	r2, [pc, #80]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8002008:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8002020:	f043 0320 	orr.w	r3, r3, #32
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_ADC_MspInit+0xcc>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002032:	2320      	movs	r3, #32
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002036:	2303      	movs	r3, #3
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <HAL_ADC_MspInit+0xd8>)
 8002046:	f002 fbc9 	bl	80047dc <HAL_GPIO_Init>
}
 800204a:	bf00      	nop
 800204c:	3730      	adds	r7, #48	; 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40012000 	.word	0x40012000
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000
 8002060:	40012200 	.word	0x40012200
 8002064:	40021400 	.word	0x40021400

08002068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0aa      	sub	sp, #168	; 0xa8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	2284      	movs	r2, #132	; 0x84
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f011 feb5 	bl	8013df8 <memset>
  if(hi2c->Instance==I2C2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <HAL_I2C_MspInit+0xb0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d13b      	bne.n	8002110 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800209c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800209e:	2300      	movs	r3, #0
 80020a0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 f802 	bl	80060b0 <HAL_RCCEx_PeriphCLKConfig>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020b2:	f7fe fe88 	bl	8000dc6 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a18      	ldr	r2, [pc, #96]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020bc:	f043 0320 	orr.w	r3, r3, #32
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ce:	2303      	movs	r3, #3
 80020d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020e6:	2304      	movs	r3, #4
 80020e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020f0:	4619      	mov	r1, r3
 80020f2:	480b      	ldr	r0, [pc, #44]	; (8002120 <HAL_I2C_MspInit+0xb8>)
 80020f4:	f002 fb72 	bl	80047dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_I2C_MspInit+0xb4>)
 80020fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002102:	6413      	str	r3, [r2, #64]	; 0x40
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_I2C_MspInit+0xb4>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002110:	bf00      	nop
 8002112:	37a8      	adds	r7, #168	; 0xa8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40005800 	.word	0x40005800
 800211c:	40023800 	.word	0x40023800
 8002120:	40021400 	.word	0x40021400

08002124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0aa      	sub	sp, #168	; 0xa8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	2284      	movs	r2, #132	; 0x84
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f011 fe57 	bl	8013df8 <memset>
  if(huart->Instance==USART3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_UART_MspInit+0xb4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d13c      	bne.n	80021ce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002158:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800215a:	2300      	movs	r3, #0
 800215c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4618      	mov	r0, r3
 8002164:	f003 ffa4 	bl	80060b0 <HAL_RCCEx_PeriphCLKConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800216e:	f7fe fe2a 	bl	8000dc6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_UART_MspInit+0xb8>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a19      	ldr	r2, [pc, #100]	; (80021dc <HAL_UART_MspInit+0xb8>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_UART_MspInit+0xb8>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_UART_MspInit+0xb8>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_UART_MspInit+0xb8>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_UART_MspInit+0xb8>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021bc:	2307      	movs	r3, #7
 80021be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021c6:	4619      	mov	r1, r3
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_UART_MspInit+0xbc>)
 80021ca:	f002 fb07 	bl	80047dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	37a8      	adds	r7, #168	; 0xa8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40004800 	.word	0x40004800
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020c00 	.word	0x40020c00

080021e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0ac      	sub	sp, #176	; 0xb0
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021fc:	f107 0318 	add.w	r3, r7, #24
 8002200:	2284      	movs	r2, #132	; 0x84
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f011 fdf7 	bl	8013df8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002212:	d159      	bne.n	80022c8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002218:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002220:	f107 0318 	add.w	r3, r7, #24
 8002224:	4618      	mov	r0, r3
 8002226:	f003 ff43 	bl	80060b0 <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002230:	f7fe fdc9 	bl	8000dc6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800224c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002266:	230a      	movs	r3, #10
 8002268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002270:	4619      	mov	r1, r3
 8002272:	4818      	ldr	r0, [pc, #96]	; (80022d4 <HAL_PCD_MspInit+0xf0>)
 8002274:	f002 fab2 	bl	80047dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800227c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800228c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002290:	4619      	mov	r1, r3
 8002292:	4810      	ldr	r0, [pc, #64]	; (80022d4 <HAL_PCD_MspInit+0xf0>)
 8002294:	f002 faa2 	bl	80047dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 800229e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a2:	6353      	str	r3, [r2, #52]	; 0x34
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 80022b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ba:	6453      	str	r3, [r2, #68]	; 0x44
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_PCD_MspInit+0xec>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022c8:	bf00      	nop
 80022ca:	37b0      	adds	r7, #176	; 0xb0
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020000 	.word	0x40020000

080022d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <NMI_Handler+0x4>

080022de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <HardFault_Handler+0x4>

080022e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <MemManage_Handler+0x4>

080022ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002324:	f000 fab8 	bl	8002898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <ETH_IRQHandler+0x10>)
 8002332:	f001 fb6d 	bl	8003a10 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20005668 	.word	0x20005668

08002340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return 1;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_kill>:

int _kill(int pid, int sig)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <_kill+0x20>)
 800235c:	2216      	movs	r2, #22
 800235e:	601a      	str	r2, [r3, #0]
  return -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	2000b050 	.word	0x2000b050

08002374 <_exit>:

void _exit (int status)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ffe5 	bl	8002350 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002386:	e7fe      	b.n	8002386 <_exit+0x12>

08002388 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	e00a      	b.n	80023b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800239a:	f3af 8000 	nop.w
 800239e:	4601      	mov	r1, r0
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	60ba      	str	r2, [r7, #8]
 80023a6:	b2ca      	uxtb	r2, r1
 80023a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dbf0      	blt.n	800239a <_read+0x12>
  }

  return len;
 80023b8:	687b      	ldr	r3, [r7, #4]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e009      	b.n	80023e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	dbf1      	blt.n	80023d4 <_write+0x12>
  }
  return len;
 80023f0:	687b      	ldr	r3, [r7, #4]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_close>:

int _close(int file)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002422:	605a      	str	r2, [r3, #4]
  return 0;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_isatty>:

int _isatty(int file)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <_sbrk+0x5c>)
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <_sbrk+0x60>)
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <_sbrk+0x64>)
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <_sbrk+0x68>)
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	429a      	cmp	r2, r3
 8002492:	d205      	bcs.n	80024a0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <_sbrk+0x6c>)
 8002496:	220c      	movs	r2, #12
 8002498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e009      	b.n	80024b4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <_sbrk+0x64>)
 80024b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	20050000 	.word	0x20050000
 80024c4:	00000400 	.word	0x00000400
 80024c8:	20000c90 	.word	0x20000c90
 80024cc:	2000b060 	.word	0x2000b060
 80024d0:	2000b050 	.word	0x2000b050

080024d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <SystemInit+0x20>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <SystemInit+0x20>)
 80024e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024fe:	490e      	ldr	r1, [pc, #56]	; (8002538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002504:	e002      	b.n	800250c <LoopCopyDataInit>

08002506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250a:	3304      	adds	r3, #4

0800250c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800250c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002510:	d3f9      	bcc.n	8002506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002514:	4c0b      	ldr	r4, [pc, #44]	; (8002544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002518:	e001      	b.n	800251e <LoopFillZerobss>

0800251a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800251c:	3204      	adds	r2, #4

0800251e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002520:	d3fb      	bcc.n	800251a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002522:	f7ff ffd7 	bl	80024d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002526:	f011 fc0b 	bl	8013d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800252a:	f7fe f8ad 	bl	8000688 <main>
  bx  lr    
 800252e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002530:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800253c:	0801a8c0 	.word	0x0801a8c0
  ldr r2, =_sbss
 8002540:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002544:	2000b060 	.word	0x2000b060

08002548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC_IRQHandler>

0800254a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <LAN8742_RegisterBusIO+0x28>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <LAN8742_RegisterBusIO+0x28>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <LAN8742_RegisterBusIO+0x28>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	e014      	b.n	80025a2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d17c      	bne.n	80026c8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e01c      	b.n	8002622 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f107 0208 	add.w	r2, r7, #8
 80025f0:	2112      	movs	r1, #18
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	4798      	blx	r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da03      	bge.n	8002604 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80025fc:	f06f 0304 	mvn.w	r3, #4
 8002600:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002602:	e00b      	b.n	800261c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	d105      	bne.n	800261c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
         break;
 800261a:	e005      	b.n	8002628 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3301      	adds	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b1f      	cmp	r3, #31
 8002626:	d9df      	bls.n	80025e8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b1f      	cmp	r3, #31
 800262e:	d902      	bls.n	8002636 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002630:	f06f 0302 	mvn.w	r3, #2
 8002634:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d145      	bne.n	80026c8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6810      	ldr	r0, [r2, #0]
 8002644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002648:	2100      	movs	r1, #0
 800264a:	4798      	blx	r3
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	db37      	blt.n	80026c2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6810      	ldr	r0, [r2, #0]
 800265a:	f107 0208 	add.w	r2, r7, #8
 800265e:	2100      	movs	r1, #0
 8002660:	4798      	blx	r3
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	db28      	blt.n	80026ba <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4798      	blx	r3
 800266e:	4603      	mov	r3, r0
 8002670:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002672:	e01c      	b.n	80026ae <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4798      	blx	r3
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002686:	d80e      	bhi.n	80026a6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6810      	ldr	r0, [r2, #0]
 8002690:	f107 0208 	add.w	r2, r7, #8
 8002694:	2100      	movs	r1, #0
 8002696:	4798      	blx	r3
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	da07      	bge.n	80026ae <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800269e:	f06f 0304 	mvn.w	r3, #4
 80026a2:	613b      	str	r3, [r7, #16]
                 break;
 80026a4:	e010      	b.n	80026c8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80026a6:	f06f 0301 	mvn.w	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
               break;
 80026ac:	e00c      	b.n	80026c8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1dd      	bne.n	8002674 <LAN8742_Init+0xc6>
 80026b8:	e006      	b.n	80026c8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80026ba:	f06f 0304 	mvn.w	r3, #4
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e002      	b.n	80026c8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80026c2:	f06f 0303 	mvn.w	r3, #3
 80026c6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d112      	bne.n	80026f4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	4798      	blx	r3
 80026d4:	4603      	mov	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80026d8:	bf00      	nop
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	4798      	blx	r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80026ec:	d9f5      	bls.n	80026da <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80026f4:	693b      	ldr	r3, [r7, #16]
 }
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6810      	ldr	r0, [r2, #0]
 8002712:	f107 020c 	add.w	r2, r7, #12
 8002716:	2101      	movs	r1, #1
 8002718:	4798      	blx	r3
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	da02      	bge.n	8002726 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002720:	f06f 0304 	mvn.w	r3, #4
 8002724:	e06e      	b.n	8002804 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6810      	ldr	r0, [r2, #0]
 800272e:	f107 020c 	add.w	r2, r7, #12
 8002732:	2101      	movs	r1, #1
 8002734:	4798      	blx	r3
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	da02      	bge.n	8002742 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800273c:	f06f 0304 	mvn.w	r3, #4
 8002740:	e060      	b.n	8002804 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800274c:	2301      	movs	r3, #1
 800274e:	e059      	b.n	8002804 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6810      	ldr	r0, [r2, #0]
 8002758:	f107 020c 	add.w	r2, r7, #12
 800275c:	2100      	movs	r1, #0
 800275e:	4798      	blx	r3
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	da02      	bge.n	800276c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002766:	f06f 0304 	mvn.w	r3, #4
 800276a:	e04b      	b.n	8002804 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11b      	bne.n	80027ae <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <LAN8742_GetLinkState+0x90>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800278a:	2302      	movs	r3, #2
 800278c:	e03a      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002798:	2303      	movs	r3, #3
 800279a:	e033      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027a6:	2304      	movs	r3, #4
 80027a8:	e02c      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80027aa:	2305      	movs	r3, #5
 80027ac:	e02a      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6810      	ldr	r0, [r2, #0]
 80027b6:	f107 020c 	add.w	r2, r7, #12
 80027ba:	211f      	movs	r1, #31
 80027bc:	4798      	blx	r3
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da02      	bge.n	80027ca <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80027c4:	f06f 0304 	mvn.w	r3, #4
 80027c8:	e01c      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80027d4:	2306      	movs	r3, #6
 80027d6:	e015      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 031c 	and.w	r3, r3, #28
 80027de:	2b18      	cmp	r3, #24
 80027e0:	d101      	bne.n	80027e6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e00e      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 031c 	and.w	r3, r3, #28
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d101      	bne.n	80027f4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e007      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 031c 	and.w	r3, r3, #28
 80027fa:	2b14      	cmp	r3, #20
 80027fc:	d101      	bne.n	8002802 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027fe:	2304      	movs	r3, #4
 8002800:	e000      	b.n	8002804 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002802:	2305      	movs	r3, #5
    }				
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_Init+0x28>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a07      	ldr	r2, [pc, #28]	; (8002834 <HAL_Init+0x28>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281c:	2003      	movs	r0, #3
 800281e:	f000 fd7d 	bl	800331c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002822:	2000      	movs	r0, #0
 8002824:	f000 f808 	bl	8002838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002828:	f7ff fb8c 	bl	8001f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00

08002838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x54>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_InitTick+0x58>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fd95 	bl	8003386 <HAL_SYSTICK_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e00e      	b.n	8002884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d80a      	bhi.n	8002882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286c:	2200      	movs	r2, #0
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f000 fd5d 	bl	8003332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <HAL_InitTick+0x5c>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000018 	.word	0x20000018
 8002890:	20000020 	.word	0x20000020
 8002894:	2000001c 	.word	0x2000001c

08002898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x20>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_IncTick+0x24>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_IncTick+0x24>)
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000020 	.word	0x20000020
 80028bc:	20000c94 	.word	0x20000c94

080028c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return uwTick;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_GetTick+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000c94 	.word	0x20000c94

080028d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff ffee 	bl	80028c0 <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d005      	beq.n	80028fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_Delay+0x44>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028fe:	bf00      	nop
 8002900:	f7ff ffde 	bl	80028c0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	d8f7      	bhi.n	8002900 <HAL_Delay+0x28>
  {
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000020 	.word	0x20000020

08002920 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e031      	b.n	800299a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff fb24 	bl	8001f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_ADC_Init+0x84>)
 8002964:	4013      	ands	r3, r2
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fb0a 	bl	8002f88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
 800298a:	e001      	b.n	8002990 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	ffffeefd 	.word	0xffffeefd

080029a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_Start+0x1a>
 80029be:	2302      	movs	r3, #2
 80029c0:	e0ad      	b.n	8002b1e <HAL_ADC_Start+0x176>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d018      	beq.n	8002a0a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_ADC_Start+0x184>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a50      	ldr	r2, [pc, #320]	; (8002b30 <HAL_ADC_Start+0x188>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9a      	lsrs	r2, r3, #18
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d175      	bne.n	8002b04 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1c:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <HAL_ADC_Start+0x18c>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	d106      	bne.n	8002a62 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f023 0206 	bic.w	r2, r3, #6
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	645a      	str	r2, [r3, #68]	; 0x44
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <HAL_ADC_Start+0x190>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d143      	bne.n	8002b1c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e03a      	b.n	8002b1c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a24      	ldr	r2, [pc, #144]	; (8002b3c <HAL_ADC_Start+0x194>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10e      	bne.n	8002ace <HAL_ADC_Start+0x126>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002acc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_ADC_Start+0x190>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d120      	bne.n	8002b1c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_ADC_Start+0x198>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d11b      	bne.n	8002b1c <HAL_ADC_Start+0x174>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d114      	bne.n	8002b1c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	e00b      	b.n	8002b1c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0210 	orr.w	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000018 	.word	0x20000018
 8002b30:	431bde83 	.word	0x431bde83
 8002b34:	fffff8fe 	.word	0xfffff8fe
 8002b38:	40012300 	.word	0x40012300
 8002b3c:	40012000 	.word	0x40012000
 8002b40:	40012200 	.word	0x40012200

08002b44 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_Stop+0x16>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e01f      	b.n	8002b9a <HAL_ADC_Stop+0x56>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_ADC_Stop+0x64>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	ffffeefe 	.word	0xffffeefe

08002bac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc8:	d113      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e063      	b.n	8002cba <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002bf2:	f7ff fe65 	bl	80028c0 <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bf8:	e021      	b.n	8002c3e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d01d      	beq.n	8002c3e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_ADC_PollForConversion+0x6c>
 8002c08:	f7ff fe5a 	bl	80028c0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d212      	bcs.n	8002c3e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d00b      	beq.n	8002c3e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f043 0204 	orr.w	r2, r3, #4
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e03d      	b.n	8002cba <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d1d6      	bne.n	8002bfa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0212 	mvn.w	r2, #18
 8002c54:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d123      	bne.n	8002cb8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d11f      	bne.n	8002cb8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d111      	bne.n	8002cb8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1c>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e136      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x28a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b09      	cmp	r3, #9
 8002d06:	d93a      	bls.n	8002d7e <HAL_ADC_ConfigChannel+0xa2>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d10:	d035      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68d9      	ldr	r1, [r3, #12]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	3b1e      	subs	r3, #30
 8002d28:	2207      	movs	r2, #7
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	400a      	ands	r2, r1
 8002d36:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a8d      	ldr	r2, [pc, #564]	; (8002f74 <HAL_ADC_ConfigChannel+0x298>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10a      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68d9      	ldr	r1, [r3, #12]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	061a      	lsls	r2, r3, #24
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d56:	e035      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68d9      	ldr	r1, [r3, #12]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4403      	add	r3, r0
 8002d70:	3b1e      	subs	r3, #30
 8002d72:	409a      	lsls	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d7c:	e022      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6919      	ldr	r1, [r3, #16]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	2207      	movs	r2, #7
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	400a      	ands	r2, r1
 8002da0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6919      	ldr	r1, [r3, #16]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	4603      	mov	r3, r0
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4403      	add	r3, r0
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b06      	cmp	r3, #6
 8002dca:	d824      	bhi.n	8002e16 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	3b05      	subs	r3, #5
 8002dde:	221f      	movs	r2, #31
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43da      	mvns	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	400a      	ands	r2, r1
 8002dec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	3b05      	subs	r3, #5
 8002e08:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34
 8002e14:	e04c      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d824      	bhi.n	8002e68 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b23      	subs	r3, #35	; 0x23
 8002e30:	221f      	movs	r2, #31
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	3b23      	subs	r3, #35	; 0x23
 8002e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
 8002e66:	e023      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	3b41      	subs	r3, #65	; 0x41
 8002e7a:	221f      	movs	r2, #31
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43da      	mvns	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	400a      	ands	r2, r1
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3b41      	subs	r3, #65	; 0x41
 8002ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a30      	ldr	r2, [pc, #192]	; (8002f78 <HAL_ADC_ConfigChannel+0x29c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1f4>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002eca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ece:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a28      	ldr	r2, [pc, #160]	; (8002f78 <HAL_ADC_ConfigChannel+0x29c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10f      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x21e>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b12      	cmp	r3, #18
 8002ee0:	d10b      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002eee:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ef8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_ADC_ConfigChannel+0x29c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d12b      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x280>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_ADC_ConfigChannel+0x298>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x23a>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b11      	cmp	r3, #17
 8002f14:	d122      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f16:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f20:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f2c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <HAL_ADC_ConfigChannel+0x298>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d111      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0c9a      	lsrs	r2, r3, #18
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f4e:	e002      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f9      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	10000012 	.word	0x10000012
 8002f78:	40012000 	.word	0x40012000
 8002f7c:	40012300 	.word	0x40012300
 8002f80:	20000018 	.word	0x20000018
 8002f84:	431bde83 	.word	0x431bde83

08002f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f90:	4b78      	ldr	r3, [pc, #480]	; (8003174 <ADC_Init+0x1ec>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a77      	ldr	r2, [pc, #476]	; (8003174 <ADC_Init+0x1ec>)
 8002f96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f9a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f9c:	4b75      	ldr	r3, [pc, #468]	; (8003174 <ADC_Init+0x1ec>)
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4973      	ldr	r1, [pc, #460]	; (8003174 <ADC_Init+0x1ec>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6899      	ldr	r1, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	4a58      	ldr	r2, [pc, #352]	; (8003178 <ADC_Init+0x1f0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d022      	beq.n	8003062 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800302a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800304c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6899      	ldr	r1, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	e00f      	b.n	8003082 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003080:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0202 	bic.w	r2, r2, #2
 8003090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	005a      	lsls	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	3b01      	subs	r3, #1
 80030dc:	035a      	lsls	r2, r3, #13
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	e007      	b.n	80030f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	3b01      	subs	r3, #1
 8003114:	051a      	lsls	r2, r3, #20
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800312c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800313a:	025a      	lsls	r2, r3, #9
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003152:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	029a      	lsls	r2, r3, #10
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	40012300 	.word	0x40012300
 8003178:	0f000001 	.word	0x0f000001

0800317c <__NVIC_SetPriorityGrouping>:
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <__NVIC_SetPriorityGrouping+0x40>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003198:	4013      	ands	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031aa:	4a04      	ldr	r2, [pc, #16]	; (80031bc <__NVIC_SetPriorityGrouping+0x40>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	60d3      	str	r3, [r2, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00
 80031c0:	05fa0000 	.word	0x05fa0000

080031c4 <__NVIC_GetPriorityGrouping>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <__NVIC_GetPriorityGrouping+0x18>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	f003 0307 	and.w	r3, r3, #7
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_EnableIRQ>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	db0b      	blt.n	800320a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	f003 021f 	and.w	r2, r3, #31
 80031f8:	4907      	ldr	r1, [pc, #28]	; (8003218 <__NVIC_EnableIRQ+0x38>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2001      	movs	r0, #1
 8003202:	fa00 f202 	lsl.w	r2, r0, r2
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e100 	.word	0xe000e100

0800321c <__NVIC_SetPriority>:
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	6039      	str	r1, [r7, #0]
 8003226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322c:	2b00      	cmp	r3, #0
 800322e:	db0a      	blt.n	8003246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	490c      	ldr	r1, [pc, #48]	; (8003268 <__NVIC_SetPriority+0x4c>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	440b      	add	r3, r1
 8003240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003244:	e00a      	b.n	800325c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4908      	ldr	r1, [pc, #32]	; (800326c <__NVIC_SetPriority+0x50>)
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	3b04      	subs	r3, #4
 8003254:	0112      	lsls	r2, r2, #4
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	440b      	add	r3, r1
 800325a:	761a      	strb	r2, [r3, #24]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000e100 	.word	0xe000e100
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <NVIC_EncodePriority>:
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f1c3 0307 	rsb	r3, r3, #7
 800328a:	2b04      	cmp	r3, #4
 800328c:	bf28      	it	cs
 800328e:	2304      	movcs	r3, #4
 8003290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3304      	adds	r3, #4
 8003296:	2b06      	cmp	r3, #6
 8003298:	d902      	bls.n	80032a0 <NVIC_EncodePriority+0x30>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3b03      	subs	r3, #3
 800329e:	e000      	b.n	80032a2 <NVIC_EncodePriority+0x32>
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	401a      	ands	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43d9      	mvns	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	4313      	orrs	r3, r2
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3724      	adds	r7, #36	; 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e8:	d301      	bcc.n	80032ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00f      	b.n	800330e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <SysTick_Config+0x40>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f6:	210f      	movs	r1, #15
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f7ff ff8e 	bl	800321c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <SysTick_Config+0x40>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SysTick_Config+0x40>)
 8003308:	2207      	movs	r2, #7
 800330a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000e010 	.word	0xe000e010

0800331c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff29 	bl	800317c <__NVIC_SetPriorityGrouping>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff3e 	bl	80031c4 <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff8e 	bl	8003270 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5d 	bl	800321c <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff31 	bl	80031e0 <__NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa2 	bl	80032d8 <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033a4:	f3bf 8f5f 	dmb	sy
}
 80033a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80033aa:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_MPU_Disable+0x28>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <HAL_MPU_Disable+0x28>)
 80033b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_MPU_Disable+0x2c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	605a      	str	r2, [r3, #4]
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000ed00 	.word	0xe000ed00
 80033cc:	e000ed90 	.word	0xe000ed90

080033d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80033d8:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <HAL_MPU_Enable+0x38>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_MPU_Enable+0x3c>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_MPU_Enable+0x3c>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80033ee:	f3bf 8f4f 	dsb	sy
}
 80033f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033f4:	f3bf 8f6f 	isb	sy
}
 80033f8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	e000ed90 	.word	0xe000ed90
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e06a      	b.n	80034f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2223      	movs	r2, #35	; 0x23
 8003430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f004 fb91 	bl	8007b5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <HAL_ETH_Init+0xf0>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a30      	ldr	r2, [pc, #192]	; (8003500 <HAL_ETH_Init+0xf0>)
 8003440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_ETH_Init+0xf0>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_ETH_Init+0xf4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <HAL_ETH_Init+0xf4>)
 8003458:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800345c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_ETH_Init+0xf4>)
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4927      	ldr	r1, [pc, #156]	; (8003504 <HAL_ETH_Init+0xf4>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_ETH_Init+0xf4>)
 800346e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003486:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003488:	f7ff fa1a 	bl	80028c0 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800348e:	e011      	b.n	80034b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003490:	f7ff fa16 	bl	80028c0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800349e:	d909      	bls.n	80034b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2204      	movs	r2, #4
 80034a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	22e0      	movs	r2, #224	; 0xe0
 80034ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e021      	b.n	80034f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e4      	bne.n	8003490 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fee4 	bl	8004294 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 ff8b 	bl	80043e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 ffe1 	bl	800449a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	461a      	mov	r2, r3
 80034de:	2100      	movs	r1, #0
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 ff49 	bl	8004378 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2210      	movs	r2, #16
 80034f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800

08003508 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003516:	2b10      	cmp	r3, #16
 8003518:	d150      	bne.n	80035bc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2223      	movs	r2, #35	; 0x23
 800351e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2204      	movs	r2, #4
 8003526:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f9fd 	bl	8003928 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0208 	orr.w	r2, r2, #8
 800353c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003546:	2001      	movs	r0, #1
 8003548:	f7ff f9c6 	bl	80028d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0204 	orr.w	r2, r2, #4
 8003562:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800356c:	2001      	movs	r0, #1
 800356e:	f7ff f9b3 	bl	80028d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fd2a 	bl	8003fd4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003592:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003596:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035ae:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2223      	movs	r2, #35	; 0x23
 80035b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d4:	2b23      	cmp	r3, #35	; 0x23
 80035d6:	d14a      	bne.n	800366e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2223      	movs	r2, #35	; 0x23
 80035dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035f6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	f023 0302 	bic.w	r3, r3, #2
 800360a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800360e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0204 	bic.w	r2, r2, #4
 800361e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003628:	2001      	movs	r0, #1
 800362a:	f7ff f955 	bl	80028d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fccc 	bl	8003fd4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0208 	bic.w	r2, r2, #8
 800364a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003654:	2001      	movs	r0, #1
 8003656:	f7ff f93f 	bl	80028d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2210      	movs	r2, #16
 8003666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e07c      	b.n	8003798 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	2b23      	cmp	r3, #35	; 0x23
 80036a6:	d176      	bne.n	8003796 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80036a8:	2200      	movs	r2, #0
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 ff61 	bl	8004574 <ETH_Prepare_Tx_Descriptors>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e065      	b.n	8003798 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80036cc:	f3bf 8f4f 	dsb	sy
}
 80036d0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3206      	adds	r2, #6
 80036da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036de:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d904      	bls.n	80036fc <HAL_ETH_Transmit+0x84>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	1f1a      	subs	r2, r3, #4
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3106      	adds	r1, #6
 8003708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800370c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003710:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003712:	f7ff f8d5 	bl	80028c0 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003718:	e037      	b.n	800378a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d011      	beq.n	8003750 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f043 0208 	orr.w	r2, r3, #8
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e023      	b.n	8003798 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d018      	beq.n	800378a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7ff f8b2 	bl	80028c0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <HAL_ETH_Transmit+0xf6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10d      	bne.n	800378a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003784:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e006      	b.n	8003798 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	dbc3      	blt.n	800371a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0a8      	b.n	800391e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d2:	2b23      	cmp	r3, #35	; 0x23
 80037d4:	d001      	beq.n	80037da <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0a1      	b.n	800391e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	3212      	adds	r2, #18
 80037e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f0:	f1c3 0304 	rsb	r3, r3, #4
 80037f4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80037f6:	e06a      	b.n	80038ce <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <HAL_ETH_ReadData+0x88>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d040      	beq.n	80038aa <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800385c:	3b04      	subs	r3, #4
 800385e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003884:	461a      	mov	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f004 fb31 	bl	8007ef0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	441a      	add	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2200      	movs	r2, #0
 80038a8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d902      	bls.n	80038bc <HAL_ETH_ReadData+0x11c>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3b04      	subs	r3, #4
 80038ba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	3212      	adds	r2, #18
 80038c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3301      	adds	r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	db06      	blt.n	80038e4 <HAL_ETH_ReadData+0x144>
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d202      	bcs.n	80038e4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d089      	beq.n	80037f8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f815 	bl	8003928 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d108      	bne.n	800391c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003934:	2301      	movs	r3, #1
 8003936:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800393c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	3212      	adds	r2, #18
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003950:	e040      	b.n	80039d4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d112      	bne.n	8003980 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4618      	mov	r0, r3
 8003960:	f004 fa96 	bl	8007e90 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	74fb      	strb	r3, [r7, #19]
 800396e:	e007      	b.n	8003980 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	461a      	mov	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	461a      	mov	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d026      	beq.n	80039d4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <ETH_UpdateDescriptor+0xe4>)
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e003      	b.n	800399e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800399c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 800399e:	f3bf 8f5f 	dmb	sy
}
 80039a2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d902      	bls.n	80039c2 <ETH_UpdateDescriptor+0x9a>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3b04      	subs	r3, #4
 80039c0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	3212      	adds	r2, #18
 80039c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039cc:	617b      	str	r3, [r7, #20]
      desccount--;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <ETH_UpdateDescriptor+0xb8>
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1b8      	bne.n	8003952 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d00c      	beq.n	8003a04 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003a04:	bf00      	nop
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	80004600 	.word	0x80004600

08003a10 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d112      	bne.n	8003a50 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d109      	bne.n	8003a50 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_ETH_IRQHandler+0x178>)
 8003a48:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8ac 	bl	8003ba8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d113      	bne.n	8003a8a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10a      	bne.n	8003a8a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003a82:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f885 	bl	8003b94 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9c:	d14c      	bne.n	8003b38 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab0:	d142      	bne.n	8003b38 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f043 0208 	orr.w	r2, r3, #8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad4:	d11a      	bne.n	8003b0c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <HAL_ETH_IRQHandler+0x17c>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003afc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b00:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	22e0      	movs	r2, #224	; 0xe0
 8003b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003b0a:	e012      	b.n	8003b32 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	f248 6380 	movw	r3, #34432	; 0x8680
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f248 6380 	movw	r3, #34432	; 0x8680
 8003b30:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f842 	bl	8003bbc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d10e      	bne.n	8003b64 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f83a 	bl	8003bd0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_ETH_IRQHandler+0x180>)
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <HAL_ETH_IRQHandler+0x180>)
 8003b72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b76:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f833 	bl	8003be4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	00010040 	.word	0x00010040
 8003b8c:	007e2000 	.word	0x007e2000
 8003b90:	40013c00 	.word	0x40013c00

08003b94 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 031c 	and.w	r3, r3, #28
 8003c14:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	02db      	lsls	r3, r3, #11
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0302 	bic.w	r3, r3, #2
 8003c36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003c48:	f7fe fe3a 	bl	80028c0 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c4e:	e00d      	b.n	8003c6c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003c50:	f7fe fe36 	bl	80028c0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5e:	d301      	bcc.n	8003c64 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e010      	b.n	8003c86 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ec      	bne.n	8003c50 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 031c 	and.w	r3, r3, #28
 8003caa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	02db      	lsls	r3, r3, #11
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	019b      	lsls	r3, r3, #6
 8003cbc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f043 0302 	orr.w	r3, r3, #2
 8003ccc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ce8:	f7fe fdea 	bl	80028c0 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003cee:	e00d      	b.n	8003d0c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003cf0:	f7fe fde6 	bl	80028c0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfe:	d301      	bcc.n	8003d04 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e009      	b.n	8003d18 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1ec      	bne.n	8003cf0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0d9      	b.n	8003ee8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf14      	ite	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	2300      	moveq	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bf14      	ite	ne
 8003e26:	2301      	movne	r3, #1
 8003e28:	2300      	moveq	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf14      	ite	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2300      	moveq	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e00b      	b.n	8003f20 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d105      	bne.n	8003f1e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003f12:	6839      	ldr	r1, [r7, #0]
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f883 	bl	8004020 <ETH_SetMACConfig>

    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
  }
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 031c 	bic.w	r3, r3, #28
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f40:	f002 f882 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8003f44:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d908      	bls.n	8003f60 <HAL_ETH_SetMDIOClockRange+0x38>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d804      	bhi.n	8003f60 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f043 0308 	orr.w	r3, r3, #8
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e027      	b.n	8003fb0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d908      	bls.n	8003f7a <HAL_ETH_SetMDIOClockRange+0x52>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d204      	bcs.n	8003f7a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f043 030c 	orr.w	r3, r3, #12
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	e01a      	b.n	8003fb0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a12      	ldr	r2, [pc, #72]	; (8003fc8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d303      	bcc.n	8003f8a <HAL_ETH_SetMDIOClockRange+0x62>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d911      	bls.n	8003fae <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d908      	bls.n	8003fa4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4a0e      	ldr	r2, [pc, #56]	; (8003fd0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d804      	bhi.n	8003fa4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e005      	b.n	8003fb0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f043 0310 	orr.w	r3, r3, #16
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e000      	b.n	8003fb0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003fae:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	01312cff 	.word	0x01312cff
 8003fc4:	02160ebf 	.word	0x02160ebf
 8003fc8:	03938700 	.word	0x03938700
 8003fcc:	05f5e0ff 	.word	0x05f5e0ff
 8003fd0:	08f0d17f 	.word	0x08f0d17f

08003fd4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ff6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004004:	2001      	movs	r0, #1
 8004006:	f7fe fc67 	bl	80028d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004014:	6193      	str	r3, [r2, #24]
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4b51      	ldr	r3, [pc, #324]	; (800417c <ETH_SetMACConfig+0x15c>)
 8004036:	4013      	ands	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	7c1b      	ldrb	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <ETH_SetMACConfig+0x28>
 8004042:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004046:	e000      	b.n	800404a <ETH_SetMACConfig+0x2a>
 8004048:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	7c5b      	ldrb	r3, [r3, #17]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <ETH_SetMACConfig+0x38>
 8004052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004056:	e000      	b.n	800405a <ETH_SetMACConfig+0x3a>
 8004058:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800405a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004060:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	7fdb      	ldrb	r3, [r3, #31]
 8004066:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004068:	431a      	orrs	r2, r3
                        macconf->Speed |
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800406e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	7f92      	ldrb	r2, [r2, #30]
 8004074:	2a00      	cmp	r2, #0
 8004076:	d102      	bne.n	800407e <ETH_SetMACConfig+0x5e>
 8004078:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800407c:	e000      	b.n	8004080 <ETH_SetMACConfig+0x60>
 800407e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004080:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	7f1b      	ldrb	r3, [r3, #28]
 8004086:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004088:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800408e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	791b      	ldrb	r3, [r3, #4]
 8004094:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004096:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800409e:	2a00      	cmp	r2, #0
 80040a0:	d102      	bne.n	80040a8 <ETH_SetMACConfig+0x88>
 80040a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a6:	e000      	b.n	80040aa <ETH_SetMACConfig+0x8a>
 80040a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	7bdb      	ldrb	r3, [r3, #15]
 80040b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80040b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80040b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040c2:	4313      	orrs	r3, r2
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040da:	2001      	movs	r0, #1
 80040dc:	f7fe fbfc 	bl	80028d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80040f6:	4013      	ands	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004106:	2a00      	cmp	r2, #0
 8004108:	d101      	bne.n	800410e <ETH_SetMACConfig+0xee>
 800410a:	2280      	movs	r2, #128	; 0x80
 800410c:	e000      	b.n	8004110 <ETH_SetMACConfig+0xf0>
 800410e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004110:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004116:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800411e:	2a01      	cmp	r2, #1
 8004120:	d101      	bne.n	8004126 <ETH_SetMACConfig+0x106>
 8004122:	2208      	movs	r2, #8
 8004124:	e000      	b.n	8004128 <ETH_SetMACConfig+0x108>
 8004126:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004128:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004130:	2a01      	cmp	r2, #1
 8004132:	d101      	bne.n	8004138 <ETH_SetMACConfig+0x118>
 8004134:	2204      	movs	r2, #4
 8004136:	e000      	b.n	800413a <ETH_SetMACConfig+0x11a>
 8004138:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800413a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004142:	2a01      	cmp	r2, #1
 8004144:	d101      	bne.n	800414a <ETH_SetMACConfig+0x12a>
 8004146:	2202      	movs	r2, #2
 8004148:	e000      	b.n	800414c <ETH_SetMACConfig+0x12c>
 800414a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800414c:	4313      	orrs	r3, r2
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004164:	2001      	movs	r0, #1
 8004166:	f7fe fbb7 	bl	80028d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	619a      	str	r2, [r3, #24]
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	ff20810f 	.word	0xff20810f

08004180 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <ETH_SetDMAConfig+0x110>)
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	7b1b      	ldrb	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <ETH_SetDMAConfig+0x2c>
 80041a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041aa:	e000      	b.n	80041ae <ETH_SetDMAConfig+0x2e>
 80041ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	7b5b      	ldrb	r3, [r3, #13]
 80041b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	7f52      	ldrb	r2, [r2, #29]
 80041ba:	2a00      	cmp	r2, #0
 80041bc:	d102      	bne.n	80041c4 <ETH_SetDMAConfig+0x44>
 80041be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041c2:	e000      	b.n	80041c6 <ETH_SetDMAConfig+0x46>
 80041c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80041c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	7b9b      	ldrb	r3, [r3, #14]
 80041cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80041ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80041d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	7f1b      	ldrb	r3, [r3, #28]
 80041da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80041dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	7f9b      	ldrb	r3, [r3, #30]
 80041e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80041e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80041ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041f4:	4313      	orrs	r3, r2
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004204:	461a      	mov	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004216:	2001      	movs	r0, #1
 8004218:	f7fe fb5e 	bl	80028d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	461a      	mov	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004234:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800423a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004240:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004248:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800424a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004252:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004258:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004266:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004274:	2001      	movs	r0, #1
 8004276:	f7fe fb2f 	bl	80028d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6013      	str	r3, [r2, #0]
}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	f8de3f23 	.word	0xf8de3f23

08004294 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b0a6      	sub	sp, #152	; 0x98
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80042a8:	2300      	movs	r3, #0
 80042aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80042d0:	2300      	movs	r3, #0
 80042d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80042f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80042fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004300:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fe86 	bl	8004020 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004314:	2301      	movs	r3, #1
 8004316:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004318:	2301      	movs	r3, #1
 800431a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004322:	2301      	movs	r3, #1
 8004324:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004330:	2300      	movs	r3, #0
 8004332:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004336:	2300      	movs	r3, #0
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004340:	2301      	movs	r3, #1
 8004342:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004348:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800434a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800434e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004354:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800435c:	2300      	movs	r3, #0
 800435e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004360:	2300      	movs	r3, #0
 8004362:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ff08 	bl	8004180 <ETH_SetDMAConfig>
}
 8004370:	bf00      	nop
 8004372:	3798      	adds	r7, #152	; 0x98
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3305      	adds	r3, #5
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	3204      	adds	r2, #4
 8004390:	7812      	ldrb	r2, [r2, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <ETH_MACAddressConfig+0x68>)
 800439a:	4413      	add	r3, r2
 800439c:	461a      	mov	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3303      	adds	r3, #3
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	061a      	lsls	r2, r3, #24
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3302      	adds	r3, #2
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3301      	adds	r3, #1
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	4313      	orrs	r3, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <ETH_MACAddressConfig+0x6c>)
 80043ca:	4413      	add	r3, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6013      	str	r3, [r2, #0]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40028040 	.word	0x40028040
 80043e4:	40028044 	.word	0x40028044

080043e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e03e      	b.n	8004474 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68d9      	ldr	r1, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	440b      	add	r3, r1
 8004406:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2200      	movs	r2, #0
 800441e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	3206      	adds	r2, #6
 8004428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d80c      	bhi.n	8004458 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68d9      	ldr	r1, [r3, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	440b      	add	r3, r1
 8004450:	461a      	mov	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	e004      	b.n	8004462 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d9bd      	bls.n	80043f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448c:	611a      	str	r2, [r3, #16]
}
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	e046      	b.n	8004536 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6919      	ldr	r1, [r3, #16]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	440b      	add	r3, r1
 80044b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2200      	movs	r2, #0
 80044c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2200      	movs	r2, #0
 80044d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2200      	movs	r2, #0
 80044d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80044ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	3212      	adds	r2, #18
 8004502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d80c      	bhi.n	8004526 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6919      	ldr	r1, [r3, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	440b      	add	r3, r1
 800451e:	461a      	mov	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	e004      	b.n	8004530 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d9b5      	bls.n	80044a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	60da      	str	r2, [r3, #12]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004574:	b480      	push	{r7}
 8004576:	b08d      	sub	sp, #52	; 0x34
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3318      	adds	r3, #24
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045b6:	d007      	beq.n	80045c8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	3304      	adds	r3, #4
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0ff      	b.n	80047cc <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	3301      	adds	r3, #1
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	4b7d      	ldr	r3, [pc, #500]	; (80047d8 <ETH_Prepare_Tx_Descriptors+0x264>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	6852      	ldr	r2, [r2, #4]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d008      	beq.n	800460c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	431a      	orrs	r2, r3
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	431a      	orrs	r2, r3
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800464e:	f3bf 8f5f 	dmb	sy
}
 8004652:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004660:	e082      	b.n	8004768 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e005      	b.n	800468e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	3301      	adds	r3, #1
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	2b03      	cmp	r3, #3
 8004698:	d902      	bls.n	80046a0 <ETH_Prepare_Tx_Descriptors+0x12c>
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	3b04      	subs	r3, #4
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c2:	d007      	beq.n	80046d4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	3304      	adds	r3, #4
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d029      	beq.n	8004728 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e6:	e019      	b.n	800471c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80046e8:	f3bf 8f5f 	dmb	sy
}
 80046ec:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	3301      	adds	r3, #1
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	2b03      	cmp	r3, #3
 8004704:	d902      	bls.n	800470c <ETH_Prepare_Tx_Descriptors+0x198>
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	3b04      	subs	r3, #4
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004714:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	3301      	adds	r3, #1
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
 800471c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	429a      	cmp	r2, r3
 8004722:	d3e1      	bcc.n	80046e8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004724:	2302      	movs	r3, #2
 8004726:	e051      	b.n	80047cc <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	3301      	adds	r3, #1
 800472c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004744:	4013      	ands	r3, r2
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	6852      	ldr	r2, [r2, #4]
 800474a:	431a      	orrs	r2, r3
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	3301      	adds	r3, #1
 8004754:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004756:	f3bf 8f5f 	dmb	sy
}
 800475a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f af78 	bne.w	8004662 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d006      	beq.n	8004786 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e005      	b.n	8004792 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	3304      	adds	r3, #4
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80047b4:	b672      	cpsid	i
}
 80047b6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	4413      	add	r3, r2
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80047c6:	b662      	cpsie	i
}
 80047c8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3734      	adds	r7, #52	; 0x34
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	ffffe000 	.word	0xffffe000

080047dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047dc:	b480      	push	{r7}
 80047de:	b089      	sub	sp, #36	; 0x24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047ee:	2300      	movs	r3, #0
 80047f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	e175      	b.n	8004ae8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047fc:	2201      	movs	r2, #1
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	429a      	cmp	r2, r3
 8004816:	f040 8164 	bne.w	8004ae2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d005      	beq.n	8004832 <HAL_GPIO_Init+0x56>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d130      	bne.n	8004894 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	2203      	movs	r2, #3
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004868:	2201      	movs	r2, #1
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4013      	ands	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 0201 	and.w	r2, r3, #1
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4313      	orrs	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b03      	cmp	r3, #3
 800489e:	d017      	beq.n	80048d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2203      	movs	r2, #3
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d123      	bne.n	8004924 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	08da      	lsrs	r2, r3, #3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3208      	adds	r2, #8
 80048e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	220f      	movs	r2, #15
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	08da      	lsrs	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3208      	adds	r2, #8
 800491e:	69b9      	ldr	r1, [r7, #24]
 8004920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	2203      	movs	r2, #3
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0203 	and.w	r2, r3, #3
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80be 	beq.w	8004ae2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004966:	4b66      	ldr	r3, [pc, #408]	; (8004b00 <HAL_GPIO_Init+0x324>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	4a65      	ldr	r2, [pc, #404]	; (8004b00 <HAL_GPIO_Init+0x324>)
 800496c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004970:	6453      	str	r3, [r2, #68]	; 0x44
 8004972:	4b63      	ldr	r3, [pc, #396]	; (8004b00 <HAL_GPIO_Init+0x324>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800497e:	4a61      	ldr	r2, [pc, #388]	; (8004b04 <HAL_GPIO_Init+0x328>)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	089b      	lsrs	r3, r3, #2
 8004984:	3302      	adds	r3, #2
 8004986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	220f      	movs	r2, #15
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a58      	ldr	r2, [pc, #352]	; (8004b08 <HAL_GPIO_Init+0x32c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d037      	beq.n	8004a1a <HAL_GPIO_Init+0x23e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a57      	ldr	r2, [pc, #348]	; (8004b0c <HAL_GPIO_Init+0x330>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d031      	beq.n	8004a16 <HAL_GPIO_Init+0x23a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a56      	ldr	r2, [pc, #344]	; (8004b10 <HAL_GPIO_Init+0x334>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02b      	beq.n	8004a12 <HAL_GPIO_Init+0x236>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a55      	ldr	r2, [pc, #340]	; (8004b14 <HAL_GPIO_Init+0x338>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d025      	beq.n	8004a0e <HAL_GPIO_Init+0x232>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a54      	ldr	r2, [pc, #336]	; (8004b18 <HAL_GPIO_Init+0x33c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01f      	beq.n	8004a0a <HAL_GPIO_Init+0x22e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a53      	ldr	r2, [pc, #332]	; (8004b1c <HAL_GPIO_Init+0x340>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d019      	beq.n	8004a06 <HAL_GPIO_Init+0x22a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a52      	ldr	r2, [pc, #328]	; (8004b20 <HAL_GPIO_Init+0x344>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_GPIO_Init+0x226>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a51      	ldr	r2, [pc, #324]	; (8004b24 <HAL_GPIO_Init+0x348>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00d      	beq.n	80049fe <HAL_GPIO_Init+0x222>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a50      	ldr	r2, [pc, #320]	; (8004b28 <HAL_GPIO_Init+0x34c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <HAL_GPIO_Init+0x21e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4f      	ldr	r2, [pc, #316]	; (8004b2c <HAL_GPIO_Init+0x350>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d101      	bne.n	80049f6 <HAL_GPIO_Init+0x21a>
 80049f2:	2309      	movs	r3, #9
 80049f4:	e012      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 80049f6:	230a      	movs	r3, #10
 80049f8:	e010      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 80049fa:	2308      	movs	r3, #8
 80049fc:	e00e      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 80049fe:	2307      	movs	r3, #7
 8004a00:	e00c      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 8004a02:	2306      	movs	r3, #6
 8004a04:	e00a      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 8004a06:	2305      	movs	r3, #5
 8004a08:	e008      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e006      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e004      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e002      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <HAL_GPIO_Init+0x240>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	f002 0203 	and.w	r2, r2, #3
 8004a22:	0092      	lsls	r2, r2, #2
 8004a24:	4093      	lsls	r3, r2
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a2c:	4935      	ldr	r1, [pc, #212]	; (8004b04 <HAL_GPIO_Init+0x328>)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	3302      	adds	r3, #2
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <HAL_GPIO_Init+0x354>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a5e:	4a34      	ldr	r2, [pc, #208]	; (8004b30 <HAL_GPIO_Init+0x354>)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a64:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_GPIO_Init+0x354>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a88:	4a29      	ldr	r2, [pc, #164]	; (8004b30 <HAL_GPIO_Init+0x354>)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a8e:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <HAL_GPIO_Init+0x354>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <HAL_GPIO_Init+0x354>)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HAL_GPIO_Init+0x354>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004adc:	4a14      	ldr	r2, [pc, #80]	; (8004b30 <HAL_GPIO_Init+0x354>)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	f67f ae86 	bls.w	80047fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3724      	adds	r7, #36	; 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40013800 	.word	0x40013800
 8004b08:	40020000 	.word	0x40020000
 8004b0c:	40020400 	.word	0x40020400
 8004b10:	40020800 	.word	0x40020800
 8004b14:	40020c00 	.word	0x40020c00
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40021400 	.word	0x40021400
 8004b20:	40021800 	.word	0x40021800
 8004b24:	40021c00 	.word	0x40021c00
 8004b28:	40022000 	.word	0x40022000
 8004b2c:	40022400 	.word	0x40022400
 8004b30:	40013c00 	.word	0x40013c00

08004b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b50:	e003      	b.n	8004b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e07f      	b.n	8004c7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fd fa6a 	bl	8002068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2224      	movs	r2, #36	; 0x24
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	e006      	b.n	8004bf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d104      	bne.n	8004c02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_I2C_Init+0x11c>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69d9      	ldr	r1, [r3, #28]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1a      	ldr	r2, [r3, #32]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	02008000 	.word	0x02008000

08004c88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	817b      	strh	r3, [r7, #10]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	813b      	strh	r3, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	f040 80f9 	bne.w	8004ea2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_I2C_Mem_Write+0x34>
 8004cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0ed      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2C_Mem_Write+0x4e>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e0e6      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x21c>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cde:	f7fd fdef 	bl	80028c0 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	2319      	movs	r3, #25
 8004cea:	2201      	movs	r2, #1
 8004cec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f955 	bl	8004fa0 <I2C_WaitOnFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0d1      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2221      	movs	r2, #33	; 0x21
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2240      	movs	r2, #64	; 0x40
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d28:	88f8      	ldrh	r0, [r7, #6]
 8004d2a:	893a      	ldrh	r2, [r7, #8]
 8004d2c:	8979      	ldrh	r1, [r7, #10]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	4603      	mov	r3, r0
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f8b9 	bl	8004eb0 <I2C_RequestMemoryWrite>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0a9      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2bff      	cmp	r3, #255	; 0xff
 8004d58:	d90e      	bls.n	8004d78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	22ff      	movs	r2, #255	; 0xff
 8004d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	8979      	ldrh	r1, [r7, #10]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fab1 	bl	80052d8 <I2C_TransferConfig>
 8004d76:	e00f      	b.n	8004d98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	8979      	ldrh	r1, [r7, #10]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 faa0 	bl	80052d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f93f 	bl	8005020 <I2C_WaitOnTXISFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e07b      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d034      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x1c8>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d130      	bne.n	8004e50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f8d1 	bl	8004fa0 <I2C_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e04d      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2bff      	cmp	r3, #255	; 0xff
 8004e10:	d90e      	bls.n	8004e30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	8979      	ldrh	r1, [r7, #10]
 8004e20:	2300      	movs	r3, #0
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fa55 	bl	80052d8 <I2C_TransferConfig>
 8004e2e:	e00f      	b.n	8004e50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	8979      	ldrh	r1, [r7, #10]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fa44 	bl	80052d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d19e      	bne.n	8004d98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f91e 	bl	80050a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e01a      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2220      	movs	r2, #32
 8004e74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6859      	ldr	r1, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <HAL_I2C_Mem_Write+0x224>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	fe00e800 	.word	0xfe00e800

08004eb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	817b      	strh	r3, [r7, #10]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	813b      	strh	r3, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	8979      	ldrh	r1, [r7, #10]
 8004ed0:	4b20      	ldr	r3, [pc, #128]	; (8004f54 <I2C_RequestMemoryWrite+0xa4>)
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f9fd 	bl	80052d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	69b9      	ldr	r1, [r7, #24]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f89c 	bl	8005020 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e02c      	b.n	8004f4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d105      	bne.n	8004f04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef8:	893b      	ldrh	r3, [r7, #8]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
 8004f02:	e015      	b.n	8004f30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f04:	893b      	ldrh	r3, [r7, #8]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f882 	bl	8005020 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e012      	b.n	8004f4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f26:	893b      	ldrh	r3, [r7, #8]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2200      	movs	r2, #0
 8004f38:	2180      	movs	r1, #128	; 0x80
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f830 	bl	8004fa0 <I2C_WaitOnFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	80002000 	.word	0x80002000

08004f58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d103      	bne.n	8004f76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d007      	beq.n	8004f94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	619a      	str	r2, [r3, #24]
  }
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fb0:	e022      	b.n	8004ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d01e      	beq.n	8004ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fd fc81 	bl	80028c0 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d113      	bne.n	8004ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e00f      	b.n	8005018 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4013      	ands	r3, r2
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	429a      	cmp	r2, r3
 8005014:	d0cd      	beq.n	8004fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800502c:	e02c      	b.n	8005088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f870 	bl	8005118 <I2C_IsErrorOccurred>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e02a      	b.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d01e      	beq.n	8005088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504a:	f7fd fc39 	bl	80028c0 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d113      	bne.n	8005088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e007      	b.n	8005098 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b02      	cmp	r3, #2
 8005094:	d1cb      	bne.n	800502e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ac:	e028      	b.n	8005100 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f830 	bl	8005118 <I2C_IsErrorOccurred>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e026      	b.n	8005110 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fd fbfd 	bl	80028c0 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d113      	bne.n	8005100 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e007      	b.n	8005110 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b20      	cmp	r3, #32
 800510c:	d1cf      	bne.n	80050ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	d068      	beq.n	8005216 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2210      	movs	r2, #16
 800514a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800514c:	e049      	b.n	80051e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d045      	beq.n	80051e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005156:	f7fd fbb3 	bl	80028c0 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	d302      	bcc.n	800516c <I2C_IsErrorOccurred+0x54>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d13a      	bne.n	80051e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005176:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800517e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800518a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518e:	d121      	bne.n	80051d4 <I2C_IsErrorOccurred+0xbc>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005196:	d01d      	beq.n	80051d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	2b20      	cmp	r3, #32
 800519c:	d01a      	beq.n	80051d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051ae:	f7fd fb87 	bl	80028c0 <HAL_GetTick>
 80051b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051b4:	e00e      	b.n	80051d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051b6:	f7fd fb83 	bl	80028c0 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b19      	cmp	r3, #25
 80051c2:	d907      	bls.n	80051d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	f043 0320 	orr.w	r3, r3, #32
 80051ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80051d2:	e006      	b.n	80051e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d1e9      	bne.n	80051b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d003      	beq.n	80051f8 <I2C_IsErrorOccurred+0xe0>
 80051f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0aa      	beq.n	800514e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2220      	movs	r2, #32
 8005206:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	f043 0304 	orr.w	r3, r3, #4
 800520e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f043 0308 	orr.w	r3, r3, #8
 8005250:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800525a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f043 0302 	orr.w	r3, r3, #2
 8005272:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800527c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01c      	beq.n	80052c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff fe63 	bl	8004f58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <I2C_IsErrorOccurred+0x1bc>)
 800529e:	400b      	ands	r3, r1
 80052a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80052c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3728      	adds	r7, #40	; 0x28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	fe00e800 	.word	0xfe00e800

080052d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	817b      	strh	r3, [r7, #10]
 80052e6:	4613      	mov	r3, r2
 80052e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ea:	897b      	ldrh	r3, [r7, #10]
 80052ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052f0:	7a7b      	ldrb	r3, [r7, #9]
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	4313      	orrs	r3, r2
 8005302:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005306:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	0d5b      	lsrs	r3, r3, #21
 8005312:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <I2C_TransferConfig+0x60>)
 8005318:	430b      	orrs	r3, r1
 800531a:	43db      	mvns	r3, r3
 800531c:	ea02 0103 	and.w	r1, r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	03ff63ff 	.word	0x03ff63ff

0800533c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b20      	cmp	r3, #32
 8005350:	d138      	bne.n	80053c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800535c:	2302      	movs	r3, #2
 800535e:	e032      	b.n	80053c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2224      	movs	r2, #36	; 0x24
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800538e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6819      	ldr	r1, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e000      	b.n	80053c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
  }
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d139      	bne.n	800545c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e033      	b.n	800545e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2224      	movs	r2, #36	; 0x24
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005424:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e000      	b.n	800545e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800545c:	2302      	movs	r3, #2
  }
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800546a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546c:	b08f      	sub	sp, #60	; 0x3c
 800546e:	af0a      	add	r7, sp, #40	; 0x28
 8005470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e116      	b.n	80056aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fc fea4 	bl	80021e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2203      	movs	r2, #3
 80054a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fe92 	bl	80071e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	603b      	str	r3, [r7, #0]
 80054c6:	687e      	ldr	r6, [r7, #4]
 80054c8:	466d      	mov	r5, sp
 80054ca:	f106 0410 	add.w	r4, r6, #16
 80054ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054da:	e885 0003 	stmia.w	r5, {r0, r1}
 80054de:	1d33      	adds	r3, r6, #4
 80054e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054e2:	6838      	ldr	r0, [r7, #0]
 80054e4:	f001 fe26 	bl	8007134 <USB_CoreInit>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e0d7      	b.n	80056aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f001 fe80 	bl	8007206 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
 800550a:	e04a      	b.n	80055a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	333d      	adds	r3, #61	; 0x3d
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005520:	7bfa      	ldrb	r2, [r7, #15]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	333c      	adds	r3, #60	; 0x3c
 8005530:	7bfa      	ldrb	r2, [r7, #15]
 8005532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	b298      	uxth	r0, r3
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	3344      	adds	r3, #68	; 0x44
 8005548:	4602      	mov	r2, r0
 800554a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800554c:	7bfa      	ldrb	r2, [r7, #15]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	3340      	adds	r3, #64	; 0x40
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005560:	7bfa      	ldrb	r2, [r7, #15]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	3348      	adds	r3, #72	; 0x48
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	334c      	adds	r3, #76	; 0x4c
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	3354      	adds	r3, #84	; 0x54
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	3301      	adds	r3, #1
 80055a0:	73fb      	strb	r3, [r7, #15]
 80055a2:	7bfa      	ldrb	r2, [r7, #15]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d3af      	bcc.n	800550c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]
 80055b0:	e044      	b.n	800563c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055b2:	7bfa      	ldrb	r2, [r7, #15]
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055da:	7bfa      	ldrb	r2, [r7, #15]
 80055dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055de:	7bfa      	ldrb	r2, [r7, #15]
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055f4:	7bfa      	ldrb	r2, [r7, #15]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800560a:	7bfa      	ldrb	r2, [r7, #15]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005620:	7bfa      	ldrb	r2, [r7, #15]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	3301      	adds	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
 800563c:	7bfa      	ldrb	r2, [r7, #15]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d3b5      	bcc.n	80055b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	687e      	ldr	r6, [r7, #4]
 800564e:	466d      	mov	r5, sp
 8005650:	f106 0410 	add.w	r4, r6, #16
 8005654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800565a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800565c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005660:	e885 0003 	stmia.w	r5, {r0, r1}
 8005664:	1d33      	adds	r3, r6, #4
 8005666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005668:	6838      	ldr	r0, [r7, #0]
 800566a:	f001 fe19 	bl	80072a0 <USB_DevInit>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e014      	b.n	80056aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2b01      	cmp	r3, #1
 8005696:	d102      	bne.n	800569e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f80b 	bl	80056b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 ffd7 	bl	8007656 <USB_DevDisconnect>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080056b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	10000003 	.word	0x10000003

080056fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a04      	ldr	r2, [pc, #16]	; (8005718 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570a:	6013      	str	r3, [r2, #0]
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40007000 	.word	0x40007000

0800571c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005724:	2300      	movs	r3, #0
 8005726:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e291      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8087 	beq.w	800584e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005740:	4b96      	ldr	r3, [pc, #600]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b04      	cmp	r3, #4
 800574a:	d00c      	beq.n	8005766 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800574c:	4b93      	ldr	r3, [pc, #588]	; (800599c <HAL_RCC_OscConfig+0x280>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b08      	cmp	r3, #8
 8005756:	d112      	bne.n	800577e <HAL_RCC_OscConfig+0x62>
 8005758:	4b90      	ldr	r3, [pc, #576]	; (800599c <HAL_RCC_OscConfig+0x280>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005764:	d10b      	bne.n	800577e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005766:	4b8d      	ldr	r3, [pc, #564]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d06c      	beq.n	800584c <HAL_RCC_OscConfig+0x130>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d168      	bne.n	800584c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e26b      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005786:	d106      	bne.n	8005796 <HAL_RCC_OscConfig+0x7a>
 8005788:	4b84      	ldr	r3, [pc, #528]	; (800599c <HAL_RCC_OscConfig+0x280>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a83      	ldr	r2, [pc, #524]	; (800599c <HAL_RCC_OscConfig+0x280>)
 800578e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e02e      	b.n	80057f4 <HAL_RCC_OscConfig+0xd8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x9c>
 800579e:	4b7f      	ldr	r3, [pc, #508]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a7e      	ldr	r2, [pc, #504]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4b7c      	ldr	r3, [pc, #496]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a7b      	ldr	r2, [pc, #492]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e01d      	b.n	80057f4 <HAL_RCC_OscConfig+0xd8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057c0:	d10c      	bne.n	80057dc <HAL_RCC_OscConfig+0xc0>
 80057c2:	4b76      	ldr	r3, [pc, #472]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a75      	ldr	r2, [pc, #468]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b73      	ldr	r3, [pc, #460]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a72      	ldr	r2, [pc, #456]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0xd8>
 80057dc:	4b6f      	ldr	r3, [pc, #444]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a6e      	ldr	r2, [pc, #440]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	4b6c      	ldr	r3, [pc, #432]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6b      	ldr	r2, [pc, #428]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80057ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d013      	beq.n	8005824 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fc:	f7fd f860 	bl	80028c0 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005804:	f7fd f85c 	bl	80028c0 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e21f      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005816:	4b61      	ldr	r3, [pc, #388]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0xe8>
 8005822:	e014      	b.n	800584e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fd f84c 	bl	80028c0 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800582c:	f7fd f848 	bl	80028c0 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	; 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e20b      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583e:	4b57      	ldr	r3, [pc, #348]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0x110>
 800584a:	e000      	b.n	800584e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800584c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d069      	beq.n	800592e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800585a:	4b50      	ldr	r3, [pc, #320]	; (800599c <HAL_RCC_OscConfig+0x280>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005866:	4b4d      	ldr	r3, [pc, #308]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b08      	cmp	r3, #8
 8005870:	d11c      	bne.n	80058ac <HAL_RCC_OscConfig+0x190>
 8005872:	4b4a      	ldr	r3, [pc, #296]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d116      	bne.n	80058ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587e:	4b47      	ldr	r3, [pc, #284]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_RCC_OscConfig+0x17a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d001      	beq.n	8005896 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e1df      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005896:	4b41      	ldr	r3, [pc, #260]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	493d      	ldr	r1, [pc, #244]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058aa:	e040      	b.n	800592e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d023      	beq.n	80058fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b4:	4b39      	ldr	r3, [pc, #228]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a38      	ldr	r2, [pc, #224]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fc fffe 	bl	80028c0 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c8:	f7fc fffa 	bl	80028c0 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e1bd      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	4b30      	ldr	r3, [pc, #192]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e6:	4b2d      	ldr	r3, [pc, #180]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4929      	ldr	r1, [pc, #164]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
 80058fa:	e018      	b.n	800592e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fc:	4b27      	ldr	r3, [pc, #156]	; (800599c <HAL_RCC_OscConfig+0x280>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a26      	ldr	r2, [pc, #152]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fc ffda 	bl	80028c0 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005910:	f7fc ffd6 	bl	80028c0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e199      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005922:	4b1e      	ldr	r3, [pc, #120]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f0      	bne.n	8005910 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d038      	beq.n	80059ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d019      	beq.n	8005976 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005942:	4b16      	ldr	r3, [pc, #88]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594e:	f7fc ffb7 	bl	80028c0 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005956:	f7fc ffb3 	bl	80028c0 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e176      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <HAL_RCC_OscConfig+0x280>)
 800596a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCC_OscConfig+0x23a>
 8005974:	e01a      	b.n	80059ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005976:	4b09      	ldr	r3, [pc, #36]	; (800599c <HAL_RCC_OscConfig+0x280>)
 8005978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597a:	4a08      	ldr	r2, [pc, #32]	; (800599c <HAL_RCC_OscConfig+0x280>)
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005982:	f7fc ff9d 	bl	80028c0 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005988:	e00a      	b.n	80059a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800598a:	f7fc ff99 	bl	80028c0 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d903      	bls.n	80059a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e15c      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
 800599c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a0:	4b91      	ldr	r3, [pc, #580]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 80059a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ee      	bne.n	800598a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a4 	beq.w	8005b02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ba:	4b8b      	ldr	r3, [pc, #556]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b88      	ldr	r3, [pc, #544]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a87      	ldr	r2, [pc, #540]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
 80059d2:	4b85      	ldr	r3, [pc, #532]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059de:	2301      	movs	r3, #1
 80059e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059e2:	4b82      	ldr	r3, [pc, #520]	; (8005bec <HAL_RCC_OscConfig+0x4d0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d118      	bne.n	8005a20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80059ee:	4b7f      	ldr	r3, [pc, #508]	; (8005bec <HAL_RCC_OscConfig+0x4d0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a7e      	ldr	r2, [pc, #504]	; (8005bec <HAL_RCC_OscConfig+0x4d0>)
 80059f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059fa:	f7fc ff61 	bl	80028c0 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a02:	f7fc ff5d 	bl	80028c0 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b64      	cmp	r3, #100	; 0x64
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e120      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a14:	4b75      	ldr	r3, [pc, #468]	; (8005bec <HAL_RCC_OscConfig+0x4d0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d106      	bne.n	8005a36 <HAL_RCC_OscConfig+0x31a>
 8005a28:	4b6f      	ldr	r3, [pc, #444]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	4a6e      	ldr	r2, [pc, #440]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	6713      	str	r3, [r2, #112]	; 0x70
 8005a34:	e02d      	b.n	8005a92 <HAL_RCC_OscConfig+0x376>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10c      	bne.n	8005a58 <HAL_RCC_OscConfig+0x33c>
 8005a3e:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	4a69      	ldr	r2, [pc, #420]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4a:	4b67      	ldr	r3, [pc, #412]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a66      	ldr	r2, [pc, #408]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
 8005a56:	e01c      	b.n	8005a92 <HAL_RCC_OscConfig+0x376>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d10c      	bne.n	8005a7a <HAL_RCC_OscConfig+0x35e>
 8005a60:	4b61      	ldr	r3, [pc, #388]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	4a60      	ldr	r2, [pc, #384]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6c:	4b5e      	ldr	r3, [pc, #376]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	4a5d      	ldr	r2, [pc, #372]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	6713      	str	r3, [r2, #112]	; 0x70
 8005a78:	e00b      	b.n	8005a92 <HAL_RCC_OscConfig+0x376>
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a5a      	ldr	r2, [pc, #360]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
 8005a86:	4b58      	ldr	r3, [pc, #352]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a57      	ldr	r2, [pc, #348]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005a8c:	f023 0304 	bic.w	r3, r3, #4
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d015      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9a:	f7fc ff11 	bl	80028c0 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fc ff0d 	bl	80028c0 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e0ce      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ee      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x386>
 8005ac4:	e014      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac6:	f7fc fefb 	bl	80028c0 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fc fef7 	bl	80028c0 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e0b8      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae4:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1ee      	bne.n	8005ace <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d105      	bne.n	8005b02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af6:	4b3c      	ldr	r3, [pc, #240]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	4a3b      	ldr	r2, [pc, #236]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80a4 	beq.w	8005c54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b0c:	4b36      	ldr	r3, [pc, #216]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 030c 	and.w	r3, r3, #12
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d06b      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d149      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b20:	4b31      	ldr	r3, [pc, #196]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fc fec8 	bl	80028c0 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b34:	f7fc fec4 	bl	80028c0 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e087      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b46:	4b28      	ldr	r3, [pc, #160]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69da      	ldr	r2, [r3, #28]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	019b      	lsls	r3, r3, #6
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	061b      	lsls	r3, r3, #24
 8005b76:	4313      	orrs	r3, r2
 8005b78:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005b7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b80:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fc fe98 	bl	80028c0 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b94:	f7fc fe94 	bl	80028c0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e057      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0x478>
 8005bb2:	e04f      	b.n	8005c54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a0b      	ldr	r2, [pc, #44]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fc fe7e 	bl	80028c0 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc8:	f7fc fe7a 	bl	80028c0 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e03d      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bda:	4b03      	ldr	r3, [pc, #12]	; (8005be8 <HAL_RCC_OscConfig+0x4cc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x4ac>
 8005be6:	e035      	b.n	8005c54 <HAL_RCC_OscConfig+0x538>
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005bf0:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <HAL_RCC_OscConfig+0x544>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d028      	beq.n	8005c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d121      	bne.n	8005c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d11a      	bne.n	8005c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c20:	4013      	ands	r3, r2
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d111      	bne.n	8005c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800

08005c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0d0      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d910      	bls.n	8005cac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b67      	ldr	r3, [pc, #412]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 020f 	bic.w	r2, r3, #15
 8005c92:	4965      	ldr	r1, [pc, #404]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b63      	ldr	r3, [pc, #396]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0b8      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc4:	4b59      	ldr	r3, [pc, #356]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4a58      	ldr	r2, [pc, #352]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cdc:	4b53      	ldr	r3, [pc, #332]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a52      	ldr	r2, [pc, #328]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ce6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce8:	4b50      	ldr	r3, [pc, #320]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	494d      	ldr	r1, [pc, #308]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d040      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d115      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d26:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e073      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d36:	4b3d      	ldr	r3, [pc, #244]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e06b      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4936      	ldr	r1, [pc, #216]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d58:	f7fc fdb2 	bl	80028c0 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fc fdae 	bl	80028c0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e053      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d210      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 020f 	bic.w	r2, r3, #15
 8005d9e:	4922      	ldr	r1, [pc, #136]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <HAL_RCC_ClockConfig+0x1c4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e032      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4916      	ldr	r1, [pc, #88]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	490e      	ldr	r1, [pc, #56]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005df6:	f000 f821 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_RCC_ClockConfig+0x1c8>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	490a      	ldr	r1, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x1cc>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <HAL_RCC_ClockConfig+0x1d0>)
 8005e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <HAL_RCC_ClockConfig+0x1d4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fc fd0e 	bl	8002838 <HAL_InitTick>

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40023c00 	.word	0x40023c00
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	0801a64c 	.word	0x0801a64c
 8005e34:	20000018 	.word	0x20000018
 8005e38:	2000001c 	.word	0x2000001c

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e40:	b094      	sub	sp, #80	; 0x50
 8005e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	647b      	str	r3, [r7, #68]	; 0x44
 8005e48:	2300      	movs	r3, #0
 8005e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e54:	4b79      	ldr	r3, [pc, #484]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d00d      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x40>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	f200 80e1 	bhi.w	8006028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e6e:	e0db      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e70:	4b73      	ldr	r3, [pc, #460]	; (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e74:	e0db      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e76:	4b73      	ldr	r3, [pc, #460]	; (8006044 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e7a:	e0d8      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e7c:	4b6f      	ldr	r3, [pc, #444]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e86:	4b6d      	ldr	r3, [pc, #436]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d063      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e92:	4b6a      	ldr	r3, [pc, #424]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	2200      	movs	r2, #0
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	0159      	lsls	r1, r3, #5
 8005ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ec0:	0150      	lsls	r0, r2, #5
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	1a51      	subs	r1, r2, r1
 8005eca:	6139      	str	r1, [r7, #16]
 8005ecc:	4629      	mov	r1, r5
 8005ece:	eb63 0301 	sbc.w	r3, r3, r1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	018b      	lsls	r3, r1, #6
 8005ee4:	4651      	mov	r1, sl
 8005ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eea:	4651      	mov	r1, sl
 8005eec:	018a      	lsls	r2, r1, #6
 8005eee:	4651      	mov	r1, sl
 8005ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f0e:	4690      	mov	r8, r2
 8005f10:	4699      	mov	r9, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	eb18 0303 	adds.w	r3, r8, r3
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	eb49 0303 	adc.w	r3, r9, r3
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f2e:	4629      	mov	r1, r5
 8005f30:	024b      	lsls	r3, r1, #9
 8005f32:	4621      	mov	r1, r4
 8005f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f38:	4621      	mov	r1, r4
 8005f3a:	024a      	lsls	r2, r1, #9
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f42:	2200      	movs	r2, #0
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f4c:	f7fa f9b0 	bl	80002b0 <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4613      	mov	r3, r2
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f58:	e058      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5a:	4b38      	ldr	r3, [pc, #224]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	4611      	mov	r1, r2
 8005f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	f04f 0000 	mov.w	r0, #0
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	0159      	lsls	r1, r3, #5
 8005f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f86:	0150      	lsls	r0, r2, #5
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f92:	4649      	mov	r1, r9
 8005f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fac:	ebb2 040a 	subs.w	r4, r2, sl
 8005fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	00eb      	lsls	r3, r5, #3
 8005fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc2:	00e2      	lsls	r2, r4, #3
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	4643      	mov	r3, r8
 8005fca:	18e3      	adds	r3, r4, r3
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	464b      	mov	r3, r9
 8005fd0:	eb45 0303 	adc.w	r3, r5, r3
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	028b      	lsls	r3, r1, #10
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fec:	4621      	mov	r1, r4
 8005fee:	028a      	lsls	r2, r1, #10
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	61fa      	str	r2, [r7, #28]
 8005ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006000:	f7fa f956 	bl	80002b0 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4613      	mov	r3, r2
 800600a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800600c:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	3301      	adds	r3, #1
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800601c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800601e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006026:	e002      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800602c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006030:	4618      	mov	r0, r3
 8006032:	3750      	adds	r7, #80	; 0x50
 8006034:	46bd      	mov	sp, r7
 8006036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800
 8006040:	00f42400 	.word	0x00f42400
 8006044:	007a1200 	.word	0x007a1200

08006048 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <HAL_RCC_GetHCLKFreq+0x14>)
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000018 	.word	0x20000018

08006060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006064:	f7ff fff0 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0a9b      	lsrs	r3, r3, #10
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4903      	ldr	r1, [pc, #12]	; (8006084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40023800 	.word	0x40023800
 8006084:	0801a65c 	.word	0x0801a65c

08006088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800608c:	f7ff ffdc 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8006090:	4602      	mov	r2, r0
 8006092:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	0b5b      	lsrs	r3, r3, #13
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	4903      	ldr	r1, [pc, #12]	; (80060ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800609e:	5ccb      	ldrb	r3, [r1, r3]
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40023800 	.word	0x40023800
 80060ac:	0801a65c 	.word	0x0801a65c

080060b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d012      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060d8:	4b69      	ldr	r3, [pc, #420]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4a68      	ldr	r2, [pc, #416]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060e2:	6093      	str	r3, [r2, #8]
 80060e4:	4b66      	ldr	r3, [pc, #408]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ec:	4964      	ldr	r1, [pc, #400]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060fa:	2301      	movs	r3, #1
 80060fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d017      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800610a:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	4959      	ldr	r1, [pc, #356]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006128:	d101      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006136:	2301      	movs	r3, #1
 8006138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d017      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006146:	4b4e      	ldr	r3, [pc, #312]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800614c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	494a      	ldr	r1, [pc, #296]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006164:	d101      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006166:	2301      	movs	r3, #1
 8006168:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006172:	2301      	movs	r3, #1
 8006174:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006182:	2301      	movs	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 808b 	beq.w	80062aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006194:	4b3a      	ldr	r3, [pc, #232]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	4a39      	ldr	r2, [pc, #228]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619e:	6413      	str	r3, [r2, #64]	; 0x40
 80061a0:	4b37      	ldr	r3, [pc, #220]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061ac:	4b35      	ldr	r3, [pc, #212]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a34      	ldr	r2, [pc, #208]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b8:	f7fc fb82 	bl	80028c0 <HAL_GetTick>
 80061bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fc fb7e 	bl	80028c0 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e357      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061d2:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061de:	4b28      	ldr	r3, [pc, #160]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d035      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d02e      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061fc:	4b20      	ldr	r3, [pc, #128]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006204:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006210:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006212:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	4a1a      	ldr	r2, [pc, #104]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800621e:	4a18      	ldr	r2, [pc, #96]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b01      	cmp	r3, #1
 800622e:	d114      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fc fb46 	bl	80028c0 <HAL_GetTick>
 8006234:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006236:	e00a      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006238:	f7fc fb42 	bl	80028c0 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f241 3288 	movw	r2, #5000	; 0x1388
 8006246:	4293      	cmp	r3, r2
 8006248:	d901      	bls.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e319      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ee      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006266:	d111      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006274:	4b04      	ldr	r3, [pc, #16]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006276:	400b      	ands	r3, r1
 8006278:	4901      	ldr	r1, [pc, #4]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627a:	4313      	orrs	r3, r2
 800627c:	608b      	str	r3, [r1, #8]
 800627e:	e00b      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006280:	40023800 	.word	0x40023800
 8006284:	40007000 	.word	0x40007000
 8006288:	0ffffcff 	.word	0x0ffffcff
 800628c:	4baa      	ldr	r3, [pc, #680]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4aa9      	ldr	r2, [pc, #676]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006292:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006296:	6093      	str	r3, [r2, #8]
 8006298:	4ba7      	ldr	r3, [pc, #668]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800629a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a4:	49a4      	ldr	r1, [pc, #656]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062b6:	4ba0      	ldr	r3, [pc, #640]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062bc:	4a9e      	ldr	r2, [pc, #632]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062c6:	4b9c      	ldr	r3, [pc, #624]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	4999      	ldr	r1, [pc, #612]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062e4:	4b94      	ldr	r3, [pc, #592]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f2:	4991      	ldr	r1, [pc, #580]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006306:	4b8c      	ldr	r3, [pc, #560]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006314:	4988      	ldr	r1, [pc, #544]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006328:	4b83      	ldr	r3, [pc, #524]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006336:	4980      	ldr	r1, [pc, #512]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800634a:	4b7b      	ldr	r3, [pc, #492]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4977      	ldr	r1, [pc, #476]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800636c:	4b72      	ldr	r3, [pc, #456]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	f023 0203 	bic.w	r2, r3, #3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	496f      	ldr	r1, [pc, #444]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800638e:	4b6a      	ldr	r3, [pc, #424]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	f023 020c 	bic.w	r2, r3, #12
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639c:	4966      	ldr	r1, [pc, #408]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063b0:	4b61      	ldr	r3, [pc, #388]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063be:	495e      	ldr	r1, [pc, #376]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063d2:	4b59      	ldr	r3, [pc, #356]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e0:	4955      	ldr	r1, [pc, #340]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063f4:	4b50      	ldr	r3, [pc, #320]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	494d      	ldr	r1, [pc, #308]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006416:	4b48      	ldr	r3, [pc, #288]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	4944      	ldr	r1, [pc, #272]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006438:	4b3f      	ldr	r3, [pc, #252]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	493c      	ldr	r1, [pc, #240]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800645a:	4b37      	ldr	r3, [pc, #220]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006460:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006468:	4933      	ldr	r1, [pc, #204]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800647c:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800648a:	492b      	ldr	r1, [pc, #172]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d011      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800649e:	4b26      	ldr	r3, [pc, #152]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ac:	4922      	ldr	r1, [pc, #136]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064bc:	d101      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064de:	4b16      	ldr	r3, [pc, #88]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ec:	4912      	ldr	r1, [pc, #72]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006510:	4909      	ldr	r1, [pc, #36]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d006      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 80d9 	beq.w	80066de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800652c:	4b02      	ldr	r3, [pc, #8]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a01      	ldr	r2, [pc, #4]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006536:	e001      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006538:	40023800 	.word	0x40023800
 800653c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800653e:	f7fc f9bf 	bl	80028c0 <HAL_GetTick>
 8006542:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006544:	e008      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006546:	f7fc f9bb 	bl	80028c0 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b64      	cmp	r3, #100	; 0x64
 8006552:	d901      	bls.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e194      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006558:	4b6c      	ldr	r3, [pc, #432]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d021      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11d      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006578:	4b64      	ldr	r3, [pc, #400]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800657e:	0c1b      	lsrs	r3, r3, #16
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006586:	4b61      	ldr	r3, [pc, #388]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658c:	0e1b      	lsrs	r3, r3, #24
 800658e:	f003 030f 	and.w	r3, r3, #15
 8006592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	019a      	lsls	r2, r3, #6
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	041b      	lsls	r3, r3, #16
 800659e:	431a      	orrs	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	061b      	lsls	r3, r3, #24
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	071b      	lsls	r3, r3, #28
 80065ac:	4957      	ldr	r1, [pc, #348]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c8:	d00a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d02e      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065de:	d129      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065e0:	4b4a      	ldr	r3, [pc, #296]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e6:	0c1b      	lsrs	r3, r3, #16
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065ee:	4b47      	ldr	r3, [pc, #284]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f4:	0f1b      	lsrs	r3, r3, #28
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	019a      	lsls	r2, r3, #6
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	041b      	lsls	r3, r3, #16
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	061b      	lsls	r3, r3, #24
 800660e:	431a      	orrs	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	071b      	lsls	r3, r3, #28
 8006614:	493d      	ldr	r1, [pc, #244]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006616:	4313      	orrs	r3, r2
 8006618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800661c:	4b3b      	ldr	r3, [pc, #236]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800661e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006622:	f023 021f 	bic.w	r2, r3, #31
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	3b01      	subs	r3, #1
 800662c:	4937      	ldr	r1, [pc, #220]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01d      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006640:	4b32      	ldr	r3, [pc, #200]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800664e:	4b2f      	ldr	r3, [pc, #188]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006654:	0f1b      	lsrs	r3, r3, #28
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	019a      	lsls	r2, r3, #6
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	431a      	orrs	r2, r3
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	431a      	orrs	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	071b      	lsls	r3, r3, #28
 8006674:	4925      	ldr	r1, [pc, #148]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d011      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	019a      	lsls	r2, r3, #6
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	071b      	lsls	r3, r3, #28
 80066a4:	4919      	ldr	r1, [pc, #100]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066ac:	4b17      	ldr	r3, [pc, #92]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a16      	ldr	r2, [pc, #88]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b8:	f7fc f902 	bl	80028c0 <HAL_GetTick>
 80066bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066c0:	f7fc f8fe 	bl	80028c0 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	; 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0d7      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066d2:	4b0e      	ldr	r3, [pc, #56]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f040 80cd 	bne.w	8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066e6:	4b09      	ldr	r3, [pc, #36]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a08      	ldr	r2, [pc, #32]	; (800670c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f2:	f7fc f8e5 	bl	80028c0 <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066fa:	f7fc f8e1 	bl	80028c0 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b64      	cmp	r3, #100	; 0x64
 8006706:	d903      	bls.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e0ba      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800670c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006710:	4b5e      	ldr	r3, [pc, #376]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671c:	d0ed      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02e      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d12a      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006746:	4b51      	ldr	r3, [pc, #324]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674c:	0c1b      	lsrs	r3, r3, #16
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006754:	4b4d      	ldr	r3, [pc, #308]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	0f1b      	lsrs	r3, r3, #28
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	019a      	lsls	r2, r3, #6
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	061b      	lsls	r3, r3, #24
 8006774:	431a      	orrs	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	071b      	lsls	r3, r3, #28
 800677a:	4944      	ldr	r1, [pc, #272]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006782:	4b42      	ldr	r3, [pc, #264]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006788:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	3b01      	subs	r3, #1
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	493d      	ldr	r1, [pc, #244]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d022      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b0:	d11d      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067b2:	4b36      	ldr	r3, [pc, #216]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b8:	0e1b      	lsrs	r3, r3, #24
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067c0:	4b32      	ldr	r3, [pc, #200]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	0f1b      	lsrs	r3, r3, #28
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	019a      	lsls	r2, r3, #6
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	041b      	lsls	r3, r3, #16
 80067da:	431a      	orrs	r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	061b      	lsls	r3, r3, #24
 80067e0:	431a      	orrs	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	071b      	lsls	r3, r3, #28
 80067e6:	4929      	ldr	r1, [pc, #164]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d028      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067fa:	4b24      	ldr	r3, [pc, #144]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006800:	0e1b      	lsrs	r3, r3, #24
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006808:	4b20      	ldr	r3, [pc, #128]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	0c1b      	lsrs	r3, r3, #16
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	019a      	lsls	r2, r3, #6
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	431a      	orrs	r2, r3
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	071b      	lsls	r3, r3, #28
 800682e:	4917      	ldr	r1, [pc, #92]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006836:	4b15      	ldr	r3, [pc, #84]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800683c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	4911      	ldr	r1, [pc, #68]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0e      	ldr	r2, [pc, #56]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006858:	f7fc f832 	bl	80028c0 <HAL_GetTick>
 800685c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006860:	f7fc f82e 	bl	80028c0 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b64      	cmp	r3, #100	; 0x64
 800686c:	d901      	bls.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e007      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800687a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800687e:	d1ef      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800

08006890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e040      	b.n	8006924 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fb fc36 	bl	8002124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2224      	movs	r2, #36	; 0x24
 80068bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f82c 	bl	800692c <UART_SetConfig>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e022      	b.n	8006924 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa84 	bl	8006df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800690a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fb0b 	bl	8006f38 <UART_CheckIdleState>
 8006922:	4603      	mov	r3, r0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4ba6      	ldr	r3, [pc, #664]	; (8006bf0 <UART_SetConfig+0x2c4>)
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	6979      	ldr	r1, [r7, #20]
 8006960:	430b      	orrs	r3, r1
 8006962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a94      	ldr	r2, [pc, #592]	; (8006bf4 <UART_SetConfig+0x2c8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d120      	bne.n	80069ea <UART_SetConfig+0xbe>
 80069a8:	4b93      	ldr	r3, [pc, #588]	; (8006bf8 <UART_SetConfig+0x2cc>)
 80069aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d816      	bhi.n	80069e4 <UART_SetConfig+0xb8>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <UART_SetConfig+0x90>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069d9 	.word	0x080069d9
 80069c4:	080069d3 	.word	0x080069d3
 80069c8:	080069df 	.word	0x080069df
 80069cc:	2301      	movs	r3, #1
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e150      	b.n	8006c74 <UART_SetConfig+0x348>
 80069d2:	2302      	movs	r3, #2
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e14d      	b.n	8006c74 <UART_SetConfig+0x348>
 80069d8:	2304      	movs	r3, #4
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e14a      	b.n	8006c74 <UART_SetConfig+0x348>
 80069de:	2308      	movs	r3, #8
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e147      	b.n	8006c74 <UART_SetConfig+0x348>
 80069e4:	2310      	movs	r3, #16
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e144      	b.n	8006c74 <UART_SetConfig+0x348>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a83      	ldr	r2, [pc, #524]	; (8006bfc <UART_SetConfig+0x2d0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d132      	bne.n	8006a5a <UART_SetConfig+0x12e>
 80069f4:	4b80      	ldr	r3, [pc, #512]	; (8006bf8 <UART_SetConfig+0x2cc>)
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b0c      	cmp	r3, #12
 8006a00:	d828      	bhi.n	8006a54 <UART_SetConfig+0x128>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0xdc>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a3d 	.word	0x08006a3d
 8006a0c:	08006a55 	.word	0x08006a55
 8006a10:	08006a55 	.word	0x08006a55
 8006a14:	08006a55 	.word	0x08006a55
 8006a18:	08006a49 	.word	0x08006a49
 8006a1c:	08006a55 	.word	0x08006a55
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006a55 	.word	0x08006a55
 8006a28:	08006a43 	.word	0x08006a43
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a55 	.word	0x08006a55
 8006a38:	08006a4f 	.word	0x08006a4f
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e118      	b.n	8006c74 <UART_SetConfig+0x348>
 8006a42:	2302      	movs	r3, #2
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e115      	b.n	8006c74 <UART_SetConfig+0x348>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e112      	b.n	8006c74 <UART_SetConfig+0x348>
 8006a4e:	2308      	movs	r3, #8
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e10f      	b.n	8006c74 <UART_SetConfig+0x348>
 8006a54:	2310      	movs	r3, #16
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e10c      	b.n	8006c74 <UART_SetConfig+0x348>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a68      	ldr	r2, [pc, #416]	; (8006c00 <UART_SetConfig+0x2d4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d120      	bne.n	8006aa6 <UART_SetConfig+0x17a>
 8006a64:	4b64      	ldr	r3, [pc, #400]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a6e:	2b30      	cmp	r3, #48	; 0x30
 8006a70:	d013      	beq.n	8006a9a <UART_SetConfig+0x16e>
 8006a72:	2b30      	cmp	r3, #48	; 0x30
 8006a74:	d814      	bhi.n	8006aa0 <UART_SetConfig+0x174>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d009      	beq.n	8006a8e <UART_SetConfig+0x162>
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d810      	bhi.n	8006aa0 <UART_SetConfig+0x174>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <UART_SetConfig+0x15c>
 8006a82:	2b10      	cmp	r3, #16
 8006a84:	d006      	beq.n	8006a94 <UART_SetConfig+0x168>
 8006a86:	e00b      	b.n	8006aa0 <UART_SetConfig+0x174>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e0f2      	b.n	8006c74 <UART_SetConfig+0x348>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e0ef      	b.n	8006c74 <UART_SetConfig+0x348>
 8006a94:	2304      	movs	r3, #4
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e0ec      	b.n	8006c74 <UART_SetConfig+0x348>
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	77fb      	strb	r3, [r7, #31]
 8006a9e:	e0e9      	b.n	8006c74 <UART_SetConfig+0x348>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e0e6      	b.n	8006c74 <UART_SetConfig+0x348>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a56      	ldr	r2, [pc, #344]	; (8006c04 <UART_SetConfig+0x2d8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d120      	bne.n	8006af2 <UART_SetConfig+0x1c6>
 8006ab0:	4b51      	ldr	r3, [pc, #324]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aba:	2bc0      	cmp	r3, #192	; 0xc0
 8006abc:	d013      	beq.n	8006ae6 <UART_SetConfig+0x1ba>
 8006abe:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac0:	d814      	bhi.n	8006aec <UART_SetConfig+0x1c0>
 8006ac2:	2b80      	cmp	r3, #128	; 0x80
 8006ac4:	d009      	beq.n	8006ada <UART_SetConfig+0x1ae>
 8006ac6:	2b80      	cmp	r3, #128	; 0x80
 8006ac8:	d810      	bhi.n	8006aec <UART_SetConfig+0x1c0>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <UART_SetConfig+0x1a8>
 8006ace:	2b40      	cmp	r3, #64	; 0x40
 8006ad0:	d006      	beq.n	8006ae0 <UART_SetConfig+0x1b4>
 8006ad2:	e00b      	b.n	8006aec <UART_SetConfig+0x1c0>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e0cc      	b.n	8006c74 <UART_SetConfig+0x348>
 8006ada:	2302      	movs	r3, #2
 8006adc:	77fb      	strb	r3, [r7, #31]
 8006ade:	e0c9      	b.n	8006c74 <UART_SetConfig+0x348>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e0c6      	b.n	8006c74 <UART_SetConfig+0x348>
 8006ae6:	2308      	movs	r3, #8
 8006ae8:	77fb      	strb	r3, [r7, #31]
 8006aea:	e0c3      	b.n	8006c74 <UART_SetConfig+0x348>
 8006aec:	2310      	movs	r3, #16
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	e0c0      	b.n	8006c74 <UART_SetConfig+0x348>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a44      	ldr	r2, [pc, #272]	; (8006c08 <UART_SetConfig+0x2dc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d125      	bne.n	8006b48 <UART_SetConfig+0x21c>
 8006afc:	4b3e      	ldr	r3, [pc, #248]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0a:	d017      	beq.n	8006b3c <UART_SetConfig+0x210>
 8006b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b10:	d817      	bhi.n	8006b42 <UART_SetConfig+0x216>
 8006b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b16:	d00b      	beq.n	8006b30 <UART_SetConfig+0x204>
 8006b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b1c:	d811      	bhi.n	8006b42 <UART_SetConfig+0x216>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <UART_SetConfig+0x1fe>
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b26:	d006      	beq.n	8006b36 <UART_SetConfig+0x20a>
 8006b28:	e00b      	b.n	8006b42 <UART_SetConfig+0x216>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e0a1      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b30:	2302      	movs	r3, #2
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e09e      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b36:	2304      	movs	r3, #4
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e09b      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e098      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b42:	2310      	movs	r3, #16
 8006b44:	77fb      	strb	r3, [r7, #31]
 8006b46:	e095      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a2f      	ldr	r2, [pc, #188]	; (8006c0c <UART_SetConfig+0x2e0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d125      	bne.n	8006b9e <UART_SetConfig+0x272>
 8006b52:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b60:	d017      	beq.n	8006b92 <UART_SetConfig+0x266>
 8006b62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b66:	d817      	bhi.n	8006b98 <UART_SetConfig+0x26c>
 8006b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6c:	d00b      	beq.n	8006b86 <UART_SetConfig+0x25a>
 8006b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b72:	d811      	bhi.n	8006b98 <UART_SetConfig+0x26c>
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <UART_SetConfig+0x254>
 8006b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7c:	d006      	beq.n	8006b8c <UART_SetConfig+0x260>
 8006b7e:	e00b      	b.n	8006b98 <UART_SetConfig+0x26c>
 8006b80:	2301      	movs	r3, #1
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e076      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b86:	2302      	movs	r3, #2
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e073      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e070      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b92:	2308      	movs	r3, #8
 8006b94:	77fb      	strb	r3, [r7, #31]
 8006b96:	e06d      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b98:	2310      	movs	r3, #16
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	e06a      	b.n	8006c74 <UART_SetConfig+0x348>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <UART_SetConfig+0x2e4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d138      	bne.n	8006c1a <UART_SetConfig+0x2ee>
 8006ba8:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bb6:	d017      	beq.n	8006be8 <UART_SetConfig+0x2bc>
 8006bb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bbc:	d82a      	bhi.n	8006c14 <UART_SetConfig+0x2e8>
 8006bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc2:	d00b      	beq.n	8006bdc <UART_SetConfig+0x2b0>
 8006bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc8:	d824      	bhi.n	8006c14 <UART_SetConfig+0x2e8>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <UART_SetConfig+0x2aa>
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd2:	d006      	beq.n	8006be2 <UART_SetConfig+0x2b6>
 8006bd4:	e01e      	b.n	8006c14 <UART_SetConfig+0x2e8>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	77fb      	strb	r3, [r7, #31]
 8006bda:	e04b      	b.n	8006c74 <UART_SetConfig+0x348>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e048      	b.n	8006c74 <UART_SetConfig+0x348>
 8006be2:	2304      	movs	r3, #4
 8006be4:	77fb      	strb	r3, [r7, #31]
 8006be6:	e045      	b.n	8006c74 <UART_SetConfig+0x348>
 8006be8:	2308      	movs	r3, #8
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e042      	b.n	8006c74 <UART_SetConfig+0x348>
 8006bee:	bf00      	nop
 8006bf0:	efff69f3 	.word	0xefff69f3
 8006bf4:	40011000 	.word	0x40011000
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	40004400 	.word	0x40004400
 8006c00:	40004800 	.word	0x40004800
 8006c04:	40004c00 	.word	0x40004c00
 8006c08:	40005000 	.word	0x40005000
 8006c0c:	40011400 	.word	0x40011400
 8006c10:	40007800 	.word	0x40007800
 8006c14:	2310      	movs	r3, #16
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e02c      	b.n	8006c74 <UART_SetConfig+0x348>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a72      	ldr	r2, [pc, #456]	; (8006de8 <UART_SetConfig+0x4bc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d125      	bne.n	8006c70 <UART_SetConfig+0x344>
 8006c24:	4b71      	ldr	r3, [pc, #452]	; (8006dec <UART_SetConfig+0x4c0>)
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c32:	d017      	beq.n	8006c64 <UART_SetConfig+0x338>
 8006c34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c38:	d817      	bhi.n	8006c6a <UART_SetConfig+0x33e>
 8006c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3e:	d00b      	beq.n	8006c58 <UART_SetConfig+0x32c>
 8006c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c44:	d811      	bhi.n	8006c6a <UART_SetConfig+0x33e>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <UART_SetConfig+0x326>
 8006c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4e:	d006      	beq.n	8006c5e <UART_SetConfig+0x332>
 8006c50:	e00b      	b.n	8006c6a <UART_SetConfig+0x33e>
 8006c52:	2300      	movs	r3, #0
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e00d      	b.n	8006c74 <UART_SetConfig+0x348>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e00a      	b.n	8006c74 <UART_SetConfig+0x348>
 8006c5e:	2304      	movs	r3, #4
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e007      	b.n	8006c74 <UART_SetConfig+0x348>
 8006c64:	2308      	movs	r3, #8
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e004      	b.n	8006c74 <UART_SetConfig+0x348>
 8006c6a:	2310      	movs	r3, #16
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e001      	b.n	8006c74 <UART_SetConfig+0x348>
 8006c70:	2310      	movs	r3, #16
 8006c72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7c:	d15b      	bne.n	8006d36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c7e:	7ffb      	ldrb	r3, [r7, #31]
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d828      	bhi.n	8006cd6 <UART_SetConfig+0x3aa>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x360>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cd7 	.word	0x08006cd7
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cd7 	.word	0x08006cd7
 8006ca4:	08006cd7 	.word	0x08006cd7
 8006ca8:	08006cd7 	.word	0x08006cd7
 8006cac:	08006ccf 	.word	0x08006ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7ff f9d6 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 8006cb4:	61b8      	str	r0, [r7, #24]
        break;
 8006cb6:	e013      	b.n	8006ce0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7ff f9e6 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 8006cbc:	61b8      	str	r0, [r7, #24]
        break;
 8006cbe:	e00f      	b.n	8006ce0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc0:	4b4b      	ldr	r3, [pc, #300]	; (8006df0 <UART_SetConfig+0x4c4>)
 8006cc2:	61bb      	str	r3, [r7, #24]
        break;
 8006cc4:	e00c      	b.n	8006ce0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc6:	f7ff f8b9 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8006cca:	61b8      	str	r0, [r7, #24]
        break;
 8006ccc:	e008      	b.n	8006ce0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	61bb      	str	r3, [r7, #24]
        break;
 8006cd4:	e004      	b.n	8006ce0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8006cde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d074      	beq.n	8006dd0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	005a      	lsls	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	441a      	add	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2b0f      	cmp	r3, #15
 8006d00:	d916      	bls.n	8006d30 <UART_SetConfig+0x404>
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d08:	d212      	bcs.n	8006d30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f023 030f 	bic.w	r3, r3, #15
 8006d12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	89fa      	ldrh	r2, [r7, #14]
 8006d2c:	60da      	str	r2, [r3, #12]
 8006d2e:	e04f      	b.n	8006dd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	77bb      	strb	r3, [r7, #30]
 8006d34:	e04c      	b.n	8006dd0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d36:	7ffb      	ldrb	r3, [r7, #31]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d828      	bhi.n	8006d8e <UART_SetConfig+0x462>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x418>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	08006d8f 	.word	0x08006d8f
 8006d54:	08006d7f 	.word	0x08006d7f
 8006d58:	08006d8f 	.word	0x08006d8f
 8006d5c:	08006d8f 	.word	0x08006d8f
 8006d60:	08006d8f 	.word	0x08006d8f
 8006d64:	08006d87 	.word	0x08006d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7ff f97a 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 8006d6c:	61b8      	str	r0, [r7, #24]
        break;
 8006d6e:	e013      	b.n	8006d98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d70:	f7ff f98a 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 8006d74:	61b8      	str	r0, [r7, #24]
        break;
 8006d76:	e00f      	b.n	8006d98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <UART_SetConfig+0x4c4>)
 8006d7a:	61bb      	str	r3, [r7, #24]
        break;
 8006d7c:	e00c      	b.n	8006d98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7e:	f7ff f85d 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8006d82:	61b8      	str	r0, [r7, #24]
        break;
 8006d84:	e008      	b.n	8006d98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8a:	61bb      	str	r3, [r7, #24]
        break;
 8006d8c:	e004      	b.n	8006d98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	77bb      	strb	r3, [r7, #30]
        break;
 8006d96:	bf00      	nop
    }

    if (pclk != 0U)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d018      	beq.n	8006dd0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	085a      	lsrs	r2, r3, #1
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	441a      	add	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b0f      	cmp	r3, #15
 8006db6:	d909      	bls.n	8006dcc <UART_SetConfig+0x4a0>
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbe:	d205      	bcs.n	8006dcc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60da      	str	r2, [r3, #12]
 8006dca:	e001      	b.n	8006dd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ddc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40007c00 	.word	0x40007c00
 8006dec:	40023800 	.word	0x40023800
 8006df0:	00f42400 	.word	0x00f42400

08006df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01a      	beq.n	8006f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef2:	d10a      	bne.n	8006f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f48:	f7fb fcba 	bl	80028c0 <HAL_GetTick>
 8006f4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d10e      	bne.n	8006f7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f81b 	bl	8006fa6 <UART_WaitOnFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e011      	b.n	8006f9e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b09c      	sub	sp, #112	; 0x70
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	603b      	str	r3, [r7, #0]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb6:	e0a7      	b.n	8007108 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	f000 80a3 	beq.w	8007108 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc2:	f7fb fc7d 	bl	80028c0 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d13f      	bne.n	8007058 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fec:	667b      	str	r3, [r7, #100]	; 0x64
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ff8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ffc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e6      	bne.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3308      	adds	r3, #8
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	663b      	str	r3, [r7, #96]	; 0x60
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3308      	adds	r3, #8
 8007028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800702a:	64ba      	str	r2, [r7, #72]	; 0x48
 800702c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e5      	bne.n	800700a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e068      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d050      	beq.n	8007108 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007074:	d148      	bne.n	8007108 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800707e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
 80070a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e6      	bne.n	8007080 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3308      	adds	r3, #8
 80070b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	613b      	str	r3, [r7, #16]
   return(result);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f023 0301 	bic.w	r3, r3, #1
 80070c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3308      	adds	r3, #8
 80070d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070d2:	623a      	str	r2, [r7, #32]
 80070d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	69f9      	ldr	r1, [r7, #28]
 80070d8:	6a3a      	ldr	r2, [r7, #32]
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e5      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e010      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69da      	ldr	r2, [r3, #28]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4013      	ands	r3, r2
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	429a      	cmp	r2, r3
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	429a      	cmp	r2, r3
 8007124:	f43f af48 	beq.w	8006fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3770      	adds	r7, #112	; 0x70
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007134:	b084      	sub	sp, #16
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	f107 001c 	add.w	r0, r7, #28
 8007142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	2b01      	cmp	r3, #1
 800714a:	d120      	bne.n	800718e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <USB_CoreInit+0xac>)
 800715e:	4013      	ands	r3, r2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d105      	bne.n	8007182 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa96 	bl	80076b4 <USB_CoreReset>
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
 800718c:	e010      	b.n	80071b0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fa8a 	bl	80076b4 <USB_CoreReset>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d10b      	bne.n	80071ce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f043 0206 	orr.w	r2, r3, #6
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f043 0220 	orr.w	r2, r3, #32
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071da:	b004      	add	sp, #16
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	ffbdffbf 	.word	0xffbdffbf

080071e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f023 0201 	bic.w	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007222:	78fb      	ldrb	r3, [r7, #3]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d115      	bne.n	8007254 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007234:	2001      	movs	r0, #1
 8007236:	f7fb fb4f 	bl	80028d8 <HAL_Delay>
      ms++;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa29 	bl	8007698 <USB_GetMode>
 8007246:	4603      	mov	r3, r0
 8007248:	2b01      	cmp	r3, #1
 800724a:	d01e      	beq.n	800728a <USB_SetCurrentMode+0x84>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b31      	cmp	r3, #49	; 0x31
 8007250:	d9f0      	bls.n	8007234 <USB_SetCurrentMode+0x2e>
 8007252:	e01a      	b.n	800728a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d115      	bne.n	8007286 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007266:	2001      	movs	r0, #1
 8007268:	f7fb fb36 	bl	80028d8 <HAL_Delay>
      ms++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa10 	bl	8007698 <USB_GetMode>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <USB_SetCurrentMode+0x84>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b31      	cmp	r3, #49	; 0x31
 8007282:	d9f0      	bls.n	8007266 <USB_SetCurrentMode+0x60>
 8007284:	e001      	b.n	800728a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e005      	b.n	8007296 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b32      	cmp	r3, #50	; 0x32
 800728e:	d101      	bne.n	8007294 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072a0:	b084      	sub	sp, #16
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	e009      	b.n	80072d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3340      	adds	r3, #64	; 0x40
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	3301      	adds	r3, #1
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b0e      	cmp	r3, #14
 80072d8:	d9f2      	bls.n	80072c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11c      	bne.n	800731a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ee:	f043 0302 	orr.w	r3, r3, #2
 80072f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e005      	b.n	8007326 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800732c:	461a      	mov	r2, r3
 800732e:	2300      	movs	r3, #0
 8007330:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007338:	4619      	mov	r1, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007340:	461a      	mov	r2, r3
 8007342:	680b      	ldr	r3, [r1, #0]
 8007344:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	2b01      	cmp	r3, #1
 800734a:	d10c      	bne.n	8007366 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007352:	2100      	movs	r1, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f965 	bl	8007624 <USB_SetDevSpeed>
 800735a:	e008      	b.n	800736e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800735c:	2101      	movs	r1, #1
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f960 	bl	8007624 <USB_SetDevSpeed>
 8007364:	e003      	b.n	800736e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007366:	2103      	movs	r1, #3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f95b 	bl	8007624 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800736e:	2110      	movs	r1, #16
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8f3 	bl	800755c <USB_FlushTxFifo>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f91f 	bl	80075c4 <USB_FlushRxFifo>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007396:	461a      	mov	r2, r3
 8007398:	2300      	movs	r3, #0
 800739a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a2:	461a      	mov	r2, r3
 80073a4:	2300      	movs	r3, #0
 80073a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	461a      	mov	r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073b4:	2300      	movs	r3, #0
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	e043      	b.n	8007442 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d0:	d118      	bne.n	8007404 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e4:	461a      	mov	r2, r3
 80073e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	e013      	b.n	8007416 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fa:	461a      	mov	r2, r3
 80073fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	e008      	b.n	8007416 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	461a      	mov	r2, r3
 8007412:	2300      	movs	r3, #0
 8007414:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007422:	461a      	mov	r2, r3
 8007424:	2300      	movs	r3, #0
 8007426:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	461a      	mov	r2, r3
 8007436:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800743a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	3301      	adds	r3, #1
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	429a      	cmp	r2, r3
 8007448:	d3b7      	bcc.n	80073ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	e043      	b.n	80074d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007466:	d118      	bne.n	800749a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747a:	461a      	mov	r2, r3
 800747c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e013      	b.n	80074ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007490:	461a      	mov	r2, r3
 8007492:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e008      	b.n	80074ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a6:	461a      	mov	r2, r3
 80074a8:	2300      	movs	r3, #0
 80074aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	461a      	mov	r2, r3
 80074ba:	2300      	movs	r3, #0
 80074bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ca:	461a      	mov	r2, r3
 80074cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	3301      	adds	r3, #1
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d3b7      	bcc.n	8007450 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007500:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	f043 0210 	orr.w	r2, r3, #16
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <USB_DevInit+0x2b4>)
 800751a:	4313      	orrs	r3, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	f043 0208 	orr.w	r2, r3, #8
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d105      	bne.n	8007544 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	4b06      	ldr	r3, [pc, #24]	; (8007558 <USB_DevInit+0x2b8>)
 800753e:	4313      	orrs	r3, r2
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007550:	b004      	add	sp, #16
 8007552:	4770      	bx	lr
 8007554:	803c3800 	.word	0x803c3800
 8007558:	40000004 	.word	0x40000004

0800755c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3301      	adds	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <USB_FlushTxFifo+0x64>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d901      	bls.n	800757c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e01b      	b.n	80075b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	daf2      	bge.n	800756a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	019b      	lsls	r3, r3, #6
 800758c:	f043 0220 	orr.w	r2, r3, #32
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4a08      	ldr	r2, [pc, #32]	; (80075c0 <USB_FlushTxFifo+0x64>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d901      	bls.n	80075a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e006      	b.n	80075b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d0f0      	beq.n	8007594 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	00030d40 	.word	0x00030d40

080075c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a11      	ldr	r2, [pc, #68]	; (8007620 <USB_FlushRxFifo+0x5c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d901      	bls.n	80075e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e018      	b.n	8007614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	daf2      	bge.n	80075d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2210      	movs	r2, #16
 80075f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4a08      	ldr	r2, [pc, #32]	; (8007620 <USB_FlushRxFifo+0x5c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d901      	bls.n	8007606 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e006      	b.n	8007614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0310 	and.w	r3, r3, #16
 800760e:	2b10      	cmp	r3, #16
 8007610:	d0f0      	beq.n	80075f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	00030d40 	.word	0x00030d40

08007624 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007644:	4313      	orrs	r3, r2
 8007646:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007670:	f023 0303 	bic.w	r3, r3, #3
 8007674:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007684:	f043 0302 	orr.w	r3, r3, #2
 8007688:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	f003 0301 	and.w	r3, r3, #1
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3301      	adds	r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4a13      	ldr	r2, [pc, #76]	; (8007718 <USB_CoreReset+0x64>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d901      	bls.n	80076d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e01b      	b.n	800770a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	daf2      	bge.n	80076c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f043 0201 	orr.w	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4a09      	ldr	r2, [pc, #36]	; (8007718 <USB_CoreReset+0x64>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d901      	bls.n	80076fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e006      	b.n	800770a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b01      	cmp	r3, #1
 8007706:	d0f0      	beq.n	80076ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	00030d40 	.word	0x00030d40

0800771c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007722:	f000 fc55 	bl	8007fd0 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007726:	4b19      	ldr	r3, [pc, #100]	; (800778c <MX_LWIP_Init+0x70>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800772c:	4b18      	ldr	r3, [pc, #96]	; (8007790 <MX_LWIP_Init+0x74>)
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007732:	4b18      	ldr	r3, [pc, #96]	; (8007794 <MX_LWIP_Init+0x78>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007738:	4b17      	ldr	r3, [pc, #92]	; (8007798 <MX_LWIP_Init+0x7c>)
 800773a:	9302      	str	r3, [sp, #8]
 800773c:	4b17      	ldr	r3, [pc, #92]	; (800779c <MX_LWIP_Init+0x80>)
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	2300      	movs	r3, #0
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <MX_LWIP_Init+0x78>)
 8007746:	4a12      	ldr	r2, [pc, #72]	; (8007790 <MX_LWIP_Init+0x74>)
 8007748:	4910      	ldr	r1, [pc, #64]	; (800778c <MX_LWIP_Init+0x70>)
 800774a:	4815      	ldr	r0, [pc, #84]	; (80077a0 <MX_LWIP_Init+0x84>)
 800774c:	f001 f92c 	bl	80089a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007750:	4813      	ldr	r0, [pc, #76]	; (80077a0 <MX_LWIP_Init+0x84>)
 8007752:	f001 fae3 	bl	8008d1c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <MX_LWIP_Init+0x84>)
 8007758:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800775c:	089b      	lsrs	r3, r3, #2
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007768:	480d      	ldr	r0, [pc, #52]	; (80077a0 <MX_LWIP_Init+0x84>)
 800776a:	f001 fae7 	bl	8008d3c <netif_set_up>
 800776e:	e002      	b.n	8007776 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007770:	480b      	ldr	r0, [pc, #44]	; (80077a0 <MX_LWIP_Init+0x84>)
 8007772:	f001 fb4f 	bl	8008e14 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007776:	490b      	ldr	r1, [pc, #44]	; (80077a4 <MX_LWIP_Init+0x88>)
 8007778:	4809      	ldr	r0, [pc, #36]	; (80077a0 <MX_LWIP_Init+0x84>)
 800777a:	f001 fbe5 	bl	8008f48 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800777e:	4808      	ldr	r0, [pc, #32]	; (80077a0 <MX_LWIP_Init+0x84>)
 8007780:	f008 fce0 	bl	8010144 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007784:	bf00      	nop
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000cd0 	.word	0x20000cd0
 8007790:	20000cd4 	.word	0x20000cd4
 8007794:	20000cd8 	.word	0x20000cd8
 8007798:	08013b95 	.word	0x08013b95
 800779c:	08007abd 	.word	0x08007abd
 80077a0:	20000c98 	.word	0x20000c98
 80077a4:	080077a9 	.word	0x080077a9

080077a8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <SCB_InvalidateDCache_by_Addr>:
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80077ce:	2320      	movs	r3, #32
 80077d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80077d2:	f3bf 8f4f 	dsb	sy
}
 80077d6:	bf00      	nop
    while (op_size > 0) {
 80077d8:	e00b      	b.n	80077f2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80077da:	4a0d      	ldr	r2, [pc, #52]	; (8007810 <SCB_InvalidateDCache_by_Addr+0x54>)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4413      	add	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dcf0      	bgt.n	80077da <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80077f8:	f3bf 8f4f 	dsb	sy
}
 80077fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80077fe:	f3bf 8f6f 	isb	sy
}
 8007802:	bf00      	nop
}
 8007804:	bf00      	nop
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	e000ed00 	.word	0xe000ed00

08007814 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007820:	4b40      	ldr	r3, [pc, #256]	; (8007924 <low_level_init+0x110>)
 8007822:	4a41      	ldr	r2, [pc, #260]	; (8007928 <low_level_init+0x114>)
 8007824:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007826:	2300      	movs	r3, #0
 8007828:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800782a:	2380      	movs	r3, #128	; 0x80
 800782c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800782e:	23e1      	movs	r3, #225	; 0xe1
 8007830:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007832:	2300      	movs	r3, #0
 8007834:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007836:	2300      	movs	r3, #0
 8007838:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800783a:	2300      	movs	r3, #0
 800783c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800783e:	4a39      	ldr	r2, [pc, #228]	; (8007924 <low_level_init+0x110>)
 8007840:	f107 0308 	add.w	r3, r7, #8
 8007844:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007846:	4b37      	ldr	r3, [pc, #220]	; (8007924 <low_level_init+0x110>)
 8007848:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800784c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800784e:	4b35      	ldr	r3, [pc, #212]	; (8007924 <low_level_init+0x110>)
 8007850:	4a36      	ldr	r2, [pc, #216]	; (800792c <low_level_init+0x118>)
 8007852:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007854:	4b33      	ldr	r3, [pc, #204]	; (8007924 <low_level_init+0x110>)
 8007856:	4a36      	ldr	r2, [pc, #216]	; (8007930 <low_level_init+0x11c>)
 8007858:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800785a:	4b32      	ldr	r3, [pc, #200]	; (8007924 <low_level_init+0x110>)
 800785c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007860:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007862:	4830      	ldr	r0, [pc, #192]	; (8007924 <low_level_init+0x110>)
 8007864:	f7fb fdd4 	bl	8003410 <HAL_ETH_Init>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800786c:	2238      	movs	r2, #56	; 0x38
 800786e:	2100      	movs	r1, #0
 8007870:	4830      	ldr	r0, [pc, #192]	; (8007934 <low_level_init+0x120>)
 8007872:	f00c fac1 	bl	8013df8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <low_level_init+0x120>)
 8007878:	2221      	movs	r2, #33	; 0x21
 800787a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800787c:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <low_level_init+0x120>)
 800787e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007882:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007884:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <low_level_init+0x120>)
 8007886:	2200      	movs	r2, #0
 8007888:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800788a:	482b      	ldr	r0, [pc, #172]	; (8007938 <low_level_init+0x124>)
 800788c:	f000 ff54 	bl	8008738 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2206      	movs	r2, #6
 8007894:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007898:	4b22      	ldr	r3, [pc, #136]	; (8007924 <low_level_init+0x110>)
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80078a4:	4b1f      	ldr	r3, [pc, #124]	; (8007924 <low_level_init+0x110>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	785a      	ldrb	r2, [r3, #1]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80078b0:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <low_level_init+0x110>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	789a      	ldrb	r2, [r3, #2]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80078bc:	4b19      	ldr	r3, [pc, #100]	; (8007924 <low_level_init+0x110>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	78da      	ldrb	r2, [r3, #3]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80078c8:	4b16      	ldr	r3, [pc, #88]	; (8007924 <low_level_init+0x110>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	791a      	ldrb	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80078d4:	4b13      	ldr	r3, [pc, #76]	; (8007924 <low_level_init+0x110>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	795a      	ldrb	r2, [r3, #5]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80078e6:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80078ee:	f043 030a 	orr.w	r3, r3, #10
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80078fa:	4910      	ldr	r1, [pc, #64]	; (800793c <low_level_init+0x128>)
 80078fc:	4810      	ldr	r0, [pc, #64]	; (8007940 <low_level_init+0x12c>)
 80078fe:	f7fa fe24 	bl	800254a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007902:	480f      	ldr	r0, [pc, #60]	; (8007940 <low_level_init+0x12c>)
 8007904:	f7fa fe53 	bl	80025ae <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d103      	bne.n	8007916 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fa32 	bl	8007d78 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007914:	e001      	b.n	800791a <low_level_init+0x106>
    Error_Handler();
 8007916:	f7f9 fa56 	bl	8000dc6 <Error_Handler>
}
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20005668 	.word	0x20005668
 8007928:	40028000 	.word	0x40028000
 800792c:	2000014c 	.word	0x2000014c
 8007930:	200000ac 	.word	0x200000ac
 8007934:	20005718 	.word	0x20005718
 8007938:	0801a664 	.word	0x0801a664
 800793c:	20000024 	.word	0x20000024
 8007940:	20005750 	.word	0x20005750

08007944 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b092      	sub	sp, #72	; 0x48
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800795c:	f107 030c 	add.w	r3, r7, #12
 8007960:	2230      	movs	r2, #48	; 0x30
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f00c fa47 	bl	8013df8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800796a:	f107 030c 	add.w	r3, r7, #12
 800796e:	2230      	movs	r2, #48	; 0x30
 8007970:	2100      	movs	r1, #0
 8007972:	4618      	mov	r0, r3
 8007974:	f00c fa40 	bl	8013df8 <memset>

  for(q = p; q != NULL; q = q->next)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	643b      	str	r3, [r7, #64]	; 0x40
 800797c:	e045      	b.n	8007a0a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800797e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007980:	2b03      	cmp	r3, #3
 8007982:	d902      	bls.n	800798a <low_level_output+0x46>
      return ERR_IF;
 8007984:	f06f 030b 	mvn.w	r3, #11
 8007988:	e055      	b.n	8007a36 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800798a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800798c:	6859      	ldr	r1, [r3, #4]
 800798e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007990:	4613      	mov	r3, r2
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	3348      	adds	r3, #72	; 0x48
 800799a:	443b      	add	r3, r7
 800799c:	3b3c      	subs	r3, #60	; 0x3c
 800799e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80079a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a2:	895b      	ldrh	r3, [r3, #10]
 80079a4:	4619      	mov	r1, r3
 80079a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a8:	4613      	mov	r3, r2
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	3348      	adds	r3, #72	; 0x48
 80079b2:	443b      	add	r3, r7
 80079b4:	3b38      	subs	r3, #56	; 0x38
 80079b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80079b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d011      	beq.n	80079e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80079be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c0:	1e5a      	subs	r2, r3, #1
 80079c2:	f107 000c 	add.w	r0, r7, #12
 80079c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079c8:	460b      	mov	r3, r1
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	440b      	add	r3, r1
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	18c1      	adds	r1, r0, r3
 80079d2:	4613      	mov	r3, r2
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	3348      	adds	r3, #72	; 0x48
 80079dc:	443b      	add	r3, r7
 80079de:	3b34      	subs	r3, #52	; 0x34
 80079e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80079e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80079ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ec:	4613      	mov	r3, r2
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	3348      	adds	r3, #72	; 0x48
 80079f6:	443b      	add	r3, r7
 80079f8:	3b34      	subs	r3, #52	; 0x34
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80079fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a00:	3301      	adds	r3, #1
 8007a02:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	643b      	str	r3, [r7, #64]	; 0x40
 8007a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1b6      	bne.n	800797e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	891b      	ldrh	r3, [r3, #8]
 8007a14:	461a      	mov	r2, r3
 8007a16:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <low_level_output+0xfc>)
 8007a18:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007a1a:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <low_level_output+0xfc>)
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007a22:	4a07      	ldr	r2, [pc, #28]	; (8007a40 <low_level_output+0xfc>)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007a28:	2214      	movs	r2, #20
 8007a2a:	4905      	ldr	r1, [pc, #20]	; (8007a40 <low_level_output+0xfc>)
 8007a2c:	4805      	ldr	r0, [pc, #20]	; (8007a44 <low_level_output+0x100>)
 8007a2e:	f7fb fe23 	bl	8003678 <HAL_ETH_Transmit>

  return errval;
 8007a32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3748      	adds	r7, #72	; 0x48
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20005718 	.word	0x20005718
 8007a44:	20005668 	.word	0x20005668

08007a48 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007a54:	4b07      	ldr	r3, [pc, #28]	; (8007a74 <low_level_input+0x2c>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d105      	bne.n	8007a68 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007a5c:	f107 030c 	add.w	r3, r7, #12
 8007a60:	4619      	mov	r1, r3
 8007a62:	4805      	ldr	r0, [pc, #20]	; (8007a78 <low_level_input+0x30>)
 8007a64:	f7fb fe9c 	bl	80037a0 <HAL_ETH_ReadData>
  }

  return p;
 8007a68:	68fb      	ldr	r3, [r7, #12]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20005664 	.word	0x20005664
 8007a78:	20005668 	.word	0x20005668

08007a7c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ffdd 	bl	8007a48 <low_level_input>
 8007a8e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	4798      	blx	r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f001 fdce 	bl	8009648 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1ea      	bne.n	8007a88 <ethernetif_input+0xc>
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <ethernetif_init+0x1c>
 8007aca:	4b0e      	ldr	r3, [pc, #56]	; (8007b04 <ethernetif_init+0x48>)
 8007acc:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 8007ad0:	490d      	ldr	r1, [pc, #52]	; (8007b08 <ethernetif_init+0x4c>)
 8007ad2:	480e      	ldr	r0, [pc, #56]	; (8007b0c <ethernetif_init+0x50>)
 8007ad4:	f00c f998 	bl	8013e08 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2273      	movs	r2, #115	; 0x73
 8007adc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2274      	movs	r2, #116	; 0x74
 8007ae4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <ethernetif_init+0x54>)
 8007aec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <ethernetif_init+0x58>)
 8007af2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff fe8d 	bl	8007814 <low_level_init>

  return ERR_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	080153a4 	.word	0x080153a4
 8007b08:	080153c0 	.word	0x080153c0
 8007b0c:	080153d0 	.word	0x080153d0
 8007b10:	08012011 	.word	0x08012011
 8007b14:	08007945 	.word	0x08007945

08007b18 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	4807      	ldr	r0, [pc, #28]	; (8007b44 <pbuf_free_custom+0x2c>)
 8007b28:	f000 fee8 	bl	80088fc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <pbuf_free_custom+0x30>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d102      	bne.n	8007b3a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007b34:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <pbuf_free_custom+0x30>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
  }
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	0801a664 	.word	0x0801a664
 8007b48:	20005664 	.word	0x20005664

08007b4c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007b50:	f7fa feb6 	bl	80028c0 <HAL_GetTick>
 8007b54:	4603      	mov	r3, r0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08e      	sub	sp, #56	; 0x38
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	605a      	str	r2, [r3, #4]
 8007b6e:	609a      	str	r2, [r3, #8]
 8007b70:	60da      	str	r2, [r3, #12]
 8007b72:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a52      	ldr	r2, [pc, #328]	; (8007cc4 <HAL_ETH_MspInit+0x168>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	f040 809e 	bne.w	8007cbc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007b80:	4b51      	ldr	r3, [pc, #324]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b84:	4a50      	ldr	r2, [pc, #320]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8007b8c:	4b4e      	ldr	r3, [pc, #312]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b94:	623b      	str	r3, [r7, #32]
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	4b4b      	ldr	r3, [pc, #300]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9c:	4a4a      	ldr	r2, [pc, #296]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ba4:	4b48      	ldr	r3, [pc, #288]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bac:	61fb      	str	r3, [r7, #28]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4b45      	ldr	r3, [pc, #276]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	4a44      	ldr	r2, [pc, #272]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bba:	6313      	str	r3, [r2, #48]	; 0x30
 8007bbc:	4b42      	ldr	r3, [pc, #264]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bc8:	4b3f      	ldr	r3, [pc, #252]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	4a3e      	ldr	r2, [pc, #248]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bce:	f043 0304 	orr.w	r3, r3, #4
 8007bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8007bd4:	4b3c      	ldr	r3, [pc, #240]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be0:	4b39      	ldr	r3, [pc, #228]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	4a38      	ldr	r2, [pc, #224]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	6313      	str	r3, [r2, #48]	; 0x30
 8007bec:	4b36      	ldr	r3, [pc, #216]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bf8:	4b33      	ldr	r3, [pc, #204]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	4a32      	ldr	r2, [pc, #200]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007bfe:	f043 0302 	orr.w	r3, r3, #2
 8007c02:	6313      	str	r3, [r2, #48]	; 0x30
 8007c04:	4b30      	ldr	r3, [pc, #192]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007c10:	4b2d      	ldr	r3, [pc, #180]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	4a2c      	ldr	r2, [pc, #176]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c1c:	4b2a      	ldr	r3, [pc, #168]	; (8007cc8 <HAL_ETH_MspInit+0x16c>)
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007c28:	2332      	movs	r3, #50	; 0x32
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c34:	2303      	movs	r3, #3
 8007c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c38:	230b      	movs	r3, #11
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c40:	4619      	mov	r1, r3
 8007c42:	4822      	ldr	r0, [pc, #136]	; (8007ccc <HAL_ETH_MspInit+0x170>)
 8007c44:	f7fc fdca 	bl	80047dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007c48:	2386      	movs	r3, #134	; 0x86
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c50:	2300      	movs	r3, #0
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c54:	2303      	movs	r3, #3
 8007c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c58:	230b      	movs	r3, #11
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c60:	4619      	mov	r1, r3
 8007c62:	481b      	ldr	r0, [pc, #108]	; (8007cd0 <HAL_ETH_MspInit+0x174>)
 8007c64:	f7fc fdba 	bl	80047dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8007c68:	f242 0301 	movw	r3, #8193	; 0x2001
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c6e:	2302      	movs	r3, #2
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c76:	2303      	movs	r3, #3
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c7a:	230b      	movs	r3, #11
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c82:	4619      	mov	r1, r3
 8007c84:	4813      	ldr	r0, [pc, #76]	; (8007cd4 <HAL_ETH_MspInit+0x178>)
 8007c86:	f7fc fda9 	bl	80047dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007c8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c90:	2302      	movs	r3, #2
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007c9c:	230b      	movs	r3, #11
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	480c      	ldr	r0, [pc, #48]	; (8007cd8 <HAL_ETH_MspInit+0x17c>)
 8007ca8:	f7fc fd98 	bl	80047dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8007cac:	2200      	movs	r2, #0
 8007cae:	2100      	movs	r1, #0
 8007cb0:	203d      	movs	r0, #61	; 0x3d
 8007cb2:	f7fb fb3e 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007cb6:	203d      	movs	r0, #61	; 0x3d
 8007cb8:	f7fb fb57 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	3738      	adds	r7, #56	; 0x38
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	40028000 	.word	0x40028000
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	40020800 	.word	0x40020800
 8007cd0:	40020000 	.word	0x40020000
 8007cd4:	40020400 	.word	0x40020400
 8007cd8:	40021800 	.word	0x40021800

08007cdc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007ce0:	4802      	ldr	r0, [pc, #8]	; (8007cec <ETH_PHY_IO_Init+0x10>)
 8007ce2:	f7fc f921 	bl	8003f28 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20005668 	.word	0x20005668

08007cf0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
  return 0;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	68f9      	ldr	r1, [r7, #12]
 8007d12:	4807      	ldr	r0, [pc, #28]	; (8007d30 <ETH_PHY_IO_ReadReg+0x30>)
 8007d14:	f7fb ff70 	bl	8003bf8 <HAL_ETH_ReadPHYRegister>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d22:	e000      	b.n	8007d26 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20005668 	.word	0x20005668

08007d34 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	68f9      	ldr	r1, [r7, #12]
 8007d46:	4807      	ldr	r0, [pc, #28]	; (8007d64 <ETH_PHY_IO_WriteReg+0x30>)
 8007d48:	f7fb ffa1 	bl	8003c8e <HAL_ETH_WritePHYRegister>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295
 8007d56:	e000      	b.n	8007d5a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20005668 	.word	0x20005668

08007d68 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007d6c:	f7fa fda8 	bl	80028c0 <HAL_GetTick>
 8007d70:	4603      	mov	r3, r0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b0a0      	sub	sp, #128	; 0x80
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007d80:	f107 030c 	add.w	r3, r7, #12
 8007d84:	2264      	movs	r2, #100	; 0x64
 8007d86:	2100      	movs	r1, #0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f00c f835 	bl	8013df8 <memset>
  int32_t PHYLinkState = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d96:	2300      	movs	r3, #0
 8007d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007d9e:	483a      	ldr	r0, [pc, #232]	; (8007e88 <ethernet_link_check_state+0x110>)
 8007da0:	f7fa fcad 	bl	80026fe <LAN8742_GetLinkState>
 8007da4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007dac:	089b      	lsrs	r3, r3, #2
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00c      	beq.n	8007dd2 <ethernet_link_check_state+0x5a>
 8007db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	dc09      	bgt.n	8007dd2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8007dbe:	4833      	ldr	r0, [pc, #204]	; (8007e8c <ethernet_link_check_state+0x114>)
 8007dc0:	f7fb fc01 	bl	80035c6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f825 	bl	8008e14 <netif_set_down>
    netif_set_link_down(netif);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 f88c 	bl	8008ee8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007dd0:	e055      	b.n	8007e7e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d14e      	bne.n	8007e7e <ethernet_link_check_state+0x106>
 8007de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	dd4b      	ble.n	8007e7e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007de8:	3b02      	subs	r3, #2
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d82a      	bhi.n	8007e44 <ethernet_link_check_state+0xcc>
 8007dee:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <ethernet_link_check_state+0x7c>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e17 	.word	0x08007e17
 8007dfc:	08007e27 	.word	0x08007e27
 8007e00:	08007e37 	.word	0x08007e37
      duplex = ETH_FULLDUPLEX_MODE;
 8007e04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e08:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007e0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e0e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007e10:	2301      	movs	r3, #1
 8007e12:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007e14:	e017      	b.n	8007e46 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007e1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e1e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007e20:	2301      	movs	r3, #1
 8007e22:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007e24:	e00f      	b.n	8007e46 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e2a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007e30:	2301      	movs	r3, #1
 8007e32:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007e34:	e007      	b.n	8007e46 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007e42:	e000      	b.n	8007e46 <ethernet_link_check_state+0xce>
      break;
 8007e44:	bf00      	nop
    if(linkchanged)
 8007e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d018      	beq.n	8007e7e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007e4c:	f107 030c 	add.w	r3, r7, #12
 8007e50:	4619      	mov	r1, r3
 8007e52:	480e      	ldr	r0, [pc, #56]	; (8007e8c <ethernet_link_check_state+0x114>)
 8007e54:	f7fb ff64 	bl	8003d20 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e5e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007e60:	f107 030c 	add.w	r3, r7, #12
 8007e64:	4619      	mov	r1, r3
 8007e66:	4809      	ldr	r0, [pc, #36]	; (8007e8c <ethernet_link_check_state+0x114>)
 8007e68:	f7fc f844 	bl	8003ef4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007e6c:	4807      	ldr	r0, [pc, #28]	; (8007e8c <ethernet_link_check_state+0x114>)
 8007e6e:	f7fb fb4b 	bl	8003508 <HAL_ETH_Start>
      netif_set_up(netif);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 ff62 	bl	8008d3c <netif_set_up>
      netif_set_link_up(netif);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fffd 	bl	8008e78 <netif_set_link_up>
}
 8007e7e:	bf00      	nop
 8007e80:	3780      	adds	r7, #128	; 0x80
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20005750 	.word	0x20005750
 8007e8c:	20005668 	.word	0x20005668

08007e90 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007e98:	4812      	ldr	r0, [pc, #72]	; (8007ee4 <HAL_ETH_RxAllocateCallback+0x54>)
 8007e9a:	f000 fcc1 	bl	8008820 <memp_malloc_pool>
 8007e9e:	60f8      	str	r0, [r7, #12]
  if (p)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d014      	beq.n	8007ed0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f103 0220 	add.w	r2, r3, #32
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a0d      	ldr	r2, [pc, #52]	; (8007ee8 <HAL_ETH_RxAllocateCallback+0x58>)
 8007eb4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007ebe:	9201      	str	r2, [sp, #4]
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2241      	movs	r2, #65	; 0x41
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f001 fa03 	bl	80092d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007ece:	e005      	b.n	8007edc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007ed0:	4b06      	ldr	r3, [pc, #24]	; (8007eec <HAL_ETH_RxAllocateCallback+0x5c>)
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	0801a664 	.word	0x0801a664
 8007ee8:	08007b19 	.word	0x08007b19
 8007eec:	20005664 	.word	0x20005664

08007ef0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3b20      	subs	r3, #32
 8007f0e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	887a      	ldrh	r2, [r7, #2]
 8007f20:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d103      	bne.n	8007f32 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	e003      	b.n	8007f3a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	e009      	b.n	8007f5c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	891a      	ldrh	r2, [r3, #8]
 8007f4c:	887b      	ldrh	r3, [r7, #2]
 8007f4e:	4413      	add	r3, r2
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f2      	bne.n	8007f48 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007f62:	887b      	ldrh	r3, [r7, #2]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff fc28 	bl	80077bc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007f6c:	bf00      	nop
 8007f6e:	3720      	adds	r7, #32
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	b21a      	sxth	r2, r3
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	0a1b      	lsrs	r3, r3, #8
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	b21b      	sxth	r3, r3
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	b21b      	sxth	r3, r3
 8007f90:	b29b      	uxth	r3, r3
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	061a      	lsls	r2, r3, #24
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	0e1b      	lsrs	r3, r3, #24
 8007fc2:	4313      	orrs	r3, r2
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007fda:	f000 f8d5 	bl	8008188 <mem_init>
  memp_init();
 8007fde:	f000 fbdb 	bl	8008798 <memp_init>
  pbuf_init();
  netif_init();
 8007fe2:	f000 fcd9 	bl	8008998 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007fe6:	f007 f873 	bl	800f0d0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007fea:	f001 fdcb 	bl	8009b84 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007fee:	f006 ffe5 	bl	800efbc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008006:	4b05      	ldr	r3, [pc, #20]	; (800801c <ptr_to_mem+0x20>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	4413      	add	r3, r2
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20007f9c 	.word	0x20007f9c

08008020 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <mem_to_ptr+0x20>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	b29b      	uxth	r3, r3
}
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20007f9c 	.word	0x20007f9c

08008044 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800804c:	4b45      	ldr	r3, [pc, #276]	; (8008164 <plug_holes+0x120>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d206      	bcs.n	8008064 <plug_holes+0x20>
 8008056:	4b44      	ldr	r3, [pc, #272]	; (8008168 <plug_holes+0x124>)
 8008058:	f240 12df 	movw	r2, #479	; 0x1df
 800805c:	4943      	ldr	r1, [pc, #268]	; (800816c <plug_holes+0x128>)
 800805e:	4844      	ldr	r0, [pc, #272]	; (8008170 <plug_holes+0x12c>)
 8008060:	f00b fed2 	bl	8013e08 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008064:	4b43      	ldr	r3, [pc, #268]	; (8008174 <plug_holes+0x130>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	429a      	cmp	r2, r3
 800806c:	d306      	bcc.n	800807c <plug_holes+0x38>
 800806e:	4b3e      	ldr	r3, [pc, #248]	; (8008168 <plug_holes+0x124>)
 8008070:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008074:	4940      	ldr	r1, [pc, #256]	; (8008178 <plug_holes+0x134>)
 8008076:	483e      	ldr	r0, [pc, #248]	; (8008170 <plug_holes+0x12c>)
 8008078:	f00b fec6 	bl	8013e08 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d006      	beq.n	8008092 <plug_holes+0x4e>
 8008084:	4b38      	ldr	r3, [pc, #224]	; (8008168 <plug_holes+0x124>)
 8008086:	f240 12e1 	movw	r2, #481	; 0x1e1
 800808a:	493c      	ldr	r1, [pc, #240]	; (800817c <plug_holes+0x138>)
 800808c:	4838      	ldr	r0, [pc, #224]	; (8008170 <plug_holes+0x12c>)
 800808e:	f00b febb 	bl	8013e08 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800809a:	d906      	bls.n	80080aa <plug_holes+0x66>
 800809c:	4b32      	ldr	r3, [pc, #200]	; (8008168 <plug_holes+0x124>)
 800809e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80080a2:	4937      	ldr	r1, [pc, #220]	; (8008180 <plug_holes+0x13c>)
 80080a4:	4832      	ldr	r0, [pc, #200]	; (8008170 <plug_holes+0x12c>)
 80080a6:	f00b feaf 	bl	8013e08 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff ffa4 	bl	8007ffc <ptr_to_mem>
 80080b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d024      	beq.n	8008108 <plug_holes+0xc4>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d120      	bne.n	8008108 <plug_holes+0xc4>
 80080c6:	4b2b      	ldr	r3, [pc, #172]	; (8008174 <plug_holes+0x130>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d01b      	beq.n	8008108 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80080d0:	4b2c      	ldr	r3, [pc, #176]	; (8008184 <plug_holes+0x140>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d102      	bne.n	80080e0 <plug_holes+0x9c>
      lfree = mem;
 80080da:	4a2a      	ldr	r2, [pc, #168]	; (8008184 <plug_holes+0x140>)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	881a      	ldrh	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80080f0:	d00a      	beq.n	8008108 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff ff80 	bl	8007ffc <ptr_to_mem>
 80080fc:	4604      	mov	r4, r0
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7ff ff8e 	bl	8008020 <mem_to_ptr>
 8008104:	4603      	mov	r3, r0
 8008106:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	885b      	ldrh	r3, [r3, #2]
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff75 	bl	8007ffc <ptr_to_mem>
 8008112:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	429a      	cmp	r2, r3
 800811a:	d01f      	beq.n	800815c <plug_holes+0x118>
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	791b      	ldrb	r3, [r3, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11b      	bne.n	800815c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008124:	4b17      	ldr	r3, [pc, #92]	; (8008184 <plug_holes+0x140>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	429a      	cmp	r2, r3
 800812c:	d102      	bne.n	8008134 <plug_holes+0xf0>
      lfree = pmem;
 800812e:	4a15      	ldr	r2, [pc, #84]	; (8008184 <plug_holes+0x140>)
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	881a      	ldrh	r2, [r3, #0]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008144:	d00a      	beq.n	800815c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	4618      	mov	r0, r3
 800814c:	f7ff ff56 	bl	8007ffc <ptr_to_mem>
 8008150:	4604      	mov	r4, r0
 8008152:	68b8      	ldr	r0, [r7, #8]
 8008154:	f7ff ff64 	bl	8008020 <mem_to_ptr>
 8008158:	4603      	mov	r3, r0
 800815a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800815c:	bf00      	nop
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	bd90      	pop	{r4, r7, pc}
 8008164:	20007f9c 	.word	0x20007f9c
 8008168:	080153f8 	.word	0x080153f8
 800816c:	08015428 	.word	0x08015428
 8008170:	08015440 	.word	0x08015440
 8008174:	20007fa0 	.word	0x20007fa0
 8008178:	08015468 	.word	0x08015468
 800817c:	08015484 	.word	0x08015484
 8008180:	080154a0 	.word	0x080154a0
 8008184:	20007fa4 	.word	0x20007fa4

08008188 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800818e:	4b18      	ldr	r3, [pc, #96]	; (80081f0 <mem_init+0x68>)
 8008190:	3303      	adds	r3, #3
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	461a      	mov	r2, r3
 8008198:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <mem_init+0x6c>)
 800819a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800819c:	4b15      	ldr	r3, [pc, #84]	; (80081f4 <mem_init+0x6c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80081a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80081b6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80081ba:	f7ff ff1f 	bl	8007ffc <ptr_to_mem>
 80081be:	4603      	mov	r3, r0
 80081c0:	4a0d      	ldr	r2, [pc, #52]	; (80081f8 <mem_init+0x70>)
 80081c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <mem_init+0x70>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2201      	movs	r2, #1
 80081ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <mem_init+0x70>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80081d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <mem_init+0x70>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80081de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80081e0:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <mem_init+0x6c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a05      	ldr	r2, [pc, #20]	; (80081fc <mem_init+0x74>)
 80081e6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20005788 	.word	0x20005788
 80081f4:	20007f9c 	.word	0x20007f9c
 80081f8:	20007fa0 	.word	0x20007fa0
 80081fc:	20007fa4 	.word	0x20007fa4

08008200 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ff09 	bl	8008020 <mem_to_ptr>
 800820e:	4603      	mov	r3, r0
 8008210:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff fef0 	bl	8007ffc <ptr_to_mem>
 800821c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	885b      	ldrh	r3, [r3, #2]
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff feea 	bl	8007ffc <ptr_to_mem>
 8008228:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008232:	d818      	bhi.n	8008266 <mem_link_valid+0x66>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	885b      	ldrh	r3, [r3, #2]
 8008238:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800823c:	d813      	bhi.n	8008266 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008242:	8afa      	ldrh	r2, [r7, #22]
 8008244:	429a      	cmp	r2, r3
 8008246:	d004      	beq.n	8008252 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	8afa      	ldrh	r2, [r7, #22]
 800824e:	429a      	cmp	r2, r3
 8008250:	d109      	bne.n	8008266 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008252:	4b08      	ldr	r3, [pc, #32]	; (8008274 <mem_link_valid+0x74>)
 8008254:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	429a      	cmp	r2, r3
 800825a:	d006      	beq.n	800826a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	8afa      	ldrh	r2, [r7, #22]
 8008262:	429a      	cmp	r2, r3
 8008264:	d001      	beq.n	800826a <mem_link_valid+0x6a>
    return 0;
 8008266:	2300      	movs	r3, #0
 8008268:	e000      	b.n	800826c <mem_link_valid+0x6c>
  }
  return 1;
 800826a:	2301      	movs	r3, #1
}
 800826c:	4618      	mov	r0, r3
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20007fa0 	.word	0x20007fa0

08008278 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d04c      	beq.n	8008320 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008290:	4b25      	ldr	r3, [pc, #148]	; (8008328 <mem_free+0xb0>)
 8008292:	f240 2273 	movw	r2, #627	; 0x273
 8008296:	4925      	ldr	r1, [pc, #148]	; (800832c <mem_free+0xb4>)
 8008298:	4825      	ldr	r0, [pc, #148]	; (8008330 <mem_free+0xb8>)
 800829a:	f00b fdb5 	bl	8013e08 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800829e:	e040      	b.n	8008322 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3b08      	subs	r3, #8
 80082a4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80082a6:	4b23      	ldr	r3, [pc, #140]	; (8008334 <mem_free+0xbc>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d306      	bcc.n	80082be <mem_free+0x46>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f103 020c 	add.w	r2, r3, #12
 80082b6:	4b20      	ldr	r3, [pc, #128]	; (8008338 <mem_free+0xc0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d907      	bls.n	80082ce <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80082be:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <mem_free+0xb0>)
 80082c0:	f240 227f 	movw	r2, #639	; 0x27f
 80082c4:	491d      	ldr	r1, [pc, #116]	; (800833c <mem_free+0xc4>)
 80082c6:	481a      	ldr	r0, [pc, #104]	; (8008330 <mem_free+0xb8>)
 80082c8:	f00b fd9e 	bl	8013e08 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80082cc:	e029      	b.n	8008322 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	791b      	ldrb	r3, [r3, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d107      	bne.n	80082e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80082d6:	4b14      	ldr	r3, [pc, #80]	; (8008328 <mem_free+0xb0>)
 80082d8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80082dc:	4918      	ldr	r1, [pc, #96]	; (8008340 <mem_free+0xc8>)
 80082de:	4814      	ldr	r0, [pc, #80]	; (8008330 <mem_free+0xb8>)
 80082e0:	f00b fd92 	bl	8013e08 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80082e4:	e01d      	b.n	8008322 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff ff8a 	bl	8008200 <mem_link_valid>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d107      	bne.n	8008302 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80082f2:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <mem_free+0xb0>)
 80082f4:	f240 2295 	movw	r2, #661	; 0x295
 80082f8:	4912      	ldr	r1, [pc, #72]	; (8008344 <mem_free+0xcc>)
 80082fa:	480d      	ldr	r0, [pc, #52]	; (8008330 <mem_free+0xb8>)
 80082fc:	f00b fd84 	bl	8013e08 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008300:	e00f      	b.n	8008322 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <mem_free+0xd0>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	429a      	cmp	r2, r3
 8008310:	d202      	bcs.n	8008318 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008312:	4a0d      	ldr	r2, [pc, #52]	; (8008348 <mem_free+0xd0>)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fe93 	bl	8008044 <plug_holes>
 800831e:	e000      	b.n	8008322 <mem_free+0xaa>
    return;
 8008320:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	080153f8 	.word	0x080153f8
 800832c:	080154cc 	.word	0x080154cc
 8008330:	08015440 	.word	0x08015440
 8008334:	20007f9c 	.word	0x20007f9c
 8008338:	20007fa0 	.word	0x20007fa0
 800833c:	080154f0 	.word	0x080154f0
 8008340:	0801550c 	.word	0x0801550c
 8008344:	08015534 	.word	0x08015534
 8008348:	20007fa4 	.word	0x20007fa4

0800834c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008358:	887b      	ldrh	r3, [r7, #2]
 800835a:	3303      	adds	r3, #3
 800835c:	b29b      	uxth	r3, r3
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008364:	8bfb      	ldrh	r3, [r7, #30]
 8008366:	2b0b      	cmp	r3, #11
 8008368:	d801      	bhi.n	800836e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800836a:	230c      	movs	r3, #12
 800836c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800836e:	8bfb      	ldrh	r3, [r7, #30]
 8008370:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008374:	d803      	bhi.n	800837e <mem_trim+0x32>
 8008376:	8bfa      	ldrh	r2, [r7, #30]
 8008378:	887b      	ldrh	r3, [r7, #2]
 800837a:	429a      	cmp	r2, r3
 800837c:	d201      	bcs.n	8008382 <mem_trim+0x36>
    return NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	e0cc      	b.n	800851c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008382:	4b68      	ldr	r3, [pc, #416]	; (8008524 <mem_trim+0x1d8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	d304      	bcc.n	8008396 <mem_trim+0x4a>
 800838c:	4b66      	ldr	r3, [pc, #408]	; (8008528 <mem_trim+0x1dc>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	429a      	cmp	r2, r3
 8008394:	d306      	bcc.n	80083a4 <mem_trim+0x58>
 8008396:	4b65      	ldr	r3, [pc, #404]	; (800852c <mem_trim+0x1e0>)
 8008398:	f240 22d1 	movw	r2, #721	; 0x2d1
 800839c:	4964      	ldr	r1, [pc, #400]	; (8008530 <mem_trim+0x1e4>)
 800839e:	4865      	ldr	r0, [pc, #404]	; (8008534 <mem_trim+0x1e8>)
 80083a0:	f00b fd32 	bl	8013e08 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80083a4:	4b5f      	ldr	r3, [pc, #380]	; (8008524 <mem_trim+0x1d8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d304      	bcc.n	80083b8 <mem_trim+0x6c>
 80083ae:	4b5e      	ldr	r3, [pc, #376]	; (8008528 <mem_trim+0x1dc>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d301      	bcc.n	80083bc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	e0af      	b.n	800851c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3b08      	subs	r3, #8
 80083c0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80083c2:	69b8      	ldr	r0, [r7, #24]
 80083c4:	f7ff fe2c 	bl	8008020 <mem_to_ptr>
 80083c8:	4603      	mov	r3, r0
 80083ca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	881a      	ldrh	r2, [r3, #0]
 80083d0:	8afb      	ldrh	r3, [r7, #22]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b08      	subs	r3, #8
 80083d8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80083da:	8bfa      	ldrh	r2, [r7, #30]
 80083dc:	8abb      	ldrh	r3, [r7, #20]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d906      	bls.n	80083f0 <mem_trim+0xa4>
 80083e2:	4b52      	ldr	r3, [pc, #328]	; (800852c <mem_trim+0x1e0>)
 80083e4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80083e8:	4953      	ldr	r1, [pc, #332]	; (8008538 <mem_trim+0x1ec>)
 80083ea:	4852      	ldr	r0, [pc, #328]	; (8008534 <mem_trim+0x1e8>)
 80083ec:	f00b fd0c 	bl	8013e08 <iprintf>
  if (newsize > size) {
 80083f0:	8bfa      	ldrh	r2, [r7, #30]
 80083f2:	8abb      	ldrh	r3, [r7, #20]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d901      	bls.n	80083fc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e08f      	b.n	800851c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80083fc:	8bfa      	ldrh	r2, [r7, #30]
 80083fe:	8abb      	ldrh	r3, [r7, #20]
 8008400:	429a      	cmp	r2, r3
 8008402:	d101      	bne.n	8008408 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	e089      	b.n	800851c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fdf5 	bl	8007ffc <ptr_to_mem>
 8008412:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	791b      	ldrb	r3, [r3, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d13f      	bne.n	800849c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008424:	d106      	bne.n	8008434 <mem_trim+0xe8>
 8008426:	4b41      	ldr	r3, [pc, #260]	; (800852c <mem_trim+0x1e0>)
 8008428:	f240 22f5 	movw	r2, #757	; 0x2f5
 800842c:	4943      	ldr	r1, [pc, #268]	; (800853c <mem_trim+0x1f0>)
 800842e:	4841      	ldr	r0, [pc, #260]	; (8008534 <mem_trim+0x1e8>)
 8008430:	f00b fcea 	bl	8013e08 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800843a:	8afa      	ldrh	r2, [r7, #22]
 800843c:	8bfb      	ldrh	r3, [r7, #30]
 800843e:	4413      	add	r3, r2
 8008440:	b29b      	uxth	r3, r3
 8008442:	3308      	adds	r3, #8
 8008444:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008446:	4b3e      	ldr	r3, [pc, #248]	; (8008540 <mem_trim+0x1f4>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	429a      	cmp	r2, r3
 800844e:	d106      	bne.n	800845e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008450:	89fb      	ldrh	r3, [r7, #14]
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fdd2 	bl	8007ffc <ptr_to_mem>
 8008458:	4603      	mov	r3, r0
 800845a:	4a39      	ldr	r2, [pc, #228]	; (8008540 <mem_trim+0x1f4>)
 800845c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800845e:	89fb      	ldrh	r3, [r7, #14]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff fdcb 	bl	8007ffc <ptr_to_mem>
 8008466:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	2200      	movs	r2, #0
 800846c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	89ba      	ldrh	r2, [r7, #12]
 8008472:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	8afa      	ldrh	r2, [r7, #22]
 8008478:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	89fa      	ldrh	r2, [r7, #14]
 800847e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008488:	d047      	beq.n	800851a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff fdb4 	bl	8007ffc <ptr_to_mem>
 8008494:	4602      	mov	r2, r0
 8008496:	89fb      	ldrh	r3, [r7, #14]
 8008498:	8053      	strh	r3, [r2, #2]
 800849a:	e03e      	b.n	800851a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800849c:	8bfb      	ldrh	r3, [r7, #30]
 800849e:	f103 0214 	add.w	r2, r3, #20
 80084a2:	8abb      	ldrh	r3, [r7, #20]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d838      	bhi.n	800851a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80084a8:	8afa      	ldrh	r2, [r7, #22]
 80084aa:	8bfb      	ldrh	r3, [r7, #30]
 80084ac:	4413      	add	r3, r2
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3308      	adds	r3, #8
 80084b2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80084bc:	d106      	bne.n	80084cc <mem_trim+0x180>
 80084be:	4b1b      	ldr	r3, [pc, #108]	; (800852c <mem_trim+0x1e0>)
 80084c0:	f240 3216 	movw	r2, #790	; 0x316
 80084c4:	491d      	ldr	r1, [pc, #116]	; (800853c <mem_trim+0x1f0>)
 80084c6:	481b      	ldr	r0, [pc, #108]	; (8008534 <mem_trim+0x1e8>)
 80084c8:	f00b fc9e 	bl	8013e08 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80084cc:	89fb      	ldrh	r3, [r7, #14]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fd94 	bl	8007ffc <ptr_to_mem>
 80084d4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80084d6:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <mem_trim+0x1f4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d202      	bcs.n	80084e6 <mem_trim+0x19a>
      lfree = mem2;
 80084e0:	4a17      	ldr	r2, [pc, #92]	; (8008540 <mem_trim+0x1f4>)
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2200      	movs	r2, #0
 80084ea:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	881a      	ldrh	r2, [r3, #0]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	8afa      	ldrh	r2, [r7, #22]
 80084f8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	89fa      	ldrh	r2, [r7, #14]
 80084fe:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008508:	d007      	beq.n	800851a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fd74 	bl	8007ffc <ptr_to_mem>
 8008514:	4602      	mov	r2, r0
 8008516:	89fb      	ldrh	r3, [r7, #14]
 8008518:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800851a:	687b      	ldr	r3, [r7, #4]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3720      	adds	r7, #32
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20007f9c 	.word	0x20007f9c
 8008528:	20007fa0 	.word	0x20007fa0
 800852c:	080153f8 	.word	0x080153f8
 8008530:	08015568 	.word	0x08015568
 8008534:	08015440 	.word	0x08015440
 8008538:	08015580 	.word	0x08015580
 800853c:	080155a0 	.word	0x080155a0
 8008540:	20007fa4 	.word	0x20007fa4

08008544 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <mem_malloc+0x14>
    return NULL;
 8008554:	2300      	movs	r3, #0
 8008556:	e0d9      	b.n	800870c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	3303      	adds	r3, #3
 800855c:	b29b      	uxth	r3, r3
 800855e:	f023 0303 	bic.w	r3, r3, #3
 8008562:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008564:	8bbb      	ldrh	r3, [r7, #28]
 8008566:	2b0b      	cmp	r3, #11
 8008568:	d801      	bhi.n	800856e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800856a:	230c      	movs	r3, #12
 800856c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800856e:	8bbb      	ldrh	r3, [r7, #28]
 8008570:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008574:	d803      	bhi.n	800857e <mem_malloc+0x3a>
 8008576:	8bba      	ldrh	r2, [r7, #28]
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	429a      	cmp	r2, r3
 800857c:	d201      	bcs.n	8008582 <mem_malloc+0x3e>
    return NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	e0c4      	b.n	800870c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008582:	4b64      	ldr	r3, [pc, #400]	; (8008714 <mem_malloc+0x1d0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff fd4a 	bl	8008020 <mem_to_ptr>
 800858c:	4603      	mov	r3, r0
 800858e:	83fb      	strh	r3, [r7, #30]
 8008590:	e0b4      	b.n	80086fc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008592:	8bfb      	ldrh	r3, [r7, #30]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fd31 	bl	8007ffc <ptr_to_mem>
 800859a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	791b      	ldrb	r3, [r3, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f040 80a4 	bne.w	80086ee <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	8bfb      	ldrh	r3, [r7, #30]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	f1a3 0208 	sub.w	r2, r3, #8
 80085b4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80085b6:	429a      	cmp	r2, r3
 80085b8:	f0c0 8099 	bcc.w	80086ee <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	8bfb      	ldrh	r3, [r7, #30]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	f1a3 0208 	sub.w	r2, r3, #8
 80085ca:	8bbb      	ldrh	r3, [r7, #28]
 80085cc:	3314      	adds	r3, #20
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d333      	bcc.n	800863a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80085d2:	8bfa      	ldrh	r2, [r7, #30]
 80085d4:	8bbb      	ldrh	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	b29b      	uxth	r3, r3
 80085da:	3308      	adds	r3, #8
 80085dc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80085de:	8a7b      	ldrh	r3, [r7, #18]
 80085e0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80085e4:	d106      	bne.n	80085f4 <mem_malloc+0xb0>
 80085e6:	4b4c      	ldr	r3, [pc, #304]	; (8008718 <mem_malloc+0x1d4>)
 80085e8:	f240 3287 	movw	r2, #903	; 0x387
 80085ec:	494b      	ldr	r1, [pc, #300]	; (800871c <mem_malloc+0x1d8>)
 80085ee:	484c      	ldr	r0, [pc, #304]	; (8008720 <mem_malloc+0x1dc>)
 80085f0:	f00b fc0a 	bl	8013e08 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80085f4:	8a7b      	ldrh	r3, [r7, #18]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fd00 	bl	8007ffc <ptr_to_mem>
 80085fc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	881a      	ldrh	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8bfa      	ldrh	r2, [r7, #30]
 8008610:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	8a7a      	ldrh	r2, [r7, #18]
 8008616:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2201      	movs	r2, #1
 800861c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008626:	d00b      	beq.n	8008640 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fce5 	bl	8007ffc <ptr_to_mem>
 8008632:	4602      	mov	r2, r0
 8008634:	8a7b      	ldrh	r3, [r7, #18]
 8008636:	8053      	strh	r3, [r2, #2]
 8008638:	e002      	b.n	8008640 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2201      	movs	r2, #1
 800863e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008640:	4b34      	ldr	r3, [pc, #208]	; (8008714 <mem_malloc+0x1d0>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	429a      	cmp	r2, r3
 8008648:	d127      	bne.n	800869a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800864a:	4b32      	ldr	r3, [pc, #200]	; (8008714 <mem_malloc+0x1d0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008650:	e005      	b.n	800865e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff fcd0 	bl	8007ffc <ptr_to_mem>
 800865c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	791b      	ldrb	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <mem_malloc+0x12c>
 8008666:	4b2f      	ldr	r3, [pc, #188]	; (8008724 <mem_malloc+0x1e0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	429a      	cmp	r2, r3
 800866e:	d1f0      	bne.n	8008652 <mem_malloc+0x10e>
          }
          lfree = cur;
 8008670:	4a28      	ldr	r2, [pc, #160]	; (8008714 <mem_malloc+0x1d0>)
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008676:	4b27      	ldr	r3, [pc, #156]	; (8008714 <mem_malloc+0x1d0>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	4b2a      	ldr	r3, [pc, #168]	; (8008724 <mem_malloc+0x1e0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d00b      	beq.n	800869a <mem_malloc+0x156>
 8008682:	4b24      	ldr	r3, [pc, #144]	; (8008714 <mem_malloc+0x1d0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	791b      	ldrb	r3, [r3, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d006      	beq.n	800869a <mem_malloc+0x156>
 800868c:	4b22      	ldr	r3, [pc, #136]	; (8008718 <mem_malloc+0x1d4>)
 800868e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008692:	4925      	ldr	r1, [pc, #148]	; (8008728 <mem_malloc+0x1e4>)
 8008694:	4822      	ldr	r0, [pc, #136]	; (8008720 <mem_malloc+0x1dc>)
 8008696:	f00b fbb7 	bl	8013e08 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800869a:	8bba      	ldrh	r2, [r7, #28]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	4413      	add	r3, r2
 80086a0:	3308      	adds	r3, #8
 80086a2:	4a20      	ldr	r2, [pc, #128]	; (8008724 <mem_malloc+0x1e0>)
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d906      	bls.n	80086b8 <mem_malloc+0x174>
 80086aa:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <mem_malloc+0x1d4>)
 80086ac:	f240 32b9 	movw	r2, #953	; 0x3b9
 80086b0:	491e      	ldr	r1, [pc, #120]	; (800872c <mem_malloc+0x1e8>)
 80086b2:	481b      	ldr	r0, [pc, #108]	; (8008720 <mem_malloc+0x1dc>)
 80086b4:	f00b fba8 	bl	8013e08 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d006      	beq.n	80086d0 <mem_malloc+0x18c>
 80086c2:	4b15      	ldr	r3, [pc, #84]	; (8008718 <mem_malloc+0x1d4>)
 80086c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80086c8:	4919      	ldr	r1, [pc, #100]	; (8008730 <mem_malloc+0x1ec>)
 80086ca:	4815      	ldr	r0, [pc, #84]	; (8008720 <mem_malloc+0x1dc>)
 80086cc:	f00b fb9c 	bl	8013e08 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d006      	beq.n	80086e8 <mem_malloc+0x1a4>
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <mem_malloc+0x1d4>)
 80086dc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80086e0:	4914      	ldr	r1, [pc, #80]	; (8008734 <mem_malloc+0x1f0>)
 80086e2:	480f      	ldr	r0, [pc, #60]	; (8008720 <mem_malloc+0x1dc>)
 80086e4:	f00b fb90 	bl	8013e08 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	3308      	adds	r3, #8
 80086ec:	e00e      	b.n	800870c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80086ee:	8bfb      	ldrh	r3, [r7, #30]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff fc83 	bl	8007ffc <ptr_to_mem>
 80086f6:	4603      	mov	r3, r0
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80086fc:	8bfa      	ldrh	r2, [r7, #30]
 80086fe:	8bbb      	ldrh	r3, [r7, #28]
 8008700:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8008704:	429a      	cmp	r2, r3
 8008706:	f4ff af44 	bcc.w	8008592 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20007fa4 	.word	0x20007fa4
 8008718:	080153f8 	.word	0x080153f8
 800871c:	080155a0 	.word	0x080155a0
 8008720:	08015440 	.word	0x08015440
 8008724:	20007fa0 	.word	0x20007fa0
 8008728:	080155b4 	.word	0x080155b4
 800872c:	080155d0 	.word	0x080155d0
 8008730:	08015600 	.word	0x08015600
 8008734:	08015630 	.word	0x08015630

08008738 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	3303      	adds	r3, #3
 800874e:	f023 0303 	bic.w	r3, r3, #3
 8008752:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e011      	b.n	800877e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4413      	add	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	885b      	ldrh	r3, [r3, #2]
 8008782:	461a      	mov	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4293      	cmp	r3, r2
 8008788:	dbe7      	blt.n	800875a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800878a:	bf00      	nop
 800878c:	bf00      	nop
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800879e:	2300      	movs	r3, #0
 80087a0:	80fb      	strh	r3, [r7, #6]
 80087a2:	e009      	b.n	80087b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <memp_init+0x30>)
 80087a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff ffc3 	bl	8008738 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80087b2:	88fb      	ldrh	r3, [r7, #6]
 80087b4:	3301      	adds	r3, #1
 80087b6:	80fb      	strh	r3, [r7, #6]
 80087b8:	88fb      	ldrh	r3, [r7, #6]
 80087ba:	2b08      	cmp	r3, #8
 80087bc:	d9f2      	bls.n	80087a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	0801a6dc 	.word	0x0801a6dc

080087cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d012      	beq.n	8008808 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d006      	beq.n	8008804 <do_memp_malloc_pool+0x38>
 80087f6:	4b07      	ldr	r3, [pc, #28]	; (8008814 <do_memp_malloc_pool+0x48>)
 80087f8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80087fc:	4906      	ldr	r1, [pc, #24]	; (8008818 <do_memp_malloc_pool+0x4c>)
 80087fe:	4807      	ldr	r0, [pc, #28]	; (800881c <do_memp_malloc_pool+0x50>)
 8008800:	f00b fb02 	bl	8013e08 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	e000      	b.n	800880a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	08015654 	.word	0x08015654
 8008818:	08015684 	.word	0x08015684
 800881c:	080156a8 	.word	0x080156a8

08008820 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <memp_malloc_pool+0x1c>
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <memp_malloc_pool+0x38>)
 8008830:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008834:	4909      	ldr	r1, [pc, #36]	; (800885c <memp_malloc_pool+0x3c>)
 8008836:	480a      	ldr	r0, [pc, #40]	; (8008860 <memp_malloc_pool+0x40>)
 8008838:	f00b fae6 	bl	8013e08 <iprintf>
  if (desc == NULL) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <memp_malloc_pool+0x26>
    return NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	e003      	b.n	800884e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff ffc0 	bl	80087cc <do_memp_malloc_pool>
 800884c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	08015654 	.word	0x08015654
 800885c:	080156d0 	.word	0x080156d0
 8008860:	080156a8 	.word	0x080156a8

08008864 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	2b08      	cmp	r3, #8
 8008872:	d908      	bls.n	8008886 <memp_malloc+0x22>
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <memp_malloc+0x3c>)
 8008876:	f240 1257 	movw	r2, #343	; 0x157
 800887a:	490a      	ldr	r1, [pc, #40]	; (80088a4 <memp_malloc+0x40>)
 800887c:	480a      	ldr	r0, [pc, #40]	; (80088a8 <memp_malloc+0x44>)
 800887e:	f00b fac3 	bl	8013e08 <iprintf>
 8008882:	2300      	movs	r3, #0
 8008884:	e008      	b.n	8008898 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	4a08      	ldr	r2, [pc, #32]	; (80088ac <memp_malloc+0x48>)
 800888a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff ff9c 	bl	80087cc <do_memp_malloc_pool>
 8008894:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008896:	68fb      	ldr	r3, [r7, #12]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	08015654 	.word	0x08015654
 80088a4:	080156e4 	.word	0x080156e4
 80088a8:	080156a8 	.word	0x080156a8
 80088ac:	0801a6dc 	.word	0x0801a6dc

080088b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <do_memp_free_pool+0x22>
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <do_memp_free_pool+0x40>)
 80088c6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80088ca:	490a      	ldr	r1, [pc, #40]	; (80088f4 <do_memp_free_pool+0x44>)
 80088cc:	480a      	ldr	r0, [pc, #40]	; (80088f8 <do_memp_free_pool+0x48>)
 80088ce:	f00b fa9b 	bl	8013e08 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80088e8:	bf00      	nop
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	08015654 	.word	0x08015654
 80088f4:	08015704 	.word	0x08015704
 80088f8:	080156a8 	.word	0x080156a8

080088fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d106      	bne.n	800891a <memp_free_pool+0x1e>
 800890c:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <memp_free_pool+0x3c>)
 800890e:	f240 1295 	movw	r2, #405	; 0x195
 8008912:	490a      	ldr	r1, [pc, #40]	; (800893c <memp_free_pool+0x40>)
 8008914:	480a      	ldr	r0, [pc, #40]	; (8008940 <memp_free_pool+0x44>)
 8008916:	f00b fa77 	bl	8013e08 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d007      	beq.n	8008930 <memp_free_pool+0x34>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff ffc1 	bl	80088b0 <do_memp_free_pool>
 800892e:	e000      	b.n	8008932 <memp_free_pool+0x36>
    return;
 8008930:	bf00      	nop
}
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	08015654 	.word	0x08015654
 800893c:	080156d0 	.word	0x080156d0
 8008940:	080156a8 	.word	0x080156a8

08008944 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	6039      	str	r1, [r7, #0]
 800894e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b08      	cmp	r3, #8
 8008954:	d907      	bls.n	8008966 <memp_free+0x22>
 8008956:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <memp_free+0x44>)
 8008958:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800895c:	490b      	ldr	r1, [pc, #44]	; (800898c <memp_free+0x48>)
 800895e:	480c      	ldr	r0, [pc, #48]	; (8008990 <memp_free+0x4c>)
 8008960:	f00b fa52 	bl	8013e08 <iprintf>
 8008964:	e00c      	b.n	8008980 <memp_free+0x3c>

  if (mem == NULL) {
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d008      	beq.n	800897e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	4a09      	ldr	r2, [pc, #36]	; (8008994 <memp_free+0x50>)
 8008970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff ff9a 	bl	80088b0 <do_memp_free_pool>
 800897c:	e000      	b.n	8008980 <memp_free+0x3c>
    return;
 800897e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	08015654 	.word	0x08015654
 800898c:	08015724 	.word	0x08015724
 8008990:	080156a8 	.word	0x080156a8
 8008994:	0801a6dc 	.word	0x0801a6dc

08008998 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800899c:	bf00      	nop
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d108      	bne.n	80089ce <netif_add+0x26>
 80089bc:	4b5b      	ldr	r3, [pc, #364]	; (8008b2c <netif_add+0x184>)
 80089be:	f240 1227 	movw	r2, #295	; 0x127
 80089c2:	495b      	ldr	r1, [pc, #364]	; (8008b30 <netif_add+0x188>)
 80089c4:	485b      	ldr	r0, [pc, #364]	; (8008b34 <netif_add+0x18c>)
 80089c6:	f00b fa1f 	bl	8013e08 <iprintf>
 80089ca:	2300      	movs	r3, #0
 80089cc:	e0a9      	b.n	8008b22 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d108      	bne.n	80089e6 <netif_add+0x3e>
 80089d4:	4b55      	ldr	r3, [pc, #340]	; (8008b2c <netif_add+0x184>)
 80089d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80089da:	4957      	ldr	r1, [pc, #348]	; (8008b38 <netif_add+0x190>)
 80089dc:	4855      	ldr	r0, [pc, #340]	; (8008b34 <netif_add+0x18c>)
 80089de:	f00b fa13 	bl	8013e08 <iprintf>
 80089e2:	2300      	movs	r3, #0
 80089e4:	e09d      	b.n	8008b22 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80089ec:	4b53      	ldr	r3, [pc, #332]	; (8008b3c <netif_add+0x194>)
 80089ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80089f6:	4b51      	ldr	r3, [pc, #324]	; (8008b3c <netif_add+0x194>)
 80089f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008a00:	4b4e      	ldr	r3, [pc, #312]	; (8008b3c <netif_add+0x194>)
 8008a02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4a49      	ldr	r2, [pc, #292]	; (8008b40 <netif_add+0x198>)
 8008a1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3324      	adds	r3, #36	; 0x24
 8008a2e:	2204      	movs	r2, #4
 8008a30:	2100      	movs	r1, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f00b f9e0 	bl	8013df8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008a44:	4b3f      	ldr	r3, [pc, #252]	; (8008b44 <netif_add+0x19c>)
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a52:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f914 	bl	8008c88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	4798      	blx	r3
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <netif_add+0xc8>
    return NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e058      	b.n	8008b22 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a76:	2bff      	cmp	r3, #255	; 0xff
 8008a78:	d103      	bne.n	8008a82 <netif_add+0xda>
        netif->num = 0;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008a86:	4b30      	ldr	r3, [pc, #192]	; (8008b48 <netif_add+0x1a0>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	617b      	str	r3, [r7, #20]
 8008a8c:	e02b      	b.n	8008ae6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d106      	bne.n	8008aa4 <netif_add+0xfc>
 8008a96:	4b25      	ldr	r3, [pc, #148]	; (8008b2c <netif_add+0x184>)
 8008a98:	f240 128b 	movw	r2, #395	; 0x18b
 8008a9c:	492b      	ldr	r1, [pc, #172]	; (8008b4c <netif_add+0x1a4>)
 8008a9e:	4825      	ldr	r0, [pc, #148]	; (8008b34 <netif_add+0x18c>)
 8008aa0:	f00b f9b2 	bl	8013e08 <iprintf>
        num_netifs++;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2bff      	cmp	r3, #255	; 0xff
 8008aae:	dd06      	ble.n	8008abe <netif_add+0x116>
 8008ab0:	4b1e      	ldr	r3, [pc, #120]	; (8008b2c <netif_add+0x184>)
 8008ab2:	f240 128d 	movw	r2, #397	; 0x18d
 8008ab6:	4926      	ldr	r1, [pc, #152]	; (8008b50 <netif_add+0x1a8>)
 8008ab8:	481e      	ldr	r0, [pc, #120]	; (8008b34 <netif_add+0x18c>)
 8008aba:	f00b f9a5 	bl	8013e08 <iprintf>
        if (netif2->num == netif->num) {
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d108      	bne.n	8008ae0 <netif_add+0x138>
          netif->num++;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8008ade:	e005      	b.n	8008aec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1d0      	bne.n	8008a8e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1be      	bne.n	8008a70 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008af8:	2bfe      	cmp	r3, #254	; 0xfe
 8008afa:	d103      	bne.n	8008b04 <netif_add+0x15c>
    netif_num = 0;
 8008afc:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <netif_add+0x19c>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	e006      	b.n	8008b12 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <netif_add+0x19c>)
 8008b10:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008b12:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <netif_add+0x1a0>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008b1a:	4a0b      	ldr	r2, [pc, #44]	; (8008b48 <netif_add+0x1a0>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008b20:	68fb      	ldr	r3, [r7, #12]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	08015740 	.word	0x08015740
 8008b30:	080157d4 	.word	0x080157d4
 8008b34:	08015790 	.word	0x08015790
 8008b38:	080157f0 	.word	0x080157f0
 8008b3c:	0801a750 	.word	0x0801a750
 8008b40:	08008f6b 	.word	0x08008f6b
 8008b44:	2000aebc 	.word	0x2000aebc
 8008b48:	2000aeb4 	.word	0x2000aeb4
 8008b4c:	08015814 	.word	0x08015814
 8008b50:	08015828 	.word	0x08015828

08008b54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f002 fb57 	bl	800b214 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f006 ff3d 	bl	800f9e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <netif_do_set_ipaddr+0x20>
 8008b8a:	4b1d      	ldr	r3, [pc, #116]	; (8008c00 <netif_do_set_ipaddr+0x88>)
 8008b8c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008b90:	491c      	ldr	r1, [pc, #112]	; (8008c04 <netif_do_set_ipaddr+0x8c>)
 8008b92:	481d      	ldr	r0, [pc, #116]	; (8008c08 <netif_do_set_ipaddr+0x90>)
 8008b94:	f00b f938 	bl	8013e08 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d106      	bne.n	8008bac <netif_do_set_ipaddr+0x34>
 8008b9e:	4b18      	ldr	r3, [pc, #96]	; (8008c00 <netif_do_set_ipaddr+0x88>)
 8008ba0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008ba4:	4917      	ldr	r1, [pc, #92]	; (8008c04 <netif_do_set_ipaddr+0x8c>)
 8008ba6:	4818      	ldr	r0, [pc, #96]	; (8008c08 <netif_do_set_ipaddr+0x90>)
 8008ba8:	f00b f92e 	bl	8013e08 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d01c      	beq.n	8008bf4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ffbf 	bl	8008b54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <netif_do_set_ipaddr+0x6a>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	e000      	b.n	8008be4 <netif_do_set_ipaddr+0x6c>
 8008be2:	2300      	movs	r3, #0
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008be8:	2101      	movs	r1, #1
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 f8d2 	bl	8008d94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e000      	b.n	8008bf6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	08015740 	.word	0x08015740
 8008c04:	08015858 	.word	0x08015858
 8008c08:	08015790 	.word	0x08015790

08008c0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3308      	adds	r3, #8
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d00a      	beq.n	8008c3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <netif_do_set_netmask+0x26>
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	e000      	b.n	8008c34 <netif_do_set_netmask+0x28>
 8008c32:	2300      	movs	r3, #0
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e000      	b.n	8008c3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	60f8      	str	r0, [r7, #12]
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	330c      	adds	r3, #12
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d00a      	beq.n	8008c7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <netif_do_set_gw+0x26>
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	e000      	b.n	8008c72 <netif_do_set_gw+0x28>
 8008c70:	2300      	movs	r3, #0
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008ca4:	4b1c      	ldr	r3, [pc, #112]	; (8008d18 <netif_set_addr+0x90>)
 8008ca6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008cae:	4b1a      	ldr	r3, [pc, #104]	; (8008d18 <netif_set_addr+0x90>)
 8008cb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008cb8:	4b17      	ldr	r3, [pc, #92]	; (8008d18 <netif_set_addr+0x90>)
 8008cba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <netif_set_addr+0x42>
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <netif_set_addr+0x46>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <netif_set_addr+0x48>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008cd8:	f107 0310 	add.w	r3, r7, #16
 8008cdc:	461a      	mov	r2, r3
 8008cde:	68b9      	ldr	r1, [r7, #8]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff ff49 	bl	8008b78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f7ff ff8e 	bl	8008c0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7ff ffa8 	bl	8008c4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008d00:	f107 0310 	add.w	r3, r7, #16
 8008d04:	461a      	mov	r2, r3
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f7ff ff35 	bl	8008b78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008d0e:	bf00      	nop
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	0801a750 	.word	0x0801a750

08008d1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008d24:	4a04      	ldr	r2, [pc, #16]	; (8008d38 <netif_set_default+0x1c>)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008d2a:	bf00      	nop
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	2000aeb8 	.word	0x2000aeb8

08008d3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <netif_set_up+0x1e>
 8008d4a:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <netif_set_up+0x4c>)
 8008d4c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008d50:	490e      	ldr	r1, [pc, #56]	; (8008d8c <netif_set_up+0x50>)
 8008d52:	480f      	ldr	r0, [pc, #60]	; (8008d90 <netif_set_up+0x54>)
 8008d54:	f00b f858 	bl	8013e08 <iprintf>
 8008d58:	e013      	b.n	8008d82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10c      	bne.n	8008d82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d6e:	f043 0301 	orr.w	r3, r3, #1
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008d7a:	2103      	movs	r1, #3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f809 	bl	8008d94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	08015740 	.word	0x08015740
 8008d8c:	080158c8 	.word	0x080158c8
 8008d90:	08015790 	.word	0x08015790

08008d94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <netif_issue_reports+0x20>
 8008da6:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <netif_issue_reports+0x74>)
 8008da8:	f240 326d 	movw	r2, #877	; 0x36d
 8008dac:	4917      	ldr	r1, [pc, #92]	; (8008e0c <netif_issue_reports+0x78>)
 8008dae:	4818      	ldr	r0, [pc, #96]	; (8008e10 <netif_issue_reports+0x7c>)
 8008db0:	f00b f82a 	bl	8013e08 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01e      	beq.n	8008e00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008dc8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d017      	beq.n	8008e00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d013      	beq.n	8008e02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00e      	beq.n	8008e02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008dea:	f003 0308 	and.w	r3, r3, #8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d007      	beq.n	8008e02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	3304      	adds	r3, #4
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f009 fbf7 	bl	80125ec <etharp_request>
 8008dfe:	e000      	b.n	8008e02 <netif_issue_reports+0x6e>
    return;
 8008e00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	08015740 	.word	0x08015740
 8008e0c:	080158e4 	.word	0x080158e4
 8008e10:	08015790 	.word	0x08015790

08008e14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d107      	bne.n	8008e32 <netif_set_down+0x1e>
 8008e22:	4b12      	ldr	r3, [pc, #72]	; (8008e6c <netif_set_down+0x58>)
 8008e24:	f240 329b 	movw	r2, #923	; 0x39b
 8008e28:	4911      	ldr	r1, [pc, #68]	; (8008e70 <netif_set_down+0x5c>)
 8008e2a:	4812      	ldr	r0, [pc, #72]	; (8008e74 <netif_set_down+0x60>)
 8008e2c:	f00a ffec 	bl	8013e08 <iprintf>
 8008e30:	e019      	b.n	8008e66 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d012      	beq.n	8008e66 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e46:	f023 0301 	bic.w	r3, r3, #1
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f008 ff7d 	bl	8011d60 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	08015740 	.word	0x08015740
 8008e70:	08015908 	.word	0x08015908
 8008e74:	08015790 	.word	0x08015790

08008e78 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d107      	bne.n	8008e96 <netif_set_link_up+0x1e>
 8008e86:	4b15      	ldr	r3, [pc, #84]	; (8008edc <netif_set_link_up+0x64>)
 8008e88:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008e8c:	4914      	ldr	r1, [pc, #80]	; (8008ee0 <netif_set_link_up+0x68>)
 8008e8e:	4815      	ldr	r0, [pc, #84]	; (8008ee4 <netif_set_link_up+0x6c>)
 8008e90:	f00a ffba 	bl	8013e08 <iprintf>
 8008e94:	e01e      	b.n	8008ed4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d117      	bne.n	8008ed4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008eaa:	f043 0304 	orr.w	r3, r3, #4
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f007 f9c2 	bl	8010240 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008ebc:	2103      	movs	r1, #3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff ff68 	bl	8008d94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <netif_set_link_up+0x5c>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	69db      	ldr	r3, [r3, #28]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	08015740 	.word	0x08015740
 8008ee0:	08015928 	.word	0x08015928
 8008ee4:	08015790 	.word	0x08015790

08008ee8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d107      	bne.n	8008f06 <netif_set_link_down+0x1e>
 8008ef6:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <netif_set_link_down+0x54>)
 8008ef8:	f240 4206 	movw	r2, #1030	; 0x406
 8008efc:	4910      	ldr	r1, [pc, #64]	; (8008f40 <netif_set_link_down+0x58>)
 8008efe:	4811      	ldr	r0, [pc, #68]	; (8008f44 <netif_set_link_down+0x5c>)
 8008f00:	f00a ff82 	bl	8013e08 <iprintf>
 8008f04:	e017      	b.n	8008f36 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d010      	beq.n	8008f36 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f1a:	f023 0304 	bic.w	r3, r3, #4
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <netif_set_link_down+0x4e>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	08015740 	.word	0x08015740
 8008f40:	0801594c 	.word	0x0801594c
 8008f44:	08015790 	.word	0x08015790

08008f48 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	61da      	str	r2, [r3, #28]
  }
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008f76:	f06f 030b 	mvn.w	r3, #11
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
	...

08008f88 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008f92:	79fb      	ldrb	r3, [r7, #7]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d013      	beq.n	8008fc0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008f98:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <netif_get_by_index+0x48>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e00c      	b.n	8008fba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	79fa      	ldrb	r2, [r7, #7]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d101      	bne.n	8008fb4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	e006      	b.n	8008fc2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1ef      	bne.n	8008fa0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	2000aeb4 	.word	0x2000aeb4

08008fd4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008fda:	4b0c      	ldr	r3, [pc, #48]	; (800900c <pbuf_free_ooseq+0x38>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <pbuf_free_ooseq+0x3c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	607b      	str	r3, [r7, #4]
 8008fe6:	e00a      	b.n	8008ffe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f002 f94d 	bl	800b290 <tcp_free_ooseq>
      return;
 8008ff6:	e005      	b.n	8009004 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	607b      	str	r3, [r7, #4]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1f1      	bne.n	8008fe8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	2000aebd 	.word	0x2000aebd
 8009010:	2000aecc 	.word	0x2000aecc

08009014 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009018:	4b03      	ldr	r3, [pc, #12]	; (8009028 <pbuf_pool_is_empty+0x14>)
 800901a:	2201      	movs	r2, #1
 800901c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800901e:	bf00      	nop
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	2000aebd 	.word	0x2000aebd

0800902c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4611      	mov	r1, r2
 8009038:	461a      	mov	r2, r3
 800903a:	460b      	mov	r3, r1
 800903c:	80fb      	strh	r3, [r7, #6]
 800903e:	4613      	mov	r3, r2
 8009040:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	88fa      	ldrh	r2, [r7, #6]
 8009052:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	88ba      	ldrh	r2, [r7, #4]
 8009058:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800905a:	8b3b      	ldrh	r3, [r7, #24]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	7f3a      	ldrb	r2, [r7, #28]
 8009066:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	73da      	strb	r2, [r3, #15]
}
 8009074:	bf00      	nop
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08c      	sub	sp, #48	; 0x30
 8009084:	af02      	add	r7, sp, #8
 8009086:	4603      	mov	r3, r0
 8009088:	71fb      	strb	r3, [r7, #7]
 800908a:	460b      	mov	r3, r1
 800908c:	80bb      	strh	r3, [r7, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009096:	887b      	ldrh	r3, [r7, #2]
 8009098:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800909c:	d07f      	beq.n	800919e <pbuf_alloc+0x11e>
 800909e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80090a2:	f300 80c8 	bgt.w	8009236 <pbuf_alloc+0x1b6>
 80090a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80090aa:	d010      	beq.n	80090ce <pbuf_alloc+0x4e>
 80090ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80090b0:	f300 80c1 	bgt.w	8009236 <pbuf_alloc+0x1b6>
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d002      	beq.n	80090be <pbuf_alloc+0x3e>
 80090b8:	2b41      	cmp	r3, #65	; 0x41
 80090ba:	f040 80bc 	bne.w	8009236 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80090be:	887a      	ldrh	r2, [r7, #2]
 80090c0:	88bb      	ldrh	r3, [r7, #4]
 80090c2:	4619      	mov	r1, r3
 80090c4:	2000      	movs	r0, #0
 80090c6:	f000 f8d1 	bl	800926c <pbuf_alloc_reference>
 80090ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80090cc:	e0bd      	b.n	800924a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80090d6:	88bb      	ldrh	r3, [r7, #4]
 80090d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80090da:	2008      	movs	r0, #8
 80090dc:	f7ff fbc2 	bl	8008864 <memp_malloc>
 80090e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80090e8:	f7ff ff94 	bl	8009014 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80090f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090f4:	f000 faa8 	bl	8009648 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	e0a7      	b.n	800924c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80090fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090fe:	3303      	adds	r3, #3
 8009100:	b29b      	uxth	r3, r3
 8009102:	f023 0303 	bic.w	r3, r3, #3
 8009106:	b29b      	uxth	r3, r3
 8009108:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800910c:	b29b      	uxth	r3, r3
 800910e:	8b7a      	ldrh	r2, [r7, #26]
 8009110:	4293      	cmp	r3, r2
 8009112:	bf28      	it	cs
 8009114:	4613      	movcs	r3, r2
 8009116:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800911a:	3310      	adds	r3, #16
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	4413      	add	r3, r2
 8009120:	3303      	adds	r3, #3
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	4618      	mov	r0, r3
 8009128:	89f9      	ldrh	r1, [r7, #14]
 800912a:	8b7a      	ldrh	r2, [r7, #26]
 800912c:	2300      	movs	r3, #0
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	887b      	ldrh	r3, [r7, #2]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	460b      	mov	r3, r1
 8009136:	4601      	mov	r1, r0
 8009138:	6938      	ldr	r0, [r7, #16]
 800913a:	f7ff ff77 	bl	800902c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d006      	beq.n	8009158 <pbuf_alloc+0xd8>
 800914a:	4b42      	ldr	r3, [pc, #264]	; (8009254 <pbuf_alloc+0x1d4>)
 800914c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009150:	4941      	ldr	r1, [pc, #260]	; (8009258 <pbuf_alloc+0x1d8>)
 8009152:	4842      	ldr	r0, [pc, #264]	; (800925c <pbuf_alloc+0x1dc>)
 8009154:	f00a fe58 	bl	8013e08 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009158:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800915a:	3303      	adds	r3, #3
 800915c:	f023 0303 	bic.w	r3, r3, #3
 8009160:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009164:	d106      	bne.n	8009174 <pbuf_alloc+0xf4>
 8009166:	4b3b      	ldr	r3, [pc, #236]	; (8009254 <pbuf_alloc+0x1d4>)
 8009168:	f44f 7281 	mov.w	r2, #258	; 0x102
 800916c:	493c      	ldr	r1, [pc, #240]	; (8009260 <pbuf_alloc+0x1e0>)
 800916e:	483b      	ldr	r0, [pc, #236]	; (800925c <pbuf_alloc+0x1dc>)
 8009170:	f00a fe4a 	bl	8013e08 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	2b00      	cmp	r3, #0
 8009178:	d102      	bne.n	8009180 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
 800917e:	e002      	b.n	8009186 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800918a:	8b7a      	ldrh	r2, [r7, #26]
 800918c:	89fb      	ldrh	r3, [r7, #14]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009196:	8b7b      	ldrh	r3, [r7, #26]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d19e      	bne.n	80090da <pbuf_alloc+0x5a>
      break;
 800919c:	e055      	b.n	800924a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800919e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091a0:	3303      	adds	r3, #3
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f023 0303 	bic.w	r3, r3, #3
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	88bb      	ldrh	r3, [r7, #4]
 80091ac:	3303      	adds	r3, #3
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f023 0303 	bic.w	r3, r3, #3
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80091ba:	8b3b      	ldrh	r3, [r7, #24]
 80091bc:	3310      	adds	r3, #16
 80091be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80091c0:	8b3a      	ldrh	r2, [r7, #24]
 80091c2:	88bb      	ldrh	r3, [r7, #4]
 80091c4:	3303      	adds	r3, #3
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d306      	bcc.n	80091dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80091ce:	8afa      	ldrh	r2, [r7, #22]
 80091d0:	88bb      	ldrh	r3, [r7, #4]
 80091d2:	3303      	adds	r3, #3
 80091d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80091d8:	429a      	cmp	r2, r3
 80091da:	d201      	bcs.n	80091e0 <pbuf_alloc+0x160>
        return NULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	e035      	b.n	800924c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80091e0:	8afb      	ldrh	r3, [r7, #22]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff f9ae 	bl	8008544 <mem_malloc>
 80091e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <pbuf_alloc+0x174>
        return NULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e02b      	b.n	800924c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80091f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091f6:	3310      	adds	r3, #16
 80091f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091fa:	4413      	add	r3, r2
 80091fc:	3303      	adds	r3, #3
 80091fe:	f023 0303 	bic.w	r3, r3, #3
 8009202:	4618      	mov	r0, r3
 8009204:	88b9      	ldrh	r1, [r7, #4]
 8009206:	88ba      	ldrh	r2, [r7, #4]
 8009208:	2300      	movs	r3, #0
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	887b      	ldrh	r3, [r7, #2]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	460b      	mov	r3, r1
 8009212:	4601      	mov	r1, r0
 8009214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009216:	f7ff ff09 	bl	800902c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d010      	beq.n	8009248 <pbuf_alloc+0x1c8>
 8009226:	4b0b      	ldr	r3, [pc, #44]	; (8009254 <pbuf_alloc+0x1d4>)
 8009228:	f44f 7291 	mov.w	r2, #290	; 0x122
 800922c:	490d      	ldr	r1, [pc, #52]	; (8009264 <pbuf_alloc+0x1e4>)
 800922e:	480b      	ldr	r0, [pc, #44]	; (800925c <pbuf_alloc+0x1dc>)
 8009230:	f00a fdea 	bl	8013e08 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009234:	e008      	b.n	8009248 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009236:	4b07      	ldr	r3, [pc, #28]	; (8009254 <pbuf_alloc+0x1d4>)
 8009238:	f240 1227 	movw	r2, #295	; 0x127
 800923c:	490a      	ldr	r1, [pc, #40]	; (8009268 <pbuf_alloc+0x1e8>)
 800923e:	4807      	ldr	r0, [pc, #28]	; (800925c <pbuf_alloc+0x1dc>)
 8009240:	f00a fde2 	bl	8013e08 <iprintf>
      return NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	e001      	b.n	800924c <pbuf_alloc+0x1cc>
      break;
 8009248:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800924c:	4618      	mov	r0, r3
 800924e:	3728      	adds	r7, #40	; 0x28
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	08015970 	.word	0x08015970
 8009258:	080159a0 	.word	0x080159a0
 800925c:	080159d0 	.word	0x080159d0
 8009260:	080159f8 	.word	0x080159f8
 8009264:	08015a2c 	.word	0x08015a2c
 8009268:	08015a58 	.word	0x08015a58

0800926c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af02      	add	r7, sp, #8
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
 8009278:	4613      	mov	r3, r2
 800927a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800927c:	883b      	ldrh	r3, [r7, #0]
 800927e:	2b41      	cmp	r3, #65	; 0x41
 8009280:	d009      	beq.n	8009296 <pbuf_alloc_reference+0x2a>
 8009282:	883b      	ldrh	r3, [r7, #0]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d006      	beq.n	8009296 <pbuf_alloc_reference+0x2a>
 8009288:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <pbuf_alloc_reference+0x5c>)
 800928a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800928e:	490f      	ldr	r1, [pc, #60]	; (80092cc <pbuf_alloc_reference+0x60>)
 8009290:	480f      	ldr	r0, [pc, #60]	; (80092d0 <pbuf_alloc_reference+0x64>)
 8009292:	f00a fdb9 	bl	8013e08 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009296:	2007      	movs	r0, #7
 8009298:	f7ff fae4 	bl	8008864 <memp_malloc>
 800929c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e00b      	b.n	80092c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80092a8:	8879      	ldrh	r1, [r7, #2]
 80092aa:	887a      	ldrh	r2, [r7, #2]
 80092ac:	2300      	movs	r3, #0
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	883b      	ldrh	r3, [r7, #0]
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	460b      	mov	r3, r1
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff feb7 	bl	800902c <pbuf_init_alloced_pbuf>
  return p;
 80092be:	68fb      	ldr	r3, [r7, #12]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	08015970 	.word	0x08015970
 80092cc:	08015a74 	.word	0x08015a74
 80092d0:	080159d0 	.word	0x080159d0

080092d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af02      	add	r7, sp, #8
 80092da:	607b      	str	r3, [r7, #4]
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
 80092e0:	460b      	mov	r3, r1
 80092e2:	81bb      	strh	r3, [r7, #12]
 80092e4:	4613      	mov	r3, r2
 80092e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80092ec:	8a7b      	ldrh	r3, [r7, #18]
 80092ee:	3303      	adds	r3, #3
 80092f0:	f023 0203 	bic.w	r2, r3, #3
 80092f4:	89bb      	ldrh	r3, [r7, #12]
 80092f6:	441a      	add	r2, r3
 80092f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d901      	bls.n	8009302 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	e018      	b.n	8009334 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d007      	beq.n	8009318 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009308:	8a7b      	ldrh	r3, [r7, #18]
 800930a:	3303      	adds	r3, #3
 800930c:	f023 0303 	bic.w	r3, r3, #3
 8009310:	6a3a      	ldr	r2, [r7, #32]
 8009312:	4413      	add	r3, r2
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	e001      	b.n	800931c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	89b9      	ldrh	r1, [r7, #12]
 8009320:	89ba      	ldrh	r2, [r7, #12]
 8009322:	2302      	movs	r3, #2
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	897b      	ldrh	r3, [r7, #10]
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	460b      	mov	r3, r1
 800932c:	6979      	ldr	r1, [r7, #20]
 800932e:	f7ff fe7d 	bl	800902c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009332:	687b      	ldr	r3, [r7, #4]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d106      	bne.n	800935c <pbuf_realloc+0x20>
 800934e:	4b3a      	ldr	r3, [pc, #232]	; (8009438 <pbuf_realloc+0xfc>)
 8009350:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009354:	4939      	ldr	r1, [pc, #228]	; (800943c <pbuf_realloc+0x100>)
 8009356:	483a      	ldr	r0, [pc, #232]	; (8009440 <pbuf_realloc+0x104>)
 8009358:	f00a fd56 	bl	8013e08 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	891b      	ldrh	r3, [r3, #8]
 8009360:	887a      	ldrh	r2, [r7, #2]
 8009362:	429a      	cmp	r2, r3
 8009364:	d263      	bcs.n	800942e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	891a      	ldrh	r2, [r3, #8]
 800936a:	887b      	ldrh	r3, [r7, #2]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	817b      	strh	r3, [r7, #10]
  q = p;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009378:	e018      	b.n	80093ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	895b      	ldrh	r3, [r3, #10]
 800937e:	897a      	ldrh	r2, [r7, #10]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	891a      	ldrh	r2, [r3, #8]
 8009388:	893b      	ldrh	r3, [r7, #8]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <pbuf_realloc+0x70>
 800939e:	4b26      	ldr	r3, [pc, #152]	; (8009438 <pbuf_realloc+0xfc>)
 80093a0:	f240 12af 	movw	r2, #431	; 0x1af
 80093a4:	4927      	ldr	r1, [pc, #156]	; (8009444 <pbuf_realloc+0x108>)
 80093a6:	4826      	ldr	r0, [pc, #152]	; (8009440 <pbuf_realloc+0x104>)
 80093a8:	f00a fd2e 	bl	8013e08 <iprintf>
  while (rem_len > q->len) {
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	895b      	ldrh	r3, [r3, #10]
 80093b0:	897a      	ldrh	r2, [r7, #10]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d8e1      	bhi.n	800937a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	7b1b      	ldrb	r3, [r3, #12]
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d121      	bne.n	8009406 <pbuf_realloc+0xca>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	895b      	ldrh	r3, [r3, #10]
 80093c6:	897a      	ldrh	r2, [r7, #10]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d01c      	beq.n	8009406 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	7b5b      	ldrb	r3, [r3, #13]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d116      	bne.n	8009406 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	897b      	ldrh	r3, [r7, #10]
 80093e4:	4413      	add	r3, r2
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	4619      	mov	r1, r3
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7fe ffae 	bl	800834c <mem_trim>
 80093f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d106      	bne.n	8009406 <pbuf_realloc+0xca>
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <pbuf_realloc+0xfc>)
 80093fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80093fe:	4912      	ldr	r1, [pc, #72]	; (8009448 <pbuf_realloc+0x10c>)
 8009400:	480f      	ldr	r0, [pc, #60]	; (8009440 <pbuf_realloc+0x104>)
 8009402:	f00a fd01 	bl	8013e08 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	897a      	ldrh	r2, [r7, #10]
 800940a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	895a      	ldrh	r2, [r3, #10]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 f911 	bl	8009648 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	e000      	b.n	8009430 <pbuf_realloc+0xf4>
    return;
 800942e:	bf00      	nop

}
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	08015970 	.word	0x08015970
 800943c:	08015a88 	.word	0x08015a88
 8009440:	080159d0 	.word	0x080159d0
 8009444:	08015aa0 	.word	0x08015aa0
 8009448:	08015ab8 	.word	0x08015ab8

0800944c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	4613      	mov	r3, r2
 8009458:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d106      	bne.n	800946e <pbuf_add_header_impl+0x22>
 8009460:	4b2b      	ldr	r3, [pc, #172]	; (8009510 <pbuf_add_header_impl+0xc4>)
 8009462:	f240 12df 	movw	r2, #479	; 0x1df
 8009466:	492b      	ldr	r1, [pc, #172]	; (8009514 <pbuf_add_header_impl+0xc8>)
 8009468:	482b      	ldr	r0, [pc, #172]	; (8009518 <pbuf_add_header_impl+0xcc>)
 800946a:	f00a fccd 	bl	8013e08 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <pbuf_add_header_impl+0x30>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800947a:	d301      	bcc.n	8009480 <pbuf_add_header_impl+0x34>
    return 1;
 800947c:	2301      	movs	r3, #1
 800947e:	e043      	b.n	8009508 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <pbuf_add_header_impl+0x3e>
    return 0;
 8009486:	2300      	movs	r3, #0
 8009488:	e03e      	b.n	8009508 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	891a      	ldrh	r2, [r3, #8]
 8009492:	8a7b      	ldrh	r3, [r7, #18]
 8009494:	4413      	add	r3, r2
 8009496:	b29b      	uxth	r3, r3
 8009498:	8a7a      	ldrh	r2, [r7, #18]
 800949a:	429a      	cmp	r2, r3
 800949c:	d901      	bls.n	80094a2 <pbuf_add_header_impl+0x56>
    return 1;
 800949e:	2301      	movs	r3, #1
 80094a0:	e032      	b.n	8009508 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	7b1b      	ldrb	r3, [r3, #12]
 80094a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80094a8:	8a3b      	ldrh	r3, [r7, #16]
 80094aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00c      	beq.n	80094cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	425b      	negs	r3, r3
 80094ba:	4413      	add	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3310      	adds	r3, #16
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d20d      	bcs.n	80094e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e01d      	b.n	8009508 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d006      	beq.n	80094e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	425b      	negs	r3, r3
 80094da:	4413      	add	r3, r2
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	e001      	b.n	80094e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e011      	b.n	8009508 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	895a      	ldrh	r2, [r3, #10]
 80094ee:	8a7b      	ldrh	r3, [r7, #18]
 80094f0:	4413      	add	r3, r2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	891a      	ldrh	r2, [r3, #8]
 80094fc:	8a7b      	ldrh	r3, [r7, #18]
 80094fe:	4413      	add	r3, r2
 8009500:	b29a      	uxth	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	811a      	strh	r2, [r3, #8]


  return 0;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	08015970 	.word	0x08015970
 8009514:	08015ad4 	.word	0x08015ad4
 8009518:	080159d0 	.word	0x080159d0

0800951c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009526:	2200      	movs	r2, #0
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff ff8e 	bl	800944c <pbuf_add_header_impl>
 8009530:	4603      	mov	r3, r0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <pbuf_remove_header+0x1e>
 800954c:	4b20      	ldr	r3, [pc, #128]	; (80095d0 <pbuf_remove_header+0x94>)
 800954e:	f240 224b 	movw	r2, #587	; 0x24b
 8009552:	4920      	ldr	r1, [pc, #128]	; (80095d4 <pbuf_remove_header+0x98>)
 8009554:	4820      	ldr	r0, [pc, #128]	; (80095d8 <pbuf_remove_header+0x9c>)
 8009556:	f00a fc57 	bl	8013e08 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <pbuf_remove_header+0x2c>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009566:	d301      	bcc.n	800956c <pbuf_remove_header+0x30>
    return 1;
 8009568:	2301      	movs	r3, #1
 800956a:	e02c      	b.n	80095c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <pbuf_remove_header+0x3a>
    return 0;
 8009572:	2300      	movs	r3, #0
 8009574:	e027      	b.n	80095c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	895b      	ldrh	r3, [r3, #10]
 800957e:	89fa      	ldrh	r2, [r7, #14]
 8009580:	429a      	cmp	r2, r3
 8009582:	d908      	bls.n	8009596 <pbuf_remove_header+0x5a>
 8009584:	4b12      	ldr	r3, [pc, #72]	; (80095d0 <pbuf_remove_header+0x94>)
 8009586:	f240 2255 	movw	r2, #597	; 0x255
 800958a:	4914      	ldr	r1, [pc, #80]	; (80095dc <pbuf_remove_header+0xa0>)
 800958c:	4812      	ldr	r0, [pc, #72]	; (80095d8 <pbuf_remove_header+0x9c>)
 800958e:	f00a fc3b 	bl	8013e08 <iprintf>
 8009592:	2301      	movs	r3, #1
 8009594:	e017      	b.n	80095c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	441a      	add	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	895a      	ldrh	r2, [r3, #10]
 80095ac:	89fb      	ldrh	r3, [r7, #14]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	891a      	ldrh	r2, [r3, #8]
 80095ba:	89fb      	ldrh	r3, [r7, #14]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	b29a      	uxth	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	08015970 	.word	0x08015970
 80095d4:	08015ad4 	.word	0x08015ad4
 80095d8:	080159d0 	.word	0x080159d0
 80095dc:	08015ae0 	.word	0x08015ae0

080095e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	807b      	strh	r3, [r7, #2]
 80095ec:	4613      	mov	r3, r2
 80095ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80095f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	da08      	bge.n	800960a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80095f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095fc:	425b      	negs	r3, r3
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff ff9b 	bl	800953c <pbuf_remove_header>
 8009606:	4603      	mov	r3, r0
 8009608:	e007      	b.n	800961a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800960a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800960e:	787a      	ldrb	r2, [r7, #1]
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7ff ff1a 	bl	800944c <pbuf_add_header_impl>
 8009618:	4603      	mov	r3, r0
  }
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800962e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009632:	2201      	movs	r2, #1
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff ffd2 	bl	80095e0 <pbuf_header_impl>
 800963c:	4603      	mov	r3, r0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10b      	bne.n	800966e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d106      	bne.n	800966a <pbuf_free+0x22>
 800965c:	4b38      	ldr	r3, [pc, #224]	; (8009740 <pbuf_free+0xf8>)
 800965e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009662:	4938      	ldr	r1, [pc, #224]	; (8009744 <pbuf_free+0xfc>)
 8009664:	4838      	ldr	r0, [pc, #224]	; (8009748 <pbuf_free+0x100>)
 8009666:	f00a fbcf 	bl	8013e08 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800966a:	2300      	movs	r3, #0
 800966c:	e063      	b.n	8009736 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009672:	e05c      	b.n	800972e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	7b9b      	ldrb	r3, [r3, #14]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d106      	bne.n	800968a <pbuf_free+0x42>
 800967c:	4b30      	ldr	r3, [pc, #192]	; (8009740 <pbuf_free+0xf8>)
 800967e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009682:	4932      	ldr	r1, [pc, #200]	; (800974c <pbuf_free+0x104>)
 8009684:	4830      	ldr	r0, [pc, #192]	; (8009748 <pbuf_free+0x100>)
 8009686:	f00a fbbf 	bl	8013e08 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	7b9b      	ldrb	r3, [r3, #14]
 800968e:	3b01      	subs	r3, #1
 8009690:	b2da      	uxtb	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	739a      	strb	r2, [r3, #14]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	7b9b      	ldrb	r3, [r3, #14]
 800969a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800969c:	7dbb      	ldrb	r3, [r7, #22]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d143      	bne.n	800972a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	7b1b      	ldrb	r3, [r3, #12]
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7b5b      	ldrb	r3, [r3, #13]
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d011      	beq.n	80096e2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d106      	bne.n	80096d8 <pbuf_free+0x90>
 80096ca:	4b1d      	ldr	r3, [pc, #116]	; (8009740 <pbuf_free+0xf8>)
 80096cc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80096d0:	491f      	ldr	r1, [pc, #124]	; (8009750 <pbuf_free+0x108>)
 80096d2:	481d      	ldr	r0, [pc, #116]	; (8009748 <pbuf_free+0x100>)
 80096d4:	f00a fb98 	bl	8013e08 <iprintf>
        pc->custom_free_function(p);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	4798      	blx	r3
 80096e0:	e01d      	b.n	800971e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d104      	bne.n	80096f2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	2008      	movs	r0, #8
 80096ec:	f7ff f92a 	bl	8008944 <memp_free>
 80096f0:	e015      	b.n	800971e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d104      	bne.n	8009702 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	2007      	movs	r0, #7
 80096fc:	f7ff f922 	bl	8008944 <memp_free>
 8009700:	e00d      	b.n	800971e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <pbuf_free+0xc8>
          mem_free(p);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7fe fdb5 	bl	8008278 <mem_free>
 800970e:	e006      	b.n	800971e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009710:	4b0b      	ldr	r3, [pc, #44]	; (8009740 <pbuf_free+0xf8>)
 8009712:	f240 320f 	movw	r2, #783	; 0x30f
 8009716:	490f      	ldr	r1, [pc, #60]	; (8009754 <pbuf_free+0x10c>)
 8009718:	480b      	ldr	r0, [pc, #44]	; (8009748 <pbuf_free+0x100>)
 800971a:	f00a fb75 	bl	8013e08 <iprintf>
        }
      }
      count++;
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	3301      	adds	r3, #1
 8009722:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	607b      	str	r3, [r7, #4]
 8009728:	e001      	b.n	800972e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800972a:	2300      	movs	r3, #0
 800972c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d19f      	bne.n	8009674 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	08015970 	.word	0x08015970
 8009744:	08015ad4 	.word	0x08015ad4
 8009748:	080159d0 	.word	0x080159d0
 800974c:	08015b00 	.word	0x08015b00
 8009750:	08015b18 	.word	0x08015b18
 8009754:	08015b3c 	.word	0x08015b3c

08009758 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009764:	e005      	b.n	8009772 <pbuf_clen+0x1a>
    ++len;
 8009766:	89fb      	ldrh	r3, [r7, #14]
 8009768:	3301      	adds	r3, #1
 800976a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1f6      	bne.n	8009766 <pbuf_clen+0xe>
  }
  return len;
 8009778:	89fb      	ldrh	r3, [r7, #14]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
	...

08009788 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d010      	beq.n	80097b8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	7b9b      	ldrb	r3, [r3, #14]
 800979a:	3301      	adds	r3, #1
 800979c:	b2da      	uxtb	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	7b9b      	ldrb	r3, [r3, #14]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <pbuf_ref+0x30>
 80097aa:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <pbuf_ref+0x38>)
 80097ac:	f240 3242 	movw	r2, #834	; 0x342
 80097b0:	4904      	ldr	r1, [pc, #16]	; (80097c4 <pbuf_ref+0x3c>)
 80097b2:	4805      	ldr	r0, [pc, #20]	; (80097c8 <pbuf_ref+0x40>)
 80097b4:	f00a fb28 	bl	8013e08 <iprintf>
  }
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	08015970 	.word	0x08015970
 80097c4:	08015b50 	.word	0x08015b50
 80097c8:	080159d0 	.word	0x080159d0

080097cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <pbuf_cat+0x16>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d107      	bne.n	80097f2 <pbuf_cat+0x26>
 80097e2:	4b20      	ldr	r3, [pc, #128]	; (8009864 <pbuf_cat+0x98>)
 80097e4:	f240 3259 	movw	r2, #857	; 0x359
 80097e8:	491f      	ldr	r1, [pc, #124]	; (8009868 <pbuf_cat+0x9c>)
 80097ea:	4820      	ldr	r0, [pc, #128]	; (800986c <pbuf_cat+0xa0>)
 80097ec:	f00a fb0c 	bl	8013e08 <iprintf>
 80097f0:	e034      	b.n	800985c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	e00a      	b.n	800980e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	891a      	ldrh	r2, [r3, #8]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	891b      	ldrh	r3, [r3, #8]
 8009800:	4413      	add	r3, r2
 8009802:	b29a      	uxth	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1f0      	bne.n	80097f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	891a      	ldrh	r2, [r3, #8]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	895b      	ldrh	r3, [r3, #10]
 800981e:	429a      	cmp	r2, r3
 8009820:	d006      	beq.n	8009830 <pbuf_cat+0x64>
 8009822:	4b10      	ldr	r3, [pc, #64]	; (8009864 <pbuf_cat+0x98>)
 8009824:	f240 3262 	movw	r2, #866	; 0x362
 8009828:	4911      	ldr	r1, [pc, #68]	; (8009870 <pbuf_cat+0xa4>)
 800982a:	4810      	ldr	r0, [pc, #64]	; (800986c <pbuf_cat+0xa0>)
 800982c:	f00a faec 	bl	8013e08 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d006      	beq.n	8009846 <pbuf_cat+0x7a>
 8009838:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <pbuf_cat+0x98>)
 800983a:	f240 3263 	movw	r2, #867	; 0x363
 800983e:	490d      	ldr	r1, [pc, #52]	; (8009874 <pbuf_cat+0xa8>)
 8009840:	480a      	ldr	r0, [pc, #40]	; (800986c <pbuf_cat+0xa0>)
 8009842:	f00a fae1 	bl	8013e08 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	891a      	ldrh	r2, [r3, #8]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	891b      	ldrh	r3, [r3, #8]
 800984e:	4413      	add	r3, r2
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	08015970 	.word	0x08015970
 8009868:	08015b64 	.word	0x08015b64
 800986c:	080159d0 	.word	0x080159d0
 8009870:	08015b9c 	.word	0x08015b9c
 8009874:	08015bcc 	.word	0x08015bcc

08009878 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff ffa1 	bl	80097cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800988a:	6838      	ldr	r0, [r7, #0]
 800988c:	f7ff ff7c 	bl	8009788 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80098a2:	2300      	movs	r3, #0
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	2300      	movs	r3, #0
 80098a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d008      	beq.n	80098c2 <pbuf_copy+0x2a>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d005      	beq.n	80098c2 <pbuf_copy+0x2a>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	891a      	ldrh	r2, [r3, #8]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	891b      	ldrh	r3, [r3, #8]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d209      	bcs.n	80098d6 <pbuf_copy+0x3e>
 80098c2:	4b57      	ldr	r3, [pc, #348]	; (8009a20 <pbuf_copy+0x188>)
 80098c4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80098c8:	4956      	ldr	r1, [pc, #344]	; (8009a24 <pbuf_copy+0x18c>)
 80098ca:	4857      	ldr	r0, [pc, #348]	; (8009a28 <pbuf_copy+0x190>)
 80098cc:	f00a fa9c 	bl	8013e08 <iprintf>
 80098d0:	f06f 030f 	mvn.w	r3, #15
 80098d4:	e09f      	b.n	8009a16 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	895b      	ldrh	r3, [r3, #10]
 80098da:	461a      	mov	r2, r3
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	895b      	ldrh	r3, [r3, #10]
 80098e4:	4619      	mov	r1, r3
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1acb      	subs	r3, r1, r3
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d306      	bcc.n	80098fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	895b      	ldrh	r3, [r3, #10]
 80098f2:	461a      	mov	r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e005      	b.n	8009908 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	895b      	ldrh	r3, [r3, #10]
 8009900:	461a      	mov	r2, r3
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	18d0      	adds	r0, r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	4413      	add	r3, r2
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4619      	mov	r1, r3
 800991c:	f00a fa44 	bl	8013da8 <memcpy>
    offset_to += len;
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4413      	add	r3, r2
 800992e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	895b      	ldrh	r3, [r3, #10]
 8009934:	461a      	mov	r2, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	4293      	cmp	r3, r2
 800993a:	d906      	bls.n	800994a <pbuf_copy+0xb2>
 800993c:	4b38      	ldr	r3, [pc, #224]	; (8009a20 <pbuf_copy+0x188>)
 800993e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009942:	493a      	ldr	r1, [pc, #232]	; (8009a2c <pbuf_copy+0x194>)
 8009944:	4838      	ldr	r0, [pc, #224]	; (8009a28 <pbuf_copy+0x190>)
 8009946:	f00a fa5f 	bl	8013e08 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	895b      	ldrh	r3, [r3, #10]
 800994e:	461a      	mov	r2, r3
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	4293      	cmp	r3, r2
 8009954:	d906      	bls.n	8009964 <pbuf_copy+0xcc>
 8009956:	4b32      	ldr	r3, [pc, #200]	; (8009a20 <pbuf_copy+0x188>)
 8009958:	f240 32da 	movw	r2, #986	; 0x3da
 800995c:	4934      	ldr	r1, [pc, #208]	; (8009a30 <pbuf_copy+0x198>)
 800995e:	4832      	ldr	r0, [pc, #200]	; (8009a28 <pbuf_copy+0x190>)
 8009960:	f00a fa52 	bl	8013e08 <iprintf>
    if (offset_from >= p_from->len) {
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	895b      	ldrh	r3, [r3, #10]
 8009968:	461a      	mov	r2, r3
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	4293      	cmp	r3, r2
 800996e:	d304      	bcc.n	800997a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	895b      	ldrh	r3, [r3, #10]
 800997e:	461a      	mov	r2, r3
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	4293      	cmp	r3, r2
 8009984:	d114      	bne.n	80099b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10c      	bne.n	80099b0 <pbuf_copy+0x118>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d009      	beq.n	80099b0 <pbuf_copy+0x118>
 800999c:	4b20      	ldr	r3, [pc, #128]	; (8009a20 <pbuf_copy+0x188>)
 800999e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80099a2:	4924      	ldr	r1, [pc, #144]	; (8009a34 <pbuf_copy+0x19c>)
 80099a4:	4820      	ldr	r0, [pc, #128]	; (8009a28 <pbuf_copy+0x190>)
 80099a6:	f00a fa2f 	bl	8013e08 <iprintf>
 80099aa:	f06f 030f 	mvn.w	r3, #15
 80099ae:	e032      	b.n	8009a16 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d013      	beq.n	80099de <pbuf_copy+0x146>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	895a      	ldrh	r2, [r3, #10]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	891b      	ldrh	r3, [r3, #8]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d10d      	bne.n	80099de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d009      	beq.n	80099de <pbuf_copy+0x146>
 80099ca:	4b15      	ldr	r3, [pc, #84]	; (8009a20 <pbuf_copy+0x188>)
 80099cc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80099d0:	4919      	ldr	r1, [pc, #100]	; (8009a38 <pbuf_copy+0x1a0>)
 80099d2:	4815      	ldr	r0, [pc, #84]	; (8009a28 <pbuf_copy+0x190>)
 80099d4:	f00a fa18 	bl	8013e08 <iprintf>
 80099d8:	f06f 0305 	mvn.w	r3, #5
 80099dc:	e01b      	b.n	8009a16 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d013      	beq.n	8009a0c <pbuf_copy+0x174>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	895a      	ldrh	r2, [r3, #10]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	891b      	ldrh	r3, [r3, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d10d      	bne.n	8009a0c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d009      	beq.n	8009a0c <pbuf_copy+0x174>
 80099f8:	4b09      	ldr	r3, [pc, #36]	; (8009a20 <pbuf_copy+0x188>)
 80099fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80099fe:	490e      	ldr	r1, [pc, #56]	; (8009a38 <pbuf_copy+0x1a0>)
 8009a00:	4809      	ldr	r0, [pc, #36]	; (8009a28 <pbuf_copy+0x190>)
 8009a02:	f00a fa01 	bl	8013e08 <iprintf>
 8009a06:	f06f 0305 	mvn.w	r3, #5
 8009a0a:	e004      	b.n	8009a16 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f47f af61 	bne.w	80098d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	08015970 	.word	0x08015970
 8009a24:	08015c18 	.word	0x08015c18
 8009a28:	080159d0 	.word	0x080159d0
 8009a2c:	08015c48 	.word	0x08015c48
 8009a30:	08015c60 	.word	0x08015c60
 8009a34:	08015c7c 	.word	0x08015c7c
 8009a38:	08015c8c 	.word	0x08015c8c

08009a3c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	4611      	mov	r1, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	80fb      	strh	r3, [r7, #6]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d108      	bne.n	8009a72 <pbuf_copy_partial+0x36>
 8009a60:	4b2b      	ldr	r3, [pc, #172]	; (8009b10 <pbuf_copy_partial+0xd4>)
 8009a62:	f240 420a 	movw	r2, #1034	; 0x40a
 8009a66:	492b      	ldr	r1, [pc, #172]	; (8009b14 <pbuf_copy_partial+0xd8>)
 8009a68:	482b      	ldr	r0, [pc, #172]	; (8009b18 <pbuf_copy_partial+0xdc>)
 8009a6a:	f00a f9cd 	bl	8013e08 <iprintf>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e04a      	b.n	8009b08 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d108      	bne.n	8009a8a <pbuf_copy_partial+0x4e>
 8009a78:	4b25      	ldr	r3, [pc, #148]	; (8009b10 <pbuf_copy_partial+0xd4>)
 8009a7a:	f240 420b 	movw	r2, #1035	; 0x40b
 8009a7e:	4927      	ldr	r1, [pc, #156]	; (8009b1c <pbuf_copy_partial+0xe0>)
 8009a80:	4825      	ldr	r0, [pc, #148]	; (8009b18 <pbuf_copy_partial+0xdc>)
 8009a82:	f00a f9c1 	bl	8013e08 <iprintf>
 8009a86:	2300      	movs	r3, #0
 8009a88:	e03e      	b.n	8009b08 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	61fb      	str	r3, [r7, #28]
 8009a8e:	e034      	b.n	8009afa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009a90:	88bb      	ldrh	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <pbuf_copy_partial+0x70>
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	895b      	ldrh	r3, [r3, #10]
 8009a9a:	88ba      	ldrh	r2, [r7, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d305      	bcc.n	8009aac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	895b      	ldrh	r3, [r3, #10]
 8009aa4:	88ba      	ldrh	r2, [r7, #4]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	80bb      	strh	r3, [r7, #4]
 8009aaa:	e023      	b.n	8009af4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	895a      	ldrh	r2, [r3, #10]
 8009ab0:	88bb      	ldrh	r3, [r7, #4]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009ab6:	8b3a      	ldrh	r2, [r7, #24]
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d901      	bls.n	8009ac2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009abe:	88fb      	ldrh	r3, [r7, #6]
 8009ac0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009ac2:	8b7b      	ldrh	r3, [r7, #26]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	18d0      	adds	r0, r2, r3
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	88bb      	ldrh	r3, [r7, #4]
 8009ace:	4413      	add	r3, r2
 8009ad0:	8b3a      	ldrh	r2, [r7, #24]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	f00a f968 	bl	8013da8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009ad8:	8afa      	ldrh	r2, [r7, #22]
 8009ada:	8b3b      	ldrh	r3, [r7, #24]
 8009adc:	4413      	add	r3, r2
 8009ade:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009ae0:	8b7a      	ldrh	r2, [r7, #26]
 8009ae2:	8b3b      	ldrh	r3, [r7, #24]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009ae8:	88fa      	ldrh	r2, [r7, #6]
 8009aea:	8b3b      	ldrh	r3, [r7, #24]
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	88fb      	ldrh	r3, [r7, #6]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <pbuf_copy_partial+0xca>
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1c4      	bne.n	8009a90 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009b06:	8afb      	ldrh	r3, [r7, #22]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3720      	adds	r7, #32
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	08015970 	.word	0x08015970
 8009b14:	08015cb8 	.word	0x08015cb8
 8009b18:	080159d0 	.word	0x080159d0
 8009b1c:	08015cd8 	.word	0x08015cd8

08009b20 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	603a      	str	r2, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	8919      	ldrh	r1, [r3, #8]
 8009b34:	88ba      	ldrh	r2, [r7, #4]
 8009b36:	79fb      	ldrb	r3, [r7, #7]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff faa1 	bl	8009080 <pbuf_alloc>
 8009b3e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <pbuf_clone+0x2a>
    return NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	e011      	b.n	8009b6e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7ff fea3 	bl	8009898 <pbuf_copy>
 8009b52:	4603      	mov	r3, r0
 8009b54:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009b56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d006      	beq.n	8009b6c <pbuf_clone+0x4c>
 8009b5e:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <pbuf_clone+0x58>)
 8009b60:	f240 5224 	movw	r2, #1316	; 0x524
 8009b64:	4905      	ldr	r1, [pc, #20]	; (8009b7c <pbuf_clone+0x5c>)
 8009b66:	4806      	ldr	r0, [pc, #24]	; (8009b80 <pbuf_clone+0x60>)
 8009b68:	f00a f94e 	bl	8013e08 <iprintf>
  return q;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	08015970 	.word	0x08015970
 8009b7c:	08015de4 	.word	0x08015de4
 8009b80:	080159d0 	.word	0x080159d0

08009b84 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009b88:	f00a f956 	bl	8013e38 <rand>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	4b01      	ldr	r3, [pc, #4]	; (8009ba4 <tcp_init+0x20>)
 8009b9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009ba0:	bf00      	nop
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20000038 	.word	0x20000038

08009ba8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	7d1b      	ldrb	r3, [r3, #20]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d105      	bne.n	8009bc4 <tcp_free+0x1c>
 8009bb8:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <tcp_free+0x2c>)
 8009bba:	22d4      	movs	r2, #212	; 0xd4
 8009bbc:	4906      	ldr	r1, [pc, #24]	; (8009bd8 <tcp_free+0x30>)
 8009bbe:	4807      	ldr	r0, [pc, #28]	; (8009bdc <tcp_free+0x34>)
 8009bc0:	f00a f922 	bl	8013e08 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	f7fe febc 	bl	8008944 <memp_free>
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	08015e70 	.word	0x08015e70
 8009bd8:	08015ea0 	.word	0x08015ea0
 8009bdc:	08015eb4 	.word	0x08015eb4

08009be0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	7d1b      	ldrb	r3, [r3, #20]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d105      	bne.n	8009bfc <tcp_free_listen+0x1c>
 8009bf0:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <tcp_free_listen+0x2c>)
 8009bf2:	22df      	movs	r2, #223	; 0xdf
 8009bf4:	4906      	ldr	r1, [pc, #24]	; (8009c10 <tcp_free_listen+0x30>)
 8009bf6:	4807      	ldr	r0, [pc, #28]	; (8009c14 <tcp_free_listen+0x34>)
 8009bf8:	f00a f906 	bl	8013e08 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009bfc:	6879      	ldr	r1, [r7, #4]
 8009bfe:	2002      	movs	r0, #2
 8009c00:	f7fe fea0 	bl	8008944 <memp_free>
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	08015e70 	.word	0x08015e70
 8009c10:	08015edc 	.word	0x08015edc
 8009c14:	08015eb4 	.word	0x08015eb4

08009c18 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009c1c:	f000 fea2 	bl	800a964 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009c20:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <tcp_tmr+0x28>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	3301      	adds	r3, #1
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <tcp_tmr+0x28>)
 8009c2a:	701a      	strb	r2, [r3, #0]
 8009c2c:	4b04      	ldr	r3, [pc, #16]	; (8009c40 <tcp_tmr+0x28>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009c38:	f000 fb54 	bl	800a2e4 <tcp_slowtmr>
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	2000aed5 	.word	0x2000aed5

08009c44 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d105      	bne.n	8009c60 <tcp_remove_listener+0x1c>
 8009c54:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <tcp_remove_listener+0x48>)
 8009c56:	22ff      	movs	r2, #255	; 0xff
 8009c58:	490d      	ldr	r1, [pc, #52]	; (8009c90 <tcp_remove_listener+0x4c>)
 8009c5a:	480e      	ldr	r0, [pc, #56]	; (8009c94 <tcp_remove_listener+0x50>)
 8009c5c:	f00a f8d4 	bl	8013e08 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e00a      	b.n	8009c7c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d102      	bne.n	8009c76 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1f1      	bne.n	8009c66 <tcp_remove_listener+0x22>
    }
  }
}
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	08015e70 	.word	0x08015e70
 8009c90:	08015ef8 	.word	0x08015ef8
 8009c94:	08015eb4 	.word	0x08015eb4

08009c98 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <tcp_listen_closed+0x1c>
 8009ca6:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <tcp_listen_closed+0x60>)
 8009ca8:	f240 1211 	movw	r2, #273	; 0x111
 8009cac:	4913      	ldr	r1, [pc, #76]	; (8009cfc <tcp_listen_closed+0x64>)
 8009cae:	4814      	ldr	r0, [pc, #80]	; (8009d00 <tcp_listen_closed+0x68>)
 8009cb0:	f00a f8aa 	bl	8013e08 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	7d1b      	ldrb	r3, [r3, #20]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d006      	beq.n	8009cca <tcp_listen_closed+0x32>
 8009cbc:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <tcp_listen_closed+0x60>)
 8009cbe:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009cc2:	4910      	ldr	r1, [pc, #64]	; (8009d04 <tcp_listen_closed+0x6c>)
 8009cc4:	480e      	ldr	r0, [pc, #56]	; (8009d00 <tcp_listen_closed+0x68>)
 8009cc6:	f00a f89f 	bl	8013e08 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009cca:	2301      	movs	r3, #1
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	e00b      	b.n	8009ce8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009cd0:	4a0d      	ldr	r2, [pc, #52]	; (8009d08 <tcp_listen_closed+0x70>)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff ffb1 	bl	8009c44 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d9f0      	bls.n	8009cd0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009cee:	bf00      	nop
 8009cf0:	bf00      	nop
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	08015e70 	.word	0x08015e70
 8009cfc:	08015f20 	.word	0x08015f20
 8009d00:	08015eb4 	.word	0x08015eb4
 8009d04:	08015f2c 	.word	0x08015f2c
 8009d08:	0801a718 	.word	0x0801a718

08009d0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009d0c:	b5b0      	push	{r4, r5, r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af04      	add	r7, sp, #16
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d106      	bne.n	8009d2c <tcp_close_shutdown+0x20>
 8009d1e:	4b63      	ldr	r3, [pc, #396]	; (8009eac <tcp_close_shutdown+0x1a0>)
 8009d20:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009d24:	4962      	ldr	r1, [pc, #392]	; (8009eb0 <tcp_close_shutdown+0x1a4>)
 8009d26:	4863      	ldr	r0, [pc, #396]	; (8009eb4 <tcp_close_shutdown+0x1a8>)
 8009d28:	f00a f86e 	bl	8013e08 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d066      	beq.n	8009e00 <tcp_close_shutdown+0xf4>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7d1b      	ldrb	r3, [r3, #20]
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d003      	beq.n	8009d42 <tcp_close_shutdown+0x36>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	7d1b      	ldrb	r3, [r3, #20]
 8009d3e:	2b07      	cmp	r3, #7
 8009d40:	d15e      	bne.n	8009e00 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d104      	bne.n	8009d54 <tcp_close_shutdown+0x48>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d4e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009d52:	d055      	beq.n	8009e00 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	8b5b      	ldrh	r3, [r3, #26]
 8009d58:	f003 0310 	and.w	r3, r3, #16
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <tcp_close_shutdown+0x62>
 8009d60:	4b52      	ldr	r3, [pc, #328]	; (8009eac <tcp_close_shutdown+0x1a0>)
 8009d62:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009d66:	4954      	ldr	r1, [pc, #336]	; (8009eb8 <tcp_close_shutdown+0x1ac>)
 8009d68:	4852      	ldr	r0, [pc, #328]	; (8009eb4 <tcp_close_shutdown+0x1a8>)
 8009d6a:	f00a f84d 	bl	8013e08 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009d76:	687d      	ldr	r5, [r7, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	8ad2      	ldrh	r2, [r2, #22]
 8009d80:	6879      	ldr	r1, [r7, #4]
 8009d82:	8b09      	ldrh	r1, [r1, #24]
 8009d84:	9102      	str	r1, [sp, #8]
 8009d86:	9201      	str	r2, [sp, #4]
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	462b      	mov	r3, r5
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f004 fe91 	bl	800eab8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f001 f8c6 	bl	800af28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009d9c:	4b47      	ldr	r3, [pc, #284]	; (8009ebc <tcp_close_shutdown+0x1b0>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d105      	bne.n	8009db2 <tcp_close_shutdown+0xa6>
 8009da6:	4b45      	ldr	r3, [pc, #276]	; (8009ebc <tcp_close_shutdown+0x1b0>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	4a43      	ldr	r2, [pc, #268]	; (8009ebc <tcp_close_shutdown+0x1b0>)
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	e013      	b.n	8009dda <tcp_close_shutdown+0xce>
 8009db2:	4b42      	ldr	r3, [pc, #264]	; (8009ebc <tcp_close_shutdown+0x1b0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	e00c      	b.n	8009dd4 <tcp_close_shutdown+0xc8>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d104      	bne.n	8009dce <tcp_close_shutdown+0xc2>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	60da      	str	r2, [r3, #12]
 8009dcc:	e005      	b.n	8009dda <tcp_close_shutdown+0xce>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1ef      	bne.n	8009dba <tcp_close_shutdown+0xae>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	60da      	str	r2, [r3, #12]
 8009de0:	4b37      	ldr	r3, [pc, #220]	; (8009ec0 <tcp_close_shutdown+0x1b4>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009de6:	4b37      	ldr	r3, [pc, #220]	; (8009ec4 <tcp_close_shutdown+0x1b8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d102      	bne.n	8009df6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009df0:	f003 fd5e 	bl	800d8b0 <tcp_trigger_input_pcb_close>
 8009df4:	e002      	b.n	8009dfc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff fed6 	bl	8009ba8 <tcp_free>
      }
      return ERR_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	e050      	b.n	8009ea2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	7d1b      	ldrb	r3, [r3, #20]
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d03b      	beq.n	8009e80 <tcp_close_shutdown+0x174>
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	dc44      	bgt.n	8009e96 <tcp_close_shutdown+0x18a>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <tcp_close_shutdown+0x10a>
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d02a      	beq.n	8009e6a <tcp_close_shutdown+0x15e>
 8009e14:	e03f      	b.n	8009e96 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	8adb      	ldrh	r3, [r3, #22]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d021      	beq.n	8009e62 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ec8 <tcp_close_shutdown+0x1bc>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d105      	bne.n	8009e34 <tcp_close_shutdown+0x128>
 8009e28:	4b27      	ldr	r3, [pc, #156]	; (8009ec8 <tcp_close_shutdown+0x1bc>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	4a26      	ldr	r2, [pc, #152]	; (8009ec8 <tcp_close_shutdown+0x1bc>)
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	e013      	b.n	8009e5c <tcp_close_shutdown+0x150>
 8009e34:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <tcp_close_shutdown+0x1bc>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60bb      	str	r3, [r7, #8]
 8009e3a:	e00c      	b.n	8009e56 <tcp_close_shutdown+0x14a>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d104      	bne.n	8009e50 <tcp_close_shutdown+0x144>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68da      	ldr	r2, [r3, #12]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	60da      	str	r2, [r3, #12]
 8009e4e:	e005      	b.n	8009e5c <tcp_close_shutdown+0x150>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	60bb      	str	r3, [r7, #8]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1ef      	bne.n	8009e3c <tcp_close_shutdown+0x130>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff fea0 	bl	8009ba8 <tcp_free>
      break;
 8009e68:	e01a      	b.n	8009ea0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff ff14 	bl	8009c98 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009e70:	6879      	ldr	r1, [r7, #4]
 8009e72:	4816      	ldr	r0, [pc, #88]	; (8009ecc <tcp_close_shutdown+0x1c0>)
 8009e74:	f001 f8a8 	bl	800afc8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff feb1 	bl	8009be0 <tcp_free_listen>
      break;
 8009e7e:	e00f      	b.n	8009ea0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	480e      	ldr	r0, [pc, #56]	; (8009ebc <tcp_close_shutdown+0x1b0>)
 8009e84:	f001 f8a0 	bl	800afc8 <tcp_pcb_remove>
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <tcp_close_shutdown+0x1b4>)
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff fe8a 	bl	8009ba8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009e94:	e004      	b.n	8009ea0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f81a 	bl	8009ed0 <tcp_close_shutdown_fin>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	e000      	b.n	8009ea2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	08015e70 	.word	0x08015e70
 8009eb0:	08015f44 	.word	0x08015f44
 8009eb4:	08015eb4 	.word	0x08015eb4
 8009eb8:	08015f64 	.word	0x08015f64
 8009ebc:	2000aecc 	.word	0x2000aecc
 8009ec0:	2000aed4 	.word	0x2000aed4
 8009ec4:	2000af0c 	.word	0x2000af0c
 8009ec8:	2000aec4 	.word	0x2000aec4
 8009ecc:	2000aec8 	.word	0x2000aec8

08009ed0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <tcp_close_shutdown_fin+0x1c>
 8009ede:	4b2e      	ldr	r3, [pc, #184]	; (8009f98 <tcp_close_shutdown_fin+0xc8>)
 8009ee0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009ee4:	492d      	ldr	r1, [pc, #180]	; (8009f9c <tcp_close_shutdown_fin+0xcc>)
 8009ee6:	482e      	ldr	r0, [pc, #184]	; (8009fa0 <tcp_close_shutdown_fin+0xd0>)
 8009ee8:	f009 ff8e 	bl	8013e08 <iprintf>

  switch (pcb->state) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	7d1b      	ldrb	r3, [r3, #20]
 8009ef0:	2b07      	cmp	r3, #7
 8009ef2:	d020      	beq.n	8009f36 <tcp_close_shutdown_fin+0x66>
 8009ef4:	2b07      	cmp	r3, #7
 8009ef6:	dc2b      	bgt.n	8009f50 <tcp_close_shutdown_fin+0x80>
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d002      	beq.n	8009f02 <tcp_close_shutdown_fin+0x32>
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d00d      	beq.n	8009f1c <tcp_close_shutdown_fin+0x4c>
 8009f00:	e026      	b.n	8009f50 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f003 fee6 	bl	800dcd4 <tcp_send_fin>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11f      	bne.n	8009f54 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2205      	movs	r2, #5
 8009f18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f1a:	e01b      	b.n	8009f54 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f003 fed9 	bl	800dcd4 <tcp_send_fin>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d114      	bne.n	8009f58 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2205      	movs	r2, #5
 8009f32:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f34:	e010      	b.n	8009f58 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f003 fecc 	bl	800dcd4 <tcp_send_fin>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d109      	bne.n	8009f5c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2209      	movs	r2, #9
 8009f4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009f4e:	e005      	b.n	8009f5c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	e01c      	b.n	8009f8e <tcp_close_shutdown_fin+0xbe>
      break;
 8009f54:	bf00      	nop
 8009f56:	e002      	b.n	8009f5e <tcp_close_shutdown_fin+0x8e>
      break;
 8009f58:	bf00      	nop
 8009f5a:	e000      	b.n	8009f5e <tcp_close_shutdown_fin+0x8e>
      break;
 8009f5c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d103      	bne.n	8009f6e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f003 fff2 	bl	800df50 <tcp_output>
 8009f6c:	e00d      	b.n	8009f8a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d108      	bne.n	8009f8a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	8b5b      	ldrh	r3, [r3, #26]
 8009f7c:	f043 0308 	orr.w	r3, r3, #8
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e001      	b.n	8009f8e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	08015e70 	.word	0x08015e70
 8009f9c:	08015f20 	.word	0x08015f20
 8009fa0:	08015eb4 	.word	0x08015eb4

08009fa4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d109      	bne.n	8009fc6 <tcp_close+0x22>
 8009fb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <tcp_close+0x4c>)
 8009fb4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009fb8:	490e      	ldr	r1, [pc, #56]	; (8009ff4 <tcp_close+0x50>)
 8009fba:	480f      	ldr	r0, [pc, #60]	; (8009ff8 <tcp_close+0x54>)
 8009fbc:	f009 ff24 	bl	8013e08 <iprintf>
 8009fc0:	f06f 030f 	mvn.w	r3, #15
 8009fc4:	e00f      	b.n	8009fe6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	7d1b      	ldrb	r3, [r3, #20]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d006      	beq.n	8009fdc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	8b5b      	ldrh	r3, [r3, #26]
 8009fd2:	f043 0310 	orr.w	r3, r3, #16
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009fdc:	2101      	movs	r1, #1
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff fe94 	bl	8009d0c <tcp_close_shutdown>
 8009fe4:	4603      	mov	r3, r0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	08015e70 	.word	0x08015e70
 8009ff4:	08015f80 	.word	0x08015f80
 8009ff8:	08015eb4 	.word	0x08015eb4

08009ffc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08e      	sub	sp, #56	; 0x38
 800a000:	af04      	add	r7, sp, #16
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d107      	bne.n	800a01c <tcp_abandon+0x20>
 800a00c:	4b52      	ldr	r3, [pc, #328]	; (800a158 <tcp_abandon+0x15c>)
 800a00e:	f240 223d 	movw	r2, #573	; 0x23d
 800a012:	4952      	ldr	r1, [pc, #328]	; (800a15c <tcp_abandon+0x160>)
 800a014:	4852      	ldr	r0, [pc, #328]	; (800a160 <tcp_abandon+0x164>)
 800a016:	f009 fef7 	bl	8013e08 <iprintf>
 800a01a:	e099      	b.n	800a150 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	7d1b      	ldrb	r3, [r3, #20]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d106      	bne.n	800a032 <tcp_abandon+0x36>
 800a024:	4b4c      	ldr	r3, [pc, #304]	; (800a158 <tcp_abandon+0x15c>)
 800a026:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a02a:	494e      	ldr	r1, [pc, #312]	; (800a164 <tcp_abandon+0x168>)
 800a02c:	484c      	ldr	r0, [pc, #304]	; (800a160 <tcp_abandon+0x164>)
 800a02e:	f009 feeb 	bl	8013e08 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	7d1b      	ldrb	r3, [r3, #20]
 800a036:	2b0a      	cmp	r3, #10
 800a038:	d107      	bne.n	800a04a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	484a      	ldr	r0, [pc, #296]	; (800a168 <tcp_abandon+0x16c>)
 800a03e:	f000 ffc3 	bl	800afc8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff fdb0 	bl	8009ba8 <tcp_free>
 800a048:	e082      	b.n	800a150 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a056:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a064:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	7d1b      	ldrb	r3, [r3, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d126      	bne.n	800a0c2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	8adb      	ldrh	r3, [r3, #22]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d02e      	beq.n	800a0da <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a07c:	4b3b      	ldr	r3, [pc, #236]	; (800a16c <tcp_abandon+0x170>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d105      	bne.n	800a092 <tcp_abandon+0x96>
 800a086:	4b39      	ldr	r3, [pc, #228]	; (800a16c <tcp_abandon+0x170>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	4a37      	ldr	r2, [pc, #220]	; (800a16c <tcp_abandon+0x170>)
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	e013      	b.n	800a0ba <tcp_abandon+0xbe>
 800a092:	4b36      	ldr	r3, [pc, #216]	; (800a16c <tcp_abandon+0x170>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	61fb      	str	r3, [r7, #28]
 800a098:	e00c      	b.n	800a0b4 <tcp_abandon+0xb8>
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d104      	bne.n	800a0ae <tcp_abandon+0xb2>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	60da      	str	r2, [r3, #12]
 800a0ac:	e005      	b.n	800a0ba <tcp_abandon+0xbe>
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	61fb      	str	r3, [r7, #28]
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1ef      	bne.n	800a09a <tcp_abandon+0x9e>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	60da      	str	r2, [r3, #12]
 800a0c0:	e00b      	b.n	800a0da <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	8adb      	ldrh	r3, [r3, #22]
 800a0ca:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	4828      	ldr	r0, [pc, #160]	; (800a170 <tcp_abandon+0x174>)
 800a0d0:	f000 ff7a 	bl	800afc8 <tcp_pcb_remove>
 800a0d4:	4b27      	ldr	r3, [pc, #156]	; (800a174 <tcp_abandon+0x178>)
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 fd1c 	bl	800ab24 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fd13 	bl	800ab24 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a102:	2b00      	cmp	r3, #0
 800a104:	d004      	beq.n	800a110 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 fd0a 	bl	800ab24 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00e      	beq.n	800a134 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3304      	adds	r3, #4
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	8b12      	ldrh	r2, [r2, #24]
 800a120:	9202      	str	r2, [sp, #8]
 800a122:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a124:	9201      	str	r2, [sp, #4]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	460b      	mov	r3, r1
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	69b9      	ldr	r1, [r7, #24]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f004 fcc2 	bl	800eab8 <tcp_rst>
    }
    last_state = pcb->state;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	7d1b      	ldrb	r3, [r3, #20]
 800a138:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff fd34 	bl	8009ba8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <tcp_abandon+0x154>
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f06f 010c 	mvn.w	r1, #12
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	4798      	blx	r3
  }
}
 800a150:	3728      	adds	r7, #40	; 0x28
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	08015e70 	.word	0x08015e70
 800a15c:	08015fb4 	.word	0x08015fb4
 800a160:	08015eb4 	.word	0x08015eb4
 800a164:	08015fd0 	.word	0x08015fd0
 800a168:	2000aed0 	.word	0x2000aed0
 800a16c:	2000aec4 	.word	0x2000aec4
 800a170:	2000aecc 	.word	0x2000aecc
 800a174:	2000aed4 	.word	0x2000aed4

0800a178 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a180:	2101      	movs	r1, #1
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff ff3a 	bl	8009ffc <tcp_abandon>
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d106      	bne.n	800a1ac <tcp_update_rcv_ann_wnd+0x1c>
 800a19e:	4b25      	ldr	r3, [pc, #148]	; (800a234 <tcp_update_rcv_ann_wnd+0xa4>)
 800a1a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a1a4:	4924      	ldr	r1, [pc, #144]	; (800a238 <tcp_update_rcv_ann_wnd+0xa8>)
 800a1a6:	4825      	ldr	r0, [pc, #148]	; (800a23c <tcp_update_rcv_ann_wnd+0xac>)
 800a1a8:	f009 fe2e 	bl	8013e08 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a1b4:	4413      	add	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a1c0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a1c4:	bf28      	it	cs
 800a1c6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a1ca:	b292      	uxth	r2, r2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	db08      	blt.n	800a1e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	e020      	b.n	800a22a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dd03      	ble.n	800a1fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1fc:	e014      	b.n	800a228 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a210:	d306      	bcc.n	800a220 <tcp_update_rcv_ann_wnd+0x90>
 800a212:	4b08      	ldr	r3, [pc, #32]	; (800a234 <tcp_update_rcv_ann_wnd+0xa4>)
 800a214:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a218:	4909      	ldr	r1, [pc, #36]	; (800a240 <tcp_update_rcv_ann_wnd+0xb0>)
 800a21a:	4808      	ldr	r0, [pc, #32]	; (800a23c <tcp_update_rcv_ann_wnd+0xac>)
 800a21c:	f009 fdf4 	bl	8013e08 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a228:	2300      	movs	r3, #0
  }
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	08015e70 	.word	0x08015e70
 800a238:	080160cc 	.word	0x080160cc
 800a23c:	08015eb4 	.word	0x08015eb4
 800a240:	080160f0 	.word	0x080160f0

0800a244 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d107      	bne.n	800a266 <tcp_recved+0x22>
 800a256:	4b1f      	ldr	r3, [pc, #124]	; (800a2d4 <tcp_recved+0x90>)
 800a258:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a25c:	491e      	ldr	r1, [pc, #120]	; (800a2d8 <tcp_recved+0x94>)
 800a25e:	481f      	ldr	r0, [pc, #124]	; (800a2dc <tcp_recved+0x98>)
 800a260:	f009 fdd2 	bl	8013e08 <iprintf>
 800a264:	e032      	b.n	800a2cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7d1b      	ldrb	r3, [r3, #20]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d106      	bne.n	800a27c <tcp_recved+0x38>
 800a26e:	4b19      	ldr	r3, [pc, #100]	; (800a2d4 <tcp_recved+0x90>)
 800a270:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a274:	491a      	ldr	r1, [pc, #104]	; (800a2e0 <tcp_recved+0x9c>)
 800a276:	4819      	ldr	r0, [pc, #100]	; (800a2dc <tcp_recved+0x98>)
 800a278:	f009 fdc6 	bl	8013e08 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a280:	887b      	ldrh	r3, [r7, #2]
 800a282:	4413      	add	r3, r2
 800a284:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a286:	89fb      	ldrh	r3, [r7, #14]
 800a288:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a28c:	d804      	bhi.n	800a298 <tcp_recved+0x54>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a292:	89fa      	ldrh	r2, [r7, #14]
 800a294:	429a      	cmp	r2, r3
 800a296:	d204      	bcs.n	800a2a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a29e:	851a      	strh	r2, [r3, #40]	; 0x28
 800a2a0:	e002      	b.n	800a2a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	89fa      	ldrh	r2, [r7, #14]
 800a2a6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff ff71 	bl	800a190 <tcp_update_rcv_ann_wnd>
 800a2ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a2b6:	d309      	bcc.n	800a2cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	8b5b      	ldrh	r3, [r3, #26]
 800a2bc:	f043 0302 	orr.w	r3, r3, #2
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f003 fe42 	bl	800df50 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	08015e70 	.word	0x08015e70
 800a2d8:	0801610c 	.word	0x0801610c
 800a2dc:	08015eb4 	.word	0x08015eb4
 800a2e0:	08016124 	.word	0x08016124

0800a2e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a2e4:	b5b0      	push	{r4, r5, r7, lr}
 800a2e6:	b090      	sub	sp, #64	; 0x40
 800a2e8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a2f0:	4b94      	ldr	r3, [pc, #592]	; (800a544 <tcp_slowtmr+0x260>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	4a93      	ldr	r2, [pc, #588]	; (800a544 <tcp_slowtmr+0x260>)
 800a2f8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a2fa:	4b93      	ldr	r3, [pc, #588]	; (800a548 <tcp_slowtmr+0x264>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	3301      	adds	r3, #1
 800a300:	b2da      	uxtb	r2, r3
 800a302:	4b91      	ldr	r3, [pc, #580]	; (800a548 <tcp_slowtmr+0x264>)
 800a304:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a306:	2300      	movs	r3, #0
 800a308:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a30a:	4b90      	ldr	r3, [pc, #576]	; (800a54c <tcp_slowtmr+0x268>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a310:	e29d      	b.n	800a84e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	7d1b      	ldrb	r3, [r3, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d106      	bne.n	800a328 <tcp_slowtmr+0x44>
 800a31a:	4b8d      	ldr	r3, [pc, #564]	; (800a550 <tcp_slowtmr+0x26c>)
 800a31c:	f240 42be 	movw	r2, #1214	; 0x4be
 800a320:	498c      	ldr	r1, [pc, #560]	; (800a554 <tcp_slowtmr+0x270>)
 800a322:	488d      	ldr	r0, [pc, #564]	; (800a558 <tcp_slowtmr+0x274>)
 800a324:	f009 fd70 	bl	8013e08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32a:	7d1b      	ldrb	r3, [r3, #20]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d106      	bne.n	800a33e <tcp_slowtmr+0x5a>
 800a330:	4b87      	ldr	r3, [pc, #540]	; (800a550 <tcp_slowtmr+0x26c>)
 800a332:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a336:	4989      	ldr	r1, [pc, #548]	; (800a55c <tcp_slowtmr+0x278>)
 800a338:	4887      	ldr	r0, [pc, #540]	; (800a558 <tcp_slowtmr+0x274>)
 800a33a:	f009 fd65 	bl	8013e08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	7d1b      	ldrb	r3, [r3, #20]
 800a342:	2b0a      	cmp	r3, #10
 800a344:	d106      	bne.n	800a354 <tcp_slowtmr+0x70>
 800a346:	4b82      	ldr	r3, [pc, #520]	; (800a550 <tcp_slowtmr+0x26c>)
 800a348:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a34c:	4984      	ldr	r1, [pc, #528]	; (800a560 <tcp_slowtmr+0x27c>)
 800a34e:	4882      	ldr	r0, [pc, #520]	; (800a558 <tcp_slowtmr+0x274>)
 800a350:	f009 fd5a 	bl	8013e08 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	7f9a      	ldrb	r2, [r3, #30]
 800a358:	4b7b      	ldr	r3, [pc, #492]	; (800a548 <tcp_slowtmr+0x264>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d105      	bne.n	800a36c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a36a:	e270      	b.n	800a84e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a36c:	4b76      	ldr	r3, [pc, #472]	; (800a548 <tcp_slowtmr+0x264>)
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	7d1b      	ldrb	r3, [r3, #20]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d10a      	bne.n	800a39e <tcp_slowtmr+0xba>
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a38e:	2b05      	cmp	r3, #5
 800a390:	d905      	bls.n	800a39e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a396:	3301      	adds	r3, #1
 800a398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a39c:	e11e      	b.n	800a5dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3a4:	2b0b      	cmp	r3, #11
 800a3a6:	d905      	bls.n	800a3b4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3b2:	e113      	b.n	800a5dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d075      	beq.n	800a4aa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d006      	beq.n	800a3d4 <tcp_slowtmr+0xf0>
 800a3c6:	4b62      	ldr	r3, [pc, #392]	; (800a550 <tcp_slowtmr+0x26c>)
 800a3c8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a3cc:	4965      	ldr	r1, [pc, #404]	; (800a564 <tcp_slowtmr+0x280>)
 800a3ce:	4862      	ldr	r0, [pc, #392]	; (800a558 <tcp_slowtmr+0x274>)
 800a3d0:	f009 fd1a 	bl	8013e08 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d106      	bne.n	800a3ea <tcp_slowtmr+0x106>
 800a3dc:	4b5c      	ldr	r3, [pc, #368]	; (800a550 <tcp_slowtmr+0x26c>)
 800a3de:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a3e2:	4961      	ldr	r1, [pc, #388]	; (800a568 <tcp_slowtmr+0x284>)
 800a3e4:	485c      	ldr	r0, [pc, #368]	; (800a558 <tcp_slowtmr+0x274>)
 800a3e6:	f009 fd0f 	bl	8013e08 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a3f0:	2b0b      	cmp	r3, #11
 800a3f2:	d905      	bls.n	800a400 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3fe:	e0ed      	b.n	800a5dc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a406:	3b01      	subs	r3, #1
 800a408:	4a58      	ldr	r2, [pc, #352]	; (800a56c <tcp_slowtmr+0x288>)
 800a40a:	5cd3      	ldrb	r3, [r2, r3]
 800a40c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a410:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a414:	7c7a      	ldrb	r2, [r7, #17]
 800a416:	429a      	cmp	r2, r3
 800a418:	d907      	bls.n	800a42a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a420:	3301      	adds	r3, #1
 800a422:	b2da      	uxtb	r2, r3
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a430:	7c7a      	ldrb	r2, [r7, #17]
 800a432:	429a      	cmp	r2, r3
 800a434:	f200 80d2 	bhi.w	800a5dc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a438:	2301      	movs	r3, #1
 800a43a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a442:	2b00      	cmp	r3, #0
 800a444:	d108      	bne.n	800a458 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a448:	f004 fc2a 	bl	800eca0 <tcp_zero_window_probe>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d014      	beq.n	800a47c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a452:	2300      	movs	r3, #0
 800a454:	623b      	str	r3, [r7, #32]
 800a456:	e011      	b.n	800a47c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a45e:	4619      	mov	r1, r3
 800a460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a462:	f003 faef 	bl	800da44 <tcp_split_unsent_seg>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d107      	bne.n	800a47c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a46c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a46e:	f003 fd6f 	bl	800df50 <tcp_output>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 80ac 	beq.w	800a5dc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a492:	2b06      	cmp	r3, #6
 800a494:	f200 80a2 	bhi.w	800a5dc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a49e:	3301      	adds	r3, #1
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a4a8:	e098      	b.n	800a5dc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	db0f      	blt.n	800a4d4 <tcp_slowtmr+0x1f0>
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d008      	beq.n	800a4d4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	b21a      	sxth	r2, r3
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	db7b      	blt.n	800a5dc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a4e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4e6:	f004 f825 	bl	800e534 <tcp_rexmit_rto_prepare>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d007      	beq.n	800a500 <tcp_slowtmr+0x21c>
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d171      	bne.n	800a5dc <tcp_slowtmr+0x2f8>
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d06d      	beq.n	800a5dc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	7d1b      	ldrb	r3, [r3, #20]
 800a504:	2b02      	cmp	r3, #2
 800a506:	d03a      	beq.n	800a57e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a50e:	2b0c      	cmp	r3, #12
 800a510:	bf28      	it	cs
 800a512:	230c      	movcs	r3, #12
 800a514:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a518:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a51c:	10db      	asrs	r3, r3, #3
 800a51e:	b21b      	sxth	r3, r3
 800a520:	461a      	mov	r2, r3
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a528:	4413      	add	r3, r2
 800a52a:	7efa      	ldrb	r2, [r7, #27]
 800a52c:	4910      	ldr	r1, [pc, #64]	; (800a570 <tcp_slowtmr+0x28c>)
 800a52e:	5c8a      	ldrb	r2, [r1, r2]
 800a530:	4093      	lsls	r3, r2
 800a532:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a53a:	4293      	cmp	r3, r2
 800a53c:	dc1a      	bgt.n	800a574 <tcp_slowtmr+0x290>
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	b21a      	sxth	r2, r3
 800a542:	e019      	b.n	800a578 <tcp_slowtmr+0x294>
 800a544:	2000aec0 	.word	0x2000aec0
 800a548:	2000aed6 	.word	0x2000aed6
 800a54c:	2000aecc 	.word	0x2000aecc
 800a550:	08015e70 	.word	0x08015e70
 800a554:	080161b4 	.word	0x080161b4
 800a558:	08015eb4 	.word	0x08015eb4
 800a55c:	080161e0 	.word	0x080161e0
 800a560:	0801620c 	.word	0x0801620c
 800a564:	0801623c 	.word	0x0801623c
 800a568:	08016270 	.word	0x08016270
 800a56c:	0801a710 	.word	0x0801a710
 800a570:	0801a700 	.word	0x0801a700
 800a574:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	2200      	movs	r2, #0
 800a582:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a590:	4293      	cmp	r3, r2
 800a592:	bf28      	it	cs
 800a594:	4613      	movcs	r3, r2
 800a596:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a598:	8a7b      	ldrh	r3, [r7, #18]
 800a59a:	085b      	lsrs	r3, r3, #1
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d206      	bcs.n	800a5c4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a5d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5d8:	f004 f81c 	bl	800e614 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	7d1b      	ldrb	r3, [r3, #20]
 800a5e0:	2b06      	cmp	r3, #6
 800a5e2:	d111      	bne.n	800a608 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	8b5b      	ldrh	r3, [r3, #26]
 800a5e8:	f003 0310 	and.w	r3, r3, #16
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00b      	beq.n	800a608 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a5f0:	4b9c      	ldr	r3, [pc, #624]	; (800a864 <tcp_slowtmr+0x580>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	2b28      	cmp	r3, #40	; 0x28
 800a5fc:	d904      	bls.n	800a608 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a602:	3301      	adds	r3, #1
 800a604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	7a5b      	ldrb	r3, [r3, #9]
 800a60c:	f003 0308 	and.w	r3, r3, #8
 800a610:	2b00      	cmp	r3, #0
 800a612:	d04a      	beq.n	800a6aa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a618:	2b04      	cmp	r3, #4
 800a61a:	d003      	beq.n	800a624 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a620:	2b07      	cmp	r3, #7
 800a622:	d142      	bne.n	800a6aa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a624:	4b8f      	ldr	r3, [pc, #572]	; (800a864 <tcp_slowtmr+0x580>)
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a634:	4b8c      	ldr	r3, [pc, #560]	; (800a868 <tcp_slowtmr+0x584>)
 800a636:	440b      	add	r3, r1
 800a638:	498c      	ldr	r1, [pc, #560]	; (800a86c <tcp_slowtmr+0x588>)
 800a63a:	fba1 1303 	umull	r1, r3, r1, r3
 800a63e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a640:	429a      	cmp	r2, r3
 800a642:	d90a      	bls.n	800a65a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a648:	3301      	adds	r3, #1
 800a64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a64e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a652:	3301      	adds	r3, #1
 800a654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a658:	e027      	b.n	800a6aa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a65a:	4b82      	ldr	r3, [pc, #520]	; (800a864 <tcp_slowtmr+0x580>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a670:	4618      	mov	r0, r3
 800a672:	4b7f      	ldr	r3, [pc, #508]	; (800a870 <tcp_slowtmr+0x58c>)
 800a674:	fb00 f303 	mul.w	r3, r0, r3
 800a678:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a67a:	497c      	ldr	r1, [pc, #496]	; (800a86c <tcp_slowtmr+0x588>)
 800a67c:	fba1 1303 	umull	r1, r3, r1, r3
 800a680:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a682:	429a      	cmp	r2, r3
 800a684:	d911      	bls.n	800a6aa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a688:	f004 faca 	bl	800ec20 <tcp_keepalive>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a692:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a696:	2b00      	cmp	r3, #0
 800a698:	d107      	bne.n	800a6aa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d011      	beq.n	800a6d6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a6b2:	4b6c      	ldr	r3, [pc, #432]	; (800a864 <tcp_slowtmr+0x580>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	1ad2      	subs	r2, r2, r3
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	440b      	add	r3, r1
 800a6ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d302      	bcc.n	800a6d6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a6d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6d2:	f000 fddd 	bl	800b290 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d8:	7d1b      	ldrb	r3, [r3, #20]
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d10b      	bne.n	800a6f6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6de:	4b61      	ldr	r3, [pc, #388]	; (800a864 <tcp_slowtmr+0x580>)
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b28      	cmp	r3, #40	; 0x28
 800a6ea:	d904      	bls.n	800a6f6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f8:	7d1b      	ldrb	r3, [r3, #20]
 800a6fa:	2b09      	cmp	r3, #9
 800a6fc:	d10b      	bne.n	800a716 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a6fe:	4b59      	ldr	r3, [pc, #356]	; (800a864 <tcp_slowtmr+0x580>)
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	2bf0      	cmp	r3, #240	; 0xf0
 800a70a:	d904      	bls.n	800a716 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a710:	3301      	adds	r3, #1
 800a712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d060      	beq.n	800a7e0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a724:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a728:	f000 fbfe 	bl	800af28 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d010      	beq.n	800a754 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a732:	4b50      	ldr	r3, [pc, #320]	; (800a874 <tcp_slowtmr+0x590>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a738:	429a      	cmp	r2, r3
 800a73a:	d106      	bne.n	800a74a <tcp_slowtmr+0x466>
 800a73c:	4b4e      	ldr	r3, [pc, #312]	; (800a878 <tcp_slowtmr+0x594>)
 800a73e:	f240 526d 	movw	r2, #1389	; 0x56d
 800a742:	494e      	ldr	r1, [pc, #312]	; (800a87c <tcp_slowtmr+0x598>)
 800a744:	484e      	ldr	r0, [pc, #312]	; (800a880 <tcp_slowtmr+0x59c>)
 800a746:	f009 fb5f 	bl	8013e08 <iprintf>
        prev->next = pcb->next;
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	68da      	ldr	r2, [r3, #12]
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	60da      	str	r2, [r3, #12]
 800a752:	e00f      	b.n	800a774 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a754:	4b47      	ldr	r3, [pc, #284]	; (800a874 <tcp_slowtmr+0x590>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d006      	beq.n	800a76c <tcp_slowtmr+0x488>
 800a75e:	4b46      	ldr	r3, [pc, #280]	; (800a878 <tcp_slowtmr+0x594>)
 800a760:	f240 5271 	movw	r2, #1393	; 0x571
 800a764:	4947      	ldr	r1, [pc, #284]	; (800a884 <tcp_slowtmr+0x5a0>)
 800a766:	4846      	ldr	r0, [pc, #280]	; (800a880 <tcp_slowtmr+0x59c>)
 800a768:	f009 fb4e 	bl	8013e08 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	4a40      	ldr	r2, [pc, #256]	; (800a874 <tcp_slowtmr+0x590>)
 800a772:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d013      	beq.n	800a7a4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a782:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a784:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	3304      	adds	r3, #4
 800a78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a78c:	8ad2      	ldrh	r2, [r2, #22]
 800a78e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a790:	8b09      	ldrh	r1, [r1, #24]
 800a792:	9102      	str	r1, [sp, #8]
 800a794:	9201      	str	r2, [sp, #4]
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	462b      	mov	r3, r5
 800a79a:	4622      	mov	r2, r4
 800a79c:	4601      	mov	r1, r0
 800a79e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7a0:	f004 f98a 	bl	800eab8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	7d1b      	ldrb	r3, [r3, #20]
 800a7ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a7ba:	6838      	ldr	r0, [r7, #0]
 800a7bc:	f7ff f9f4 	bl	8009ba8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a7c0:	4b31      	ldr	r3, [pc, #196]	; (800a888 <tcp_slowtmr+0x5a4>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <tcp_slowtmr+0x4f2>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f06f 010c 	mvn.w	r1, #12
 800a7d2:	68b8      	ldr	r0, [r7, #8]
 800a7d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a7d6:	4b2c      	ldr	r3, [pc, #176]	; (800a888 <tcp_slowtmr+0x5a4>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d037      	beq.n	800a84e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a7de:	e592      	b.n	800a306 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ec:	7f1b      	ldrb	r3, [r3, #28]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	7f1a      	ldrb	r2, [r3, #28]
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	7f5b      	ldrb	r3, [r3, #29]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d325      	bcc.n	800a84e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	2200      	movs	r2, #0
 800a806:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a808:	4b1f      	ldr	r3, [pc, #124]	; (800a888 <tcp_slowtmr+0x5a4>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00b      	beq.n	800a830 <tcp_slowtmr+0x54c>
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a820:	6912      	ldr	r2, [r2, #16]
 800a822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
 800a828:	4603      	mov	r3, r0
 800a82a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a82e:	e002      	b.n	800a836 <tcp_slowtmr+0x552>
 800a830:	2300      	movs	r3, #0
 800a832:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a836:	4b14      	ldr	r3, [pc, #80]	; (800a888 <tcp_slowtmr+0x5a4>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d000      	beq.n	800a840 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a83e:	e562      	b.n	800a306 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a840:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a84a:	f003 fb81 	bl	800df50 <tcp_output>
  while (pcb != NULL) {
 800a84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a850:	2b00      	cmp	r3, #0
 800a852:	f47f ad5e 	bne.w	800a312 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a85a:	4b0c      	ldr	r3, [pc, #48]	; (800a88c <tcp_slowtmr+0x5a8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a860:	e069      	b.n	800a936 <tcp_slowtmr+0x652>
 800a862:	bf00      	nop
 800a864:	2000aec0 	.word	0x2000aec0
 800a868:	000a4cb8 	.word	0x000a4cb8
 800a86c:	10624dd3 	.word	0x10624dd3
 800a870:	000124f8 	.word	0x000124f8
 800a874:	2000aecc 	.word	0x2000aecc
 800a878:	08015e70 	.word	0x08015e70
 800a87c:	080162a8 	.word	0x080162a8
 800a880:	08015eb4 	.word	0x08015eb4
 800a884:	080162d4 	.word	0x080162d4
 800a888:	2000aed4 	.word	0x2000aed4
 800a88c:	2000aed0 	.word	0x2000aed0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	7d1b      	ldrb	r3, [r3, #20]
 800a894:	2b0a      	cmp	r3, #10
 800a896:	d006      	beq.n	800a8a6 <tcp_slowtmr+0x5c2>
 800a898:	4b2b      	ldr	r3, [pc, #172]	; (800a948 <tcp_slowtmr+0x664>)
 800a89a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a89e:	492b      	ldr	r1, [pc, #172]	; (800a94c <tcp_slowtmr+0x668>)
 800a8a0:	482b      	ldr	r0, [pc, #172]	; (800a950 <tcp_slowtmr+0x66c>)
 800a8a2:	f009 fab1 	bl	8013e08 <iprintf>
    pcb_remove = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a8ac:	4b29      	ldr	r3, [pc, #164]	; (800a954 <tcp_slowtmr+0x670>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	2bf0      	cmp	r3, #240	; 0xf0
 800a8b8:	d904      	bls.n	800a8c4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8be:	3301      	adds	r3, #1
 800a8c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d02f      	beq.n	800a92c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a8cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8ce:	f000 fb2b 	bl	800af28 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d010      	beq.n	800a8fa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a8d8:	4b1f      	ldr	r3, [pc, #124]	; (800a958 <tcp_slowtmr+0x674>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d106      	bne.n	800a8f0 <tcp_slowtmr+0x60c>
 800a8e2:	4b19      	ldr	r3, [pc, #100]	; (800a948 <tcp_slowtmr+0x664>)
 800a8e4:	f240 52af 	movw	r2, #1455	; 0x5af
 800a8e8:	491c      	ldr	r1, [pc, #112]	; (800a95c <tcp_slowtmr+0x678>)
 800a8ea:	4819      	ldr	r0, [pc, #100]	; (800a950 <tcp_slowtmr+0x66c>)
 800a8ec:	f009 fa8c 	bl	8013e08 <iprintf>
        prev->next = pcb->next;
 800a8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	60da      	str	r2, [r3, #12]
 800a8f8:	e00f      	b.n	800a91a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a8fa:	4b17      	ldr	r3, [pc, #92]	; (800a958 <tcp_slowtmr+0x674>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a900:	429a      	cmp	r2, r3
 800a902:	d006      	beq.n	800a912 <tcp_slowtmr+0x62e>
 800a904:	4b10      	ldr	r3, [pc, #64]	; (800a948 <tcp_slowtmr+0x664>)
 800a906:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a90a:	4915      	ldr	r1, [pc, #84]	; (800a960 <tcp_slowtmr+0x67c>)
 800a90c:	4810      	ldr	r0, [pc, #64]	; (800a950 <tcp_slowtmr+0x66c>)
 800a90e:	f009 fa7b 	bl	8013e08 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4a10      	ldr	r2, [pc, #64]	; (800a958 <tcp_slowtmr+0x674>)
 800a918:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a924:	69f8      	ldr	r0, [r7, #28]
 800a926:	f7ff f93f 	bl	8009ba8 <tcp_free>
 800a92a:	e004      	b.n	800a936 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1a9      	bne.n	800a890 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a93c:	bf00      	nop
 800a93e:	bf00      	nop
 800a940:	3730      	adds	r7, #48	; 0x30
 800a942:	46bd      	mov	sp, r7
 800a944:	bdb0      	pop	{r4, r5, r7, pc}
 800a946:	bf00      	nop
 800a948:	08015e70 	.word	0x08015e70
 800a94c:	08016300 	.word	0x08016300
 800a950:	08015eb4 	.word	0x08015eb4
 800a954:	2000aec0 	.word	0x2000aec0
 800a958:	2000aed0 	.word	0x2000aed0
 800a95c:	08016330 	.word	0x08016330
 800a960:	08016358 	.word	0x08016358

0800a964 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a96a:	4b2d      	ldr	r3, [pc, #180]	; (800aa20 <tcp_fasttmr+0xbc>)
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	3301      	adds	r3, #1
 800a970:	b2da      	uxtb	r2, r3
 800a972:	4b2b      	ldr	r3, [pc, #172]	; (800aa20 <tcp_fasttmr+0xbc>)
 800a974:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a976:	4b2b      	ldr	r3, [pc, #172]	; (800aa24 <tcp_fasttmr+0xc0>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a97c:	e048      	b.n	800aa10 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	7f9a      	ldrb	r2, [r3, #30]
 800a982:	4b27      	ldr	r3, [pc, #156]	; (800aa20 <tcp_fasttmr+0xbc>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d03f      	beq.n	800aa0a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a98a:	4b25      	ldr	r3, [pc, #148]	; (800aa20 <tcp_fasttmr+0xbc>)
 800a98c:	781a      	ldrb	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	8b5b      	ldrh	r3, [r3, #26]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d010      	beq.n	800a9c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	8b5b      	ldrh	r3, [r3, #26]
 800a9a2:	f043 0302 	orr.w	r3, r3, #2
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f003 facf 	bl	800df50 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	8b5b      	ldrh	r3, [r3, #26]
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	8b5b      	ldrh	r3, [r3, #26]
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d009      	beq.n	800a9e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8b5b      	ldrh	r3, [r3, #26]
 800a9d0:	f023 0308 	bic.w	r3, r3, #8
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff fa78 	bl	8009ed0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a9ee:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <tcp_fasttmr+0xc4>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 f819 	bl	800aa2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a9fa:	4b0b      	ldr	r3, [pc, #44]	; (800aa28 <tcp_fasttmr+0xc4>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d000      	beq.n	800aa04 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800aa02:	e7b8      	b.n	800a976 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	607b      	str	r3, [r7, #4]
 800aa08:	e002      	b.n	800aa10 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1b3      	bne.n	800a97e <tcp_fasttmr+0x1a>
    }
  }
}
 800aa16:	bf00      	nop
 800aa18:	bf00      	nop
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	2000aed6 	.word	0x2000aed6
 800aa24:	2000aecc 	.word	0x2000aecc
 800aa28:	2000aed4 	.word	0x2000aed4

0800aa2c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800aa2c:	b590      	push	{r4, r7, lr}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d109      	bne.n	800aa4e <tcp_process_refused_data+0x22>
 800aa3a:	4b37      	ldr	r3, [pc, #220]	; (800ab18 <tcp_process_refused_data+0xec>)
 800aa3c:	f240 6209 	movw	r2, #1545	; 0x609
 800aa40:	4936      	ldr	r1, [pc, #216]	; (800ab1c <tcp_process_refused_data+0xf0>)
 800aa42:	4837      	ldr	r0, [pc, #220]	; (800ab20 <tcp_process_refused_data+0xf4>)
 800aa44:	f009 f9e0 	bl	8013e08 <iprintf>
 800aa48:	f06f 030f 	mvn.w	r3, #15
 800aa4c:	e060      	b.n	800ab10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa52:	7b5b      	ldrb	r3, [r3, #13]
 800aa54:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa5a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00b      	beq.n	800aa84 <tcp_process_refused_data+0x58>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6918      	ldr	r0, [r3, #16]
 800aa76:	2300      	movs	r3, #0
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	47a0      	blx	r4
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]
 800aa82:	e007      	b.n	800aa94 <tcp_process_refused_data+0x68>
 800aa84:	2300      	movs	r3, #0
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	6879      	ldr	r1, [r7, #4]
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	f000 f8a4 	bl	800abd8 <tcp_recv_null>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800aa94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d12a      	bne.n	800aaf2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	f003 0320 	and.w	r3, r3, #32
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d033      	beq.n	800ab0e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aaae:	d005      	beq.n	800aabc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aab4:	3301      	adds	r3, #1
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00b      	beq.n	800aade <tcp_process_refused_data+0xb2>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6918      	ldr	r0, [r3, #16]
 800aad0:	2300      	movs	r3, #0
 800aad2:	2200      	movs	r2, #0
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	47a0      	blx	r4
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
 800aadc:	e001      	b.n	800aae2 <tcp_process_refused_data+0xb6>
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800aae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae6:	f113 0f0d 	cmn.w	r3, #13
 800aaea:	d110      	bne.n	800ab0e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800aaec:	f06f 030c 	mvn.w	r3, #12
 800aaf0:	e00e      	b.n	800ab10 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800aaf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaf6:	f113 0f0d 	cmn.w	r3, #13
 800aafa:	d102      	bne.n	800ab02 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800aafc:	f06f 030c 	mvn.w	r3, #12
 800ab00:	e006      	b.n	800ab10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ab08:	f06f 0304 	mvn.w	r3, #4
 800ab0c:	e000      	b.n	800ab10 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd90      	pop	{r4, r7, pc}
 800ab18:	08015e70 	.word	0x08015e70
 800ab1c:	08016380 	.word	0x08016380
 800ab20:	08015eb4 	.word	0x08015eb4

0800ab24 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ab2c:	e007      	b.n	800ab3e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f80a 	bl	800ab4e <tcp_seg_free>
    seg = next;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1f4      	bne.n	800ab2e <tcp_segs_free+0xa>
  }
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b082      	sub	sp, #8
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00c      	beq.n	800ab76 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d004      	beq.n	800ab6e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe fd6d 	bl	8009648 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	2003      	movs	r0, #3
 800ab72:	f7fd fee7 	bl	8008944 <memp_free>
  }
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <tcp_seg_copy+0x1c>
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <tcp_seg_copy+0x4c>)
 800ab90:	f240 6282 	movw	r2, #1666	; 0x682
 800ab94:	490e      	ldr	r1, [pc, #56]	; (800abd0 <tcp_seg_copy+0x50>)
 800ab96:	480f      	ldr	r0, [pc, #60]	; (800abd4 <tcp_seg_copy+0x54>)
 800ab98:	f009 f936 	bl	8013e08 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ab9c:	2003      	movs	r0, #3
 800ab9e:	f7fd fe61 	bl	8008864 <memp_malloc>
 800aba2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <tcp_seg_copy+0x2e>
    return NULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	e00a      	b.n	800abc4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800abae:	2210      	movs	r2, #16
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f009 f8f8 	bl	8013da8 <memcpy>
  pbuf_ref(cseg->p);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fe fde3 	bl	8009788 <pbuf_ref>
  return cseg;
 800abc2:	68fb      	ldr	r3, [r7, #12]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	08015e70 	.word	0x08015e70
 800abd0:	080163c4 	.word	0x080163c4
 800abd4:	08015eb4 	.word	0x08015eb4

0800abd8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d109      	bne.n	800ac00 <tcp_recv_null+0x28>
 800abec:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <tcp_recv_null+0x60>)
 800abee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800abf2:	4912      	ldr	r1, [pc, #72]	; (800ac3c <tcp_recv_null+0x64>)
 800abf4:	4812      	ldr	r0, [pc, #72]	; (800ac40 <tcp_recv_null+0x68>)
 800abf6:	f009 f907 	bl	8013e08 <iprintf>
 800abfa:	f06f 030f 	mvn.w	r3, #15
 800abfe:	e016      	b.n	800ac2e <tcp_recv_null+0x56>

  if (p != NULL) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d009      	beq.n	800ac1a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	891b      	ldrh	r3, [r3, #8]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	68b8      	ldr	r0, [r7, #8]
 800ac0e:	f7ff fb19 	bl	800a244 <tcp_recved>
    pbuf_free(p);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7fe fd18 	bl	8009648 <pbuf_free>
 800ac18:	e008      	b.n	800ac2c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ac1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ac22:	68b8      	ldr	r0, [r7, #8]
 800ac24:	f7ff f9be 	bl	8009fa4 <tcp_close>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	e000      	b.n	800ac2e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	08015e70 	.word	0x08015e70
 800ac3c:	080163e0 	.word	0x080163e0
 800ac40:	08015eb4 	.word	0x08015eb4

0800ac44 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ac4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	db01      	blt.n	800ac5a <tcp_kill_prio+0x16>
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	e000      	b.n	800ac5c <tcp_kill_prio+0x18>
 800ac5a:	237f      	movs	r3, #127	; 0x7f
 800ac5c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ac5e:	7afb      	ldrb	r3, [r7, #11]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d034      	beq.n	800acce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ac64:	7afb      	ldrb	r3, [r7, #11]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac72:	4b19      	ldr	r3, [pc, #100]	; (800acd8 <tcp_kill_prio+0x94>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	e01f      	b.n	800acba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	7d5b      	ldrb	r3, [r3, #21]
 800ac7e:	7afa      	ldrb	r2, [r7, #11]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d80c      	bhi.n	800ac9e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ac88:	7afa      	ldrb	r2, [r7, #11]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d112      	bne.n	800acb4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ac8e:	4b13      	ldr	r3, [pc, #76]	; (800acdc <tcp_kill_prio+0x98>)
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d80a      	bhi.n	800acb4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ac9e:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <tcp_kill_prio+0x98>)
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	7d5b      	ldrb	r3, [r3, #21]
 800acb2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	617b      	str	r3, [r7, #20]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1dc      	bne.n	800ac7a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d004      	beq.n	800acd0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800acc6:	6938      	ldr	r0, [r7, #16]
 800acc8:	f7ff fa56 	bl	800a178 <tcp_abort>
 800accc:	e000      	b.n	800acd0 <tcp_kill_prio+0x8c>
    return;
 800acce:	bf00      	nop
  }
}
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	2000aecc 	.word	0x2000aecc
 800acdc:	2000aec0 	.word	0x2000aec0

0800ace0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	2b08      	cmp	r3, #8
 800acee:	d009      	beq.n	800ad04 <tcp_kill_state+0x24>
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	2b09      	cmp	r3, #9
 800acf4:	d006      	beq.n	800ad04 <tcp_kill_state+0x24>
 800acf6:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <tcp_kill_state+0x80>)
 800acf8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800acfc:	4919      	ldr	r1, [pc, #100]	; (800ad64 <tcp_kill_state+0x84>)
 800acfe:	481a      	ldr	r0, [pc, #104]	; (800ad68 <tcp_kill_state+0x88>)
 800ad00:	f009 f882 	bl	8013e08 <iprintf>

  inactivity = 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad0c:	4b17      	ldr	r3, [pc, #92]	; (800ad6c <tcp_kill_state+0x8c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	617b      	str	r3, [r7, #20]
 800ad12:	e017      	b.n	800ad44 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	7d1b      	ldrb	r3, [r3, #20]
 800ad18:	79fa      	ldrb	r2, [r7, #7]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d10f      	bne.n	800ad3e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ad1e:	4b14      	ldr	r3, [pc, #80]	; (800ad70 <tcp_kill_state+0x90>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d807      	bhi.n	800ad3e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ad2e:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <tcp_kill_state+0x90>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	617b      	str	r3, [r7, #20]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1e4      	bne.n	800ad14 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ad50:	2100      	movs	r1, #0
 800ad52:	6938      	ldr	r0, [r7, #16]
 800ad54:	f7ff f952 	bl	8009ffc <tcp_abandon>
  }
}
 800ad58:	bf00      	nop
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	08015e70 	.word	0x08015e70
 800ad64:	080163fc 	.word	0x080163fc
 800ad68:	08015eb4 	.word	0x08015eb4
 800ad6c:	2000aecc 	.word	0x2000aecc
 800ad70:	2000aec0 	.word	0x2000aec0

0800ad74 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad82:	4b12      	ldr	r3, [pc, #72]	; (800adcc <tcp_kill_timewait+0x58>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	e012      	b.n	800adb0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ad8a:	4b11      	ldr	r3, [pc, #68]	; (800add0 <tcp_kill_timewait+0x5c>)
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d807      	bhi.n	800adaa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ad9a:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <tcp_kill_timewait+0x5c>)
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e9      	bne.n	800ad8a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800adbc:	68b8      	ldr	r0, [r7, #8]
 800adbe:	f7ff f9db 	bl	800a178 <tcp_abort>
  }
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	2000aed0 	.word	0x2000aed0
 800add0:	2000aec0 	.word	0x2000aec0

0800add4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800adda:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <tcp_handle_closepend+0x48>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ade0:	e014      	b.n	800ae0c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	8b5b      	ldrh	r3, [r3, #26]
 800adec:	f003 0308 	and.w	r3, r3, #8
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d009      	beq.n	800ae08 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	8b5b      	ldrh	r3, [r3, #26]
 800adf8:	f023 0308 	bic.w	r3, r3, #8
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff f864 	bl	8009ed0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e7      	bne.n	800ade2 <tcp_handle_closepend+0xe>
  }
}
 800ae12:	bf00      	nop
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	2000aecc 	.word	0x2000aecc

0800ae20 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae2a:	2001      	movs	r0, #1
 800ae2c:	f7fd fd1a 	bl	8008864 <memp_malloc>
 800ae30:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d126      	bne.n	800ae86 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ae38:	f7ff ffcc 	bl	800add4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ae3c:	f7ff ff9a 	bl	800ad74 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae40:	2001      	movs	r0, #1
 800ae42:	f7fd fd0f 	bl	8008864 <memp_malloc>
 800ae46:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d11b      	bne.n	800ae86 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ae4e:	2009      	movs	r0, #9
 800ae50:	f7ff ff46 	bl	800ace0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae54:	2001      	movs	r0, #1
 800ae56:	f7fd fd05 	bl	8008864 <memp_malloc>
 800ae5a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d111      	bne.n	800ae86 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ae62:	2008      	movs	r0, #8
 800ae64:	f7ff ff3c 	bl	800ace0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae68:	2001      	movs	r0, #1
 800ae6a:	f7fd fcfb 	bl	8008864 <memp_malloc>
 800ae6e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d107      	bne.n	800ae86 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fee3 	bl	800ac44 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae7e:	2001      	movs	r0, #1
 800ae80:	f7fd fcf0 	bl	8008864 <memp_malloc>
 800ae84:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d03f      	beq.n	800af0c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ae8c:	229c      	movs	r2, #156	; 0x9c
 800ae8e:	2100      	movs	r1, #0
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f008 ffb1 	bl	8013df8 <memset>
    pcb->prio = prio;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	79fa      	ldrb	r2, [r7, #7]
 800ae9a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aea2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aeac:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	22ff      	movs	r2, #255	; 0xff
 800aeba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f44f 7206 	mov.w	r2, #536	; 0x218
 800aec2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2206      	movs	r2, #6
 800aec8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2206      	movs	r2, #6
 800aed0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aed8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2201      	movs	r2, #1
 800aede:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800aee2:	4b0d      	ldr	r3, [pc, #52]	; (800af18 <tcp_alloc+0xf8>)
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800aeea:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <tcp_alloc+0xfc>)
 800aeec:	781a      	ldrb	r2, [r3, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aef8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4a08      	ldr	r2, [pc, #32]	; (800af20 <tcp_alloc+0x100>)
 800af00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4a07      	ldr	r2, [pc, #28]	; (800af24 <tcp_alloc+0x104>)
 800af08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800af0c:	68fb      	ldr	r3, [r7, #12]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	2000aec0 	.word	0x2000aec0
 800af1c:	2000aed6 	.word	0x2000aed6
 800af20:	0800abd9 	.word	0x0800abd9
 800af24:	006ddd00 	.word	0x006ddd00

0800af28 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d107      	bne.n	800af46 <tcp_pcb_purge+0x1e>
 800af36:	4b21      	ldr	r3, [pc, #132]	; (800afbc <tcp_pcb_purge+0x94>)
 800af38:	f640 0251 	movw	r2, #2129	; 0x851
 800af3c:	4920      	ldr	r1, [pc, #128]	; (800afc0 <tcp_pcb_purge+0x98>)
 800af3e:	4821      	ldr	r0, [pc, #132]	; (800afc4 <tcp_pcb_purge+0x9c>)
 800af40:	f008 ff62 	bl	8013e08 <iprintf>
 800af44:	e037      	b.n	800afb6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	7d1b      	ldrb	r3, [r3, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d033      	beq.n	800afb6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800af52:	2b0a      	cmp	r3, #10
 800af54:	d02f      	beq.n	800afb6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d02b      	beq.n	800afb6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af62:	2b00      	cmp	r3, #0
 800af64:	d007      	beq.n	800af76 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe fb6c 	bl	8009648 <pbuf_free>
      pcb->refused_data = NULL;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f986 	bl	800b290 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af8a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff fdc7 	bl	800ab24 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff fdc2 	bl	800ab24 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	66da      	str	r2, [r3, #108]	; 0x6c
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	08015e70 	.word	0x08015e70
 800afc0:	080164bc 	.word	0x080164bc
 800afc4:	08015eb4 	.word	0x08015eb4

0800afc8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d106      	bne.n	800afe6 <tcp_pcb_remove+0x1e>
 800afd8:	4b3e      	ldr	r3, [pc, #248]	; (800b0d4 <tcp_pcb_remove+0x10c>)
 800afda:	f640 0283 	movw	r2, #2179	; 0x883
 800afde:	493e      	ldr	r1, [pc, #248]	; (800b0d8 <tcp_pcb_remove+0x110>)
 800afe0:	483e      	ldr	r0, [pc, #248]	; (800b0dc <tcp_pcb_remove+0x114>)
 800afe2:	f008 ff11 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d106      	bne.n	800affa <tcp_pcb_remove+0x32>
 800afec:	4b39      	ldr	r3, [pc, #228]	; (800b0d4 <tcp_pcb_remove+0x10c>)
 800afee:	f640 0284 	movw	r2, #2180	; 0x884
 800aff2:	493b      	ldr	r1, [pc, #236]	; (800b0e0 <tcp_pcb_remove+0x118>)
 800aff4:	4839      	ldr	r0, [pc, #228]	; (800b0dc <tcp_pcb_remove+0x114>)
 800aff6:	f008 ff07 	bl	8013e08 <iprintf>

  TCP_RMV(pcblist, pcb);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d105      	bne.n	800b010 <tcp_pcb_remove+0x48>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68da      	ldr	r2, [r3, #12]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	e013      	b.n	800b038 <tcp_pcb_remove+0x70>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	e00c      	b.n	800b032 <tcp_pcb_remove+0x6a>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d104      	bne.n	800b02c <tcp_pcb_remove+0x64>
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68da      	ldr	r2, [r3, #12]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	60da      	str	r2, [r3, #12]
 800b02a:	e005      	b.n	800b038 <tcp_pcb_remove+0x70>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1ef      	bne.n	800b018 <tcp_pcb_remove+0x50>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	2200      	movs	r2, #0
 800b03c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b03e:	6838      	ldr	r0, [r7, #0]
 800b040:	f7ff ff72 	bl	800af28 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	7d1b      	ldrb	r3, [r3, #20]
 800b048:	2b0a      	cmp	r3, #10
 800b04a:	d013      	beq.n	800b074 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b050:	2b01      	cmp	r3, #1
 800b052:	d00f      	beq.n	800b074 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	8b5b      	ldrh	r3, [r3, #26]
 800b058:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d009      	beq.n	800b074 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	8b5b      	ldrh	r3, [r3, #26]
 800b064:	f043 0302 	orr.w	r3, r3, #2
 800b068:	b29a      	uxth	r2, r3
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b06e:	6838      	ldr	r0, [r7, #0]
 800b070:	f002 ff6e 	bl	800df50 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	7d1b      	ldrb	r3, [r3, #20]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d020      	beq.n	800b0be <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d006      	beq.n	800b092 <tcp_pcb_remove+0xca>
 800b084:	4b13      	ldr	r3, [pc, #76]	; (800b0d4 <tcp_pcb_remove+0x10c>)
 800b086:	f640 0293 	movw	r2, #2195	; 0x893
 800b08a:	4916      	ldr	r1, [pc, #88]	; (800b0e4 <tcp_pcb_remove+0x11c>)
 800b08c:	4813      	ldr	r0, [pc, #76]	; (800b0dc <tcp_pcb_remove+0x114>)
 800b08e:	f008 febb 	bl	8013e08 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b096:	2b00      	cmp	r3, #0
 800b098:	d006      	beq.n	800b0a8 <tcp_pcb_remove+0xe0>
 800b09a:	4b0e      	ldr	r3, [pc, #56]	; (800b0d4 <tcp_pcb_remove+0x10c>)
 800b09c:	f640 0294 	movw	r2, #2196	; 0x894
 800b0a0:	4911      	ldr	r1, [pc, #68]	; (800b0e8 <tcp_pcb_remove+0x120>)
 800b0a2:	480e      	ldr	r0, [pc, #56]	; (800b0dc <tcp_pcb_remove+0x114>)
 800b0a4:	f008 feb0 	bl	8013e08 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d006      	beq.n	800b0be <tcp_pcb_remove+0xf6>
 800b0b0:	4b08      	ldr	r3, [pc, #32]	; (800b0d4 <tcp_pcb_remove+0x10c>)
 800b0b2:	f640 0296 	movw	r2, #2198	; 0x896
 800b0b6:	490d      	ldr	r1, [pc, #52]	; (800b0ec <tcp_pcb_remove+0x124>)
 800b0b8:	4808      	ldr	r0, [pc, #32]	; (800b0dc <tcp_pcb_remove+0x114>)
 800b0ba:	f008 fea5 	bl	8013e08 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	08015e70 	.word	0x08015e70
 800b0d8:	080164d8 	.word	0x080164d8
 800b0dc:	08015eb4 	.word	0x08015eb4
 800b0e0:	080164f4 	.word	0x080164f4
 800b0e4:	08016514 	.word	0x08016514
 800b0e8:	0801652c 	.word	0x0801652c
 800b0ec:	08016548 	.word	0x08016548

0800b0f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <tcp_next_iss+0x1c>
 800b0fe:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <tcp_next_iss+0x38>)
 800b100:	f640 02af 	movw	r2, #2223	; 0x8af
 800b104:	4909      	ldr	r1, [pc, #36]	; (800b12c <tcp_next_iss+0x3c>)
 800b106:	480a      	ldr	r0, [pc, #40]	; (800b130 <tcp_next_iss+0x40>)
 800b108:	f008 fe7e 	bl	8013e08 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b10c:	4b09      	ldr	r3, [pc, #36]	; (800b134 <tcp_next_iss+0x44>)
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	4b09      	ldr	r3, [pc, #36]	; (800b138 <tcp_next_iss+0x48>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4413      	add	r3, r2
 800b116:	4a07      	ldr	r2, [pc, #28]	; (800b134 <tcp_next_iss+0x44>)
 800b118:	6013      	str	r3, [r2, #0]
  return iss;
 800b11a:	4b06      	ldr	r3, [pc, #24]	; (800b134 <tcp_next_iss+0x44>)
 800b11c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	08015e70 	.word	0x08015e70
 800b12c:	08016560 	.word	0x08016560
 800b130:	08015eb4 	.word	0x08015eb4
 800b134:	2000003c 	.word	0x2000003c
 800b138:	2000aec0 	.word	0x2000aec0

0800b13c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d106      	bne.n	800b15e <tcp_eff_send_mss_netif+0x22>
 800b150:	4b14      	ldr	r3, [pc, #80]	; (800b1a4 <tcp_eff_send_mss_netif+0x68>)
 800b152:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b156:	4914      	ldr	r1, [pc, #80]	; (800b1a8 <tcp_eff_send_mss_netif+0x6c>)
 800b158:	4814      	ldr	r0, [pc, #80]	; (800b1ac <tcp_eff_send_mss_netif+0x70>)
 800b15a:	f008 fe55 	bl	8013e08 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b164:	89fb      	ldrh	r3, [r7, #14]
 800b166:	e019      	b.n	800b19c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b16c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b16e:	8afb      	ldrh	r3, [r7, #22]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d012      	beq.n	800b19a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b174:	2328      	movs	r3, #40	; 0x28
 800b176:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b178:	8afa      	ldrh	r2, [r7, #22]
 800b17a:	8abb      	ldrh	r3, [r7, #20]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d904      	bls.n	800b18a <tcp_eff_send_mss_netif+0x4e>
 800b180:	8afa      	ldrh	r2, [r7, #22]
 800b182:	8abb      	ldrh	r3, [r7, #20]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	b29b      	uxth	r3, r3
 800b188:	e000      	b.n	800b18c <tcp_eff_send_mss_netif+0x50>
 800b18a:	2300      	movs	r3, #0
 800b18c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b18e:	8a7a      	ldrh	r2, [r7, #18]
 800b190:	89fb      	ldrh	r3, [r7, #14]
 800b192:	4293      	cmp	r3, r2
 800b194:	bf28      	it	cs
 800b196:	4613      	movcs	r3, r2
 800b198:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b19a:	89fb      	ldrh	r3, [r7, #14]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	08015e70 	.word	0x08015e70
 800b1a8:	0801657c 	.word	0x0801657c
 800b1ac:	08015eb4 	.word	0x08015eb4

0800b1b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d119      	bne.n	800b1f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b1c4:	4b10      	ldr	r3, [pc, #64]	; (800b208 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b1c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b1ca:	4910      	ldr	r1, [pc, #64]	; (800b20c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b1cc:	4810      	ldr	r0, [pc, #64]	; (800b210 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b1ce:	f008 fe1b 	bl	8013e08 <iprintf>

  while (pcb != NULL) {
 800b1d2:	e011      	b.n	800b1f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d108      	bne.n	800b1f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7fe ffc6 	bl	800a178 <tcp_abort>
      pcb = next;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	e002      	b.n	800b1f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1ea      	bne.n	800b1d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b1fe:	bf00      	nop
 800b200:	bf00      	nop
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	08015e70 	.word	0x08015e70
 800b20c:	080165a4 	.word	0x080165a4
 800b210:	08015eb4 	.word	0x08015eb4

0800b214 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d02a      	beq.n	800b27a <tcp_netif_ip_addr_changed+0x66>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d026      	beq.n	800b27a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b22c:	4b15      	ldr	r3, [pc, #84]	; (800b284 <tcp_netif_ip_addr_changed+0x70>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7ff ffbc 	bl	800b1b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b238:	4b13      	ldr	r3, [pc, #76]	; (800b288 <tcp_netif_ip_addr_changed+0x74>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7ff ffb6 	bl	800b1b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d017      	beq.n	800b27a <tcp_netif_ip_addr_changed+0x66>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d013      	beq.n	800b27a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b252:	4b0e      	ldr	r3, [pc, #56]	; (800b28c <tcp_netif_ip_addr_changed+0x78>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	e00c      	b.n	800b274 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	429a      	cmp	r2, r3
 800b264:	d103      	bne.n	800b26e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1ef      	bne.n	800b25a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b27a:	bf00      	nop
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	2000aecc 	.word	0x2000aecc
 800b288:	2000aec4 	.word	0x2000aec4
 800b28c:	2000aec8 	.word	0x2000aec8

0800b290 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d007      	beq.n	800b2b0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff fc3d 	bl	800ab24 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b2b8:	b590      	push	{r4, r7, lr}
 800b2ba:	b08d      	sub	sp, #52	; 0x34
 800b2bc:	af04      	add	r7, sp, #16
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d105      	bne.n	800b2d4 <tcp_input+0x1c>
 800b2c8:	4b9b      	ldr	r3, [pc, #620]	; (800b538 <tcp_input+0x280>)
 800b2ca:	2283      	movs	r2, #131	; 0x83
 800b2cc:	499b      	ldr	r1, [pc, #620]	; (800b53c <tcp_input+0x284>)
 800b2ce:	489c      	ldr	r0, [pc, #624]	; (800b540 <tcp_input+0x288>)
 800b2d0:	f008 fd9a 	bl	8013e08 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	4a9a      	ldr	r2, [pc, #616]	; (800b544 <tcp_input+0x28c>)
 800b2da:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	895b      	ldrh	r3, [r3, #10]
 800b2e0:	2b13      	cmp	r3, #19
 800b2e2:	f240 83d1 	bls.w	800ba88 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b2e6:	4b98      	ldr	r3, [pc, #608]	; (800b548 <tcp_input+0x290>)
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	4a97      	ldr	r2, [pc, #604]	; (800b548 <tcp_input+0x290>)
 800b2ec:	6812      	ldr	r2, [r2, #0]
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f007 fdcf 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f040 83c7 	bne.w	800ba8c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b2fe:	4b92      	ldr	r3, [pc, #584]	; (800b548 <tcp_input+0x290>)
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b306:	2be0      	cmp	r3, #224	; 0xe0
 800b308:	f000 83c0 	beq.w	800ba8c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b30c:	4b8d      	ldr	r3, [pc, #564]	; (800b544 <tcp_input+0x28c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	899b      	ldrh	r3, [r3, #12]
 800b312:	b29b      	uxth	r3, r3
 800b314:	4618      	mov	r0, r3
 800b316:	f7fc fe2d 	bl	8007f74 <lwip_htons>
 800b31a:	4603      	mov	r3, r0
 800b31c:	0b1b      	lsrs	r3, r3, #12
 800b31e:	b29b      	uxth	r3, r3
 800b320:	b2db      	uxtb	r3, r3
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b326:	7cbb      	ldrb	r3, [r7, #18]
 800b328:	2b13      	cmp	r3, #19
 800b32a:	f240 83b1 	bls.w	800ba90 <tcp_input+0x7d8>
 800b32e:	7cbb      	ldrb	r3, [r7, #18]
 800b330:	b29a      	uxth	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	891b      	ldrh	r3, [r3, #8]
 800b336:	429a      	cmp	r2, r3
 800b338:	f200 83aa 	bhi.w	800ba90 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b33c:	7cbb      	ldrb	r3, [r7, #18]
 800b33e:	b29b      	uxth	r3, r3
 800b340:	3b14      	subs	r3, #20
 800b342:	b29a      	uxth	r2, r3
 800b344:	4b81      	ldr	r3, [pc, #516]	; (800b54c <tcp_input+0x294>)
 800b346:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b348:	4b81      	ldr	r3, [pc, #516]	; (800b550 <tcp_input+0x298>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	895a      	ldrh	r2, [r3, #10]
 800b352:	7cbb      	ldrb	r3, [r7, #18]
 800b354:	b29b      	uxth	r3, r3
 800b356:	429a      	cmp	r2, r3
 800b358:	d309      	bcc.n	800b36e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b35a:	4b7c      	ldr	r3, [pc, #496]	; (800b54c <tcp_input+0x294>)
 800b35c:	881a      	ldrh	r2, [r3, #0]
 800b35e:	4b7d      	ldr	r3, [pc, #500]	; (800b554 <tcp_input+0x29c>)
 800b360:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b362:	7cbb      	ldrb	r3, [r7, #18]
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7fe f8e8 	bl	800953c <pbuf_remove_header>
 800b36c:	e04e      	b.n	800b40c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d105      	bne.n	800b382 <tcp_input+0xca>
 800b376:	4b70      	ldr	r3, [pc, #448]	; (800b538 <tcp_input+0x280>)
 800b378:	22c2      	movs	r2, #194	; 0xc2
 800b37a:	4977      	ldr	r1, [pc, #476]	; (800b558 <tcp_input+0x2a0>)
 800b37c:	4870      	ldr	r0, [pc, #448]	; (800b540 <tcp_input+0x288>)
 800b37e:	f008 fd43 	bl	8013e08 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b382:	2114      	movs	r1, #20
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7fe f8d9 	bl	800953c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	895a      	ldrh	r2, [r3, #10]
 800b38e:	4b71      	ldr	r3, [pc, #452]	; (800b554 <tcp_input+0x29c>)
 800b390:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b392:	4b6e      	ldr	r3, [pc, #440]	; (800b54c <tcp_input+0x294>)
 800b394:	881a      	ldrh	r2, [r3, #0]
 800b396:	4b6f      	ldr	r3, [pc, #444]	; (800b554 <tcp_input+0x29c>)
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b39e:	4b6d      	ldr	r3, [pc, #436]	; (800b554 <tcp_input+0x29c>)
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7fe f8c9 	bl	800953c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	895b      	ldrh	r3, [r3, #10]
 800b3b0:	8a3a      	ldrh	r2, [r7, #16]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	f200 836e 	bhi.w	800ba94 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	4a64      	ldr	r2, [pc, #400]	; (800b550 <tcp_input+0x298>)
 800b3c0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	8a3a      	ldrh	r2, [r7, #16]
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe f8b6 	bl	800953c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	891a      	ldrh	r2, [r3, #8]
 800b3d4:	8a3b      	ldrh	r3, [r7, #16]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	895b      	ldrh	r3, [r3, #10]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d005      	beq.n	800b3f2 <tcp_input+0x13a>
 800b3e6:	4b54      	ldr	r3, [pc, #336]	; (800b538 <tcp_input+0x280>)
 800b3e8:	22df      	movs	r2, #223	; 0xdf
 800b3ea:	495c      	ldr	r1, [pc, #368]	; (800b55c <tcp_input+0x2a4>)
 800b3ec:	4854      	ldr	r0, [pc, #336]	; (800b540 <tcp_input+0x288>)
 800b3ee:	f008 fd0b 	bl	8013e08 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	891a      	ldrh	r2, [r3, #8]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	891b      	ldrh	r3, [r3, #8]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d005      	beq.n	800b40c <tcp_input+0x154>
 800b400:	4b4d      	ldr	r3, [pc, #308]	; (800b538 <tcp_input+0x280>)
 800b402:	22e0      	movs	r2, #224	; 0xe0
 800b404:	4956      	ldr	r1, [pc, #344]	; (800b560 <tcp_input+0x2a8>)
 800b406:	484e      	ldr	r0, [pc, #312]	; (800b540 <tcp_input+0x288>)
 800b408:	f008 fcfe 	bl	8013e08 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b40c:	4b4d      	ldr	r3, [pc, #308]	; (800b544 <tcp_input+0x28c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	b29b      	uxth	r3, r3
 800b414:	4a4b      	ldr	r2, [pc, #300]	; (800b544 <tcp_input+0x28c>)
 800b416:	6814      	ldr	r4, [r2, #0]
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fc fdab 	bl	8007f74 <lwip_htons>
 800b41e:	4603      	mov	r3, r0
 800b420:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b422:	4b48      	ldr	r3, [pc, #288]	; (800b544 <tcp_input+0x28c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	885b      	ldrh	r3, [r3, #2]
 800b428:	b29b      	uxth	r3, r3
 800b42a:	4a46      	ldr	r2, [pc, #280]	; (800b544 <tcp_input+0x28c>)
 800b42c:	6814      	ldr	r4, [r2, #0]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fc fda0 	bl	8007f74 <lwip_htons>
 800b434:	4603      	mov	r3, r0
 800b436:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b438:	4b42      	ldr	r3, [pc, #264]	; (800b544 <tcp_input+0x28c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	4a41      	ldr	r2, [pc, #260]	; (800b544 <tcp_input+0x28c>)
 800b440:	6814      	ldr	r4, [r2, #0]
 800b442:	4618      	mov	r0, r3
 800b444:	f7fc fdab 	bl	8007f9e <lwip_htonl>
 800b448:	4603      	mov	r3, r0
 800b44a:	6063      	str	r3, [r4, #4]
 800b44c:	6863      	ldr	r3, [r4, #4]
 800b44e:	4a45      	ldr	r2, [pc, #276]	; (800b564 <tcp_input+0x2ac>)
 800b450:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b452:	4b3c      	ldr	r3, [pc, #240]	; (800b544 <tcp_input+0x28c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	4a3a      	ldr	r2, [pc, #232]	; (800b544 <tcp_input+0x28c>)
 800b45a:	6814      	ldr	r4, [r2, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fc fd9e 	bl	8007f9e <lwip_htonl>
 800b462:	4603      	mov	r3, r0
 800b464:	60a3      	str	r3, [r4, #8]
 800b466:	68a3      	ldr	r3, [r4, #8]
 800b468:	4a3f      	ldr	r2, [pc, #252]	; (800b568 <tcp_input+0x2b0>)
 800b46a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b46c:	4b35      	ldr	r3, [pc, #212]	; (800b544 <tcp_input+0x28c>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	89db      	ldrh	r3, [r3, #14]
 800b472:	b29b      	uxth	r3, r3
 800b474:	4a33      	ldr	r2, [pc, #204]	; (800b544 <tcp_input+0x28c>)
 800b476:	6814      	ldr	r4, [r2, #0]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fc fd7b 	bl	8007f74 <lwip_htons>
 800b47e:	4603      	mov	r3, r0
 800b480:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b482:	4b30      	ldr	r3, [pc, #192]	; (800b544 <tcp_input+0x28c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	899b      	ldrh	r3, [r3, #12]
 800b488:	b29b      	uxth	r3, r3
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fc fd72 	bl	8007f74 <lwip_htons>
 800b490:	4603      	mov	r3, r0
 800b492:	b2db      	uxtb	r3, r3
 800b494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	4b34      	ldr	r3, [pc, #208]	; (800b56c <tcp_input+0x2b4>)
 800b49c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	891a      	ldrh	r2, [r3, #8]
 800b4a2:	4b33      	ldr	r3, [pc, #204]	; (800b570 <tcp_input+0x2b8>)
 800b4a4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b4a6:	4b31      	ldr	r3, [pc, #196]	; (800b56c <tcp_input+0x2b4>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	f003 0303 	and.w	r3, r3, #3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00c      	beq.n	800b4cc <tcp_input+0x214>
    tcplen++;
 800b4b2:	4b2f      	ldr	r3, [pc, #188]	; (800b570 <tcp_input+0x2b8>)
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	4b2d      	ldr	r3, [pc, #180]	; (800b570 <tcp_input+0x2b8>)
 800b4bc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	891a      	ldrh	r2, [r3, #8]
 800b4c2:	4b2b      	ldr	r3, [pc, #172]	; (800b570 <tcp_input+0x2b8>)
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	f200 82e6 	bhi.w	800ba98 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4d0:	4b28      	ldr	r3, [pc, #160]	; (800b574 <tcp_input+0x2bc>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	61fb      	str	r3, [r7, #28]
 800b4d6:	e09d      	b.n	800b614 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	7d1b      	ldrb	r3, [r3, #20]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d105      	bne.n	800b4ec <tcp_input+0x234>
 800b4e0:	4b15      	ldr	r3, [pc, #84]	; (800b538 <tcp_input+0x280>)
 800b4e2:	22fb      	movs	r2, #251	; 0xfb
 800b4e4:	4924      	ldr	r1, [pc, #144]	; (800b578 <tcp_input+0x2c0>)
 800b4e6:	4816      	ldr	r0, [pc, #88]	; (800b540 <tcp_input+0x288>)
 800b4e8:	f008 fc8e 	bl	8013e08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	7d1b      	ldrb	r3, [r3, #20]
 800b4f0:	2b0a      	cmp	r3, #10
 800b4f2:	d105      	bne.n	800b500 <tcp_input+0x248>
 800b4f4:	4b10      	ldr	r3, [pc, #64]	; (800b538 <tcp_input+0x280>)
 800b4f6:	22fc      	movs	r2, #252	; 0xfc
 800b4f8:	4920      	ldr	r1, [pc, #128]	; (800b57c <tcp_input+0x2c4>)
 800b4fa:	4811      	ldr	r0, [pc, #68]	; (800b540 <tcp_input+0x288>)
 800b4fc:	f008 fc84 	bl	8013e08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	7d1b      	ldrb	r3, [r3, #20]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d105      	bne.n	800b514 <tcp_input+0x25c>
 800b508:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <tcp_input+0x280>)
 800b50a:	22fd      	movs	r2, #253	; 0xfd
 800b50c:	491c      	ldr	r1, [pc, #112]	; (800b580 <tcp_input+0x2c8>)
 800b50e:	480c      	ldr	r0, [pc, #48]	; (800b540 <tcp_input+0x288>)
 800b510:	f008 fc7a 	bl	8013e08 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	7a1b      	ldrb	r3, [r3, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d033      	beq.n	800b584 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	7a1a      	ldrb	r2, [r3, #8]
 800b520:	4b09      	ldr	r3, [pc, #36]	; (800b548 <tcp_input+0x290>)
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b528:	3301      	adds	r3, #1
 800b52a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d029      	beq.n	800b584 <tcp_input+0x2cc>
      prev = pcb;
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	61bb      	str	r3, [r7, #24]
      continue;
 800b534:	e06b      	b.n	800b60e <tcp_input+0x356>
 800b536:	bf00      	nop
 800b538:	080165d8 	.word	0x080165d8
 800b53c:	0801660c 	.word	0x0801660c
 800b540:	08016624 	.word	0x08016624
 800b544:	2000aee8 	.word	0x2000aee8
 800b548:	20005770 	.word	0x20005770
 800b54c:	2000aeec 	.word	0x2000aeec
 800b550:	2000aef0 	.word	0x2000aef0
 800b554:	2000aeee 	.word	0x2000aeee
 800b558:	0801664c 	.word	0x0801664c
 800b55c:	0801665c 	.word	0x0801665c
 800b560:	08016668 	.word	0x08016668
 800b564:	2000aef8 	.word	0x2000aef8
 800b568:	2000aefc 	.word	0x2000aefc
 800b56c:	2000af04 	.word	0x2000af04
 800b570:	2000af02 	.word	0x2000af02
 800b574:	2000aecc 	.word	0x2000aecc
 800b578:	08016688 	.word	0x08016688
 800b57c:	080166b0 	.word	0x080166b0
 800b580:	080166dc 	.word	0x080166dc
    }

    if (pcb->remote_port == tcphdr->src &&
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	8b1a      	ldrh	r2, [r3, #24]
 800b588:	4b72      	ldr	r3, [pc, #456]	; (800b754 <tcp_input+0x49c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	b29b      	uxth	r3, r3
 800b590:	429a      	cmp	r2, r3
 800b592:	d13a      	bne.n	800b60a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	8ada      	ldrh	r2, [r3, #22]
 800b598:	4b6e      	ldr	r3, [pc, #440]	; (800b754 <tcp_input+0x49c>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	885b      	ldrh	r3, [r3, #2]
 800b59e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d132      	bne.n	800b60a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	4b6b      	ldr	r3, [pc, #428]	; (800b758 <tcp_input+0x4a0>)
 800b5aa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d12c      	bne.n	800b60a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	4b68      	ldr	r3, [pc, #416]	; (800b758 <tcp_input+0x4a0>)
 800b5b6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d126      	bne.n	800b60a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	69fa      	ldr	r2, [r7, #28]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d106      	bne.n	800b5d4 <tcp_input+0x31c>
 800b5c6:	4b65      	ldr	r3, [pc, #404]	; (800b75c <tcp_input+0x4a4>)
 800b5c8:	f240 120d 	movw	r2, #269	; 0x10d
 800b5cc:	4964      	ldr	r1, [pc, #400]	; (800b760 <tcp_input+0x4a8>)
 800b5ce:	4865      	ldr	r0, [pc, #404]	; (800b764 <tcp_input+0x4ac>)
 800b5d0:	f008 fc1a 	bl	8013e08 <iprintf>
      if (prev != NULL) {
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00a      	beq.n	800b5f0 <tcp_input+0x338>
        prev->next = pcb->next;
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	68da      	ldr	r2, [r3, #12]
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b5e2:	4b61      	ldr	r3, [pc, #388]	; (800b768 <tcp_input+0x4b0>)
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b5ea:	4a5f      	ldr	r2, [pc, #380]	; (800b768 <tcp_input+0x4b0>)
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	69fa      	ldr	r2, [r7, #28]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d111      	bne.n	800b61e <tcp_input+0x366>
 800b5fa:	4b58      	ldr	r3, [pc, #352]	; (800b75c <tcp_input+0x4a4>)
 800b5fc:	f240 1215 	movw	r2, #277	; 0x115
 800b600:	495a      	ldr	r1, [pc, #360]	; (800b76c <tcp_input+0x4b4>)
 800b602:	4858      	ldr	r0, [pc, #352]	; (800b764 <tcp_input+0x4ac>)
 800b604:	f008 fc00 	bl	8013e08 <iprintf>
      break;
 800b608:	e009      	b.n	800b61e <tcp_input+0x366>
    }
    prev = pcb;
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	61fb      	str	r3, [r7, #28]
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	2b00      	cmp	r3, #0
 800b618:	f47f af5e 	bne.w	800b4d8 <tcp_input+0x220>
 800b61c:	e000      	b.n	800b620 <tcp_input+0x368>
      break;
 800b61e:	bf00      	nop
  }

  if (pcb == NULL) {
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	2b00      	cmp	r3, #0
 800b624:	f040 80aa 	bne.w	800b77c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b628:	4b51      	ldr	r3, [pc, #324]	; (800b770 <tcp_input+0x4b8>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	61fb      	str	r3, [r7, #28]
 800b62e:	e03f      	b.n	800b6b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	7d1b      	ldrb	r3, [r3, #20]
 800b634:	2b0a      	cmp	r3, #10
 800b636:	d006      	beq.n	800b646 <tcp_input+0x38e>
 800b638:	4b48      	ldr	r3, [pc, #288]	; (800b75c <tcp_input+0x4a4>)
 800b63a:	f240 121f 	movw	r2, #287	; 0x11f
 800b63e:	494d      	ldr	r1, [pc, #308]	; (800b774 <tcp_input+0x4bc>)
 800b640:	4848      	ldr	r0, [pc, #288]	; (800b764 <tcp_input+0x4ac>)
 800b642:	f008 fbe1 	bl	8013e08 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	7a1b      	ldrb	r3, [r3, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d009      	beq.n	800b662 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	7a1a      	ldrb	r2, [r3, #8]
 800b652:	4b41      	ldr	r3, [pc, #260]	; (800b758 <tcp_input+0x4a0>)
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b65a:	3301      	adds	r3, #1
 800b65c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b65e:	429a      	cmp	r2, r3
 800b660:	d122      	bne.n	800b6a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	8b1a      	ldrh	r2, [r3, #24]
 800b666:	4b3b      	ldr	r3, [pc, #236]	; (800b754 <tcp_input+0x49c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	429a      	cmp	r2, r3
 800b670:	d11b      	bne.n	800b6aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	8ada      	ldrh	r2, [r3, #22]
 800b676:	4b37      	ldr	r3, [pc, #220]	; (800b754 <tcp_input+0x49c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	885b      	ldrh	r3, [r3, #2]
 800b67c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b67e:	429a      	cmp	r2, r3
 800b680:	d113      	bne.n	800b6aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	4b34      	ldr	r3, [pc, #208]	; (800b758 <tcp_input+0x4a0>)
 800b688:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d10d      	bne.n	800b6aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	4b31      	ldr	r3, [pc, #196]	; (800b758 <tcp_input+0x4a0>)
 800b694:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b696:	429a      	cmp	r2, r3
 800b698:	d107      	bne.n	800b6aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b69a:	69f8      	ldr	r0, [r7, #28]
 800b69c:	f000 fb56 	bl	800bd4c <tcp_timewait_input>
        }
        pbuf_free(p);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7fd ffd1 	bl	8009648 <pbuf_free>
        return;
 800b6a6:	e1fd      	b.n	800baa4 <tcp_input+0x7ec>
        continue;
 800b6a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	61fb      	str	r3, [r7, #28]
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1bc      	bne.n	800b630 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b6ba:	4b2f      	ldr	r3, [pc, #188]	; (800b778 <tcp_input+0x4c0>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	617b      	str	r3, [r7, #20]
 800b6c0:	e02a      	b.n	800b718 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	7a1b      	ldrb	r3, [r3, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00c      	beq.n	800b6e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	7a1a      	ldrb	r2, [r3, #8]
 800b6ce:	4b22      	ldr	r3, [pc, #136]	; (800b758 <tcp_input+0x4a0>)
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d002      	beq.n	800b6e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	61bb      	str	r3, [r7, #24]
        continue;
 800b6e2:	e016      	b.n	800b712 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	8ada      	ldrh	r2, [r3, #22]
 800b6e8:	4b1a      	ldr	r3, [pc, #104]	; (800b754 <tcp_input+0x49c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	885b      	ldrh	r3, [r3, #2]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d10c      	bne.n	800b70e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	4b17      	ldr	r3, [pc, #92]	; (800b758 <tcp_input+0x4a0>)
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d00f      	beq.n	800b720 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00d      	beq.n	800b722 <tcp_input+0x46a>
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d009      	beq.n	800b722 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1d1      	bne.n	800b6c2 <tcp_input+0x40a>
 800b71e:	e000      	b.n	800b722 <tcp_input+0x46a>
            break;
 800b720:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d029      	beq.n	800b77c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00a      	beq.n	800b744 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b736:	4b10      	ldr	r3, [pc, #64]	; (800b778 <tcp_input+0x4c0>)
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b73e:	4a0e      	ldr	r2, [pc, #56]	; (800b778 <tcp_input+0x4c0>)
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b744:	6978      	ldr	r0, [r7, #20]
 800b746:	f000 fa03 	bl	800bb50 <tcp_listen_input>
      }
      pbuf_free(p);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7fd ff7c 	bl	8009648 <pbuf_free>
      return;
 800b750:	e1a8      	b.n	800baa4 <tcp_input+0x7ec>
 800b752:	bf00      	nop
 800b754:	2000aee8 	.word	0x2000aee8
 800b758:	20005770 	.word	0x20005770
 800b75c:	080165d8 	.word	0x080165d8
 800b760:	08016704 	.word	0x08016704
 800b764:	08016624 	.word	0x08016624
 800b768:	2000aecc 	.word	0x2000aecc
 800b76c:	08016730 	.word	0x08016730
 800b770:	2000aed0 	.word	0x2000aed0
 800b774:	0801675c 	.word	0x0801675c
 800b778:	2000aec8 	.word	0x2000aec8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 8158 	beq.w	800ba34 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b784:	4b95      	ldr	r3, [pc, #596]	; (800b9dc <tcp_input+0x724>)
 800b786:	2200      	movs	r2, #0
 800b788:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	891a      	ldrh	r2, [r3, #8]
 800b78e:	4b93      	ldr	r3, [pc, #588]	; (800b9dc <tcp_input+0x724>)
 800b790:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b792:	4a92      	ldr	r2, [pc, #584]	; (800b9dc <tcp_input+0x724>)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b798:	4b91      	ldr	r3, [pc, #580]	; (800b9e0 <tcp_input+0x728>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a8f      	ldr	r2, [pc, #572]	; (800b9dc <tcp_input+0x724>)
 800b79e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b7a0:	4b90      	ldr	r3, [pc, #576]	; (800b9e4 <tcp_input+0x72c>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b7a6:	4b90      	ldr	r3, [pc, #576]	; (800b9e8 <tcp_input+0x730>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b7ac:	4b8f      	ldr	r3, [pc, #572]	; (800b9ec <tcp_input+0x734>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b7b2:	4b8f      	ldr	r3, [pc, #572]	; (800b9f0 <tcp_input+0x738>)
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	f003 0308 	and.w	r3, r3, #8
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d006      	beq.n	800b7cc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	7b5b      	ldrb	r3, [r3, #13]
 800b7c2:	f043 0301 	orr.w	r3, r3, #1
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d017      	beq.n	800b804 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b7d4:	69f8      	ldr	r0, [r7, #28]
 800b7d6:	f7ff f929 	bl	800aa2c <tcp_process_refused_data>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	f113 0f0d 	cmn.w	r3, #13
 800b7e0:	d007      	beq.n	800b7f2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00c      	beq.n	800b804 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b7ea:	4b82      	ldr	r3, [pc, #520]	; (800b9f4 <tcp_input+0x73c>)
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d008      	beq.n	800b804 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f040 80e3 	bne.w	800b9c2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b7fc:	69f8      	ldr	r0, [r7, #28]
 800b7fe:	f003 f9ad 	bl	800eb5c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b802:	e0de      	b.n	800b9c2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b804:	4a7c      	ldr	r2, [pc, #496]	; (800b9f8 <tcp_input+0x740>)
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b80a:	69f8      	ldr	r0, [r7, #28]
 800b80c:	f000 fb18 	bl	800be40 <tcp_process>
 800b810:	4603      	mov	r3, r0
 800b812:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b814:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b818:	f113 0f0d 	cmn.w	r3, #13
 800b81c:	f000 80d3 	beq.w	800b9c6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b820:	4b71      	ldr	r3, [pc, #452]	; (800b9e8 <tcp_input+0x730>)
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	f003 0308 	and.w	r3, r3, #8
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d015      	beq.n	800b858 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b832:	2b00      	cmp	r3, #0
 800b834:	d008      	beq.n	800b848 <tcp_input+0x590>
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b83c:	69fa      	ldr	r2, [r7, #28]
 800b83e:	6912      	ldr	r2, [r2, #16]
 800b840:	f06f 010d 	mvn.w	r1, #13
 800b844:	4610      	mov	r0, r2
 800b846:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b848:	69f9      	ldr	r1, [r7, #28]
 800b84a:	486c      	ldr	r0, [pc, #432]	; (800b9fc <tcp_input+0x744>)
 800b84c:	f7ff fbbc 	bl	800afc8 <tcp_pcb_remove>
        tcp_free(pcb);
 800b850:	69f8      	ldr	r0, [r7, #28]
 800b852:	f7fe f9a9 	bl	8009ba8 <tcp_free>
 800b856:	e0da      	b.n	800ba0e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b858:	2300      	movs	r3, #0
 800b85a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b85c:	4b63      	ldr	r3, [pc, #396]	; (800b9ec <tcp_input+0x734>)
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d01d      	beq.n	800b8a0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b864:	4b61      	ldr	r3, [pc, #388]	; (800b9ec <tcp_input+0x734>)
 800b866:	881b      	ldrh	r3, [r3, #0]
 800b868:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00a      	beq.n	800b88a <tcp_input+0x5d2>
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	6910      	ldr	r0, [r2, #16]
 800b87e:	89fa      	ldrh	r2, [r7, #14]
 800b880:	69f9      	ldr	r1, [r7, #28]
 800b882:	4798      	blx	r3
 800b884:	4603      	mov	r3, r0
 800b886:	74fb      	strb	r3, [r7, #19]
 800b888:	e001      	b.n	800b88e <tcp_input+0x5d6>
 800b88a:	2300      	movs	r3, #0
 800b88c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b88e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b892:	f113 0f0d 	cmn.w	r3, #13
 800b896:	f000 8098 	beq.w	800b9ca <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b89a:	4b54      	ldr	r3, [pc, #336]	; (800b9ec <tcp_input+0x734>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b8a0:	69f8      	ldr	r0, [r7, #28]
 800b8a2:	f000 f915 	bl	800bad0 <tcp_input_delayed_close>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f040 8090 	bne.w	800b9ce <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b8ae:	4b4d      	ldr	r3, [pc, #308]	; (800b9e4 <tcp_input+0x72c>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d041      	beq.n	800b93a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d006      	beq.n	800b8cc <tcp_input+0x614>
 800b8be:	4b50      	ldr	r3, [pc, #320]	; (800ba00 <tcp_input+0x748>)
 800b8c0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b8c4:	494f      	ldr	r1, [pc, #316]	; (800ba04 <tcp_input+0x74c>)
 800b8c6:	4850      	ldr	r0, [pc, #320]	; (800ba08 <tcp_input+0x750>)
 800b8c8:	f008 fa9e 	bl	8013e08 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	8b5b      	ldrh	r3, [r3, #26]
 800b8d0:	f003 0310 	and.w	r3, r3, #16
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d008      	beq.n	800b8ea <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b8d8:	4b42      	ldr	r3, [pc, #264]	; (800b9e4 <tcp_input+0x72c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fd feb3 	bl	8009648 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b8e2:	69f8      	ldr	r0, [r7, #28]
 800b8e4:	f7fe fc48 	bl	800a178 <tcp_abort>
            goto aborted;
 800b8e8:	e091      	b.n	800ba0e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00c      	beq.n	800b90e <tcp_input+0x656>
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	6918      	ldr	r0, [r3, #16]
 800b8fe:	4b39      	ldr	r3, [pc, #228]	; (800b9e4 <tcp_input+0x72c>)
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	2300      	movs	r3, #0
 800b904:	69f9      	ldr	r1, [r7, #28]
 800b906:	47a0      	blx	r4
 800b908:	4603      	mov	r3, r0
 800b90a:	74fb      	strb	r3, [r7, #19]
 800b90c:	e008      	b.n	800b920 <tcp_input+0x668>
 800b90e:	4b35      	ldr	r3, [pc, #212]	; (800b9e4 <tcp_input+0x72c>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	2300      	movs	r3, #0
 800b914:	69f9      	ldr	r1, [r7, #28]
 800b916:	2000      	movs	r0, #0
 800b918:	f7ff f95e 	bl	800abd8 <tcp_recv_null>
 800b91c:	4603      	mov	r3, r0
 800b91e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b920:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b924:	f113 0f0d 	cmn.w	r3, #13
 800b928:	d053      	beq.n	800b9d2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b92a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b932:	4b2c      	ldr	r3, [pc, #176]	; (800b9e4 <tcp_input+0x72c>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b93a:	4b2b      	ldr	r3, [pc, #172]	; (800b9e8 <tcp_input+0x730>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	f003 0320 	and.w	r3, r3, #32
 800b942:	2b00      	cmp	r3, #0
 800b944:	d030      	beq.n	800b9a8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d009      	beq.n	800b962 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b952:	7b5a      	ldrb	r2, [r3, #13]
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b958:	f042 0220 	orr.w	r2, r2, #32
 800b95c:	b2d2      	uxtb	r2, r2
 800b95e:	735a      	strb	r2, [r3, #13]
 800b960:	e022      	b.n	800b9a8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b966:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b96a:	d005      	beq.n	800b978 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b970:	3301      	adds	r3, #1
 800b972:	b29a      	uxth	r2, r3
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00b      	beq.n	800b99a <tcp_input+0x6e2>
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	6918      	ldr	r0, [r3, #16]
 800b98c:	2300      	movs	r3, #0
 800b98e:	2200      	movs	r2, #0
 800b990:	69f9      	ldr	r1, [r7, #28]
 800b992:	47a0      	blx	r4
 800b994:	4603      	mov	r3, r0
 800b996:	74fb      	strb	r3, [r7, #19]
 800b998:	e001      	b.n	800b99e <tcp_input+0x6e6>
 800b99a:	2300      	movs	r3, #0
 800b99c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b99e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9a2:	f113 0f0d 	cmn.w	r3, #13
 800b9a6:	d016      	beq.n	800b9d6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b9a8:	4b13      	ldr	r3, [pc, #76]	; (800b9f8 <tcp_input+0x740>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b9ae:	69f8      	ldr	r0, [r7, #28]
 800b9b0:	f000 f88e 	bl	800bad0 <tcp_input_delayed_close>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d128      	bne.n	800ba0c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b9ba:	69f8      	ldr	r0, [r7, #28]
 800b9bc:	f002 fac8 	bl	800df50 <tcp_output>
 800b9c0:	e025      	b.n	800ba0e <tcp_input+0x756>
        goto aborted;
 800b9c2:	bf00      	nop
 800b9c4:	e023      	b.n	800ba0e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b9c6:	bf00      	nop
 800b9c8:	e021      	b.n	800ba0e <tcp_input+0x756>
              goto aborted;
 800b9ca:	bf00      	nop
 800b9cc:	e01f      	b.n	800ba0e <tcp_input+0x756>
          goto aborted;
 800b9ce:	bf00      	nop
 800b9d0:	e01d      	b.n	800ba0e <tcp_input+0x756>
            goto aborted;
 800b9d2:	bf00      	nop
 800b9d4:	e01b      	b.n	800ba0e <tcp_input+0x756>
              goto aborted;
 800b9d6:	bf00      	nop
 800b9d8:	e019      	b.n	800ba0e <tcp_input+0x756>
 800b9da:	bf00      	nop
 800b9dc:	2000aed8 	.word	0x2000aed8
 800b9e0:	2000aee8 	.word	0x2000aee8
 800b9e4:	2000af08 	.word	0x2000af08
 800b9e8:	2000af05 	.word	0x2000af05
 800b9ec:	2000af00 	.word	0x2000af00
 800b9f0:	2000af04 	.word	0x2000af04
 800b9f4:	2000af02 	.word	0x2000af02
 800b9f8:	2000af0c 	.word	0x2000af0c
 800b9fc:	2000aecc 	.word	0x2000aecc
 800ba00:	080165d8 	.word	0x080165d8
 800ba04:	0801678c 	.word	0x0801678c
 800ba08:	08016624 	.word	0x08016624
          goto aborted;
 800ba0c:	bf00      	nop
    tcp_input_pcb = NULL;
 800ba0e:	4b27      	ldr	r3, [pc, #156]	; (800baac <tcp_input+0x7f4>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ba14:	4b26      	ldr	r3, [pc, #152]	; (800bab0 <tcp_input+0x7f8>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ba1a:	4b26      	ldr	r3, [pc, #152]	; (800bab4 <tcp_input+0x7fc>)
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d03f      	beq.n	800baa2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ba22:	4b24      	ldr	r3, [pc, #144]	; (800bab4 <tcp_input+0x7fc>)
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fd fe0e 	bl	8009648 <pbuf_free>
      inseg.p = NULL;
 800ba2c:	4b21      	ldr	r3, [pc, #132]	; (800bab4 <tcp_input+0x7fc>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ba32:	e036      	b.n	800baa2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ba34:	4b20      	ldr	r3, [pc, #128]	; (800bab8 <tcp_input+0x800>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	899b      	ldrh	r3, [r3, #12]
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fc fa99 	bl	8007f74 <lwip_htons>
 800ba42:	4603      	mov	r3, r0
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	f003 0304 	and.w	r3, r3, #4
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d118      	bne.n	800ba80 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba4e:	4b1b      	ldr	r3, [pc, #108]	; (800babc <tcp_input+0x804>)
 800ba50:	6819      	ldr	r1, [r3, #0]
 800ba52:	4b1b      	ldr	r3, [pc, #108]	; (800bac0 <tcp_input+0x808>)
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	4b1a      	ldr	r3, [pc, #104]	; (800bac4 <tcp_input+0x80c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba5e:	4b16      	ldr	r3, [pc, #88]	; (800bab8 <tcp_input+0x800>)
 800ba60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba62:	885b      	ldrh	r3, [r3, #2]
 800ba64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba66:	4a14      	ldr	r2, [pc, #80]	; (800bab8 <tcp_input+0x800>)
 800ba68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba6a:	8812      	ldrh	r2, [r2, #0]
 800ba6c:	b292      	uxth	r2, r2
 800ba6e:	9202      	str	r2, [sp, #8]
 800ba70:	9301      	str	r3, [sp, #4]
 800ba72:	4b15      	ldr	r3, [pc, #84]	; (800bac8 <tcp_input+0x810>)
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	4b15      	ldr	r3, [pc, #84]	; (800bacc <tcp_input+0x814>)
 800ba78:	4602      	mov	r2, r0
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	f003 f81c 	bl	800eab8 <tcp_rst>
    pbuf_free(p);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7fd fde1 	bl	8009648 <pbuf_free>
  return;
 800ba86:	e00c      	b.n	800baa2 <tcp_input+0x7ea>
    goto dropped;
 800ba88:	bf00      	nop
 800ba8a:	e006      	b.n	800ba9a <tcp_input+0x7e2>
    goto dropped;
 800ba8c:	bf00      	nop
 800ba8e:	e004      	b.n	800ba9a <tcp_input+0x7e2>
    goto dropped;
 800ba90:	bf00      	nop
 800ba92:	e002      	b.n	800ba9a <tcp_input+0x7e2>
      goto dropped;
 800ba94:	bf00      	nop
 800ba96:	e000      	b.n	800ba9a <tcp_input+0x7e2>
      goto dropped;
 800ba98:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7fd fdd4 	bl	8009648 <pbuf_free>
 800baa0:	e000      	b.n	800baa4 <tcp_input+0x7ec>
  return;
 800baa2:	bf00      	nop
}
 800baa4:	3724      	adds	r7, #36	; 0x24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd90      	pop	{r4, r7, pc}
 800baaa:	bf00      	nop
 800baac:	2000af0c 	.word	0x2000af0c
 800bab0:	2000af08 	.word	0x2000af08
 800bab4:	2000aed8 	.word	0x2000aed8
 800bab8:	2000aee8 	.word	0x2000aee8
 800babc:	2000aefc 	.word	0x2000aefc
 800bac0:	2000af02 	.word	0x2000af02
 800bac4:	2000aef8 	.word	0x2000aef8
 800bac8:	20005780 	.word	0x20005780
 800bacc:	20005784 	.word	0x20005784

0800bad0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d106      	bne.n	800baec <tcp_input_delayed_close+0x1c>
 800bade:	4b17      	ldr	r3, [pc, #92]	; (800bb3c <tcp_input_delayed_close+0x6c>)
 800bae0:	f240 225a 	movw	r2, #602	; 0x25a
 800bae4:	4916      	ldr	r1, [pc, #88]	; (800bb40 <tcp_input_delayed_close+0x70>)
 800bae6:	4817      	ldr	r0, [pc, #92]	; (800bb44 <tcp_input_delayed_close+0x74>)
 800bae8:	f008 f98e 	bl	8013e08 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800baec:	4b16      	ldr	r3, [pc, #88]	; (800bb48 <tcp_input_delayed_close+0x78>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	f003 0310 	and.w	r3, r3, #16
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d01c      	beq.n	800bb32 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	8b5b      	ldrh	r3, [r3, #26]
 800bafc:	f003 0310 	and.w	r3, r3, #16
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10d      	bne.n	800bb20 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d008      	beq.n	800bb20 <tcp_input_delayed_close+0x50>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	6912      	ldr	r2, [r2, #16]
 800bb18:	f06f 010e 	mvn.w	r1, #14
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bb20:	6879      	ldr	r1, [r7, #4]
 800bb22:	480a      	ldr	r0, [pc, #40]	; (800bb4c <tcp_input_delayed_close+0x7c>)
 800bb24:	f7ff fa50 	bl	800afc8 <tcp_pcb_remove>
    tcp_free(pcb);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7fe f83d 	bl	8009ba8 <tcp_free>
    return 1;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e000      	b.n	800bb34 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	080165d8 	.word	0x080165d8
 800bb40:	080167a8 	.word	0x080167a8
 800bb44:	08016624 	.word	0x08016624
 800bb48:	2000af05 	.word	0x2000af05
 800bb4c:	2000aecc 	.word	0x2000aecc

0800bb50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bb50:	b590      	push	{r4, r7, lr}
 800bb52:	b08b      	sub	sp, #44	; 0x2c
 800bb54:	af04      	add	r7, sp, #16
 800bb56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bb58:	4b6f      	ldr	r3, [pc, #444]	; (800bd18 <tcp_listen_input+0x1c8>)
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f040 80d2 	bne.w	800bd0a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d106      	bne.n	800bb7a <tcp_listen_input+0x2a>
 800bb6c:	4b6b      	ldr	r3, [pc, #428]	; (800bd1c <tcp_listen_input+0x1cc>)
 800bb6e:	f240 2281 	movw	r2, #641	; 0x281
 800bb72:	496b      	ldr	r1, [pc, #428]	; (800bd20 <tcp_listen_input+0x1d0>)
 800bb74:	486b      	ldr	r0, [pc, #428]	; (800bd24 <tcp_listen_input+0x1d4>)
 800bb76:	f008 f947 	bl	8013e08 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bb7a:	4b67      	ldr	r3, [pc, #412]	; (800bd18 <tcp_listen_input+0x1c8>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	f003 0310 	and.w	r3, r3, #16
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d019      	beq.n	800bbba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb86:	4b68      	ldr	r3, [pc, #416]	; (800bd28 <tcp_listen_input+0x1d8>)
 800bb88:	6819      	ldr	r1, [r3, #0]
 800bb8a:	4b68      	ldr	r3, [pc, #416]	; (800bd2c <tcp_listen_input+0x1dc>)
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	4b67      	ldr	r3, [pc, #412]	; (800bd30 <tcp_listen_input+0x1e0>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb96:	4b67      	ldr	r3, [pc, #412]	; (800bd34 <tcp_listen_input+0x1e4>)
 800bb98:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb9a:	885b      	ldrh	r3, [r3, #2]
 800bb9c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb9e:	4a65      	ldr	r2, [pc, #404]	; (800bd34 <tcp_listen_input+0x1e4>)
 800bba0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bba2:	8812      	ldrh	r2, [r2, #0]
 800bba4:	b292      	uxth	r2, r2
 800bba6:	9202      	str	r2, [sp, #8]
 800bba8:	9301      	str	r3, [sp, #4]
 800bbaa:	4b63      	ldr	r3, [pc, #396]	; (800bd38 <tcp_listen_input+0x1e8>)
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	4b63      	ldr	r3, [pc, #396]	; (800bd3c <tcp_listen_input+0x1ec>)
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f002 ff80 	bl	800eab8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bbb8:	e0a9      	b.n	800bd0e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800bbba:	4b57      	ldr	r3, [pc, #348]	; (800bd18 <tcp_listen_input+0x1c8>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f003 0302 	and.w	r3, r3, #2
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f000 80a3 	beq.w	800bd0e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	7d5b      	ldrb	r3, [r3, #21]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff f927 	bl	800ae20 <tcp_alloc>
 800bbd2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d111      	bne.n	800bbfe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00a      	beq.n	800bbf8 <tcp_listen_input+0xa8>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	6910      	ldr	r0, [r2, #16]
 800bbea:	f04f 32ff 	mov.w	r2, #4294967295
 800bbee:	2100      	movs	r1, #0
 800bbf0:	4798      	blx	r3
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	73bb      	strb	r3, [r7, #14]
      return;
 800bbf6:	e08b      	b.n	800bd10 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bbf8:	23f0      	movs	r3, #240	; 0xf0
 800bbfa:	73bb      	strb	r3, [r7, #14]
      return;
 800bbfc:	e088      	b.n	800bd10 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bbfe:	4b50      	ldr	r3, [pc, #320]	; (800bd40 <tcp_listen_input+0x1f0>)
 800bc00:	695a      	ldr	r2, [r3, #20]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bc06:	4b4e      	ldr	r3, [pc, #312]	; (800bd40 <tcp_listen_input+0x1f0>)
 800bc08:	691a      	ldr	r2, [r3, #16]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	8ada      	ldrh	r2, [r3, #22]
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bc16:	4b47      	ldr	r3, [pc, #284]	; (800bd34 <tcp_listen_input+0x1e4>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2203      	movs	r2, #3
 800bc26:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bc28:	4b41      	ldr	r3, [pc, #260]	; (800bd30 <tcp_listen_input+0x1e0>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bc3a:	6978      	ldr	r0, [r7, #20]
 800bc3c:	f7ff fa58 	bl	800b0f0 <tcp_next_iss>
 800bc40:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bc5a:	4b35      	ldr	r3, [pc, #212]	; (800bd30 <tcp_listen_input+0x1e0>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	1e5a      	subs	r2, r3, #1
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	691a      	ldr	r2, [r3, #16]
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7a5b      	ldrb	r3, [r3, #9]
 800bc76:	f003 030c 	and.w	r3, r3, #12
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7a1a      	ldrb	r2, [r3, #8]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bc88:	4b2e      	ldr	r3, [pc, #184]	; (800bd44 <tcp_listen_input+0x1f4>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	60da      	str	r2, [r3, #12]
 800bc90:	4a2c      	ldr	r2, [pc, #176]	; (800bd44 <tcp_listen_input+0x1f4>)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	f003 f8d1 	bl	800ee3c <tcp_timer_needed>
 800bc9a:	4b2b      	ldr	r3, [pc, #172]	; (800bd48 <tcp_listen_input+0x1f8>)
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bca0:	6978      	ldr	r0, [r7, #20]
 800bca2:	f001 fd8f 	bl	800d7c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bca6:	4b23      	ldr	r3, [pc, #140]	; (800bd34 <tcp_listen_input+0x1e4>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	89db      	ldrh	r3, [r3, #14]
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f006 fe2f 	bl	801292c <ip4_route>
 800bcce:	4601      	mov	r1, r0
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f7ff fa30 	bl	800b13c <tcp_eff_send_mss_netif>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	461a      	mov	r2, r3
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bce4:	2112      	movs	r1, #18
 800bce6:	6978      	ldr	r0, [r7, #20]
 800bce8:	f002 f844 	bl	800dd74 <tcp_enqueue_flags>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bcf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d004      	beq.n	800bd02 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	6978      	ldr	r0, [r7, #20]
 800bcfc:	f7fe f97e 	bl	8009ffc <tcp_abandon>
      return;
 800bd00:	e006      	b.n	800bd10 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bd02:	6978      	ldr	r0, [r7, #20]
 800bd04:	f002 f924 	bl	800df50 <tcp_output>
  return;
 800bd08:	e001      	b.n	800bd0e <tcp_listen_input+0x1be>
    return;
 800bd0a:	bf00      	nop
 800bd0c:	e000      	b.n	800bd10 <tcp_listen_input+0x1c0>
  return;
 800bd0e:	bf00      	nop
}
 800bd10:	371c      	adds	r7, #28
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd90      	pop	{r4, r7, pc}
 800bd16:	bf00      	nop
 800bd18:	2000af04 	.word	0x2000af04
 800bd1c:	080165d8 	.word	0x080165d8
 800bd20:	080167d0 	.word	0x080167d0
 800bd24:	08016624 	.word	0x08016624
 800bd28:	2000aefc 	.word	0x2000aefc
 800bd2c:	2000af02 	.word	0x2000af02
 800bd30:	2000aef8 	.word	0x2000aef8
 800bd34:	2000aee8 	.word	0x2000aee8
 800bd38:	20005780 	.word	0x20005780
 800bd3c:	20005784 	.word	0x20005784
 800bd40:	20005770 	.word	0x20005770
 800bd44:	2000aecc 	.word	0x2000aecc
 800bd48:	2000aed4 	.word	0x2000aed4

0800bd4c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af04      	add	r7, sp, #16
 800bd52:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bd54:	4b2f      	ldr	r3, [pc, #188]	; (800be14 <tcp_timewait_input+0xc8>)
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d153      	bne.n	800be08 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <tcp_timewait_input+0x28>
 800bd66:	4b2c      	ldr	r3, [pc, #176]	; (800be18 <tcp_timewait_input+0xcc>)
 800bd68:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bd6c:	492b      	ldr	r1, [pc, #172]	; (800be1c <tcp_timewait_input+0xd0>)
 800bd6e:	482c      	ldr	r0, [pc, #176]	; (800be20 <tcp_timewait_input+0xd4>)
 800bd70:	f008 f84a 	bl	8013e08 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bd74:	4b27      	ldr	r3, [pc, #156]	; (800be14 <tcp_timewait_input+0xc8>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	f003 0302 	and.w	r3, r3, #2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d02a      	beq.n	800bdd6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bd80:	4b28      	ldr	r3, [pc, #160]	; (800be24 <tcp_timewait_input+0xd8>)
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	db2d      	blt.n	800bdea <tcp_timewait_input+0x9e>
 800bd8e:	4b25      	ldr	r3, [pc, #148]	; (800be24 <tcp_timewait_input+0xd8>)
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd9a:	440b      	add	r3, r1
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	dc23      	bgt.n	800bdea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bda2:	4b21      	ldr	r3, [pc, #132]	; (800be28 <tcp_timewait_input+0xdc>)
 800bda4:	6819      	ldr	r1, [r3, #0]
 800bda6:	4b21      	ldr	r3, [pc, #132]	; (800be2c <tcp_timewait_input+0xe0>)
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	4b1d      	ldr	r3, [pc, #116]	; (800be24 <tcp_timewait_input+0xd8>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdb2:	4b1f      	ldr	r3, [pc, #124]	; (800be30 <tcp_timewait_input+0xe4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdb6:	885b      	ldrh	r3, [r3, #2]
 800bdb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdba:	4a1d      	ldr	r2, [pc, #116]	; (800be30 <tcp_timewait_input+0xe4>)
 800bdbc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdbe:	8812      	ldrh	r2, [r2, #0]
 800bdc0:	b292      	uxth	r2, r2
 800bdc2:	9202      	str	r2, [sp, #8]
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	4b1b      	ldr	r3, [pc, #108]	; (800be34 <tcp_timewait_input+0xe8>)
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	4b1b      	ldr	r3, [pc, #108]	; (800be38 <tcp_timewait_input+0xec>)
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f002 fe72 	bl	800eab8 <tcp_rst>
      return;
 800bdd4:	e01b      	b.n	800be0e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bdd6:	4b0f      	ldr	r3, [pc, #60]	; (800be14 <tcp_timewait_input+0xc8>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	f003 0301 	and.w	r3, r3, #1
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bde2:	4b16      	ldr	r3, [pc, #88]	; (800be3c <tcp_timewait_input+0xf0>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bdea:	4b10      	ldr	r3, [pc, #64]	; (800be2c <tcp_timewait_input+0xe0>)
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00c      	beq.n	800be0c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	8b5b      	ldrh	r3, [r3, #26]
 800bdf6:	f043 0302 	orr.w	r3, r3, #2
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f002 f8a5 	bl	800df50 <tcp_output>
  }
  return;
 800be06:	e001      	b.n	800be0c <tcp_timewait_input+0xc0>
    return;
 800be08:	bf00      	nop
 800be0a:	e000      	b.n	800be0e <tcp_timewait_input+0xc2>
  return;
 800be0c:	bf00      	nop
}
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	2000af04 	.word	0x2000af04
 800be18:	080165d8 	.word	0x080165d8
 800be1c:	080167f0 	.word	0x080167f0
 800be20:	08016624 	.word	0x08016624
 800be24:	2000aef8 	.word	0x2000aef8
 800be28:	2000aefc 	.word	0x2000aefc
 800be2c:	2000af02 	.word	0x2000af02
 800be30:	2000aee8 	.word	0x2000aee8
 800be34:	20005780 	.word	0x20005780
 800be38:	20005784 	.word	0x20005784
 800be3c:	2000aec0 	.word	0x2000aec0

0800be40 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800be40:	b590      	push	{r4, r7, lr}
 800be42:	b08d      	sub	sp, #52	; 0x34
 800be44:	af04      	add	r7, sp, #16
 800be46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d106      	bne.n	800be64 <tcp_process+0x24>
 800be56:	4b9d      	ldr	r3, [pc, #628]	; (800c0cc <tcp_process+0x28c>)
 800be58:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800be5c:	499c      	ldr	r1, [pc, #624]	; (800c0d0 <tcp_process+0x290>)
 800be5e:	489d      	ldr	r0, [pc, #628]	; (800c0d4 <tcp_process+0x294>)
 800be60:	f007 ffd2 	bl	8013e08 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800be64:	4b9c      	ldr	r3, [pc, #624]	; (800c0d8 <tcp_process+0x298>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	f003 0304 	and.w	r3, r3, #4
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d04e      	beq.n	800bf0e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7d1b      	ldrb	r3, [r3, #20]
 800be74:	2b02      	cmp	r3, #2
 800be76:	d108      	bne.n	800be8a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be7c:	4b97      	ldr	r3, [pc, #604]	; (800c0dc <tcp_process+0x29c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d123      	bne.n	800becc <tcp_process+0x8c>
        acceptable = 1;
 800be84:	2301      	movs	r3, #1
 800be86:	76fb      	strb	r3, [r7, #27]
 800be88:	e020      	b.n	800becc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be8e:	4b94      	ldr	r3, [pc, #592]	; (800c0e0 <tcp_process+0x2a0>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	429a      	cmp	r2, r3
 800be94:	d102      	bne.n	800be9c <tcp_process+0x5c>
        acceptable = 1;
 800be96:	2301      	movs	r3, #1
 800be98:	76fb      	strb	r3, [r7, #27]
 800be9a:	e017      	b.n	800becc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be9c:	4b90      	ldr	r3, [pc, #576]	; (800c0e0 <tcp_process+0x2a0>)
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	db10      	blt.n	800becc <tcp_process+0x8c>
 800beaa:	4b8d      	ldr	r3, [pc, #564]	; (800c0e0 <tcp_process+0x2a0>)
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800beb6:	440b      	add	r3, r1
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dc06      	bgt.n	800becc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	8b5b      	ldrh	r3, [r3, #26]
 800bec2:	f043 0302 	orr.w	r3, r3, #2
 800bec6:	b29a      	uxth	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800becc:	7efb      	ldrb	r3, [r7, #27]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d01b      	beq.n	800bf0a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7d1b      	ldrb	r3, [r3, #20]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d106      	bne.n	800bee8 <tcp_process+0xa8>
 800beda:	4b7c      	ldr	r3, [pc, #496]	; (800c0cc <tcp_process+0x28c>)
 800bedc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bee0:	4980      	ldr	r1, [pc, #512]	; (800c0e4 <tcp_process+0x2a4>)
 800bee2:	487c      	ldr	r0, [pc, #496]	; (800c0d4 <tcp_process+0x294>)
 800bee4:	f007 ff90 	bl	8013e08 <iprintf>
      recv_flags |= TF_RESET;
 800bee8:	4b7f      	ldr	r3, [pc, #508]	; (800c0e8 <tcp_process+0x2a8>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	f043 0308 	orr.w	r3, r3, #8
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	4b7d      	ldr	r3, [pc, #500]	; (800c0e8 <tcp_process+0x2a8>)
 800bef4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	8b5b      	ldrh	r3, [r3, #26]
 800befa:	f023 0301 	bic.w	r3, r3, #1
 800befe:	b29a      	uxth	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bf04:	f06f 030d 	mvn.w	r3, #13
 800bf08:	e37a      	b.n	800c600 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e378      	b.n	800c600 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bf0e:	4b72      	ldr	r3, [pc, #456]	; (800c0d8 <tcp_process+0x298>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d010      	beq.n	800bf3c <tcp_process+0xfc>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	7d1b      	ldrb	r3, [r3, #20]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d00c      	beq.n	800bf3c <tcp_process+0xfc>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	7d1b      	ldrb	r3, [r3, #20]
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d008      	beq.n	800bf3c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8b5b      	ldrh	r3, [r3, #26]
 800bf2e:	f043 0302 	orr.w	r3, r3, #2
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e361      	b.n	800c600 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	8b5b      	ldrh	r3, [r3, #26]
 800bf40:	f003 0310 	and.w	r3, r3, #16
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d103      	bne.n	800bf50 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bf48:	4b68      	ldr	r3, [pc, #416]	; (800c0ec <tcp_process+0x2ac>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 fc2f 	bl	800d7c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	7d1b      	ldrb	r3, [r3, #20]
 800bf6a:	3b02      	subs	r3, #2
 800bf6c:	2b07      	cmp	r3, #7
 800bf6e:	f200 8337 	bhi.w	800c5e0 <tcp_process+0x7a0>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <tcp_process+0x138>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf99 	.word	0x0800bf99
 800bf7c:	0800c1c9 	.word	0x0800c1c9
 800bf80:	0800c341 	.word	0x0800c341
 800bf84:	0800c36b 	.word	0x0800c36b
 800bf88:	0800c48f 	.word	0x0800c48f
 800bf8c:	0800c341 	.word	0x0800c341
 800bf90:	0800c51b 	.word	0x0800c51b
 800bf94:	0800c5ab 	.word	0x0800c5ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bf98:	4b4f      	ldr	r3, [pc, #316]	; (800c0d8 <tcp_process+0x298>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	f003 0310 	and.w	r3, r3, #16
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 80e4 	beq.w	800c16e <tcp_process+0x32e>
 800bfa6:	4b4c      	ldr	r3, [pc, #304]	; (800c0d8 <tcp_process+0x298>)
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f000 80dd 	beq.w	800c16e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb8:	1c5a      	adds	r2, r3, #1
 800bfba:	4b48      	ldr	r3, [pc, #288]	; (800c0dc <tcp_process+0x29c>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	f040 80d5 	bne.w	800c16e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bfc4:	4b46      	ldr	r3, [pc, #280]	; (800c0e0 <tcp_process+0x2a0>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	1c5a      	adds	r2, r3, #1
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bfd6:	4b41      	ldr	r3, [pc, #260]	; (800c0dc <tcp_process+0x29c>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bfde:	4b44      	ldr	r3, [pc, #272]	; (800c0f0 <tcp_process+0x2b0>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	89db      	ldrh	r3, [r3, #14]
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bff8:	4b39      	ldr	r3, [pc, #228]	; (800c0e0 <tcp_process+0x2a0>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	1e5a      	subs	r2, r3, #1
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2204      	movs	r2, #4
 800c006:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3304      	adds	r3, #4
 800c010:	4618      	mov	r0, r3
 800c012:	f006 fc8b 	bl	801292c <ip4_route>
 800c016:	4601      	mov	r1, r0
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3304      	adds	r3, #4
 800c01c:	461a      	mov	r2, r3
 800c01e:	4620      	mov	r0, r4
 800c020:	f7ff f88c 	bl	800b13c <tcp_eff_send_mss_netif>
 800c024:	4603      	mov	r3, r0
 800c026:	461a      	mov	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c030:	009a      	lsls	r2, r3, #2
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	f241 111c 	movw	r1, #4380	; 0x111c
 800c03c:	428b      	cmp	r3, r1
 800c03e:	bf38      	it	cc
 800c040:	460b      	movcc	r3, r1
 800c042:	429a      	cmp	r2, r3
 800c044:	d204      	bcs.n	800c050 <tcp_process+0x210>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	e00d      	b.n	800c06c <tcp_process+0x22c>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	f241 121c 	movw	r2, #4380	; 0x111c
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d904      	bls.n	800c068 <tcp_process+0x228>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	b29b      	uxth	r3, r3
 800c066:	e001      	b.n	800c06c <tcp_process+0x22c>
 800c068:	f241 131c 	movw	r3, #4380	; 0x111c
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d106      	bne.n	800c08a <tcp_process+0x24a>
 800c07c:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <tcp_process+0x28c>)
 800c07e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c082:	491c      	ldr	r1, [pc, #112]	; (800c0f4 <tcp_process+0x2b4>)
 800c084:	4813      	ldr	r0, [pc, #76]	; (800c0d4 <tcp_process+0x294>)
 800c086:	f007 febf 	bl	8013e08 <iprintf>
        --pcb->snd_queuelen;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c090:	3b01      	subs	r3, #1
 800c092:	b29a      	uxth	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c09e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d12a      	bne.n	800c0fc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0aa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <tcp_process+0x280>
 800c0b2:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <tcp_process+0x28c>)
 800c0b4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c0b8:	490f      	ldr	r1, [pc, #60]	; (800c0f8 <tcp_process+0x2b8>)
 800c0ba:	4806      	ldr	r0, [pc, #24]	; (800c0d4 <tcp_process+0x294>)
 800c0bc:	f007 fea4 	bl	8013e08 <iprintf>
          pcb->unsent = rseg->next;
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	66da      	str	r2, [r3, #108]	; 0x6c
 800c0c8:	e01c      	b.n	800c104 <tcp_process+0x2c4>
 800c0ca:	bf00      	nop
 800c0cc:	080165d8 	.word	0x080165d8
 800c0d0:	08016810 	.word	0x08016810
 800c0d4:	08016624 	.word	0x08016624
 800c0d8:	2000af04 	.word	0x2000af04
 800c0dc:	2000aefc 	.word	0x2000aefc
 800c0e0:	2000aef8 	.word	0x2000aef8
 800c0e4:	0801682c 	.word	0x0801682c
 800c0e8:	2000af05 	.word	0x2000af05
 800c0ec:	2000aec0 	.word	0x2000aec0
 800c0f0:	2000aee8 	.word	0x2000aee8
 800c0f4:	0801684c 	.word	0x0801684c
 800c0f8:	08016864 	.word	0x08016864
        } else {
          pcb->unacked = rseg->next;
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c104:	69f8      	ldr	r0, [r7, #28]
 800c106:	f7fe fd22 	bl	800ab4e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d104      	bne.n	800c11c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c118:	861a      	strh	r2, [r3, #48]	; 0x30
 800c11a:	e006      	b.n	800c12a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00a      	beq.n	800c14a <tcp_process+0x30a>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	6910      	ldr	r0, [r2, #16]
 800c13e:	2200      	movs	r2, #0
 800c140:	6879      	ldr	r1, [r7, #4]
 800c142:	4798      	blx	r3
 800c144:	4603      	mov	r3, r0
 800c146:	76bb      	strb	r3, [r7, #26]
 800c148:	e001      	b.n	800c14e <tcp_process+0x30e>
 800c14a:	2300      	movs	r3, #0
 800c14c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c14e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c152:	f113 0f0d 	cmn.w	r3, #13
 800c156:	d102      	bne.n	800c15e <tcp_process+0x31e>
          return ERR_ABRT;
 800c158:	f06f 030c 	mvn.w	r3, #12
 800c15c:	e250      	b.n	800c600 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	8b5b      	ldrh	r3, [r3, #26]
 800c162:	f043 0302 	orr.w	r3, r3, #2
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c16c:	e23a      	b.n	800c5e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c16e:	4b98      	ldr	r3, [pc, #608]	; (800c3d0 <tcp_process+0x590>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	f003 0310 	and.w	r3, r3, #16
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 8234 	beq.w	800c5e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c17c:	4b95      	ldr	r3, [pc, #596]	; (800c3d4 <tcp_process+0x594>)
 800c17e:	6819      	ldr	r1, [r3, #0]
 800c180:	4b95      	ldr	r3, [pc, #596]	; (800c3d8 <tcp_process+0x598>)
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	461a      	mov	r2, r3
 800c186:	4b95      	ldr	r3, [pc, #596]	; (800c3dc <tcp_process+0x59c>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c18c:	4b94      	ldr	r3, [pc, #592]	; (800c3e0 <tcp_process+0x5a0>)
 800c18e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c190:	885b      	ldrh	r3, [r3, #2]
 800c192:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c194:	4a92      	ldr	r2, [pc, #584]	; (800c3e0 <tcp_process+0x5a0>)
 800c196:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c198:	8812      	ldrh	r2, [r2, #0]
 800c19a:	b292      	uxth	r2, r2
 800c19c:	9202      	str	r2, [sp, #8]
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	4b90      	ldr	r3, [pc, #576]	; (800c3e4 <tcp_process+0x5a4>)
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	4b90      	ldr	r3, [pc, #576]	; (800c3e8 <tcp_process+0x5a8>)
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f002 fc85 	bl	800eab8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1b4:	2b05      	cmp	r3, #5
 800c1b6:	f200 8215 	bhi.w	800c5e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f002 fa4f 	bl	800e664 <tcp_rexmit_rto>
      break;
 800c1c6:	e20d      	b.n	800c5e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c1c8:	4b81      	ldr	r3, [pc, #516]	; (800c3d0 <tcp_process+0x590>)
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	f003 0310 	and.w	r3, r3, #16
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 80a1 	beq.w	800c318 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c1d6:	4b7f      	ldr	r3, [pc, #508]	; (800c3d4 <tcp_process+0x594>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	db7e      	blt.n	800c2e4 <tcp_process+0x4a4>
 800c1e6:	4b7b      	ldr	r3, [pc, #492]	; (800c3d4 <tcp_process+0x594>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	dc77      	bgt.n	800c2e4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d102      	bne.n	800c208 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c202:	23fa      	movs	r3, #250	; 0xfa
 800c204:	76bb      	strb	r3, [r7, #26]
 800c206:	e01d      	b.n	800c244 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <tcp_process+0x3e0>
 800c212:	4b76      	ldr	r3, [pc, #472]	; (800c3ec <tcp_process+0x5ac>)
 800c214:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c218:	4975      	ldr	r1, [pc, #468]	; (800c3f0 <tcp_process+0x5b0>)
 800c21a:	4876      	ldr	r0, [pc, #472]	; (800c3f4 <tcp_process+0x5b4>)
 800c21c:	f007 fdf4 	bl	8013e08 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00a      	beq.n	800c240 <tcp_process+0x400>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	6910      	ldr	r0, [r2, #16]
 800c234:	2200      	movs	r2, #0
 800c236:	6879      	ldr	r1, [r7, #4]
 800c238:	4798      	blx	r3
 800c23a:	4603      	mov	r3, r0
 800c23c:	76bb      	strb	r3, [r7, #26]
 800c23e:	e001      	b.n	800c244 <tcp_process+0x404>
 800c240:	23f0      	movs	r3, #240	; 0xf0
 800c242:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c244:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00a      	beq.n	800c262 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c24c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c250:	f113 0f0d 	cmn.w	r3, #13
 800c254:	d002      	beq.n	800c25c <tcp_process+0x41c>
              tcp_abort(pcb);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7fd ff8e 	bl	800a178 <tcp_abort>
            }
            return ERR_ABRT;
 800c25c:	f06f 030c 	mvn.w	r3, #12
 800c260:	e1ce      	b.n	800c600 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fae0 	bl	800c828 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c268:	4b63      	ldr	r3, [pc, #396]	; (800c3f8 <tcp_process+0x5b8>)
 800c26a:	881b      	ldrh	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d005      	beq.n	800c27c <tcp_process+0x43c>
            recv_acked--;
 800c270:	4b61      	ldr	r3, [pc, #388]	; (800c3f8 <tcp_process+0x5b8>)
 800c272:	881b      	ldrh	r3, [r3, #0]
 800c274:	3b01      	subs	r3, #1
 800c276:	b29a      	uxth	r2, r3
 800c278:	4b5f      	ldr	r3, [pc, #380]	; (800c3f8 <tcp_process+0x5b8>)
 800c27a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c280:	009a      	lsls	r2, r3, #2
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	f241 111c 	movw	r1, #4380	; 0x111c
 800c28c:	428b      	cmp	r3, r1
 800c28e:	bf38      	it	cc
 800c290:	460b      	movcc	r3, r1
 800c292:	429a      	cmp	r2, r3
 800c294:	d204      	bcs.n	800c2a0 <tcp_process+0x460>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	e00d      	b.n	800c2bc <tcp_process+0x47c>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2a4:	005b      	lsls	r3, r3, #1
 800c2a6:	f241 121c 	movw	r2, #4380	; 0x111c
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d904      	bls.n	800c2b8 <tcp_process+0x478>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	e001      	b.n	800c2bc <tcp_process+0x47c>
 800c2b8:	f241 131c 	movw	r3, #4380	; 0x111c
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c2c2:	4b4e      	ldr	r3, [pc, #312]	; (800c3fc <tcp_process+0x5bc>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	f003 0320 	and.w	r3, r3, #32
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d037      	beq.n	800c33e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	8b5b      	ldrh	r3, [r3, #26]
 800c2d2:	f043 0302 	orr.w	r3, r3, #2
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2207      	movs	r2, #7
 800c2e0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c2e2:	e02c      	b.n	800c33e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2e4:	4b3b      	ldr	r3, [pc, #236]	; (800c3d4 <tcp_process+0x594>)
 800c2e6:	6819      	ldr	r1, [r3, #0]
 800c2e8:	4b3b      	ldr	r3, [pc, #236]	; (800c3d8 <tcp_process+0x598>)
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	4b3b      	ldr	r3, [pc, #236]	; (800c3dc <tcp_process+0x59c>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2f4:	4b3a      	ldr	r3, [pc, #232]	; (800c3e0 <tcp_process+0x5a0>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2fc:	4a38      	ldr	r2, [pc, #224]	; (800c3e0 <tcp_process+0x5a0>)
 800c2fe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c300:	8812      	ldrh	r2, [r2, #0]
 800c302:	b292      	uxth	r2, r2
 800c304:	9202      	str	r2, [sp, #8]
 800c306:	9301      	str	r3, [sp, #4]
 800c308:	4b36      	ldr	r3, [pc, #216]	; (800c3e4 <tcp_process+0x5a4>)
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	4b36      	ldr	r3, [pc, #216]	; (800c3e8 <tcp_process+0x5a8>)
 800c30e:	4602      	mov	r2, r0
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f002 fbd1 	bl	800eab8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c316:	e167      	b.n	800c5e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c318:	4b2d      	ldr	r3, [pc, #180]	; (800c3d0 <tcp_process+0x590>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	f003 0302 	and.w	r3, r3, #2
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 8161 	beq.w	800c5e8 <tcp_process+0x7a8>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32a:	1e5a      	subs	r2, r3, #1
 800c32c:	4b2b      	ldr	r3, [pc, #172]	; (800c3dc <tcp_process+0x59c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	429a      	cmp	r2, r3
 800c332:	f040 8159 	bne.w	800c5e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f002 f9b6 	bl	800e6a8 <tcp_rexmit>
      break;
 800c33c:	e154      	b.n	800c5e8 <tcp_process+0x7a8>
 800c33e:	e153      	b.n	800c5e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fa71 	bl	800c828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c346:	4b2d      	ldr	r3, [pc, #180]	; (800c3fc <tcp_process+0x5bc>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	f003 0320 	and.w	r3, r3, #32
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 814c 	beq.w	800c5ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	8b5b      	ldrh	r3, [r3, #26]
 800c358:	f043 0302 	orr.w	r3, r3, #2
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2207      	movs	r2, #7
 800c366:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c368:	e140      	b.n	800c5ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fa5c 	bl	800c828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c370:	4b22      	ldr	r3, [pc, #136]	; (800c3fc <tcp_process+0x5bc>)
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 0320 	and.w	r3, r3, #32
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d071      	beq.n	800c460 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c37c:	4b14      	ldr	r3, [pc, #80]	; (800c3d0 <tcp_process+0x590>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f003 0310 	and.w	r3, r3, #16
 800c384:	2b00      	cmp	r3, #0
 800c386:	d060      	beq.n	800c44a <tcp_process+0x60a>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c38c:	4b11      	ldr	r3, [pc, #68]	; (800c3d4 <tcp_process+0x594>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	429a      	cmp	r2, r3
 800c392:	d15a      	bne.n	800c44a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d156      	bne.n	800c44a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8b5b      	ldrh	r3, [r3, #26]
 800c3a0:	f043 0302 	orr.w	r3, r3, #2
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7fe fdbc 	bl	800af28 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c3b0:	4b13      	ldr	r3, [pc, #76]	; (800c400 <tcp_process+0x5c0>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d105      	bne.n	800c3c6 <tcp_process+0x586>
 800c3ba:	4b11      	ldr	r3, [pc, #68]	; (800c400 <tcp_process+0x5c0>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	4a0f      	ldr	r2, [pc, #60]	; (800c400 <tcp_process+0x5c0>)
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	e02e      	b.n	800c424 <tcp_process+0x5e4>
 800c3c6:	4b0e      	ldr	r3, [pc, #56]	; (800c400 <tcp_process+0x5c0>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	617b      	str	r3, [r7, #20]
 800c3cc:	e027      	b.n	800c41e <tcp_process+0x5de>
 800c3ce:	bf00      	nop
 800c3d0:	2000af04 	.word	0x2000af04
 800c3d4:	2000aefc 	.word	0x2000aefc
 800c3d8:	2000af02 	.word	0x2000af02
 800c3dc:	2000aef8 	.word	0x2000aef8
 800c3e0:	2000aee8 	.word	0x2000aee8
 800c3e4:	20005780 	.word	0x20005780
 800c3e8:	20005784 	.word	0x20005784
 800c3ec:	080165d8 	.word	0x080165d8
 800c3f0:	08016878 	.word	0x08016878
 800c3f4:	08016624 	.word	0x08016624
 800c3f8:	2000af00 	.word	0x2000af00
 800c3fc:	2000af05 	.word	0x2000af05
 800c400:	2000aecc 	.word	0x2000aecc
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d104      	bne.n	800c418 <tcp_process+0x5d8>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	68da      	ldr	r2, [r3, #12]
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	60da      	str	r2, [r3, #12]
 800c416:	e005      	b.n	800c424 <tcp_process+0x5e4>
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	617b      	str	r3, [r7, #20]
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1ef      	bne.n	800c404 <tcp_process+0x5c4>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	60da      	str	r2, [r3, #12]
 800c42a:	4b77      	ldr	r3, [pc, #476]	; (800c608 <tcp_process+0x7c8>)
 800c42c:	2201      	movs	r2, #1
 800c42e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	220a      	movs	r2, #10
 800c434:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c436:	4b75      	ldr	r3, [pc, #468]	; (800c60c <tcp_process+0x7cc>)
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	60da      	str	r2, [r3, #12]
 800c43e:	4a73      	ldr	r2, [pc, #460]	; (800c60c <tcp_process+0x7cc>)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6013      	str	r3, [r2, #0]
 800c444:	f002 fcfa 	bl	800ee3c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c448:	e0d2      	b.n	800c5f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	8b5b      	ldrh	r3, [r3, #26]
 800c44e:	f043 0302 	orr.w	r3, r3, #2
 800c452:	b29a      	uxth	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2208      	movs	r2, #8
 800c45c:	751a      	strb	r2, [r3, #20]
      break;
 800c45e:	e0c7      	b.n	800c5f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c460:	4b6b      	ldr	r3, [pc, #428]	; (800c610 <tcp_process+0x7d0>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	f003 0310 	and.w	r3, r3, #16
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f000 80c1 	beq.w	800c5f0 <tcp_process+0x7b0>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c472:	4b68      	ldr	r3, [pc, #416]	; (800c614 <tcp_process+0x7d4>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	429a      	cmp	r2, r3
 800c478:	f040 80ba 	bne.w	800c5f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c480:	2b00      	cmp	r3, #0
 800c482:	f040 80b5 	bne.w	800c5f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2206      	movs	r2, #6
 800c48a:	751a      	strb	r2, [r3, #20]
      break;
 800c48c:	e0b0      	b.n	800c5f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f9ca 	bl	800c828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c494:	4b60      	ldr	r3, [pc, #384]	; (800c618 <tcp_process+0x7d8>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	f003 0320 	and.w	r3, r3, #32
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 80a9 	beq.w	800c5f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	8b5b      	ldrh	r3, [r3, #26]
 800c4a6:	f043 0302 	orr.w	r3, r3, #2
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7fe fd39 	bl	800af28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c4b6:	4b59      	ldr	r3, [pc, #356]	; (800c61c <tcp_process+0x7dc>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d105      	bne.n	800c4cc <tcp_process+0x68c>
 800c4c0:	4b56      	ldr	r3, [pc, #344]	; (800c61c <tcp_process+0x7dc>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	4a55      	ldr	r2, [pc, #340]	; (800c61c <tcp_process+0x7dc>)
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	e013      	b.n	800c4f4 <tcp_process+0x6b4>
 800c4cc:	4b53      	ldr	r3, [pc, #332]	; (800c61c <tcp_process+0x7dc>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	613b      	str	r3, [r7, #16]
 800c4d2:	e00c      	b.n	800c4ee <tcp_process+0x6ae>
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d104      	bne.n	800c4e8 <tcp_process+0x6a8>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68da      	ldr	r2, [r3, #12]
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	60da      	str	r2, [r3, #12]
 800c4e6:	e005      	b.n	800c4f4 <tcp_process+0x6b4>
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	613b      	str	r3, [r7, #16]
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1ef      	bne.n	800c4d4 <tcp_process+0x694>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	60da      	str	r2, [r3, #12]
 800c4fa:	4b43      	ldr	r3, [pc, #268]	; (800c608 <tcp_process+0x7c8>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	220a      	movs	r2, #10
 800c504:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c506:	4b41      	ldr	r3, [pc, #260]	; (800c60c <tcp_process+0x7cc>)
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	60da      	str	r2, [r3, #12]
 800c50e:	4a3f      	ldr	r2, [pc, #252]	; (800c60c <tcp_process+0x7cc>)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6013      	str	r3, [r2, #0]
 800c514:	f002 fc92 	bl	800ee3c <tcp_timer_needed>
      }
      break;
 800c518:	e06c      	b.n	800c5f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f984 	bl	800c828 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c520:	4b3b      	ldr	r3, [pc, #236]	; (800c610 <tcp_process+0x7d0>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	f003 0310 	and.w	r3, r3, #16
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d065      	beq.n	800c5f8 <tcp_process+0x7b8>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c530:	4b38      	ldr	r3, [pc, #224]	; (800c614 <tcp_process+0x7d4>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	429a      	cmp	r2, r3
 800c536:	d15f      	bne.n	800c5f8 <tcp_process+0x7b8>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d15b      	bne.n	800c5f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7fe fcf1 	bl	800af28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c546:	4b35      	ldr	r3, [pc, #212]	; (800c61c <tcp_process+0x7dc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d105      	bne.n	800c55c <tcp_process+0x71c>
 800c550:	4b32      	ldr	r3, [pc, #200]	; (800c61c <tcp_process+0x7dc>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	4a31      	ldr	r2, [pc, #196]	; (800c61c <tcp_process+0x7dc>)
 800c558:	6013      	str	r3, [r2, #0]
 800c55a:	e013      	b.n	800c584 <tcp_process+0x744>
 800c55c:	4b2f      	ldr	r3, [pc, #188]	; (800c61c <tcp_process+0x7dc>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	e00c      	b.n	800c57e <tcp_process+0x73e>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d104      	bne.n	800c578 <tcp_process+0x738>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	68da      	ldr	r2, [r3, #12]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	60da      	str	r2, [r3, #12]
 800c576:	e005      	b.n	800c584 <tcp_process+0x744>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1ef      	bne.n	800c564 <tcp_process+0x724>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	60da      	str	r2, [r3, #12]
 800c58a:	4b1f      	ldr	r3, [pc, #124]	; (800c608 <tcp_process+0x7c8>)
 800c58c:	2201      	movs	r2, #1
 800c58e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	220a      	movs	r2, #10
 800c594:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c596:	4b1d      	ldr	r3, [pc, #116]	; (800c60c <tcp_process+0x7cc>)
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	60da      	str	r2, [r3, #12]
 800c59e:	4a1b      	ldr	r2, [pc, #108]	; (800c60c <tcp_process+0x7cc>)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	f002 fc4a 	bl	800ee3c <tcp_timer_needed>
      }
      break;
 800c5a8:	e026      	b.n	800c5f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 f93c 	bl	800c828 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c5b0:	4b17      	ldr	r3, [pc, #92]	; (800c610 <tcp_process+0x7d0>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f003 0310 	and.w	r3, r3, #16
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01f      	beq.n	800c5fc <tcp_process+0x7bc>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5c0:	4b14      	ldr	r3, [pc, #80]	; (800c614 <tcp_process+0x7d4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d119      	bne.n	800c5fc <tcp_process+0x7bc>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d115      	bne.n	800c5fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c5d0:	4b11      	ldr	r3, [pc, #68]	; (800c618 <tcp_process+0x7d8>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	f043 0310 	orr.w	r3, r3, #16
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	4b0f      	ldr	r3, [pc, #60]	; (800c618 <tcp_process+0x7d8>)
 800c5dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c5de:	e00d      	b.n	800c5fc <tcp_process+0x7bc>
    default:
      break;
 800c5e0:	bf00      	nop
 800c5e2:	e00c      	b.n	800c5fe <tcp_process+0x7be>
      break;
 800c5e4:	bf00      	nop
 800c5e6:	e00a      	b.n	800c5fe <tcp_process+0x7be>
      break;
 800c5e8:	bf00      	nop
 800c5ea:	e008      	b.n	800c5fe <tcp_process+0x7be>
      break;
 800c5ec:	bf00      	nop
 800c5ee:	e006      	b.n	800c5fe <tcp_process+0x7be>
      break;
 800c5f0:	bf00      	nop
 800c5f2:	e004      	b.n	800c5fe <tcp_process+0x7be>
      break;
 800c5f4:	bf00      	nop
 800c5f6:	e002      	b.n	800c5fe <tcp_process+0x7be>
      break;
 800c5f8:	bf00      	nop
 800c5fa:	e000      	b.n	800c5fe <tcp_process+0x7be>
      break;
 800c5fc:	bf00      	nop
  }
  return ERR_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3724      	adds	r7, #36	; 0x24
 800c604:	46bd      	mov	sp, r7
 800c606:	bd90      	pop	{r4, r7, pc}
 800c608:	2000aed4 	.word	0x2000aed4
 800c60c:	2000aed0 	.word	0x2000aed0
 800c610:	2000af04 	.word	0x2000af04
 800c614:	2000aefc 	.word	0x2000aefc
 800c618:	2000af05 	.word	0x2000af05
 800c61c:	2000aecc 	.word	0x2000aecc

0800c620 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c620:	b590      	push	{r4, r7, lr}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d106      	bne.n	800c63e <tcp_oos_insert_segment+0x1e>
 800c630:	4b3b      	ldr	r3, [pc, #236]	; (800c720 <tcp_oos_insert_segment+0x100>)
 800c632:	f240 421f 	movw	r2, #1055	; 0x41f
 800c636:	493b      	ldr	r1, [pc, #236]	; (800c724 <tcp_oos_insert_segment+0x104>)
 800c638:	483b      	ldr	r0, [pc, #236]	; (800c728 <tcp_oos_insert_segment+0x108>)
 800c63a:	f007 fbe5 	bl	8013e08 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	899b      	ldrh	r3, [r3, #12]
 800c644:	b29b      	uxth	r3, r3
 800c646:	4618      	mov	r0, r3
 800c648:	f7fb fc94 	bl	8007f74 <lwip_htons>
 800c64c:	4603      	mov	r3, r0
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	f003 0301 	and.w	r3, r3, #1
 800c654:	2b00      	cmp	r3, #0
 800c656:	d028      	beq.n	800c6aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c658:	6838      	ldr	r0, [r7, #0]
 800c65a:	f7fe fa63 	bl	800ab24 <tcp_segs_free>
    next = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	603b      	str	r3, [r7, #0]
 800c662:	e056      	b.n	800c712 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	899b      	ldrh	r3, [r3, #12]
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7fb fc81 	bl	8007f74 <lwip_htons>
 800c672:	4603      	mov	r3, r0
 800c674:	b2db      	uxtb	r3, r3
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00d      	beq.n	800c69a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	899b      	ldrh	r3, [r3, #12]
 800c684:	b29c      	uxth	r4, r3
 800c686:	2001      	movs	r0, #1
 800c688:	f7fb fc74 	bl	8007f74 <lwip_htons>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	4322      	orrs	r2, r4
 800c696:	b292      	uxth	r2, r2
 800c698:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7fe fa52 	bl	800ab4e <tcp_seg_free>
    while (next &&
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00e      	beq.n	800c6ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	891b      	ldrh	r3, [r3, #8]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	4b1d      	ldr	r3, [pc, #116]	; (800c72c <tcp_oos_insert_segment+0x10c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	441a      	add	r2, r3
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	8909      	ldrh	r1, [r1, #8]
 800c6c6:	440b      	add	r3, r1
 800c6c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	daca      	bge.n	800c664 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d01e      	beq.n	800c712 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	891b      	ldrh	r3, [r3, #8]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	4b14      	ldr	r3, [pc, #80]	; (800c72c <tcp_oos_insert_segment+0x10c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	441a      	add	r2, r3
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	dd12      	ble.n	800c712 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	4b0d      	ldr	r3, [pc, #52]	; (800c72c <tcp_oos_insert_segment+0x10c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	891b      	ldrh	r3, [r3, #8]
 800c70a:	4619      	mov	r1, r3
 800c70c:	4610      	mov	r0, r2
 800c70e:	f7fc fe15 	bl	800933c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	601a      	str	r2, [r3, #0]
}
 800c718:	bf00      	nop
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd90      	pop	{r4, r7, pc}
 800c720:	080165d8 	.word	0x080165d8
 800c724:	08016898 	.word	0x08016898
 800c728:	08016624 	.word	0x08016624
 800c72c:	2000aef8 	.word	0x2000aef8

0800c730 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c730:	b5b0      	push	{r4, r5, r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c73e:	e03e      	b.n	800c7be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fd f802 	bl	8009758 <pbuf_clen>
 800c754:	4603      	mov	r3, r0
 800c756:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c75e:	8a7a      	ldrh	r2, [r7, #18]
 800c760:	429a      	cmp	r2, r3
 800c762:	d906      	bls.n	800c772 <tcp_free_acked_segments+0x42>
 800c764:	4b2a      	ldr	r3, [pc, #168]	; (800c810 <tcp_free_acked_segments+0xe0>)
 800c766:	f240 4257 	movw	r2, #1111	; 0x457
 800c76a:	492a      	ldr	r1, [pc, #168]	; (800c814 <tcp_free_acked_segments+0xe4>)
 800c76c:	482a      	ldr	r0, [pc, #168]	; (800c818 <tcp_free_acked_segments+0xe8>)
 800c76e:	f007 fb4b 	bl	8013e08 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c778:	8a7b      	ldrh	r3, [r7, #18]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	891a      	ldrh	r2, [r3, #8]
 800c788:	4b24      	ldr	r3, [pc, #144]	; (800c81c <tcp_free_acked_segments+0xec>)
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	4413      	add	r3, r2
 800c78e:	b29a      	uxth	r2, r3
 800c790:	4b22      	ldr	r3, [pc, #136]	; (800c81c <tcp_free_acked_segments+0xec>)
 800c792:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c794:	6978      	ldr	r0, [r7, #20]
 800c796:	f7fe f9da 	bl	800ab4e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00c      	beq.n	800c7be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d109      	bne.n	800c7be <tcp_free_acked_segments+0x8e>
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d106      	bne.n	800c7be <tcp_free_acked_segments+0x8e>
 800c7b0:	4b17      	ldr	r3, [pc, #92]	; (800c810 <tcp_free_acked_segments+0xe0>)
 800c7b2:	f240 4261 	movw	r2, #1121	; 0x461
 800c7b6:	491a      	ldr	r1, [pc, #104]	; (800c820 <tcp_free_acked_segments+0xf0>)
 800c7b8:	4817      	ldr	r0, [pc, #92]	; (800c818 <tcp_free_acked_segments+0xe8>)
 800c7ba:	f007 fb25 	bl	8013e08 <iprintf>
  while (seg_list != NULL &&
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d020      	beq.n	800c806 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fb fbe7 	bl	8007f9e <lwip_htonl>
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	891b      	ldrh	r3, [r3, #8]
 800c7d6:	461d      	mov	r5, r3
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	899b      	ldrh	r3, [r3, #12]
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fb fbc7 	bl	8007f74 <lwip_htons>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	f003 0303 	and.w	r3, r3, #3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <tcp_free_acked_segments+0xc6>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e000      	b.n	800c7f8 <tcp_free_acked_segments+0xc8>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	442b      	add	r3, r5
 800c7fa:	18e2      	adds	r2, r4, r3
 800c7fc:	4b09      	ldr	r3, [pc, #36]	; (800c824 <tcp_free_acked_segments+0xf4>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c802:	2b00      	cmp	r3, #0
 800c804:	dd9c      	ble.n	800c740 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c806:	68bb      	ldr	r3, [r7, #8]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bdb0      	pop	{r4, r5, r7, pc}
 800c810:	080165d8 	.word	0x080165d8
 800c814:	080168c0 	.word	0x080168c0
 800c818:	08016624 	.word	0x08016624
 800c81c:	2000af00 	.word	0x2000af00
 800c820:	080168e8 	.word	0x080168e8
 800c824:	2000aefc 	.word	0x2000aefc

0800c828 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c828:	b5b0      	push	{r4, r5, r7, lr}
 800c82a:	b094      	sub	sp, #80	; 0x50
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c830:	2300      	movs	r3, #0
 800c832:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d106      	bne.n	800c848 <tcp_receive+0x20>
 800c83a:	4b91      	ldr	r3, [pc, #580]	; (800ca80 <tcp_receive+0x258>)
 800c83c:	f240 427b 	movw	r2, #1147	; 0x47b
 800c840:	4990      	ldr	r1, [pc, #576]	; (800ca84 <tcp_receive+0x25c>)
 800c842:	4891      	ldr	r0, [pc, #580]	; (800ca88 <tcp_receive+0x260>)
 800c844:	f007 fae0 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7d1b      	ldrb	r3, [r3, #20]
 800c84c:	2b03      	cmp	r3, #3
 800c84e:	d806      	bhi.n	800c85e <tcp_receive+0x36>
 800c850:	4b8b      	ldr	r3, [pc, #556]	; (800ca80 <tcp_receive+0x258>)
 800c852:	f240 427c 	movw	r2, #1148	; 0x47c
 800c856:	498d      	ldr	r1, [pc, #564]	; (800ca8c <tcp_receive+0x264>)
 800c858:	488b      	ldr	r0, [pc, #556]	; (800ca88 <tcp_receive+0x260>)
 800c85a:	f007 fad5 	bl	8013e08 <iprintf>

  if (flags & TCP_ACK) {
 800c85e:	4b8c      	ldr	r3, [pc, #560]	; (800ca90 <tcp_receive+0x268>)
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	f003 0310 	and.w	r3, r3, #16
 800c866:	2b00      	cmp	r3, #0
 800c868:	f000 8264 	beq.w	800cd34 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c872:	461a      	mov	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c878:	4413      	add	r3, r2
 800c87a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c880:	4b84      	ldr	r3, [pc, #528]	; (800ca94 <tcp_receive+0x26c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	db1b      	blt.n	800c8c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c88e:	4b81      	ldr	r3, [pc, #516]	; (800ca94 <tcp_receive+0x26c>)
 800c890:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c892:	429a      	cmp	r2, r3
 800c894:	d106      	bne.n	800c8a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c89a:	4b7f      	ldr	r3, [pc, #508]	; (800ca98 <tcp_receive+0x270>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	db0e      	blt.n	800c8c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c8a8:	4b7b      	ldr	r3, [pc, #492]	; (800ca98 <tcp_receive+0x270>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d125      	bne.n	800c8fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c8b0:	4b7a      	ldr	r3, [pc, #488]	; (800ca9c <tcp_receive+0x274>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	89db      	ldrh	r3, [r3, #14]
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d91c      	bls.n	800c8fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c8c2:	4b76      	ldr	r3, [pc, #472]	; (800ca9c <tcp_receive+0x274>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	89db      	ldrh	r3, [r3, #14]
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d205      	bcs.n	800c8ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c8ec:	4b69      	ldr	r3, [pc, #420]	; (800ca94 <tcp_receive+0x26c>)
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c8f4:	4b68      	ldr	r3, [pc, #416]	; (800ca98 <tcp_receive+0x270>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c8fc:	4b66      	ldr	r3, [pc, #408]	; (800ca98 <tcp_receive+0x270>)
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	dc58      	bgt.n	800c9bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c90a:	4b65      	ldr	r3, [pc, #404]	; (800caa0 <tcp_receive+0x278>)
 800c90c:	881b      	ldrh	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d14b      	bne.n	800c9aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c91c:	4413      	add	r3, r2
 800c91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c920:	429a      	cmp	r2, r3
 800c922:	d142      	bne.n	800c9aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	db3d      	blt.n	800c9aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c932:	4b59      	ldr	r3, [pc, #356]	; (800ca98 <tcp_receive+0x270>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	429a      	cmp	r2, r3
 800c938:	d137      	bne.n	800c9aa <tcp_receive+0x182>
              found_dupack = 1;
 800c93a:	2301      	movs	r3, #1
 800c93c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c944:	2bff      	cmp	r3, #255	; 0xff
 800c946:	d007      	beq.n	800c958 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c94e:	3301      	adds	r3, #1
 800c950:	b2da      	uxtb	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c95e:	2b03      	cmp	r3, #3
 800c960:	d91b      	bls.n	800c99a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c96c:	4413      	add	r3, r2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c976:	429a      	cmp	r2, r3
 800c978:	d30a      	bcc.n	800c990 <tcp_receive+0x168>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c984:	4413      	add	r3, r2
 800c986:	b29a      	uxth	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c98e:	e004      	b.n	800c99a <tcp_receive+0x172>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c996:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d902      	bls.n	800c9aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f001 feeb 	bl	800e780 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f040 8161 	bne.w	800cc74 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9ba:	e15b      	b.n	800cc74 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9bc:	4b36      	ldr	r3, [pc, #216]	; (800ca98 <tcp_receive+0x270>)
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f2c0 814e 	blt.w	800cc6a <tcp_receive+0x442>
 800c9ce:	4b32      	ldr	r3, [pc, #200]	; (800ca98 <tcp_receive+0x270>)
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f300 8146 	bgt.w	800cc6a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8b5b      	ldrh	r3, [r3, #26]
 800c9e2:	f003 0304 	and.w	r3, r3, #4
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d010      	beq.n	800ca0c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	8b5b      	ldrh	r3, [r3, #26]
 800c9ee:	f023 0304 	bic.w	r3, r3, #4
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca1a:	10db      	asrs	r3, r3, #3
 800ca1c:	b21b      	sxth	r3, r3
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	4413      	add	r3, r2
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	b21a      	sxth	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ca34:	4b18      	ldr	r3, [pc, #96]	; (800ca98 <tcp_receive+0x270>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	b29a      	uxth	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ca4c:	4b12      	ldr	r3, [pc, #72]	; (800ca98 <tcp_receive+0x270>)
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	7d1b      	ldrb	r3, [r3, #20]
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	f240 8097 	bls.w	800cb8c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d245      	bcs.n	800cafa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	8b5b      	ldrh	r3, [r3, #26]
 800ca72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d014      	beq.n	800caa4 <tcp_receive+0x27c>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e013      	b.n	800caa6 <tcp_receive+0x27e>
 800ca7e:	bf00      	nop
 800ca80:	080165d8 	.word	0x080165d8
 800ca84:	08016908 	.word	0x08016908
 800ca88:	08016624 	.word	0x08016624
 800ca8c:	08016924 	.word	0x08016924
 800ca90:	2000af04 	.word	0x2000af04
 800ca94:	2000aef8 	.word	0x2000aef8
 800ca98:	2000aefc 	.word	0x2000aefc
 800ca9c:	2000aee8 	.word	0x2000aee8
 800caa0:	2000af02 	.word	0x2000af02
 800caa4:	2302      	movs	r3, #2
 800caa6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800caaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800caae:	b29a      	uxth	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cab4:	fb12 f303 	smulbb	r3, r2, r3
 800cab8:	b29b      	uxth	r3, r3
 800caba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cabc:	4293      	cmp	r3, r2
 800cabe:	bf28      	it	cs
 800cac0:	4613      	movcs	r3, r2
 800cac2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800caca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cacc:	4413      	add	r3, r2
 800cace:	b29a      	uxth	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d309      	bcc.n	800caee <tcp_receive+0x2c6>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cae0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cae2:	4413      	add	r3, r2
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800caec:	e04e      	b.n	800cb8c <tcp_receive+0x364>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800caf8:	e048      	b.n	800cb8c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb02:	4413      	add	r3, r2
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d309      	bcc.n	800cb24 <tcp_receive+0x2fc>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb18:	4413      	add	r3, r2
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb22:	e004      	b.n	800cb2e <tcp_receive+0x306>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d326      	bcc.n	800cb8c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb5e:	4413      	add	r3, r2
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d30a      	bcc.n	800cb82 <tcp_receive+0x35a>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb76:	4413      	add	r3, r2
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb80:	e004      	b.n	800cb8c <tcp_receive+0x364>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb94:	4a98      	ldr	r2, [pc, #608]	; (800cdf8 <tcp_receive+0x5d0>)
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7ff fdca 	bl	800c730 <tcp_free_acked_segments>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbaa:	4a94      	ldr	r2, [pc, #592]	; (800cdfc <tcp_receive+0x5d4>)
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7ff fdbf 	bl	800c730 <tcp_free_acked_segments>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d104      	bne.n	800cbca <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbc6:	861a      	strh	r2, [r3, #48]	; 0x30
 800cbc8:	e002      	b.n	800cbd0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d103      	bne.n	800cbe6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cbec:	4b84      	ldr	r3, [pc, #528]	; (800ce00 <tcp_receive+0x5d8>)
 800cbee:	881b      	ldrh	r3, [r3, #0]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	8b5b      	ldrh	r3, [r3, #26]
 800cbfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d035      	beq.n	800cc72 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d118      	bne.n	800cc40 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00c      	beq.n	800cc30 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fb f9bb 	bl	8007f9e <lwip_htonl>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dc20      	bgt.n	800cc72 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	8b5b      	ldrh	r3, [r3, #26]
 800cc34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc3e:	e018      	b.n	800cc72 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fb f9a6 	bl	8007f9e <lwip_htonl>
 800cc52:	4603      	mov	r3, r0
 800cc54:	1ae3      	subs	r3, r4, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	dc0b      	bgt.n	800cc72 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	8b5b      	ldrh	r3, [r3, #26]
 800cc5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc68:	e003      	b.n	800cc72 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f001 ff76 	bl	800eb5c <tcp_send_empty_ack>
 800cc70:	e000      	b.n	800cc74 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc72:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d05b      	beq.n	800cd34 <tcp_receive+0x50c>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc80:	4b60      	ldr	r3, [pc, #384]	; (800ce04 <tcp_receive+0x5dc>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	da54      	bge.n	800cd34 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cc8a:	4b5f      	ldr	r3, [pc, #380]	; (800ce08 <tcp_receive+0x5e0>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cc9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cca8:	10db      	asrs	r3, r3, #3
 800ccaa:	b21b      	sxth	r3, r3
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ccc2:	4413      	add	r3, r2
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	b21a      	sxth	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cccc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	da05      	bge.n	800cce0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ccd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ccd8:	425b      	negs	r3, r3
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cce0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ccea:	109b      	asrs	r3, r3, #2
 800ccec:	b21b      	sxth	r3, r3
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd04:	4413      	add	r3, r2
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	b21a      	sxth	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd14:	10db      	asrs	r3, r3, #3
 800cd16:	b21b      	sxth	r3, r3
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	4413      	add	r3, r2
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	b21a      	sxth	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cd34:	4b35      	ldr	r3, [pc, #212]	; (800ce0c <tcp_receive+0x5e4>)
 800cd36:	881b      	ldrh	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f000 84e2 	beq.w	800d702 <tcp_receive+0xeda>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7d1b      	ldrb	r3, [r3, #20]
 800cd42:	2b06      	cmp	r3, #6
 800cd44:	f200 84dd 	bhi.w	800d702 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd4c:	4b30      	ldr	r3, [pc, #192]	; (800ce10 <tcp_receive+0x5e8>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	3b01      	subs	r3, #1
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f2c0 808f 	blt.w	800ce78 <tcp_receive+0x650>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd5e:	4b2b      	ldr	r3, [pc, #172]	; (800ce0c <tcp_receive+0x5e4>)
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	4619      	mov	r1, r3
 800cd64:	4b2a      	ldr	r3, [pc, #168]	; (800ce10 <tcp_receive+0x5e8>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	440b      	add	r3, r1
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f300 8082 	bgt.w	800ce78 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cd74:	4b27      	ldr	r3, [pc, #156]	; (800ce14 <tcp_receive+0x5ec>)
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd7e:	4b24      	ldr	r3, [pc, #144]	; (800ce10 <tcp_receive+0x5e8>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cd86:	4b23      	ldr	r3, [pc, #140]	; (800ce14 <tcp_receive+0x5ec>)
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d106      	bne.n	800cd9c <tcp_receive+0x574>
 800cd8e:	4b22      	ldr	r3, [pc, #136]	; (800ce18 <tcp_receive+0x5f0>)
 800cd90:	f240 5294 	movw	r2, #1428	; 0x594
 800cd94:	4921      	ldr	r1, [pc, #132]	; (800ce1c <tcp_receive+0x5f4>)
 800cd96:	4822      	ldr	r0, [pc, #136]	; (800ce20 <tcp_receive+0x5f8>)
 800cd98:	f007 f836 	bl	8013e08 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d906      	bls.n	800cdb4 <tcp_receive+0x58c>
 800cda6:	4b1c      	ldr	r3, [pc, #112]	; (800ce18 <tcp_receive+0x5f0>)
 800cda8:	f240 5295 	movw	r2, #1429	; 0x595
 800cdac:	491d      	ldr	r1, [pc, #116]	; (800ce24 <tcp_receive+0x5fc>)
 800cdae:	481c      	ldr	r0, [pc, #112]	; (800ce20 <tcp_receive+0x5f8>)
 800cdb0:	f007 f82a 	bl	8013e08 <iprintf>
      off = (u16_t)off32;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cdba:	4b16      	ldr	r3, [pc, #88]	; (800ce14 <tcp_receive+0x5ec>)
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	891b      	ldrh	r3, [r3, #8]
 800cdc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d906      	bls.n	800cdd6 <tcp_receive+0x5ae>
 800cdc8:	4b13      	ldr	r3, [pc, #76]	; (800ce18 <tcp_receive+0x5f0>)
 800cdca:	f240 5297 	movw	r2, #1431	; 0x597
 800cdce:	4916      	ldr	r1, [pc, #88]	; (800ce28 <tcp_receive+0x600>)
 800cdd0:	4813      	ldr	r0, [pc, #76]	; (800ce20 <tcp_receive+0x5f8>)
 800cdd2:	f007 f819 	bl	8013e08 <iprintf>
      inseg.len -= off;
 800cdd6:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <tcp_receive+0x5ec>)
 800cdd8:	891a      	ldrh	r2, [r3, #8]
 800cdda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <tcp_receive+0x5ec>)
 800cde4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cde6:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <tcp_receive+0x5ec>)
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	891a      	ldrh	r2, [r3, #8]
 800cdec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800cdf4:	e02a      	b.n	800ce4c <tcp_receive+0x624>
 800cdf6:	bf00      	nop
 800cdf8:	08016940 	.word	0x08016940
 800cdfc:	08016948 	.word	0x08016948
 800ce00:	2000af00 	.word	0x2000af00
 800ce04:	2000aefc 	.word	0x2000aefc
 800ce08:	2000aec0 	.word	0x2000aec0
 800ce0c:	2000af02 	.word	0x2000af02
 800ce10:	2000aef8 	.word	0x2000aef8
 800ce14:	2000aed8 	.word	0x2000aed8
 800ce18:	080165d8 	.word	0x080165d8
 800ce1c:	08016950 	.word	0x08016950
 800ce20:	08016624 	.word	0x08016624
 800ce24:	08016960 	.word	0x08016960
 800ce28:	08016970 	.word	0x08016970
        off -= p->len;
 800ce2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce2e:	895b      	ldrh	r3, [r3, #10]
 800ce30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ce3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce3c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ce3e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ce40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce42:	2200      	movs	r2, #0
 800ce44:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ce46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ce4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce4e:	895b      	ldrh	r3, [r3, #10]
 800ce50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d8e9      	bhi.n	800ce2c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ce58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ce60:	f7fc fb6c 	bl	800953c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce68:	4a91      	ldr	r2, [pc, #580]	; (800d0b0 <tcp_receive+0x888>)
 800ce6a:	6013      	str	r3, [r2, #0]
 800ce6c:	4b91      	ldr	r3, [pc, #580]	; (800d0b4 <tcp_receive+0x88c>)
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	4a8f      	ldr	r2, [pc, #572]	; (800d0b0 <tcp_receive+0x888>)
 800ce72:	6812      	ldr	r2, [r2, #0]
 800ce74:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ce76:	e00d      	b.n	800ce94 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ce78:	4b8d      	ldr	r3, [pc, #564]	; (800d0b0 <tcp_receive+0x888>)
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	da06      	bge.n	800ce94 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	8b5b      	ldrh	r3, [r3, #26]
 800ce8a:	f043 0302 	orr.w	r3, r3, #2
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ce94:	4b86      	ldr	r3, [pc, #536]	; (800d0b0 <tcp_receive+0x888>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f2c0 842a 	blt.w	800d6f8 <tcp_receive+0xed0>
 800cea4:	4b82      	ldr	r3, [pc, #520]	; (800d0b0 <tcp_receive+0x888>)
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	6879      	ldr	r1, [r7, #4]
 800ceae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ceb0:	440b      	add	r3, r1
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f300 841e 	bgt.w	800d6f8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cec0:	4b7b      	ldr	r3, [pc, #492]	; (800d0b0 <tcp_receive+0x888>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	f040 829a 	bne.w	800d3fe <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ceca:	4b7a      	ldr	r3, [pc, #488]	; (800d0b4 <tcp_receive+0x88c>)
 800cecc:	891c      	ldrh	r4, [r3, #8]
 800cece:	4b79      	ldr	r3, [pc, #484]	; (800d0b4 <tcp_receive+0x88c>)
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	899b      	ldrh	r3, [r3, #12]
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fb f84c 	bl	8007f74 <lwip_htons>
 800cedc:	4603      	mov	r3, r0
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	f003 0303 	and.w	r3, r3, #3
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <tcp_receive+0x6c4>
 800cee8:	2301      	movs	r3, #1
 800ceea:	e000      	b.n	800ceee <tcp_receive+0x6c6>
 800ceec:	2300      	movs	r3, #0
 800ceee:	4423      	add	r3, r4
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	4b71      	ldr	r3, [pc, #452]	; (800d0b8 <tcp_receive+0x890>)
 800cef4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cefa:	4b6f      	ldr	r3, [pc, #444]	; (800d0b8 <tcp_receive+0x890>)
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d275      	bcs.n	800cfee <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf02:	4b6c      	ldr	r3, [pc, #432]	; (800d0b4 <tcp_receive+0x88c>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	899b      	ldrh	r3, [r3, #12]
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fb f832 	bl	8007f74 <lwip_htons>
 800cf10:	4603      	mov	r3, r0
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	f003 0301 	and.w	r3, r3, #1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d01f      	beq.n	800cf5c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cf1c:	4b65      	ldr	r3, [pc, #404]	; (800d0b4 <tcp_receive+0x88c>)
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	899b      	ldrh	r3, [r3, #12]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	b21b      	sxth	r3, r3
 800cf26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf2a:	b21c      	sxth	r4, r3
 800cf2c:	4b61      	ldr	r3, [pc, #388]	; (800d0b4 <tcp_receive+0x88c>)
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	899b      	ldrh	r3, [r3, #12]
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fb f81d 	bl	8007f74 <lwip_htons>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7fb f814 	bl	8007f74 <lwip_htons>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	b21b      	sxth	r3, r3
 800cf50:	4323      	orrs	r3, r4
 800cf52:	b21a      	sxth	r2, r3
 800cf54:	4b57      	ldr	r3, [pc, #348]	; (800d0b4 <tcp_receive+0x88c>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	b292      	uxth	r2, r2
 800cf5a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf60:	4b54      	ldr	r3, [pc, #336]	; (800d0b4 <tcp_receive+0x88c>)
 800cf62:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cf64:	4b53      	ldr	r3, [pc, #332]	; (800d0b4 <tcp_receive+0x88c>)
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	899b      	ldrh	r3, [r3, #12]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fb f801 	bl	8007f74 <lwip_htons>
 800cf72:	4603      	mov	r3, r0
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	f003 0302 	and.w	r3, r3, #2
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d005      	beq.n	800cf8a <tcp_receive+0x762>
            inseg.len -= 1;
 800cf7e:	4b4d      	ldr	r3, [pc, #308]	; (800d0b4 <tcp_receive+0x88c>)
 800cf80:	891b      	ldrh	r3, [r3, #8]
 800cf82:	3b01      	subs	r3, #1
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	4b4b      	ldr	r3, [pc, #300]	; (800d0b4 <tcp_receive+0x88c>)
 800cf88:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cf8a:	4b4a      	ldr	r3, [pc, #296]	; (800d0b4 <tcp_receive+0x88c>)
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	4a49      	ldr	r2, [pc, #292]	; (800d0b4 <tcp_receive+0x88c>)
 800cf90:	8912      	ldrh	r2, [r2, #8]
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fc f9d1 	bl	800933c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cf9a:	4b46      	ldr	r3, [pc, #280]	; (800d0b4 <tcp_receive+0x88c>)
 800cf9c:	891c      	ldrh	r4, [r3, #8]
 800cf9e:	4b45      	ldr	r3, [pc, #276]	; (800d0b4 <tcp_receive+0x88c>)
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	899b      	ldrh	r3, [r3, #12]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fa ffe4 	bl	8007f74 <lwip_htons>
 800cfac:	4603      	mov	r3, r0
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	f003 0303 	and.w	r3, r3, #3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <tcp_receive+0x794>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e000      	b.n	800cfbe <tcp_receive+0x796>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	4423      	add	r3, r4
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	4b3d      	ldr	r3, [pc, #244]	; (800d0b8 <tcp_receive+0x890>)
 800cfc4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cfc6:	4b3c      	ldr	r3, [pc, #240]	; (800d0b8 <tcp_receive+0x890>)
 800cfc8:	881b      	ldrh	r3, [r3, #0]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	4b38      	ldr	r3, [pc, #224]	; (800d0b0 <tcp_receive+0x888>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	441a      	add	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd6:	6879      	ldr	r1, [r7, #4]
 800cfd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cfda:	440b      	add	r3, r1
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d006      	beq.n	800cfee <tcp_receive+0x7c6>
 800cfe0:	4b36      	ldr	r3, [pc, #216]	; (800d0bc <tcp_receive+0x894>)
 800cfe2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cfe6:	4936      	ldr	r1, [pc, #216]	; (800d0c0 <tcp_receive+0x898>)
 800cfe8:	4836      	ldr	r0, [pc, #216]	; (800d0c4 <tcp_receive+0x89c>)
 800cfea:	f006 ff0d 	bl	8013e08 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f000 80e7 	beq.w	800d1c6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cff8:	4b2e      	ldr	r3, [pc, #184]	; (800d0b4 <tcp_receive+0x88c>)
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	899b      	ldrh	r3, [r3, #12]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	4618      	mov	r0, r3
 800d002:	f7fa ffb7 	bl	8007f74 <lwip_htons>
 800d006:	4603      	mov	r3, r0
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	f003 0301 	and.w	r3, r3, #1
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d010      	beq.n	800d034 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d012:	e00a      	b.n	800d02a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d018:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7fd fd92 	bl	800ab4e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d1f0      	bne.n	800d014 <tcp_receive+0x7ec>
 800d032:	e0c8      	b.n	800d1c6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d038:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d03a:	e052      	b.n	800d0e2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	899b      	ldrh	r3, [r3, #12]
 800d042:	b29b      	uxth	r3, r3
 800d044:	4618      	mov	r0, r3
 800d046:	f7fa ff95 	bl	8007f74 <lwip_htons>
 800d04a:	4603      	mov	r3, r0
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	2b00      	cmp	r3, #0
 800d054:	d03d      	beq.n	800d0d2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d056:	4b17      	ldr	r3, [pc, #92]	; (800d0b4 <tcp_receive+0x88c>)
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	899b      	ldrh	r3, [r3, #12]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fa ff88 	bl	8007f74 <lwip_htons>
 800d064:	4603      	mov	r3, r0
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d130      	bne.n	800d0d2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d070:	4b10      	ldr	r3, [pc, #64]	; (800d0b4 <tcp_receive+0x88c>)
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	899b      	ldrh	r3, [r3, #12]
 800d076:	b29c      	uxth	r4, r3
 800d078:	2001      	movs	r0, #1
 800d07a:	f7fa ff7b 	bl	8007f74 <lwip_htons>
 800d07e:	4603      	mov	r3, r0
 800d080:	461a      	mov	r2, r3
 800d082:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <tcp_receive+0x88c>)
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	4322      	orrs	r2, r4
 800d088:	b292      	uxth	r2, r2
 800d08a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d08c:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <tcp_receive+0x88c>)
 800d08e:	891c      	ldrh	r4, [r3, #8]
 800d090:	4b08      	ldr	r3, [pc, #32]	; (800d0b4 <tcp_receive+0x88c>)
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	899b      	ldrh	r3, [r3, #12]
 800d096:	b29b      	uxth	r3, r3
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fa ff6b 	bl	8007f74 <lwip_htons>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	f003 0303 	and.w	r3, r3, #3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00e      	beq.n	800d0c8 <tcp_receive+0x8a0>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e00d      	b.n	800d0ca <tcp_receive+0x8a2>
 800d0ae:	bf00      	nop
 800d0b0:	2000aef8 	.word	0x2000aef8
 800d0b4:	2000aed8 	.word	0x2000aed8
 800d0b8:	2000af02 	.word	0x2000af02
 800d0bc:	080165d8 	.word	0x080165d8
 800d0c0:	08016980 	.word	0x08016980
 800d0c4:	08016624 	.word	0x08016624
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	4423      	add	r3, r4
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	4b98      	ldr	r3, [pc, #608]	; (800d330 <tcp_receive+0xb08>)
 800d0d0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d0dc:	6938      	ldr	r0, [r7, #16]
 800d0de:	f7fd fd36 	bl	800ab4e <tcp_seg_free>
            while (next &&
 800d0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00e      	beq.n	800d106 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d0e8:	4b91      	ldr	r3, [pc, #580]	; (800d330 <tcp_receive+0xb08>)
 800d0ea:	881b      	ldrh	r3, [r3, #0]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	4b91      	ldr	r3, [pc, #580]	; (800d334 <tcp_receive+0xb0c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	441a      	add	r2, r3
 800d0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d0fc:	8909      	ldrh	r1, [r1, #8]
 800d0fe:	440b      	add	r3, r1
 800d100:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d102:	2b00      	cmp	r3, #0
 800d104:	da9a      	bge.n	800d03c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d059      	beq.n	800d1c0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d10c:	4b88      	ldr	r3, [pc, #544]	; (800d330 <tcp_receive+0xb08>)
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	461a      	mov	r2, r3
 800d112:	4b88      	ldr	r3, [pc, #544]	; (800d334 <tcp_receive+0xb0c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	441a      	add	r2, r3
 800d118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d120:	2b00      	cmp	r3, #0
 800d122:	dd4d      	ble.n	800d1c0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	4b81      	ldr	r3, [pc, #516]	; (800d334 <tcp_receive+0xb0c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	b29b      	uxth	r3, r3
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	b29a      	uxth	r2, r3
 800d136:	4b80      	ldr	r3, [pc, #512]	; (800d338 <tcp_receive+0xb10>)
 800d138:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d13a:	4b7f      	ldr	r3, [pc, #508]	; (800d338 <tcp_receive+0xb10>)
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	899b      	ldrh	r3, [r3, #12]
 800d140:	b29b      	uxth	r3, r3
 800d142:	4618      	mov	r0, r3
 800d144:	f7fa ff16 	bl	8007f74 <lwip_htons>
 800d148:	4603      	mov	r3, r0
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d005      	beq.n	800d160 <tcp_receive+0x938>
                inseg.len -= 1;
 800d154:	4b78      	ldr	r3, [pc, #480]	; (800d338 <tcp_receive+0xb10>)
 800d156:	891b      	ldrh	r3, [r3, #8]
 800d158:	3b01      	subs	r3, #1
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	4b76      	ldr	r3, [pc, #472]	; (800d338 <tcp_receive+0xb10>)
 800d15e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d160:	4b75      	ldr	r3, [pc, #468]	; (800d338 <tcp_receive+0xb10>)
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	4a74      	ldr	r2, [pc, #464]	; (800d338 <tcp_receive+0xb10>)
 800d166:	8912      	ldrh	r2, [r2, #8]
 800d168:	4611      	mov	r1, r2
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fc f8e6 	bl	800933c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d170:	4b71      	ldr	r3, [pc, #452]	; (800d338 <tcp_receive+0xb10>)
 800d172:	891c      	ldrh	r4, [r3, #8]
 800d174:	4b70      	ldr	r3, [pc, #448]	; (800d338 <tcp_receive+0xb10>)
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	899b      	ldrh	r3, [r3, #12]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fa fef9 	bl	8007f74 <lwip_htons>
 800d182:	4603      	mov	r3, r0
 800d184:	b2db      	uxtb	r3, r3
 800d186:	f003 0303 	and.w	r3, r3, #3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <tcp_receive+0x96a>
 800d18e:	2301      	movs	r3, #1
 800d190:	e000      	b.n	800d194 <tcp_receive+0x96c>
 800d192:	2300      	movs	r3, #0
 800d194:	4423      	add	r3, r4
 800d196:	b29a      	uxth	r2, r3
 800d198:	4b65      	ldr	r3, [pc, #404]	; (800d330 <tcp_receive+0xb08>)
 800d19a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d19c:	4b64      	ldr	r3, [pc, #400]	; (800d330 <tcp_receive+0xb08>)
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b64      	ldr	r3, [pc, #400]	; (800d334 <tcp_receive+0xb0c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	441a      	add	r2, r3
 800d1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d006      	beq.n	800d1c0 <tcp_receive+0x998>
 800d1b2:	4b62      	ldr	r3, [pc, #392]	; (800d33c <tcp_receive+0xb14>)
 800d1b4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d1b8:	4961      	ldr	r1, [pc, #388]	; (800d340 <tcp_receive+0xb18>)
 800d1ba:	4862      	ldr	r0, [pc, #392]	; (800d344 <tcp_receive+0xb1c>)
 800d1bc:	f006 fe24 	bl	8013e08 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1c4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d1c6:	4b5a      	ldr	r3, [pc, #360]	; (800d330 <tcp_receive+0xb08>)
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	4b59      	ldr	r3, [pc, #356]	; (800d334 <tcp_receive+0xb0c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	441a      	add	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1da:	4b55      	ldr	r3, [pc, #340]	; (800d330 <tcp_receive+0xb08>)
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d206      	bcs.n	800d1f0 <tcp_receive+0x9c8>
 800d1e2:	4b56      	ldr	r3, [pc, #344]	; (800d33c <tcp_receive+0xb14>)
 800d1e4:	f240 6207 	movw	r2, #1543	; 0x607
 800d1e8:	4957      	ldr	r1, [pc, #348]	; (800d348 <tcp_receive+0xb20>)
 800d1ea:	4856      	ldr	r0, [pc, #344]	; (800d344 <tcp_receive+0xb1c>)
 800d1ec:	f006 fe0c 	bl	8013e08 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1f4:	4b4e      	ldr	r3, [pc, #312]	; (800d330 <tcp_receive+0xb08>)
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7fc ffc5 	bl	800a190 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d206:	4b4c      	ldr	r3, [pc, #304]	; (800d338 <tcp_receive+0xb10>)
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	891b      	ldrh	r3, [r3, #8]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d006      	beq.n	800d21e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d210:	4b49      	ldr	r3, [pc, #292]	; (800d338 <tcp_receive+0xb10>)
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	4a4d      	ldr	r2, [pc, #308]	; (800d34c <tcp_receive+0xb24>)
 800d216:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d218:	4b47      	ldr	r3, [pc, #284]	; (800d338 <tcp_receive+0xb10>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d21e:	4b46      	ldr	r3, [pc, #280]	; (800d338 <tcp_receive+0xb10>)
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	899b      	ldrh	r3, [r3, #12]
 800d224:	b29b      	uxth	r3, r3
 800d226:	4618      	mov	r0, r3
 800d228:	f7fa fea4 	bl	8007f74 <lwip_htons>
 800d22c:	4603      	mov	r3, r0
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	f003 0301 	and.w	r3, r3, #1
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 80b8 	beq.w	800d3aa <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d23a:	4b45      	ldr	r3, [pc, #276]	; (800d350 <tcp_receive+0xb28>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	f043 0320 	orr.w	r3, r3, #32
 800d242:	b2da      	uxtb	r2, r3
 800d244:	4b42      	ldr	r3, [pc, #264]	; (800d350 <tcp_receive+0xb28>)
 800d246:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d248:	e0af      	b.n	800d3aa <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d24e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	4a36      	ldr	r2, [pc, #216]	; (800d334 <tcp_receive+0xb0c>)
 800d25a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	891b      	ldrh	r3, [r3, #8]
 800d260:	461c      	mov	r4, r3
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	899b      	ldrh	r3, [r3, #12]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fa fe82 	bl	8007f74 <lwip_htons>
 800d270:	4603      	mov	r3, r0
 800d272:	b2db      	uxtb	r3, r3
 800d274:	f003 0303 	and.w	r3, r3, #3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <tcp_receive+0xa58>
 800d27c:	2301      	movs	r3, #1
 800d27e:	e000      	b.n	800d282 <tcp_receive+0xa5a>
 800d280:	2300      	movs	r3, #0
 800d282:	191a      	adds	r2, r3, r4
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d288:	441a      	add	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d292:	461c      	mov	r4, r3
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	891b      	ldrh	r3, [r3, #8]
 800d298:	461d      	mov	r5, r3
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	899b      	ldrh	r3, [r3, #12]
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fa fe66 	bl	8007f74 <lwip_htons>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	f003 0303 	and.w	r3, r3, #3
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <tcp_receive+0xa90>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e000      	b.n	800d2ba <tcp_receive+0xa92>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	442b      	add	r3, r5
 800d2bc:	429c      	cmp	r4, r3
 800d2be:	d206      	bcs.n	800d2ce <tcp_receive+0xaa6>
 800d2c0:	4b1e      	ldr	r3, [pc, #120]	; (800d33c <tcp_receive+0xb14>)
 800d2c2:	f240 622b 	movw	r2, #1579	; 0x62b
 800d2c6:	4923      	ldr	r1, [pc, #140]	; (800d354 <tcp_receive+0xb2c>)
 800d2c8:	481e      	ldr	r0, [pc, #120]	; (800d344 <tcp_receive+0xb1c>)
 800d2ca:	f006 fd9d 	bl	8013e08 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	891b      	ldrh	r3, [r3, #8]
 800d2d2:	461c      	mov	r4, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	899b      	ldrh	r3, [r3, #12]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fa fe49 	bl	8007f74 <lwip_htons>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	f003 0303 	and.w	r3, r3, #3
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <tcp_receive+0xaca>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e000      	b.n	800d2f4 <tcp_receive+0xacc>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	1919      	adds	r1, r3, r4
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2fa:	b28b      	uxth	r3, r1
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f7fc ff43 	bl	800a190 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	891b      	ldrh	r3, [r3, #8]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d028      	beq.n	800d366 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d314:	4b0d      	ldr	r3, [pc, #52]	; (800d34c <tcp_receive+0xb24>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d01d      	beq.n	800d358 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d31c:	4b0b      	ldr	r3, [pc, #44]	; (800d34c <tcp_receive+0xb24>)
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	4619      	mov	r1, r3
 800d326:	4610      	mov	r0, r2
 800d328:	f7fc fa50 	bl	80097cc <pbuf_cat>
 800d32c:	e018      	b.n	800d360 <tcp_receive+0xb38>
 800d32e:	bf00      	nop
 800d330:	2000af02 	.word	0x2000af02
 800d334:	2000aef8 	.word	0x2000aef8
 800d338:	2000aed8 	.word	0x2000aed8
 800d33c:	080165d8 	.word	0x080165d8
 800d340:	080169b8 	.word	0x080169b8
 800d344:	08016624 	.word	0x08016624
 800d348:	080169f4 	.word	0x080169f4
 800d34c:	2000af08 	.word	0x2000af08
 800d350:	2000af05 	.word	0x2000af05
 800d354:	08016a14 	.word	0x08016a14
            } else {
              recv_data = cseg->p;
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	4a70      	ldr	r2, [pc, #448]	; (800d520 <tcp_receive+0xcf8>)
 800d35e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2200      	movs	r2, #0
 800d364:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	899b      	ldrh	r3, [r3, #12]
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fa fe00 	bl	8007f74 <lwip_htons>
 800d374:	4603      	mov	r3, r0
 800d376:	b2db      	uxtb	r3, r3
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00d      	beq.n	800d39c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d380:	4b68      	ldr	r3, [pc, #416]	; (800d524 <tcp_receive+0xcfc>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f043 0320 	orr.w	r3, r3, #32
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	4b66      	ldr	r3, [pc, #408]	; (800d524 <tcp_receive+0xcfc>)
 800d38c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	7d1b      	ldrb	r3, [r3, #20]
 800d392:	2b04      	cmp	r3, #4
 800d394:	d102      	bne.n	800d39c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2207      	movs	r2, #7
 800d39a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d3a4:	68b8      	ldr	r0, [r7, #8]
 800d3a6:	f7fd fbd2 	bl	800ab4e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d008      	beq.n	800d3c4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	685a      	ldr	r2, [r3, #4]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	f43f af43 	beq.w	800d24a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	8b5b      	ldrh	r3, [r3, #26]
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00e      	beq.n	800d3ee <tcp_receive+0xbc6>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	8b5b      	ldrh	r3, [r3, #26]
 800d3d4:	f023 0301 	bic.w	r3, r3, #1
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	835a      	strh	r2, [r3, #26]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	8b5b      	ldrh	r3, [r3, #26]
 800d3e2:	f043 0302 	orr.w	r3, r3, #2
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d3ec:	e188      	b.n	800d700 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	8b5b      	ldrh	r3, [r3, #26]
 800d3f2:	f043 0301 	orr.w	r3, r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d3fc:	e180      	b.n	800d700 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d402:	2b00      	cmp	r3, #0
 800d404:	d106      	bne.n	800d414 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d406:	4848      	ldr	r0, [pc, #288]	; (800d528 <tcp_receive+0xd00>)
 800d408:	f7fd fbba 	bl	800ab80 <tcp_seg_copy>
 800d40c:	4602      	mov	r2, r0
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	675a      	str	r2, [r3, #116]	; 0x74
 800d412:	e16d      	b.n	800d6f0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d414:	2300      	movs	r3, #0
 800d416:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d41c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d41e:	e157      	b.n	800d6d0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	4b41      	ldr	r3, [pc, #260]	; (800d52c <tcp_receive+0xd04>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d11d      	bne.n	800d46a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d42e:	4b3e      	ldr	r3, [pc, #248]	; (800d528 <tcp_receive+0xd00>)
 800d430:	891a      	ldrh	r2, [r3, #8]
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	891b      	ldrh	r3, [r3, #8]
 800d436:	429a      	cmp	r2, r3
 800d438:	f240 814f 	bls.w	800d6da <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d43c:	483a      	ldr	r0, [pc, #232]	; (800d528 <tcp_receive+0xd00>)
 800d43e:	f7fd fb9f 	bl	800ab80 <tcp_seg_copy>
 800d442:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 8149 	beq.w	800d6de <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d003      	beq.n	800d45a <tcp_receive+0xc32>
                    prev->next = cseg;
 800d452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	e002      	b.n	800d460 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	697a      	ldr	r2, [r7, #20]
 800d45e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d462:	6978      	ldr	r0, [r7, #20]
 800d464:	f7ff f8dc 	bl	800c620 <tcp_oos_insert_segment>
                }
                break;
 800d468:	e139      	b.n	800d6de <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d117      	bne.n	800d4a0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d470:	4b2e      	ldr	r3, [pc, #184]	; (800d52c <tcp_receive+0xd04>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	da57      	bge.n	800d530 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d480:	4829      	ldr	r0, [pc, #164]	; (800d528 <tcp_receive+0xd00>)
 800d482:	f7fd fb7d 	bl	800ab80 <tcp_seg_copy>
 800d486:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 8129 	beq.w	800d6e2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	69ba      	ldr	r2, [r7, #24]
 800d494:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d496:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d498:	69b8      	ldr	r0, [r7, #24]
 800d49a:	f7ff f8c1 	bl	800c620 <tcp_oos_insert_segment>
                  }
                  break;
 800d49e:	e120      	b.n	800d6e2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d4a0:	4b22      	ldr	r3, [pc, #136]	; (800d52c <tcp_receive+0xd04>)
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	db3e      	blt.n	800d530 <tcp_receive+0xd08>
 800d4b2:	4b1e      	ldr	r3, [pc, #120]	; (800d52c <tcp_receive+0xd04>)
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	3301      	adds	r3, #1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dc35      	bgt.n	800d530 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d4c4:	4818      	ldr	r0, [pc, #96]	; (800d528 <tcp_receive+0xd00>)
 800d4c6:	f7fd fb5b 	bl	800ab80 <tcp_seg_copy>
 800d4ca:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 8109 	beq.w	800d6e6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4dc:	8912      	ldrh	r2, [r2, #8]
 800d4de:	441a      	add	r2, r3
 800d4e0:	4b12      	ldr	r3, [pc, #72]	; (800d52c <tcp_receive+0xd04>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	dd12      	ble.n	800d510 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d4ea:	4b10      	ldr	r3, [pc, #64]	; (800d52c <tcp_receive+0xd04>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d502:	685a      	ldr	r2, [r3, #4]
 800d504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d506:	891b      	ldrh	r3, [r3, #8]
 800d508:	4619      	mov	r1, r3
 800d50a:	4610      	mov	r0, r2
 800d50c:	f7fb ff16 	bl	800933c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d512:	69fa      	ldr	r2, [r7, #28]
 800d514:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d516:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d518:	69f8      	ldr	r0, [r7, #28]
 800d51a:	f7ff f881 	bl	800c620 <tcp_oos_insert_segment>
                  }
                  break;
 800d51e:	e0e2      	b.n	800d6e6 <tcp_receive+0xebe>
 800d520:	2000af08 	.word	0x2000af08
 800d524:	2000af05 	.word	0x2000af05
 800d528:	2000aed8 	.word	0x2000aed8
 800d52c:	2000aef8 	.word	0x2000aef8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f040 80c6 	bne.w	800d6ca <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d53e:	4b80      	ldr	r3, [pc, #512]	; (800d740 <tcp_receive+0xf18>)
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f340 80bd 	ble.w	800d6ca <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	899b      	ldrh	r3, [r3, #12]
 800d556:	b29b      	uxth	r3, r3
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fa fd0b 	bl	8007f74 <lwip_htons>
 800d55e:	4603      	mov	r3, r0
 800d560:	b2db      	uxtb	r3, r3
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	f040 80bf 	bne.w	800d6ea <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d56c:	4875      	ldr	r0, [pc, #468]	; (800d744 <tcp_receive+0xf1c>)
 800d56e:	f7fd fb07 	bl	800ab80 <tcp_seg_copy>
 800d572:	4602      	mov	r2, r0
 800d574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d576:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f000 80b6 	beq.w	800d6ee <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d58a:	8912      	ldrh	r2, [r2, #8]
 800d58c:	441a      	add	r2, r3
 800d58e:	4b6c      	ldr	r3, [pc, #432]	; (800d740 <tcp_receive+0xf18>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	dd12      	ble.n	800d5be <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d598:	4b69      	ldr	r3, [pc, #420]	; (800d740 <tcp_receive+0xf18>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b4:	891b      	ldrh	r3, [r3, #8]
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	f7fb febf 	bl	800933c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d5be:	4b62      	ldr	r3, [pc, #392]	; (800d748 <tcp_receive+0xf20>)
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	4b5e      	ldr	r3, [pc, #376]	; (800d740 <tcp_receive+0xf18>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	441a      	add	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d5d2:	440b      	add	r3, r1
 800d5d4:	1ad3      	subs	r3, r2, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f340 8089 	ble.w	800d6ee <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	899b      	ldrh	r3, [r3, #12]
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fa fcc4 	bl	8007f74 <lwip_htons>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d022      	beq.n	800d63e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	899b      	ldrh	r3, [r3, #12]
 800d600:	b29b      	uxth	r3, r3
 800d602:	b21b      	sxth	r3, r3
 800d604:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d608:	b21c      	sxth	r4, r3
 800d60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	899b      	ldrh	r3, [r3, #12]
 800d612:	b29b      	uxth	r3, r3
 800d614:	4618      	mov	r0, r3
 800d616:	f7fa fcad 	bl	8007f74 <lwip_htons>
 800d61a:	4603      	mov	r3, r0
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	b29b      	uxth	r3, r3
 800d620:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d624:	b29b      	uxth	r3, r3
 800d626:	4618      	mov	r0, r3
 800d628:	f7fa fca4 	bl	8007f74 <lwip_htons>
 800d62c:	4603      	mov	r3, r0
 800d62e:	b21b      	sxth	r3, r3
 800d630:	4323      	orrs	r3, r4
 800d632:	b21a      	sxth	r2, r3
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	b292      	uxth	r2, r2
 800d63c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d642:	b29a      	uxth	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d648:	4413      	add	r3, r2
 800d64a:	b299      	uxth	r1, r3
 800d64c:	4b3c      	ldr	r3, [pc, #240]	; (800d740 <tcp_receive+0xf18>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	b29a      	uxth	r2, r3
 800d652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	1a8a      	subs	r2, r1, r2
 800d658:	b292      	uxth	r2, r2
 800d65a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	685a      	ldr	r2, [r3, #4]
 800d662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	891b      	ldrh	r3, [r3, #8]
 800d668:	4619      	mov	r1, r3
 800d66a:	4610      	mov	r0, r2
 800d66c:	f7fb fe66 	bl	800933c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	891c      	ldrh	r4, [r3, #8]
 800d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	899b      	ldrh	r3, [r3, #12]
 800d67e:	b29b      	uxth	r3, r3
 800d680:	4618      	mov	r0, r3
 800d682:	f7fa fc77 	bl	8007f74 <lwip_htons>
 800d686:	4603      	mov	r3, r0
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	f003 0303 	and.w	r3, r3, #3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d001      	beq.n	800d696 <tcp_receive+0xe6e>
 800d692:	2301      	movs	r3, #1
 800d694:	e000      	b.n	800d698 <tcp_receive+0xe70>
 800d696:	2300      	movs	r3, #0
 800d698:	4423      	add	r3, r4
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	4b2a      	ldr	r3, [pc, #168]	; (800d748 <tcp_receive+0xf20>)
 800d69e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d6a0:	4b29      	ldr	r3, [pc, #164]	; (800d748 <tcp_receive+0xf20>)
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	4b26      	ldr	r3, [pc, #152]	; (800d740 <tcp_receive+0xf18>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	441a      	add	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6b4:	440b      	add	r3, r1
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d019      	beq.n	800d6ee <tcp_receive+0xec6>
 800d6ba:	4b24      	ldr	r3, [pc, #144]	; (800d74c <tcp_receive+0xf24>)
 800d6bc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d6c0:	4923      	ldr	r1, [pc, #140]	; (800d750 <tcp_receive+0xf28>)
 800d6c2:	4824      	ldr	r0, [pc, #144]	; (800d754 <tcp_receive+0xf2c>)
 800d6c4:	f006 fba0 	bl	8013e08 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d6c8:	e011      	b.n	800d6ee <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f47f aea4 	bne.w	800d420 <tcp_receive+0xbf8>
 800d6d8:	e00a      	b.n	800d6f0 <tcp_receive+0xec8>
                break;
 800d6da:	bf00      	nop
 800d6dc:	e008      	b.n	800d6f0 <tcp_receive+0xec8>
                break;
 800d6de:	bf00      	nop
 800d6e0:	e006      	b.n	800d6f0 <tcp_receive+0xec8>
                  break;
 800d6e2:	bf00      	nop
 800d6e4:	e004      	b.n	800d6f0 <tcp_receive+0xec8>
                  break;
 800d6e6:	bf00      	nop
 800d6e8:	e002      	b.n	800d6f0 <tcp_receive+0xec8>
                  break;
 800d6ea:	bf00      	nop
 800d6ec:	e000      	b.n	800d6f0 <tcp_receive+0xec8>
                break;
 800d6ee:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f001 fa33 	bl	800eb5c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d6f6:	e003      	b.n	800d700 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f001 fa2f 	bl	800eb5c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d6fe:	e01a      	b.n	800d736 <tcp_receive+0xf0e>
 800d700:	e019      	b.n	800d736 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d702:	4b0f      	ldr	r3, [pc, #60]	; (800d740 <tcp_receive+0xf18>)
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	db0a      	blt.n	800d726 <tcp_receive+0xefe>
 800d710:	4b0b      	ldr	r3, [pc, #44]	; (800d740 <tcp_receive+0xf18>)
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d71c:	440b      	add	r3, r1
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	3301      	adds	r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	dd07      	ble.n	800d736 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	8b5b      	ldrh	r3, [r3, #26]
 800d72a:	f043 0302 	orr.w	r3, r3, #2
 800d72e:	b29a      	uxth	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d734:	e7ff      	b.n	800d736 <tcp_receive+0xf0e>
 800d736:	bf00      	nop
 800d738:	3750      	adds	r7, #80	; 0x50
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bdb0      	pop	{r4, r5, r7, pc}
 800d73e:	bf00      	nop
 800d740:	2000aef8 	.word	0x2000aef8
 800d744:	2000aed8 	.word	0x2000aed8
 800d748:	2000af02 	.word	0x2000af02
 800d74c:	080165d8 	.word	0x080165d8
 800d750:	08016980 	.word	0x08016980
 800d754:	08016624 	.word	0x08016624

0800d758 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d75e:	4b15      	ldr	r3, [pc, #84]	; (800d7b4 <tcp_get_next_optbyte+0x5c>)
 800d760:	881b      	ldrh	r3, [r3, #0]
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	b291      	uxth	r1, r2
 800d766:	4a13      	ldr	r2, [pc, #76]	; (800d7b4 <tcp_get_next_optbyte+0x5c>)
 800d768:	8011      	strh	r1, [r2, #0]
 800d76a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d76c:	4b12      	ldr	r3, [pc, #72]	; (800d7b8 <tcp_get_next_optbyte+0x60>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d004      	beq.n	800d77e <tcp_get_next_optbyte+0x26>
 800d774:	4b11      	ldr	r3, [pc, #68]	; (800d7bc <tcp_get_next_optbyte+0x64>)
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	88fa      	ldrh	r2, [r7, #6]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d208      	bcs.n	800d790 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d77e:	4b10      	ldr	r3, [pc, #64]	; (800d7c0 <tcp_get_next_optbyte+0x68>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3314      	adds	r3, #20
 800d784:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d786:	88fb      	ldrh	r3, [r7, #6]
 800d788:	683a      	ldr	r2, [r7, #0]
 800d78a:	4413      	add	r3, r2
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	e00b      	b.n	800d7a8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d790:	88fb      	ldrh	r3, [r7, #6]
 800d792:	b2da      	uxtb	r2, r3
 800d794:	4b09      	ldr	r3, [pc, #36]	; (800d7bc <tcp_get_next_optbyte+0x64>)
 800d796:	881b      	ldrh	r3, [r3, #0]
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d79e:	4b06      	ldr	r3, [pc, #24]	; (800d7b8 <tcp_get_next_optbyte+0x60>)
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	797b      	ldrb	r3, [r7, #5]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	2000aef4 	.word	0x2000aef4
 800d7b8:	2000aef0 	.word	0x2000aef0
 800d7bc:	2000aeee 	.word	0x2000aeee
 800d7c0:	2000aee8 	.word	0x2000aee8

0800d7c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d106      	bne.n	800d7e0 <tcp_parseopt+0x1c>
 800d7d2:	4b32      	ldr	r3, [pc, #200]	; (800d89c <tcp_parseopt+0xd8>)
 800d7d4:	f240 727d 	movw	r2, #1917	; 0x77d
 800d7d8:	4931      	ldr	r1, [pc, #196]	; (800d8a0 <tcp_parseopt+0xdc>)
 800d7da:	4832      	ldr	r0, [pc, #200]	; (800d8a4 <tcp_parseopt+0xe0>)
 800d7dc:	f006 fb14 	bl	8013e08 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d7e0:	4b31      	ldr	r3, [pc, #196]	; (800d8a8 <tcp_parseopt+0xe4>)
 800d7e2:	881b      	ldrh	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d055      	beq.n	800d894 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d7e8:	4b30      	ldr	r3, [pc, #192]	; (800d8ac <tcp_parseopt+0xe8>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	801a      	strh	r2, [r3, #0]
 800d7ee:	e045      	b.n	800d87c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d7f0:	f7ff ffb2 	bl	800d758 <tcp_get_next_optbyte>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d006      	beq.n	800d80c <tcp_parseopt+0x48>
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	dc2b      	bgt.n	800d85a <tcp_parseopt+0x96>
 800d802:	2b00      	cmp	r3, #0
 800d804:	d041      	beq.n	800d88a <tcp_parseopt+0xc6>
 800d806:	2b01      	cmp	r3, #1
 800d808:	d127      	bne.n	800d85a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d80a:	e037      	b.n	800d87c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d80c:	f7ff ffa4 	bl	800d758 <tcp_get_next_optbyte>
 800d810:	4603      	mov	r3, r0
 800d812:	2b04      	cmp	r3, #4
 800d814:	d13b      	bne.n	800d88e <tcp_parseopt+0xca>
 800d816:	4b25      	ldr	r3, [pc, #148]	; (800d8ac <tcp_parseopt+0xe8>)
 800d818:	881b      	ldrh	r3, [r3, #0]
 800d81a:	3301      	adds	r3, #1
 800d81c:	4a22      	ldr	r2, [pc, #136]	; (800d8a8 <tcp_parseopt+0xe4>)
 800d81e:	8812      	ldrh	r2, [r2, #0]
 800d820:	4293      	cmp	r3, r2
 800d822:	da34      	bge.n	800d88e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d824:	f7ff ff98 	bl	800d758 <tcp_get_next_optbyte>
 800d828:	4603      	mov	r3, r0
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	021b      	lsls	r3, r3, #8
 800d82e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d830:	f7ff ff92 	bl	800d758 <tcp_get_next_optbyte>
 800d834:	4603      	mov	r3, r0
 800d836:	b29a      	uxth	r2, r3
 800d838:	89bb      	ldrh	r3, [r7, #12]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d83e:	89bb      	ldrh	r3, [r7, #12]
 800d840:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d844:	d804      	bhi.n	800d850 <tcp_parseopt+0x8c>
 800d846:	89bb      	ldrh	r3, [r7, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d001      	beq.n	800d850 <tcp_parseopt+0x8c>
 800d84c:	89ba      	ldrh	r2, [r7, #12]
 800d84e:	e001      	b.n	800d854 <tcp_parseopt+0x90>
 800d850:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d858:	e010      	b.n	800d87c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d85a:	f7ff ff7d 	bl	800d758 <tcp_get_next_optbyte>
 800d85e:	4603      	mov	r3, r0
 800d860:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d862:	7afb      	ldrb	r3, [r7, #11]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d914      	bls.n	800d892 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d868:	7afb      	ldrb	r3, [r7, #11]
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	4b0f      	ldr	r3, [pc, #60]	; (800d8ac <tcp_parseopt+0xe8>)
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	4413      	add	r3, r2
 800d872:	b29b      	uxth	r3, r3
 800d874:	3b02      	subs	r3, #2
 800d876:	b29a      	uxth	r2, r3
 800d878:	4b0c      	ldr	r3, [pc, #48]	; (800d8ac <tcp_parseopt+0xe8>)
 800d87a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d87c:	4b0b      	ldr	r3, [pc, #44]	; (800d8ac <tcp_parseopt+0xe8>)
 800d87e:	881a      	ldrh	r2, [r3, #0]
 800d880:	4b09      	ldr	r3, [pc, #36]	; (800d8a8 <tcp_parseopt+0xe4>)
 800d882:	881b      	ldrh	r3, [r3, #0]
 800d884:	429a      	cmp	r2, r3
 800d886:	d3b3      	bcc.n	800d7f0 <tcp_parseopt+0x2c>
 800d888:	e004      	b.n	800d894 <tcp_parseopt+0xd0>
          return;
 800d88a:	bf00      	nop
 800d88c:	e002      	b.n	800d894 <tcp_parseopt+0xd0>
            return;
 800d88e:	bf00      	nop
 800d890:	e000      	b.n	800d894 <tcp_parseopt+0xd0>
            return;
 800d892:	bf00      	nop
      }
    }
  }
}
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	080165d8 	.word	0x080165d8
 800d8a0:	08016a3c 	.word	0x08016a3c
 800d8a4:	08016624 	.word	0x08016624
 800d8a8:	2000aeec 	.word	0x2000aeec
 800d8ac:	2000aef4 	.word	0x2000aef4

0800d8b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d8b4:	4b05      	ldr	r3, [pc, #20]	; (800d8cc <tcp_trigger_input_pcb_close+0x1c>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	f043 0310 	orr.w	r3, r3, #16
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	4b03      	ldr	r3, [pc, #12]	; (800d8cc <tcp_trigger_input_pcb_close+0x1c>)
 800d8c0:	701a      	strb	r2, [r3, #0]
}
 800d8c2:	bf00      	nop
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	2000af05 	.word	0x2000af05

0800d8d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00a      	beq.n	800d8f8 <tcp_route+0x28>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	7a1b      	ldrb	r3, [r3, #8]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d006      	beq.n	800d8f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	7a1b      	ldrb	r3, [r3, #8]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fb fb4a 	bl	8008f88 <netif_get_by_index>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	e003      	b.n	800d900 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f005 f817 	bl	801292c <ip4_route>
 800d8fe:	4603      	mov	r3, r0
  }
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d908:	b590      	push	{r4, r7, lr}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	603b      	str	r3, [r7, #0]
 800d914:	4613      	mov	r3, r2
 800d916:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d105      	bne.n	800d92a <tcp_create_segment+0x22>
 800d91e:	4b44      	ldr	r3, [pc, #272]	; (800da30 <tcp_create_segment+0x128>)
 800d920:	22a3      	movs	r2, #163	; 0xa3
 800d922:	4944      	ldr	r1, [pc, #272]	; (800da34 <tcp_create_segment+0x12c>)
 800d924:	4844      	ldr	r0, [pc, #272]	; (800da38 <tcp_create_segment+0x130>)
 800d926:	f006 fa6f 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d105      	bne.n	800d93c <tcp_create_segment+0x34>
 800d930:	4b3f      	ldr	r3, [pc, #252]	; (800da30 <tcp_create_segment+0x128>)
 800d932:	22a4      	movs	r2, #164	; 0xa4
 800d934:	4941      	ldr	r1, [pc, #260]	; (800da3c <tcp_create_segment+0x134>)
 800d936:	4840      	ldr	r0, [pc, #256]	; (800da38 <tcp_create_segment+0x130>)
 800d938:	f006 fa66 	bl	8013e08 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d93c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	b2db      	uxtb	r3, r3
 800d944:	f003 0304 	and.w	r3, r3, #4
 800d948:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d94a:	2003      	movs	r0, #3
 800d94c:	f7fa ff8a 	bl	8008864 <memp_malloc>
 800d950:	6138      	str	r0, [r7, #16]
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d104      	bne.n	800d962 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d958:	68b8      	ldr	r0, [r7, #8]
 800d95a:	f7fb fe75 	bl	8009648 <pbuf_free>
    return NULL;
 800d95e:	2300      	movs	r3, #0
 800d960:	e061      	b.n	800da26 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d968:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2200      	movs	r2, #0
 800d96e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	891a      	ldrh	r2, [r3, #8]
 800d97a:	7dfb      	ldrb	r3, [r7, #23]
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	429a      	cmp	r2, r3
 800d980:	d205      	bcs.n	800d98e <tcp_create_segment+0x86>
 800d982:	4b2b      	ldr	r3, [pc, #172]	; (800da30 <tcp_create_segment+0x128>)
 800d984:	22b0      	movs	r2, #176	; 0xb0
 800d986:	492e      	ldr	r1, [pc, #184]	; (800da40 <tcp_create_segment+0x138>)
 800d988:	482b      	ldr	r0, [pc, #172]	; (800da38 <tcp_create_segment+0x130>)
 800d98a:	f006 fa3d 	bl	8013e08 <iprintf>
  seg->len = p->tot_len - optlen;
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	891a      	ldrh	r2, [r3, #8]
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	b29b      	uxth	r3, r3
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	b29a      	uxth	r2, r3
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d99e:	2114      	movs	r1, #20
 800d9a0:	68b8      	ldr	r0, [r7, #8]
 800d9a2:	f7fb fdbb 	bl	800951c <pbuf_add_header>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d004      	beq.n	800d9b6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d9ac:	6938      	ldr	r0, [r7, #16]
 800d9ae:	f7fd f8ce 	bl	800ab4e <tcp_seg_free>
    return NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	e037      	b.n	800da26 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	8ada      	ldrh	r2, [r3, #22]
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	68dc      	ldr	r4, [r3, #12]
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	f7fa fad3 	bl	8007f74 <lwip_htons>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	8b1a      	ldrh	r2, [r3, #24]
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	68dc      	ldr	r4, [r3, #12]
 800d9da:	4610      	mov	r0, r2
 800d9dc:	f7fa faca 	bl	8007f74 <lwip_htons>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	68dc      	ldr	r4, [r3, #12]
 800d9e8:	6838      	ldr	r0, [r7, #0]
 800d9ea:	f7fa fad8 	bl	8007f9e <lwip_htonl>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d9f2:	7dfb      	ldrb	r3, [r7, #23]
 800d9f4:	089b      	lsrs	r3, r3, #2
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	3305      	adds	r3, #5
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	031b      	lsls	r3, r3, #12
 800da00:	b29a      	uxth	r2, r3
 800da02:	79fb      	ldrb	r3, [r7, #7]
 800da04:	b29b      	uxth	r3, r3
 800da06:	4313      	orrs	r3, r2
 800da08:	b29a      	uxth	r2, r3
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	68dc      	ldr	r4, [r3, #12]
 800da0e:	4610      	mov	r0, r2
 800da10:	f7fa fab0 	bl	8007f74 <lwip_htons>
 800da14:	4603      	mov	r3, r0
 800da16:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	2200      	movs	r2, #0
 800da1e:	749a      	strb	r2, [r3, #18]
 800da20:	2200      	movs	r2, #0
 800da22:	74da      	strb	r2, [r3, #19]
  return seg;
 800da24:	693b      	ldr	r3, [r7, #16]
}
 800da26:	4618      	mov	r0, r3
 800da28:	371c      	adds	r7, #28
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd90      	pop	{r4, r7, pc}
 800da2e:	bf00      	nop
 800da30:	08016a58 	.word	0x08016a58
 800da34:	08016a8c 	.word	0x08016a8c
 800da38:	08016aac 	.word	0x08016aac
 800da3c:	08016ad4 	.word	0x08016ad4
 800da40:	08016af8 	.word	0x08016af8

0800da44 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800da44:	b590      	push	{r4, r7, lr}
 800da46:	b08b      	sub	sp, #44	; 0x2c
 800da48:	af02      	add	r7, sp, #8
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800da50:	2300      	movs	r3, #0
 800da52:	61fb      	str	r3, [r7, #28]
 800da54:	2300      	movs	r3, #0
 800da56:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800da58:	2300      	movs	r3, #0
 800da5a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d106      	bne.n	800da70 <tcp_split_unsent_seg+0x2c>
 800da62:	4b95      	ldr	r3, [pc, #596]	; (800dcb8 <tcp_split_unsent_seg+0x274>)
 800da64:	f240 324b 	movw	r2, #843	; 0x34b
 800da68:	4994      	ldr	r1, [pc, #592]	; (800dcbc <tcp_split_unsent_seg+0x278>)
 800da6a:	4895      	ldr	r0, [pc, #596]	; (800dcc0 <tcp_split_unsent_seg+0x27c>)
 800da6c:	f006 f9cc 	bl	8013e08 <iprintf>

  useg = pcb->unsent;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da74:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d102      	bne.n	800da82 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800da7c:	f04f 33ff 	mov.w	r3, #4294967295
 800da80:	e116      	b.n	800dcb0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800da82:	887b      	ldrh	r3, [r7, #2]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d109      	bne.n	800da9c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800da88:	4b8b      	ldr	r3, [pc, #556]	; (800dcb8 <tcp_split_unsent_seg+0x274>)
 800da8a:	f240 3253 	movw	r2, #851	; 0x353
 800da8e:	498d      	ldr	r1, [pc, #564]	; (800dcc4 <tcp_split_unsent_seg+0x280>)
 800da90:	488b      	ldr	r0, [pc, #556]	; (800dcc0 <tcp_split_unsent_seg+0x27c>)
 800da92:	f006 f9b9 	bl	8013e08 <iprintf>
    return ERR_VAL;
 800da96:	f06f 0305 	mvn.w	r3, #5
 800da9a:	e109      	b.n	800dcb0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	891b      	ldrh	r3, [r3, #8]
 800daa0:	887a      	ldrh	r2, [r7, #2]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d301      	bcc.n	800daaa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800daa6:	2300      	movs	r3, #0
 800daa8:	e102      	b.n	800dcb0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daae:	887a      	ldrh	r2, [r7, #2]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d906      	bls.n	800dac2 <tcp_split_unsent_seg+0x7e>
 800dab4:	4b80      	ldr	r3, [pc, #512]	; (800dcb8 <tcp_split_unsent_seg+0x274>)
 800dab6:	f240 325b 	movw	r2, #859	; 0x35b
 800daba:	4983      	ldr	r1, [pc, #524]	; (800dcc8 <tcp_split_unsent_seg+0x284>)
 800dabc:	4880      	ldr	r0, [pc, #512]	; (800dcc0 <tcp_split_unsent_seg+0x27c>)
 800dabe:	f006 f9a3 	bl	8013e08 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	891b      	ldrh	r3, [r3, #8]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d106      	bne.n	800dad8 <tcp_split_unsent_seg+0x94>
 800daca:	4b7b      	ldr	r3, [pc, #492]	; (800dcb8 <tcp_split_unsent_seg+0x274>)
 800dacc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800dad0:	497e      	ldr	r1, [pc, #504]	; (800dccc <tcp_split_unsent_seg+0x288>)
 800dad2:	487b      	ldr	r0, [pc, #492]	; (800dcc0 <tcp_split_unsent_seg+0x27c>)
 800dad4:	f006 f998 	bl	8013e08 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	7a9b      	ldrb	r3, [r3, #10]
 800dadc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	f003 0304 	and.w	r3, r3, #4
 800dae8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	891a      	ldrh	r2, [r3, #8]
 800daee:	887b      	ldrh	r3, [r7, #2]
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800daf4:	7bbb      	ldrb	r3, [r7, #14]
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	89bb      	ldrh	r3, [r7, #12]
 800dafa:	4413      	add	r3, r2
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db02:	4619      	mov	r1, r3
 800db04:	2036      	movs	r0, #54	; 0x36
 800db06:	f7fb fabb 	bl	8009080 <pbuf_alloc>
 800db0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f000 80b7 	beq.w	800dc82 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	891a      	ldrh	r2, [r3, #8]
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	891b      	ldrh	r3, [r3, #8]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	b29a      	uxth	r2, r3
 800db22:	887b      	ldrh	r3, [r7, #2]
 800db24:	4413      	add	r3, r2
 800db26:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	6858      	ldr	r0, [r3, #4]
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	7bbb      	ldrb	r3, [r7, #14]
 800db32:	18d1      	adds	r1, r2, r3
 800db34:	897b      	ldrh	r3, [r7, #10]
 800db36:	89ba      	ldrh	r2, [r7, #12]
 800db38:	f7fb ff80 	bl	8009a3c <pbuf_copy_partial>
 800db3c:	4603      	mov	r3, r0
 800db3e:	461a      	mov	r2, r3
 800db40:	89bb      	ldrh	r3, [r7, #12]
 800db42:	4293      	cmp	r3, r2
 800db44:	f040 809f 	bne.w	800dc86 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	899b      	ldrh	r3, [r3, #12]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	4618      	mov	r0, r3
 800db52:	f7fa fa0f 	bl	8007f74 <lwip_htons>
 800db56:	4603      	mov	r3, r0
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db5e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800db60:	2300      	movs	r3, #0
 800db62:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800db64:	7efb      	ldrb	r3, [r7, #27]
 800db66:	f003 0308 	and.w	r3, r3, #8
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d007      	beq.n	800db7e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800db6e:	7efb      	ldrb	r3, [r7, #27]
 800db70:	f023 0308 	bic.w	r3, r3, #8
 800db74:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800db76:	7ebb      	ldrb	r3, [r7, #26]
 800db78:	f043 0308 	orr.w	r3, r3, #8
 800db7c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800db7e:	7efb      	ldrb	r3, [r7, #27]
 800db80:	f003 0301 	and.w	r3, r3, #1
 800db84:	2b00      	cmp	r3, #0
 800db86:	d007      	beq.n	800db98 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800db88:	7efb      	ldrb	r3, [r7, #27]
 800db8a:	f023 0301 	bic.w	r3, r3, #1
 800db8e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800db90:	7ebb      	ldrb	r3, [r7, #26]
 800db92:	f043 0301 	orr.w	r3, r3, #1
 800db96:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fa f9fd 	bl	8007f9e <lwip_htonl>
 800dba4:	4602      	mov	r2, r0
 800dba6:	887b      	ldrh	r3, [r7, #2]
 800dba8:	18d1      	adds	r1, r2, r3
 800dbaa:	7eba      	ldrb	r2, [r7, #26]
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	6939      	ldr	r1, [r7, #16]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff fea7 	bl	800d908 <tcp_create_segment>
 800dbba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d063      	beq.n	800dc8a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fb fdc6 	bl	8009758 <pbuf_clen>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	461a      	mov	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbd6:	1a9b      	subs	r3, r3, r2
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	6858      	ldr	r0, [r3, #4]
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	891a      	ldrh	r2, [r3, #8]
 800dbea:	89bb      	ldrh	r3, [r7, #12]
 800dbec:	1ad3      	subs	r3, r2, r3
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	f7fb fba3 	bl	800933c <pbuf_realloc>
  useg->len -= remainder;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	891a      	ldrh	r2, [r3, #8]
 800dbfa:	89bb      	ldrh	r3, [r7, #12]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	899b      	ldrh	r3, [r3, #12]
 800dc0a:	b29c      	uxth	r4, r3
 800dc0c:	7efb      	ldrb	r3, [r7, #27]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fa f9af 	bl	8007f74 <lwip_htons>
 800dc16:	4603      	mov	r3, r0
 800dc18:	461a      	mov	r2, r3
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	4322      	orrs	r2, r4
 800dc20:	b292      	uxth	r2, r2
 800dc22:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fb fd95 	bl	8009758 <pbuf_clen>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	461a      	mov	r2, r3
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc38:	4413      	add	r3, r2
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fb fd86 	bl	8009758 <pbuf_clen>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	461a      	mov	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc56:	4413      	add	r3, r2
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	69fa      	ldr	r2, [r7, #28]
 800dc6c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d103      	bne.n	800dc7e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e016      	b.n	800dcb0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800dc82:	bf00      	nop
 800dc84:	e002      	b.n	800dc8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dc86:	bf00      	nop
 800dc88:	e000      	b.n	800dc8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dc8a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d006      	beq.n	800dca0 <tcp_split_unsent_seg+0x25c>
 800dc92:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <tcp_split_unsent_seg+0x274>)
 800dc94:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800dc98:	490d      	ldr	r1, [pc, #52]	; (800dcd0 <tcp_split_unsent_seg+0x28c>)
 800dc9a:	4809      	ldr	r0, [pc, #36]	; (800dcc0 <tcp_split_unsent_seg+0x27c>)
 800dc9c:	f006 f8b4 	bl	8013e08 <iprintf>
  if (p != NULL) {
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d002      	beq.n	800dcac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800dca6:	6938      	ldr	r0, [r7, #16]
 800dca8:	f7fb fcce 	bl	8009648 <pbuf_free>
  }

  return ERR_MEM;
 800dcac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3724      	adds	r7, #36	; 0x24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd90      	pop	{r4, r7, pc}
 800dcb8:	08016a58 	.word	0x08016a58
 800dcbc:	08016dec 	.word	0x08016dec
 800dcc0:	08016aac 	.word	0x08016aac
 800dcc4:	08016e10 	.word	0x08016e10
 800dcc8:	08016e34 	.word	0x08016e34
 800dccc:	08016e44 	.word	0x08016e44
 800dcd0:	08016e54 	.word	0x08016e54

0800dcd4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dcd4:	b590      	push	{r4, r7, lr}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d106      	bne.n	800dcf0 <tcp_send_fin+0x1c>
 800dce2:	4b21      	ldr	r3, [pc, #132]	; (800dd68 <tcp_send_fin+0x94>)
 800dce4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dce8:	4920      	ldr	r1, [pc, #128]	; (800dd6c <tcp_send_fin+0x98>)
 800dcea:	4821      	ldr	r0, [pc, #132]	; (800dd70 <tcp_send_fin+0x9c>)
 800dcec:	f006 f88c 	bl	8013e08 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d02e      	beq.n	800dd56 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcfc:	60fb      	str	r3, [r7, #12]
 800dcfe:	e002      	b.n	800dd06 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1f8      	bne.n	800dd00 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	899b      	ldrh	r3, [r3, #12]
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fa f92c 	bl	8007f74 <lwip_htons>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 0307 	and.w	r3, r3, #7
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d116      	bne.n	800dd56 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	899b      	ldrh	r3, [r3, #12]
 800dd2e:	b29c      	uxth	r4, r3
 800dd30:	2001      	movs	r0, #1
 800dd32:	f7fa f91f 	bl	8007f74 <lwip_htons>
 800dd36:	4603      	mov	r3, r0
 800dd38:	461a      	mov	r2, r3
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	4322      	orrs	r2, r4
 800dd40:	b292      	uxth	r2, r2
 800dd42:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	8b5b      	ldrh	r3, [r3, #26]
 800dd48:	f043 0320 	orr.w	r3, r3, #32
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dd52:	2300      	movs	r3, #0
 800dd54:	e004      	b.n	800dd60 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dd56:	2101      	movs	r1, #1
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f80b 	bl	800dd74 <tcp_enqueue_flags>
 800dd5e:	4603      	mov	r3, r0
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3714      	adds	r7, #20
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd90      	pop	{r4, r7, pc}
 800dd68:	08016a58 	.word	0x08016a58
 800dd6c:	08016e60 	.word	0x08016e60
 800dd70:	08016aac 	.word	0x08016aac

0800dd74 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b08a      	sub	sp, #40	; 0x28
 800dd78:	af02      	add	r7, sp, #8
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dd88:	78fb      	ldrb	r3, [r7, #3]
 800dd8a:	f003 0303 	and.w	r3, r3, #3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <tcp_enqueue_flags+0x2c>
 800dd92:	4b67      	ldr	r3, [pc, #412]	; (800df30 <tcp_enqueue_flags+0x1bc>)
 800dd94:	f240 4211 	movw	r2, #1041	; 0x411
 800dd98:	4966      	ldr	r1, [pc, #408]	; (800df34 <tcp_enqueue_flags+0x1c0>)
 800dd9a:	4867      	ldr	r0, [pc, #412]	; (800df38 <tcp_enqueue_flags+0x1c4>)
 800dd9c:	f006 f834 	bl	8013e08 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d106      	bne.n	800ddb4 <tcp_enqueue_flags+0x40>
 800dda6:	4b62      	ldr	r3, [pc, #392]	; (800df30 <tcp_enqueue_flags+0x1bc>)
 800dda8:	f240 4213 	movw	r2, #1043	; 0x413
 800ddac:	4963      	ldr	r1, [pc, #396]	; (800df3c <tcp_enqueue_flags+0x1c8>)
 800ddae:	4862      	ldr	r0, [pc, #392]	; (800df38 <tcp_enqueue_flags+0x1c4>)
 800ddb0:	f006 f82a 	bl	8013e08 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ddb4:	78fb      	ldrb	r3, [r7, #3]
 800ddb6:	f003 0302 	and.w	r3, r3, #2
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ddc2:	7ffb      	ldrb	r3, [r7, #31]
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	f003 0304 	and.w	r3, r3, #4
 800ddcc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	2036      	movs	r0, #54	; 0x36
 800ddda:	f7fb f951 	bl	8009080 <pbuf_alloc>
 800ddde:	6138      	str	r0, [r7, #16]
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d109      	bne.n	800ddfa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	8b5b      	ldrh	r3, [r3, #26]
 800ddea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ddf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf8:	e095      	b.n	800df26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	895a      	ldrh	r2, [r3, #10]
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	b29b      	uxth	r3, r3
 800de02:	429a      	cmp	r2, r3
 800de04:	d206      	bcs.n	800de14 <tcp_enqueue_flags+0xa0>
 800de06:	4b4a      	ldr	r3, [pc, #296]	; (800df30 <tcp_enqueue_flags+0x1bc>)
 800de08:	f240 4239 	movw	r2, #1081	; 0x439
 800de0c:	494c      	ldr	r1, [pc, #304]	; (800df40 <tcp_enqueue_flags+0x1cc>)
 800de0e:	484a      	ldr	r0, [pc, #296]	; (800df38 <tcp_enqueue_flags+0x1c4>)
 800de10:	f005 fffa 	bl	8013e08 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800de18:	78fa      	ldrb	r2, [r7, #3]
 800de1a:	7ffb      	ldrb	r3, [r7, #31]
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	460b      	mov	r3, r1
 800de20:	6939      	ldr	r1, [r7, #16]
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7ff fd70 	bl	800d908 <tcp_create_segment>
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d109      	bne.n	800de44 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	8b5b      	ldrh	r3, [r3, #26]
 800de34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de38:	b29a      	uxth	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800de3e:	f04f 33ff 	mov.w	r3, #4294967295
 800de42:	e070      	b.n	800df26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	f003 0303 	and.w	r3, r3, #3
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d006      	beq.n	800de5e <tcp_enqueue_flags+0xea>
 800de50:	4b37      	ldr	r3, [pc, #220]	; (800df30 <tcp_enqueue_flags+0x1bc>)
 800de52:	f240 4242 	movw	r2, #1090	; 0x442
 800de56:	493b      	ldr	r1, [pc, #236]	; (800df44 <tcp_enqueue_flags+0x1d0>)
 800de58:	4837      	ldr	r0, [pc, #220]	; (800df38 <tcp_enqueue_flags+0x1c4>)
 800de5a:	f005 ffd5 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	891b      	ldrh	r3, [r3, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d006      	beq.n	800de74 <tcp_enqueue_flags+0x100>
 800de66:	4b32      	ldr	r3, [pc, #200]	; (800df30 <tcp_enqueue_flags+0x1bc>)
 800de68:	f240 4243 	movw	r2, #1091	; 0x443
 800de6c:	4936      	ldr	r1, [pc, #216]	; (800df48 <tcp_enqueue_flags+0x1d4>)
 800de6e:	4832      	ldr	r0, [pc, #200]	; (800df38 <tcp_enqueue_flags+0x1c4>)
 800de70:	f005 ffca 	bl	8013e08 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d103      	bne.n	800de84 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	66da      	str	r2, [r3, #108]	; 0x6c
 800de82:	e00d      	b.n	800dea0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de88:	61bb      	str	r3, [r7, #24]
 800de8a:	e002      	b.n	800de92 <tcp_enqueue_flags+0x11e>
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	61bb      	str	r3, [r7, #24]
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1f8      	bne.n	800de8c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dea8:	78fb      	ldrb	r3, [r7, #3]
 800deaa:	f003 0302 	and.w	r3, r3, #2
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d104      	bne.n	800debc <tcp_enqueue_flags+0x148>
 800deb2:	78fb      	ldrb	r3, [r7, #3]
 800deb4:	f003 0301 	and.w	r3, r3, #1
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d004      	beq.n	800dec6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec0:	1c5a      	adds	r2, r3, #1
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dec6:	78fb      	ldrb	r3, [r7, #3]
 800dec8:	f003 0301 	and.w	r3, r3, #1
 800decc:	2b00      	cmp	r3, #0
 800dece:	d006      	beq.n	800dede <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	8b5b      	ldrh	r3, [r3, #26]
 800ded4:	f043 0320 	orr.w	r3, r3, #32
 800ded8:	b29a      	uxth	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fb fc38 	bl	8009758 <pbuf_clen>
 800dee8:	4603      	mov	r3, r0
 800deea:	461a      	mov	r2, r3
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800def2:	4413      	add	r3, r2
 800def4:	b29a      	uxth	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00e      	beq.n	800df24 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10a      	bne.n	800df24 <tcp_enqueue_flags+0x1b0>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df12:	2b00      	cmp	r3, #0
 800df14:	d106      	bne.n	800df24 <tcp_enqueue_flags+0x1b0>
 800df16:	4b06      	ldr	r3, [pc, #24]	; (800df30 <tcp_enqueue_flags+0x1bc>)
 800df18:	f240 4265 	movw	r2, #1125	; 0x465
 800df1c:	490b      	ldr	r1, [pc, #44]	; (800df4c <tcp_enqueue_flags+0x1d8>)
 800df1e:	4806      	ldr	r0, [pc, #24]	; (800df38 <tcp_enqueue_flags+0x1c4>)
 800df20:	f005 ff72 	bl	8013e08 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3720      	adds	r7, #32
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	08016a58 	.word	0x08016a58
 800df34:	08016e7c 	.word	0x08016e7c
 800df38:	08016aac 	.word	0x08016aac
 800df3c:	08016ed4 	.word	0x08016ed4
 800df40:	08016ef4 	.word	0x08016ef4
 800df44:	08016f30 	.word	0x08016f30
 800df48:	08016f48 	.word	0x08016f48
 800df4c:	08016f74 	.word	0x08016f74

0800df50 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800df50:	b5b0      	push	{r4, r5, r7, lr}
 800df52:	b08a      	sub	sp, #40	; 0x28
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d106      	bne.n	800df6c <tcp_output+0x1c>
 800df5e:	4b8a      	ldr	r3, [pc, #552]	; (800e188 <tcp_output+0x238>)
 800df60:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800df64:	4989      	ldr	r1, [pc, #548]	; (800e18c <tcp_output+0x23c>)
 800df66:	488a      	ldr	r0, [pc, #552]	; (800e190 <tcp_output+0x240>)
 800df68:	f005 ff4e 	bl	8013e08 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7d1b      	ldrb	r3, [r3, #20]
 800df70:	2b01      	cmp	r3, #1
 800df72:	d106      	bne.n	800df82 <tcp_output+0x32>
 800df74:	4b84      	ldr	r3, [pc, #528]	; (800e188 <tcp_output+0x238>)
 800df76:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800df7a:	4986      	ldr	r1, [pc, #536]	; (800e194 <tcp_output+0x244>)
 800df7c:	4884      	ldr	r0, [pc, #528]	; (800e190 <tcp_output+0x240>)
 800df7e:	f005 ff43 	bl	8013e08 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800df82:	4b85      	ldr	r3, [pc, #532]	; (800e198 <tcp_output+0x248>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d101      	bne.n	800df90 <tcp_output+0x40>
    return ERR_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	e1ce      	b.n	800e32e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df9c:	4293      	cmp	r3, r2
 800df9e:	bf28      	it	cs
 800dfa0:	4613      	movcs	r3, r2
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d10b      	bne.n	800dfca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	8b5b      	ldrh	r3, [r3, #26]
 800dfb6:	f003 0302 	and.w	r3, r3, #2
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f000 81aa 	beq.w	800e314 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fdcb 	bl	800eb5c <tcp_send_empty_ack>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	e1b1      	b.n	800e32e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dfca:	6879      	ldr	r1, [r7, #4]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7ff fc7c 	bl	800d8d0 <tcp_route>
 800dfd8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d102      	bne.n	800dfe6 <tcp_output+0x96>
    return ERR_RTE;
 800dfe0:	f06f 0303 	mvn.w	r3, #3
 800dfe4:	e1a3      	b.n	800e32e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <tcp_output+0xa4>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d111      	bne.n	800e018 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d002      	beq.n	800e000 <tcp_output+0xb0>
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	3304      	adds	r3, #4
 800dffe:	e000      	b.n	800e002 <tcp_output+0xb2>
 800e000:	2300      	movs	r3, #0
 800e002:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d102      	bne.n	800e010 <tcp_output+0xc0>
      return ERR_RTE;
 800e00a:	f06f 0303 	mvn.w	r3, #3
 800e00e:	e18e      	b.n	800e32e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	4618      	mov	r0, r3
 800e020:	f7f9 ffbd 	bl	8007f9e <lwip_htonl>
 800e024:	4602      	mov	r2, r0
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e02e:	8912      	ldrh	r2, [r2, #8]
 800e030:	4413      	add	r3, r2
 800e032:	69ba      	ldr	r2, [r7, #24]
 800e034:	429a      	cmp	r2, r3
 800e036:	d227      	bcs.n	800e088 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e03e:	461a      	mov	r2, r3
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	4293      	cmp	r3, r2
 800e044:	d114      	bne.n	800e070 <tcp_output+0x120>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d110      	bne.n	800e070 <tcp_output+0x120>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10b      	bne.n	800e070 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	8b5b      	ldrh	r3, [r3, #26]
 800e074:	f003 0302 	and.w	r3, r3, #2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 814d 	beq.w	800e318 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fd6c 	bl	800eb5c <tcp_send_empty_ack>
 800e084:	4603      	mov	r3, r0
 800e086:	e152      	b.n	800e32e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e094:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e096:	6a3b      	ldr	r3, [r7, #32]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f000 811c 	beq.w	800e2d6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e09e:	e002      	b.n	800e0a6 <tcp_output+0x156>
 800e0a0:	6a3b      	ldr	r3, [r7, #32]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	623b      	str	r3, [r7, #32]
 800e0a6:	6a3b      	ldr	r3, [r7, #32]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1f8      	bne.n	800e0a0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e0ae:	e112      	b.n	800e2d6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	899b      	ldrh	r3, [r3, #12]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7f9 ff5b 	bl	8007f74 <lwip_htons>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	f003 0304 	and.w	r3, r3, #4
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d006      	beq.n	800e0d8 <tcp_output+0x188>
 800e0ca:	4b2f      	ldr	r3, [pc, #188]	; (800e188 <tcp_output+0x238>)
 800e0cc:	f240 5236 	movw	r2, #1334	; 0x536
 800e0d0:	4932      	ldr	r1, [pc, #200]	; (800e19c <tcp_output+0x24c>)
 800e0d2:	482f      	ldr	r0, [pc, #188]	; (800e190 <tcp_output+0x240>)
 800e0d4:	f005 fe98 	bl	8013e08 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d01f      	beq.n	800e120 <tcp_output+0x1d0>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	8b5b      	ldrh	r3, [r3, #26]
 800e0e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d119      	bne.n	800e120 <tcp_output+0x1d0>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00b      	beq.n	800e10c <tcp_output+0x1bc>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d110      	bne.n	800e120 <tcp_output+0x1d0>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e102:	891a      	ldrh	r2, [r3, #8]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e108:	429a      	cmp	r2, r3
 800e10a:	d209      	bcs.n	800e120 <tcp_output+0x1d0>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e112:	2b00      	cmp	r3, #0
 800e114:	d004      	beq.n	800e120 <tcp_output+0x1d0>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e11c:	2b08      	cmp	r3, #8
 800e11e:	d901      	bls.n	800e124 <tcp_output+0x1d4>
 800e120:	2301      	movs	r3, #1
 800e122:	e000      	b.n	800e126 <tcp_output+0x1d6>
 800e124:	2300      	movs	r3, #0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d106      	bne.n	800e138 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	8b5b      	ldrh	r3, [r3, #26]
 800e12e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 80e4 	beq.w	800e300 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	7d1b      	ldrb	r3, [r3, #20]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d00d      	beq.n	800e15c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	899b      	ldrh	r3, [r3, #12]
 800e146:	b29c      	uxth	r4, r3
 800e148:	2010      	movs	r0, #16
 800e14a:	f7f9 ff13 	bl	8007f74 <lwip_htons>
 800e14e:	4603      	mov	r3, r0
 800e150:	461a      	mov	r2, r3
 800e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	4322      	orrs	r2, r4
 800e158:	b292      	uxth	r2, r2
 800e15a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e15c:	697a      	ldr	r2, [r7, #20]
 800e15e:	6879      	ldr	r1, [r7, #4]
 800e160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e162:	f000 f909 	bl	800e378 <tcp_output_segment>
 800e166:	4603      	mov	r3, r0
 800e168:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d016      	beq.n	800e1a0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	8b5b      	ldrh	r3, [r3, #26]
 800e176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	835a      	strh	r2, [r3, #26]
      return err;
 800e180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e184:	e0d3      	b.n	800e32e <tcp_output+0x3de>
 800e186:	bf00      	nop
 800e188:	08016a58 	.word	0x08016a58
 800e18c:	08016f9c 	.word	0x08016f9c
 800e190:	08016aac 	.word	0x08016aac
 800e194:	08016fb4 	.word	0x08016fb4
 800e198:	2000af0c 	.word	0x2000af0c
 800e19c:	08016fdc 	.word	0x08016fdc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	7d1b      	ldrb	r3, [r3, #20]
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d006      	beq.n	800e1be <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	8b5b      	ldrh	r3, [r3, #26]
 800e1b4:	f023 0303 	bic.w	r3, r3, #3
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7f9 feea 	bl	8007f9e <lwip_htonl>
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ce:	891b      	ldrh	r3, [r3, #8]
 800e1d0:	461d      	mov	r5, r3
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	899b      	ldrh	r3, [r3, #12]
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7f9 feca 	bl	8007f74 <lwip_htons>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	f003 0303 	and.w	r3, r3, #3
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d001      	beq.n	800e1f0 <tcp_output+0x2a0>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e000      	b.n	800e1f2 <tcp_output+0x2a2>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	442b      	add	r3, r5
 800e1f4:	4423      	add	r3, r4
 800e1f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	2b00      	cmp	r3, #0
 800e202:	da02      	bge.n	800e20a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68ba      	ldr	r2, [r7, #8]
 800e208:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	891b      	ldrh	r3, [r3, #8]
 800e20e:	461c      	mov	r4, r3
 800e210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	899b      	ldrh	r3, [r3, #12]
 800e216:	b29b      	uxth	r3, r3
 800e218:	4618      	mov	r0, r3
 800e21a:	f7f9 feab 	bl	8007f74 <lwip_htons>
 800e21e:	4603      	mov	r3, r0
 800e220:	b2db      	uxtb	r3, r3
 800e222:	f003 0303 	and.w	r3, r3, #3
 800e226:	2b00      	cmp	r3, #0
 800e228:	d001      	beq.n	800e22e <tcp_output+0x2de>
 800e22a:	2301      	movs	r3, #1
 800e22c:	e000      	b.n	800e230 <tcp_output+0x2e0>
 800e22e:	2300      	movs	r3, #0
 800e230:	4423      	add	r3, r4
 800e232:	2b00      	cmp	r3, #0
 800e234:	d049      	beq.n	800e2ca <tcp_output+0x37a>
      seg->next = NULL;
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	2200      	movs	r2, #0
 800e23a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e240:	2b00      	cmp	r3, #0
 800e242:	d105      	bne.n	800e250 <tcp_output+0x300>
        pcb->unacked = seg;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e248:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	623b      	str	r3, [r7, #32]
 800e24e:	e03f      	b.n	800e2d0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	4618      	mov	r0, r3
 800e258:	f7f9 fea1 	bl	8007f9e <lwip_htonl>
 800e25c:	4604      	mov	r4, r0
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	4618      	mov	r0, r3
 800e266:	f7f9 fe9a 	bl	8007f9e <lwip_htonl>
 800e26a:	4603      	mov	r3, r0
 800e26c:	1ae3      	subs	r3, r4, r3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	da24      	bge.n	800e2bc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	3370      	adds	r3, #112	; 0x70
 800e276:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e278:	e002      	b.n	800e280 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d011      	beq.n	800e2ac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	4618      	mov	r0, r3
 800e292:	f7f9 fe84 	bl	8007f9e <lwip_htonl>
 800e296:	4604      	mov	r4, r0
 800e298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f9 fe7d 	bl	8007f9e <lwip_htonl>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	dbe6      	blt.n	800e27a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	e009      	b.n	800e2d0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e2bc:	6a3b      	ldr	r3, [r7, #32]
 800e2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2c0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	623b      	str	r3, [r7, #32]
 800e2c8:	e002      	b.n	800e2d0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e2ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2cc:	f7fc fc3f 	bl	800ab4e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d012      	beq.n	800e302 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7f9 fe5b 	bl	8007f9e <lwip_htonl>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2f2:	8912      	ldrh	r2, [r2, #8]
 800e2f4:	4413      	add	r3, r2
  while (seg != NULL &&
 800e2f6:	69ba      	ldr	r2, [r7, #24]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	f4bf aed9 	bcs.w	800e0b0 <tcp_output+0x160>
 800e2fe:	e000      	b.n	800e302 <tcp_output+0x3b2>
      break;
 800e300:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e306:	2b00      	cmp	r3, #0
 800e308:	d108      	bne.n	800e31c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e312:	e004      	b.n	800e31e <tcp_output+0x3ce>
    goto output_done;
 800e314:	bf00      	nop
 800e316:	e002      	b.n	800e31e <tcp_output+0x3ce>
    goto output_done;
 800e318:	bf00      	nop
 800e31a:	e000      	b.n	800e31e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e31c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	8b5b      	ldrh	r3, [r3, #26]
 800e322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e326:	b29a      	uxth	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3728      	adds	r7, #40	; 0x28
 800e332:	46bd      	mov	sp, r7
 800e334:	bdb0      	pop	{r4, r5, r7, pc}
 800e336:	bf00      	nop

0800e338 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d106      	bne.n	800e354 <tcp_output_segment_busy+0x1c>
 800e346:	4b09      	ldr	r3, [pc, #36]	; (800e36c <tcp_output_segment_busy+0x34>)
 800e348:	f240 529a 	movw	r2, #1434	; 0x59a
 800e34c:	4908      	ldr	r1, [pc, #32]	; (800e370 <tcp_output_segment_busy+0x38>)
 800e34e:	4809      	ldr	r0, [pc, #36]	; (800e374 <tcp_output_segment_busy+0x3c>)
 800e350:	f005 fd5a 	bl	8013e08 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	7b9b      	ldrb	r3, [r3, #14]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d001      	beq.n	800e362 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e35e:	2301      	movs	r3, #1
 800e360:	e000      	b.n	800e364 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	08016a58 	.word	0x08016a58
 800e370:	08016ff4 	.word	0x08016ff4
 800e374:	08016aac 	.word	0x08016aac

0800e378 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e378:	b5b0      	push	{r4, r5, r7, lr}
 800e37a:	b08c      	sub	sp, #48	; 0x30
 800e37c:	af04      	add	r7, sp, #16
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d106      	bne.n	800e398 <tcp_output_segment+0x20>
 800e38a:	4b63      	ldr	r3, [pc, #396]	; (800e518 <tcp_output_segment+0x1a0>)
 800e38c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e390:	4962      	ldr	r1, [pc, #392]	; (800e51c <tcp_output_segment+0x1a4>)
 800e392:	4863      	ldr	r0, [pc, #396]	; (800e520 <tcp_output_segment+0x1a8>)
 800e394:	f005 fd38 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d106      	bne.n	800e3ac <tcp_output_segment+0x34>
 800e39e:	4b5e      	ldr	r3, [pc, #376]	; (800e518 <tcp_output_segment+0x1a0>)
 800e3a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e3a4:	495f      	ldr	r1, [pc, #380]	; (800e524 <tcp_output_segment+0x1ac>)
 800e3a6:	485e      	ldr	r0, [pc, #376]	; (800e520 <tcp_output_segment+0x1a8>)
 800e3a8:	f005 fd2e 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d106      	bne.n	800e3c0 <tcp_output_segment+0x48>
 800e3b2:	4b59      	ldr	r3, [pc, #356]	; (800e518 <tcp_output_segment+0x1a0>)
 800e3b4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e3b8:	495b      	ldr	r1, [pc, #364]	; (800e528 <tcp_output_segment+0x1b0>)
 800e3ba:	4859      	ldr	r0, [pc, #356]	; (800e520 <tcp_output_segment+0x1a8>)
 800e3bc:	f005 fd24 	bl	8013e08 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f7ff ffb9 	bl	800e338 <tcp_output_segment_busy>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d001      	beq.n	800e3d0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	e09f      	b.n	800e510 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	68dc      	ldr	r4, [r3, #12]
 800e3d8:	4610      	mov	r0, r2
 800e3da:	f7f9 fde0 	bl	8007f9e <lwip_htonl>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	68dc      	ldr	r4, [r3, #12]
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	f7f9 fdc2 	bl	8007f74 <lwip_htons>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e3fc:	441a      	add	r2, r3
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	3314      	adds	r3, #20
 800e408:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	7a9b      	ldrb	r3, [r3, #10]
 800e40e:	f003 0301 	and.w	r3, r3, #1
 800e412:	2b00      	cmp	r3, #0
 800e414:	d015      	beq.n	800e442 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	3304      	adds	r3, #4
 800e41a:	461a      	mov	r2, r3
 800e41c:	6879      	ldr	r1, [r7, #4]
 800e41e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e422:	f7fc fe8b 	bl	800b13c <tcp_eff_send_mss_netif>
 800e426:	4603      	mov	r3, r0
 800e428:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e42a:	8b7b      	ldrh	r3, [r7, #26]
 800e42c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e430:	4618      	mov	r0, r3
 800e432:	f7f9 fdb4 	bl	8007f9e <lwip_htonl>
 800e436:	4602      	mov	r2, r0
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	3304      	adds	r3, #4
 800e440:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e448:	2b00      	cmp	r3, #0
 800e44a:	da02      	bge.n	800e452 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	2200      	movs	r2, #0
 800e450:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e456:	2b00      	cmp	r3, #0
 800e458:	d10c      	bne.n	800e474 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e45a:	4b34      	ldr	r3, [pc, #208]	; (800e52c <tcp_output_segment+0x1b4>)
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	4618      	mov	r0, r3
 800e46a:	f7f9 fd98 	bl	8007f9e <lwip_htonl>
 800e46e:	4602      	mov	r2, r0
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68da      	ldr	r2, [r3, #12]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	1ad3      	subs	r3, r2, r3
 800e480:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	8959      	ldrh	r1, [r3, #10]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	8b3a      	ldrh	r2, [r7, #24]
 800e48e:	1a8a      	subs	r2, r1, r2
 800e490:	b292      	uxth	r2, r2
 800e492:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	8919      	ldrh	r1, [r3, #8]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	8b3a      	ldrh	r2, [r7, #24]
 800e4a0:	1a8a      	subs	r2, r1, r2
 800e4a2:	b292      	uxth	r2, r2
 800e4a4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	68fa      	ldr	r2, [r7, #12]
 800e4ac:	68d2      	ldr	r2, [r2, #12]
 800e4ae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	741a      	strb	r2, [r3, #16]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	f103 0214 	add.w	r2, r3, #20
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	7a9b      	ldrb	r3, [r3, #10]
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	f003 0304 	and.w	r3, r3, #4
 800e4ce:	4413      	add	r3, r2
 800e4d0:	69fa      	ldr	r2, [r7, #28]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d006      	beq.n	800e4e4 <tcp_output_segment+0x16c>
 800e4d6:	4b10      	ldr	r3, [pc, #64]	; (800e518 <tcp_output_segment+0x1a0>)
 800e4d8:	f240 621c 	movw	r2, #1564	; 0x61c
 800e4dc:	4914      	ldr	r1, [pc, #80]	; (800e530 <tcp_output_segment+0x1b8>)
 800e4de:	4810      	ldr	r0, [pc, #64]	; (800e520 <tcp_output_segment+0x1a8>)
 800e4e0:	f005 fc92 	bl	8013e08 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6858      	ldr	r0, [r3, #4]
 800e4e8:	68b9      	ldr	r1, [r7, #8]
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	1d1c      	adds	r4, r3, #4
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	7add      	ldrb	r5, [r3, #11]
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	7a9b      	ldrb	r3, [r3, #10]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	9202      	str	r2, [sp, #8]
 800e4fa:	2206      	movs	r2, #6
 800e4fc:	9201      	str	r2, [sp, #4]
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	462b      	mov	r3, r5
 800e502:	4622      	mov	r2, r4
 800e504:	f004 fbee 	bl	8012ce4 <ip4_output_if>
 800e508:	4603      	mov	r3, r0
 800e50a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3720      	adds	r7, #32
 800e514:	46bd      	mov	sp, r7
 800e516:	bdb0      	pop	{r4, r5, r7, pc}
 800e518:	08016a58 	.word	0x08016a58
 800e51c:	0801701c 	.word	0x0801701c
 800e520:	08016aac 	.word	0x08016aac
 800e524:	0801703c 	.word	0x0801703c
 800e528:	0801705c 	.word	0x0801705c
 800e52c:	2000aec0 	.word	0x2000aec0
 800e530:	08017080 	.word	0x08017080

0800e534 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e534:	b5b0      	push	{r4, r5, r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <tcp_rexmit_rto_prepare+0x1c>
 800e542:	4b31      	ldr	r3, [pc, #196]	; (800e608 <tcp_rexmit_rto_prepare+0xd4>)
 800e544:	f240 6263 	movw	r2, #1635	; 0x663
 800e548:	4930      	ldr	r1, [pc, #192]	; (800e60c <tcp_rexmit_rto_prepare+0xd8>)
 800e54a:	4831      	ldr	r0, [pc, #196]	; (800e610 <tcp_rexmit_rto_prepare+0xdc>)
 800e54c:	f005 fc5c 	bl	8013e08 <iprintf>

  if (pcb->unacked == NULL) {
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e554:	2b00      	cmp	r3, #0
 800e556:	d102      	bne.n	800e55e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e558:	f06f 0305 	mvn.w	r3, #5
 800e55c:	e050      	b.n	800e600 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e562:	60fb      	str	r3, [r7, #12]
 800e564:	e00b      	b.n	800e57e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f7ff fee6 	bl	800e338 <tcp_output_segment_busy>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d002      	beq.n	800e578 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e572:	f06f 0305 	mvn.w	r3, #5
 800e576:	e043      	b.n	800e600 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	60fb      	str	r3, [r7, #12]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1ef      	bne.n	800e566 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	f7ff fed6 	bl	800e338 <tcp_output_segment_busy>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d002      	beq.n	800e598 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e592:	f06f 0305 	mvn.w	r3, #5
 800e596:	e033      	b.n	800e600 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	8b5b      	ldrh	r3, [r3, #26]
 800e5b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f9 fceb 	bl	8007f9e <lwip_htonl>
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	891b      	ldrh	r3, [r3, #8]
 800e5ce:	461d      	mov	r5, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	899b      	ldrh	r3, [r3, #12]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7f9 fccb 	bl	8007f74 <lwip_htons>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	f003 0303 	and.w	r3, r3, #3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d001      	beq.n	800e5ee <tcp_rexmit_rto_prepare+0xba>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e000      	b.n	800e5f0 <tcp_rexmit_rto_prepare+0xbc>
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	442b      	add	r3, r5
 800e5f2:	18e2      	adds	r2, r4, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bdb0      	pop	{r4, r5, r7, pc}
 800e608:	08016a58 	.word	0x08016a58
 800e60c:	08017094 	.word	0x08017094
 800e610:	08016aac 	.word	0x08016aac

0800e614 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d106      	bne.n	800e630 <tcp_rexmit_rto_commit+0x1c>
 800e622:	4b0d      	ldr	r3, [pc, #52]	; (800e658 <tcp_rexmit_rto_commit+0x44>)
 800e624:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e628:	490c      	ldr	r1, [pc, #48]	; (800e65c <tcp_rexmit_rto_commit+0x48>)
 800e62a:	480d      	ldr	r0, [pc, #52]	; (800e660 <tcp_rexmit_rto_commit+0x4c>)
 800e62c:	f005 fbec 	bl	8013e08 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e636:	2bff      	cmp	r3, #255	; 0xff
 800e638:	d007      	beq.n	800e64a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e640:	3301      	adds	r3, #1
 800e642:	b2da      	uxtb	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7ff fc80 	bl	800df50 <tcp_output>
}
 800e650:	bf00      	nop
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	08016a58 	.word	0x08016a58
 800e65c:	080170b8 	.word	0x080170b8
 800e660:	08016aac 	.word	0x08016aac

0800e664 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d106      	bne.n	800e680 <tcp_rexmit_rto+0x1c>
 800e672:	4b0a      	ldr	r3, [pc, #40]	; (800e69c <tcp_rexmit_rto+0x38>)
 800e674:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e678:	4909      	ldr	r1, [pc, #36]	; (800e6a0 <tcp_rexmit_rto+0x3c>)
 800e67a:	480a      	ldr	r0, [pc, #40]	; (800e6a4 <tcp_rexmit_rto+0x40>)
 800e67c:	f005 fbc4 	bl	8013e08 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f7ff ff57 	bl	800e534 <tcp_rexmit_rto_prepare>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d102      	bne.n	800e692 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7ff ffc1 	bl	800e614 <tcp_rexmit_rto_commit>
  }
}
 800e692:	bf00      	nop
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	08016a58 	.word	0x08016a58
 800e6a0:	080170dc 	.word	0x080170dc
 800e6a4:	08016aac 	.word	0x08016aac

0800e6a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e6a8:	b590      	push	{r4, r7, lr}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d106      	bne.n	800e6c4 <tcp_rexmit+0x1c>
 800e6b6:	4b2f      	ldr	r3, [pc, #188]	; (800e774 <tcp_rexmit+0xcc>)
 800e6b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e6bc:	492e      	ldr	r1, [pc, #184]	; (800e778 <tcp_rexmit+0xd0>)
 800e6be:	482f      	ldr	r0, [pc, #188]	; (800e77c <tcp_rexmit+0xd4>)
 800e6c0:	f005 fba2 	bl	8013e08 <iprintf>

  if (pcb->unacked == NULL) {
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e6cc:	f06f 0305 	mvn.w	r3, #5
 800e6d0:	e04c      	b.n	800e76c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e6d8:	68b8      	ldr	r0, [r7, #8]
 800e6da:	f7ff fe2d 	bl	800e338 <tcp_output_segment_busy>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d002      	beq.n	800e6ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e6e4:	f06f 0305 	mvn.w	r3, #5
 800e6e8:	e040      	b.n	800e76c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	336c      	adds	r3, #108	; 0x6c
 800e6f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e6f8:	e002      	b.n	800e700 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d011      	beq.n	800e72c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	4618      	mov	r0, r3
 800e712:	f7f9 fc44 	bl	8007f9e <lwip_htonl>
 800e716:	4604      	mov	r4, r0
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	4618      	mov	r0, r3
 800e720:	f7f9 fc3d 	bl	8007f9e <lwip_htonl>
 800e724:	4603      	mov	r3, r0
 800e726:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e728:	2b00      	cmp	r3, #0
 800e72a:	dbe6      	blt.n	800e6fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d103      	bne.n	800e74a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e750:	2bff      	cmp	r3, #255	; 0xff
 800e752:	d007      	beq.n	800e764 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e75a:	3301      	adds	r3, #1
 800e75c:	b2da      	uxtb	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e76a:	2300      	movs	r3, #0
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3714      	adds	r7, #20
 800e770:	46bd      	mov	sp, r7
 800e772:	bd90      	pop	{r4, r7, pc}
 800e774:	08016a58 	.word	0x08016a58
 800e778:	080170f8 	.word	0x080170f8
 800e77c:	08016aac 	.word	0x08016aac

0800e780 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d106      	bne.n	800e79c <tcp_rexmit_fast+0x1c>
 800e78e:	4b2a      	ldr	r3, [pc, #168]	; (800e838 <tcp_rexmit_fast+0xb8>)
 800e790:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e794:	4929      	ldr	r1, [pc, #164]	; (800e83c <tcp_rexmit_fast+0xbc>)
 800e796:	482a      	ldr	r0, [pc, #168]	; (800e840 <tcp_rexmit_fast+0xc0>)
 800e798:	f005 fb36 	bl	8013e08 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d045      	beq.n	800e830 <tcp_rexmit_fast+0xb0>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	8b5b      	ldrh	r3, [r3, #26]
 800e7a8:	f003 0304 	and.w	r3, r3, #4
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d13f      	bne.n	800e830 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7ff ff79 	bl	800e6a8 <tcp_rexmit>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d139      	bne.n	800e830 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	bf28      	it	cs
 800e7cc:	4613      	movcs	r3, r2
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	da00      	bge.n	800e7d6 <tcp_rexmit_fast+0x56>
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	105b      	asrs	r3, r3, #1
 800e7d8:	b29a      	uxth	r2, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7ec:	005b      	lsls	r3, r3, #1
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d206      	bcs.n	800e800 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7f6:	005b      	lsls	r3, r3, #1
 800e7f8:	b29a      	uxth	r2, r3
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e80a:	4619      	mov	r1, r3
 800e80c:	0049      	lsls	r1, r1, #1
 800e80e:	440b      	add	r3, r1
 800e810:	b29b      	uxth	r3, r3
 800e812:	4413      	add	r3, r2
 800e814:	b29a      	uxth	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	8b5b      	ldrh	r3, [r3, #26]
 800e820:	f043 0304 	orr.w	r3, r3, #4
 800e824:	b29a      	uxth	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e830:	bf00      	nop
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	08016a58 	.word	0x08016a58
 800e83c:	08017110 	.word	0x08017110
 800e840:	08016aac 	.word	0x08016aac

0800e844 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	607b      	str	r3, [r7, #4]
 800e84e:	460b      	mov	r3, r1
 800e850:	817b      	strh	r3, [r7, #10]
 800e852:	4613      	mov	r3, r2
 800e854:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e856:	897a      	ldrh	r2, [r7, #10]
 800e858:	893b      	ldrh	r3, [r7, #8]
 800e85a:	4413      	add	r3, r2
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	3314      	adds	r3, #20
 800e860:	b29b      	uxth	r3, r3
 800e862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e866:	4619      	mov	r1, r3
 800e868:	2022      	movs	r0, #34	; 0x22
 800e86a:	f7fa fc09 	bl	8009080 <pbuf_alloc>
 800e86e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d04d      	beq.n	800e912 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e876:	897b      	ldrh	r3, [r7, #10]
 800e878:	3313      	adds	r3, #19
 800e87a:	697a      	ldr	r2, [r7, #20]
 800e87c:	8952      	ldrh	r2, [r2, #10]
 800e87e:	4293      	cmp	r3, r2
 800e880:	db06      	blt.n	800e890 <tcp_output_alloc_header_common+0x4c>
 800e882:	4b26      	ldr	r3, [pc, #152]	; (800e91c <tcp_output_alloc_header_common+0xd8>)
 800e884:	f240 7223 	movw	r2, #1827	; 0x723
 800e888:	4925      	ldr	r1, [pc, #148]	; (800e920 <tcp_output_alloc_header_common+0xdc>)
 800e88a:	4826      	ldr	r0, [pc, #152]	; (800e924 <tcp_output_alloc_header_common+0xe0>)
 800e88c:	f005 fabc 	bl	8013e08 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e896:	8c3b      	ldrh	r3, [r7, #32]
 800e898:	4618      	mov	r0, r3
 800e89a:	f7f9 fb6b 	bl	8007f74 <lwip_htons>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e8a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7f9 fb63 	bl	8007f74 <lwip_htons>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f7f9 fb6e 	bl	8007f9e <lwip_htonl>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e8c8:	897b      	ldrh	r3, [r7, #10]
 800e8ca:	089b      	lsrs	r3, r3, #2
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	3305      	adds	r3, #5
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	031b      	lsls	r3, r3, #12
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7f9 fb47 	bl	8007f74 <lwip_htons>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e8ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7f9 fb3f 	bl	8007f74 <lwip_htons>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	2200      	movs	r2, #0
 800e902:	741a      	strb	r2, [r3, #16]
 800e904:	2200      	movs	r2, #0
 800e906:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	2200      	movs	r2, #0
 800e90c:	749a      	strb	r2, [r3, #18]
 800e90e:	2200      	movs	r2, #0
 800e910:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e912:	697b      	ldr	r3, [r7, #20]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3718      	adds	r7, #24
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	08016a58 	.word	0x08016a58
 800e920:	08017130 	.word	0x08017130
 800e924:	08016aac 	.word	0x08016aac

0800e928 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e928:	b5b0      	push	{r4, r5, r7, lr}
 800e92a:	b08a      	sub	sp, #40	; 0x28
 800e92c:	af04      	add	r7, sp, #16
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	607b      	str	r3, [r7, #4]
 800e932:	460b      	mov	r3, r1
 800e934:	817b      	strh	r3, [r7, #10]
 800e936:	4613      	mov	r3, r2
 800e938:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d106      	bne.n	800e94e <tcp_output_alloc_header+0x26>
 800e940:	4b15      	ldr	r3, [pc, #84]	; (800e998 <tcp_output_alloc_header+0x70>)
 800e942:	f240 7242 	movw	r2, #1858	; 0x742
 800e946:	4915      	ldr	r1, [pc, #84]	; (800e99c <tcp_output_alloc_header+0x74>)
 800e948:	4815      	ldr	r0, [pc, #84]	; (800e9a0 <tcp_output_alloc_header+0x78>)
 800e94a:	f005 fa5d 	bl	8013e08 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	8adb      	ldrh	r3, [r3, #22]
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	8b12      	ldrh	r2, [r2, #24]
 800e95a:	68f9      	ldr	r1, [r7, #12]
 800e95c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e95e:	893d      	ldrh	r5, [r7, #8]
 800e960:	897c      	ldrh	r4, [r7, #10]
 800e962:	9103      	str	r1, [sp, #12]
 800e964:	2110      	movs	r1, #16
 800e966:	9102      	str	r1, [sp, #8]
 800e968:	9201      	str	r2, [sp, #4]
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	462a      	mov	r2, r5
 800e970:	4621      	mov	r1, r4
 800e972:	f7ff ff67 	bl	800e844 <tcp_output_alloc_header_common>
 800e976:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d006      	beq.n	800e98c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e986:	441a      	add	r2, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e98c:	697b      	ldr	r3, [r7, #20]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bdb0      	pop	{r4, r5, r7, pc}
 800e996:	bf00      	nop
 800e998:	08016a58 	.word	0x08016a58
 800e99c:	08017160 	.word	0x08017160
 800e9a0:	08016aac 	.word	0x08016aac

0800e9a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b088      	sub	sp, #32
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	71fb      	strb	r3, [r7, #7]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d106      	bne.n	800e9d2 <tcp_output_fill_options+0x2e>
 800e9c4:	4b13      	ldr	r3, [pc, #76]	; (800ea14 <tcp_output_fill_options+0x70>)
 800e9c6:	f240 7256 	movw	r2, #1878	; 0x756
 800e9ca:	4913      	ldr	r1, [pc, #76]	; (800ea18 <tcp_output_fill_options+0x74>)
 800e9cc:	4813      	ldr	r0, [pc, #76]	; (800ea1c <tcp_output_fill_options+0x78>)
 800e9ce:	f005 fa1b 	bl	8013e08 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	3314      	adds	r3, #20
 800e9dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	f103 0214 	add.w	r2, r3, #20
 800e9e4:	8bfb      	ldrh	r3, [r7, #30]
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	79fb      	ldrb	r3, [r7, #7]
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	f003 0304 	and.w	r3, r3, #4
 800e9f2:	440b      	add	r3, r1
 800e9f4:	4413      	add	r3, r2
 800e9f6:	697a      	ldr	r2, [r7, #20]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d006      	beq.n	800ea0a <tcp_output_fill_options+0x66>
 800e9fc:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <tcp_output_fill_options+0x70>)
 800e9fe:	f240 7275 	movw	r2, #1909	; 0x775
 800ea02:	4907      	ldr	r1, [pc, #28]	; (800ea20 <tcp_output_fill_options+0x7c>)
 800ea04:	4805      	ldr	r0, [pc, #20]	; (800ea1c <tcp_output_fill_options+0x78>)
 800ea06:	f005 f9ff 	bl	8013e08 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ea0a:	bf00      	nop
 800ea0c:	3720      	adds	r7, #32
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	08016a58 	.word	0x08016a58
 800ea18:	08017188 	.word	0x08017188
 800ea1c:	08016aac 	.word	0x08016aac
 800ea20:	08017080 	.word	0x08017080

0800ea24 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b08a      	sub	sp, #40	; 0x28
 800ea28:	af04      	add	r7, sp, #16
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
 800ea30:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d106      	bne.n	800ea46 <tcp_output_control_segment+0x22>
 800ea38:	4b1c      	ldr	r3, [pc, #112]	; (800eaac <tcp_output_control_segment+0x88>)
 800ea3a:	f240 7287 	movw	r2, #1927	; 0x787
 800ea3e:	491c      	ldr	r1, [pc, #112]	; (800eab0 <tcp_output_control_segment+0x8c>)
 800ea40:	481c      	ldr	r0, [pc, #112]	; (800eab4 <tcp_output_control_segment+0x90>)
 800ea42:	f005 f9e1 	bl	8013e08 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ea46:	683a      	ldr	r2, [r7, #0]
 800ea48:	6879      	ldr	r1, [r7, #4]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f7fe ff40 	bl	800d8d0 <tcp_route>
 800ea50:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d102      	bne.n	800ea5e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ea58:	23fc      	movs	r3, #252	; 0xfc
 800ea5a:	75fb      	strb	r3, [r7, #23]
 800ea5c:	e01c      	b.n	800ea98 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d006      	beq.n	800ea72 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	7adb      	ldrb	r3, [r3, #11]
 800ea68:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	7a9b      	ldrb	r3, [r3, #10]
 800ea6e:	757b      	strb	r3, [r7, #21]
 800ea70:	e003      	b.n	800ea7a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ea72:	23ff      	movs	r3, #255	; 0xff
 800ea74:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ea76:	2300      	movs	r3, #0
 800ea78:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ea7a:	7dba      	ldrb	r2, [r7, #22]
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	9302      	str	r3, [sp, #8]
 800ea80:	2306      	movs	r3, #6
 800ea82:	9301      	str	r3, [sp, #4]
 800ea84:	7d7b      	ldrb	r3, [r7, #21]
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	6879      	ldr	r1, [r7, #4]
 800ea8e:	68b8      	ldr	r0, [r7, #8]
 800ea90:	f004 f928 	bl	8012ce4 <ip4_output_if>
 800ea94:	4603      	mov	r3, r0
 800ea96:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ea98:	68b8      	ldr	r0, [r7, #8]
 800ea9a:	f7fa fdd5 	bl	8009648 <pbuf_free>
  return err;
 800ea9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3718      	adds	r7, #24
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	08016a58 	.word	0x08016a58
 800eab0:	080171b0 	.word	0x080171b0
 800eab4:	08016aac 	.word	0x08016aac

0800eab8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800eab8:	b590      	push	{r4, r7, lr}
 800eaba:	b08b      	sub	sp, #44	; 0x2c
 800eabc:	af04      	add	r7, sp, #16
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d106      	bne.n	800eada <tcp_rst+0x22>
 800eacc:	4b1f      	ldr	r3, [pc, #124]	; (800eb4c <tcp_rst+0x94>)
 800eace:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ead2:	491f      	ldr	r1, [pc, #124]	; (800eb50 <tcp_rst+0x98>)
 800ead4:	481f      	ldr	r0, [pc, #124]	; (800eb54 <tcp_rst+0x9c>)
 800ead6:	f005 f997 	bl	8013e08 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800eada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d106      	bne.n	800eaee <tcp_rst+0x36>
 800eae0:	4b1a      	ldr	r3, [pc, #104]	; (800eb4c <tcp_rst+0x94>)
 800eae2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800eae6:	491c      	ldr	r1, [pc, #112]	; (800eb58 <tcp_rst+0xa0>)
 800eae8:	481a      	ldr	r0, [pc, #104]	; (800eb54 <tcp_rst+0x9c>)
 800eaea:	f005 f98d 	bl	8013e08 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eaee:	2300      	movs	r3, #0
 800eaf0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800eaf2:	f246 0308 	movw	r3, #24584	; 0x6008
 800eaf6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800eaf8:	7dfb      	ldrb	r3, [r7, #23]
 800eafa:	b29c      	uxth	r4, r3
 800eafc:	68b8      	ldr	r0, [r7, #8]
 800eafe:	f7f9 fa4e 	bl	8007f9e <lwip_htonl>
 800eb02:	4602      	mov	r2, r0
 800eb04:	8abb      	ldrh	r3, [r7, #20]
 800eb06:	9303      	str	r3, [sp, #12]
 800eb08:	2314      	movs	r3, #20
 800eb0a:	9302      	str	r3, [sp, #8]
 800eb0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb0e:	9301      	str	r3, [sp, #4]
 800eb10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	4613      	mov	r3, r2
 800eb16:	2200      	movs	r2, #0
 800eb18:	4621      	mov	r1, r4
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f7ff fe92 	bl	800e844 <tcp_output_alloc_header_common>
 800eb20:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00c      	beq.n	800eb42 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb28:	7dfb      	ldrb	r3, [r7, #23]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	6939      	ldr	r1, [r7, #16]
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f7ff ff38 	bl	800e9a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800eb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb36:	683a      	ldr	r2, [r7, #0]
 800eb38:	6939      	ldr	r1, [r7, #16]
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	f7ff ff72 	bl	800ea24 <tcp_output_control_segment>
 800eb40:	e000      	b.n	800eb44 <tcp_rst+0x8c>
    return;
 800eb42:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800eb44:	371c      	adds	r7, #28
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd90      	pop	{r4, r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	08016a58 	.word	0x08016a58
 800eb50:	080171dc 	.word	0x080171dc
 800eb54:	08016aac 	.word	0x08016aac
 800eb58:	080171f8 	.word	0x080171f8

0800eb5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800eb5c:	b590      	push	{r4, r7, lr}
 800eb5e:	b087      	sub	sp, #28
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d106      	bne.n	800eb80 <tcp_send_empty_ack+0x24>
 800eb72:	4b28      	ldr	r3, [pc, #160]	; (800ec14 <tcp_send_empty_ack+0xb8>)
 800eb74:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800eb78:	4927      	ldr	r1, [pc, #156]	; (800ec18 <tcp_send_empty_ack+0xbc>)
 800eb7a:	4828      	ldr	r0, [pc, #160]	; (800ec1c <tcp_send_empty_ack+0xc0>)
 800eb7c:	f005 f944 	bl	8013e08 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	f003 0304 	and.w	r3, r3, #4
 800eb8a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800eb8c:	7d7b      	ldrb	r3, [r7, #21]
 800eb8e:	b29c      	uxth	r4, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7f9 fa02 	bl	8007f9e <lwip_htonl>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	4621      	mov	r1, r4
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7ff fec1 	bl	800e928 <tcp_output_alloc_header>
 800eba6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d109      	bne.n	800ebc2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	8b5b      	ldrh	r3, [r3, #26]
 800ebb2:	f043 0303 	orr.w	r3, r3, #3
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ebbc:	f06f 0301 	mvn.w	r3, #1
 800ebc0:	e023      	b.n	800ec0a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ebc2:	7dbb      	ldrb	r3, [r7, #22]
 800ebc4:	7dfa      	ldrb	r2, [r7, #23]
 800ebc6:	6939      	ldr	r1, [r7, #16]
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f7ff feeb 	bl	800e9a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	6939      	ldr	r1, [r7, #16]
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7ff ff24 	bl	800ea24 <tcp_output_control_segment>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ebe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d007      	beq.n	800ebf8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	8b5b      	ldrh	r3, [r3, #26]
 800ebec:	f043 0303 	orr.w	r3, r3, #3
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	835a      	strh	r2, [r3, #26]
 800ebf6:	e006      	b.n	800ec06 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	8b5b      	ldrh	r3, [r3, #26]
 800ebfc:	f023 0303 	bic.w	r3, r3, #3
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ec06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd90      	pop	{r4, r7, pc}
 800ec12:	bf00      	nop
 800ec14:	08016a58 	.word	0x08016a58
 800ec18:	08017214 	.word	0x08017214
 800ec1c:	08016aac 	.word	0x08016aac

0800ec20 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ec20:	b590      	push	{r4, r7, lr}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ec28:	2300      	movs	r3, #0
 800ec2a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d106      	bne.n	800ec40 <tcp_keepalive+0x20>
 800ec32:	4b18      	ldr	r3, [pc, #96]	; (800ec94 <tcp_keepalive+0x74>)
 800ec34:	f640 0224 	movw	r2, #2084	; 0x824
 800ec38:	4917      	ldr	r1, [pc, #92]	; (800ec98 <tcp_keepalive+0x78>)
 800ec3a:	4818      	ldr	r0, [pc, #96]	; (800ec9c <tcp_keepalive+0x7c>)
 800ec3c:	f005 f8e4 	bl	8013e08 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ec40:	7dfb      	ldrb	r3, [r7, #23]
 800ec42:	b29c      	uxth	r4, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7f9 f9a7 	bl	8007f9e <lwip_htonl>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2200      	movs	r2, #0
 800ec54:	4621      	mov	r1, r4
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7ff fe66 	bl	800e928 <tcp_output_alloc_header>
 800ec5c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d102      	bne.n	800ec6a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ec64:	f04f 33ff 	mov.w	r3, #4294967295
 800ec68:	e010      	b.n	800ec8c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	6939      	ldr	r1, [r7, #16]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff fe97 	bl	800e9a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	3304      	adds	r3, #4
 800ec7c:	6939      	ldr	r1, [r7, #16]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7ff fed0 	bl	800ea24 <tcp_output_control_segment>
 800ec84:	4603      	mov	r3, r0
 800ec86:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ec88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	371c      	adds	r7, #28
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd90      	pop	{r4, r7, pc}
 800ec94:	08016a58 	.word	0x08016a58
 800ec98:	08017234 	.word	0x08017234
 800ec9c:	08016aac 	.word	0x08016aac

0800eca0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800eca0:	b590      	push	{r4, r7, lr}
 800eca2:	b08b      	sub	sp, #44	; 0x2c
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d106      	bne.n	800ecc2 <tcp_zero_window_probe+0x22>
 800ecb4:	4b4c      	ldr	r3, [pc, #304]	; (800ede8 <tcp_zero_window_probe+0x148>)
 800ecb6:	f640 024f 	movw	r2, #2127	; 0x84f
 800ecba:	494c      	ldr	r1, [pc, #304]	; (800edec <tcp_zero_window_probe+0x14c>)
 800ecbc:	484c      	ldr	r0, [pc, #304]	; (800edf0 <tcp_zero_window_probe+0x150>)
 800ecbe:	f005 f8a3 	bl	8013e08 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ecc8:	6a3b      	ldr	r3, [r7, #32]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d101      	bne.n	800ecd2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	e086      	b.n	800ede0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ecd8:	2bff      	cmp	r3, #255	; 0xff
 800ecda:	d007      	beq.n	800ecec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ece2:	3301      	adds	r3, #1
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ecec:	6a3b      	ldr	r3, [r7, #32]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	899b      	ldrh	r3, [r3, #12]
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7f9 f93d 	bl	8007f74 <lwip_htons>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d005      	beq.n	800ed12 <tcp_zero_window_probe+0x72>
 800ed06:	6a3b      	ldr	r3, [r7, #32]
 800ed08:	891b      	ldrh	r3, [r3, #8]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d101      	bne.n	800ed12 <tcp_zero_window_probe+0x72>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e000      	b.n	800ed14 <tcp_zero_window_probe+0x74>
 800ed12:	2300      	movs	r3, #0
 800ed14:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ed16:	7ffb      	ldrb	r3, [r7, #31]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	bf0c      	ite	eq
 800ed1c:	2301      	moveq	r3, #1
 800ed1e:	2300      	movne	r3, #0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ed24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed28:	b299      	uxth	r1, r3
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	8bba      	ldrh	r2, [r7, #28]
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7ff fdf8 	bl	800e928 <tcp_output_alloc_header>
 800ed38:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d102      	bne.n	800ed46 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ed40:	f04f 33ff 	mov.w	r3, #4294967295
 800ed44:	e04c      	b.n	800ede0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ed4c:	7ffb      	ldrb	r3, [r7, #31]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d011      	beq.n	800ed76 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	899b      	ldrh	r3, [r3, #12]
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	b21b      	sxth	r3, r3
 800ed5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ed5e:	b21c      	sxth	r4, r3
 800ed60:	2011      	movs	r0, #17
 800ed62:	f7f9 f907 	bl	8007f74 <lwip_htons>
 800ed66:	4603      	mov	r3, r0
 800ed68:	b21b      	sxth	r3, r3
 800ed6a:	4323      	orrs	r3, r4
 800ed6c:	b21b      	sxth	r3, r3
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	819a      	strh	r2, [r3, #12]
 800ed74:	e010      	b.n	800ed98 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	3314      	adds	r3, #20
 800ed7c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ed7e:	6a3b      	ldr	r3, [r7, #32]
 800ed80:	6858      	ldr	r0, [r3, #4]
 800ed82:	6a3b      	ldr	r3, [r7, #32]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	891a      	ldrh	r2, [r3, #8]
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	891b      	ldrh	r3, [r3, #8]
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	2201      	movs	r2, #1
 800ed92:	6939      	ldr	r1, [r7, #16]
 800ed94:	f7fa fe52 	bl	8009a3c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7f9 f8fd 	bl	8007f9e <lwip_htonl>
 800eda4:	4603      	mov	r3, r0
 800eda6:	3301      	adds	r3, #1
 800eda8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	da02      	bge.n	800edbc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800edbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc0:	2200      	movs	r2, #0
 800edc2:	69b9      	ldr	r1, [r7, #24]
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7ff fded 	bl	800e9a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3304      	adds	r3, #4
 800edd0:	69b9      	ldr	r1, [r7, #24]
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7ff fe26 	bl	800ea24 <tcp_output_control_segment>
 800edd8:	4603      	mov	r3, r0
 800edda:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eddc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	372c      	adds	r7, #44	; 0x2c
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd90      	pop	{r4, r7, pc}
 800ede8:	08016a58 	.word	0x08016a58
 800edec:	08017250 	.word	0x08017250
 800edf0:	08016aac 	.word	0x08016aac

0800edf4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800edfc:	f7fa ff0c 	bl	8009c18 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ee00:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <tcpip_tcp_timer+0x38>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d103      	bne.n	800ee10 <tcpip_tcp_timer+0x1c>
 800ee08:	4b09      	ldr	r3, [pc, #36]	; (800ee30 <tcpip_tcp_timer+0x3c>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d005      	beq.n	800ee1c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ee10:	2200      	movs	r2, #0
 800ee12:	4908      	ldr	r1, [pc, #32]	; (800ee34 <tcpip_tcp_timer+0x40>)
 800ee14:	20fa      	movs	r0, #250	; 0xfa
 800ee16:	f000 f8f3 	bl	800f000 <sys_timeout>
 800ee1a:	e003      	b.n	800ee24 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ee1c:	4b06      	ldr	r3, [pc, #24]	; (800ee38 <tcpip_tcp_timer+0x44>)
 800ee1e:	2200      	movs	r2, #0
 800ee20:	601a      	str	r2, [r3, #0]
  }
}
 800ee22:	bf00      	nop
 800ee24:	bf00      	nop
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	2000aecc 	.word	0x2000aecc
 800ee30:	2000aed0 	.word	0x2000aed0
 800ee34:	0800edf5 	.word	0x0800edf5
 800ee38:	2000af18 	.word	0x2000af18

0800ee3c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ee40:	4b0a      	ldr	r3, [pc, #40]	; (800ee6c <tcp_timer_needed+0x30>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10f      	bne.n	800ee68 <tcp_timer_needed+0x2c>
 800ee48:	4b09      	ldr	r3, [pc, #36]	; (800ee70 <tcp_timer_needed+0x34>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d103      	bne.n	800ee58 <tcp_timer_needed+0x1c>
 800ee50:	4b08      	ldr	r3, [pc, #32]	; (800ee74 <tcp_timer_needed+0x38>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ee58:	4b04      	ldr	r3, [pc, #16]	; (800ee6c <tcp_timer_needed+0x30>)
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ee5e:	2200      	movs	r2, #0
 800ee60:	4905      	ldr	r1, [pc, #20]	; (800ee78 <tcp_timer_needed+0x3c>)
 800ee62:	20fa      	movs	r0, #250	; 0xfa
 800ee64:	f000 f8cc 	bl	800f000 <sys_timeout>
  }
}
 800ee68:	bf00      	nop
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	2000af18 	.word	0x2000af18
 800ee70:	2000aecc 	.word	0x2000aecc
 800ee74:	2000aed0 	.word	0x2000aed0
 800ee78:	0800edf5 	.word	0x0800edf5

0800ee7c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ee88:	2006      	movs	r0, #6
 800ee8a:	f7f9 fceb 	bl	8008864 <memp_malloc>
 800ee8e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d109      	bne.n	800eeaa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d151      	bne.n	800ef40 <sys_timeout_abs+0xc4>
 800ee9c:	4b2a      	ldr	r3, [pc, #168]	; (800ef48 <sys_timeout_abs+0xcc>)
 800ee9e:	22be      	movs	r2, #190	; 0xbe
 800eea0:	492a      	ldr	r1, [pc, #168]	; (800ef4c <sys_timeout_abs+0xd0>)
 800eea2:	482b      	ldr	r0, [pc, #172]	; (800ef50 <sys_timeout_abs+0xd4>)
 800eea4:	f004 ffb0 	bl	8013e08 <iprintf>
    return;
 800eea8:	e04a      	b.n	800ef40 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	2200      	movs	r2, #0
 800eeae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	68ba      	ldr	r2, [r7, #8]
 800eeb4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800eec2:	4b24      	ldr	r3, [pc, #144]	; (800ef54 <sys_timeout_abs+0xd8>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d103      	bne.n	800eed2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800eeca:	4a22      	ldr	r2, [pc, #136]	; (800ef54 <sys_timeout_abs+0xd8>)
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	6013      	str	r3, [r2, #0]
    return;
 800eed0:	e037      	b.n	800ef42 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	685a      	ldr	r2, [r3, #4]
 800eed6:	4b1f      	ldr	r3, [pc, #124]	; (800ef54 <sys_timeout_abs+0xd8>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	0fdb      	lsrs	r3, r3, #31
 800eee0:	f003 0301 	and.w	r3, r3, #1
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d007      	beq.n	800eefa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800eeea:	4b1a      	ldr	r3, [pc, #104]	; (800ef54 <sys_timeout_abs+0xd8>)
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800eef2:	4a18      	ldr	r2, [pc, #96]	; (800ef54 <sys_timeout_abs+0xd8>)
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	e023      	b.n	800ef42 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800eefa:	4b16      	ldr	r3, [pc, #88]	; (800ef54 <sys_timeout_abs+0xd8>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	e01a      	b.n	800ef38 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00b      	beq.n	800ef22 <sys_timeout_abs+0xa6>
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	685a      	ldr	r2, [r3, #4]
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	0fdb      	lsrs	r3, r3, #31
 800ef18:	f003 0301 	and.w	r3, r3, #1
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d007      	beq.n	800ef32 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	693a      	ldr	r2, [r7, #16]
 800ef2e:	601a      	str	r2, [r3, #0]
        break;
 800ef30:	e007      	b.n	800ef42 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	617b      	str	r3, [r7, #20]
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d1e1      	bne.n	800ef02 <sys_timeout_abs+0x86>
 800ef3e:	e000      	b.n	800ef42 <sys_timeout_abs+0xc6>
    return;
 800ef40:	bf00      	nop
      }
    }
  }
}
 800ef42:	3718      	adds	r7, #24
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	08017274 	.word	0x08017274
 800ef4c:	080172a8 	.word	0x080172a8
 800ef50:	080172e8 	.word	0x080172e8
 800ef54:	2000af10 	.word	0x2000af10

0800ef58 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	4798      	blx	r3

  now = sys_now();
 800ef6a:	f7f8 fdef 	bl	8007b4c <sys_now>
 800ef6e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	4b0f      	ldr	r3, [pc, #60]	; (800efb4 <lwip_cyclic_timer+0x5c>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4413      	add	r3, r2
 800ef7a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	0fdb      	lsrs	r3, r3, #31
 800ef84:	f003 0301 	and.w	r3, r3, #1
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d009      	beq.n	800efa2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	4413      	add	r3, r2
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	4907      	ldr	r1, [pc, #28]	; (800efb8 <lwip_cyclic_timer+0x60>)
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7ff ff6e 	bl	800ee7c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800efa0:	e004      	b.n	800efac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	4904      	ldr	r1, [pc, #16]	; (800efb8 <lwip_cyclic_timer+0x60>)
 800efa6:	68f8      	ldr	r0, [r7, #12]
 800efa8:	f7ff ff68 	bl	800ee7c <sys_timeout_abs>
}
 800efac:	bf00      	nop
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	2000af14 	.word	0x2000af14
 800efb8:	0800ef59 	.word	0x0800ef59

0800efbc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800efc2:	2301      	movs	r3, #1
 800efc4:	607b      	str	r3, [r7, #4]
 800efc6:	e00e      	b.n	800efe6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800efc8:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <sys_timeouts_init+0x3c>)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	00db      	lsls	r3, r3, #3
 800efd4:	4a08      	ldr	r2, [pc, #32]	; (800eff8 <sys_timeouts_init+0x3c>)
 800efd6:	4413      	add	r3, r2
 800efd8:	461a      	mov	r2, r3
 800efda:	4908      	ldr	r1, [pc, #32]	; (800effc <sys_timeouts_init+0x40>)
 800efdc:	f000 f810 	bl	800f000 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	3301      	adds	r3, #1
 800efe4:	607b      	str	r3, [r7, #4]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b04      	cmp	r3, #4
 800efea:	d9ed      	bls.n	800efc8 <sys_timeouts_init+0xc>
  }
}
 800efec:	bf00      	nop
 800efee:	bf00      	nop
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	0801a728 	.word	0x0801a728
 800effc:	0800ef59 	.word	0x0800ef59

0800f000 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f012:	d306      	bcc.n	800f022 <sys_timeout+0x22>
 800f014:	4b0a      	ldr	r3, [pc, #40]	; (800f040 <sys_timeout+0x40>)
 800f016:	f240 1229 	movw	r2, #297	; 0x129
 800f01a:	490a      	ldr	r1, [pc, #40]	; (800f044 <sys_timeout+0x44>)
 800f01c:	480a      	ldr	r0, [pc, #40]	; (800f048 <sys_timeout+0x48>)
 800f01e:	f004 fef3 	bl	8013e08 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f022:	f7f8 fd93 	bl	8007b4c <sys_now>
 800f026:	4602      	mov	r2, r0
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	4413      	add	r3, r2
 800f02c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	68b9      	ldr	r1, [r7, #8]
 800f032:	6978      	ldr	r0, [r7, #20]
 800f034:	f7ff ff22 	bl	800ee7c <sys_timeout_abs>
#endif
}
 800f038:	bf00      	nop
 800f03a:	3718      	adds	r7, #24
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	08017274 	.word	0x08017274
 800f044:	08017310 	.word	0x08017310
 800f048:	080172e8 	.word	0x080172e8

0800f04c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f052:	f7f8 fd7b 	bl	8007b4c <sys_now>
 800f056:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f058:	4b1a      	ldr	r3, [pc, #104]	; (800f0c4 <sys_check_timeouts+0x78>)
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <sys_check_timeouts+0x1a>
 800f062:	f7f9 ffb7 	bl	8008fd4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f066:	4b18      	ldr	r3, [pc, #96]	; (800f0c8 <sys_check_timeouts+0x7c>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d022      	beq.n	800f0b8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	0fdb      	lsrs	r3, r3, #31
 800f07c:	f003 0301 	and.w	r3, r3, #1
 800f080:	b2db      	uxtb	r3, r3
 800f082:	2b00      	cmp	r3, #0
 800f084:	d11a      	bne.n	800f0bc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4a0f      	ldr	r2, [pc, #60]	; (800f0c8 <sys_check_timeouts+0x7c>)
 800f08c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	4a0b      	ldr	r2, [pc, #44]	; (800f0cc <sys_check_timeouts+0x80>)
 800f0a0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f0a2:	68b9      	ldr	r1, [r7, #8]
 800f0a4:	2006      	movs	r0, #6
 800f0a6:	f7f9 fc4d 	bl	8008944 <memp_free>
    if (handler != NULL) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d0d3      	beq.n	800f058 <sys_check_timeouts+0xc>
      handler(arg);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6838      	ldr	r0, [r7, #0]
 800f0b4:	4798      	blx	r3
  do {
 800f0b6:	e7cf      	b.n	800f058 <sys_check_timeouts+0xc>
      return;
 800f0b8:	bf00      	nop
 800f0ba:	e000      	b.n	800f0be <sys_check_timeouts+0x72>
      return;
 800f0bc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	2000aebd 	.word	0x2000aebd
 800f0c8:	2000af10 	.word	0x2000af10
 800f0cc:	2000af14 	.word	0x2000af14

0800f0d0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f0d4:	f004 feb0 	bl	8013e38 <rand>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	4b01      	ldr	r3, [pc, #4]	; (800f0f0 <udp_init+0x20>)
 800f0ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f0ec:	bf00      	nop
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	20000040 	.word	0x20000040

0800f0f4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f0fe:	4b17      	ldr	r3, [pc, #92]	; (800f15c <udp_new_port+0x68>)
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	1c5a      	adds	r2, r3, #1
 800f104:	b291      	uxth	r1, r2
 800f106:	4a15      	ldr	r2, [pc, #84]	; (800f15c <udp_new_port+0x68>)
 800f108:	8011      	strh	r1, [r2, #0]
 800f10a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f10e:	4293      	cmp	r3, r2
 800f110:	d103      	bne.n	800f11a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f112:	4b12      	ldr	r3, [pc, #72]	; (800f15c <udp_new_port+0x68>)
 800f114:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f118:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f11a:	4b11      	ldr	r3, [pc, #68]	; (800f160 <udp_new_port+0x6c>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	603b      	str	r3, [r7, #0]
 800f120:	e011      	b.n	800f146 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	8a5a      	ldrh	r2, [r3, #18]
 800f126:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <udp_new_port+0x68>)
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d108      	bne.n	800f140 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f12e:	88fb      	ldrh	r3, [r7, #6]
 800f130:	3301      	adds	r3, #1
 800f132:	80fb      	strh	r3, [r7, #6]
 800f134:	88fb      	ldrh	r3, [r7, #6]
 800f136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f13a:	d3e0      	bcc.n	800f0fe <udp_new_port+0xa>
        return 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	e007      	b.n	800f150 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	68db      	ldr	r3, [r3, #12]
 800f144:	603b      	str	r3, [r7, #0]
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1ea      	bne.n	800f122 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f14c:	4b03      	ldr	r3, [pc, #12]	; (800f15c <udp_new_port+0x68>)
 800f14e:	881b      	ldrh	r3, [r3, #0]
}
 800f150:	4618      	mov	r0, r3
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	20000040 	.word	0x20000040
 800f160:	2000af1c 	.word	0x2000af1c

0800f164 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	4613      	mov	r3, r2
 800f170:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d105      	bne.n	800f184 <udp_input_local_match+0x20>
 800f178:	4b27      	ldr	r3, [pc, #156]	; (800f218 <udp_input_local_match+0xb4>)
 800f17a:	2287      	movs	r2, #135	; 0x87
 800f17c:	4927      	ldr	r1, [pc, #156]	; (800f21c <udp_input_local_match+0xb8>)
 800f17e:	4828      	ldr	r0, [pc, #160]	; (800f220 <udp_input_local_match+0xbc>)
 800f180:	f004 fe42 	bl	8013e08 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d105      	bne.n	800f196 <udp_input_local_match+0x32>
 800f18a:	4b23      	ldr	r3, [pc, #140]	; (800f218 <udp_input_local_match+0xb4>)
 800f18c:	2288      	movs	r2, #136	; 0x88
 800f18e:	4925      	ldr	r1, [pc, #148]	; (800f224 <udp_input_local_match+0xc0>)
 800f190:	4823      	ldr	r0, [pc, #140]	; (800f220 <udp_input_local_match+0xbc>)
 800f192:	f004 fe39 	bl	8013e08 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	7a1b      	ldrb	r3, [r3, #8]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00b      	beq.n	800f1b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	7a1a      	ldrb	r2, [r3, #8]
 800f1a2:	4b21      	ldr	r3, [pc, #132]	; (800f228 <udp_input_local_match+0xc4>)
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d001      	beq.n	800f1b6 <udp_input_local_match+0x52>
    return 0;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	e02b      	b.n	800f20e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f1b6:	79fb      	ldrb	r3, [r7, #7]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d018      	beq.n	800f1ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d013      	beq.n	800f1ea <udp_input_local_match+0x86>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00f      	beq.n	800f1ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f1ca:	4b17      	ldr	r3, [pc, #92]	; (800f228 <udp_input_local_match+0xc4>)
 800f1cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d2:	d00a      	beq.n	800f1ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	4b13      	ldr	r3, [pc, #76]	; (800f228 <udp_input_local_match+0xc4>)
 800f1da:	695b      	ldr	r3, [r3, #20]
 800f1dc:	405a      	eors	r2, r3
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	3308      	adds	r3, #8
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d110      	bne.n	800f20c <udp_input_local_match+0xa8>
          return 1;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e00f      	b.n	800f20e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d009      	beq.n	800f208 <udp_input_local_match+0xa4>
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d005      	beq.n	800f208 <udp_input_local_match+0xa4>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	4b09      	ldr	r3, [pc, #36]	; (800f228 <udp_input_local_match+0xc4>)
 800f202:	695b      	ldr	r3, [r3, #20]
 800f204:	429a      	cmp	r2, r3
 800f206:	d101      	bne.n	800f20c <udp_input_local_match+0xa8>
        return 1;
 800f208:	2301      	movs	r3, #1
 800f20a:	e000      	b.n	800f20e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	0801735c 	.word	0x0801735c
 800f21c:	0801738c 	.word	0x0801738c
 800f220:	080173b0 	.word	0x080173b0
 800f224:	080173d8 	.word	0x080173d8
 800f228:	20005770 	.word	0x20005770

0800f22c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f22c:	b590      	push	{r4, r7, lr}
 800f22e:	b08d      	sub	sp, #52	; 0x34
 800f230:	af02      	add	r7, sp, #8
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f236:	2300      	movs	r3, #0
 800f238:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d105      	bne.n	800f24c <udp_input+0x20>
 800f240:	4b7c      	ldr	r3, [pc, #496]	; (800f434 <udp_input+0x208>)
 800f242:	22cf      	movs	r2, #207	; 0xcf
 800f244:	497c      	ldr	r1, [pc, #496]	; (800f438 <udp_input+0x20c>)
 800f246:	487d      	ldr	r0, [pc, #500]	; (800f43c <udp_input+0x210>)
 800f248:	f004 fdde 	bl	8013e08 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d105      	bne.n	800f25e <udp_input+0x32>
 800f252:	4b78      	ldr	r3, [pc, #480]	; (800f434 <udp_input+0x208>)
 800f254:	22d0      	movs	r2, #208	; 0xd0
 800f256:	497a      	ldr	r1, [pc, #488]	; (800f440 <udp_input+0x214>)
 800f258:	4878      	ldr	r0, [pc, #480]	; (800f43c <udp_input+0x210>)
 800f25a:	f004 fdd5 	bl	8013e08 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	895b      	ldrh	r3, [r3, #10]
 800f262:	2b07      	cmp	r3, #7
 800f264:	d803      	bhi.n	800f26e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7fa f9ee 	bl	8009648 <pbuf_free>
    goto end;
 800f26c:	e0de      	b.n	800f42c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f274:	4b73      	ldr	r3, [pc, #460]	; (800f444 <udp_input+0x218>)
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	4a72      	ldr	r2, [pc, #456]	; (800f444 <udp_input+0x218>)
 800f27a:	6812      	ldr	r2, [r2, #0]
 800f27c:	4611      	mov	r1, r2
 800f27e:	4618      	mov	r0, r3
 800f280:	f003 fe08 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 800f284:	4603      	mov	r3, r0
 800f286:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	881b      	ldrh	r3, [r3, #0]
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	4618      	mov	r0, r3
 800f290:	f7f8 fe70 	bl	8007f74 <lwip_htons>
 800f294:	4603      	mov	r3, r0
 800f296:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	885b      	ldrh	r3, [r3, #2]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7f8 fe68 	bl	8007f74 <lwip_htons>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2b4:	4b64      	ldr	r3, [pc, #400]	; (800f448 <udp_input+0x21c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ba:	e054      	b.n	800f366 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2be:	8a5b      	ldrh	r3, [r3, #18]
 800f2c0:	89fa      	ldrh	r2, [r7, #14]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d14a      	bne.n	800f35c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f2c6:	7cfb      	ldrb	r3, [r7, #19]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	6839      	ldr	r1, [r7, #0]
 800f2cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2ce:	f7ff ff49 	bl	800f164 <udp_input_local_match>
 800f2d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d041      	beq.n	800f35c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	7c1b      	ldrb	r3, [r3, #16]
 800f2dc:	f003 0304 	and.w	r3, r3, #4
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d11d      	bne.n	800f320 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d102      	bne.n	800f2f0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	61fb      	str	r3, [r7, #28]
 800f2ee:	e017      	b.n	800f320 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f2f0:	7cfb      	ldrb	r3, [r7, #19]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d014      	beq.n	800f320 <udp_input+0xf4>
 800f2f6:	4b53      	ldr	r3, [pc, #332]	; (800f444 <udp_input+0x218>)
 800f2f8:	695b      	ldr	r3, [r3, #20]
 800f2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2fe:	d10f      	bne.n	800f320 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	3304      	adds	r3, #4
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d008      	beq.n	800f320 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	3304      	adds	r3, #4
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d101      	bne.n	800f320 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f322:	8a9b      	ldrh	r3, [r3, #20]
 800f324:	8a3a      	ldrh	r2, [r7, #16]
 800f326:	429a      	cmp	r2, r3
 800f328:	d118      	bne.n	800f35c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d005      	beq.n	800f33e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f334:	685a      	ldr	r2, [r3, #4]
 800f336:	4b43      	ldr	r3, [pc, #268]	; (800f444 <udp_input+0x218>)
 800f338:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d10e      	bne.n	800f35c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f33e:	6a3b      	ldr	r3, [r7, #32]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d014      	beq.n	800f36e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	68da      	ldr	r2, [r3, #12]
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f34c:	4b3e      	ldr	r3, [pc, #248]	; (800f448 <udp_input+0x21c>)
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f352:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f354:	4a3c      	ldr	r2, [pc, #240]	; (800f448 <udp_input+0x21c>)
 800f356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f358:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f35a:	e008      	b.n	800f36e <udp_input+0x142>
      }
    }

    prev = pcb;
 800f35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	627b      	str	r3, [r7, #36]	; 0x24
 800f366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1a7      	bne.n	800f2bc <udp_input+0x90>
 800f36c:	e000      	b.n	800f370 <udp_input+0x144>
        break;
 800f36e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f372:	2b00      	cmp	r3, #0
 800f374:	d101      	bne.n	800f37a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d002      	beq.n	800f386 <udp_input+0x15a>
    for_us = 1;
 800f380:	2301      	movs	r3, #1
 800f382:	76fb      	strb	r3, [r7, #27]
 800f384:	e00a      	b.n	800f39c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	3304      	adds	r3, #4
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	4b2d      	ldr	r3, [pc, #180]	; (800f444 <udp_input+0x218>)
 800f38e:	695b      	ldr	r3, [r3, #20]
 800f390:	429a      	cmp	r2, r3
 800f392:	bf0c      	ite	eq
 800f394:	2301      	moveq	r3, #1
 800f396:	2300      	movne	r3, #0
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f39c:	7efb      	ldrb	r3, [r7, #27]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d041      	beq.n	800f426 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f3a2:	2108      	movs	r1, #8
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7fa f8c9 	bl	800953c <pbuf_remove_header>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d00a      	beq.n	800f3c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f3b0:	4b20      	ldr	r3, [pc, #128]	; (800f434 <udp_input+0x208>)
 800f3b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f3b6:	4925      	ldr	r1, [pc, #148]	; (800f44c <udp_input+0x220>)
 800f3b8:	4820      	ldr	r0, [pc, #128]	; (800f43c <udp_input+0x210>)
 800f3ba:	f004 fd25 	bl	8013e08 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f7fa f942 	bl	8009648 <pbuf_free>
      goto end;
 800f3c4:	e032      	b.n	800f42c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d012      	beq.n	800f3f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ce:	699b      	ldr	r3, [r3, #24]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00a      	beq.n	800f3ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d6:	699c      	ldr	r4, [r3, #24]
 800f3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3da:	69d8      	ldr	r0, [r3, #28]
 800f3dc:	8a3b      	ldrh	r3, [r7, #16]
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	4b1b      	ldr	r3, [pc, #108]	; (800f450 <udp_input+0x224>)
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f3e8:	e021      	b.n	800f42e <udp_input+0x202>
        pbuf_free(p);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7fa f92c 	bl	8009648 <pbuf_free>
        goto end;
 800f3f0:	e01c      	b.n	800f42c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f3f2:	7cfb      	ldrb	r3, [r7, #19]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d112      	bne.n	800f41e <udp_input+0x1f2>
 800f3f8:	4b12      	ldr	r3, [pc, #72]	; (800f444 <udp_input+0x218>)
 800f3fa:	695b      	ldr	r3, [r3, #20]
 800f3fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f400:	2be0      	cmp	r3, #224	; 0xe0
 800f402:	d00c      	beq.n	800f41e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f404:	4b0f      	ldr	r3, [pc, #60]	; (800f444 <udp_input+0x218>)
 800f406:	899b      	ldrh	r3, [r3, #12]
 800f408:	3308      	adds	r3, #8
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	b21b      	sxth	r3, r3
 800f40e:	4619      	mov	r1, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7fa f906 	bl	8009622 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f416:	2103      	movs	r1, #3
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f003 f9fd 	bl	8012818 <icmp_dest_unreach>
      pbuf_free(p);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7fa f912 	bl	8009648 <pbuf_free>
  return;
 800f424:	e003      	b.n	800f42e <udp_input+0x202>
    pbuf_free(p);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7fa f90e 	bl	8009648 <pbuf_free>
  return;
 800f42c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f42e:	372c      	adds	r7, #44	; 0x2c
 800f430:	46bd      	mov	sp, r7
 800f432:	bd90      	pop	{r4, r7, pc}
 800f434:	0801735c 	.word	0x0801735c
 800f438:	08017400 	.word	0x08017400
 800f43c:	080173b0 	.word	0x080173b0
 800f440:	08017418 	.word	0x08017418
 800f444:	20005770 	.word	0x20005770
 800f448:	2000af1c 	.word	0x2000af1c
 800f44c:	08017434 	.word	0x08017434
 800f450:	20005780 	.word	0x20005780

0800f454 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b088      	sub	sp, #32
 800f458:	af02      	add	r7, sp, #8
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
 800f460:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d109      	bne.n	800f47c <udp_sendto_if+0x28>
 800f468:	4b2e      	ldr	r3, [pc, #184]	; (800f524 <udp_sendto_if+0xd0>)
 800f46a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f46e:	492e      	ldr	r1, [pc, #184]	; (800f528 <udp_sendto_if+0xd4>)
 800f470:	482e      	ldr	r0, [pc, #184]	; (800f52c <udp_sendto_if+0xd8>)
 800f472:	f004 fcc9 	bl	8013e08 <iprintf>
 800f476:	f06f 030f 	mvn.w	r3, #15
 800f47a:	e04f      	b.n	800f51c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d109      	bne.n	800f496 <udp_sendto_if+0x42>
 800f482:	4b28      	ldr	r3, [pc, #160]	; (800f524 <udp_sendto_if+0xd0>)
 800f484:	f240 2281 	movw	r2, #641	; 0x281
 800f488:	4929      	ldr	r1, [pc, #164]	; (800f530 <udp_sendto_if+0xdc>)
 800f48a:	4828      	ldr	r0, [pc, #160]	; (800f52c <udp_sendto_if+0xd8>)
 800f48c:	f004 fcbc 	bl	8013e08 <iprintf>
 800f490:	f06f 030f 	mvn.w	r3, #15
 800f494:	e042      	b.n	800f51c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d109      	bne.n	800f4b0 <udp_sendto_if+0x5c>
 800f49c:	4b21      	ldr	r3, [pc, #132]	; (800f524 <udp_sendto_if+0xd0>)
 800f49e:	f240 2282 	movw	r2, #642	; 0x282
 800f4a2:	4924      	ldr	r1, [pc, #144]	; (800f534 <udp_sendto_if+0xe0>)
 800f4a4:	4821      	ldr	r0, [pc, #132]	; (800f52c <udp_sendto_if+0xd8>)
 800f4a6:	f004 fcaf 	bl	8013e08 <iprintf>
 800f4aa:	f06f 030f 	mvn.w	r3, #15
 800f4ae:	e035      	b.n	800f51c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f4b0:	6a3b      	ldr	r3, [r7, #32]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d109      	bne.n	800f4ca <udp_sendto_if+0x76>
 800f4b6:	4b1b      	ldr	r3, [pc, #108]	; (800f524 <udp_sendto_if+0xd0>)
 800f4b8:	f240 2283 	movw	r2, #643	; 0x283
 800f4bc:	491e      	ldr	r1, [pc, #120]	; (800f538 <udp_sendto_if+0xe4>)
 800f4be:	481b      	ldr	r0, [pc, #108]	; (800f52c <udp_sendto_if+0xd8>)
 800f4c0:	f004 fca2 	bl	8013e08 <iprintf>
 800f4c4:	f06f 030f 	mvn.w	r3, #15
 800f4c8:	e028      	b.n	800f51c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d009      	beq.n	800f4e4 <udp_sendto_if+0x90>
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d005      	beq.n	800f4e4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f4e0:	2be0      	cmp	r3, #224	; 0xe0
 800f4e2:	d103      	bne.n	800f4ec <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f4e4:	6a3b      	ldr	r3, [r7, #32]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	617b      	str	r3, [r7, #20]
 800f4ea:	e00b      	b.n	800f504 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	6a3b      	ldr	r3, [r7, #32]
 800f4f2:	3304      	adds	r3, #4
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d002      	beq.n	800f500 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f4fa:	f06f 0303 	mvn.w	r3, #3
 800f4fe:	e00d      	b.n	800f51c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f504:	887a      	ldrh	r2, [r7, #2]
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	4613      	mov	r3, r2
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	68b9      	ldr	r1, [r7, #8]
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f000 f811 	bl	800f53c <udp_sendto_if_src>
 800f51a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3718      	adds	r7, #24
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	0801735c 	.word	0x0801735c
 800f528:	080174d0 	.word	0x080174d0
 800f52c:	080173b0 	.word	0x080173b0
 800f530:	080174ec 	.word	0x080174ec
 800f534:	08017508 	.word	0x08017508
 800f538:	08017528 	.word	0x08017528

0800f53c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b08c      	sub	sp, #48	; 0x30
 800f540:	af04      	add	r7, sp, #16
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
 800f548:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d109      	bne.n	800f564 <udp_sendto_if_src+0x28>
 800f550:	4b65      	ldr	r3, [pc, #404]	; (800f6e8 <udp_sendto_if_src+0x1ac>)
 800f552:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f556:	4965      	ldr	r1, [pc, #404]	; (800f6ec <udp_sendto_if_src+0x1b0>)
 800f558:	4865      	ldr	r0, [pc, #404]	; (800f6f0 <udp_sendto_if_src+0x1b4>)
 800f55a:	f004 fc55 	bl	8013e08 <iprintf>
 800f55e:	f06f 030f 	mvn.w	r3, #15
 800f562:	e0bc      	b.n	800f6de <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d109      	bne.n	800f57e <udp_sendto_if_src+0x42>
 800f56a:	4b5f      	ldr	r3, [pc, #380]	; (800f6e8 <udp_sendto_if_src+0x1ac>)
 800f56c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f570:	4960      	ldr	r1, [pc, #384]	; (800f6f4 <udp_sendto_if_src+0x1b8>)
 800f572:	485f      	ldr	r0, [pc, #380]	; (800f6f0 <udp_sendto_if_src+0x1b4>)
 800f574:	f004 fc48 	bl	8013e08 <iprintf>
 800f578:	f06f 030f 	mvn.w	r3, #15
 800f57c:	e0af      	b.n	800f6de <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d109      	bne.n	800f598 <udp_sendto_if_src+0x5c>
 800f584:	4b58      	ldr	r3, [pc, #352]	; (800f6e8 <udp_sendto_if_src+0x1ac>)
 800f586:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f58a:	495b      	ldr	r1, [pc, #364]	; (800f6f8 <udp_sendto_if_src+0x1bc>)
 800f58c:	4858      	ldr	r0, [pc, #352]	; (800f6f0 <udp_sendto_if_src+0x1b4>)
 800f58e:	f004 fc3b 	bl	8013e08 <iprintf>
 800f592:	f06f 030f 	mvn.w	r3, #15
 800f596:	e0a2      	b.n	800f6de <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d109      	bne.n	800f5b2 <udp_sendto_if_src+0x76>
 800f59e:	4b52      	ldr	r3, [pc, #328]	; (800f6e8 <udp_sendto_if_src+0x1ac>)
 800f5a0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f5a4:	4955      	ldr	r1, [pc, #340]	; (800f6fc <udp_sendto_if_src+0x1c0>)
 800f5a6:	4852      	ldr	r0, [pc, #328]	; (800f6f0 <udp_sendto_if_src+0x1b4>)
 800f5a8:	f004 fc2e 	bl	8013e08 <iprintf>
 800f5ac:	f06f 030f 	mvn.w	r3, #15
 800f5b0:	e095      	b.n	800f6de <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <udp_sendto_if_src+0x90>
 800f5b8:	4b4b      	ldr	r3, [pc, #300]	; (800f6e8 <udp_sendto_if_src+0x1ac>)
 800f5ba:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f5be:	4950      	ldr	r1, [pc, #320]	; (800f700 <udp_sendto_if_src+0x1c4>)
 800f5c0:	484b      	ldr	r0, [pc, #300]	; (800f6f0 <udp_sendto_if_src+0x1b4>)
 800f5c2:	f004 fc21 	bl	8013e08 <iprintf>
 800f5c6:	f06f 030f 	mvn.w	r3, #15
 800f5ca:	e088      	b.n	800f6de <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	8a5b      	ldrh	r3, [r3, #18]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d10f      	bne.n	800f5f4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f5d4:	68f9      	ldr	r1, [r7, #12]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	8a5b      	ldrh	r3, [r3, #18]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f000 f893 	bl	800f708 <udp_bind>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f5e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d002      	beq.n	800f5f4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f5ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f5f2:	e074      	b.n	800f6de <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	891b      	ldrh	r3, [r3, #8]
 800f5f8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d902      	bls.n	800f606 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f600:	f04f 33ff 	mov.w	r3, #4294967295
 800f604:	e06b      	b.n	800f6de <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f606:	2108      	movs	r1, #8
 800f608:	68b8      	ldr	r0, [r7, #8]
 800f60a:	f7f9 ff87 	bl	800951c <pbuf_add_header>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d015      	beq.n	800f640 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f614:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f618:	2108      	movs	r1, #8
 800f61a:	2022      	movs	r0, #34	; 0x22
 800f61c:	f7f9 fd30 	bl	8009080 <pbuf_alloc>
 800f620:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d102      	bne.n	800f62e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f628:	f04f 33ff 	mov.w	r3, #4294967295
 800f62c:	e057      	b.n	800f6de <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	891b      	ldrh	r3, [r3, #8]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d006      	beq.n	800f644 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f636:	68b9      	ldr	r1, [r7, #8]
 800f638:	69f8      	ldr	r0, [r7, #28]
 800f63a:	f7fa f91d 	bl	8009878 <pbuf_chain>
 800f63e:	e001      	b.n	800f644 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	895b      	ldrh	r3, [r3, #10]
 800f648:	2b07      	cmp	r3, #7
 800f64a:	d806      	bhi.n	800f65a <udp_sendto_if_src+0x11e>
 800f64c:	4b26      	ldr	r3, [pc, #152]	; (800f6e8 <udp_sendto_if_src+0x1ac>)
 800f64e:	f240 320d 	movw	r2, #781	; 0x30d
 800f652:	492c      	ldr	r1, [pc, #176]	; (800f704 <udp_sendto_if_src+0x1c8>)
 800f654:	4826      	ldr	r0, [pc, #152]	; (800f6f0 <udp_sendto_if_src+0x1b4>)
 800f656:	f004 fbd7 	bl	8013e08 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	8a5b      	ldrh	r3, [r3, #18]
 800f664:	4618      	mov	r0, r3
 800f666:	f7f8 fc85 	bl	8007f74 <lwip_htons>
 800f66a:	4603      	mov	r3, r0
 800f66c:	461a      	mov	r2, r3
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f672:	887b      	ldrh	r3, [r7, #2]
 800f674:	4618      	mov	r0, r3
 800f676:	f7f8 fc7d 	bl	8007f74 <lwip_htons>
 800f67a:	4603      	mov	r3, r0
 800f67c:	461a      	mov	r2, r3
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	2200      	movs	r2, #0
 800f686:	719a      	strb	r2, [r3, #6]
 800f688:	2200      	movs	r2, #0
 800f68a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	891b      	ldrh	r3, [r3, #8]
 800f690:	4618      	mov	r0, r3
 800f692:	f7f8 fc6f 	bl	8007f74 <lwip_htons>
 800f696:	4603      	mov	r3, r0
 800f698:	461a      	mov	r2, r3
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f69e:	2311      	movs	r3, #17
 800f6a0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	7adb      	ldrb	r3, [r3, #11]
 800f6a6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	7a9b      	ldrb	r3, [r3, #10]
 800f6ac:	7cb9      	ldrb	r1, [r7, #18]
 800f6ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6b0:	9202      	str	r2, [sp, #8]
 800f6b2:	7cfa      	ldrb	r2, [r7, #19]
 800f6b4:	9201      	str	r2, [sp, #4]
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6be:	69f8      	ldr	r0, [r7, #28]
 800f6c0:	f003 fb3a 	bl	8012d38 <ip4_output_if_src>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f6c8:	69fa      	ldr	r2, [r7, #28]
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d004      	beq.n	800f6da <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f6d0:	69f8      	ldr	r0, [r7, #28]
 800f6d2:	f7f9 ffb9 	bl	8009648 <pbuf_free>
    q = NULL;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f6da:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3720      	adds	r7, #32
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	0801735c 	.word	0x0801735c
 800f6ec:	08017548 	.word	0x08017548
 800f6f0:	080173b0 	.word	0x080173b0
 800f6f4:	08017568 	.word	0x08017568
 800f6f8:	08017588 	.word	0x08017588
 800f6fc:	080175ac 	.word	0x080175ac
 800f700:	080175d0 	.word	0x080175d0
 800f704:	080175f4 	.word	0x080175f4

0800f708 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b086      	sub	sp, #24
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	4613      	mov	r3, r2
 800f714:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f71c:	4b39      	ldr	r3, [pc, #228]	; (800f804 <udp_bind+0xfc>)
 800f71e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d109      	bne.n	800f73a <udp_bind+0x32>
 800f726:	4b38      	ldr	r3, [pc, #224]	; (800f808 <udp_bind+0x100>)
 800f728:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f72c:	4937      	ldr	r1, [pc, #220]	; (800f80c <udp_bind+0x104>)
 800f72e:	4838      	ldr	r0, [pc, #224]	; (800f810 <udp_bind+0x108>)
 800f730:	f004 fb6a 	bl	8013e08 <iprintf>
 800f734:	f06f 030f 	mvn.w	r3, #15
 800f738:	e060      	b.n	800f7fc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f73e:	4b35      	ldr	r3, [pc, #212]	; (800f814 <udp_bind+0x10c>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	617b      	str	r3, [r7, #20]
 800f744:	e009      	b.n	800f75a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f746:	68fa      	ldr	r2, [r7, #12]
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d102      	bne.n	800f754 <udp_bind+0x4c>
      rebind = 1;
 800f74e:	2301      	movs	r3, #1
 800f750:	74fb      	strb	r3, [r7, #19]
      break;
 800f752:	e005      	b.n	800f760 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1f2      	bne.n	800f746 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f760:	88fb      	ldrh	r3, [r7, #6]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d109      	bne.n	800f77a <udp_bind+0x72>
    port = udp_new_port();
 800f766:	f7ff fcc5 	bl	800f0f4 <udp_new_port>
 800f76a:	4603      	mov	r3, r0
 800f76c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f76e:	88fb      	ldrh	r3, [r7, #6]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d12c      	bne.n	800f7ce <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f774:	f06f 0307 	mvn.w	r3, #7
 800f778:	e040      	b.n	800f7fc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f77a:	4b26      	ldr	r3, [pc, #152]	; (800f814 <udp_bind+0x10c>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	617b      	str	r3, [r7, #20]
 800f780:	e022      	b.n	800f7c8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	429a      	cmp	r2, r3
 800f788:	d01b      	beq.n	800f7c2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	8a5b      	ldrh	r3, [r3, #18]
 800f78e:	88fa      	ldrh	r2, [r7, #6]
 800f790:	429a      	cmp	r2, r3
 800f792:	d116      	bne.n	800f7c2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d00d      	beq.n	800f7bc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00a      	beq.n	800f7bc <udp_bind+0xb4>
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d006      	beq.n	800f7bc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f7ae:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d003      	beq.n	800f7bc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d102      	bne.n	800f7c2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f7bc:	f06f 0307 	mvn.w	r3, #7
 800f7c0:	e01c      	b.n	800f7fc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1d9      	bne.n	800f782 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d002      	beq.n	800f7da <udp_bind+0xd2>
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	e000      	b.n	800f7dc <udp_bind+0xd4>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	88fa      	ldrh	r2, [r7, #6]
 800f7e4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f7e6:	7cfb      	ldrb	r3, [r7, #19]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d106      	bne.n	800f7fa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f7ec:	4b09      	ldr	r3, [pc, #36]	; (800f814 <udp_bind+0x10c>)
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f7f4:	4a07      	ldr	r2, [pc, #28]	; (800f814 <udp_bind+0x10c>)
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f7fa:	2300      	movs	r3, #0
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3718      	adds	r7, #24
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}
 800f804:	0801a750 	.word	0x0801a750
 800f808:	0801735c 	.word	0x0801735c
 800f80c:	08017624 	.word	0x08017624
 800f810:	080173b0 	.word	0x080173b0
 800f814:	2000af1c 	.word	0x2000af1c

0800f818 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	4613      	mov	r3, r2
 800f824:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d109      	bne.n	800f840 <udp_connect+0x28>
 800f82c:	4b2c      	ldr	r3, [pc, #176]	; (800f8e0 <udp_connect+0xc8>)
 800f82e:	f240 4235 	movw	r2, #1077	; 0x435
 800f832:	492c      	ldr	r1, [pc, #176]	; (800f8e4 <udp_connect+0xcc>)
 800f834:	482c      	ldr	r0, [pc, #176]	; (800f8e8 <udp_connect+0xd0>)
 800f836:	f004 fae7 	bl	8013e08 <iprintf>
 800f83a:	f06f 030f 	mvn.w	r3, #15
 800f83e:	e04b      	b.n	800f8d8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d109      	bne.n	800f85a <udp_connect+0x42>
 800f846:	4b26      	ldr	r3, [pc, #152]	; (800f8e0 <udp_connect+0xc8>)
 800f848:	f240 4236 	movw	r2, #1078	; 0x436
 800f84c:	4927      	ldr	r1, [pc, #156]	; (800f8ec <udp_connect+0xd4>)
 800f84e:	4826      	ldr	r0, [pc, #152]	; (800f8e8 <udp_connect+0xd0>)
 800f850:	f004 fada 	bl	8013e08 <iprintf>
 800f854:	f06f 030f 	mvn.w	r3, #15
 800f858:	e03e      	b.n	800f8d8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	8a5b      	ldrh	r3, [r3, #18]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10f      	bne.n	800f882 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f862:	68f9      	ldr	r1, [r7, #12]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	8a5b      	ldrh	r3, [r3, #18]
 800f868:	461a      	mov	r2, r3
 800f86a:	68f8      	ldr	r0, [r7, #12]
 800f86c:	f7ff ff4c 	bl	800f708 <udp_bind>
 800f870:	4603      	mov	r3, r0
 800f872:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f874:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d002      	beq.n	800f882 <udp_connect+0x6a>
      return err;
 800f87c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f880:	e02a      	b.n	800f8d8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d002      	beq.n	800f88e <udp_connect+0x76>
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	e000      	b.n	800f890 <udp_connect+0x78>
 800f88e:	2300      	movs	r3, #0
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	88fa      	ldrh	r2, [r7, #6]
 800f898:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	7c1b      	ldrb	r3, [r3, #16]
 800f89e:	f043 0304 	orr.w	r3, r3, #4
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f8a8:	4b11      	ldr	r3, [pc, #68]	; (800f8f0 <udp_connect+0xd8>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	617b      	str	r3, [r7, #20]
 800f8ae:	e008      	b.n	800f8c2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d101      	bne.n	800f8bc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	e00d      	b.n	800f8d8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	617b      	str	r3, [r7, #20]
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1f3      	bne.n	800f8b0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f8c8:	4b09      	ldr	r3, [pc, #36]	; (800f8f0 <udp_connect+0xd8>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f8d0:	4a07      	ldr	r2, [pc, #28]	; (800f8f0 <udp_connect+0xd8>)
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3718      	adds	r7, #24
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	0801735c 	.word	0x0801735c
 800f8e4:	0801763c 	.word	0x0801763c
 800f8e8:	080173b0 	.word	0x080173b0
 800f8ec:	08017658 	.word	0x08017658
 800f8f0:	2000af1c 	.word	0x2000af1c

0800f8f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d107      	bne.n	800f916 <udp_recv+0x22>
 800f906:	4b08      	ldr	r3, [pc, #32]	; (800f928 <udp_recv+0x34>)
 800f908:	f240 428a 	movw	r2, #1162	; 0x48a
 800f90c:	4907      	ldr	r1, [pc, #28]	; (800f92c <udp_recv+0x38>)
 800f90e:	4808      	ldr	r0, [pc, #32]	; (800f930 <udp_recv+0x3c>)
 800f910:	f004 fa7a 	bl	8013e08 <iprintf>
 800f914:	e005      	b.n	800f922 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	61da      	str	r2, [r3, #28]
}
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	0801735c 	.word	0x0801735c
 800f92c:	08017690 	.word	0x08017690
 800f930:	080173b0 	.word	0x080173b0

0800f934 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d107      	bne.n	800f952 <udp_remove+0x1e>
 800f942:	4b19      	ldr	r3, [pc, #100]	; (800f9a8 <udp_remove+0x74>)
 800f944:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f948:	4918      	ldr	r1, [pc, #96]	; (800f9ac <udp_remove+0x78>)
 800f94a:	4819      	ldr	r0, [pc, #100]	; (800f9b0 <udp_remove+0x7c>)
 800f94c:	f004 fa5c 	bl	8013e08 <iprintf>
 800f950:	e026      	b.n	800f9a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f952:	4b18      	ldr	r3, [pc, #96]	; (800f9b4 <udp_remove+0x80>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d105      	bne.n	800f968 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f95c:	4b15      	ldr	r3, [pc, #84]	; (800f9b4 <udp_remove+0x80>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	4a14      	ldr	r2, [pc, #80]	; (800f9b4 <udp_remove+0x80>)
 800f964:	6013      	str	r3, [r2, #0]
 800f966:	e017      	b.n	800f998 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f968:	4b12      	ldr	r3, [pc, #72]	; (800f9b4 <udp_remove+0x80>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	60fb      	str	r3, [r7, #12]
 800f96e:	e010      	b.n	800f992 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d009      	beq.n	800f98c <udp_remove+0x58>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d104      	bne.n	800f98c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	68da      	ldr	r2, [r3, #12]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	60da      	str	r2, [r3, #12]
        break;
 800f98a:	e005      	b.n	800f998 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	60fb      	str	r3, [r7, #12]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d1eb      	bne.n	800f970 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	2000      	movs	r0, #0
 800f99c:	f7f8 ffd2 	bl	8008944 <memp_free>
}
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	0801735c 	.word	0x0801735c
 800f9ac:	080176a8 	.word	0x080176a8
 800f9b0:	080173b0 	.word	0x080173b0
 800f9b4:	2000af1c 	.word	0x2000af1c

0800f9b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f9be:	2000      	movs	r0, #0
 800f9c0:	f7f8 ff50 	bl	8008864 <memp_malloc>
 800f9c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d007      	beq.n	800f9dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f9cc:	2220      	movs	r2, #32
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f004 fa11 	bl	8013df8 <memset>
    pcb->ttl = UDP_TTL;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	22ff      	movs	r2, #255	; 0xff
 800f9da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f9dc:	687b      	ldr	r3, [r7, #4]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
	...

0800f9e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b085      	sub	sp, #20
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d01e      	beq.n	800fa36 <udp_netif_ip_addr_changed+0x4e>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d01a      	beq.n	800fa36 <udp_netif_ip_addr_changed+0x4e>
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d017      	beq.n	800fa36 <udp_netif_ip_addr_changed+0x4e>
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d013      	beq.n	800fa36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa0e:	4b0d      	ldr	r3, [pc, #52]	; (800fa44 <udp_netif_ip_addr_changed+0x5c>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	60fb      	str	r3, [r7, #12]
 800fa14:	e00c      	b.n	800fa30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d103      	bne.n	800fa2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	60fb      	str	r3, [r7, #12]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d1ef      	bne.n	800fa16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fa36:	bf00      	nop
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	2000af1c 	.word	0x2000af1c

0800fa48 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800fa4c:	4b20      	ldr	r3, [pc, #128]	; (800fad0 <dhcp_inc_pcb_refcount+0x88>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d133      	bne.n	800fabc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800fa54:	4b1f      	ldr	r3, [pc, #124]	; (800fad4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <dhcp_inc_pcb_refcount+0x20>
 800fa5c:	4b1e      	ldr	r3, [pc, #120]	; (800fad8 <dhcp_inc_pcb_refcount+0x90>)
 800fa5e:	22e5      	movs	r2, #229	; 0xe5
 800fa60:	491e      	ldr	r1, [pc, #120]	; (800fadc <dhcp_inc_pcb_refcount+0x94>)
 800fa62:	481f      	ldr	r0, [pc, #124]	; (800fae0 <dhcp_inc_pcb_refcount+0x98>)
 800fa64:	f004 f9d0 	bl	8013e08 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800fa68:	f7ff ffa6 	bl	800f9b8 <udp_new>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	4a19      	ldr	r2, [pc, #100]	; (800fad4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa70:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800fa72:	4b18      	ldr	r3, [pc, #96]	; (800fad4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d102      	bne.n	800fa80 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800fa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7e:	e024      	b.n	800faca <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800fa80:	4b14      	ldr	r3, [pc, #80]	; (800fad4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	7a5a      	ldrb	r2, [r3, #9]
 800fa86:	4b13      	ldr	r3, [pc, #76]	; (800fad4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f042 0220 	orr.w	r2, r2, #32
 800fa8e:	b2d2      	uxtb	r2, r2
 800fa90:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800fa92:	4b10      	ldr	r3, [pc, #64]	; (800fad4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2244      	movs	r2, #68	; 0x44
 800fa98:	4912      	ldr	r1, [pc, #72]	; (800fae4 <dhcp_inc_pcb_refcount+0x9c>)
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7ff fe34 	bl	800f708 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800faa0:	4b0c      	ldr	r3, [pc, #48]	; (800fad4 <dhcp_inc_pcb_refcount+0x8c>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2243      	movs	r2, #67	; 0x43
 800faa6:	490f      	ldr	r1, [pc, #60]	; (800fae4 <dhcp_inc_pcb_refcount+0x9c>)
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7ff feb5 	bl	800f818 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800faae:	4b09      	ldr	r3, [pc, #36]	; (800fad4 <dhcp_inc_pcb_refcount+0x8c>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2200      	movs	r2, #0
 800fab4:	490c      	ldr	r1, [pc, #48]	; (800fae8 <dhcp_inc_pcb_refcount+0xa0>)
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7ff ff1c 	bl	800f8f4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800fabc:	4b04      	ldr	r3, [pc, #16]	; (800fad0 <dhcp_inc_pcb_refcount+0x88>)
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	3301      	adds	r3, #1
 800fac2:	b2da      	uxtb	r2, r3
 800fac4:	4b02      	ldr	r3, [pc, #8]	; (800fad0 <dhcp_inc_pcb_refcount+0x88>)
 800fac6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fac8:	2300      	movs	r3, #0
}
 800faca:	4618      	mov	r0, r3
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	2000af4c 	.word	0x2000af4c
 800fad4:	2000af48 	.word	0x2000af48
 800fad8:	080176c0 	.word	0x080176c0
 800fadc:	080176f8 	.word	0x080176f8
 800fae0:	08017720 	.word	0x08017720
 800fae4:	0801a750 	.word	0x0801a750
 800fae8:	08011381 	.word	0x08011381

0800faec <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800faf0:	4b0e      	ldr	r3, [pc, #56]	; (800fb2c <dhcp_dec_pcb_refcount+0x40>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d105      	bne.n	800fb04 <dhcp_dec_pcb_refcount+0x18>
 800faf8:	4b0d      	ldr	r3, [pc, #52]	; (800fb30 <dhcp_dec_pcb_refcount+0x44>)
 800fafa:	22ff      	movs	r2, #255	; 0xff
 800fafc:	490d      	ldr	r1, [pc, #52]	; (800fb34 <dhcp_dec_pcb_refcount+0x48>)
 800fafe:	480e      	ldr	r0, [pc, #56]	; (800fb38 <dhcp_dec_pcb_refcount+0x4c>)
 800fb00:	f004 f982 	bl	8013e08 <iprintf>
  dhcp_pcb_refcount--;
 800fb04:	4b09      	ldr	r3, [pc, #36]	; (800fb2c <dhcp_dec_pcb_refcount+0x40>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	b2da      	uxtb	r2, r3
 800fb0c:	4b07      	ldr	r3, [pc, #28]	; (800fb2c <dhcp_dec_pcb_refcount+0x40>)
 800fb0e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fb10:	4b06      	ldr	r3, [pc, #24]	; (800fb2c <dhcp_dec_pcb_refcount+0x40>)
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d107      	bne.n	800fb28 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fb18:	4b08      	ldr	r3, [pc, #32]	; (800fb3c <dhcp_dec_pcb_refcount+0x50>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7ff ff09 	bl	800f934 <udp_remove>
    dhcp_pcb = NULL;
 800fb22:	4b06      	ldr	r3, [pc, #24]	; (800fb3c <dhcp_dec_pcb_refcount+0x50>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	601a      	str	r2, [r3, #0]
  }
}
 800fb28:	bf00      	nop
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	2000af4c 	.word	0x2000af4c
 800fb30:	080176c0 	.word	0x080176c0
 800fb34:	08017748 	.word	0x08017748
 800fb38:	08017720 	.word	0x08017720
 800fb3c:	2000af48 	.word	0x2000af48

0800fb40 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fb4e:	210c      	movs	r1, #12
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f001 f857 	bl	8010c04 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fb56:	4b06      	ldr	r3, [pc, #24]	; (800fb70 <dhcp_handle_nak+0x30>)
 800fb58:	4a05      	ldr	r2, [pc, #20]	; (800fb70 <dhcp_handle_nak+0x30>)
 800fb5a:	4905      	ldr	r1, [pc, #20]	; (800fb70 <dhcp_handle_nak+0x30>)
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7f9 f893 	bl	8008c88 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 fc4a 	bl	80103fc <dhcp_discover>
}
 800fb68:	bf00      	nop
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	0801a750 	.word	0x0801a750

0800fb74 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb80:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fb82:	2108      	movs	r1, #8
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f001 f83d 	bl	8010c04 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	331c      	adds	r3, #28
 800fb8e:	2200      	movs	r2, #0
 800fb90:	4619      	mov	r1, r3
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f002 fb3e 	bl	8012214 <etharp_query>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	799b      	ldrb	r3, [r3, #6]
 800fba0:	2bff      	cmp	r3, #255	; 0xff
 800fba2:	d005      	beq.n	800fbb0 <dhcp_check+0x3c>
    dhcp->tries++;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	799b      	ldrb	r3, [r3, #6]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	b2da      	uxtb	r2, r3
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fbb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fbb4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fbb6:	893b      	ldrh	r3, [r7, #8]
 800fbb8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fbbc:	4a06      	ldr	r2, [pc, #24]	; (800fbd8 <dhcp_check+0x64>)
 800fbbe:	fb82 1203 	smull	r1, r2, r2, r3
 800fbc2:	1152      	asrs	r2, r2, #5
 800fbc4:	17db      	asrs	r3, r3, #31
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fbce:	bf00      	nop
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	10624dd3 	.word	0x10624dd3

0800fbdc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fbec:	4b0c      	ldr	r3, [pc, #48]	; (800fc20 <dhcp_handle_offer+0x44>)
 800fbee:	789b      	ldrb	r3, [r3, #2]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d011      	beq.n	800fc18 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fbfa:	4b0a      	ldr	r3, [pc, #40]	; (800fc24 <dhcp_handle_offer+0x48>)
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7f8 f9cd 	bl	8007f9e <lwip_htonl>
 800fc04:	4602      	mov	r2, r0
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	691a      	ldr	r2, [r3, #16]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 f808 	bl	800fc28 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fc18:	bf00      	nop
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	2000af40 	.word	0x2000af40
 800fc24:	2000af20 	.word	0x2000af20

0800fc28 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fc28:	b5b0      	push	{r4, r5, r7, lr}
 800fc2a:	b08a      	sub	sp, #40	; 0x28
 800fc2c:	af02      	add	r7, sp, #8
 800fc2e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d109      	bne.n	800fc4a <dhcp_select+0x22>
 800fc36:	4b71      	ldr	r3, [pc, #452]	; (800fdfc <dhcp_select+0x1d4>)
 800fc38:	f240 1277 	movw	r2, #375	; 0x177
 800fc3c:	4970      	ldr	r1, [pc, #448]	; (800fe00 <dhcp_select+0x1d8>)
 800fc3e:	4871      	ldr	r0, [pc, #452]	; (800fe04 <dhcp_select+0x1dc>)
 800fc40:	f004 f8e2 	bl	8013e08 <iprintf>
 800fc44:	f06f 030f 	mvn.w	r3, #15
 800fc48:	e0d3      	b.n	800fdf2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d109      	bne.n	800fc6a <dhcp_select+0x42>
 800fc56:	4b69      	ldr	r3, [pc, #420]	; (800fdfc <dhcp_select+0x1d4>)
 800fc58:	f240 1279 	movw	r2, #377	; 0x179
 800fc5c:	496a      	ldr	r1, [pc, #424]	; (800fe08 <dhcp_select+0x1e0>)
 800fc5e:	4869      	ldr	r0, [pc, #420]	; (800fe04 <dhcp_select+0x1dc>)
 800fc60:	f004 f8d2 	bl	8013e08 <iprintf>
 800fc64:	f06f 0305 	mvn.w	r3, #5
 800fc68:	e0c3      	b.n	800fdf2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fc6a:	2101      	movs	r1, #1
 800fc6c:	69b8      	ldr	r0, [r7, #24]
 800fc6e:	f000 ffc9 	bl	8010c04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fc72:	f107 030c 	add.w	r3, r7, #12
 800fc76:	2203      	movs	r2, #3
 800fc78:	69b9      	ldr	r1, [r7, #24]
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f001 fc4e 	bl	801151c <dhcp_create_msg>
 800fc80:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	f000 8085 	beq.w	800fd94 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fc90:	89b8      	ldrh	r0, [r7, #12]
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc98:	2302      	movs	r3, #2
 800fc9a:	2239      	movs	r2, #57	; 0x39
 800fc9c:	f000 ffcc 	bl	8010c38 <dhcp_option>
 800fca0:	4603      	mov	r3, r0
 800fca2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fca4:	89b8      	ldrh	r0, [r7, #12]
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	f001 f81b 	bl	8010cec <dhcp_option_short>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fcba:	89b8      	ldrh	r0, [r7, #12]
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcc2:	2304      	movs	r3, #4
 800fcc4:	2232      	movs	r2, #50	; 0x32
 800fcc6:	f000 ffb7 	bl	8010c38 <dhcp_option>
 800fcca:	4603      	mov	r3, r0
 800fccc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fcce:	89bc      	ldrh	r4, [r7, #12]
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	69db      	ldr	r3, [r3, #28]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7f8 f95f 	bl	8007f9e <lwip_htonl>
 800fce0:	4603      	mov	r3, r0
 800fce2:	461a      	mov	r2, r3
 800fce4:	4629      	mov	r1, r5
 800fce6:	4620      	mov	r0, r4
 800fce8:	f001 f832 	bl	8010d50 <dhcp_option_long>
 800fcec:	4603      	mov	r3, r0
 800fcee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fcf0:	89b8      	ldrh	r0, [r7, #12]
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcf8:	2304      	movs	r3, #4
 800fcfa:	2236      	movs	r2, #54	; 0x36
 800fcfc:	f000 ff9c 	bl	8010c38 <dhcp_option>
 800fd00:	4603      	mov	r3, r0
 800fd02:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fd04:	89bc      	ldrh	r4, [r7, #12]
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fd0c:	69bb      	ldr	r3, [r7, #24]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7f8 f944 	bl	8007f9e <lwip_htonl>
 800fd16:	4603      	mov	r3, r0
 800fd18:	461a      	mov	r2, r3
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f001 f817 	bl	8010d50 <dhcp_option_long>
 800fd22:	4603      	mov	r3, r0
 800fd24:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fd26:	89b8      	ldrh	r0, [r7, #12]
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd2e:	2303      	movs	r3, #3
 800fd30:	2237      	movs	r2, #55	; 0x37
 800fd32:	f000 ff81 	bl	8010c38 <dhcp_option>
 800fd36:	4603      	mov	r3, r0
 800fd38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	77bb      	strb	r3, [r7, #30]
 800fd3e:	e00e      	b.n	800fd5e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fd40:	89b8      	ldrh	r0, [r7, #12]
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd48:	7fbb      	ldrb	r3, [r7, #30]
 800fd4a:	4a30      	ldr	r2, [pc, #192]	; (800fe0c <dhcp_select+0x1e4>)
 800fd4c:	5cd3      	ldrb	r3, [r2, r3]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	f000 ffa6 	bl	8010ca0 <dhcp_option_byte>
 800fd54:	4603      	mov	r3, r0
 800fd56:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd58:	7fbb      	ldrb	r3, [r7, #30]
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	77bb      	strb	r3, [r7, #30]
 800fd5e:	7fbb      	ldrb	r3, [r7, #30]
 800fd60:	2b02      	cmp	r3, #2
 800fd62:	d9ed      	bls.n	800fd40 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fd64:	89b8      	ldrh	r0, [r7, #12]
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	33f0      	adds	r3, #240	; 0xf0
 800fd6a:	697a      	ldr	r2, [r7, #20]
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	f001 fcab 	bl	80116c8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fd72:	4b27      	ldr	r3, [pc, #156]	; (800fe10 <dhcp_select+0x1e8>)
 800fd74:	6818      	ldr	r0, [r3, #0]
 800fd76:	4b27      	ldr	r3, [pc, #156]	; (800fe14 <dhcp_select+0x1ec>)
 800fd78:	9301      	str	r3, [sp, #4]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	2343      	movs	r3, #67	; 0x43
 800fd80:	4a25      	ldr	r2, [pc, #148]	; (800fe18 <dhcp_select+0x1f0>)
 800fd82:	6979      	ldr	r1, [r7, #20]
 800fd84:	f7ff fbda 	bl	800f53c <udp_sendto_if_src>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fd8c:	6978      	ldr	r0, [r7, #20]
 800fd8e:	f7f9 fc5b 	bl	8009648 <pbuf_free>
 800fd92:	e001      	b.n	800fd98 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fd94:	23ff      	movs	r3, #255	; 0xff
 800fd96:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	799b      	ldrb	r3, [r3, #6]
 800fd9c:	2bff      	cmp	r3, #255	; 0xff
 800fd9e:	d005      	beq.n	800fdac <dhcp_select+0x184>
    dhcp->tries++;
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	799b      	ldrb	r3, [r3, #6]
 800fda4:	3301      	adds	r3, #1
 800fda6:	b2da      	uxtb	r2, r3
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	799b      	ldrb	r3, [r3, #6]
 800fdb0:	2b05      	cmp	r3, #5
 800fdb2:	d80d      	bhi.n	800fdd0 <dhcp_select+0x1a8>
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	799b      	ldrb	r3, [r3, #6]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4093      	lsls	r3, r2
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	0152      	lsls	r2, r2, #5
 800fdc4:	1ad2      	subs	r2, r2, r3
 800fdc6:	0092      	lsls	r2, r2, #2
 800fdc8:	4413      	add	r3, r2
 800fdca:	00db      	lsls	r3, r3, #3
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	e001      	b.n	800fdd4 <dhcp_select+0x1ac>
 800fdd0:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fdd4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fdd6:	89fb      	ldrh	r3, [r7, #14]
 800fdd8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fddc:	4a0f      	ldr	r2, [pc, #60]	; (800fe1c <dhcp_select+0x1f4>)
 800fdde:	fb82 1203 	smull	r1, r2, r2, r3
 800fde2:	1152      	asrs	r2, r2, #5
 800fde4:	17db      	asrs	r3, r3, #31
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fdee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3720      	adds	r7, #32
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bdb0      	pop	{r4, r5, r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	080176c0 	.word	0x080176c0
 800fe00:	0801776c 	.word	0x0801776c
 800fe04:	08017720 	.word	0x08017720
 800fe08:	08017788 	.word	0x08017788
 800fe0c:	20000044 	.word	0x20000044
 800fe10:	2000af48 	.word	0x2000af48
 800fe14:	0801a750 	.word	0x0801a750
 800fe18:	0801a754 	.word	0x0801a754
 800fe1c:	10624dd3 	.word	0x10624dd3

0800fe20 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fe26:	4b27      	ldr	r3, [pc, #156]	; (800fec4 <dhcp_coarse_tmr+0xa4>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	607b      	str	r3, [r7, #4]
 800fe2c:	e042      	b.n	800feb4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe32:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d039      	beq.n	800feae <dhcp_coarse_tmr+0x8e>
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	795b      	ldrb	r3, [r3, #5]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d035      	beq.n	800feae <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	8a9b      	ldrh	r3, [r3, #20]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d012      	beq.n	800fe70 <dhcp_coarse_tmr+0x50>
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	8a5b      	ldrh	r3, [r3, #18]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	825a      	strh	r2, [r3, #18]
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	8a5a      	ldrh	r2, [r3, #18]
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	8a9b      	ldrh	r3, [r3, #20]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d106      	bne.n	800fe70 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 fe34 	bl	8010ad0 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 f96b 	bl	8010144 <dhcp_start>
 800fe6e:	e01e      	b.n	800feae <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	8a1b      	ldrh	r3, [r3, #16]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00b      	beq.n	800fe90 <dhcp_coarse_tmr+0x70>
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	8a1b      	ldrh	r3, [r3, #16]
 800fe7c:	1e5a      	subs	r2, r3, #1
 800fe7e:	b291      	uxth	r1, r2
 800fe80:	683a      	ldr	r2, [r7, #0]
 800fe82:	8211      	strh	r1, [r2, #16]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d103      	bne.n	800fe90 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 f8c7 	bl	801001c <dhcp_t2_timeout>
 800fe8e:	e00e      	b.n	800feae <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	89db      	ldrh	r3, [r3, #14]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00a      	beq.n	800feae <dhcp_coarse_tmr+0x8e>
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	89db      	ldrh	r3, [r3, #14]
 800fe9c:	1e5a      	subs	r2, r3, #1
 800fe9e:	b291      	uxth	r1, r2
 800fea0:	683a      	ldr	r2, [r7, #0]
 800fea2:	81d1      	strh	r1, [r2, #14]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d102      	bne.n	800feae <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f888 	bl	800ffbe <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	607b      	str	r3, [r7, #4]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1b9      	bne.n	800fe2e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800feba:	bf00      	nop
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	2000aeb4 	.word	0x2000aeb4

0800fec8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fece:	4b16      	ldr	r3, [pc, #88]	; (800ff28 <dhcp_fine_tmr+0x60>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	607b      	str	r3, [r7, #4]
 800fed4:	e020      	b.n	800ff18 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feda:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d017      	beq.n	800ff12 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	891b      	ldrh	r3, [r3, #8]
 800fee6:	2b01      	cmp	r3, #1
 800fee8:	d906      	bls.n	800fef8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	891b      	ldrh	r3, [r3, #8]
 800feee:	3b01      	subs	r3, #1
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	811a      	strh	r2, [r3, #8]
 800fef6:	e00c      	b.n	800ff12 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	891b      	ldrh	r3, [r3, #8]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d108      	bne.n	800ff12 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	891b      	ldrh	r3, [r3, #8]
 800ff04:	3b01      	subs	r3, #1
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 f80d 	bl	800ff2c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	607b      	str	r3, [r7, #4]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1db      	bne.n	800fed6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ff1e:	bf00      	nop
 800ff20:	bf00      	nop
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	2000aeb4 	.word	0x2000aeb4

0800ff2c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff38:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	795b      	ldrb	r3, [r3, #5]
 800ff3e:	2b0c      	cmp	r3, #12
 800ff40:	d003      	beq.n	800ff4a <dhcp_timeout+0x1e>
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	795b      	ldrb	r3, [r3, #5]
 800ff46:	2b06      	cmp	r3, #6
 800ff48:	d103      	bne.n	800ff52 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 fa56 	bl	80103fc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800ff50:	e031      	b.n	800ffb6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	795b      	ldrb	r3, [r3, #5]
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d10e      	bne.n	800ff78 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	799b      	ldrb	r3, [r3, #6]
 800ff5e:	2b05      	cmp	r3, #5
 800ff60:	d803      	bhi.n	800ff6a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7ff fe60 	bl	800fc28 <dhcp_select>
}
 800ff68:	e025      	b.n	800ffb6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 fdb0 	bl	8010ad0 <dhcp_release_and_stop>
      dhcp_start(netif);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f8e7 	bl	8010144 <dhcp_start>
}
 800ff76:	e01e      	b.n	800ffb6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	795b      	ldrb	r3, [r3, #5]
 800ff7c:	2b08      	cmp	r3, #8
 800ff7e:	d10b      	bne.n	800ff98 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	799b      	ldrb	r3, [r3, #6]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d803      	bhi.n	800ff90 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff fdf3 	bl	800fb74 <dhcp_check>
}
 800ff8e:	e012      	b.n	800ffb6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f000 fad5 	bl	8010540 <dhcp_bind>
}
 800ff96:	e00e      	b.n	800ffb6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	795b      	ldrb	r3, [r3, #5]
 800ff9c:	2b03      	cmp	r3, #3
 800ff9e:	d10a      	bne.n	800ffb6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	799b      	ldrb	r3, [r3, #6]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d803      	bhi.n	800ffb0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 fcdb 	bl	8010964 <dhcp_reboot>
}
 800ffae:	e002      	b.n	800ffb6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 fa23 	bl	80103fc <dhcp_discover>
}
 800ffb6:	bf00      	nop
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b084      	sub	sp, #16
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	795b      	ldrb	r3, [r3, #5]
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d007      	beq.n	800ffe4 <dhcp_t1_timeout+0x26>
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	795b      	ldrb	r3, [r3, #5]
 800ffd8:	2b0a      	cmp	r3, #10
 800ffda:	d003      	beq.n	800ffe4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ffe0:	2b05      	cmp	r3, #5
 800ffe2:	d117      	bne.n	8010014 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 fb85 	bl	80106f4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	899b      	ldrh	r3, [r3, #12]
 800ffee:	461a      	mov	r2, r3
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	8a5b      	ldrh	r3, [r3, #18]
 800fff4:	1ad3      	subs	r3, r2, r3
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	dd0c      	ble.n	8010014 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	899b      	ldrh	r3, [r3, #12]
 800fffe:	461a      	mov	r2, r3
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	8a5b      	ldrh	r3, [r3, #18]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	2b00      	cmp	r3, #0
 8010008:	da00      	bge.n	801000c <dhcp_t1_timeout+0x4e>
 801000a:	3301      	adds	r3, #1
 801000c:	105b      	asrs	r3, r3, #1
 801000e:	b29a      	uxth	r2, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8010014:	bf00      	nop
 8010016:	3710      	adds	r7, #16
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010028:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	795b      	ldrb	r3, [r3, #5]
 801002e:	2b01      	cmp	r3, #1
 8010030:	d00b      	beq.n	801004a <dhcp_t2_timeout+0x2e>
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	795b      	ldrb	r3, [r3, #5]
 8010036:	2b0a      	cmp	r3, #10
 8010038:	d007      	beq.n	801004a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801003e:	2b05      	cmp	r3, #5
 8010040:	d003      	beq.n	801004a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	795b      	ldrb	r3, [r3, #5]
 8010046:	2b04      	cmp	r3, #4
 8010048:	d117      	bne.n	801007a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fbee 	bl	801082c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	8a9b      	ldrh	r3, [r3, #20]
 8010054:	461a      	mov	r2, r3
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	8a5b      	ldrh	r3, [r3, #18]
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	2b01      	cmp	r3, #1
 801005e:	dd0c      	ble.n	801007a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	8a9b      	ldrh	r3, [r3, #20]
 8010064:	461a      	mov	r2, r3
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	8a5b      	ldrh	r3, [r3, #18]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	2b00      	cmp	r3, #0
 801006e:	da00      	bge.n	8010072 <dhcp_t2_timeout+0x56>
 8010070:	3301      	adds	r3, #1
 8010072:	105b      	asrs	r3, r3, #1
 8010074:	b29a      	uxth	r2, r3
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801007a:	bf00      	nop
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010092:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2200      	movs	r2, #0
 8010098:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2200      	movs	r2, #0
 801009e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80100a0:	4b26      	ldr	r3, [pc, #152]	; (801013c <dhcp_handle_ack+0xb8>)
 80100a2:	78db      	ldrb	r3, [r3, #3]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d003      	beq.n	80100b0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80100a8:	4b25      	ldr	r3, [pc, #148]	; (8010140 <dhcp_handle_ack+0xbc>)
 80100aa:	68da      	ldr	r2, [r3, #12]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80100b0:	4b22      	ldr	r3, [pc, #136]	; (801013c <dhcp_handle_ack+0xb8>)
 80100b2:	791b      	ldrb	r3, [r3, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d004      	beq.n	80100c2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80100b8:	4b21      	ldr	r3, [pc, #132]	; (8010140 <dhcp_handle_ack+0xbc>)
 80100ba:	691a      	ldr	r2, [r3, #16]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	62da      	str	r2, [r3, #44]	; 0x2c
 80100c0:	e004      	b.n	80100cc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100c6:	085a      	lsrs	r2, r3, #1
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80100cc:	4b1b      	ldr	r3, [pc, #108]	; (801013c <dhcp_handle_ack+0xb8>)
 80100ce:	795b      	ldrb	r3, [r3, #5]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d004      	beq.n	80100de <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80100d4:	4b1a      	ldr	r3, [pc, #104]	; (8010140 <dhcp_handle_ack+0xbc>)
 80100d6:	695a      	ldr	r2, [r3, #20]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	631a      	str	r2, [r3, #48]	; 0x30
 80100dc:	e007      	b.n	80100ee <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80100e2:	4613      	mov	r3, r2
 80100e4:	00db      	lsls	r3, r3, #3
 80100e6:	1a9b      	subs	r3, r3, r2
 80100e8:	08da      	lsrs	r2, r3, #3
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	691a      	ldr	r2, [r3, #16]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80100f6:	4b11      	ldr	r3, [pc, #68]	; (801013c <dhcp_handle_ack+0xb8>)
 80100f8:	799b      	ldrb	r3, [r3, #6]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00b      	beq.n	8010116 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80100fe:	4b10      	ldr	r3, [pc, #64]	; (8010140 <dhcp_handle_ack+0xbc>)
 8010100:	699b      	ldr	r3, [r3, #24]
 8010102:	4618      	mov	r0, r3
 8010104:	f7f7 ff4b 	bl	8007f9e <lwip_htonl>
 8010108:	4602      	mov	r2, r0
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2201      	movs	r2, #1
 8010112:	71da      	strb	r2, [r3, #7]
 8010114:	e002      	b.n	801011c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2200      	movs	r2, #0
 801011a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801011c:	4b07      	ldr	r3, [pc, #28]	; (801013c <dhcp_handle_ack+0xb8>)
 801011e:	79db      	ldrb	r3, [r3, #7]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d007      	beq.n	8010134 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010124:	4b06      	ldr	r3, [pc, #24]	; (8010140 <dhcp_handle_ack+0xbc>)
 8010126:	69db      	ldr	r3, [r3, #28]
 8010128:	4618      	mov	r0, r3
 801012a:	f7f7 ff38 	bl	8007f9e <lwip_htonl>
 801012e:	4602      	mov	r2, r0
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010134:	bf00      	nop
 8010136:	3710      	adds	r7, #16
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	2000af40 	.word	0x2000af40
 8010140:	2000af20 	.word	0x2000af20

08010144 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d109      	bne.n	8010166 <dhcp_start+0x22>
 8010152:	4b37      	ldr	r3, [pc, #220]	; (8010230 <dhcp_start+0xec>)
 8010154:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010158:	4936      	ldr	r1, [pc, #216]	; (8010234 <dhcp_start+0xf0>)
 801015a:	4837      	ldr	r0, [pc, #220]	; (8010238 <dhcp_start+0xf4>)
 801015c:	f003 fe54 	bl	8013e08 <iprintf>
 8010160:	f06f 030f 	mvn.w	r3, #15
 8010164:	e060      	b.n	8010228 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801016c:	f003 0301 	and.w	r3, r3, #1
 8010170:	2b00      	cmp	r3, #0
 8010172:	d109      	bne.n	8010188 <dhcp_start+0x44>
 8010174:	4b2e      	ldr	r3, [pc, #184]	; (8010230 <dhcp_start+0xec>)
 8010176:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801017a:	4930      	ldr	r1, [pc, #192]	; (801023c <dhcp_start+0xf8>)
 801017c:	482e      	ldr	r0, [pc, #184]	; (8010238 <dhcp_start+0xf4>)
 801017e:	f003 fe43 	bl	8013e08 <iprintf>
 8010182:	f06f 030f 	mvn.w	r3, #15
 8010186:	e04f      	b.n	8010228 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801018c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010192:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8010196:	d202      	bcs.n	801019e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010198:	f04f 33ff 	mov.w	r3, #4294967295
 801019c:	e044      	b.n	8010228 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d10d      	bne.n	80101c0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80101a4:	2034      	movs	r0, #52	; 0x34
 80101a6:	f7f8 f9cd 	bl	8008544 <mem_malloc>
 80101aa:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d102      	bne.n	80101b8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80101b2:	f04f 33ff 	mov.w	r3, #4294967295
 80101b6:	e037      	b.n	8010228 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	625a      	str	r2, [r3, #36]	; 0x24
 80101be:	e005      	b.n	80101cc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	791b      	ldrb	r3, [r3, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d001      	beq.n	80101cc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80101c8:	f7ff fc90 	bl	800faec <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80101cc:	2234      	movs	r2, #52	; 0x34
 80101ce:	2100      	movs	r1, #0
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f003 fe11 	bl	8013df8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80101d6:	f7ff fc37 	bl	800fa48 <dhcp_inc_pcb_refcount>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d002      	beq.n	80101e6 <dhcp_start+0xa2>
    return ERR_MEM;
 80101e0:	f04f 33ff 	mov.w	r3, #4294967295
 80101e4:	e020      	b.n	8010228 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2201      	movs	r2, #1
 80101ea:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80101f2:	f003 0304 	and.w	r3, r3, #4
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d105      	bne.n	8010206 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80101fa:	2102      	movs	r1, #2
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f000 fd01 	bl	8010c04 <dhcp_set_state>
    return ERR_OK;
 8010202:	2300      	movs	r3, #0
 8010204:	e010      	b.n	8010228 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f8f8 	bl	80103fc <dhcp_discover>
 801020c:	4603      	mov	r3, r0
 801020e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010210:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 fc59 	bl	8010ad0 <dhcp_release_and_stop>
    return ERR_MEM;
 801021e:	f04f 33ff 	mov.w	r3, #4294967295
 8010222:	e001      	b.n	8010228 <dhcp_start+0xe4>
  }
  return result;
 8010224:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010228:	4618      	mov	r0, r3
 801022a:	3710      	adds	r7, #16
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	080176c0 	.word	0x080176c0
 8010234:	080177a4 	.word	0x080177a4
 8010238:	08017720 	.word	0x08017720
 801023c:	080177e8 	.word	0x080177e8

08010240 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d025      	beq.n	80102a0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	795b      	ldrb	r3, [r3, #5]
 8010258:	2b0a      	cmp	r3, #10
 801025a:	d008      	beq.n	801026e <dhcp_network_changed+0x2e>
 801025c:	2b0a      	cmp	r3, #10
 801025e:	dc0d      	bgt.n	801027c <dhcp_network_changed+0x3c>
 8010260:	2b00      	cmp	r3, #0
 8010262:	d01f      	beq.n	80102a4 <dhcp_network_changed+0x64>
 8010264:	2b00      	cmp	r3, #0
 8010266:	db09      	blt.n	801027c <dhcp_network_changed+0x3c>
 8010268:	3b03      	subs	r3, #3
 801026a:	2b02      	cmp	r3, #2
 801026c:	d806      	bhi.n	801027c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2200      	movs	r2, #0
 8010272:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 fb75 	bl	8010964 <dhcp_reboot>
      break;
 801027a:	e014      	b.n	80102a6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	795b      	ldrb	r3, [r3, #5]
 8010280:	2b0c      	cmp	r3, #12
 8010282:	d906      	bls.n	8010292 <dhcp_network_changed+0x52>
 8010284:	4b09      	ldr	r3, [pc, #36]	; (80102ac <dhcp_network_changed+0x6c>)
 8010286:	f240 326d 	movw	r2, #877	; 0x36d
 801028a:	4909      	ldr	r1, [pc, #36]	; (80102b0 <dhcp_network_changed+0x70>)
 801028c:	4809      	ldr	r0, [pc, #36]	; (80102b4 <dhcp_network_changed+0x74>)
 801028e:	f003 fdbb 	bl	8013e08 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 f8af 	bl	80103fc <dhcp_discover>
      break;
 801029e:	e002      	b.n	80102a6 <dhcp_network_changed+0x66>
    return;
 80102a0:	bf00      	nop
 80102a2:	e000      	b.n	80102a6 <dhcp_network_changed+0x66>
      break;
 80102a4:	bf00      	nop
  }
}
 80102a6:	3710      	adds	r7, #16
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}
 80102ac:	080176c0 	.word	0x080176c0
 80102b0:	0801780c 	.word	0x0801780c
 80102b4:	08017720 	.word	0x08017720

080102b8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d107      	bne.n	80102d8 <dhcp_arp_reply+0x20>
 80102c8:	4b0e      	ldr	r3, [pc, #56]	; (8010304 <dhcp_arp_reply+0x4c>)
 80102ca:	f240 328b 	movw	r2, #907	; 0x38b
 80102ce:	490e      	ldr	r1, [pc, #56]	; (8010308 <dhcp_arp_reply+0x50>)
 80102d0:	480e      	ldr	r0, [pc, #56]	; (801030c <dhcp_arp_reply+0x54>)
 80102d2:	f003 fd99 	bl	8013e08 <iprintf>
 80102d6:	e012      	b.n	80102fe <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102dc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d00c      	beq.n	80102fe <dhcp_arp_reply+0x46>
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	795b      	ldrb	r3, [r3, #5]
 80102e8:	2b08      	cmp	r3, #8
 80102ea:	d108      	bne.n	80102fe <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	69db      	ldr	r3, [r3, #28]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d102      	bne.n	80102fe <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 f809 	bl	8010310 <dhcp_decline>
    }
  }
}
 80102fe:	3710      	adds	r7, #16
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	080176c0 	.word	0x080176c0
 8010308:	080177a4 	.word	0x080177a4
 801030c:	08017720 	.word	0x08017720

08010310 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010310:	b5b0      	push	{r4, r5, r7, lr}
 8010312:	b08a      	sub	sp, #40	; 0x28
 8010314:	af02      	add	r7, sp, #8
 8010316:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801031e:	210c      	movs	r1, #12
 8010320:	69b8      	ldr	r0, [r7, #24]
 8010322:	f000 fc6f 	bl	8010c04 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8010326:	f107 030c 	add.w	r3, r7, #12
 801032a:	2204      	movs	r2, #4
 801032c:	69b9      	ldr	r1, [r7, #24]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f001 f8f4 	bl	801151c <dhcp_create_msg>
 8010334:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d035      	beq.n	80103a8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010342:	89b8      	ldrh	r0, [r7, #12]
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801034a:	2304      	movs	r3, #4
 801034c:	2232      	movs	r2, #50	; 0x32
 801034e:	f000 fc73 	bl	8010c38 <dhcp_option>
 8010352:	4603      	mov	r3, r0
 8010354:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010356:	89bc      	ldrh	r4, [r7, #12]
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	4618      	mov	r0, r3
 8010364:	f7f7 fe1b 	bl	8007f9e <lwip_htonl>
 8010368:	4603      	mov	r3, r0
 801036a:	461a      	mov	r2, r3
 801036c:	4629      	mov	r1, r5
 801036e:	4620      	mov	r0, r4
 8010370:	f000 fcee 	bl	8010d50 <dhcp_option_long>
 8010374:	4603      	mov	r3, r0
 8010376:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010378:	89b8      	ldrh	r0, [r7, #12]
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	33f0      	adds	r3, #240	; 0xf0
 801037e:	697a      	ldr	r2, [r7, #20]
 8010380:	4619      	mov	r1, r3
 8010382:	f001 f9a1 	bl	80116c8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010386:	4b19      	ldr	r3, [pc, #100]	; (80103ec <dhcp_decline+0xdc>)
 8010388:	6818      	ldr	r0, [r3, #0]
 801038a:	4b19      	ldr	r3, [pc, #100]	; (80103f0 <dhcp_decline+0xe0>)
 801038c:	9301      	str	r3, [sp, #4]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	9300      	str	r3, [sp, #0]
 8010392:	2343      	movs	r3, #67	; 0x43
 8010394:	4a17      	ldr	r2, [pc, #92]	; (80103f4 <dhcp_decline+0xe4>)
 8010396:	6979      	ldr	r1, [r7, #20]
 8010398:	f7ff f8d0 	bl	800f53c <udp_sendto_if_src>
 801039c:	4603      	mov	r3, r0
 801039e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80103a0:	6978      	ldr	r0, [r7, #20]
 80103a2:	f7f9 f951 	bl	8009648 <pbuf_free>
 80103a6:	e001      	b.n	80103ac <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80103a8:	23ff      	movs	r3, #255	; 0xff
 80103aa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	799b      	ldrb	r3, [r3, #6]
 80103b0:	2bff      	cmp	r3, #255	; 0xff
 80103b2:	d005      	beq.n	80103c0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	799b      	ldrb	r3, [r3, #6]
 80103b8:	3301      	adds	r3, #1
 80103ba:	b2da      	uxtb	r2, r3
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80103c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80103c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80103c6:	89fb      	ldrh	r3, [r7, #14]
 80103c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80103cc:	4a0a      	ldr	r2, [pc, #40]	; (80103f8 <dhcp_decline+0xe8>)
 80103ce:	fb82 1203 	smull	r1, r2, r2, r3
 80103d2:	1152      	asrs	r2, r2, #5
 80103d4:	17db      	asrs	r3, r3, #31
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	b29a      	uxth	r2, r3
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80103de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3720      	adds	r7, #32
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bdb0      	pop	{r4, r5, r7, pc}
 80103ea:	bf00      	nop
 80103ec:	2000af48 	.word	0x2000af48
 80103f0:	0801a750 	.word	0x0801a750
 80103f4:	0801a754 	.word	0x0801a754
 80103f8:	10624dd3 	.word	0x10624dd3

080103fc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b08a      	sub	sp, #40	; 0x28
 8010400:	af02      	add	r7, sp, #8
 8010402:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010408:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801040a:	2300      	movs	r3, #0
 801040c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	2200      	movs	r2, #0
 8010412:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010414:	2106      	movs	r1, #6
 8010416:	69b8      	ldr	r0, [r7, #24]
 8010418:	f000 fbf4 	bl	8010c04 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801041c:	f107 0308 	add.w	r3, r7, #8
 8010420:	2201      	movs	r2, #1
 8010422:	69b9      	ldr	r1, [r7, #24]
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f001 f879 	bl	801151c <dhcp_create_msg>
 801042a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d04b      	beq.n	80104ca <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010438:	8938      	ldrh	r0, [r7, #8]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010440:	2302      	movs	r3, #2
 8010442:	2239      	movs	r2, #57	; 0x39
 8010444:	f000 fbf8 	bl	8010c38 <dhcp_option>
 8010448:	4603      	mov	r3, r0
 801044a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801044c:	8938      	ldrh	r0, [r7, #8]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010458:	461a      	mov	r2, r3
 801045a:	f000 fc47 	bl	8010cec <dhcp_option_short>
 801045e:	4603      	mov	r3, r0
 8010460:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010462:	8938      	ldrh	r0, [r7, #8]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801046a:	2303      	movs	r3, #3
 801046c:	2237      	movs	r2, #55	; 0x37
 801046e:	f000 fbe3 	bl	8010c38 <dhcp_option>
 8010472:	4603      	mov	r3, r0
 8010474:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010476:	2300      	movs	r3, #0
 8010478:	77fb      	strb	r3, [r7, #31]
 801047a:	e00e      	b.n	801049a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801047c:	8938      	ldrh	r0, [r7, #8]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010484:	7ffb      	ldrb	r3, [r7, #31]
 8010486:	4a29      	ldr	r2, [pc, #164]	; (801052c <dhcp_discover+0x130>)
 8010488:	5cd3      	ldrb	r3, [r2, r3]
 801048a:	461a      	mov	r2, r3
 801048c:	f000 fc08 	bl	8010ca0 <dhcp_option_byte>
 8010490:	4603      	mov	r3, r0
 8010492:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010494:	7ffb      	ldrb	r3, [r7, #31]
 8010496:	3301      	adds	r3, #1
 8010498:	77fb      	strb	r3, [r7, #31]
 801049a:	7ffb      	ldrb	r3, [r7, #31]
 801049c:	2b02      	cmp	r3, #2
 801049e:	d9ed      	bls.n	801047c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80104a0:	8938      	ldrh	r0, [r7, #8]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	33f0      	adds	r3, #240	; 0xf0
 80104a6:	693a      	ldr	r2, [r7, #16]
 80104a8:	4619      	mov	r1, r3
 80104aa:	f001 f90d 	bl	80116c8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80104ae:	4b20      	ldr	r3, [pc, #128]	; (8010530 <dhcp_discover+0x134>)
 80104b0:	6818      	ldr	r0, [r3, #0]
 80104b2:	4b20      	ldr	r3, [pc, #128]	; (8010534 <dhcp_discover+0x138>)
 80104b4:	9301      	str	r3, [sp, #4]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	9300      	str	r3, [sp, #0]
 80104ba:	2343      	movs	r3, #67	; 0x43
 80104bc:	4a1e      	ldr	r2, [pc, #120]	; (8010538 <dhcp_discover+0x13c>)
 80104be:	6939      	ldr	r1, [r7, #16]
 80104c0:	f7ff f83c 	bl	800f53c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80104c4:	6938      	ldr	r0, [r7, #16]
 80104c6:	f7f9 f8bf 	bl	8009648 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	799b      	ldrb	r3, [r3, #6]
 80104ce:	2bff      	cmp	r3, #255	; 0xff
 80104d0:	d005      	beq.n	80104de <dhcp_discover+0xe2>
    dhcp->tries++;
 80104d2:	69bb      	ldr	r3, [r7, #24]
 80104d4:	799b      	ldrb	r3, [r3, #6]
 80104d6:	3301      	adds	r3, #1
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	799b      	ldrb	r3, [r3, #6]
 80104e2:	2b05      	cmp	r3, #5
 80104e4:	d80d      	bhi.n	8010502 <dhcp_discover+0x106>
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	799b      	ldrb	r3, [r3, #6]
 80104ea:	461a      	mov	r2, r3
 80104ec:	2301      	movs	r3, #1
 80104ee:	4093      	lsls	r3, r2
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	461a      	mov	r2, r3
 80104f4:	0152      	lsls	r2, r2, #5
 80104f6:	1ad2      	subs	r2, r2, r3
 80104f8:	0092      	lsls	r2, r2, #2
 80104fa:	4413      	add	r3, r2
 80104fc:	00db      	lsls	r3, r3, #3
 80104fe:	b29b      	uxth	r3, r3
 8010500:	e001      	b.n	8010506 <dhcp_discover+0x10a>
 8010502:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010506:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010508:	897b      	ldrh	r3, [r7, #10]
 801050a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801050e:	4a0b      	ldr	r2, [pc, #44]	; (801053c <dhcp_discover+0x140>)
 8010510:	fb82 1203 	smull	r1, r2, r2, r3
 8010514:	1152      	asrs	r2, r2, #5
 8010516:	17db      	asrs	r3, r3, #31
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	b29a      	uxth	r2, r3
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010520:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010524:	4618      	mov	r0, r3
 8010526:	3720      	adds	r7, #32
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	20000044 	.word	0x20000044
 8010530:	2000af48 	.word	0x2000af48
 8010534:	0801a750 	.word	0x0801a750
 8010538:	0801a754 	.word	0x0801a754
 801053c:	10624dd3 	.word	0x10624dd3

08010540 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b088      	sub	sp, #32
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d107      	bne.n	801055e <dhcp_bind+0x1e>
 801054e:	4b64      	ldr	r3, [pc, #400]	; (80106e0 <dhcp_bind+0x1a0>)
 8010550:	f240 4215 	movw	r2, #1045	; 0x415
 8010554:	4963      	ldr	r1, [pc, #396]	; (80106e4 <dhcp_bind+0x1a4>)
 8010556:	4864      	ldr	r0, [pc, #400]	; (80106e8 <dhcp_bind+0x1a8>)
 8010558:	f003 fc56 	bl	8013e08 <iprintf>
 801055c:	e0bc      	b.n	80106d8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010562:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d107      	bne.n	801057a <dhcp_bind+0x3a>
 801056a:	4b5d      	ldr	r3, [pc, #372]	; (80106e0 <dhcp_bind+0x1a0>)
 801056c:	f240 4217 	movw	r2, #1047	; 0x417
 8010570:	495e      	ldr	r1, [pc, #376]	; (80106ec <dhcp_bind+0x1ac>)
 8010572:	485d      	ldr	r0, [pc, #372]	; (80106e8 <dhcp_bind+0x1a8>)
 8010574:	f003 fc48 	bl	8013e08 <iprintf>
 8010578:	e0ae      	b.n	80106d8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	2200      	movs	r2, #0
 801057e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010588:	d019      	beq.n	80105be <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801058e:	331e      	adds	r3, #30
 8010590:	4a57      	ldr	r2, [pc, #348]	; (80106f0 <dhcp_bind+0x1b0>)
 8010592:	fba2 2303 	umull	r2, r3, r2, r3
 8010596:	095b      	lsrs	r3, r3, #5
 8010598:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105a0:	d302      	bcc.n	80105a8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80105a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	8a9b      	ldrh	r3, [r3, #20]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d102      	bne.n	80105be <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	2201      	movs	r2, #1
 80105bc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105c6:	d01d      	beq.n	8010604 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105cc:	331e      	adds	r3, #30
 80105ce:	4a48      	ldr	r2, [pc, #288]	; (80106f0 <dhcp_bind+0x1b0>)
 80105d0:	fba2 2303 	umull	r2, r3, r2, r3
 80105d4:	095b      	lsrs	r3, r3, #5
 80105d6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105de:	d302      	bcc.n	80105e6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80105e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105e4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	b29a      	uxth	r2, r3
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	895b      	ldrh	r3, [r3, #10]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d102      	bne.n	80105fc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	2201      	movs	r2, #1
 80105fa:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80105fc:	69bb      	ldr	r3, [r7, #24]
 80105fe:	895a      	ldrh	r2, [r3, #10]
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010604:	69bb      	ldr	r3, [r7, #24]
 8010606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060c:	d01d      	beq.n	801064a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010612:	331e      	adds	r3, #30
 8010614:	4a36      	ldr	r2, [pc, #216]	; (80106f0 <dhcp_bind+0x1b0>)
 8010616:	fba2 2303 	umull	r2, r3, r2, r3
 801061a:	095b      	lsrs	r3, r3, #5
 801061c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010624:	d302      	bcc.n	801062c <dhcp_bind+0xec>
      timeout = 0xffff;
 8010626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801062a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	b29a      	uxth	r2, r3
 8010630:	69bb      	ldr	r3, [r7, #24]
 8010632:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	899b      	ldrh	r3, [r3, #12]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d102      	bne.n	8010642 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801063c:	69bb      	ldr	r3, [r7, #24]
 801063e:	2201      	movs	r2, #1
 8010640:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	899a      	ldrh	r2, [r3, #12]
 8010646:	69bb      	ldr	r3, [r7, #24]
 8010648:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	895a      	ldrh	r2, [r3, #10]
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	899b      	ldrh	r3, [r3, #12]
 8010652:	429a      	cmp	r2, r3
 8010654:	d306      	bcc.n	8010664 <dhcp_bind+0x124>
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	899b      	ldrh	r3, [r3, #12]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d002      	beq.n	8010664 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	2200      	movs	r2, #0
 8010662:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010664:	69bb      	ldr	r3, [r7, #24]
 8010666:	79db      	ldrb	r3, [r3, #7]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d003      	beq.n	8010674 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	6a1b      	ldr	r3, [r3, #32]
 8010670:	613b      	str	r3, [r7, #16]
 8010672:	e014      	b.n	801069e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	331c      	adds	r3, #28
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801067c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010680:	2b00      	cmp	r3, #0
 8010682:	db02      	blt.n	801068a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010684:	23ff      	movs	r3, #255	; 0xff
 8010686:	613b      	str	r3, [r7, #16]
 8010688:	e009      	b.n	801069e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801068a:	7dfb      	ldrb	r3, [r7, #23]
 801068c:	2bbf      	cmp	r3, #191	; 0xbf
 801068e:	d903      	bls.n	8010698 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010690:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010694:	613b      	str	r3, [r7, #16]
 8010696:	e002      	b.n	801069e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801069c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d108      	bne.n	80106bc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	69da      	ldr	r2, [r3, #28]
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	4013      	ands	r3, r2
 80106b2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80106ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80106bc:	210a      	movs	r1, #10
 80106be:	69b8      	ldr	r0, [r7, #24]
 80106c0:	f000 faa0 	bl	8010c04 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	f103 011c 	add.w	r1, r3, #28
 80106ca:	f107 030c 	add.w	r3, r7, #12
 80106ce:	f107 0210 	add.w	r2, r7, #16
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f7f8 fad8 	bl	8008c88 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80106d8:	3720      	adds	r7, #32
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	080176c0 	.word	0x080176c0
 80106e4:	08017820 	.word	0x08017820
 80106e8:	08017720 	.word	0x08017720
 80106ec:	0801783c 	.word	0x0801783c
 80106f0:	88888889 	.word	0x88888889

080106f4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b08a      	sub	sp, #40	; 0x28
 80106f8:	af02      	add	r7, sp, #8
 80106fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010700:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8010702:	2105      	movs	r1, #5
 8010704:	69b8      	ldr	r0, [r7, #24]
 8010706:	f000 fa7d 	bl	8010c04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801070a:	f107 030c 	add.w	r3, r7, #12
 801070e:	2203      	movs	r2, #3
 8010710:	69b9      	ldr	r1, [r7, #24]
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 ff02 	bl	801151c <dhcp_create_msg>
 8010718:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d04e      	beq.n	80107be <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010726:	89b8      	ldrh	r0, [r7, #12]
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801072e:	2302      	movs	r3, #2
 8010730:	2239      	movs	r2, #57	; 0x39
 8010732:	f000 fa81 	bl	8010c38 <dhcp_option>
 8010736:	4603      	mov	r3, r0
 8010738:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801073a:	89b8      	ldrh	r0, [r7, #12]
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010746:	461a      	mov	r2, r3
 8010748:	f000 fad0 	bl	8010cec <dhcp_option_short>
 801074c:	4603      	mov	r3, r0
 801074e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010750:	89b8      	ldrh	r0, [r7, #12]
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010758:	2303      	movs	r3, #3
 801075a:	2237      	movs	r2, #55	; 0x37
 801075c:	f000 fa6c 	bl	8010c38 <dhcp_option>
 8010760:	4603      	mov	r3, r0
 8010762:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010764:	2300      	movs	r3, #0
 8010766:	77bb      	strb	r3, [r7, #30]
 8010768:	e00e      	b.n	8010788 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801076a:	89b8      	ldrh	r0, [r7, #12]
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010772:	7fbb      	ldrb	r3, [r7, #30]
 8010774:	4a2a      	ldr	r2, [pc, #168]	; (8010820 <dhcp_renew+0x12c>)
 8010776:	5cd3      	ldrb	r3, [r2, r3]
 8010778:	461a      	mov	r2, r3
 801077a:	f000 fa91 	bl	8010ca0 <dhcp_option_byte>
 801077e:	4603      	mov	r3, r0
 8010780:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010782:	7fbb      	ldrb	r3, [r7, #30]
 8010784:	3301      	adds	r3, #1
 8010786:	77bb      	strb	r3, [r7, #30]
 8010788:	7fbb      	ldrb	r3, [r7, #30]
 801078a:	2b02      	cmp	r3, #2
 801078c:	d9ed      	bls.n	801076a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801078e:	89b8      	ldrh	r0, [r7, #12]
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	33f0      	adds	r3, #240	; 0xf0
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	4619      	mov	r1, r3
 8010798:	f000 ff96 	bl	80116c8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801079c:	4b21      	ldr	r3, [pc, #132]	; (8010824 <dhcp_renew+0x130>)
 801079e:	6818      	ldr	r0, [r3, #0]
 80107a0:	69bb      	ldr	r3, [r7, #24]
 80107a2:	f103 0218 	add.w	r2, r3, #24
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	2343      	movs	r3, #67	; 0x43
 80107ac:	6979      	ldr	r1, [r7, #20]
 80107ae:	f7fe fe51 	bl	800f454 <udp_sendto_if>
 80107b2:	4603      	mov	r3, r0
 80107b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80107b6:	6978      	ldr	r0, [r7, #20]
 80107b8:	f7f8 ff46 	bl	8009648 <pbuf_free>
 80107bc:	e001      	b.n	80107c2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80107be:	23ff      	movs	r3, #255	; 0xff
 80107c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80107c2:	69bb      	ldr	r3, [r7, #24]
 80107c4:	799b      	ldrb	r3, [r3, #6]
 80107c6:	2bff      	cmp	r3, #255	; 0xff
 80107c8:	d005      	beq.n	80107d6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	799b      	ldrb	r3, [r3, #6]
 80107ce:	3301      	adds	r3, #1
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	799b      	ldrb	r3, [r3, #6]
 80107da:	2b09      	cmp	r3, #9
 80107dc:	d80a      	bhi.n	80107f4 <dhcp_renew+0x100>
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	799b      	ldrb	r3, [r3, #6]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	461a      	mov	r2, r3
 80107e6:	0152      	lsls	r2, r2, #5
 80107e8:	1ad2      	subs	r2, r2, r3
 80107ea:	0092      	lsls	r2, r2, #2
 80107ec:	4413      	add	r3, r2
 80107ee:	011b      	lsls	r3, r3, #4
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	e001      	b.n	80107f8 <dhcp_renew+0x104>
 80107f4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80107f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80107fa:	89fb      	ldrh	r3, [r7, #14]
 80107fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010800:	4a09      	ldr	r2, [pc, #36]	; (8010828 <dhcp_renew+0x134>)
 8010802:	fb82 1203 	smull	r1, r2, r2, r3
 8010806:	1152      	asrs	r2, r2, #5
 8010808:	17db      	asrs	r3, r3, #31
 801080a:	1ad3      	subs	r3, r2, r3
 801080c:	b29a      	uxth	r2, r3
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010812:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010816:	4618      	mov	r0, r3
 8010818:	3720      	adds	r7, #32
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	bf00      	nop
 8010820:	20000044 	.word	0x20000044
 8010824:	2000af48 	.word	0x2000af48
 8010828:	10624dd3 	.word	0x10624dd3

0801082c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b08a      	sub	sp, #40	; 0x28
 8010830:	af02      	add	r7, sp, #8
 8010832:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010838:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801083a:	2104      	movs	r1, #4
 801083c:	69b8      	ldr	r0, [r7, #24]
 801083e:	f000 f9e1 	bl	8010c04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010842:	f107 030c 	add.w	r3, r7, #12
 8010846:	2203      	movs	r2, #3
 8010848:	69b9      	ldr	r1, [r7, #24]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 fe66 	bl	801151c <dhcp_create_msg>
 8010850:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d04c      	beq.n	80108f2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801085e:	89b8      	ldrh	r0, [r7, #12]
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010866:	2302      	movs	r3, #2
 8010868:	2239      	movs	r2, #57	; 0x39
 801086a:	f000 f9e5 	bl	8010c38 <dhcp_option>
 801086e:	4603      	mov	r3, r0
 8010870:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010872:	89b8      	ldrh	r0, [r7, #12]
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801087e:	461a      	mov	r2, r3
 8010880:	f000 fa34 	bl	8010cec <dhcp_option_short>
 8010884:	4603      	mov	r3, r0
 8010886:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010888:	89b8      	ldrh	r0, [r7, #12]
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010890:	2303      	movs	r3, #3
 8010892:	2237      	movs	r2, #55	; 0x37
 8010894:	f000 f9d0 	bl	8010c38 <dhcp_option>
 8010898:	4603      	mov	r3, r0
 801089a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801089c:	2300      	movs	r3, #0
 801089e:	77bb      	strb	r3, [r7, #30]
 80108a0:	e00e      	b.n	80108c0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80108a2:	89b8      	ldrh	r0, [r7, #12]
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108aa:	7fbb      	ldrb	r3, [r7, #30]
 80108ac:	4a29      	ldr	r2, [pc, #164]	; (8010954 <dhcp_rebind+0x128>)
 80108ae:	5cd3      	ldrb	r3, [r2, r3]
 80108b0:	461a      	mov	r2, r3
 80108b2:	f000 f9f5 	bl	8010ca0 <dhcp_option_byte>
 80108b6:	4603      	mov	r3, r0
 80108b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108ba:	7fbb      	ldrb	r3, [r7, #30]
 80108bc:	3301      	adds	r3, #1
 80108be:	77bb      	strb	r3, [r7, #30]
 80108c0:	7fbb      	ldrb	r3, [r7, #30]
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d9ed      	bls.n	80108a2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80108c6:	89b8      	ldrh	r0, [r7, #12]
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	33f0      	adds	r3, #240	; 0xf0
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	4619      	mov	r1, r3
 80108d0:	f000 fefa 	bl	80116c8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80108d4:	4b20      	ldr	r3, [pc, #128]	; (8010958 <dhcp_rebind+0x12c>)
 80108d6:	6818      	ldr	r0, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	9300      	str	r3, [sp, #0]
 80108dc:	2343      	movs	r3, #67	; 0x43
 80108de:	4a1f      	ldr	r2, [pc, #124]	; (801095c <dhcp_rebind+0x130>)
 80108e0:	6979      	ldr	r1, [r7, #20]
 80108e2:	f7fe fdb7 	bl	800f454 <udp_sendto_if>
 80108e6:	4603      	mov	r3, r0
 80108e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80108ea:	6978      	ldr	r0, [r7, #20]
 80108ec:	f7f8 feac 	bl	8009648 <pbuf_free>
 80108f0:	e001      	b.n	80108f6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80108f2:	23ff      	movs	r3, #255	; 0xff
 80108f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	799b      	ldrb	r3, [r3, #6]
 80108fa:	2bff      	cmp	r3, #255	; 0xff
 80108fc:	d005      	beq.n	801090a <dhcp_rebind+0xde>
    dhcp->tries++;
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	799b      	ldrb	r3, [r3, #6]
 8010902:	3301      	adds	r3, #1
 8010904:	b2da      	uxtb	r2, r3
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801090a:	69bb      	ldr	r3, [r7, #24]
 801090c:	799b      	ldrb	r3, [r3, #6]
 801090e:	2b09      	cmp	r3, #9
 8010910:	d80a      	bhi.n	8010928 <dhcp_rebind+0xfc>
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	799b      	ldrb	r3, [r3, #6]
 8010916:	b29b      	uxth	r3, r3
 8010918:	461a      	mov	r2, r3
 801091a:	0152      	lsls	r2, r2, #5
 801091c:	1ad2      	subs	r2, r2, r3
 801091e:	0092      	lsls	r2, r2, #2
 8010920:	4413      	add	r3, r2
 8010922:	00db      	lsls	r3, r3, #3
 8010924:	b29b      	uxth	r3, r3
 8010926:	e001      	b.n	801092c <dhcp_rebind+0x100>
 8010928:	f242 7310 	movw	r3, #10000	; 0x2710
 801092c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801092e:	89fb      	ldrh	r3, [r7, #14]
 8010930:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010934:	4a0a      	ldr	r2, [pc, #40]	; (8010960 <dhcp_rebind+0x134>)
 8010936:	fb82 1203 	smull	r1, r2, r2, r3
 801093a:	1152      	asrs	r2, r2, #5
 801093c:	17db      	asrs	r3, r3, #31
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	b29a      	uxth	r2, r3
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010946:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3720      	adds	r7, #32
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	20000044 	.word	0x20000044
 8010958:	2000af48 	.word	0x2000af48
 801095c:	0801a754 	.word	0x0801a754
 8010960:	10624dd3 	.word	0x10624dd3

08010964 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010964:	b5b0      	push	{r4, r5, r7, lr}
 8010966:	b08a      	sub	sp, #40	; 0x28
 8010968:	af02      	add	r7, sp, #8
 801096a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010970:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010972:	2103      	movs	r1, #3
 8010974:	69b8      	ldr	r0, [r7, #24]
 8010976:	f000 f945 	bl	8010c04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801097a:	f107 030c 	add.w	r3, r7, #12
 801097e:	2203      	movs	r2, #3
 8010980:	69b9      	ldr	r1, [r7, #24]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fdca 	bl	801151c <dhcp_create_msg>
 8010988:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d066      	beq.n	8010a5e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010996:	89b8      	ldrh	r0, [r7, #12]
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801099e:	2302      	movs	r3, #2
 80109a0:	2239      	movs	r2, #57	; 0x39
 80109a2:	f000 f949 	bl	8010c38 <dhcp_option>
 80109a6:	4603      	mov	r3, r0
 80109a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80109aa:	89b8      	ldrh	r0, [r7, #12]
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	33f0      	adds	r3, #240	; 0xf0
 80109b0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80109b4:	4619      	mov	r1, r3
 80109b6:	f000 f999 	bl	8010cec <dhcp_option_short>
 80109ba:	4603      	mov	r3, r0
 80109bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80109be:	89b8      	ldrh	r0, [r7, #12]
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80109c6:	2304      	movs	r3, #4
 80109c8:	2232      	movs	r2, #50	; 0x32
 80109ca:	f000 f935 	bl	8010c38 <dhcp_option>
 80109ce:	4603      	mov	r3, r0
 80109d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80109d2:	89bc      	ldrh	r4, [r7, #12]
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	69db      	ldr	r3, [r3, #28]
 80109de:	4618      	mov	r0, r3
 80109e0:	f7f7 fadd 	bl	8007f9e <lwip_htonl>
 80109e4:	4603      	mov	r3, r0
 80109e6:	461a      	mov	r2, r3
 80109e8:	4629      	mov	r1, r5
 80109ea:	4620      	mov	r0, r4
 80109ec:	f000 f9b0 	bl	8010d50 <dhcp_option_long>
 80109f0:	4603      	mov	r3, r0
 80109f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80109f4:	89b8      	ldrh	r0, [r7, #12]
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80109fc:	2303      	movs	r3, #3
 80109fe:	2237      	movs	r2, #55	; 0x37
 8010a00:	f000 f91a 	bl	8010c38 <dhcp_option>
 8010a04:	4603      	mov	r3, r0
 8010a06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a08:	2300      	movs	r3, #0
 8010a0a:	77bb      	strb	r3, [r7, #30]
 8010a0c:	e00e      	b.n	8010a2c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010a0e:	89b8      	ldrh	r0, [r7, #12]
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a16:	7fbb      	ldrb	r3, [r7, #30]
 8010a18:	4a29      	ldr	r2, [pc, #164]	; (8010ac0 <dhcp_reboot+0x15c>)
 8010a1a:	5cd3      	ldrb	r3, [r2, r3]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	f000 f93f 	bl	8010ca0 <dhcp_option_byte>
 8010a22:	4603      	mov	r3, r0
 8010a24:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a26:	7fbb      	ldrb	r3, [r7, #30]
 8010a28:	3301      	adds	r3, #1
 8010a2a:	77bb      	strb	r3, [r7, #30]
 8010a2c:	7fbb      	ldrb	r3, [r7, #30]
 8010a2e:	2b02      	cmp	r3, #2
 8010a30:	d9ed      	bls.n	8010a0e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010a32:	89b8      	ldrh	r0, [r7, #12]
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	33f0      	adds	r3, #240	; 0xf0
 8010a38:	697a      	ldr	r2, [r7, #20]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	f000 fe44 	bl	80116c8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010a40:	4b20      	ldr	r3, [pc, #128]	; (8010ac4 <dhcp_reboot+0x160>)
 8010a42:	6818      	ldr	r0, [r3, #0]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	9300      	str	r3, [sp, #0]
 8010a48:	2343      	movs	r3, #67	; 0x43
 8010a4a:	4a1f      	ldr	r2, [pc, #124]	; (8010ac8 <dhcp_reboot+0x164>)
 8010a4c:	6979      	ldr	r1, [r7, #20]
 8010a4e:	f7fe fd01 	bl	800f454 <udp_sendto_if>
 8010a52:	4603      	mov	r3, r0
 8010a54:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010a56:	6978      	ldr	r0, [r7, #20]
 8010a58:	f7f8 fdf6 	bl	8009648 <pbuf_free>
 8010a5c:	e001      	b.n	8010a62 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010a5e:	23ff      	movs	r3, #255	; 0xff
 8010a60:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	799b      	ldrb	r3, [r3, #6]
 8010a66:	2bff      	cmp	r3, #255	; 0xff
 8010a68:	d005      	beq.n	8010a76 <dhcp_reboot+0x112>
    dhcp->tries++;
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	799b      	ldrb	r3, [r3, #6]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	b2da      	uxtb	r2, r3
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	799b      	ldrb	r3, [r3, #6]
 8010a7a:	2b09      	cmp	r3, #9
 8010a7c:	d80a      	bhi.n	8010a94 <dhcp_reboot+0x130>
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	799b      	ldrb	r3, [r3, #6]
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	461a      	mov	r2, r3
 8010a86:	0152      	lsls	r2, r2, #5
 8010a88:	1ad2      	subs	r2, r2, r3
 8010a8a:	0092      	lsls	r2, r2, #2
 8010a8c:	4413      	add	r3, r2
 8010a8e:	00db      	lsls	r3, r3, #3
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	e001      	b.n	8010a98 <dhcp_reboot+0x134>
 8010a94:	f242 7310 	movw	r3, #10000	; 0x2710
 8010a98:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010a9a:	89fb      	ldrh	r3, [r7, #14]
 8010a9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010aa0:	4a0a      	ldr	r2, [pc, #40]	; (8010acc <dhcp_reboot+0x168>)
 8010aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8010aa6:	1152      	asrs	r2, r2, #5
 8010aa8:	17db      	asrs	r3, r3, #31
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010ab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3720      	adds	r7, #32
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bdb0      	pop	{r4, r5, r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	20000044 	.word	0x20000044
 8010ac4:	2000af48 	.word	0x2000af48
 8010ac8:	0801a754 	.word	0x0801a754
 8010acc:	10624dd3 	.word	0x10624dd3

08010ad0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010ad0:	b5b0      	push	{r4, r5, r7, lr}
 8010ad2:	b08a      	sub	sp, #40	; 0x28
 8010ad4:	af02      	add	r7, sp, #8
 8010ad6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010adc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f000 8084 	beq.w	8010bee <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	795b      	ldrb	r3, [r3, #5]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	f000 8081 	beq.w	8010bf2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	699b      	ldr	r3, [r3, #24]
 8010af4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	2200      	movs	r2, #0
 8010afa:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	2200      	movs	r2, #0
 8010b00:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	2200      	movs	r2, #0
 8010b06:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	2200      	movs	r2, #0
 8010b12:	631a      	str	r2, [r3, #48]	; 0x30
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	2200      	movs	r2, #0
 8010b28:	829a      	strh	r2, [r3, #20]
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	8a9a      	ldrh	r2, [r3, #20]
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	825a      	strh	r2, [r3, #18]
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	8a5a      	ldrh	r2, [r3, #18]
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	821a      	strh	r2, [r3, #16]
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	8a1a      	ldrh	r2, [r3, #16]
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 fdee 	bl	8011724 <dhcp_supplied_address>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d03b      	beq.n	8010bc6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010b4e:	f107 030e 	add.w	r3, r7, #14
 8010b52:	2207      	movs	r2, #7
 8010b54:	69f9      	ldr	r1, [r7, #28]
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f000 fce0 	bl	801151c <dhcp_create_msg>
 8010b5c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d030      	beq.n	8010bc6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010b6a:	89f8      	ldrh	r0, [r7, #14]
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010b72:	2304      	movs	r3, #4
 8010b74:	2236      	movs	r2, #54	; 0x36
 8010b76:	f000 f85f 	bl	8010c38 <dhcp_option>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010b7e:	89fc      	ldrh	r4, [r7, #14]
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7f7 fa08 	bl	8007f9e <lwip_htonl>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	461a      	mov	r2, r3
 8010b92:	4629      	mov	r1, r5
 8010b94:	4620      	mov	r0, r4
 8010b96:	f000 f8db 	bl	8010d50 <dhcp_option_long>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010b9e:	89f8      	ldrh	r0, [r7, #14]
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	33f0      	adds	r3, #240	; 0xf0
 8010ba4:	69ba      	ldr	r2, [r7, #24]
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	f000 fd8e 	bl	80116c8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010bac:	4b13      	ldr	r3, [pc, #76]	; (8010bfc <dhcp_release_and_stop+0x12c>)
 8010bae:	6818      	ldr	r0, [r3, #0]
 8010bb0:	f107 0210 	add.w	r2, r7, #16
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	2343      	movs	r3, #67	; 0x43
 8010bba:	69b9      	ldr	r1, [r7, #24]
 8010bbc:	f7fe fc4a 	bl	800f454 <udp_sendto_if>
      pbuf_free(p_out);
 8010bc0:	69b8      	ldr	r0, [r7, #24]
 8010bc2:	f7f8 fd41 	bl	8009648 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010bc6:	4b0e      	ldr	r3, [pc, #56]	; (8010c00 <dhcp_release_and_stop+0x130>)
 8010bc8:	4a0d      	ldr	r2, [pc, #52]	; (8010c00 <dhcp_release_and_stop+0x130>)
 8010bca:	490d      	ldr	r1, [pc, #52]	; (8010c00 <dhcp_release_and_stop+0x130>)
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7f8 f85b 	bl	8008c88 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	69f8      	ldr	r0, [r7, #28]
 8010bd6:	f000 f815 	bl	8010c04 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	791b      	ldrb	r3, [r3, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d008      	beq.n	8010bf4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010be2:	f7fe ff83 	bl	800faec <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	2200      	movs	r2, #0
 8010bea:	711a      	strb	r2, [r3, #4]
 8010bec:	e002      	b.n	8010bf4 <dhcp_release_and_stop+0x124>
    return;
 8010bee:	bf00      	nop
 8010bf0:	e000      	b.n	8010bf4 <dhcp_release_and_stop+0x124>
    return;
 8010bf2:	bf00      	nop
  }
}
 8010bf4:	3720      	adds	r7, #32
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	2000af48 	.word	0x2000af48
 8010c00:	0801a750 	.word	0x0801a750

08010c04 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	795b      	ldrb	r3, [r3, #5]
 8010c14:	78fa      	ldrb	r2, [r7, #3]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d008      	beq.n	8010c2c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	78fa      	ldrb	r2, [r7, #3]
 8010c1e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2200      	movs	r2, #0
 8010c24:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	811a      	strh	r2, [r3, #8]
  }
}
 8010c2c:	bf00      	nop
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6039      	str	r1, [r7, #0]
 8010c40:	4611      	mov	r1, r2
 8010c42:	461a      	mov	r2, r3
 8010c44:	4603      	mov	r3, r0
 8010c46:	80fb      	strh	r3, [r7, #6]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	717b      	strb	r3, [r7, #5]
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010c50:	88fa      	ldrh	r2, [r7, #6]
 8010c52:	793b      	ldrb	r3, [r7, #4]
 8010c54:	4413      	add	r3, r2
 8010c56:	3302      	adds	r3, #2
 8010c58:	2b44      	cmp	r3, #68	; 0x44
 8010c5a:	d906      	bls.n	8010c6a <dhcp_option+0x32>
 8010c5c:	4b0d      	ldr	r3, [pc, #52]	; (8010c94 <dhcp_option+0x5c>)
 8010c5e:	f240 529a 	movw	r2, #1434	; 0x59a
 8010c62:	490d      	ldr	r1, [pc, #52]	; (8010c98 <dhcp_option+0x60>)
 8010c64:	480d      	ldr	r0, [pc, #52]	; (8010c9c <dhcp_option+0x64>)
 8010c66:	f003 f8cf 	bl	8013e08 <iprintf>
  options[options_out_len++] = option_type;
 8010c6a:	88fb      	ldrh	r3, [r7, #6]
 8010c6c:	1c5a      	adds	r2, r3, #1
 8010c6e:	80fa      	strh	r2, [r7, #6]
 8010c70:	461a      	mov	r2, r3
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	4413      	add	r3, r2
 8010c76:	797a      	ldrb	r2, [r7, #5]
 8010c78:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010c7a:	88fb      	ldrh	r3, [r7, #6]
 8010c7c:	1c5a      	adds	r2, r3, #1
 8010c7e:	80fa      	strh	r2, [r7, #6]
 8010c80:	461a      	mov	r2, r3
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	4413      	add	r3, r2
 8010c86:	793a      	ldrb	r2, [r7, #4]
 8010c88:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010c8a:	88fb      	ldrh	r3, [r7, #6]
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	080176c0 	.word	0x080176c0
 8010c98:	08017854 	.word	0x08017854
 8010c9c:	08017720 	.word	0x08017720

08010ca0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	6039      	str	r1, [r7, #0]
 8010caa:	80fb      	strh	r3, [r7, #6]
 8010cac:	4613      	mov	r3, r2
 8010cae:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010cb0:	88fb      	ldrh	r3, [r7, #6]
 8010cb2:	2b43      	cmp	r3, #67	; 0x43
 8010cb4:	d906      	bls.n	8010cc4 <dhcp_option_byte+0x24>
 8010cb6:	4b0a      	ldr	r3, [pc, #40]	; (8010ce0 <dhcp_option_byte+0x40>)
 8010cb8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010cbc:	4909      	ldr	r1, [pc, #36]	; (8010ce4 <dhcp_option_byte+0x44>)
 8010cbe:	480a      	ldr	r0, [pc, #40]	; (8010ce8 <dhcp_option_byte+0x48>)
 8010cc0:	f003 f8a2 	bl	8013e08 <iprintf>
  options[options_out_len++] = value;
 8010cc4:	88fb      	ldrh	r3, [r7, #6]
 8010cc6:	1c5a      	adds	r2, r3, #1
 8010cc8:	80fa      	strh	r2, [r7, #6]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	4413      	add	r3, r2
 8010cd0:	797a      	ldrb	r2, [r7, #5]
 8010cd2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010cd4:	88fb      	ldrh	r3, [r7, #6]
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3708      	adds	r7, #8
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	080176c0 	.word	0x080176c0
 8010ce4:	08017898 	.word	0x08017898
 8010ce8:	08017720 	.word	0x08017720

08010cec <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	6039      	str	r1, [r7, #0]
 8010cf6:	80fb      	strh	r3, [r7, #6]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010cfc:	88fb      	ldrh	r3, [r7, #6]
 8010cfe:	3302      	adds	r3, #2
 8010d00:	2b44      	cmp	r3, #68	; 0x44
 8010d02:	d906      	bls.n	8010d12 <dhcp_option_short+0x26>
 8010d04:	4b0f      	ldr	r3, [pc, #60]	; (8010d44 <dhcp_option_short+0x58>)
 8010d06:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010d0a:	490f      	ldr	r1, [pc, #60]	; (8010d48 <dhcp_option_short+0x5c>)
 8010d0c:	480f      	ldr	r0, [pc, #60]	; (8010d4c <dhcp_option_short+0x60>)
 8010d0e:	f003 f87b 	bl	8013e08 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010d12:	88bb      	ldrh	r3, [r7, #4]
 8010d14:	0a1b      	lsrs	r3, r3, #8
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	88fb      	ldrh	r3, [r7, #6]
 8010d1a:	1c59      	adds	r1, r3, #1
 8010d1c:	80f9      	strh	r1, [r7, #6]
 8010d1e:	4619      	mov	r1, r3
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	440b      	add	r3, r1
 8010d24:	b2d2      	uxtb	r2, r2
 8010d26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010d28:	88fb      	ldrh	r3, [r7, #6]
 8010d2a:	1c5a      	adds	r2, r3, #1
 8010d2c:	80fa      	strh	r2, [r7, #6]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	4413      	add	r3, r2
 8010d34:	88ba      	ldrh	r2, [r7, #4]
 8010d36:	b2d2      	uxtb	r2, r2
 8010d38:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d3a:	88fb      	ldrh	r3, [r7, #6]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	080176c0 	.word	0x080176c0
 8010d48:	080178d0 	.word	0x080178d0
 8010d4c:	08017720 	.word	0x08017720

08010d50 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	4603      	mov	r3, r0
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
 8010d5c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010d5e:	89fb      	ldrh	r3, [r7, #14]
 8010d60:	3304      	adds	r3, #4
 8010d62:	2b44      	cmp	r3, #68	; 0x44
 8010d64:	d906      	bls.n	8010d74 <dhcp_option_long+0x24>
 8010d66:	4b19      	ldr	r3, [pc, #100]	; (8010dcc <dhcp_option_long+0x7c>)
 8010d68:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010d6c:	4918      	ldr	r1, [pc, #96]	; (8010dd0 <dhcp_option_long+0x80>)
 8010d6e:	4819      	ldr	r0, [pc, #100]	; (8010dd4 <dhcp_option_long+0x84>)
 8010d70:	f003 f84a 	bl	8013e08 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	0e1a      	lsrs	r2, r3, #24
 8010d78:	89fb      	ldrh	r3, [r7, #14]
 8010d7a:	1c59      	adds	r1, r3, #1
 8010d7c:	81f9      	strh	r1, [r7, #14]
 8010d7e:	4619      	mov	r1, r3
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	440b      	add	r3, r1
 8010d84:	b2d2      	uxtb	r2, r2
 8010d86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	0c1a      	lsrs	r2, r3, #16
 8010d8c:	89fb      	ldrh	r3, [r7, #14]
 8010d8e:	1c59      	adds	r1, r3, #1
 8010d90:	81f9      	strh	r1, [r7, #14]
 8010d92:	4619      	mov	r1, r3
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	440b      	add	r3, r1
 8010d98:	b2d2      	uxtb	r2, r2
 8010d9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	0a1a      	lsrs	r2, r3, #8
 8010da0:	89fb      	ldrh	r3, [r7, #14]
 8010da2:	1c59      	adds	r1, r3, #1
 8010da4:	81f9      	strh	r1, [r7, #14]
 8010da6:	4619      	mov	r1, r3
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	440b      	add	r3, r1
 8010dac:	b2d2      	uxtb	r2, r2
 8010dae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010db0:	89fb      	ldrh	r3, [r7, #14]
 8010db2:	1c5a      	adds	r2, r3, #1
 8010db4:	81fa      	strh	r2, [r7, #14]
 8010db6:	461a      	mov	r2, r3
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	4413      	add	r3, r2
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	b2d2      	uxtb	r2, r2
 8010dc0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3710      	adds	r7, #16
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	080176c0 	.word	0x080176c0
 8010dd0:	0801790c 	.word	0x0801790c
 8010dd4:	08017720 	.word	0x08017720

08010dd8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b090      	sub	sp, #64	; 0x40
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010de2:	2300      	movs	r3, #0
 8010de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010dea:	2208      	movs	r2, #8
 8010dec:	2100      	movs	r1, #0
 8010dee:	48b5      	ldr	r0, [pc, #724]	; (80110c4 <dhcp_parse_reply+0x2ec>)
 8010df0:	f003 f802 	bl	8013df8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	895b      	ldrh	r3, [r3, #10]
 8010df8:	2b2b      	cmp	r3, #43	; 0x2b
 8010dfa:	d802      	bhi.n	8010e02 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010dfc:	f06f 0301 	mvn.w	r3, #1
 8010e00:	e2a7      	b.n	8011352 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010e08:	23f0      	movs	r3, #240	; 0xf0
 8010e0a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	891b      	ldrh	r3, [r3, #8]
 8010e10:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e16:	e00c      	b.n	8010e32 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1a:	895b      	ldrh	r3, [r3, #10]
 8010e1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e1e:	1ad3      	subs	r3, r2, r3
 8010e20:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e24:	895b      	ldrh	r3, [r3, #10]
 8010e26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d004      	beq.n	8010e42 <dhcp_parse_reply+0x6a>
 8010e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3a:	895b      	ldrh	r3, [r3, #10]
 8010e3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d2ea      	bcs.n	8010e18 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d102      	bne.n	8010e4e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010e48:	f06f 0301 	mvn.w	r3, #1
 8010e4c:	e281      	b.n	8011352 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010e4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e50:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010e52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010e54:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010e5c:	e239      	b.n	80112d2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010e5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e62:	4413      	add	r3, r2
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e72:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010e74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e76:	3302      	adds	r3, #2
 8010e78:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010e7a:	8bfa      	ldrh	r2, [r7, #30]
 8010e7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d202      	bcs.n	8010e88 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010e82:	f06f 0301 	mvn.w	r3, #1
 8010e86:	e264      	b.n	8011352 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010e88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e8e:	8952      	ldrh	r2, [r2, #10]
 8010e90:	4293      	cmp	r3, r2
 8010e92:	da07      	bge.n	8010ea4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010e94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010e96:	3301      	adds	r3, #1
 8010e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e9a:	4413      	add	r3, r2
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ea2:	e00b      	b.n	8010ebc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d004      	beq.n	8010eb6 <dhcp_parse_reply+0xde>
 8010eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	e000      	b.n	8010eb8 <dhcp_parse_reply+0xe0>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010ec4:	7dfb      	ldrb	r3, [r7, #23]
 8010ec6:	2b3b      	cmp	r3, #59	; 0x3b
 8010ec8:	f200 812c 	bhi.w	8011124 <dhcp_parse_reply+0x34c>
 8010ecc:	a201      	add	r2, pc, #4	; (adr r2, 8010ed4 <dhcp_parse_reply+0xfc>)
 8010ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed2:	bf00      	nop
 8010ed4:	08010fc5 	.word	0x08010fc5
 8010ed8:	08010fd5 	.word	0x08010fd5
 8010edc:	08011125 	.word	0x08011125
 8010ee0:	08010ff7 	.word	0x08010ff7
 8010ee4:	08011125 	.word	0x08011125
 8010ee8:	08011125 	.word	0x08011125
 8010eec:	08011125 	.word	0x08011125
 8010ef0:	08011125 	.word	0x08011125
 8010ef4:	08011125 	.word	0x08011125
 8010ef8:	08011125 	.word	0x08011125
 8010efc:	08011125 	.word	0x08011125
 8010f00:	08011125 	.word	0x08011125
 8010f04:	08011125 	.word	0x08011125
 8010f08:	08011125 	.word	0x08011125
 8010f0c:	08011125 	.word	0x08011125
 8010f10:	08011125 	.word	0x08011125
 8010f14:	08011125 	.word	0x08011125
 8010f18:	08011125 	.word	0x08011125
 8010f1c:	08011125 	.word	0x08011125
 8010f20:	08011125 	.word	0x08011125
 8010f24:	08011125 	.word	0x08011125
 8010f28:	08011125 	.word	0x08011125
 8010f2c:	08011125 	.word	0x08011125
 8010f30:	08011125 	.word	0x08011125
 8010f34:	08011125 	.word	0x08011125
 8010f38:	08011125 	.word	0x08011125
 8010f3c:	08011125 	.word	0x08011125
 8010f40:	08011125 	.word	0x08011125
 8010f44:	08011125 	.word	0x08011125
 8010f48:	08011125 	.word	0x08011125
 8010f4c:	08011125 	.word	0x08011125
 8010f50:	08011125 	.word	0x08011125
 8010f54:	08011125 	.word	0x08011125
 8010f58:	08011125 	.word	0x08011125
 8010f5c:	08011125 	.word	0x08011125
 8010f60:	08011125 	.word	0x08011125
 8010f64:	08011125 	.word	0x08011125
 8010f68:	08011125 	.word	0x08011125
 8010f6c:	08011125 	.word	0x08011125
 8010f70:	08011125 	.word	0x08011125
 8010f74:	08011125 	.word	0x08011125
 8010f78:	08011125 	.word	0x08011125
 8010f7c:	08011125 	.word	0x08011125
 8010f80:	08011125 	.word	0x08011125
 8010f84:	08011125 	.word	0x08011125
 8010f88:	08011125 	.word	0x08011125
 8010f8c:	08011125 	.word	0x08011125
 8010f90:	08011125 	.word	0x08011125
 8010f94:	08011125 	.word	0x08011125
 8010f98:	08011125 	.word	0x08011125
 8010f9c:	08011125 	.word	0x08011125
 8010fa0:	08011023 	.word	0x08011023
 8010fa4:	08011045 	.word	0x08011045
 8010fa8:	08011081 	.word	0x08011081
 8010fac:	080110a3 	.word	0x080110a3
 8010fb0:	08011125 	.word	0x08011125
 8010fb4:	08011125 	.word	0x08011125
 8010fb8:	08011125 	.word	0x08011125
 8010fbc:	080110e1 	.word	0x080110e1
 8010fc0:	08011103 	.word	0x08011103
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8010fd2:	e0ab      	b.n	801112c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fd8:	2b04      	cmp	r3, #4
 8010fda:	d009      	beq.n	8010ff0 <dhcp_parse_reply+0x218>
 8010fdc:	4b3a      	ldr	r3, [pc, #232]	; (80110c8 <dhcp_parse_reply+0x2f0>)
 8010fde:	f240 622e 	movw	r2, #1582	; 0x62e
 8010fe2:	493a      	ldr	r1, [pc, #232]	; (80110cc <dhcp_parse_reply+0x2f4>)
 8010fe4:	483a      	ldr	r0, [pc, #232]	; (80110d0 <dhcp_parse_reply+0x2f8>)
 8010fe6:	f002 ff0f 	bl	8013e08 <iprintf>
 8010fea:	f06f 0305 	mvn.w	r3, #5
 8010fee:	e1b0      	b.n	8011352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010ff0:	2306      	movs	r3, #6
 8010ff2:	623b      	str	r3, [r7, #32]
        break;
 8010ff4:	e09a      	b.n	801112c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010ff6:	2304      	movs	r3, #4
 8010ff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010ffc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011000:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011004:	429a      	cmp	r2, r3
 8011006:	d209      	bcs.n	801101c <dhcp_parse_reply+0x244>
 8011008:	4b2f      	ldr	r3, [pc, #188]	; (80110c8 <dhcp_parse_reply+0x2f0>)
 801100a:	f240 6233 	movw	r2, #1587	; 0x633
 801100e:	4931      	ldr	r1, [pc, #196]	; (80110d4 <dhcp_parse_reply+0x2fc>)
 8011010:	482f      	ldr	r0, [pc, #188]	; (80110d0 <dhcp_parse_reply+0x2f8>)
 8011012:	f002 fef9 	bl	8013e08 <iprintf>
 8011016:	f06f 0305 	mvn.w	r3, #5
 801101a:	e19a      	b.n	8011352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801101c:	2307      	movs	r3, #7
 801101e:	623b      	str	r3, [r7, #32]
        break;
 8011020:	e084      	b.n	801112c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011026:	2b04      	cmp	r3, #4
 8011028:	d009      	beq.n	801103e <dhcp_parse_reply+0x266>
 801102a:	4b27      	ldr	r3, [pc, #156]	; (80110c8 <dhcp_parse_reply+0x2f0>)
 801102c:	f240 6241 	movw	r2, #1601	; 0x641
 8011030:	4926      	ldr	r1, [pc, #152]	; (80110cc <dhcp_parse_reply+0x2f4>)
 8011032:	4827      	ldr	r0, [pc, #156]	; (80110d0 <dhcp_parse_reply+0x2f8>)
 8011034:	f002 fee8 	bl	8013e08 <iprintf>
 8011038:	f06f 0305 	mvn.w	r3, #5
 801103c:	e189      	b.n	8011352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801103e:	2303      	movs	r3, #3
 8011040:	623b      	str	r3, [r7, #32]
        break;
 8011042:	e073      	b.n	801112c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011048:	2b01      	cmp	r3, #1
 801104a:	d009      	beq.n	8011060 <dhcp_parse_reply+0x288>
 801104c:	4b1e      	ldr	r3, [pc, #120]	; (80110c8 <dhcp_parse_reply+0x2f0>)
 801104e:	f240 624f 	movw	r2, #1615	; 0x64f
 8011052:	4921      	ldr	r1, [pc, #132]	; (80110d8 <dhcp_parse_reply+0x300>)
 8011054:	481e      	ldr	r0, [pc, #120]	; (80110d0 <dhcp_parse_reply+0x2f8>)
 8011056:	f002 fed7 	bl	8013e08 <iprintf>
 801105a:	f06f 0305 	mvn.w	r3, #5
 801105e:	e178      	b.n	8011352 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8011060:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011062:	2bf0      	cmp	r3, #240	; 0xf0
 8011064:	d009      	beq.n	801107a <dhcp_parse_reply+0x2a2>
 8011066:	4b18      	ldr	r3, [pc, #96]	; (80110c8 <dhcp_parse_reply+0x2f0>)
 8011068:	f240 6251 	movw	r2, #1617	; 0x651
 801106c:	491b      	ldr	r1, [pc, #108]	; (80110dc <dhcp_parse_reply+0x304>)
 801106e:	4818      	ldr	r0, [pc, #96]	; (80110d0 <dhcp_parse_reply+0x2f8>)
 8011070:	f002 feca 	bl	8013e08 <iprintf>
 8011074:	f06f 0305 	mvn.w	r3, #5
 8011078:	e16b      	b.n	8011352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801107a:	2300      	movs	r3, #0
 801107c:	623b      	str	r3, [r7, #32]
        break;
 801107e:	e055      	b.n	801112c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011084:	2b01      	cmp	r3, #1
 8011086:	d009      	beq.n	801109c <dhcp_parse_reply+0x2c4>
 8011088:	4b0f      	ldr	r3, [pc, #60]	; (80110c8 <dhcp_parse_reply+0x2f0>)
 801108a:	f240 6255 	movw	r2, #1621	; 0x655
 801108e:	4912      	ldr	r1, [pc, #72]	; (80110d8 <dhcp_parse_reply+0x300>)
 8011090:	480f      	ldr	r0, [pc, #60]	; (80110d0 <dhcp_parse_reply+0x2f8>)
 8011092:	f002 feb9 	bl	8013e08 <iprintf>
 8011096:	f06f 0305 	mvn.w	r3, #5
 801109a:	e15a      	b.n	8011352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801109c:	2301      	movs	r3, #1
 801109e:	623b      	str	r3, [r7, #32]
        break;
 80110a0:	e044      	b.n	801112c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80110a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110a6:	2b04      	cmp	r3, #4
 80110a8:	d009      	beq.n	80110be <dhcp_parse_reply+0x2e6>
 80110aa:	4b07      	ldr	r3, [pc, #28]	; (80110c8 <dhcp_parse_reply+0x2f0>)
 80110ac:	f240 6259 	movw	r2, #1625	; 0x659
 80110b0:	4906      	ldr	r1, [pc, #24]	; (80110cc <dhcp_parse_reply+0x2f4>)
 80110b2:	4807      	ldr	r0, [pc, #28]	; (80110d0 <dhcp_parse_reply+0x2f8>)
 80110b4:	f002 fea8 	bl	8013e08 <iprintf>
 80110b8:	f06f 0305 	mvn.w	r3, #5
 80110bc:	e149      	b.n	8011352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80110be:	2302      	movs	r3, #2
 80110c0:	623b      	str	r3, [r7, #32]
        break;
 80110c2:	e033      	b.n	801112c <dhcp_parse_reply+0x354>
 80110c4:	2000af40 	.word	0x2000af40
 80110c8:	080176c0 	.word	0x080176c0
 80110cc:	08017948 	.word	0x08017948
 80110d0:	08017720 	.word	0x08017720
 80110d4:	08017954 	.word	0x08017954
 80110d8:	08017968 	.word	0x08017968
 80110dc:	08017974 	.word	0x08017974
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80110e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110e4:	2b04      	cmp	r3, #4
 80110e6:	d009      	beq.n	80110fc <dhcp_parse_reply+0x324>
 80110e8:	4b9c      	ldr	r3, [pc, #624]	; (801135c <dhcp_parse_reply+0x584>)
 80110ea:	f240 625d 	movw	r2, #1629	; 0x65d
 80110ee:	499c      	ldr	r1, [pc, #624]	; (8011360 <dhcp_parse_reply+0x588>)
 80110f0:	489c      	ldr	r0, [pc, #624]	; (8011364 <dhcp_parse_reply+0x58c>)
 80110f2:	f002 fe89 	bl	8013e08 <iprintf>
 80110f6:	f06f 0305 	mvn.w	r3, #5
 80110fa:	e12a      	b.n	8011352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80110fc:	2304      	movs	r3, #4
 80110fe:	623b      	str	r3, [r7, #32]
        break;
 8011100:	e014      	b.n	801112c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011106:	2b04      	cmp	r3, #4
 8011108:	d009      	beq.n	801111e <dhcp_parse_reply+0x346>
 801110a:	4b94      	ldr	r3, [pc, #592]	; (801135c <dhcp_parse_reply+0x584>)
 801110c:	f240 6261 	movw	r2, #1633	; 0x661
 8011110:	4993      	ldr	r1, [pc, #588]	; (8011360 <dhcp_parse_reply+0x588>)
 8011112:	4894      	ldr	r0, [pc, #592]	; (8011364 <dhcp_parse_reply+0x58c>)
 8011114:	f002 fe78 	bl	8013e08 <iprintf>
 8011118:	f06f 0305 	mvn.w	r3, #5
 801111c:	e119      	b.n	8011352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801111e:	2305      	movs	r3, #5
 8011120:	623b      	str	r3, [r7, #32]
        break;
 8011122:	e003      	b.n	801112c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8011124:	2300      	movs	r3, #0
 8011126:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801112a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801112c:	7dfb      	ldrb	r3, [r7, #23]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d103      	bne.n	801113a <dhcp_parse_reply+0x362>
      offset++;
 8011132:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011134:	3301      	adds	r3, #1
 8011136:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011138:	e0a1      	b.n	801127e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801113a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801113c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011140:	4413      	add	r3, r2
 8011142:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8011146:	4293      	cmp	r3, r2
 8011148:	dd02      	ble.n	8011150 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801114a:	f06f 0301 	mvn.w	r3, #1
 801114e:	e100      	b.n	8011352 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8011150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011154:	b29a      	uxth	r2, r3
 8011156:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011158:	4413      	add	r3, r2
 801115a:	b29b      	uxth	r3, r3
 801115c:	3302      	adds	r3, #2
 801115e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8011160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011164:	2b00      	cmp	r3, #0
 8011166:	f000 808a 	beq.w	801127e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801116e:	6a3b      	ldr	r3, [r7, #32]
 8011170:	2b00      	cmp	r3, #0
 8011172:	db02      	blt.n	801117a <dhcp_parse_reply+0x3a2>
 8011174:	6a3b      	ldr	r3, [r7, #32]
 8011176:	2b07      	cmp	r3, #7
 8011178:	dd06      	ble.n	8011188 <dhcp_parse_reply+0x3b0>
 801117a:	4b78      	ldr	r3, [pc, #480]	; (801135c <dhcp_parse_reply+0x584>)
 801117c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8011180:	4979      	ldr	r1, [pc, #484]	; (8011368 <dhcp_parse_reply+0x590>)
 8011182:	4878      	ldr	r0, [pc, #480]	; (8011364 <dhcp_parse_reply+0x58c>)
 8011184:	f002 fe40 	bl	8013e08 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011188:	4a78      	ldr	r2, [pc, #480]	; (801136c <dhcp_parse_reply+0x594>)
 801118a:	6a3b      	ldr	r3, [r7, #32]
 801118c:	4413      	add	r3, r2
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d174      	bne.n	801127e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8011194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011198:	2b04      	cmp	r3, #4
 801119a:	bf28      	it	cs
 801119c:	2304      	movcs	r3, #4
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80111a2:	8bfb      	ldrh	r3, [r7, #30]
 80111a4:	8aba      	ldrh	r2, [r7, #20]
 80111a6:	f107 0108 	add.w	r1, r7, #8
 80111aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ac:	f7f8 fc46 	bl	8009a3c <pbuf_copy_partial>
 80111b0:	4603      	mov	r3, r0
 80111b2:	461a      	mov	r2, r3
 80111b4:	8abb      	ldrh	r3, [r7, #20]
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d002      	beq.n	80111c0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80111ba:	f06f 0301 	mvn.w	r3, #1
 80111be:	e0c8      	b.n	8011352 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80111c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111c4:	2b04      	cmp	r3, #4
 80111c6:	d933      	bls.n	8011230 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80111c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111cc:	f003 0303 	and.w	r3, r3, #3
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d009      	beq.n	80111ea <dhcp_parse_reply+0x412>
 80111d6:	4b61      	ldr	r3, [pc, #388]	; (801135c <dhcp_parse_reply+0x584>)
 80111d8:	f240 6281 	movw	r2, #1665	; 0x681
 80111dc:	4964      	ldr	r1, [pc, #400]	; (8011370 <dhcp_parse_reply+0x598>)
 80111de:	4861      	ldr	r0, [pc, #388]	; (8011364 <dhcp_parse_reply+0x58c>)
 80111e0:	f002 fe12 	bl	8013e08 <iprintf>
 80111e4:	f06f 0305 	mvn.w	r3, #5
 80111e8:	e0b3      	b.n	8011352 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80111ea:	4a60      	ldr	r2, [pc, #384]	; (801136c <dhcp_parse_reply+0x594>)
 80111ec:	6a3b      	ldr	r3, [r7, #32]
 80111ee:	4413      	add	r3, r2
 80111f0:	2201      	movs	r2, #1
 80111f2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7f6 fed1 	bl	8007f9e <lwip_htonl>
 80111fc:	4602      	mov	r2, r0
 80111fe:	495d      	ldr	r1, [pc, #372]	; (8011374 <dhcp_parse_reply+0x59c>)
 8011200:	6a3b      	ldr	r3, [r7, #32]
 8011202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801120a:	3b04      	subs	r3, #4
 801120c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011210:	8bfb      	ldrh	r3, [r7, #30]
 8011212:	3304      	adds	r3, #4
 8011214:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8011216:	8a7a      	ldrh	r2, [r7, #18]
 8011218:	8bfb      	ldrh	r3, [r7, #30]
 801121a:	429a      	cmp	r2, r3
 801121c:	d202      	bcs.n	8011224 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801121e:	f06f 0301 	mvn.w	r3, #1
 8011222:	e096      	b.n	8011352 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8011224:	8a7b      	ldrh	r3, [r7, #18]
 8011226:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8011228:	6a3b      	ldr	r3, [r7, #32]
 801122a:	3301      	adds	r3, #1
 801122c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801122e:	e79e      	b.n	801116e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8011230:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011234:	2b04      	cmp	r3, #4
 8011236:	d106      	bne.n	8011246 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	4618      	mov	r0, r3
 801123c:	f7f6 feaf 	bl	8007f9e <lwip_htonl>
 8011240:	4603      	mov	r3, r0
 8011242:	60bb      	str	r3, [r7, #8]
 8011244:	e011      	b.n	801126a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8011246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801124a:	2b01      	cmp	r3, #1
 801124c:	d009      	beq.n	8011262 <dhcp_parse_reply+0x48a>
 801124e:	4b43      	ldr	r3, [pc, #268]	; (801135c <dhcp_parse_reply+0x584>)
 8011250:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8011254:	4948      	ldr	r1, [pc, #288]	; (8011378 <dhcp_parse_reply+0x5a0>)
 8011256:	4843      	ldr	r0, [pc, #268]	; (8011364 <dhcp_parse_reply+0x58c>)
 8011258:	f002 fdd6 	bl	8013e08 <iprintf>
 801125c:	f06f 0305 	mvn.w	r3, #5
 8011260:	e077      	b.n	8011352 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8011262:	f107 0308 	add.w	r3, r7, #8
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801126a:	4a40      	ldr	r2, [pc, #256]	; (801136c <dhcp_parse_reply+0x594>)
 801126c:	6a3b      	ldr	r3, [r7, #32]
 801126e:	4413      	add	r3, r2
 8011270:	2201      	movs	r2, #1
 8011272:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011274:	68ba      	ldr	r2, [r7, #8]
 8011276:	493f      	ldr	r1, [pc, #252]	; (8011374 <dhcp_parse_reply+0x59c>)
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011280:	895b      	ldrh	r3, [r3, #10]
 8011282:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011284:	429a      	cmp	r2, r3
 8011286:	d324      	bcc.n	80112d2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8011288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128a:	895b      	ldrh	r3, [r3, #10]
 801128c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801128e:	1ad3      	subs	r3, r2, r3
 8011290:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8011292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011294:	895b      	ldrh	r3, [r3, #10]
 8011296:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011298:	1ad3      	subs	r3, r2, r3
 801129a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801129c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801129e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d213      	bcs.n	80112cc <dhcp_parse_reply+0x4f4>
        q = q->next;
 80112a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80112aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d109      	bne.n	80112c4 <dhcp_parse_reply+0x4ec>
 80112b0:	4b2a      	ldr	r3, [pc, #168]	; (801135c <dhcp_parse_reply+0x584>)
 80112b2:	f240 629d 	movw	r2, #1693	; 0x69d
 80112b6:	4931      	ldr	r1, [pc, #196]	; (801137c <dhcp_parse_reply+0x5a4>)
 80112b8:	482a      	ldr	r0, [pc, #168]	; (8011364 <dhcp_parse_reply+0x58c>)
 80112ba:	f002 fda5 	bl	8013e08 <iprintf>
 80112be:	f06f 0305 	mvn.w	r3, #5
 80112c2:	e046      	b.n	8011352 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80112c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112ca:	e002      	b.n	80112d2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80112cc:	f06f 0301 	mvn.w	r3, #1
 80112d0:	e03f      	b.n	8011352 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80112d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d00a      	beq.n	80112ee <dhcp_parse_reply+0x516>
 80112d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80112dc:	429a      	cmp	r2, r3
 80112de:	d206      	bcs.n	80112ee <dhcp_parse_reply+0x516>
 80112e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80112e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80112e4:	4413      	add	r3, r2
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	2bff      	cmp	r3, #255	; 0xff
 80112ea:	f47f adb8 	bne.w	8010e5e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80112ee:	4b1f      	ldr	r3, [pc, #124]	; (801136c <dhcp_parse_reply+0x594>)
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d018      	beq.n	8011328 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80112f6:	4b1f      	ldr	r3, [pc, #124]	; (8011374 <dhcp_parse_reply+0x59c>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80112fc:	4b1b      	ldr	r3, [pc, #108]	; (801136c <dhcp_parse_reply+0x594>)
 80112fe:	2200      	movs	r2, #0
 8011300:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2b01      	cmp	r3, #1
 8011306:	d102      	bne.n	801130e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8011308:	2301      	movs	r3, #1
 801130a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801130c:	e00c      	b.n	8011328 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2b02      	cmp	r3, #2
 8011312:	d102      	bne.n	801131a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8011314:	2301      	movs	r3, #1
 8011316:	62bb      	str	r3, [r7, #40]	; 0x28
 8011318:	e006      	b.n	8011328 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2b03      	cmp	r3, #3
 801131e:	d103      	bne.n	8011328 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8011320:	2301      	movs	r3, #1
 8011322:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8011324:	2301      	movs	r3, #1
 8011326:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8011328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132a:	2b00      	cmp	r3, #0
 801132c:	d006      	beq.n	801133c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801132e:	2300      	movs	r3, #0
 8011330:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8011332:	236c      	movs	r3, #108	; 0x6c
 8011334:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8011336:	23ec      	movs	r3, #236	; 0xec
 8011338:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801133a:	e56a      	b.n	8010e12 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133e:	2b00      	cmp	r3, #0
 8011340:	d006      	beq.n	8011350 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8011342:	2300      	movs	r3, #0
 8011344:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8011346:	232c      	movs	r3, #44	; 0x2c
 8011348:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801134a:	236c      	movs	r3, #108	; 0x6c
 801134c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801134e:	e560      	b.n	8010e12 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3740      	adds	r7, #64	; 0x40
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	080176c0 	.word	0x080176c0
 8011360:	08017948 	.word	0x08017948
 8011364:	08017720 	.word	0x08017720
 8011368:	0801798c 	.word	0x0801798c
 801136c:	2000af40 	.word	0x2000af40
 8011370:	080179a0 	.word	0x080179a0
 8011374:	2000af20 	.word	0x2000af20
 8011378:	080179b8 	.word	0x080179b8
 801137c:	080179cc 	.word	0x080179cc

08011380 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b08a      	sub	sp, #40	; 0x28
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	607a      	str	r2, [r7, #4]
 801138c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801138e:	4b60      	ldr	r3, [pc, #384]	; (8011510 <dhcp_recv+0x190>)
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011394:	6a3b      	ldr	r3, [r7, #32]
 8011396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011398:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	f000 809d 	beq.w	80114e2 <dhcp_recv+0x162>
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	791b      	ldrb	r3, [r3, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f000 8098 	beq.w	80114e2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	895b      	ldrh	r3, [r3, #10]
 80113b6:	2b2b      	cmp	r3, #43	; 0x2b
 80113b8:	f240 8095 	bls.w	80114e6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	f040 8092 	bne.w	80114ea <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80113c6:	2300      	movs	r3, #0
 80113c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80113cc:	e012      	b.n	80113f4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80113ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113d2:	6a3a      	ldr	r2, [r7, #32]
 80113d4:	4413      	add	r3, r2
 80113d6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80113da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113de:	69b9      	ldr	r1, [r7, #24]
 80113e0:	440b      	add	r3, r1
 80113e2:	7f1b      	ldrb	r3, [r3, #28]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	f040 8082 	bne.w	80114ee <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80113ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113ee:	3301      	adds	r3, #1
 80113f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80113f4:	6a3b      	ldr	r3, [r7, #32]
 80113f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80113fe:	429a      	cmp	r2, r3
 8011400:	d203      	bcs.n	801140a <dhcp_recv+0x8a>
 8011402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011406:	2b05      	cmp	r3, #5
 8011408:	d9e1      	bls.n	80113ce <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	4618      	mov	r0, r3
 8011410:	f7f6 fdc5 	bl	8007f9e <lwip_htonl>
 8011414:	4602      	mov	r2, r0
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	429a      	cmp	r2, r3
 801141c:	d169      	bne.n	80114f2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801141e:	69f9      	ldr	r1, [r7, #28]
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f7ff fcd9 	bl	8010dd8 <dhcp_parse_reply>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d164      	bne.n	80114f6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801142c:	4b39      	ldr	r3, [pc, #228]	; (8011514 <dhcp_recv+0x194>)
 801142e:	785b      	ldrb	r3, [r3, #1]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d062      	beq.n	80114fa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801143a:	4b37      	ldr	r3, [pc, #220]	; (8011518 <dhcp_recv+0x198>)
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011440:	7cfb      	ldrb	r3, [r7, #19]
 8011442:	2b05      	cmp	r3, #5
 8011444:	d12a      	bne.n	801149c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	795b      	ldrb	r3, [r3, #5]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d112      	bne.n	8011474 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801144e:	6979      	ldr	r1, [r7, #20]
 8011450:	6a38      	ldr	r0, [r7, #32]
 8011452:	f7fe fe17 	bl	8010084 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8011456:	6a3b      	ldr	r3, [r7, #32]
 8011458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801145c:	f003 0308 	and.w	r3, r3, #8
 8011460:	2b00      	cmp	r3, #0
 8011462:	d003      	beq.n	801146c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8011464:	6a38      	ldr	r0, [r7, #32]
 8011466:	f7fe fb85 	bl	800fb74 <dhcp_check>
 801146a:	e049      	b.n	8011500 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801146c:	6a38      	ldr	r0, [r7, #32]
 801146e:	f7ff f867 	bl	8010540 <dhcp_bind>
 8011472:	e045      	b.n	8011500 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	795b      	ldrb	r3, [r3, #5]
 8011478:	2b03      	cmp	r3, #3
 801147a:	d007      	beq.n	801148c <dhcp_recv+0x10c>
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	795b      	ldrb	r3, [r3, #5]
 8011480:	2b04      	cmp	r3, #4
 8011482:	d003      	beq.n	801148c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011488:	2b05      	cmp	r3, #5
 801148a:	d139      	bne.n	8011500 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801148c:	6979      	ldr	r1, [r7, #20]
 801148e:	6a38      	ldr	r0, [r7, #32]
 8011490:	f7fe fdf8 	bl	8010084 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011494:	6a38      	ldr	r0, [r7, #32]
 8011496:	f7ff f853 	bl	8010540 <dhcp_bind>
 801149a:	e031      	b.n	8011500 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801149c:	7cfb      	ldrb	r3, [r7, #19]
 801149e:	2b06      	cmp	r3, #6
 80114a0:	d113      	bne.n	80114ca <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80114a6:	2b03      	cmp	r3, #3
 80114a8:	d00b      	beq.n	80114c2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	795b      	ldrb	r3, [r3, #5]
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	d007      	beq.n	80114c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114b6:	2b04      	cmp	r3, #4
 80114b8:	d003      	beq.n	80114c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	795b      	ldrb	r3, [r3, #5]
 80114be:	2b05      	cmp	r3, #5
 80114c0:	d103      	bne.n	80114ca <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80114c2:	6a38      	ldr	r0, [r7, #32]
 80114c4:	f7fe fb3c 	bl	800fb40 <dhcp_handle_nak>
 80114c8:	e01a      	b.n	8011500 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80114ca:	7cfb      	ldrb	r3, [r7, #19]
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	d116      	bne.n	80114fe <dhcp_recv+0x17e>
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	795b      	ldrb	r3, [r3, #5]
 80114d4:	2b06      	cmp	r3, #6
 80114d6:	d112      	bne.n	80114fe <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80114d8:	6979      	ldr	r1, [r7, #20]
 80114da:	6a38      	ldr	r0, [r7, #32]
 80114dc:	f7fe fb7e 	bl	800fbdc <dhcp_handle_offer>
 80114e0:	e00e      	b.n	8011500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114e2:	bf00      	nop
 80114e4:	e00c      	b.n	8011500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114e6:	bf00      	nop
 80114e8:	e00a      	b.n	8011500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114ea:	bf00      	nop
 80114ec:	e008      	b.n	8011500 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80114ee:	bf00      	nop
 80114f0:	e006      	b.n	8011500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114f2:	bf00      	nop
 80114f4:	e004      	b.n	8011500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114f6:	bf00      	nop
 80114f8:	e002      	b.n	8011500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114fa:	bf00      	nop
 80114fc:	e000      	b.n	8011500 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80114fe:	bf00      	nop
  pbuf_free(p);
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f7f8 f8a1 	bl	8009648 <pbuf_free>
}
 8011506:	bf00      	nop
 8011508:	3728      	adds	r7, #40	; 0x28
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	20005770 	.word	0x20005770
 8011514:	2000af40 	.word	0x2000af40
 8011518:	2000af20 	.word	0x2000af20

0801151c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b088      	sub	sp, #32
 8011520:	af00      	add	r7, sp, #0
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	60b9      	str	r1, [r7, #8]
 8011526:	603b      	str	r3, [r7, #0]
 8011528:	4613      	mov	r3, r2
 801152a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d108      	bne.n	8011544 <dhcp_create_msg+0x28>
 8011532:	4b5f      	ldr	r3, [pc, #380]	; (80116b0 <dhcp_create_msg+0x194>)
 8011534:	f240 7269 	movw	r2, #1897	; 0x769
 8011538:	495e      	ldr	r1, [pc, #376]	; (80116b4 <dhcp_create_msg+0x198>)
 801153a:	485f      	ldr	r0, [pc, #380]	; (80116b8 <dhcp_create_msg+0x19c>)
 801153c:	f002 fc64 	bl	8013e08 <iprintf>
 8011540:	2300      	movs	r3, #0
 8011542:	e0b1      	b.n	80116a8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d108      	bne.n	801155c <dhcp_create_msg+0x40>
 801154a:	4b59      	ldr	r3, [pc, #356]	; (80116b0 <dhcp_create_msg+0x194>)
 801154c:	f240 726a 	movw	r2, #1898	; 0x76a
 8011550:	495a      	ldr	r1, [pc, #360]	; (80116bc <dhcp_create_msg+0x1a0>)
 8011552:	4859      	ldr	r0, [pc, #356]	; (80116b8 <dhcp_create_msg+0x19c>)
 8011554:	f002 fc58 	bl	8013e08 <iprintf>
 8011558:	2300      	movs	r3, #0
 801155a:	e0a5      	b.n	80116a8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801155c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011560:	f44f 719a 	mov.w	r1, #308	; 0x134
 8011564:	2036      	movs	r0, #54	; 0x36
 8011566:	f7f7 fd8b 	bl	8009080 <pbuf_alloc>
 801156a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801156c:	69bb      	ldr	r3, [r7, #24]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d101      	bne.n	8011576 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011572:	2300      	movs	r3, #0
 8011574:	e098      	b.n	80116a8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	895b      	ldrh	r3, [r3, #10]
 801157a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801157e:	d206      	bcs.n	801158e <dhcp_create_msg+0x72>
 8011580:	4b4b      	ldr	r3, [pc, #300]	; (80116b0 <dhcp_create_msg+0x194>)
 8011582:	f240 7271 	movw	r2, #1905	; 0x771
 8011586:	494e      	ldr	r1, [pc, #312]	; (80116c0 <dhcp_create_msg+0x1a4>)
 8011588:	484b      	ldr	r0, [pc, #300]	; (80116b8 <dhcp_create_msg+0x19c>)
 801158a:	f002 fc3d 	bl	8013e08 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801158e:	79fb      	ldrb	r3, [r7, #7]
 8011590:	2b03      	cmp	r3, #3
 8011592:	d103      	bne.n	801159c <dhcp_create_msg+0x80>
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	795b      	ldrb	r3, [r3, #5]
 8011598:	2b03      	cmp	r3, #3
 801159a:	d10d      	bne.n	80115b8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	799b      	ldrb	r3, [r3, #6]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d105      	bne.n	80115b0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80115a4:	f002 fc48 	bl	8013e38 <rand>
 80115a8:	4603      	mov	r3, r0
 80115aa:	461a      	mov	r2, r3
 80115ac:	4b45      	ldr	r3, [pc, #276]	; (80116c4 <dhcp_create_msg+0x1a8>)
 80115ae:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80115b0:	4b44      	ldr	r3, [pc, #272]	; (80116c4 <dhcp_create_msg+0x1a8>)
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80115be:	f44f 729a 	mov.w	r2, #308	; 0x134
 80115c2:	2100      	movs	r1, #0
 80115c4:	6978      	ldr	r0, [r7, #20]
 80115c6:	f002 fc17 	bl	8013df8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	2201      	movs	r2, #1
 80115ce:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	2201      	movs	r2, #1
 80115d4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7f6 fcda 	bl	8007f9e <lwip_htonl>
 80115ea:	4602      	mov	r2, r0
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80115f0:	79fb      	ldrb	r3, [r7, #7]
 80115f2:	2b08      	cmp	r3, #8
 80115f4:	d010      	beq.n	8011618 <dhcp_create_msg+0xfc>
 80115f6:	79fb      	ldrb	r3, [r7, #7]
 80115f8:	2b04      	cmp	r3, #4
 80115fa:	d00d      	beq.n	8011618 <dhcp_create_msg+0xfc>
 80115fc:	79fb      	ldrb	r3, [r7, #7]
 80115fe:	2b07      	cmp	r3, #7
 8011600:	d00a      	beq.n	8011618 <dhcp_create_msg+0xfc>
 8011602:	79fb      	ldrb	r3, [r7, #7]
 8011604:	2b03      	cmp	r3, #3
 8011606:	d10c      	bne.n	8011622 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801160c:	2b05      	cmp	r3, #5
 801160e:	d003      	beq.n	8011618 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	795b      	ldrb	r3, [r3, #5]
 8011614:	2b04      	cmp	r3, #4
 8011616:	d104      	bne.n	8011622 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	3304      	adds	r3, #4
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011622:	2300      	movs	r3, #0
 8011624:	83fb      	strh	r3, [r7, #30]
 8011626:	e00c      	b.n	8011642 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011628:	8bfa      	ldrh	r2, [r7, #30]
 801162a:	8bfb      	ldrh	r3, [r7, #30]
 801162c:	68f9      	ldr	r1, [r7, #12]
 801162e:	440a      	add	r2, r1
 8011630:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8011634:	697a      	ldr	r2, [r7, #20]
 8011636:	4413      	add	r3, r2
 8011638:	460a      	mov	r2, r1
 801163a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801163c:	8bfb      	ldrh	r3, [r7, #30]
 801163e:	3301      	adds	r3, #1
 8011640:	83fb      	strh	r3, [r7, #30]
 8011642:	8bfb      	ldrh	r3, [r7, #30]
 8011644:	2b05      	cmp	r3, #5
 8011646:	d9ef      	bls.n	8011628 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	2200      	movs	r2, #0
 801164c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8011654:	2200      	movs	r2, #0
 8011656:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801165a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801165e:	2200      	movs	r2, #0
 8011660:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8011664:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8011668:	2200      	movs	r2, #0
 801166a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801166e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011678:	2301      	movs	r3, #1
 801167a:	2235      	movs	r2, #53	; 0x35
 801167c:	2000      	movs	r0, #0
 801167e:	f7ff fadb 	bl	8010c38 <dhcp_option>
 8011682:	4603      	mov	r3, r0
 8011684:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801168c:	79fa      	ldrb	r2, [r7, #7]
 801168e:	8a7b      	ldrh	r3, [r7, #18]
 8011690:	4618      	mov	r0, r3
 8011692:	f7ff fb05 	bl	8010ca0 <dhcp_option_byte>
 8011696:	4603      	mov	r3, r0
 8011698:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d002      	beq.n	80116a6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	8a7a      	ldrh	r2, [r7, #18]
 80116a4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80116a6:	69bb      	ldr	r3, [r7, #24]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3720      	adds	r7, #32
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	080176c0 	.word	0x080176c0
 80116b4:	080179e0 	.word	0x080179e0
 80116b8:	08017720 	.word	0x08017720
 80116bc:	08017a00 	.word	0x08017a00
 80116c0:	08017a20 	.word	0x08017a20
 80116c4:	2000af50 	.word	0x2000af50

080116c8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	4603      	mov	r3, r0
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
 80116d4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80116d6:	89fb      	ldrh	r3, [r7, #14]
 80116d8:	1c5a      	adds	r2, r3, #1
 80116da:	81fa      	strh	r2, [r7, #14]
 80116dc:	461a      	mov	r2, r3
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	4413      	add	r3, r2
 80116e2:	22ff      	movs	r2, #255	; 0xff
 80116e4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80116e6:	e007      	b.n	80116f8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80116e8:	89fb      	ldrh	r3, [r7, #14]
 80116ea:	1c5a      	adds	r2, r3, #1
 80116ec:	81fa      	strh	r2, [r7, #14]
 80116ee:	461a      	mov	r2, r3
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	4413      	add	r3, r2
 80116f4:	2200      	movs	r2, #0
 80116f6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80116f8:	89fb      	ldrh	r3, [r7, #14]
 80116fa:	2b43      	cmp	r3, #67	; 0x43
 80116fc:	d904      	bls.n	8011708 <dhcp_option_trailer+0x40>
 80116fe:	89fb      	ldrh	r3, [r7, #14]
 8011700:	f003 0303 	and.w	r3, r3, #3
 8011704:	2b00      	cmp	r3, #0
 8011706:	d002      	beq.n	801170e <dhcp_option_trailer+0x46>
 8011708:	89fb      	ldrh	r3, [r7, #14]
 801170a:	2b43      	cmp	r3, #67	; 0x43
 801170c:	d9ec      	bls.n	80116e8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801170e:	89fb      	ldrh	r3, [r7, #14]
 8011710:	33f0      	adds	r3, #240	; 0xf0
 8011712:	b29b      	uxth	r3, r3
 8011714:	4619      	mov	r1, r3
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7f7 fe10 	bl	800933c <pbuf_realloc>
}
 801171c:	bf00      	nop
 801171e:	3710      	adds	r7, #16
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d017      	beq.n	8011762 <dhcp_supplied_address+0x3e>
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011736:	2b00      	cmp	r3, #0
 8011738:	d013      	beq.n	8011762 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801173e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	795b      	ldrb	r3, [r3, #5]
 8011744:	2b0a      	cmp	r3, #10
 8011746:	d007      	beq.n	8011758 <dhcp_supplied_address+0x34>
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	795b      	ldrb	r3, [r3, #5]
 801174c:	2b05      	cmp	r3, #5
 801174e:	d003      	beq.n	8011758 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011754:	2b04      	cmp	r3, #4
 8011756:	d101      	bne.n	801175c <dhcp_supplied_address+0x38>
 8011758:	2301      	movs	r3, #1
 801175a:	e000      	b.n	801175e <dhcp_supplied_address+0x3a>
 801175c:	2300      	movs	r3, #0
 801175e:	b2db      	uxtb	r3, r3
 8011760:	e000      	b.n	8011764 <dhcp_supplied_address+0x40>
  }
  return 0;
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	3714      	adds	r7, #20
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011778:	4915      	ldr	r1, [pc, #84]	; (80117d0 <etharp_free_entry+0x60>)
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	4613      	mov	r3, r2
 801177e:	005b      	lsls	r3, r3, #1
 8011780:	4413      	add	r3, r2
 8011782:	00db      	lsls	r3, r3, #3
 8011784:	440b      	add	r3, r1
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d013      	beq.n	80117b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801178c:	4910      	ldr	r1, [pc, #64]	; (80117d0 <etharp_free_entry+0x60>)
 801178e:	687a      	ldr	r2, [r7, #4]
 8011790:	4613      	mov	r3, r2
 8011792:	005b      	lsls	r3, r3, #1
 8011794:	4413      	add	r3, r2
 8011796:	00db      	lsls	r3, r3, #3
 8011798:	440b      	add	r3, r1
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	4618      	mov	r0, r3
 801179e:	f7f7 ff53 	bl	8009648 <pbuf_free>
    arp_table[i].q = NULL;
 80117a2:	490b      	ldr	r1, [pc, #44]	; (80117d0 <etharp_free_entry+0x60>)
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	4613      	mov	r3, r2
 80117a8:	005b      	lsls	r3, r3, #1
 80117aa:	4413      	add	r3, r2
 80117ac:	00db      	lsls	r3, r3, #3
 80117ae:	440b      	add	r3, r1
 80117b0:	2200      	movs	r2, #0
 80117b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80117b4:	4906      	ldr	r1, [pc, #24]	; (80117d0 <etharp_free_entry+0x60>)
 80117b6:	687a      	ldr	r2, [r7, #4]
 80117b8:	4613      	mov	r3, r2
 80117ba:	005b      	lsls	r3, r3, #1
 80117bc:	4413      	add	r3, r2
 80117be:	00db      	lsls	r3, r3, #3
 80117c0:	440b      	add	r3, r1
 80117c2:	3314      	adds	r3, #20
 80117c4:	2200      	movs	r2, #0
 80117c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80117c8:	bf00      	nop
 80117ca:	3708      	adds	r7, #8
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	2000af54 	.word	0x2000af54

080117d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80117da:	2300      	movs	r3, #0
 80117dc:	607b      	str	r3, [r7, #4]
 80117de:	e096      	b.n	801190e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80117e0:	494f      	ldr	r1, [pc, #316]	; (8011920 <etharp_tmr+0x14c>)
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	4613      	mov	r3, r2
 80117e6:	005b      	lsls	r3, r3, #1
 80117e8:	4413      	add	r3, r2
 80117ea:	00db      	lsls	r3, r3, #3
 80117ec:	440b      	add	r3, r1
 80117ee:	3314      	adds	r3, #20
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80117f4:	78fb      	ldrb	r3, [r7, #3]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f000 8086 	beq.w	8011908 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80117fc:	4948      	ldr	r1, [pc, #288]	; (8011920 <etharp_tmr+0x14c>)
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	4613      	mov	r3, r2
 8011802:	005b      	lsls	r3, r3, #1
 8011804:	4413      	add	r3, r2
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	440b      	add	r3, r1
 801180a:	3312      	adds	r3, #18
 801180c:	881b      	ldrh	r3, [r3, #0]
 801180e:	3301      	adds	r3, #1
 8011810:	b298      	uxth	r0, r3
 8011812:	4943      	ldr	r1, [pc, #268]	; (8011920 <etharp_tmr+0x14c>)
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	4613      	mov	r3, r2
 8011818:	005b      	lsls	r3, r3, #1
 801181a:	4413      	add	r3, r2
 801181c:	00db      	lsls	r3, r3, #3
 801181e:	440b      	add	r3, r1
 8011820:	3312      	adds	r3, #18
 8011822:	4602      	mov	r2, r0
 8011824:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011826:	493e      	ldr	r1, [pc, #248]	; (8011920 <etharp_tmr+0x14c>)
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	4613      	mov	r3, r2
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	4413      	add	r3, r2
 8011830:	00db      	lsls	r3, r3, #3
 8011832:	440b      	add	r3, r1
 8011834:	3312      	adds	r3, #18
 8011836:	881b      	ldrh	r3, [r3, #0]
 8011838:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801183c:	d215      	bcs.n	801186a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801183e:	4938      	ldr	r1, [pc, #224]	; (8011920 <etharp_tmr+0x14c>)
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	4613      	mov	r3, r2
 8011844:	005b      	lsls	r3, r3, #1
 8011846:	4413      	add	r3, r2
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	440b      	add	r3, r1
 801184c:	3314      	adds	r3, #20
 801184e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011850:	2b01      	cmp	r3, #1
 8011852:	d10e      	bne.n	8011872 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011854:	4932      	ldr	r1, [pc, #200]	; (8011920 <etharp_tmr+0x14c>)
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	4613      	mov	r3, r2
 801185a:	005b      	lsls	r3, r3, #1
 801185c:	4413      	add	r3, r2
 801185e:	00db      	lsls	r3, r3, #3
 8011860:	440b      	add	r3, r1
 8011862:	3312      	adds	r3, #18
 8011864:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011866:	2b04      	cmp	r3, #4
 8011868:	d903      	bls.n	8011872 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ff ff80 	bl	8011770 <etharp_free_entry>
 8011870:	e04a      	b.n	8011908 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011872:	492b      	ldr	r1, [pc, #172]	; (8011920 <etharp_tmr+0x14c>)
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	4613      	mov	r3, r2
 8011878:	005b      	lsls	r3, r3, #1
 801187a:	4413      	add	r3, r2
 801187c:	00db      	lsls	r3, r3, #3
 801187e:	440b      	add	r3, r1
 8011880:	3314      	adds	r3, #20
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	2b03      	cmp	r3, #3
 8011886:	d10a      	bne.n	801189e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011888:	4925      	ldr	r1, [pc, #148]	; (8011920 <etharp_tmr+0x14c>)
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	4613      	mov	r3, r2
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	4413      	add	r3, r2
 8011892:	00db      	lsls	r3, r3, #3
 8011894:	440b      	add	r3, r1
 8011896:	3314      	adds	r3, #20
 8011898:	2204      	movs	r2, #4
 801189a:	701a      	strb	r2, [r3, #0]
 801189c:	e034      	b.n	8011908 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801189e:	4920      	ldr	r1, [pc, #128]	; (8011920 <etharp_tmr+0x14c>)
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	4613      	mov	r3, r2
 80118a4:	005b      	lsls	r3, r3, #1
 80118a6:	4413      	add	r3, r2
 80118a8:	00db      	lsls	r3, r3, #3
 80118aa:	440b      	add	r3, r1
 80118ac:	3314      	adds	r3, #20
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	2b04      	cmp	r3, #4
 80118b2:	d10a      	bne.n	80118ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80118b4:	491a      	ldr	r1, [pc, #104]	; (8011920 <etharp_tmr+0x14c>)
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	4613      	mov	r3, r2
 80118ba:	005b      	lsls	r3, r3, #1
 80118bc:	4413      	add	r3, r2
 80118be:	00db      	lsls	r3, r3, #3
 80118c0:	440b      	add	r3, r1
 80118c2:	3314      	adds	r3, #20
 80118c4:	2202      	movs	r2, #2
 80118c6:	701a      	strb	r2, [r3, #0]
 80118c8:	e01e      	b.n	8011908 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80118ca:	4915      	ldr	r1, [pc, #84]	; (8011920 <etharp_tmr+0x14c>)
 80118cc:	687a      	ldr	r2, [r7, #4]
 80118ce:	4613      	mov	r3, r2
 80118d0:	005b      	lsls	r3, r3, #1
 80118d2:	4413      	add	r3, r2
 80118d4:	00db      	lsls	r3, r3, #3
 80118d6:	440b      	add	r3, r1
 80118d8:	3314      	adds	r3, #20
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d113      	bne.n	8011908 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80118e0:	490f      	ldr	r1, [pc, #60]	; (8011920 <etharp_tmr+0x14c>)
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	4613      	mov	r3, r2
 80118e6:	005b      	lsls	r3, r3, #1
 80118e8:	4413      	add	r3, r2
 80118ea:	00db      	lsls	r3, r3, #3
 80118ec:	440b      	add	r3, r1
 80118ee:	3308      	adds	r3, #8
 80118f0:	6818      	ldr	r0, [r3, #0]
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	4613      	mov	r3, r2
 80118f6:	005b      	lsls	r3, r3, #1
 80118f8:	4413      	add	r3, r2
 80118fa:	00db      	lsls	r3, r3, #3
 80118fc:	4a08      	ldr	r2, [pc, #32]	; (8011920 <etharp_tmr+0x14c>)
 80118fe:	4413      	add	r3, r2
 8011900:	3304      	adds	r3, #4
 8011902:	4619      	mov	r1, r3
 8011904:	f000 fe72 	bl	80125ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	3301      	adds	r3, #1
 801190c:	607b      	str	r3, [r7, #4]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2b09      	cmp	r3, #9
 8011912:	f77f af65 	ble.w	80117e0 <etharp_tmr+0xc>
      }
    }
  }
}
 8011916:	bf00      	nop
 8011918:	bf00      	nop
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	2000af54 	.word	0x2000af54

08011924 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08a      	sub	sp, #40	; 0x28
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	460b      	mov	r3, r1
 801192e:	607a      	str	r2, [r7, #4]
 8011930:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011932:	230a      	movs	r3, #10
 8011934:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011936:	230a      	movs	r3, #10
 8011938:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801193a:	230a      	movs	r3, #10
 801193c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801193e:	2300      	movs	r3, #0
 8011940:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011942:	230a      	movs	r3, #10
 8011944:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011946:	2300      	movs	r3, #0
 8011948:	83bb      	strh	r3, [r7, #28]
 801194a:	2300      	movs	r3, #0
 801194c:	837b      	strh	r3, [r7, #26]
 801194e:	2300      	movs	r3, #0
 8011950:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011952:	2300      	movs	r3, #0
 8011954:	843b      	strh	r3, [r7, #32]
 8011956:	e0ae      	b.n	8011ab6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011958:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801195c:	49a6      	ldr	r1, [pc, #664]	; (8011bf8 <etharp_find_entry+0x2d4>)
 801195e:	4613      	mov	r3, r2
 8011960:	005b      	lsls	r3, r3, #1
 8011962:	4413      	add	r3, r2
 8011964:	00db      	lsls	r3, r3, #3
 8011966:	440b      	add	r3, r1
 8011968:	3314      	adds	r3, #20
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801196e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011972:	2b0a      	cmp	r3, #10
 8011974:	d105      	bne.n	8011982 <etharp_find_entry+0x5e>
 8011976:	7dfb      	ldrb	r3, [r7, #23]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d102      	bne.n	8011982 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801197c:	8c3b      	ldrh	r3, [r7, #32]
 801197e:	847b      	strh	r3, [r7, #34]	; 0x22
 8011980:	e095      	b.n	8011aae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011982:	7dfb      	ldrb	r3, [r7, #23]
 8011984:	2b00      	cmp	r3, #0
 8011986:	f000 8092 	beq.w	8011aae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801198a:	7dfb      	ldrb	r3, [r7, #23]
 801198c:	2b01      	cmp	r3, #1
 801198e:	d009      	beq.n	80119a4 <etharp_find_entry+0x80>
 8011990:	7dfb      	ldrb	r3, [r7, #23]
 8011992:	2b01      	cmp	r3, #1
 8011994:	d806      	bhi.n	80119a4 <etharp_find_entry+0x80>
 8011996:	4b99      	ldr	r3, [pc, #612]	; (8011bfc <etharp_find_entry+0x2d8>)
 8011998:	f240 1223 	movw	r2, #291	; 0x123
 801199c:	4998      	ldr	r1, [pc, #608]	; (8011c00 <etharp_find_entry+0x2dc>)
 801199e:	4899      	ldr	r0, [pc, #612]	; (8011c04 <etharp_find_entry+0x2e0>)
 80119a0:	f002 fa32 	bl	8013e08 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d020      	beq.n	80119ec <etharp_find_entry+0xc8>
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6819      	ldr	r1, [r3, #0]
 80119ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119b2:	4891      	ldr	r0, [pc, #580]	; (8011bf8 <etharp_find_entry+0x2d4>)
 80119b4:	4613      	mov	r3, r2
 80119b6:	005b      	lsls	r3, r3, #1
 80119b8:	4413      	add	r3, r2
 80119ba:	00db      	lsls	r3, r3, #3
 80119bc:	4403      	add	r3, r0
 80119be:	3304      	adds	r3, #4
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	4299      	cmp	r1, r3
 80119c4:	d112      	bne.n	80119ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d00c      	beq.n	80119e6 <etharp_find_entry+0xc2>
 80119cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119d0:	4989      	ldr	r1, [pc, #548]	; (8011bf8 <etharp_find_entry+0x2d4>)
 80119d2:	4613      	mov	r3, r2
 80119d4:	005b      	lsls	r3, r3, #1
 80119d6:	4413      	add	r3, r2
 80119d8:	00db      	lsls	r3, r3, #3
 80119da:	440b      	add	r3, r1
 80119dc:	3308      	adds	r3, #8
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d102      	bne.n	80119ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80119e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80119ea:	e100      	b.n	8011bee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80119ec:	7dfb      	ldrb	r3, [r7, #23]
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d140      	bne.n	8011a74 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80119f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119f6:	4980      	ldr	r1, [pc, #512]	; (8011bf8 <etharp_find_entry+0x2d4>)
 80119f8:	4613      	mov	r3, r2
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	4413      	add	r3, r2
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	440b      	add	r3, r1
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d01a      	beq.n	8011a3e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011a08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a0c:	497a      	ldr	r1, [pc, #488]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011a0e:	4613      	mov	r3, r2
 8011a10:	005b      	lsls	r3, r3, #1
 8011a12:	4413      	add	r3, r2
 8011a14:	00db      	lsls	r3, r3, #3
 8011a16:	440b      	add	r3, r1
 8011a18:	3312      	adds	r3, #18
 8011a1a:	881b      	ldrh	r3, [r3, #0]
 8011a1c:	8bba      	ldrh	r2, [r7, #28]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d845      	bhi.n	8011aae <etharp_find_entry+0x18a>
            old_queue = i;
 8011a22:	8c3b      	ldrh	r3, [r7, #32]
 8011a24:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011a26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a2a:	4973      	ldr	r1, [pc, #460]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	005b      	lsls	r3, r3, #1
 8011a30:	4413      	add	r3, r2
 8011a32:	00db      	lsls	r3, r3, #3
 8011a34:	440b      	add	r3, r1
 8011a36:	3312      	adds	r3, #18
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	83bb      	strh	r3, [r7, #28]
 8011a3c:	e037      	b.n	8011aae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011a3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a42:	496d      	ldr	r1, [pc, #436]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011a44:	4613      	mov	r3, r2
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	4413      	add	r3, r2
 8011a4a:	00db      	lsls	r3, r3, #3
 8011a4c:	440b      	add	r3, r1
 8011a4e:	3312      	adds	r3, #18
 8011a50:	881b      	ldrh	r3, [r3, #0]
 8011a52:	8b7a      	ldrh	r2, [r7, #26]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d82a      	bhi.n	8011aae <etharp_find_entry+0x18a>
            old_pending = i;
 8011a58:	8c3b      	ldrh	r3, [r7, #32]
 8011a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011a5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a60:	4965      	ldr	r1, [pc, #404]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011a62:	4613      	mov	r3, r2
 8011a64:	005b      	lsls	r3, r3, #1
 8011a66:	4413      	add	r3, r2
 8011a68:	00db      	lsls	r3, r3, #3
 8011a6a:	440b      	add	r3, r1
 8011a6c:	3312      	adds	r3, #18
 8011a6e:	881b      	ldrh	r3, [r3, #0]
 8011a70:	837b      	strh	r3, [r7, #26]
 8011a72:	e01c      	b.n	8011aae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011a74:	7dfb      	ldrb	r3, [r7, #23]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d919      	bls.n	8011aae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011a7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a7e:	495e      	ldr	r1, [pc, #376]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011a80:	4613      	mov	r3, r2
 8011a82:	005b      	lsls	r3, r3, #1
 8011a84:	4413      	add	r3, r2
 8011a86:	00db      	lsls	r3, r3, #3
 8011a88:	440b      	add	r3, r1
 8011a8a:	3312      	adds	r3, #18
 8011a8c:	881b      	ldrh	r3, [r3, #0]
 8011a8e:	8b3a      	ldrh	r2, [r7, #24]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d80c      	bhi.n	8011aae <etharp_find_entry+0x18a>
            old_stable = i;
 8011a94:	8c3b      	ldrh	r3, [r7, #32]
 8011a96:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011a98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a9c:	4956      	ldr	r1, [pc, #344]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	4413      	add	r3, r2
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	440b      	add	r3, r1
 8011aa8:	3312      	adds	r3, #18
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011aae:	8c3b      	ldrh	r3, [r7, #32]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	843b      	strh	r3, [r7, #32]
 8011ab6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011aba:	2b09      	cmp	r3, #9
 8011abc:	f77f af4c 	ble.w	8011958 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011ac0:	7afb      	ldrb	r3, [r7, #11]
 8011ac2:	f003 0302 	and.w	r3, r3, #2
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d108      	bne.n	8011adc <etharp_find_entry+0x1b8>
 8011aca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011ace:	2b0a      	cmp	r3, #10
 8011ad0:	d107      	bne.n	8011ae2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011ad2:	7afb      	ldrb	r3, [r7, #11]
 8011ad4:	f003 0301 	and.w	r3, r3, #1
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d102      	bne.n	8011ae2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011adc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae0:	e085      	b.n	8011bee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011ae2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011ae6:	2b09      	cmp	r3, #9
 8011ae8:	dc02      	bgt.n	8011af0 <etharp_find_entry+0x1cc>
    i = empty;
 8011aea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aec:	843b      	strh	r3, [r7, #32]
 8011aee:	e039      	b.n	8011b64 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011af0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011af4:	2b09      	cmp	r3, #9
 8011af6:	dc14      	bgt.n	8011b22 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011af8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011afa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011afc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b00:	493d      	ldr	r1, [pc, #244]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011b02:	4613      	mov	r3, r2
 8011b04:	005b      	lsls	r3, r3, #1
 8011b06:	4413      	add	r3, r2
 8011b08:	00db      	lsls	r3, r3, #3
 8011b0a:	440b      	add	r3, r1
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d018      	beq.n	8011b44 <etharp_find_entry+0x220>
 8011b12:	4b3a      	ldr	r3, [pc, #232]	; (8011bfc <etharp_find_entry+0x2d8>)
 8011b14:	f240 126d 	movw	r2, #365	; 0x16d
 8011b18:	493b      	ldr	r1, [pc, #236]	; (8011c08 <etharp_find_entry+0x2e4>)
 8011b1a:	483a      	ldr	r0, [pc, #232]	; (8011c04 <etharp_find_entry+0x2e0>)
 8011b1c:	f002 f974 	bl	8013e08 <iprintf>
 8011b20:	e010      	b.n	8011b44 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011b22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011b26:	2b09      	cmp	r3, #9
 8011b28:	dc02      	bgt.n	8011b30 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011b2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b2c:	843b      	strh	r3, [r7, #32]
 8011b2e:	e009      	b.n	8011b44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011b30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b34:	2b09      	cmp	r3, #9
 8011b36:	dc02      	bgt.n	8011b3e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011b38:	8bfb      	ldrh	r3, [r7, #30]
 8011b3a:	843b      	strh	r3, [r7, #32]
 8011b3c:	e002      	b.n	8011b44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b42:	e054      	b.n	8011bee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b48:	2b09      	cmp	r3, #9
 8011b4a:	dd06      	ble.n	8011b5a <etharp_find_entry+0x236>
 8011b4c:	4b2b      	ldr	r3, [pc, #172]	; (8011bfc <etharp_find_entry+0x2d8>)
 8011b4e:	f240 127f 	movw	r2, #383	; 0x17f
 8011b52:	492e      	ldr	r1, [pc, #184]	; (8011c0c <etharp_find_entry+0x2e8>)
 8011b54:	482b      	ldr	r0, [pc, #172]	; (8011c04 <etharp_find_entry+0x2e0>)
 8011b56:	f002 f957 	bl	8013e08 <iprintf>
    etharp_free_entry(i);
 8011b5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7ff fe06 	bl	8011770 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b68:	2b09      	cmp	r3, #9
 8011b6a:	dd06      	ble.n	8011b7a <etharp_find_entry+0x256>
 8011b6c:	4b23      	ldr	r3, [pc, #140]	; (8011bfc <etharp_find_entry+0x2d8>)
 8011b6e:	f240 1283 	movw	r2, #387	; 0x183
 8011b72:	4926      	ldr	r1, [pc, #152]	; (8011c0c <etharp_find_entry+0x2e8>)
 8011b74:	4823      	ldr	r0, [pc, #140]	; (8011c04 <etharp_find_entry+0x2e0>)
 8011b76:	f002 f947 	bl	8013e08 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011b7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b7e:	491e      	ldr	r1, [pc, #120]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011b80:	4613      	mov	r3, r2
 8011b82:	005b      	lsls	r3, r3, #1
 8011b84:	4413      	add	r3, r2
 8011b86:	00db      	lsls	r3, r3, #3
 8011b88:	440b      	add	r3, r1
 8011b8a:	3314      	adds	r3, #20
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d006      	beq.n	8011ba0 <etharp_find_entry+0x27c>
 8011b92:	4b1a      	ldr	r3, [pc, #104]	; (8011bfc <etharp_find_entry+0x2d8>)
 8011b94:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011b98:	491d      	ldr	r1, [pc, #116]	; (8011c10 <etharp_find_entry+0x2ec>)
 8011b9a:	481a      	ldr	r0, [pc, #104]	; (8011c04 <etharp_find_entry+0x2e0>)
 8011b9c:	f002 f934 	bl	8013e08 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00b      	beq.n	8011bbe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011ba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	6819      	ldr	r1, [r3, #0]
 8011bae:	4812      	ldr	r0, [pc, #72]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	005b      	lsls	r3, r3, #1
 8011bb4:	4413      	add	r3, r2
 8011bb6:	00db      	lsls	r3, r3, #3
 8011bb8:	4403      	add	r3, r0
 8011bba:	3304      	adds	r3, #4
 8011bbc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011bbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bc2:	490d      	ldr	r1, [pc, #52]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011bc4:	4613      	mov	r3, r2
 8011bc6:	005b      	lsls	r3, r3, #1
 8011bc8:	4413      	add	r3, r2
 8011bca:	00db      	lsls	r3, r3, #3
 8011bcc:	440b      	add	r3, r1
 8011bce:	3312      	adds	r3, #18
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011bd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bd8:	4907      	ldr	r1, [pc, #28]	; (8011bf8 <etharp_find_entry+0x2d4>)
 8011bda:	4613      	mov	r3, r2
 8011bdc:	005b      	lsls	r3, r3, #1
 8011bde:	4413      	add	r3, r2
 8011be0:	00db      	lsls	r3, r3, #3
 8011be2:	440b      	add	r3, r1
 8011be4:	3308      	adds	r3, #8
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011bea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3728      	adds	r7, #40	; 0x28
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	2000af54 	.word	0x2000af54
 8011bfc:	08017a60 	.word	0x08017a60
 8011c00:	08017a98 	.word	0x08017a98
 8011c04:	08017ad8 	.word	0x08017ad8
 8011c08:	08017b00 	.word	0x08017b00
 8011c0c:	08017b18 	.word	0x08017b18
 8011c10:	08017b2c 	.word	0x08017b2c

08011c14 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b088      	sub	sp, #32
 8011c18:	af02      	add	r7, sp, #8
 8011c1a:	60f8      	str	r0, [r7, #12]
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	607a      	str	r2, [r7, #4]
 8011c20:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c28:	2b06      	cmp	r3, #6
 8011c2a:	d006      	beq.n	8011c3a <etharp_update_arp_entry+0x26>
 8011c2c:	4b48      	ldr	r3, [pc, #288]	; (8011d50 <etharp_update_arp_entry+0x13c>)
 8011c2e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011c32:	4948      	ldr	r1, [pc, #288]	; (8011d54 <etharp_update_arp_entry+0x140>)
 8011c34:	4848      	ldr	r0, [pc, #288]	; (8011d58 <etharp_update_arp_entry+0x144>)
 8011c36:	f002 f8e7 	bl	8013e08 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d012      	beq.n	8011c66 <etharp_update_arp_entry+0x52>
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00e      	beq.n	8011c66 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	68f9      	ldr	r1, [r7, #12]
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f001 f920 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 8011c54:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d105      	bne.n	8011c66 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c62:	2be0      	cmp	r3, #224	; 0xe0
 8011c64:	d102      	bne.n	8011c6c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011c66:	f06f 030f 	mvn.w	r3, #15
 8011c6a:	e06c      	b.n	8011d46 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011c6c:	78fb      	ldrb	r3, [r7, #3]
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	4619      	mov	r1, r3
 8011c72:	68b8      	ldr	r0, [r7, #8]
 8011c74:	f7ff fe56 	bl	8011924 <etharp_find_entry>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011c7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	da02      	bge.n	8011c8a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011c84:	8afb      	ldrh	r3, [r7, #22]
 8011c86:	b25b      	sxtb	r3, r3
 8011c88:	e05d      	b.n	8011d46 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011c8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c8e:	4933      	ldr	r1, [pc, #204]	; (8011d5c <etharp_update_arp_entry+0x148>)
 8011c90:	4613      	mov	r3, r2
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	4413      	add	r3, r2
 8011c96:	00db      	lsls	r3, r3, #3
 8011c98:	440b      	add	r3, r1
 8011c9a:	3314      	adds	r3, #20
 8011c9c:	2202      	movs	r2, #2
 8011c9e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011ca0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ca4:	492d      	ldr	r1, [pc, #180]	; (8011d5c <etharp_update_arp_entry+0x148>)
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	005b      	lsls	r3, r3, #1
 8011caa:	4413      	add	r3, r2
 8011cac:	00db      	lsls	r3, r3, #3
 8011cae:	440b      	add	r3, r1
 8011cb0:	3308      	adds	r3, #8
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011cb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	005b      	lsls	r3, r3, #1
 8011cbe:	4413      	add	r3, r2
 8011cc0:	00db      	lsls	r3, r3, #3
 8011cc2:	3308      	adds	r3, #8
 8011cc4:	4a25      	ldr	r2, [pc, #148]	; (8011d5c <etharp_update_arp_entry+0x148>)
 8011cc6:	4413      	add	r3, r2
 8011cc8:	3304      	adds	r3, #4
 8011cca:	2206      	movs	r2, #6
 8011ccc:	6879      	ldr	r1, [r7, #4]
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f002 f86a 	bl	8013da8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011cd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cd8:	4920      	ldr	r1, [pc, #128]	; (8011d5c <etharp_update_arp_entry+0x148>)
 8011cda:	4613      	mov	r3, r2
 8011cdc:	005b      	lsls	r3, r3, #1
 8011cde:	4413      	add	r3, r2
 8011ce0:	00db      	lsls	r3, r3, #3
 8011ce2:	440b      	add	r3, r1
 8011ce4:	3312      	adds	r3, #18
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011cea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cee:	491b      	ldr	r1, [pc, #108]	; (8011d5c <etharp_update_arp_entry+0x148>)
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	005b      	lsls	r3, r3, #1
 8011cf4:	4413      	add	r3, r2
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	440b      	add	r3, r1
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d021      	beq.n	8011d44 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011d00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d04:	4915      	ldr	r1, [pc, #84]	; (8011d5c <etharp_update_arp_entry+0x148>)
 8011d06:	4613      	mov	r3, r2
 8011d08:	005b      	lsls	r3, r3, #1
 8011d0a:	4413      	add	r3, r2
 8011d0c:	00db      	lsls	r3, r3, #3
 8011d0e:	440b      	add	r3, r1
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011d14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d18:	4910      	ldr	r1, [pc, #64]	; (8011d5c <etharp_update_arp_entry+0x148>)
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	005b      	lsls	r3, r3, #1
 8011d1e:	4413      	add	r3, r2
 8011d20:	00db      	lsls	r3, r3, #3
 8011d22:	440b      	add	r3, r1
 8011d24:	2200      	movs	r2, #0
 8011d26:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d32:	9300      	str	r3, [sp, #0]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6939      	ldr	r1, [r7, #16]
 8011d38:	68f8      	ldr	r0, [r7, #12]
 8011d3a:	f001 ffb9 	bl	8013cb0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011d3e:	6938      	ldr	r0, [r7, #16]
 8011d40:	f7f7 fc82 	bl	8009648 <pbuf_free>
  }
  return ERR_OK;
 8011d44:	2300      	movs	r3, #0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3718      	adds	r7, #24
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	08017a60 	.word	0x08017a60
 8011d54:	08017b58 	.word	0x08017b58
 8011d58:	08017ad8 	.word	0x08017ad8
 8011d5c:	2000af54 	.word	0x2000af54

08011d60 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d68:	2300      	movs	r3, #0
 8011d6a:	60fb      	str	r3, [r7, #12]
 8011d6c:	e01e      	b.n	8011dac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011d6e:	4913      	ldr	r1, [pc, #76]	; (8011dbc <etharp_cleanup_netif+0x5c>)
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	4613      	mov	r3, r2
 8011d74:	005b      	lsls	r3, r3, #1
 8011d76:	4413      	add	r3, r2
 8011d78:	00db      	lsls	r3, r3, #3
 8011d7a:	440b      	add	r3, r1
 8011d7c:	3314      	adds	r3, #20
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011d82:	7afb      	ldrb	r3, [r7, #11]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d00e      	beq.n	8011da6 <etharp_cleanup_netif+0x46>
 8011d88:	490c      	ldr	r1, [pc, #48]	; (8011dbc <etharp_cleanup_netif+0x5c>)
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	005b      	lsls	r3, r3, #1
 8011d90:	4413      	add	r3, r2
 8011d92:	00db      	lsls	r3, r3, #3
 8011d94:	440b      	add	r3, r1
 8011d96:	3308      	adds	r3, #8
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d102      	bne.n	8011da6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	f7ff fce5 	bl	8011770 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	3301      	adds	r3, #1
 8011daa:	60fb      	str	r3, [r7, #12]
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2b09      	cmp	r3, #9
 8011db0:	dddd      	ble.n	8011d6e <etharp_cleanup_netif+0xe>
    }
  }
}
 8011db2:	bf00      	nop
 8011db4:	bf00      	nop
 8011db6:	3710      	adds	r7, #16
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	2000af54 	.word	0x2000af54

08011dc0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011dc0:	b5b0      	push	{r4, r5, r7, lr}
 8011dc2:	b08a      	sub	sp, #40	; 0x28
 8011dc4:	af04      	add	r7, sp, #16
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d107      	bne.n	8011de0 <etharp_input+0x20>
 8011dd0:	4b3f      	ldr	r3, [pc, #252]	; (8011ed0 <etharp_input+0x110>)
 8011dd2:	f240 228a 	movw	r2, #650	; 0x28a
 8011dd6:	493f      	ldr	r1, [pc, #252]	; (8011ed4 <etharp_input+0x114>)
 8011dd8:	483f      	ldr	r0, [pc, #252]	; (8011ed8 <etharp_input+0x118>)
 8011dda:	f002 f815 	bl	8013e08 <iprintf>
 8011dde:	e074      	b.n	8011eca <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011df0:	d10c      	bne.n	8011e0c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011df6:	2b06      	cmp	r3, #6
 8011df8:	d108      	bne.n	8011e0c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011dfe:	2b04      	cmp	r3, #4
 8011e00:	d104      	bne.n	8011e0c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	885b      	ldrh	r3, [r3, #2]
 8011e06:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e08:	2b08      	cmp	r3, #8
 8011e0a:	d003      	beq.n	8011e14 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7f7 fc1b 	bl	8009648 <pbuf_free>
    return;
 8011e12:	e05a      	b.n	8011eca <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011e14:	693b      	ldr	r3, [r7, #16]
 8011e16:	330e      	adds	r3, #14
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	3318      	adds	r3, #24
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	3304      	adds	r3, #4
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d102      	bne.n	8011e34 <etharp_input+0x74>
    for_us = 0;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	75fb      	strb	r3, [r7, #23]
 8011e32:	e009      	b.n	8011e48 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	3304      	adds	r3, #4
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	bf0c      	ite	eq
 8011e40:	2301      	moveq	r3, #1
 8011e42:	2300      	movne	r3, #0
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	f103 0208 	add.w	r2, r3, #8
 8011e4e:	7dfb      	ldrb	r3, [r7, #23]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d001      	beq.n	8011e58 <etharp_input+0x98>
 8011e54:	2301      	movs	r3, #1
 8011e56:	e000      	b.n	8011e5a <etharp_input+0x9a>
 8011e58:	2302      	movs	r3, #2
 8011e5a:	f107 010c 	add.w	r1, r7, #12
 8011e5e:	6838      	ldr	r0, [r7, #0]
 8011e60:	f7ff fed8 	bl	8011c14 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	88db      	ldrh	r3, [r3, #6]
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e6e:	d003      	beq.n	8011e78 <etharp_input+0xb8>
 8011e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e74:	d01e      	beq.n	8011eb4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011e76:	e025      	b.n	8011ec4 <etharp_input+0x104>
      if (for_us) {
 8011e78:	7dfb      	ldrb	r3, [r7, #23]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d021      	beq.n	8011ec2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011e94:	693a      	ldr	r2, [r7, #16]
 8011e96:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011e98:	2102      	movs	r1, #2
 8011e9a:	9103      	str	r1, [sp, #12]
 8011e9c:	f107 010c 	add.w	r1, r7, #12
 8011ea0:	9102      	str	r1, [sp, #8]
 8011ea2:	9201      	str	r2, [sp, #4]
 8011ea4:	9300      	str	r3, [sp, #0]
 8011ea6:	462b      	mov	r3, r5
 8011ea8:	4622      	mov	r2, r4
 8011eaa:	4601      	mov	r1, r0
 8011eac:	6838      	ldr	r0, [r7, #0]
 8011eae:	f000 faef 	bl	8012490 <etharp_raw>
      break;
 8011eb2:	e006      	b.n	8011ec2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011eb4:	f107 030c 	add.w	r3, r7, #12
 8011eb8:	4619      	mov	r1, r3
 8011eba:	6838      	ldr	r0, [r7, #0]
 8011ebc:	f7fe f9fc 	bl	80102b8 <dhcp_arp_reply>
      break;
 8011ec0:	e000      	b.n	8011ec4 <etharp_input+0x104>
      break;
 8011ec2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f7f7 fbbf 	bl	8009648 <pbuf_free>
}
 8011eca:	3718      	adds	r7, #24
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bdb0      	pop	{r4, r5, r7, pc}
 8011ed0:	08017a60 	.word	0x08017a60
 8011ed4:	08017bb0 	.word	0x08017bb0
 8011ed8:	08017ad8 	.word	0x08017ad8

08011edc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b086      	sub	sp, #24
 8011ee0:	af02      	add	r7, sp, #8
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011eea:	79fa      	ldrb	r2, [r7, #7]
 8011eec:	4944      	ldr	r1, [pc, #272]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011eee:	4613      	mov	r3, r2
 8011ef0:	005b      	lsls	r3, r3, #1
 8011ef2:	4413      	add	r3, r2
 8011ef4:	00db      	lsls	r3, r3, #3
 8011ef6:	440b      	add	r3, r1
 8011ef8:	3314      	adds	r3, #20
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d806      	bhi.n	8011f0e <etharp_output_to_arp_index+0x32>
 8011f00:	4b40      	ldr	r3, [pc, #256]	; (8012004 <etharp_output_to_arp_index+0x128>)
 8011f02:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011f06:	4940      	ldr	r1, [pc, #256]	; (8012008 <etharp_output_to_arp_index+0x12c>)
 8011f08:	4840      	ldr	r0, [pc, #256]	; (801200c <etharp_output_to_arp_index+0x130>)
 8011f0a:	f001 ff7d 	bl	8013e08 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011f0e:	79fa      	ldrb	r2, [r7, #7]
 8011f10:	493b      	ldr	r1, [pc, #236]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011f12:	4613      	mov	r3, r2
 8011f14:	005b      	lsls	r3, r3, #1
 8011f16:	4413      	add	r3, r2
 8011f18:	00db      	lsls	r3, r3, #3
 8011f1a:	440b      	add	r3, r1
 8011f1c:	3314      	adds	r3, #20
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	2b02      	cmp	r3, #2
 8011f22:	d153      	bne.n	8011fcc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011f24:	79fa      	ldrb	r2, [r7, #7]
 8011f26:	4936      	ldr	r1, [pc, #216]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011f28:	4613      	mov	r3, r2
 8011f2a:	005b      	lsls	r3, r3, #1
 8011f2c:	4413      	add	r3, r2
 8011f2e:	00db      	lsls	r3, r3, #3
 8011f30:	440b      	add	r3, r1
 8011f32:	3312      	adds	r3, #18
 8011f34:	881b      	ldrh	r3, [r3, #0]
 8011f36:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011f3a:	d919      	bls.n	8011f70 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011f3c:	79fa      	ldrb	r2, [r7, #7]
 8011f3e:	4613      	mov	r3, r2
 8011f40:	005b      	lsls	r3, r3, #1
 8011f42:	4413      	add	r3, r2
 8011f44:	00db      	lsls	r3, r3, #3
 8011f46:	4a2e      	ldr	r2, [pc, #184]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011f48:	4413      	add	r3, r2
 8011f4a:	3304      	adds	r3, #4
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f000 fb4c 	bl	80125ec <etharp_request>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d138      	bne.n	8011fcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f5a:	79fa      	ldrb	r2, [r7, #7]
 8011f5c:	4928      	ldr	r1, [pc, #160]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011f5e:	4613      	mov	r3, r2
 8011f60:	005b      	lsls	r3, r3, #1
 8011f62:	4413      	add	r3, r2
 8011f64:	00db      	lsls	r3, r3, #3
 8011f66:	440b      	add	r3, r1
 8011f68:	3314      	adds	r3, #20
 8011f6a:	2203      	movs	r2, #3
 8011f6c:	701a      	strb	r2, [r3, #0]
 8011f6e:	e02d      	b.n	8011fcc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011f70:	79fa      	ldrb	r2, [r7, #7]
 8011f72:	4923      	ldr	r1, [pc, #140]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011f74:	4613      	mov	r3, r2
 8011f76:	005b      	lsls	r3, r3, #1
 8011f78:	4413      	add	r3, r2
 8011f7a:	00db      	lsls	r3, r3, #3
 8011f7c:	440b      	add	r3, r1
 8011f7e:	3312      	adds	r3, #18
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011f86:	d321      	bcc.n	8011fcc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011f88:	79fa      	ldrb	r2, [r7, #7]
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	005b      	lsls	r3, r3, #1
 8011f8e:	4413      	add	r3, r2
 8011f90:	00db      	lsls	r3, r3, #3
 8011f92:	4a1b      	ldr	r2, [pc, #108]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011f94:	4413      	add	r3, r2
 8011f96:	1d19      	adds	r1, r3, #4
 8011f98:	79fa      	ldrb	r2, [r7, #7]
 8011f9a:	4613      	mov	r3, r2
 8011f9c:	005b      	lsls	r3, r3, #1
 8011f9e:	4413      	add	r3, r2
 8011fa0:	00db      	lsls	r3, r3, #3
 8011fa2:	3308      	adds	r3, #8
 8011fa4:	4a16      	ldr	r2, [pc, #88]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011fa6:	4413      	add	r3, r2
 8011fa8:	3304      	adds	r3, #4
 8011faa:	461a      	mov	r2, r3
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f000 fafb 	bl	80125a8 <etharp_request_dst>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d109      	bne.n	8011fcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011fb8:	79fa      	ldrb	r2, [r7, #7]
 8011fba:	4911      	ldr	r1, [pc, #68]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	4413      	add	r3, r2
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	440b      	add	r3, r1
 8011fc6:	3314      	adds	r3, #20
 8011fc8:	2203      	movs	r2, #3
 8011fca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011fd2:	79fa      	ldrb	r2, [r7, #7]
 8011fd4:	4613      	mov	r3, r2
 8011fd6:	005b      	lsls	r3, r3, #1
 8011fd8:	4413      	add	r3, r2
 8011fda:	00db      	lsls	r3, r3, #3
 8011fdc:	3308      	adds	r3, #8
 8011fde:	4a08      	ldr	r2, [pc, #32]	; (8012000 <etharp_output_to_arp_index+0x124>)
 8011fe0:	4413      	add	r3, r2
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011fe8:	9200      	str	r2, [sp, #0]
 8011fea:	460a      	mov	r2, r1
 8011fec:	68b9      	ldr	r1, [r7, #8]
 8011fee:	68f8      	ldr	r0, [r7, #12]
 8011ff0:	f001 fe5e 	bl	8013cb0 <ethernet_output>
 8011ff4:	4603      	mov	r3, r0
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3710      	adds	r7, #16
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	2000af54 	.word	0x2000af54
 8012004:	08017a60 	.word	0x08017a60
 8012008:	08017bd0 	.word	0x08017bd0
 801200c:	08017ad8 	.word	0x08017ad8

08012010 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b08a      	sub	sp, #40	; 0x28
 8012014:	af02      	add	r7, sp, #8
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d106      	bne.n	8012034 <etharp_output+0x24>
 8012026:	4b73      	ldr	r3, [pc, #460]	; (80121f4 <etharp_output+0x1e4>)
 8012028:	f240 321e 	movw	r2, #798	; 0x31e
 801202c:	4972      	ldr	r1, [pc, #456]	; (80121f8 <etharp_output+0x1e8>)
 801202e:	4873      	ldr	r0, [pc, #460]	; (80121fc <etharp_output+0x1ec>)
 8012030:	f001 feea 	bl	8013e08 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d106      	bne.n	8012048 <etharp_output+0x38>
 801203a:	4b6e      	ldr	r3, [pc, #440]	; (80121f4 <etharp_output+0x1e4>)
 801203c:	f240 321f 	movw	r2, #799	; 0x31f
 8012040:	496f      	ldr	r1, [pc, #444]	; (8012200 <etharp_output+0x1f0>)
 8012042:	486e      	ldr	r0, [pc, #440]	; (80121fc <etharp_output+0x1ec>)
 8012044:	f001 fee0 	bl	8013e08 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d106      	bne.n	801205c <etharp_output+0x4c>
 801204e:	4b69      	ldr	r3, [pc, #420]	; (80121f4 <etharp_output+0x1e4>)
 8012050:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012054:	496b      	ldr	r1, [pc, #428]	; (8012204 <etharp_output+0x1f4>)
 8012056:	4869      	ldr	r0, [pc, #420]	; (80121fc <etharp_output+0x1ec>)
 8012058:	f001 fed6 	bl	8013e08 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	68f9      	ldr	r1, [r7, #12]
 8012062:	4618      	mov	r0, r3
 8012064:	f000 ff16 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d002      	beq.n	8012074 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801206e:	4b66      	ldr	r3, [pc, #408]	; (8012208 <etharp_output+0x1f8>)
 8012070:	61fb      	str	r3, [r7, #28]
 8012072:	e0af      	b.n	80121d4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801207c:	2be0      	cmp	r3, #224	; 0xe0
 801207e:	d118      	bne.n	80120b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012080:	2301      	movs	r3, #1
 8012082:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012084:	2300      	movs	r3, #0
 8012086:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012088:	235e      	movs	r3, #94	; 0x5e
 801208a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	3301      	adds	r3, #1
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012096:	b2db      	uxtb	r3, r3
 8012098:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	3302      	adds	r3, #2
 801209e:	781b      	ldrb	r3, [r3, #0]
 80120a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	3303      	adds	r3, #3
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80120aa:	f107 0310 	add.w	r3, r7, #16
 80120ae:	61fb      	str	r3, [r7, #28]
 80120b0:	e090      	b.n	80121d4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	3304      	adds	r3, #4
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	405a      	eors	r2, r3
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	3308      	adds	r3, #8
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4013      	ands	r3, r2
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d012      	beq.n	80120f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80120d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d00b      	beq.n	80120f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	330c      	adds	r3, #12
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d003      	beq.n	80120ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	330c      	adds	r3, #12
 80120e6:	61bb      	str	r3, [r7, #24]
 80120e8:	e002      	b.n	80120f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80120ea:	f06f 0303 	mvn.w	r3, #3
 80120ee:	e07d      	b.n	80121ec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80120f0:	4b46      	ldr	r3, [pc, #280]	; (801220c <etharp_output+0x1fc>)
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	4619      	mov	r1, r3
 80120f6:	4a46      	ldr	r2, [pc, #280]	; (8012210 <etharp_output+0x200>)
 80120f8:	460b      	mov	r3, r1
 80120fa:	005b      	lsls	r3, r3, #1
 80120fc:	440b      	add	r3, r1
 80120fe:	00db      	lsls	r3, r3, #3
 8012100:	4413      	add	r3, r2
 8012102:	3314      	adds	r3, #20
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	2b01      	cmp	r3, #1
 8012108:	d925      	bls.n	8012156 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801210a:	4b40      	ldr	r3, [pc, #256]	; (801220c <etharp_output+0x1fc>)
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	4619      	mov	r1, r3
 8012110:	4a3f      	ldr	r2, [pc, #252]	; (8012210 <etharp_output+0x200>)
 8012112:	460b      	mov	r3, r1
 8012114:	005b      	lsls	r3, r3, #1
 8012116:	440b      	add	r3, r1
 8012118:	00db      	lsls	r3, r3, #3
 801211a:	4413      	add	r3, r2
 801211c:	3308      	adds	r3, #8
 801211e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012120:	68fa      	ldr	r2, [r7, #12]
 8012122:	429a      	cmp	r2, r3
 8012124:	d117      	bne.n	8012156 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	4b38      	ldr	r3, [pc, #224]	; (801220c <etharp_output+0x1fc>)
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	4618      	mov	r0, r3
 8012130:	4937      	ldr	r1, [pc, #220]	; (8012210 <etharp_output+0x200>)
 8012132:	4603      	mov	r3, r0
 8012134:	005b      	lsls	r3, r3, #1
 8012136:	4403      	add	r3, r0
 8012138:	00db      	lsls	r3, r3, #3
 801213a:	440b      	add	r3, r1
 801213c:	3304      	adds	r3, #4
 801213e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012140:	429a      	cmp	r2, r3
 8012142:	d108      	bne.n	8012156 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012144:	4b31      	ldr	r3, [pc, #196]	; (801220c <etharp_output+0x1fc>)
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	461a      	mov	r2, r3
 801214a:	68b9      	ldr	r1, [r7, #8]
 801214c:	68f8      	ldr	r0, [r7, #12]
 801214e:	f7ff fec5 	bl	8011edc <etharp_output_to_arp_index>
 8012152:	4603      	mov	r3, r0
 8012154:	e04a      	b.n	80121ec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012156:	2300      	movs	r3, #0
 8012158:	75fb      	strb	r3, [r7, #23]
 801215a:	e031      	b.n	80121c0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801215c:	7dfa      	ldrb	r2, [r7, #23]
 801215e:	492c      	ldr	r1, [pc, #176]	; (8012210 <etharp_output+0x200>)
 8012160:	4613      	mov	r3, r2
 8012162:	005b      	lsls	r3, r3, #1
 8012164:	4413      	add	r3, r2
 8012166:	00db      	lsls	r3, r3, #3
 8012168:	440b      	add	r3, r1
 801216a:	3314      	adds	r3, #20
 801216c:	781b      	ldrb	r3, [r3, #0]
 801216e:	2b01      	cmp	r3, #1
 8012170:	d923      	bls.n	80121ba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012172:	7dfa      	ldrb	r2, [r7, #23]
 8012174:	4926      	ldr	r1, [pc, #152]	; (8012210 <etharp_output+0x200>)
 8012176:	4613      	mov	r3, r2
 8012178:	005b      	lsls	r3, r3, #1
 801217a:	4413      	add	r3, r2
 801217c:	00db      	lsls	r3, r3, #3
 801217e:	440b      	add	r3, r1
 8012180:	3308      	adds	r3, #8
 8012182:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012184:	68fa      	ldr	r2, [r7, #12]
 8012186:	429a      	cmp	r2, r3
 8012188:	d117      	bne.n	80121ba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801218a:	69bb      	ldr	r3, [r7, #24]
 801218c:	6819      	ldr	r1, [r3, #0]
 801218e:	7dfa      	ldrb	r2, [r7, #23]
 8012190:	481f      	ldr	r0, [pc, #124]	; (8012210 <etharp_output+0x200>)
 8012192:	4613      	mov	r3, r2
 8012194:	005b      	lsls	r3, r3, #1
 8012196:	4413      	add	r3, r2
 8012198:	00db      	lsls	r3, r3, #3
 801219a:	4403      	add	r3, r0
 801219c:	3304      	adds	r3, #4
 801219e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80121a0:	4299      	cmp	r1, r3
 80121a2:	d10a      	bne.n	80121ba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80121a4:	4a19      	ldr	r2, [pc, #100]	; (801220c <etharp_output+0x1fc>)
 80121a6:	7dfb      	ldrb	r3, [r7, #23]
 80121a8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80121aa:	7dfb      	ldrb	r3, [r7, #23]
 80121ac:	461a      	mov	r2, r3
 80121ae:	68b9      	ldr	r1, [r7, #8]
 80121b0:	68f8      	ldr	r0, [r7, #12]
 80121b2:	f7ff fe93 	bl	8011edc <etharp_output_to_arp_index>
 80121b6:	4603      	mov	r3, r0
 80121b8:	e018      	b.n	80121ec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80121ba:	7dfb      	ldrb	r3, [r7, #23]
 80121bc:	3301      	adds	r3, #1
 80121be:	75fb      	strb	r3, [r7, #23]
 80121c0:	7dfb      	ldrb	r3, [r7, #23]
 80121c2:	2b09      	cmp	r3, #9
 80121c4:	d9ca      	bls.n	801215c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80121c6:	68ba      	ldr	r2, [r7, #8]
 80121c8:	69b9      	ldr	r1, [r7, #24]
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f000 f822 	bl	8012214 <etharp_query>
 80121d0:	4603      	mov	r3, r0
 80121d2:	e00b      	b.n	80121ec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80121da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	68b9      	ldr	r1, [r7, #8]
 80121e4:	68f8      	ldr	r0, [r7, #12]
 80121e6:	f001 fd63 	bl	8013cb0 <ethernet_output>
 80121ea:	4603      	mov	r3, r0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3720      	adds	r7, #32
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	08017a60 	.word	0x08017a60
 80121f8:	08017bb0 	.word	0x08017bb0
 80121fc:	08017ad8 	.word	0x08017ad8
 8012200:	08017c00 	.word	0x08017c00
 8012204:	08017ba0 	.word	0x08017ba0
 8012208:	0801a758 	.word	0x0801a758
 801220c:	2000b044 	.word	0x2000b044
 8012210:	2000af54 	.word	0x2000af54

08012214 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b08c      	sub	sp, #48	; 0x30
 8012218:	af02      	add	r7, sp, #8
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	332a      	adds	r3, #42	; 0x2a
 8012224:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012226:	23ff      	movs	r3, #255	; 0xff
 8012228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801222c:	2300      	movs	r3, #0
 801222e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	68f9      	ldr	r1, [r7, #12]
 8012236:	4618      	mov	r0, r3
 8012238:	f000 fe2c 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 801223c:	4603      	mov	r3, r0
 801223e:	2b00      	cmp	r3, #0
 8012240:	d10c      	bne.n	801225c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801224a:	2be0      	cmp	r3, #224	; 0xe0
 801224c:	d006      	beq.n	801225c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d003      	beq.n	801225c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d102      	bne.n	8012262 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801225c:	f06f 030f 	mvn.w	r3, #15
 8012260:	e101      	b.n	8012466 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012262:	68fa      	ldr	r2, [r7, #12]
 8012264:	2101      	movs	r1, #1
 8012266:	68b8      	ldr	r0, [r7, #8]
 8012268:	f7ff fb5c 	bl	8011924 <etharp_find_entry>
 801226c:	4603      	mov	r3, r0
 801226e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012274:	2b00      	cmp	r3, #0
 8012276:	da02      	bge.n	801227e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012278:	8a7b      	ldrh	r3, [r7, #18]
 801227a:	b25b      	sxtb	r3, r3
 801227c:	e0f3      	b.n	8012466 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801227e:	8a7b      	ldrh	r3, [r7, #18]
 8012280:	2b7e      	cmp	r3, #126	; 0x7e
 8012282:	d906      	bls.n	8012292 <etharp_query+0x7e>
 8012284:	4b7a      	ldr	r3, [pc, #488]	; (8012470 <etharp_query+0x25c>)
 8012286:	f240 32c1 	movw	r2, #961	; 0x3c1
 801228a:	497a      	ldr	r1, [pc, #488]	; (8012474 <etharp_query+0x260>)
 801228c:	487a      	ldr	r0, [pc, #488]	; (8012478 <etharp_query+0x264>)
 801228e:	f001 fdbb 	bl	8013e08 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012292:	8a7b      	ldrh	r3, [r7, #18]
 8012294:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012296:	7c7a      	ldrb	r2, [r7, #17]
 8012298:	4978      	ldr	r1, [pc, #480]	; (801247c <etharp_query+0x268>)
 801229a:	4613      	mov	r3, r2
 801229c:	005b      	lsls	r3, r3, #1
 801229e:	4413      	add	r3, r2
 80122a0:	00db      	lsls	r3, r3, #3
 80122a2:	440b      	add	r3, r1
 80122a4:	3314      	adds	r3, #20
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d115      	bne.n	80122d8 <etharp_query+0xc4>
    is_new_entry = 1;
 80122ac:	2301      	movs	r3, #1
 80122ae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80122b0:	7c7a      	ldrb	r2, [r7, #17]
 80122b2:	4972      	ldr	r1, [pc, #456]	; (801247c <etharp_query+0x268>)
 80122b4:	4613      	mov	r3, r2
 80122b6:	005b      	lsls	r3, r3, #1
 80122b8:	4413      	add	r3, r2
 80122ba:	00db      	lsls	r3, r3, #3
 80122bc:	440b      	add	r3, r1
 80122be:	3314      	adds	r3, #20
 80122c0:	2201      	movs	r2, #1
 80122c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80122c4:	7c7a      	ldrb	r2, [r7, #17]
 80122c6:	496d      	ldr	r1, [pc, #436]	; (801247c <etharp_query+0x268>)
 80122c8:	4613      	mov	r3, r2
 80122ca:	005b      	lsls	r3, r3, #1
 80122cc:	4413      	add	r3, r2
 80122ce:	00db      	lsls	r3, r3, #3
 80122d0:	440b      	add	r3, r1
 80122d2:	3308      	adds	r3, #8
 80122d4:	68fa      	ldr	r2, [r7, #12]
 80122d6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80122d8:	7c7a      	ldrb	r2, [r7, #17]
 80122da:	4968      	ldr	r1, [pc, #416]	; (801247c <etharp_query+0x268>)
 80122dc:	4613      	mov	r3, r2
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	4413      	add	r3, r2
 80122e2:	00db      	lsls	r3, r3, #3
 80122e4:	440b      	add	r3, r1
 80122e6:	3314      	adds	r3, #20
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d011      	beq.n	8012312 <etharp_query+0xfe>
 80122ee:	7c7a      	ldrb	r2, [r7, #17]
 80122f0:	4962      	ldr	r1, [pc, #392]	; (801247c <etharp_query+0x268>)
 80122f2:	4613      	mov	r3, r2
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	4413      	add	r3, r2
 80122f8:	00db      	lsls	r3, r3, #3
 80122fa:	440b      	add	r3, r1
 80122fc:	3314      	adds	r3, #20
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	2b01      	cmp	r3, #1
 8012302:	d806      	bhi.n	8012312 <etharp_query+0xfe>
 8012304:	4b5a      	ldr	r3, [pc, #360]	; (8012470 <etharp_query+0x25c>)
 8012306:	f240 32cd 	movw	r2, #973	; 0x3cd
 801230a:	495d      	ldr	r1, [pc, #372]	; (8012480 <etharp_query+0x26c>)
 801230c:	485a      	ldr	r0, [pc, #360]	; (8012478 <etharp_query+0x264>)
 801230e:	f001 fd7b 	bl	8013e08 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012312:	6a3b      	ldr	r3, [r7, #32]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d102      	bne.n	801231e <etharp_query+0x10a>
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d10c      	bne.n	8012338 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801231e:	68b9      	ldr	r1, [r7, #8]
 8012320:	68f8      	ldr	r0, [r7, #12]
 8012322:	f000 f963 	bl	80125ec <etharp_request>
 8012326:	4603      	mov	r3, r0
 8012328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d102      	bne.n	8012338 <etharp_query+0x124>
      return result;
 8012332:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012336:	e096      	b.n	8012466 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <etharp_query+0x138>
 801233e:	4b4c      	ldr	r3, [pc, #304]	; (8012470 <etharp_query+0x25c>)
 8012340:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012344:	494f      	ldr	r1, [pc, #316]	; (8012484 <etharp_query+0x270>)
 8012346:	484c      	ldr	r0, [pc, #304]	; (8012478 <etharp_query+0x264>)
 8012348:	f001 fd5e 	bl	8013e08 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801234c:	7c7a      	ldrb	r2, [r7, #17]
 801234e:	494b      	ldr	r1, [pc, #300]	; (801247c <etharp_query+0x268>)
 8012350:	4613      	mov	r3, r2
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	4413      	add	r3, r2
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	440b      	add	r3, r1
 801235a:	3314      	adds	r3, #20
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	2b01      	cmp	r3, #1
 8012360:	d917      	bls.n	8012392 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012362:	4a49      	ldr	r2, [pc, #292]	; (8012488 <etharp_query+0x274>)
 8012364:	7c7b      	ldrb	r3, [r7, #17]
 8012366:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012368:	7c7a      	ldrb	r2, [r7, #17]
 801236a:	4613      	mov	r3, r2
 801236c:	005b      	lsls	r3, r3, #1
 801236e:	4413      	add	r3, r2
 8012370:	00db      	lsls	r3, r3, #3
 8012372:	3308      	adds	r3, #8
 8012374:	4a41      	ldr	r2, [pc, #260]	; (801247c <etharp_query+0x268>)
 8012376:	4413      	add	r3, r2
 8012378:	3304      	adds	r3, #4
 801237a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801237e:	9200      	str	r2, [sp, #0]
 8012380:	697a      	ldr	r2, [r7, #20]
 8012382:	6879      	ldr	r1, [r7, #4]
 8012384:	68f8      	ldr	r0, [r7, #12]
 8012386:	f001 fc93 	bl	8013cb0 <ethernet_output>
 801238a:	4603      	mov	r3, r0
 801238c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012390:	e067      	b.n	8012462 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012392:	7c7a      	ldrb	r2, [r7, #17]
 8012394:	4939      	ldr	r1, [pc, #228]	; (801247c <etharp_query+0x268>)
 8012396:	4613      	mov	r3, r2
 8012398:	005b      	lsls	r3, r3, #1
 801239a:	4413      	add	r3, r2
 801239c:	00db      	lsls	r3, r3, #3
 801239e:	440b      	add	r3, r1
 80123a0:	3314      	adds	r3, #20
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d15c      	bne.n	8012462 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80123a8:	2300      	movs	r3, #0
 80123aa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123b0:	e01c      	b.n	80123ec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	895a      	ldrh	r2, [r3, #10]
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	891b      	ldrh	r3, [r3, #8]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d10a      	bne.n	80123d4 <etharp_query+0x1c0>
 80123be:	69fb      	ldr	r3, [r7, #28]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d006      	beq.n	80123d4 <etharp_query+0x1c0>
 80123c6:	4b2a      	ldr	r3, [pc, #168]	; (8012470 <etharp_query+0x25c>)
 80123c8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80123cc:	492f      	ldr	r1, [pc, #188]	; (801248c <etharp_query+0x278>)
 80123ce:	482a      	ldr	r0, [pc, #168]	; (8012478 <etharp_query+0x264>)
 80123d0:	f001 fd1a 	bl	8013e08 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	7b1b      	ldrb	r3, [r3, #12]
 80123d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d002      	beq.n	80123e6 <etharp_query+0x1d2>
        copy_needed = 1;
 80123e0:	2301      	movs	r3, #1
 80123e2:	61bb      	str	r3, [r7, #24]
        break;
 80123e4:	e005      	b.n	80123f2 <etharp_query+0x1de>
      }
      p = p->next;
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d1df      	bne.n	80123b2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80123f2:	69bb      	ldr	r3, [r7, #24]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d007      	beq.n	8012408 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80123fe:	200e      	movs	r0, #14
 8012400:	f7f7 fb8e 	bl	8009b20 <pbuf_clone>
 8012404:	61f8      	str	r0, [r7, #28]
 8012406:	e004      	b.n	8012412 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801240c:	69f8      	ldr	r0, [r7, #28]
 801240e:	f7f7 f9bb 	bl	8009788 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d021      	beq.n	801245c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012418:	7c7a      	ldrb	r2, [r7, #17]
 801241a:	4918      	ldr	r1, [pc, #96]	; (801247c <etharp_query+0x268>)
 801241c:	4613      	mov	r3, r2
 801241e:	005b      	lsls	r3, r3, #1
 8012420:	4413      	add	r3, r2
 8012422:	00db      	lsls	r3, r3, #3
 8012424:	440b      	add	r3, r1
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00a      	beq.n	8012442 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801242c:	7c7a      	ldrb	r2, [r7, #17]
 801242e:	4913      	ldr	r1, [pc, #76]	; (801247c <etharp_query+0x268>)
 8012430:	4613      	mov	r3, r2
 8012432:	005b      	lsls	r3, r3, #1
 8012434:	4413      	add	r3, r2
 8012436:	00db      	lsls	r3, r3, #3
 8012438:	440b      	add	r3, r1
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	4618      	mov	r0, r3
 801243e:	f7f7 f903 	bl	8009648 <pbuf_free>
      }
      arp_table[i].q = p;
 8012442:	7c7a      	ldrb	r2, [r7, #17]
 8012444:	490d      	ldr	r1, [pc, #52]	; (801247c <etharp_query+0x268>)
 8012446:	4613      	mov	r3, r2
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	4413      	add	r3, r2
 801244c:	00db      	lsls	r3, r3, #3
 801244e:	440b      	add	r3, r1
 8012450:	69fa      	ldr	r2, [r7, #28]
 8012452:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012454:	2300      	movs	r3, #0
 8012456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801245a:	e002      	b.n	8012462 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801245c:	23ff      	movs	r3, #255	; 0xff
 801245e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012462:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012466:	4618      	mov	r0, r3
 8012468:	3728      	adds	r7, #40	; 0x28
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	08017a60 	.word	0x08017a60
 8012474:	08017c0c 	.word	0x08017c0c
 8012478:	08017ad8 	.word	0x08017ad8
 801247c:	2000af54 	.word	0x2000af54
 8012480:	08017c1c 	.word	0x08017c1c
 8012484:	08017c00 	.word	0x08017c00
 8012488:	2000b044 	.word	0x2000b044
 801248c:	08017c44 	.word	0x08017c44

08012490 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b08a      	sub	sp, #40	; 0x28
 8012494:	af02      	add	r7, sp, #8
 8012496:	60f8      	str	r0, [r7, #12]
 8012498:	60b9      	str	r1, [r7, #8]
 801249a:	607a      	str	r2, [r7, #4]
 801249c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801249e:	2300      	movs	r3, #0
 80124a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d106      	bne.n	80124b6 <etharp_raw+0x26>
 80124a8:	4b3a      	ldr	r3, [pc, #232]	; (8012594 <etharp_raw+0x104>)
 80124aa:	f240 4257 	movw	r2, #1111	; 0x457
 80124ae:	493a      	ldr	r1, [pc, #232]	; (8012598 <etharp_raw+0x108>)
 80124b0:	483a      	ldr	r0, [pc, #232]	; (801259c <etharp_raw+0x10c>)
 80124b2:	f001 fca9 	bl	8013e08 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80124b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124ba:	211c      	movs	r1, #28
 80124bc:	200e      	movs	r0, #14
 80124be:	f7f6 fddf 	bl	8009080 <pbuf_alloc>
 80124c2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80124c4:	69bb      	ldr	r3, [r7, #24]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d102      	bne.n	80124d0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80124ca:	f04f 33ff 	mov.w	r3, #4294967295
 80124ce:	e05d      	b.n	801258c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80124d0:	69bb      	ldr	r3, [r7, #24]
 80124d2:	895b      	ldrh	r3, [r3, #10]
 80124d4:	2b1b      	cmp	r3, #27
 80124d6:	d806      	bhi.n	80124e6 <etharp_raw+0x56>
 80124d8:	4b2e      	ldr	r3, [pc, #184]	; (8012594 <etharp_raw+0x104>)
 80124da:	f240 4262 	movw	r2, #1122	; 0x462
 80124de:	4930      	ldr	r1, [pc, #192]	; (80125a0 <etharp_raw+0x110>)
 80124e0:	482e      	ldr	r0, [pc, #184]	; (801259c <etharp_raw+0x10c>)
 80124e2:	f001 fc91 	bl	8013e08 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80124ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7f5 fd40 	bl	8007f74 <lwip_htons>
 80124f4:	4603      	mov	r3, r0
 80124f6:	461a      	mov	r2, r3
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012502:	2b06      	cmp	r3, #6
 8012504:	d006      	beq.n	8012514 <etharp_raw+0x84>
 8012506:	4b23      	ldr	r3, [pc, #140]	; (8012594 <etharp_raw+0x104>)
 8012508:	f240 4269 	movw	r2, #1129	; 0x469
 801250c:	4925      	ldr	r1, [pc, #148]	; (80125a4 <etharp_raw+0x114>)
 801250e:	4823      	ldr	r0, [pc, #140]	; (801259c <etharp_raw+0x10c>)
 8012510:	f001 fc7a 	bl	8013e08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	3308      	adds	r3, #8
 8012518:	2206      	movs	r2, #6
 801251a:	6839      	ldr	r1, [r7, #0]
 801251c:	4618      	mov	r0, r3
 801251e:	f001 fc43 	bl	8013da8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	3312      	adds	r3, #18
 8012526:	2206      	movs	r2, #6
 8012528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801252a:	4618      	mov	r0, r3
 801252c:	f001 fc3c 	bl	8013da8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	330e      	adds	r3, #14
 8012534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012536:	6812      	ldr	r2, [r2, #0]
 8012538:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	3318      	adds	r3, #24
 801253e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012540:	6812      	ldr	r2, [r2, #0]
 8012542:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	2200      	movs	r2, #0
 8012548:	701a      	strb	r2, [r3, #0]
 801254a:	2200      	movs	r2, #0
 801254c:	f042 0201 	orr.w	r2, r2, #1
 8012550:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	2200      	movs	r2, #0
 8012556:	f042 0208 	orr.w	r2, r2, #8
 801255a:	709a      	strb	r2, [r3, #2]
 801255c:	2200      	movs	r2, #0
 801255e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	2206      	movs	r2, #6
 8012564:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	2204      	movs	r2, #4
 801256a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801256c:	f640 0306 	movw	r3, #2054	; 0x806
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	68ba      	ldr	r2, [r7, #8]
 8012576:	69b9      	ldr	r1, [r7, #24]
 8012578:	68f8      	ldr	r0, [r7, #12]
 801257a:	f001 fb99 	bl	8013cb0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801257e:	69b8      	ldr	r0, [r7, #24]
 8012580:	f7f7 f862 	bl	8009648 <pbuf_free>
  p = NULL;
 8012584:	2300      	movs	r3, #0
 8012586:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012588:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3720      	adds	r7, #32
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	08017a60 	.word	0x08017a60
 8012598:	08017bb0 	.word	0x08017bb0
 801259c:	08017ad8 	.word	0x08017ad8
 80125a0:	08017c60 	.word	0x08017c60
 80125a4:	08017c94 	.word	0x08017c94

080125a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b088      	sub	sp, #32
 80125ac:	af04      	add	r7, sp, #16
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125c4:	2201      	movs	r2, #1
 80125c6:	9203      	str	r2, [sp, #12]
 80125c8:	68ba      	ldr	r2, [r7, #8]
 80125ca:	9202      	str	r2, [sp, #8]
 80125cc:	4a06      	ldr	r2, [pc, #24]	; (80125e8 <etharp_request_dst+0x40>)
 80125ce:	9201      	str	r2, [sp, #4]
 80125d0:	9300      	str	r3, [sp, #0]
 80125d2:	4603      	mov	r3, r0
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f7ff ff5a 	bl	8012490 <etharp_raw>
 80125dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3710      	adds	r7, #16
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	0801a760 	.word	0x0801a760

080125ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80125f6:	4a05      	ldr	r2, [pc, #20]	; (801260c <etharp_request+0x20>)
 80125f8:	6839      	ldr	r1, [r7, #0]
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7ff ffd4 	bl	80125a8 <etharp_request_dst>
 8012600:	4603      	mov	r3, r0
}
 8012602:	4618      	mov	r0, r3
 8012604:	3708      	adds	r7, #8
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	0801a758 	.word	0x0801a758

08012610 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b08e      	sub	sp, #56	; 0x38
 8012614:	af04      	add	r7, sp, #16
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801261a:	4b79      	ldr	r3, [pc, #484]	; (8012800 <icmp_input+0x1f0>)
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	f003 030f 	and.w	r3, r3, #15
 8012628:	b2db      	uxtb	r3, r3
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	b2db      	uxtb	r3, r3
 801262e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012632:	2b13      	cmp	r3, #19
 8012634:	f240 80cd 	bls.w	80127d2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	895b      	ldrh	r3, [r3, #10]
 801263c:	2b03      	cmp	r3, #3
 801263e:	f240 80ca 	bls.w	80127d6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801264c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012650:	2b00      	cmp	r3, #0
 8012652:	f000 80b7 	beq.w	80127c4 <icmp_input+0x1b4>
 8012656:	2b08      	cmp	r3, #8
 8012658:	f040 80b7 	bne.w	80127ca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801265c:	4b69      	ldr	r3, [pc, #420]	; (8012804 <icmp_input+0x1f4>)
 801265e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012660:	4b67      	ldr	r3, [pc, #412]	; (8012800 <icmp_input+0x1f0>)
 8012662:	695b      	ldr	r3, [r3, #20]
 8012664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012668:	2be0      	cmp	r3, #224	; 0xe0
 801266a:	f000 80bb 	beq.w	80127e4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801266e:	4b64      	ldr	r3, [pc, #400]	; (8012800 <icmp_input+0x1f0>)
 8012670:	695b      	ldr	r3, [r3, #20]
 8012672:	4a63      	ldr	r2, [pc, #396]	; (8012800 <icmp_input+0x1f0>)
 8012674:	6812      	ldr	r2, [r2, #0]
 8012676:	4611      	mov	r1, r2
 8012678:	4618      	mov	r0, r3
 801267a:	f000 fc0b 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 801267e:	4603      	mov	r3, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	f040 80b1 	bne.w	80127e8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	891b      	ldrh	r3, [r3, #8]
 801268a:	2b07      	cmp	r3, #7
 801268c:	f240 80a5 	bls.w	80127da <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012692:	330e      	adds	r3, #14
 8012694:	4619      	mov	r1, r3
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f7f6 ff40 	bl	800951c <pbuf_add_header>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d04b      	beq.n	801273a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	891a      	ldrh	r2, [r3, #8]
 80126a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126a8:	4413      	add	r3, r2
 80126aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	891b      	ldrh	r3, [r3, #8]
 80126b0:	8b7a      	ldrh	r2, [r7, #26]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	f0c0 809a 	bcc.w	80127ec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80126b8:	8b7b      	ldrh	r3, [r7, #26]
 80126ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126be:	4619      	mov	r1, r3
 80126c0:	200e      	movs	r0, #14
 80126c2:	f7f6 fcdd 	bl	8009080 <pbuf_alloc>
 80126c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	f000 8090 	beq.w	80127f0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	895b      	ldrh	r3, [r3, #10]
 80126d4:	461a      	mov	r2, r3
 80126d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126d8:	3308      	adds	r3, #8
 80126da:	429a      	cmp	r2, r3
 80126dc:	d203      	bcs.n	80126e6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80126de:	6978      	ldr	r0, [r7, #20]
 80126e0:	f7f6 ffb2 	bl	8009648 <pbuf_free>
          goto icmperr;
 80126e4:	e085      	b.n	80127f2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80126ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126ee:	4618      	mov	r0, r3
 80126f0:	f001 fb5a 	bl	8013da8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80126f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126f6:	4619      	mov	r1, r3
 80126f8:	6978      	ldr	r0, [r7, #20]
 80126fa:	f7f6 ff1f 	bl	800953c <pbuf_remove_header>
 80126fe:	4603      	mov	r3, r0
 8012700:	2b00      	cmp	r3, #0
 8012702:	d009      	beq.n	8012718 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012704:	4b40      	ldr	r3, [pc, #256]	; (8012808 <icmp_input+0x1f8>)
 8012706:	22b6      	movs	r2, #182	; 0xb6
 8012708:	4940      	ldr	r1, [pc, #256]	; (801280c <icmp_input+0x1fc>)
 801270a:	4841      	ldr	r0, [pc, #260]	; (8012810 <icmp_input+0x200>)
 801270c:	f001 fb7c 	bl	8013e08 <iprintf>
          pbuf_free(r);
 8012710:	6978      	ldr	r0, [r7, #20]
 8012712:	f7f6 ff99 	bl	8009648 <pbuf_free>
          goto icmperr;
 8012716:	e06c      	b.n	80127f2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012718:	6879      	ldr	r1, [r7, #4]
 801271a:	6978      	ldr	r0, [r7, #20]
 801271c:	f7f7 f8bc 	bl	8009898 <pbuf_copy>
 8012720:	4603      	mov	r3, r0
 8012722:	2b00      	cmp	r3, #0
 8012724:	d003      	beq.n	801272e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012726:	6978      	ldr	r0, [r7, #20]
 8012728:	f7f6 ff8e 	bl	8009648 <pbuf_free>
          goto icmperr;
 801272c:	e061      	b.n	80127f2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f7f6 ff8a 	bl	8009648 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	607b      	str	r3, [r7, #4]
 8012738:	e00f      	b.n	801275a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801273a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801273c:	330e      	adds	r3, #14
 801273e:	4619      	mov	r1, r3
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7f6 fefb 	bl	800953c <pbuf_remove_header>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d006      	beq.n	801275a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801274c:	4b2e      	ldr	r3, [pc, #184]	; (8012808 <icmp_input+0x1f8>)
 801274e:	22c7      	movs	r2, #199	; 0xc7
 8012750:	4930      	ldr	r1, [pc, #192]	; (8012814 <icmp_input+0x204>)
 8012752:	482f      	ldr	r0, [pc, #188]	; (8012810 <icmp_input+0x200>)
 8012754:	f001 fb58 	bl	8013e08 <iprintf>
          goto icmperr;
 8012758:	e04b      	b.n	80127f2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012762:	4619      	mov	r1, r3
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7f6 fed9 	bl	800951c <pbuf_add_header>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d12b      	bne.n	80127c8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012776:	69fb      	ldr	r3, [r7, #28]
 8012778:	681a      	ldr	r2, [r3, #0]
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801277e:	4b20      	ldr	r3, [pc, #128]	; (8012800 <icmp_input+0x1f0>)
 8012780:	691a      	ldr	r2, [r3, #16]
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	2200      	movs	r2, #0
 801278a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	2200      	movs	r2, #0
 8012790:	709a      	strb	r2, [r3, #2]
 8012792:	2200      	movs	r2, #0
 8012794:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	22ff      	movs	r2, #255	; 0xff
 801279a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2200      	movs	r2, #0
 80127a0:	729a      	strb	r2, [r3, #10]
 80127a2:	2200      	movs	r2, #0
 80127a4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	9302      	str	r3, [sp, #8]
 80127aa:	2301      	movs	r3, #1
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	2300      	movs	r3, #0
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	23ff      	movs	r3, #255	; 0xff
 80127b4:	2200      	movs	r2, #0
 80127b6:	69f9      	ldr	r1, [r7, #28]
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f000 fa93 	bl	8012ce4 <ip4_output_if>
 80127be:	4603      	mov	r3, r0
 80127c0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80127c2:	e001      	b.n	80127c8 <icmp_input+0x1b8>
      break;
 80127c4:	bf00      	nop
 80127c6:	e000      	b.n	80127ca <icmp_input+0x1ba>
      break;
 80127c8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7f6 ff3c 	bl	8009648 <pbuf_free>
  return;
 80127d0:	e013      	b.n	80127fa <icmp_input+0x1ea>
    goto lenerr;
 80127d2:	bf00      	nop
 80127d4:	e002      	b.n	80127dc <icmp_input+0x1cc>
    goto lenerr;
 80127d6:	bf00      	nop
 80127d8:	e000      	b.n	80127dc <icmp_input+0x1cc>
        goto lenerr;
 80127da:	bf00      	nop
lenerr:
  pbuf_free(p);
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f7f6 ff33 	bl	8009648 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80127e2:	e00a      	b.n	80127fa <icmp_input+0x1ea>
        goto icmperr;
 80127e4:	bf00      	nop
 80127e6:	e004      	b.n	80127f2 <icmp_input+0x1e2>
        goto icmperr;
 80127e8:	bf00      	nop
 80127ea:	e002      	b.n	80127f2 <icmp_input+0x1e2>
          goto icmperr;
 80127ec:	bf00      	nop
 80127ee:	e000      	b.n	80127f2 <icmp_input+0x1e2>
          goto icmperr;
 80127f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f7f6 ff28 	bl	8009648 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80127f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80127fa:	3728      	adds	r7, #40	; 0x28
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	20005770 	.word	0x20005770
 8012804:	20005784 	.word	0x20005784
 8012808:	08017cd8 	.word	0x08017cd8
 801280c:	08017d10 	.word	0x08017d10
 8012810:	08017d48 	.word	0x08017d48
 8012814:	08017d70 	.word	0x08017d70

08012818 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	460b      	mov	r3, r1
 8012822:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012824:	78fb      	ldrb	r3, [r7, #3]
 8012826:	461a      	mov	r2, r3
 8012828:	2103      	movs	r1, #3
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f000 f814 	bl	8012858 <icmp_send_response>
}
 8012830:	bf00      	nop
 8012832:	3708      	adds	r7, #8
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	460b      	mov	r3, r1
 8012842:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012844:	78fb      	ldrb	r3, [r7, #3]
 8012846:	461a      	mov	r2, r3
 8012848:	210b      	movs	r1, #11
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f000 f804 	bl	8012858 <icmp_send_response>
}
 8012850:	bf00      	nop
 8012852:	3708      	adds	r7, #8
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b08c      	sub	sp, #48	; 0x30
 801285c:	af04      	add	r7, sp, #16
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	460b      	mov	r3, r1
 8012862:	70fb      	strb	r3, [r7, #3]
 8012864:	4613      	mov	r3, r2
 8012866:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012868:	f44f 7220 	mov.w	r2, #640	; 0x280
 801286c:	2124      	movs	r1, #36	; 0x24
 801286e:	2022      	movs	r0, #34	; 0x22
 8012870:	f7f6 fc06 	bl	8009080 <pbuf_alloc>
 8012874:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012876:	69fb      	ldr	r3, [r7, #28]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d04c      	beq.n	8012916 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	895b      	ldrh	r3, [r3, #10]
 8012880:	2b23      	cmp	r3, #35	; 0x23
 8012882:	d806      	bhi.n	8012892 <icmp_send_response+0x3a>
 8012884:	4b26      	ldr	r3, [pc, #152]	; (8012920 <icmp_send_response+0xc8>)
 8012886:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801288a:	4926      	ldr	r1, [pc, #152]	; (8012924 <icmp_send_response+0xcc>)
 801288c:	4826      	ldr	r0, [pc, #152]	; (8012928 <icmp_send_response+0xd0>)
 801288e:	f001 fabb 	bl	8013e08 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012898:	69fb      	ldr	r3, [r7, #28]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	78fa      	ldrb	r2, [r7, #3]
 80128a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	78ba      	ldrb	r2, [r7, #2]
 80128a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	2200      	movs	r2, #0
 80128ae:	711a      	strb	r2, [r3, #4]
 80128b0:	2200      	movs	r2, #0
 80128b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	2200      	movs	r2, #0
 80128b8:	719a      	strb	r2, [r3, #6]
 80128ba:	2200      	movs	r2, #0
 80128bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	685b      	ldr	r3, [r3, #4]
 80128c2:	f103 0008 	add.w	r0, r3, #8
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	221c      	movs	r2, #28
 80128cc:	4619      	mov	r1, r3
 80128ce:	f001 fa6b 	bl	8013da8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80128d8:	f107 030c 	add.w	r3, r7, #12
 80128dc:	4618      	mov	r0, r3
 80128de:	f000 f825 	bl	801292c <ip4_route>
 80128e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d011      	beq.n	801290e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	2200      	movs	r2, #0
 80128ee:	709a      	strb	r2, [r3, #2]
 80128f0:	2200      	movs	r2, #0
 80128f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80128f4:	f107 020c 	add.w	r2, r7, #12
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	9302      	str	r3, [sp, #8]
 80128fc:	2301      	movs	r3, #1
 80128fe:	9301      	str	r3, [sp, #4]
 8012900:	2300      	movs	r3, #0
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	23ff      	movs	r3, #255	; 0xff
 8012906:	2100      	movs	r1, #0
 8012908:	69f8      	ldr	r0, [r7, #28]
 801290a:	f000 f9eb 	bl	8012ce4 <ip4_output_if>
  }
  pbuf_free(q);
 801290e:	69f8      	ldr	r0, [r7, #28]
 8012910:	f7f6 fe9a 	bl	8009648 <pbuf_free>
 8012914:	e000      	b.n	8012918 <icmp_send_response+0xc0>
    return;
 8012916:	bf00      	nop
}
 8012918:	3720      	adds	r7, #32
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	08017cd8 	.word	0x08017cd8
 8012924:	08017da4 	.word	0x08017da4
 8012928:	08017d48 	.word	0x08017d48

0801292c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801292c:	b480      	push	{r7}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012934:	4b33      	ldr	r3, [pc, #204]	; (8012a04 <ip4_route+0xd8>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	60fb      	str	r3, [r7, #12]
 801293a:	e036      	b.n	80129aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012942:	f003 0301 	and.w	r3, r3, #1
 8012946:	b2db      	uxtb	r3, r3
 8012948:	2b00      	cmp	r3, #0
 801294a:	d02b      	beq.n	80129a4 <ip4_route+0x78>
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012952:	089b      	lsrs	r3, r3, #2
 8012954:	f003 0301 	and.w	r3, r3, #1
 8012958:	b2db      	uxtb	r3, r3
 801295a:	2b00      	cmp	r3, #0
 801295c:	d022      	beq.n	80129a4 <ip4_route+0x78>
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	3304      	adds	r3, #4
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d01d      	beq.n	80129a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	3304      	adds	r3, #4
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	405a      	eors	r2, r3
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	3308      	adds	r3, #8
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4013      	ands	r3, r2
 801297c:	2b00      	cmp	r3, #0
 801297e:	d101      	bne.n	8012984 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	e038      	b.n	80129f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801298a:	f003 0302 	and.w	r3, r3, #2
 801298e:	2b00      	cmp	r3, #0
 8012990:	d108      	bne.n	80129a4 <ip4_route+0x78>
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681a      	ldr	r2, [r3, #0]
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	330c      	adds	r3, #12
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	429a      	cmp	r2, r3
 801299e:	d101      	bne.n	80129a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	e028      	b.n	80129f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	60fb      	str	r3, [r7, #12]
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1c5      	bne.n	801293c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80129b0:	4b15      	ldr	r3, [pc, #84]	; (8012a08 <ip4_route+0xdc>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d01a      	beq.n	80129ee <ip4_route+0xc2>
 80129b8:	4b13      	ldr	r3, [pc, #76]	; (8012a08 <ip4_route+0xdc>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80129c0:	f003 0301 	and.w	r3, r3, #1
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d012      	beq.n	80129ee <ip4_route+0xc2>
 80129c8:	4b0f      	ldr	r3, [pc, #60]	; (8012a08 <ip4_route+0xdc>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80129d0:	f003 0304 	and.w	r3, r3, #4
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d00a      	beq.n	80129ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80129d8:	4b0b      	ldr	r3, [pc, #44]	; (8012a08 <ip4_route+0xdc>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	3304      	adds	r3, #4
 80129de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d004      	beq.n	80129ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	b2db      	uxtb	r3, r3
 80129ea:	2b7f      	cmp	r3, #127	; 0x7f
 80129ec:	d101      	bne.n	80129f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80129ee:	2300      	movs	r3, #0
 80129f0:	e001      	b.n	80129f6 <ip4_route+0xca>
  }

  return netif_default;
 80129f2:	4b05      	ldr	r3, [pc, #20]	; (8012a08 <ip4_route+0xdc>)
 80129f4:	681b      	ldr	r3, [r3, #0]
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3714      	adds	r7, #20
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr
 8012a02:	bf00      	nop
 8012a04:	2000aeb4 	.word	0x2000aeb4
 8012a08:	2000aeb8 	.word	0x2000aeb8

08012a0c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a1a:	f003 0301 	and.w	r3, r3, #1
 8012a1e:	b2db      	uxtb	r3, r3
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d016      	beq.n	8012a52 <ip4_input_accept+0x46>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3304      	adds	r3, #4
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d011      	beq.n	8012a52 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012a2e:	4b0b      	ldr	r3, [pc, #44]	; (8012a5c <ip4_input_accept+0x50>)
 8012a30:	695a      	ldr	r2, [r3, #20]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	3304      	adds	r3, #4
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d008      	beq.n	8012a4e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012a3c:	4b07      	ldr	r3, [pc, #28]	; (8012a5c <ip4_input_accept+0x50>)
 8012a3e:	695b      	ldr	r3, [r3, #20]
 8012a40:	6879      	ldr	r1, [r7, #4]
 8012a42:	4618      	mov	r0, r3
 8012a44:	f000 fa26 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 8012a48:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d001      	beq.n	8012a52 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012a4e:	2301      	movs	r3, #1
 8012a50:	e000      	b.n	8012a54 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012a52:	2300      	movs	r3, #0
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3708      	adds	r7, #8
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}
 8012a5c:	20005770 	.word	0x20005770

08012a60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b088      	sub	sp, #32
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	091b      	lsrs	r3, r3, #4
 8012a7a:	b2db      	uxtb	r3, r3
 8012a7c:	2b04      	cmp	r3, #4
 8012a7e:	d004      	beq.n	8012a8a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7f6 fde1 	bl	8009648 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012a86:	2300      	movs	r3, #0
 8012a88:	e123      	b.n	8012cd2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012a8a:	69fb      	ldr	r3, [r7, #28]
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	f003 030f 	and.w	r3, r3, #15
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	009b      	lsls	r3, r3, #2
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012a9a:	69fb      	ldr	r3, [r7, #28]
 8012a9c:	885b      	ldrh	r3, [r3, #2]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7f5 fa67 	bl	8007f74 <lwip_htons>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	891b      	ldrh	r3, [r3, #8]
 8012aae:	8a3a      	ldrh	r2, [r7, #16]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d204      	bcs.n	8012abe <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012ab4:	8a3b      	ldrh	r3, [r7, #16]
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f7f6 fc3f 	bl	800933c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	895b      	ldrh	r3, [r3, #10]
 8012ac2:	8a7a      	ldrh	r2, [r7, #18]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d807      	bhi.n	8012ad8 <ip4_input+0x78>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	891b      	ldrh	r3, [r3, #8]
 8012acc:	8a3a      	ldrh	r2, [r7, #16]
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d802      	bhi.n	8012ad8 <ip4_input+0x78>
 8012ad2:	8a7b      	ldrh	r3, [r7, #18]
 8012ad4:	2b13      	cmp	r3, #19
 8012ad6:	d804      	bhi.n	8012ae2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7f6 fdb5 	bl	8009648 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	e0f7      	b.n	8012cd2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012ae2:	69fb      	ldr	r3, [r7, #28]
 8012ae4:	691b      	ldr	r3, [r3, #16]
 8012ae6:	4a7d      	ldr	r2, [pc, #500]	; (8012cdc <ip4_input+0x27c>)
 8012ae8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	4a7b      	ldr	r2, [pc, #492]	; (8012cdc <ip4_input+0x27c>)
 8012af0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012af2:	4b7a      	ldr	r3, [pc, #488]	; (8012cdc <ip4_input+0x27c>)
 8012af4:	695b      	ldr	r3, [r3, #20]
 8012af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012afa:	2be0      	cmp	r3, #224	; 0xe0
 8012afc:	d112      	bne.n	8012b24 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b04:	f003 0301 	and.w	r3, r3, #1
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d007      	beq.n	8012b1e <ip4_input+0xbe>
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	3304      	adds	r3, #4
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d002      	beq.n	8012b1e <ip4_input+0xbe>
      netif = inp;
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	61bb      	str	r3, [r7, #24]
 8012b1c:	e02a      	b.n	8012b74 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	61bb      	str	r3, [r7, #24]
 8012b22:	e027      	b.n	8012b74 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012b24:	6838      	ldr	r0, [r7, #0]
 8012b26:	f7ff ff71 	bl	8012a0c <ip4_input_accept>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d002      	beq.n	8012b36 <ip4_input+0xd6>
      netif = inp;
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	61bb      	str	r3, [r7, #24]
 8012b34:	e01e      	b.n	8012b74 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012b36:	2300      	movs	r3, #0
 8012b38:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012b3a:	4b68      	ldr	r3, [pc, #416]	; (8012cdc <ip4_input+0x27c>)
 8012b3c:	695b      	ldr	r3, [r3, #20]
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	2b7f      	cmp	r3, #127	; 0x7f
 8012b42:	d017      	beq.n	8012b74 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012b44:	4b66      	ldr	r3, [pc, #408]	; (8012ce0 <ip4_input+0x280>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	61bb      	str	r3, [r7, #24]
 8012b4a:	e00e      	b.n	8012b6a <ip4_input+0x10a>
          if (netif == inp) {
 8012b4c:	69ba      	ldr	r2, [r7, #24]
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d006      	beq.n	8012b62 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012b54:	69b8      	ldr	r0, [r7, #24]
 8012b56:	f7ff ff59 	bl	8012a0c <ip4_input_accept>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d108      	bne.n	8012b72 <ip4_input+0x112>
 8012b60:	e000      	b.n	8012b64 <ip4_input+0x104>
            continue;
 8012b62:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	61bb      	str	r3, [r7, #24]
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d1ed      	bne.n	8012b4c <ip4_input+0xec>
 8012b70:	e000      	b.n	8012b74 <ip4_input+0x114>
            break;
 8012b72:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012b74:	69bb      	ldr	r3, [r7, #24]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d111      	bne.n	8012b9e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	7a5b      	ldrb	r3, [r3, #9]
 8012b7e:	2b11      	cmp	r3, #17
 8012b80:	d10d      	bne.n	8012b9e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012b82:	8a7b      	ldrh	r3, [r7, #18]
 8012b84:	69fa      	ldr	r2, [r7, #28]
 8012b86:	4413      	add	r3, r2
 8012b88:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	885b      	ldrh	r3, [r3, #2]
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012b94:	d103      	bne.n	8012b9e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d017      	beq.n	8012bd4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012ba4:	4b4d      	ldr	r3, [pc, #308]	; (8012cdc <ip4_input+0x27c>)
 8012ba6:	691b      	ldr	r3, [r3, #16]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d013      	beq.n	8012bd4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012bac:	4b4b      	ldr	r3, [pc, #300]	; (8012cdc <ip4_input+0x27c>)
 8012bae:	691b      	ldr	r3, [r3, #16]
 8012bb0:	6839      	ldr	r1, [r7, #0]
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f000 f96e 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d105      	bne.n	8012bca <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012bbe:	4b47      	ldr	r3, [pc, #284]	; (8012cdc <ip4_input+0x27c>)
 8012bc0:	691b      	ldr	r3, [r3, #16]
 8012bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012bc6:	2be0      	cmp	r3, #224	; 0xe0
 8012bc8:	d104      	bne.n	8012bd4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f7f6 fd3c 	bl	8009648 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	e07e      	b.n	8012cd2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012bd4:	69bb      	ldr	r3, [r7, #24]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d104      	bne.n	8012be4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7f6 fd34 	bl	8009648 <pbuf_free>
    return ERR_OK;
 8012be0:	2300      	movs	r3, #0
 8012be2:	e076      	b.n	8012cd2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	88db      	ldrh	r3, [r3, #6]
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	461a      	mov	r2, r3
 8012bec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012bf0:	4013      	ands	r3, r2
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d00b      	beq.n	8012c0e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f000 fc92 	bl	8013520 <ip4_reass>
 8012bfc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d101      	bne.n	8012c08 <ip4_input+0x1a8>
      return ERR_OK;
 8012c04:	2300      	movs	r3, #0
 8012c06:	e064      	b.n	8012cd2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012c0e:	4a33      	ldr	r2, [pc, #204]	; (8012cdc <ip4_input+0x27c>)
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012c14:	4a31      	ldr	r2, [pc, #196]	; (8012cdc <ip4_input+0x27c>)
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012c1a:	4a30      	ldr	r2, [pc, #192]	; (8012cdc <ip4_input+0x27c>)
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012c20:	69fb      	ldr	r3, [r7, #28]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	f003 030f 	and.w	r3, r3, #15
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	b2db      	uxtb	r3, r3
 8012c2e:	b29a      	uxth	r2, r3
 8012c30:	4b2a      	ldr	r3, [pc, #168]	; (8012cdc <ip4_input+0x27c>)
 8012c32:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012c34:	8a7b      	ldrh	r3, [r7, #18]
 8012c36:	4619      	mov	r1, r3
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f7f6 fc7f 	bl	800953c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	7a5b      	ldrb	r3, [r3, #9]
 8012c42:	2b11      	cmp	r3, #17
 8012c44:	d006      	beq.n	8012c54 <ip4_input+0x1f4>
 8012c46:	2b11      	cmp	r3, #17
 8012c48:	dc13      	bgt.n	8012c72 <ip4_input+0x212>
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d00c      	beq.n	8012c68 <ip4_input+0x208>
 8012c4e:	2b06      	cmp	r3, #6
 8012c50:	d005      	beq.n	8012c5e <ip4_input+0x1fe>
 8012c52:	e00e      	b.n	8012c72 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012c54:	6839      	ldr	r1, [r7, #0]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f7fc fae8 	bl	800f22c <udp_input>
        break;
 8012c5c:	e026      	b.n	8012cac <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012c5e:	6839      	ldr	r1, [r7, #0]
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7f8 fb29 	bl	800b2b8 <tcp_input>
        break;
 8012c66:	e021      	b.n	8012cac <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012c68:	6839      	ldr	r1, [r7, #0]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f7ff fcd0 	bl	8012610 <icmp_input>
        break;
 8012c70:	e01c      	b.n	8012cac <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012c72:	4b1a      	ldr	r3, [pc, #104]	; (8012cdc <ip4_input+0x27c>)
 8012c74:	695b      	ldr	r3, [r3, #20]
 8012c76:	69b9      	ldr	r1, [r7, #24]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f000 f90b 	bl	8012e94 <ip4_addr_isbroadcast_u32>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d10f      	bne.n	8012ca4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012c84:	4b15      	ldr	r3, [pc, #84]	; (8012cdc <ip4_input+0x27c>)
 8012c86:	695b      	ldr	r3, [r3, #20]
 8012c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012c8c:	2be0      	cmp	r3, #224	; 0xe0
 8012c8e:	d009      	beq.n	8012ca4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012c90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012c94:	4619      	mov	r1, r3
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7f6 fcc3 	bl	8009622 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012c9c:	2102      	movs	r1, #2
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7ff fdba 	bl	8012818 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f7f6 fccf 	bl	8009648 <pbuf_free>
        break;
 8012caa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012cac:	4b0b      	ldr	r3, [pc, #44]	; (8012cdc <ip4_input+0x27c>)
 8012cae:	2200      	movs	r2, #0
 8012cb0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012cb2:	4b0a      	ldr	r3, [pc, #40]	; (8012cdc <ip4_input+0x27c>)
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012cb8:	4b08      	ldr	r3, [pc, #32]	; (8012cdc <ip4_input+0x27c>)
 8012cba:	2200      	movs	r2, #0
 8012cbc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012cbe:	4b07      	ldr	r3, [pc, #28]	; (8012cdc <ip4_input+0x27c>)
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012cc4:	4b05      	ldr	r3, [pc, #20]	; (8012cdc <ip4_input+0x27c>)
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012cca:	4b04      	ldr	r3, [pc, #16]	; (8012cdc <ip4_input+0x27c>)
 8012ccc:	2200      	movs	r2, #0
 8012cce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3720      	adds	r7, #32
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	20005770 	.word	0x20005770
 8012ce0:	2000aeb4 	.word	0x2000aeb4

08012ce4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b08a      	sub	sp, #40	; 0x28
 8012ce8:	af04      	add	r7, sp, #16
 8012cea:	60f8      	str	r0, [r7, #12]
 8012cec:	60b9      	str	r1, [r7, #8]
 8012cee:	607a      	str	r2, [r7, #4]
 8012cf0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d009      	beq.n	8012d10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d003      	beq.n	8012d0a <ip4_output_if+0x26>
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d102      	bne.n	8012d10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0c:	3304      	adds	r3, #4
 8012d0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012d10:	78fa      	ldrb	r2, [r7, #3]
 8012d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d14:	9302      	str	r3, [sp, #8]
 8012d16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012d1a:	9301      	str	r3, [sp, #4]
 8012d1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d20:	9300      	str	r3, [sp, #0]
 8012d22:	4613      	mov	r3, r2
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	6979      	ldr	r1, [r7, #20]
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f000 f805 	bl	8012d38 <ip4_output_if_src>
 8012d2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	3718      	adds	r7, #24
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b088      	sub	sp, #32
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	607a      	str	r2, [r7, #4]
 8012d44:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	7b9b      	ldrb	r3, [r3, #14]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d006      	beq.n	8012d5c <ip4_output_if_src+0x24>
 8012d4e:	4b4b      	ldr	r3, [pc, #300]	; (8012e7c <ip4_output_if_src+0x144>)
 8012d50:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012d54:	494a      	ldr	r1, [pc, #296]	; (8012e80 <ip4_output_if_src+0x148>)
 8012d56:	484b      	ldr	r0, [pc, #300]	; (8012e84 <ip4_output_if_src+0x14c>)
 8012d58:	f001 f856 	bl	8013e08 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d060      	beq.n	8012e24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012d62:	2314      	movs	r3, #20
 8012d64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012d66:	2114      	movs	r1, #20
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f7f6 fbd7 	bl	800951c <pbuf_add_header>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d002      	beq.n	8012d7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012d74:	f06f 0301 	mvn.w	r3, #1
 8012d78:	e07c      	b.n	8012e74 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	895b      	ldrh	r3, [r3, #10]
 8012d84:	2b13      	cmp	r3, #19
 8012d86:	d806      	bhi.n	8012d96 <ip4_output_if_src+0x5e>
 8012d88:	4b3c      	ldr	r3, [pc, #240]	; (8012e7c <ip4_output_if_src+0x144>)
 8012d8a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012d8e:	493e      	ldr	r1, [pc, #248]	; (8012e88 <ip4_output_if_src+0x150>)
 8012d90:	483c      	ldr	r0, [pc, #240]	; (8012e84 <ip4_output_if_src+0x14c>)
 8012d92:	f001 f839 	bl	8013e08 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	78fa      	ldrb	r2, [r7, #3]
 8012d9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012da2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012dac:	8b7b      	ldrh	r3, [r7, #26]
 8012dae:	089b      	lsrs	r3, r3, #2
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012db8:	b2da      	uxtb	r2, r3
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012dbe:	69fb      	ldr	r3, [r7, #28]
 8012dc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012dc4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	891b      	ldrh	r3, [r3, #8]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7f5 f8d2 	bl	8007f74 <lwip_htons>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	69fb      	ldr	r3, [r7, #28]
 8012dd6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	719a      	strb	r2, [r3, #6]
 8012dde:	2200      	movs	r2, #0
 8012de0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012de2:	4b2a      	ldr	r3, [pc, #168]	; (8012e8c <ip4_output_if_src+0x154>)
 8012de4:	881b      	ldrh	r3, [r3, #0]
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7f5 f8c4 	bl	8007f74 <lwip_htons>
 8012dec:	4603      	mov	r3, r0
 8012dee:	461a      	mov	r2, r3
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012df4:	4b25      	ldr	r3, [pc, #148]	; (8012e8c <ip4_output_if_src+0x154>)
 8012df6:	881b      	ldrh	r3, [r3, #0]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	b29a      	uxth	r2, r3
 8012dfc:	4b23      	ldr	r3, [pc, #140]	; (8012e8c <ip4_output_if_src+0x154>)
 8012dfe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d104      	bne.n	8012e10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012e06:	4b22      	ldr	r3, [pc, #136]	; (8012e90 <ip4_output_if_src+0x158>)
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	60da      	str	r2, [r3, #12]
 8012e0e:	e003      	b.n	8012e18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	729a      	strb	r2, [r3, #10]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	72da      	strb	r2, [r3, #11]
 8012e22:	e00f      	b.n	8012e44 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	895b      	ldrh	r3, [r3, #10]
 8012e28:	2b13      	cmp	r3, #19
 8012e2a:	d802      	bhi.n	8012e32 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012e2c:	f06f 0301 	mvn.w	r3, #1
 8012e30:	e020      	b.n	8012e74 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	691b      	ldr	r3, [r3, #16]
 8012e3c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012e3e:	f107 0314 	add.w	r3, r7, #20
 8012e42:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d00c      	beq.n	8012e66 <ip4_output_if_src+0x12e>
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	891a      	ldrh	r2, [r3, #8]
 8012e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d906      	bls.n	8012e66 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e5c:	68f8      	ldr	r0, [r7, #12]
 8012e5e:	f000 fd53 	bl	8013908 <ip4_frag>
 8012e62:	4603      	mov	r3, r0
 8012e64:	e006      	b.n	8012e74 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e68:	695b      	ldr	r3, [r3, #20]
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	68f9      	ldr	r1, [r7, #12]
 8012e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e70:	4798      	blx	r3
 8012e72:	4603      	mov	r3, r0
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3720      	adds	r7, #32
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	08017dd0 	.word	0x08017dd0
 8012e80:	08017e04 	.word	0x08017e04
 8012e84:	08017e10 	.word	0x08017e10
 8012e88:	08017e38 	.word	0x08017e38
 8012e8c:	2000b046 	.word	0x2000b046
 8012e90:	0801a750 	.word	0x0801a750

08012e94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012e94:	b480      	push	{r7}
 8012e96:	b085      	sub	sp, #20
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ea8:	d002      	beq.n	8012eb0 <ip4_addr_isbroadcast_u32+0x1c>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d101      	bne.n	8012eb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e02a      	b.n	8012f0a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012eba:	f003 0302 	and.w	r3, r3, #2
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d101      	bne.n	8012ec6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	e021      	b.n	8012f0a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	3304      	adds	r3, #4
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d101      	bne.n	8012ed6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	e019      	b.n	8012f0a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	3304      	adds	r3, #4
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	405a      	eors	r2, r3
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	3308      	adds	r3, #8
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	4013      	ands	r3, r2
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d10d      	bne.n	8012f08 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	3308      	adds	r3, #8
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	43da      	mvns	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	3308      	adds	r3, #8
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d101      	bne.n	8012f08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012f04:	2301      	movs	r3, #1
 8012f06:	e000      	b.n	8012f0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012f08:	2300      	movs	r3, #0
  }
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3714      	adds	r7, #20
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr
	...

08012f18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012f22:	4b12      	ldr	r3, [pc, #72]	; (8012f6c <ip_reass_tmr+0x54>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012f28:	e018      	b.n	8012f5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	7fdb      	ldrb	r3, [r3, #31]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d00b      	beq.n	8012f4a <ip_reass_tmr+0x32>
      r->timer--;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	7fdb      	ldrb	r3, [r3, #31]
 8012f36:	3b01      	subs	r3, #1
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	60fb      	str	r3, [r7, #12]
 8012f48:	e008      	b.n	8012f5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012f54:	68b9      	ldr	r1, [r7, #8]
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 f80a 	bl	8012f70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1e3      	bne.n	8012f2a <ip_reass_tmr+0x12>
    }
  }
}
 8012f62:	bf00      	nop
 8012f64:	bf00      	nop
 8012f66:	3710      	adds	r7, #16
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	2000b048 	.word	0x2000b048

08012f70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b088      	sub	sp, #32
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012f7e:	683a      	ldr	r2, [r7, #0]
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d105      	bne.n	8012f92 <ip_reass_free_complete_datagram+0x22>
 8012f86:	4b45      	ldr	r3, [pc, #276]	; (801309c <ip_reass_free_complete_datagram+0x12c>)
 8012f88:	22ab      	movs	r2, #171	; 0xab
 8012f8a:	4945      	ldr	r1, [pc, #276]	; (80130a0 <ip_reass_free_complete_datagram+0x130>)
 8012f8c:	4845      	ldr	r0, [pc, #276]	; (80130a4 <ip_reass_free_complete_datagram+0x134>)
 8012f8e:	f000 ff3b 	bl	8013e08 <iprintf>
  if (prev != NULL) {
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00a      	beq.n	8012fae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	687a      	ldr	r2, [r7, #4]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d005      	beq.n	8012fae <ip_reass_free_complete_datagram+0x3e>
 8012fa2:	4b3e      	ldr	r3, [pc, #248]	; (801309c <ip_reass_free_complete_datagram+0x12c>)
 8012fa4:	22ad      	movs	r2, #173	; 0xad
 8012fa6:	4940      	ldr	r1, [pc, #256]	; (80130a8 <ip_reass_free_complete_datagram+0x138>)
 8012fa8:	483e      	ldr	r0, [pc, #248]	; (80130a4 <ip_reass_free_complete_datagram+0x134>)
 8012faa:	f000 ff2d 	bl	8013e08 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	889b      	ldrh	r3, [r3, #4]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d12a      	bne.n	8013016 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012fce:	69bb      	ldr	r3, [r7, #24]
 8012fd0:	6858      	ldr	r0, [r3, #4]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	3308      	adds	r3, #8
 8012fd6:	2214      	movs	r2, #20
 8012fd8:	4619      	mov	r1, r3
 8012fda:	f000 fee5 	bl	8013da8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012fde:	2101      	movs	r1, #1
 8012fe0:	69b8      	ldr	r0, [r7, #24]
 8012fe2:	f7ff fc29 	bl	8012838 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012fe6:	69b8      	ldr	r0, [r7, #24]
 8012fe8:	f7f6 fbb6 	bl	8009758 <pbuf_clen>
 8012fec:	4603      	mov	r3, r0
 8012fee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ff0:	8bfa      	ldrh	r2, [r7, #30]
 8012ff2:	8a7b      	ldrh	r3, [r7, #18]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ffa:	db05      	blt.n	8013008 <ip_reass_free_complete_datagram+0x98>
 8012ffc:	4b27      	ldr	r3, [pc, #156]	; (801309c <ip_reass_free_complete_datagram+0x12c>)
 8012ffe:	22bc      	movs	r2, #188	; 0xbc
 8013000:	492a      	ldr	r1, [pc, #168]	; (80130ac <ip_reass_free_complete_datagram+0x13c>)
 8013002:	4828      	ldr	r0, [pc, #160]	; (80130a4 <ip_reass_free_complete_datagram+0x134>)
 8013004:	f000 ff00 	bl	8013e08 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013008:	8bfa      	ldrh	r2, [r7, #30]
 801300a:	8a7b      	ldrh	r3, [r7, #18]
 801300c:	4413      	add	r3, r2
 801300e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013010:	69b8      	ldr	r0, [r7, #24]
 8013012:	f7f6 fb19 	bl	8009648 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801301c:	e01f      	b.n	801305e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013024:	69bb      	ldr	r3, [r7, #24]
 8013026:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801302e:	68f8      	ldr	r0, [r7, #12]
 8013030:	f7f6 fb92 	bl	8009758 <pbuf_clen>
 8013034:	4603      	mov	r3, r0
 8013036:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013038:	8bfa      	ldrh	r2, [r7, #30]
 801303a:	8a7b      	ldrh	r3, [r7, #18]
 801303c:	4413      	add	r3, r2
 801303e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013042:	db05      	blt.n	8013050 <ip_reass_free_complete_datagram+0xe0>
 8013044:	4b15      	ldr	r3, [pc, #84]	; (801309c <ip_reass_free_complete_datagram+0x12c>)
 8013046:	22cc      	movs	r2, #204	; 0xcc
 8013048:	4918      	ldr	r1, [pc, #96]	; (80130ac <ip_reass_free_complete_datagram+0x13c>)
 801304a:	4816      	ldr	r0, [pc, #88]	; (80130a4 <ip_reass_free_complete_datagram+0x134>)
 801304c:	f000 fedc 	bl	8013e08 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013050:	8bfa      	ldrh	r2, [r7, #30]
 8013052:	8a7b      	ldrh	r3, [r7, #18]
 8013054:	4413      	add	r3, r2
 8013056:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013058:	68f8      	ldr	r0, [r7, #12]
 801305a:	f7f6 faf5 	bl	8009648 <pbuf_free>
  while (p != NULL) {
 801305e:	69bb      	ldr	r3, [r7, #24]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d1dc      	bne.n	801301e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013064:	6839      	ldr	r1, [r7, #0]
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 f8c2 	bl	80131f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801306c:	4b10      	ldr	r3, [pc, #64]	; (80130b0 <ip_reass_free_complete_datagram+0x140>)
 801306e:	881b      	ldrh	r3, [r3, #0]
 8013070:	8bfa      	ldrh	r2, [r7, #30]
 8013072:	429a      	cmp	r2, r3
 8013074:	d905      	bls.n	8013082 <ip_reass_free_complete_datagram+0x112>
 8013076:	4b09      	ldr	r3, [pc, #36]	; (801309c <ip_reass_free_complete_datagram+0x12c>)
 8013078:	22d2      	movs	r2, #210	; 0xd2
 801307a:	490e      	ldr	r1, [pc, #56]	; (80130b4 <ip_reass_free_complete_datagram+0x144>)
 801307c:	4809      	ldr	r0, [pc, #36]	; (80130a4 <ip_reass_free_complete_datagram+0x134>)
 801307e:	f000 fec3 	bl	8013e08 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013082:	4b0b      	ldr	r3, [pc, #44]	; (80130b0 <ip_reass_free_complete_datagram+0x140>)
 8013084:	881a      	ldrh	r2, [r3, #0]
 8013086:	8bfb      	ldrh	r3, [r7, #30]
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	b29a      	uxth	r2, r3
 801308c:	4b08      	ldr	r3, [pc, #32]	; (80130b0 <ip_reass_free_complete_datagram+0x140>)
 801308e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013090:	8bfb      	ldrh	r3, [r7, #30]
}
 8013092:	4618      	mov	r0, r3
 8013094:	3720      	adds	r7, #32
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	08017e68 	.word	0x08017e68
 80130a0:	08017ea4 	.word	0x08017ea4
 80130a4:	08017eb0 	.word	0x08017eb0
 80130a8:	08017ed8 	.word	0x08017ed8
 80130ac:	08017eec 	.word	0x08017eec
 80130b0:	2000b04c 	.word	0x2000b04c
 80130b4:	08017f0c 	.word	0x08017f0c

080130b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b08a      	sub	sp, #40	; 0x28
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80130c2:	2300      	movs	r3, #0
 80130c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80130c6:	2300      	movs	r3, #0
 80130c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80130ca:	2300      	movs	r3, #0
 80130cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80130ce:	2300      	movs	r3, #0
 80130d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80130d2:	2300      	movs	r3, #0
 80130d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80130d6:	4b28      	ldr	r3, [pc, #160]	; (8013178 <ip_reass_remove_oldest_datagram+0xc0>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80130dc:	e030      	b.n	8013140 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80130de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e0:	695a      	ldr	r2, [r3, #20]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d10c      	bne.n	8013104 <ip_reass_remove_oldest_datagram+0x4c>
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	699a      	ldr	r2, [r3, #24]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	691b      	ldr	r3, [r3, #16]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d106      	bne.n	8013104 <ip_reass_remove_oldest_datagram+0x4c>
 80130f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f8:	899a      	ldrh	r2, [r3, #12]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	889b      	ldrh	r3, [r3, #4]
 80130fe:	b29b      	uxth	r3, r3
 8013100:	429a      	cmp	r2, r3
 8013102:	d014      	beq.n	801312e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013104:	693b      	ldr	r3, [r7, #16]
 8013106:	3301      	adds	r3, #1
 8013108:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801310a:	6a3b      	ldr	r3, [r7, #32]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d104      	bne.n	801311a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	61bb      	str	r3, [r7, #24]
 8013118:	e009      	b.n	801312e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311c:	7fda      	ldrb	r2, [r3, #31]
 801311e:	6a3b      	ldr	r3, [r7, #32]
 8013120:	7fdb      	ldrb	r3, [r3, #31]
 8013122:	429a      	cmp	r2, r3
 8013124:	d803      	bhi.n	801312e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013128:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d001      	beq.n	801313a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1cb      	bne.n	80130de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013146:	6a3b      	ldr	r3, [r7, #32]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d008      	beq.n	801315e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801314c:	69b9      	ldr	r1, [r7, #24]
 801314e:	6a38      	ldr	r0, [r7, #32]
 8013150:	f7ff ff0e 	bl	8012f70 <ip_reass_free_complete_datagram>
 8013154:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013156:	697a      	ldr	r2, [r7, #20]
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	4413      	add	r3, r2
 801315c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801315e:	697a      	ldr	r2, [r7, #20]
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	429a      	cmp	r2, r3
 8013164:	da02      	bge.n	801316c <ip_reass_remove_oldest_datagram+0xb4>
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	2b01      	cmp	r3, #1
 801316a:	dcac      	bgt.n	80130c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801316c:	697b      	ldr	r3, [r7, #20]
}
 801316e:	4618      	mov	r0, r3
 8013170:	3728      	adds	r7, #40	; 0x28
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}
 8013176:	bf00      	nop
 8013178:	2000b048 	.word	0x2000b048

0801317c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b084      	sub	sp, #16
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013186:	2004      	movs	r0, #4
 8013188:	f7f5 fb6c 	bl	8008864 <memp_malloc>
 801318c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d110      	bne.n	80131b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013194:	6839      	ldr	r1, [r7, #0]
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f7ff ff8e 	bl	80130b8 <ip_reass_remove_oldest_datagram>
 801319c:	4602      	mov	r2, r0
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	4293      	cmp	r3, r2
 80131a2:	dc03      	bgt.n	80131ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131a4:	2004      	movs	r0, #4
 80131a6:	f7f5 fb5d 	bl	8008864 <memp_malloc>
 80131aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d101      	bne.n	80131b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80131b2:	2300      	movs	r3, #0
 80131b4:	e016      	b.n	80131e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80131b6:	2220      	movs	r2, #32
 80131b8:	2100      	movs	r1, #0
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	f000 fe1c 	bl	8013df8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	220f      	movs	r2, #15
 80131c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80131c6:	4b09      	ldr	r3, [pc, #36]	; (80131ec <ip_reass_enqueue_new_datagram+0x70>)
 80131c8:	681a      	ldr	r2, [r3, #0]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80131ce:	4a07      	ldr	r2, [pc, #28]	; (80131ec <ip_reass_enqueue_new_datagram+0x70>)
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	3308      	adds	r3, #8
 80131d8:	2214      	movs	r2, #20
 80131da:	6879      	ldr	r1, [r7, #4]
 80131dc:	4618      	mov	r0, r3
 80131de:	f000 fde3 	bl	8013da8 <memcpy>
  return ipr;
 80131e2:	68fb      	ldr	r3, [r7, #12]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3710      	adds	r7, #16
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	2000b048 	.word	0x2000b048

080131f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80131fa:	4b10      	ldr	r3, [pc, #64]	; (801323c <ip_reass_dequeue_datagram+0x4c>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	429a      	cmp	r2, r3
 8013202:	d104      	bne.n	801320e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	4a0c      	ldr	r2, [pc, #48]	; (801323c <ip_reass_dequeue_datagram+0x4c>)
 801320a:	6013      	str	r3, [r2, #0]
 801320c:	e00d      	b.n	801322a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d106      	bne.n	8013222 <ip_reass_dequeue_datagram+0x32>
 8013214:	4b0a      	ldr	r3, [pc, #40]	; (8013240 <ip_reass_dequeue_datagram+0x50>)
 8013216:	f240 1245 	movw	r2, #325	; 0x145
 801321a:	490a      	ldr	r1, [pc, #40]	; (8013244 <ip_reass_dequeue_datagram+0x54>)
 801321c:	480a      	ldr	r0, [pc, #40]	; (8013248 <ip_reass_dequeue_datagram+0x58>)
 801321e:	f000 fdf3 	bl	8013e08 <iprintf>
    prev->next = ipr->next;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681a      	ldr	r2, [r3, #0]
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801322a:	6879      	ldr	r1, [r7, #4]
 801322c:	2004      	movs	r0, #4
 801322e:	f7f5 fb89 	bl	8008944 <memp_free>
}
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	2000b048 	.word	0x2000b048
 8013240:	08017e68 	.word	0x08017e68
 8013244:	08017f30 	.word	0x08017f30
 8013248:	08017eb0 	.word	0x08017eb0

0801324c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b08c      	sub	sp, #48	; 0x30
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013258:	2300      	movs	r3, #0
 801325a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801325c:	2301      	movs	r3, #1
 801325e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	685b      	ldr	r3, [r3, #4]
 8013264:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	885b      	ldrh	r3, [r3, #2]
 801326a:	b29b      	uxth	r3, r3
 801326c:	4618      	mov	r0, r3
 801326e:	f7f4 fe81 	bl	8007f74 <lwip_htons>
 8013272:	4603      	mov	r3, r0
 8013274:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	f003 030f 	and.w	r3, r3, #15
 801327e:	b2db      	uxtb	r3, r3
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013284:	7e7b      	ldrb	r3, [r7, #25]
 8013286:	b29b      	uxth	r3, r3
 8013288:	8b7a      	ldrh	r2, [r7, #26]
 801328a:	429a      	cmp	r2, r3
 801328c:	d202      	bcs.n	8013294 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801328e:	f04f 33ff 	mov.w	r3, #4294967295
 8013292:	e135      	b.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013294:	7e7b      	ldrb	r3, [r7, #25]
 8013296:	b29b      	uxth	r3, r3
 8013298:	8b7a      	ldrh	r2, [r7, #26]
 801329a:	1ad3      	subs	r3, r2, r3
 801329c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801329e:	69fb      	ldr	r3, [r7, #28]
 80132a0:	88db      	ldrh	r3, [r3, #6]
 80132a2:	b29b      	uxth	r3, r3
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7f4 fe65 	bl	8007f74 <lwip_htons>
 80132aa:	4603      	mov	r3, r0
 80132ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	00db      	lsls	r3, r3, #3
 80132b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80132bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132be:	2200      	movs	r2, #0
 80132c0:	701a      	strb	r2, [r3, #0]
 80132c2:	2200      	movs	r2, #0
 80132c4:	705a      	strb	r2, [r3, #1]
 80132c6:	2200      	movs	r2, #0
 80132c8:	709a      	strb	r2, [r3, #2]
 80132ca:	2200      	movs	r2, #0
 80132cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80132ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d0:	8afa      	ldrh	r2, [r7, #22]
 80132d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80132d4:	8afa      	ldrh	r2, [r7, #22]
 80132d6:	8b7b      	ldrh	r3, [r7, #26]
 80132d8:	4413      	add	r3, r2
 80132da:	b29a      	uxth	r2, r3
 80132dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80132e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e2:	88db      	ldrh	r3, [r3, #6]
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	8afa      	ldrh	r2, [r7, #22]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d902      	bls.n	80132f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132ec:	f04f 33ff 	mov.w	r3, #4294967295
 80132f0:	e106      	b.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	627b      	str	r3, [r7, #36]	; 0x24
 80132f8:	e068      	b.n	80133cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80132fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013302:	889b      	ldrh	r3, [r3, #4]
 8013304:	b29a      	uxth	r2, r3
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	889b      	ldrh	r3, [r3, #4]
 801330a:	b29b      	uxth	r3, r3
 801330c:	429a      	cmp	r2, r3
 801330e:	d235      	bcs.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013314:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013318:	2b00      	cmp	r3, #0
 801331a:	d020      	beq.n	801335e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331e:	889b      	ldrh	r3, [r3, #4]
 8013320:	b29a      	uxth	r2, r3
 8013322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013324:	88db      	ldrh	r3, [r3, #6]
 8013326:	b29b      	uxth	r3, r3
 8013328:	429a      	cmp	r2, r3
 801332a:	d307      	bcc.n	801333c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332e:	88db      	ldrh	r3, [r3, #6]
 8013330:	b29a      	uxth	r2, r3
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	889b      	ldrh	r3, [r3, #4]
 8013336:	b29b      	uxth	r3, r3
 8013338:	429a      	cmp	r2, r3
 801333a:	d902      	bls.n	8013342 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801333c:	f04f 33ff 	mov.w	r3, #4294967295
 8013340:	e0de      	b.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013344:	68ba      	ldr	r2, [r7, #8]
 8013346:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801334a:	88db      	ldrh	r3, [r3, #6]
 801334c:	b29a      	uxth	r2, r3
 801334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013350:	889b      	ldrh	r3, [r3, #4]
 8013352:	b29b      	uxth	r3, r3
 8013354:	429a      	cmp	r2, r3
 8013356:	d03d      	beq.n	80133d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013358:	2300      	movs	r3, #0
 801335a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801335c:	e03a      	b.n	80133d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013360:	88db      	ldrh	r3, [r3, #6]
 8013362:	b29a      	uxth	r2, r3
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	889b      	ldrh	r3, [r3, #4]
 8013368:	b29b      	uxth	r3, r3
 801336a:	429a      	cmp	r2, r3
 801336c:	d902      	bls.n	8013374 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801336e:	f04f 33ff 	mov.w	r3, #4294967295
 8013372:	e0c5      	b.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	68ba      	ldr	r2, [r7, #8]
 8013378:	605a      	str	r2, [r3, #4]
      break;
 801337a:	e02b      	b.n	80133d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337e:	889b      	ldrh	r3, [r3, #4]
 8013380:	b29a      	uxth	r2, r3
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	889b      	ldrh	r3, [r3, #4]
 8013386:	b29b      	uxth	r3, r3
 8013388:	429a      	cmp	r2, r3
 801338a:	d102      	bne.n	8013392 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801338c:	f04f 33ff 	mov.w	r3, #4294967295
 8013390:	e0b6      	b.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013394:	889b      	ldrh	r3, [r3, #4]
 8013396:	b29a      	uxth	r2, r3
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	88db      	ldrh	r3, [r3, #6]
 801339c:	b29b      	uxth	r3, r3
 801339e:	429a      	cmp	r2, r3
 80133a0:	d202      	bcs.n	80133a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133a2:	f04f 33ff 	mov.w	r3, #4294967295
 80133a6:	e0ab      	b.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80133a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d009      	beq.n	80133c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80133ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b0:	88db      	ldrh	r3, [r3, #6]
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	889b      	ldrh	r3, [r3, #4]
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d001      	beq.n	80133c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80133be:	2300      	movs	r3, #0
 80133c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80133cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d193      	bne.n	80132fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80133d2:	e000      	b.n	80133d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80133d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80133d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d12d      	bne.n	8013438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80133dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d01c      	beq.n	801341c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80133e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e4:	88db      	ldrh	r3, [r3, #6]
 80133e6:	b29a      	uxth	r2, r3
 80133e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ea:	889b      	ldrh	r3, [r3, #4]
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d906      	bls.n	8013400 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80133f2:	4b45      	ldr	r3, [pc, #276]	; (8013508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80133f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80133f8:	4944      	ldr	r1, [pc, #272]	; (801350c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80133fa:	4845      	ldr	r0, [pc, #276]	; (8013510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133fc:	f000 fd04 	bl	8013e08 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013402:	68ba      	ldr	r2, [r7, #8]
 8013404:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013408:	88db      	ldrh	r3, [r3, #6]
 801340a:	b29a      	uxth	r2, r3
 801340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340e:	889b      	ldrh	r3, [r3, #4]
 8013410:	b29b      	uxth	r3, r3
 8013412:	429a      	cmp	r2, r3
 8013414:	d010      	beq.n	8013438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013416:	2300      	movs	r3, #0
 8013418:	623b      	str	r3, [r7, #32]
 801341a:	e00d      	b.n	8013438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d006      	beq.n	8013432 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013424:	4b38      	ldr	r3, [pc, #224]	; (8013508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013426:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801342a:	493a      	ldr	r1, [pc, #232]	; (8013514 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801342c:	4838      	ldr	r0, [pc, #224]	; (8013510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801342e:	f000 fceb 	bl	8013e08 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	68ba      	ldr	r2, [r7, #8]
 8013436:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d105      	bne.n	801344a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	7f9b      	ldrb	r3, [r3, #30]
 8013442:	f003 0301 	and.w	r3, r3, #1
 8013446:	2b00      	cmp	r3, #0
 8013448:	d059      	beq.n	80134fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801344a:	6a3b      	ldr	r3, [r7, #32]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d04f      	beq.n	80134f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d006      	beq.n	8013466 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	685b      	ldr	r3, [r3, #4]
 801345c:	685b      	ldr	r3, [r3, #4]
 801345e:	889b      	ldrh	r3, [r3, #4]
 8013460:	b29b      	uxth	r3, r3
 8013462:	2b00      	cmp	r3, #0
 8013464:	d002      	beq.n	801346c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013466:	2300      	movs	r3, #0
 8013468:	623b      	str	r3, [r7, #32]
 801346a:	e041      	b.n	80134f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013476:	e012      	b.n	801349e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013480:	88db      	ldrh	r3, [r3, #6]
 8013482:	b29a      	uxth	r2, r3
 8013484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013486:	889b      	ldrh	r3, [r3, #4]
 8013488:	b29b      	uxth	r3, r3
 801348a:	429a      	cmp	r2, r3
 801348c:	d002      	beq.n	8013494 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801348e:	2300      	movs	r3, #0
 8013490:	623b      	str	r3, [r7, #32]
            break;
 8013492:	e007      	b.n	80134a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013496:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d1e9      	bne.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80134a4:	6a3b      	ldr	r3, [r7, #32]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d022      	beq.n	80134f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d106      	bne.n	80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80134b2:	4b15      	ldr	r3, [pc, #84]	; (8013508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134b4:	f240 12df 	movw	r2, #479	; 0x1df
 80134b8:	4917      	ldr	r1, [pc, #92]	; (8013518 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80134ba:	4815      	ldr	r0, [pc, #84]	; (8013510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80134bc:	f000 fca4 	bl	8013e08 <iprintf>
          LWIP_ASSERT("sanity check",
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	685b      	ldr	r3, [r3, #4]
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d106      	bne.n	80134da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80134cc:	4b0e      	ldr	r3, [pc, #56]	; (8013508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80134d2:	4911      	ldr	r1, [pc, #68]	; (8013518 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80134d4:	480e      	ldr	r0, [pc, #56]	; (8013510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80134d6:	f000 fc97 	bl	8013e08 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80134da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d006      	beq.n	80134f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80134e2:	4b09      	ldr	r3, [pc, #36]	; (8013508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80134e8:	490c      	ldr	r1, [pc, #48]	; (801351c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80134ea:	4809      	ldr	r0, [pc, #36]	; (8013510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80134ec:	f000 fc8c 	bl	8013e08 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80134f0:	6a3b      	ldr	r3, [r7, #32]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	bf14      	ite	ne
 80134f6:	2301      	movne	r3, #1
 80134f8:	2300      	moveq	r3, #0
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	e000      	b.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80134fe:	2300      	movs	r3, #0
}
 8013500:	4618      	mov	r0, r3
 8013502:	3730      	adds	r7, #48	; 0x30
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}
 8013508:	08017e68 	.word	0x08017e68
 801350c:	08017f4c 	.word	0x08017f4c
 8013510:	08017eb0 	.word	0x08017eb0
 8013514:	08017f6c 	.word	0x08017f6c
 8013518:	08017fa4 	.word	0x08017fa4
 801351c:	08017fb4 	.word	0x08017fb4

08013520 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b08e      	sub	sp, #56	; 0x38
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	f003 030f 	and.w	r3, r3, #15
 8013536:	b2db      	uxtb	r3, r3
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	b2db      	uxtb	r3, r3
 801353c:	2b14      	cmp	r3, #20
 801353e:	f040 8171 	bne.w	8013824 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013544:	88db      	ldrh	r3, [r3, #6]
 8013546:	b29b      	uxth	r3, r3
 8013548:	4618      	mov	r0, r3
 801354a:	f7f4 fd13 	bl	8007f74 <lwip_htons>
 801354e:	4603      	mov	r3, r0
 8013550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013554:	b29b      	uxth	r3, r3
 8013556:	00db      	lsls	r3, r3, #3
 8013558:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801355c:	885b      	ldrh	r3, [r3, #2]
 801355e:	b29b      	uxth	r3, r3
 8013560:	4618      	mov	r0, r3
 8013562:	f7f4 fd07 	bl	8007f74 <lwip_htons>
 8013566:	4603      	mov	r3, r0
 8013568:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	f003 030f 	and.w	r3, r3, #15
 8013572:	b2db      	uxtb	r3, r3
 8013574:	009b      	lsls	r3, r3, #2
 8013576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801357a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801357e:	b29b      	uxth	r3, r3
 8013580:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013582:	429a      	cmp	r2, r3
 8013584:	f0c0 8150 	bcc.w	8013828 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801358c:	b29b      	uxth	r3, r3
 801358e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013590:	1ad3      	subs	r3, r2, r3
 8013592:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7f6 f8df 	bl	8009758 <pbuf_clen>
 801359a:	4603      	mov	r3, r0
 801359c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801359e:	4b8c      	ldr	r3, [pc, #560]	; (80137d0 <ip4_reass+0x2b0>)
 80135a0:	881b      	ldrh	r3, [r3, #0]
 80135a2:	461a      	mov	r2, r3
 80135a4:	8c3b      	ldrh	r3, [r7, #32]
 80135a6:	4413      	add	r3, r2
 80135a8:	2b0a      	cmp	r3, #10
 80135aa:	dd10      	ble.n	80135ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80135ac:	8c3b      	ldrh	r3, [r7, #32]
 80135ae:	4619      	mov	r1, r3
 80135b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135b2:	f7ff fd81 	bl	80130b8 <ip_reass_remove_oldest_datagram>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	f000 8137 	beq.w	801382c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80135be:	4b84      	ldr	r3, [pc, #528]	; (80137d0 <ip4_reass+0x2b0>)
 80135c0:	881b      	ldrh	r3, [r3, #0]
 80135c2:	461a      	mov	r2, r3
 80135c4:	8c3b      	ldrh	r3, [r7, #32]
 80135c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80135c8:	2b0a      	cmp	r3, #10
 80135ca:	f300 812f 	bgt.w	801382c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80135ce:	4b81      	ldr	r3, [pc, #516]	; (80137d4 <ip4_reass+0x2b4>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	633b      	str	r3, [r7, #48]	; 0x30
 80135d4:	e015      	b.n	8013602 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	695a      	ldr	r2, [r3, #20]
 80135da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d10c      	bne.n	80135fc <ip4_reass+0xdc>
 80135e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e4:	699a      	ldr	r2, [r3, #24]
 80135e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e8:	691b      	ldr	r3, [r3, #16]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d106      	bne.n	80135fc <ip4_reass+0xdc>
 80135ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f0:	899a      	ldrh	r2, [r3, #12]
 80135f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f4:	889b      	ldrh	r3, [r3, #4]
 80135f6:	b29b      	uxth	r3, r3
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d006      	beq.n	801360a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80135fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	633b      	str	r3, [r7, #48]	; 0x30
 8013602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013604:	2b00      	cmp	r3, #0
 8013606:	d1e6      	bne.n	80135d6 <ip4_reass+0xb6>
 8013608:	e000      	b.n	801360c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801360a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360e:	2b00      	cmp	r3, #0
 8013610:	d109      	bne.n	8013626 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013612:	8c3b      	ldrh	r3, [r7, #32]
 8013614:	4619      	mov	r1, r3
 8013616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013618:	f7ff fdb0 	bl	801317c <ip_reass_enqueue_new_datagram>
 801361c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013620:	2b00      	cmp	r3, #0
 8013622:	d11c      	bne.n	801365e <ip4_reass+0x13e>
      goto nullreturn;
 8013624:	e105      	b.n	8013832 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013628:	88db      	ldrh	r3, [r3, #6]
 801362a:	b29b      	uxth	r3, r3
 801362c:	4618      	mov	r0, r3
 801362e:	f7f4 fca1 	bl	8007f74 <lwip_htons>
 8013632:	4603      	mov	r3, r0
 8013634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013638:	2b00      	cmp	r3, #0
 801363a:	d110      	bne.n	801365e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363e:	89db      	ldrh	r3, [r3, #14]
 8013640:	4618      	mov	r0, r3
 8013642:	f7f4 fc97 	bl	8007f74 <lwip_htons>
 8013646:	4603      	mov	r3, r0
 8013648:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801364c:	2b00      	cmp	r3, #0
 801364e:	d006      	beq.n	801365e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013652:	3308      	adds	r3, #8
 8013654:	2214      	movs	r2, #20
 8013656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013658:	4618      	mov	r0, r3
 801365a:	f000 fba5 	bl	8013da8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013660:	88db      	ldrh	r3, [r3, #6]
 8013662:	b29b      	uxth	r3, r3
 8013664:	f003 0320 	and.w	r3, r3, #32
 8013668:	2b00      	cmp	r3, #0
 801366a:	bf0c      	ite	eq
 801366c:	2301      	moveq	r3, #1
 801366e:	2300      	movne	r3, #0
 8013670:	b2db      	uxtb	r3, r3
 8013672:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013674:	69fb      	ldr	r3, [r7, #28]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d00e      	beq.n	8013698 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801367a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801367c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801367e:	4413      	add	r3, r2
 8013680:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013682:	8b7a      	ldrh	r2, [r7, #26]
 8013684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013686:	429a      	cmp	r2, r3
 8013688:	f0c0 80a0 	bcc.w	80137cc <ip4_reass+0x2ac>
 801368c:	8b7b      	ldrh	r3, [r7, #26]
 801368e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013692:	4293      	cmp	r3, r2
 8013694:	f200 809a 	bhi.w	80137cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013698:	69fa      	ldr	r2, [r7, #28]
 801369a:	6879      	ldr	r1, [r7, #4]
 801369c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801369e:	f7ff fdd5 	bl	801324c <ip_reass_chain_frag_into_datagram_and_validate>
 80136a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136aa:	f000 809b 	beq.w	80137e4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80136ae:	4b48      	ldr	r3, [pc, #288]	; (80137d0 <ip4_reass+0x2b0>)
 80136b0:	881a      	ldrh	r2, [r3, #0]
 80136b2:	8c3b      	ldrh	r3, [r7, #32]
 80136b4:	4413      	add	r3, r2
 80136b6:	b29a      	uxth	r2, r3
 80136b8:	4b45      	ldr	r3, [pc, #276]	; (80137d0 <ip4_reass+0x2b0>)
 80136ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d00d      	beq.n	80136de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80136c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80136c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136c6:	4413      	add	r3, r2
 80136c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80136ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136cc:	8a7a      	ldrh	r2, [r7, #18]
 80136ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80136d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d2:	7f9b      	ldrb	r3, [r3, #30]
 80136d4:	f043 0301 	orr.w	r3, r3, #1
 80136d8:	b2da      	uxtb	r2, r3
 80136da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d171      	bne.n	80137c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80136e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e6:	8b9b      	ldrh	r3, [r3, #28]
 80136e8:	3314      	adds	r3, #20
 80136ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80136ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ee:	685b      	ldr	r3, [r3, #4]
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80136f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80136fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013700:	3308      	adds	r3, #8
 8013702:	2214      	movs	r2, #20
 8013704:	4619      	mov	r1, r3
 8013706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013708:	f000 fb4e 	bl	8013da8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801370c:	8a3b      	ldrh	r3, [r7, #16]
 801370e:	4618      	mov	r0, r3
 8013710:	f7f4 fc30 	bl	8007f74 <lwip_htons>
 8013714:	4603      	mov	r3, r0
 8013716:	461a      	mov	r2, r3
 8013718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371e:	2200      	movs	r2, #0
 8013720:	719a      	strb	r2, [r3, #6]
 8013722:	2200      	movs	r2, #0
 8013724:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013728:	2200      	movs	r2, #0
 801372a:	729a      	strb	r2, [r3, #10]
 801372c:	2200      	movs	r2, #0
 801372e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013736:	e00d      	b.n	8013754 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801373e:	2114      	movs	r1, #20
 8013740:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013742:	f7f5 fefb 	bl	800953c <pbuf_remove_header>
      pbuf_cat(p, r);
 8013746:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f7f6 f83f 	bl	80097cc <pbuf_cat>
      r = iprh->next_pbuf;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013756:	2b00      	cmp	r3, #0
 8013758:	d1ee      	bne.n	8013738 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801375a:	4b1e      	ldr	r3, [pc, #120]	; (80137d4 <ip4_reass+0x2b4>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013760:	429a      	cmp	r2, r3
 8013762:	d102      	bne.n	801376a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013764:	2300      	movs	r3, #0
 8013766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013768:	e010      	b.n	801378c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801376a:	4b1a      	ldr	r3, [pc, #104]	; (80137d4 <ip4_reass+0x2b4>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013770:	e007      	b.n	8013782 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013778:	429a      	cmp	r2, r3
 801377a:	d006      	beq.n	801378a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013784:	2b00      	cmp	r3, #0
 8013786:	d1f4      	bne.n	8013772 <ip4_reass+0x252>
 8013788:	e000      	b.n	801378c <ip4_reass+0x26c>
          break;
 801378a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801378c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801378e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013790:	f7ff fd2e 	bl	80131f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7f5 ffdf 	bl	8009758 <pbuf_clen>
 801379a:	4603      	mov	r3, r0
 801379c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801379e:	4b0c      	ldr	r3, [pc, #48]	; (80137d0 <ip4_reass+0x2b0>)
 80137a0:	881b      	ldrh	r3, [r3, #0]
 80137a2:	8c3a      	ldrh	r2, [r7, #32]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d906      	bls.n	80137b6 <ip4_reass+0x296>
 80137a8:	4b0b      	ldr	r3, [pc, #44]	; (80137d8 <ip4_reass+0x2b8>)
 80137aa:	f240 229b 	movw	r2, #667	; 0x29b
 80137ae:	490b      	ldr	r1, [pc, #44]	; (80137dc <ip4_reass+0x2bc>)
 80137b0:	480b      	ldr	r0, [pc, #44]	; (80137e0 <ip4_reass+0x2c0>)
 80137b2:	f000 fb29 	bl	8013e08 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80137b6:	4b06      	ldr	r3, [pc, #24]	; (80137d0 <ip4_reass+0x2b0>)
 80137b8:	881a      	ldrh	r2, [r3, #0]
 80137ba:	8c3b      	ldrh	r3, [r7, #32]
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	b29a      	uxth	r2, r3
 80137c0:	4b03      	ldr	r3, [pc, #12]	; (80137d0 <ip4_reass+0x2b0>)
 80137c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	e038      	b.n	801383a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80137c8:	2300      	movs	r3, #0
 80137ca:	e036      	b.n	801383a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80137cc:	bf00      	nop
 80137ce:	e00a      	b.n	80137e6 <ip4_reass+0x2c6>
 80137d0:	2000b04c 	.word	0x2000b04c
 80137d4:	2000b048 	.word	0x2000b048
 80137d8:	08017e68 	.word	0x08017e68
 80137dc:	08017fd8 	.word	0x08017fd8
 80137e0:	08017eb0 	.word	0x08017eb0
    goto nullreturn_ipr;
 80137e4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80137e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d106      	bne.n	80137fa <ip4_reass+0x2da>
 80137ec:	4b15      	ldr	r3, [pc, #84]	; (8013844 <ip4_reass+0x324>)
 80137ee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80137f2:	4915      	ldr	r1, [pc, #84]	; (8013848 <ip4_reass+0x328>)
 80137f4:	4815      	ldr	r0, [pc, #84]	; (801384c <ip4_reass+0x32c>)
 80137f6:	f000 fb07 	bl	8013e08 <iprintf>
  if (ipr->p == NULL) {
 80137fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d116      	bne.n	8013830 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013802:	4b13      	ldr	r3, [pc, #76]	; (8013850 <ip4_reass+0x330>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013808:	429a      	cmp	r2, r3
 801380a:	d006      	beq.n	801381a <ip4_reass+0x2fa>
 801380c:	4b0d      	ldr	r3, [pc, #52]	; (8013844 <ip4_reass+0x324>)
 801380e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013812:	4910      	ldr	r1, [pc, #64]	; (8013854 <ip4_reass+0x334>)
 8013814:	480d      	ldr	r0, [pc, #52]	; (801384c <ip4_reass+0x32c>)
 8013816:	f000 faf7 	bl	8013e08 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801381a:	2100      	movs	r1, #0
 801381c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801381e:	f7ff fce7 	bl	80131f0 <ip_reass_dequeue_datagram>
 8013822:	e006      	b.n	8013832 <ip4_reass+0x312>
    goto nullreturn;
 8013824:	bf00      	nop
 8013826:	e004      	b.n	8013832 <ip4_reass+0x312>
    goto nullreturn;
 8013828:	bf00      	nop
 801382a:	e002      	b.n	8013832 <ip4_reass+0x312>
      goto nullreturn;
 801382c:	bf00      	nop
 801382e:	e000      	b.n	8013832 <ip4_reass+0x312>
  }

nullreturn:
 8013830:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f7f5 ff08 	bl	8009648 <pbuf_free>
  return NULL;
 8013838:	2300      	movs	r3, #0
}
 801383a:	4618      	mov	r0, r3
 801383c:	3738      	adds	r7, #56	; 0x38
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	bf00      	nop
 8013844:	08017e68 	.word	0x08017e68
 8013848:	08017ff4 	.word	0x08017ff4
 801384c:	08017eb0 	.word	0x08017eb0
 8013850:	2000b048 	.word	0x2000b048
 8013854:	08018000 	.word	0x08018000

08013858 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801385c:	2005      	movs	r0, #5
 801385e:	f7f5 f801 	bl	8008864 <memp_malloc>
 8013862:	4603      	mov	r3, r0
}
 8013864:	4618      	mov	r0, r3
 8013866:	bd80      	pop	{r7, pc}

08013868 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d106      	bne.n	8013884 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013876:	4b07      	ldr	r3, [pc, #28]	; (8013894 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013878:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801387c:	4906      	ldr	r1, [pc, #24]	; (8013898 <ip_frag_free_pbuf_custom_ref+0x30>)
 801387e:	4807      	ldr	r0, [pc, #28]	; (801389c <ip_frag_free_pbuf_custom_ref+0x34>)
 8013880:	f000 fac2 	bl	8013e08 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013884:	6879      	ldr	r1, [r7, #4]
 8013886:	2005      	movs	r0, #5
 8013888:	f7f5 f85c 	bl	8008944 <memp_free>
}
 801388c:	bf00      	nop
 801388e:	3708      	adds	r7, #8
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}
 8013894:	08017e68 	.word	0x08017e68
 8013898:	08018020 	.word	0x08018020
 801389c:	08017eb0 	.word	0x08017eb0

080138a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d106      	bne.n	80138c0 <ipfrag_free_pbuf_custom+0x20>
 80138b2:	4b11      	ldr	r3, [pc, #68]	; (80138f8 <ipfrag_free_pbuf_custom+0x58>)
 80138b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80138b8:	4910      	ldr	r1, [pc, #64]	; (80138fc <ipfrag_free_pbuf_custom+0x5c>)
 80138ba:	4811      	ldr	r0, [pc, #68]	; (8013900 <ipfrag_free_pbuf_custom+0x60>)
 80138bc:	f000 faa4 	bl	8013e08 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80138c0:	68fa      	ldr	r2, [r7, #12]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d006      	beq.n	80138d6 <ipfrag_free_pbuf_custom+0x36>
 80138c8:	4b0b      	ldr	r3, [pc, #44]	; (80138f8 <ipfrag_free_pbuf_custom+0x58>)
 80138ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 80138ce:	490d      	ldr	r1, [pc, #52]	; (8013904 <ipfrag_free_pbuf_custom+0x64>)
 80138d0:	480b      	ldr	r0, [pc, #44]	; (8013900 <ipfrag_free_pbuf_custom+0x60>)
 80138d2:	f000 fa99 	bl	8013e08 <iprintf>
  if (pcr->original != NULL) {
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	695b      	ldr	r3, [r3, #20]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d004      	beq.n	80138e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	695b      	ldr	r3, [r3, #20]
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7f5 feb0 	bl	8009648 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80138e8:	68f8      	ldr	r0, [r7, #12]
 80138ea:	f7ff ffbd 	bl	8013868 <ip_frag_free_pbuf_custom_ref>
}
 80138ee:	bf00      	nop
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	08017e68 	.word	0x08017e68
 80138fc:	0801802c 	.word	0x0801802c
 8013900:	08017eb0 	.word	0x08017eb0
 8013904:	08018038 	.word	0x08018038

08013908 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b094      	sub	sp, #80	; 0x50
 801390c:	af02      	add	r7, sp, #8
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	60b9      	str	r1, [r7, #8]
 8013912:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013914:	2300      	movs	r3, #0
 8013916:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801391e:	3b14      	subs	r3, #20
 8013920:	2b00      	cmp	r3, #0
 8013922:	da00      	bge.n	8013926 <ip4_frag+0x1e>
 8013924:	3307      	adds	r3, #7
 8013926:	10db      	asrs	r3, r3, #3
 8013928:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801392a:	2314      	movs	r3, #20
 801392c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013936:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	f003 030f 	and.w	r3, r3, #15
 8013940:	b2db      	uxtb	r3, r3
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	b2db      	uxtb	r3, r3
 8013946:	2b14      	cmp	r3, #20
 8013948:	d002      	beq.n	8013950 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801394a:	f06f 0305 	mvn.w	r3, #5
 801394e:	e110      	b.n	8013b72 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	895b      	ldrh	r3, [r3, #10]
 8013954:	2b13      	cmp	r3, #19
 8013956:	d809      	bhi.n	801396c <ip4_frag+0x64>
 8013958:	4b88      	ldr	r3, [pc, #544]	; (8013b7c <ip4_frag+0x274>)
 801395a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801395e:	4988      	ldr	r1, [pc, #544]	; (8013b80 <ip4_frag+0x278>)
 8013960:	4888      	ldr	r0, [pc, #544]	; (8013b84 <ip4_frag+0x27c>)
 8013962:	f000 fa51 	bl	8013e08 <iprintf>
 8013966:	f06f 0305 	mvn.w	r3, #5
 801396a:	e102      	b.n	8013b72 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396e:	88db      	ldrh	r3, [r3, #6]
 8013970:	b29b      	uxth	r3, r3
 8013972:	4618      	mov	r0, r3
 8013974:	f7f4 fafe 	bl	8007f74 <lwip_htons>
 8013978:	4603      	mov	r3, r0
 801397a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801397c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801397e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013982:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013986:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801398c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	891b      	ldrh	r3, [r3, #8]
 8013992:	3b14      	subs	r3, #20
 8013994:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013998:	e0e1      	b.n	8013b5e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801399a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801399c:	00db      	lsls	r3, r3, #3
 801399e:	b29b      	uxth	r3, r3
 80139a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139a4:	4293      	cmp	r3, r2
 80139a6:	bf28      	it	cs
 80139a8:	4613      	movcs	r3, r2
 80139aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80139ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139b0:	2114      	movs	r1, #20
 80139b2:	200e      	movs	r0, #14
 80139b4:	f7f5 fb64 	bl	8009080 <pbuf_alloc>
 80139b8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80139ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139bc:	2b00      	cmp	r3, #0
 80139be:	f000 80d5 	beq.w	8013b6c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80139c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c4:	895b      	ldrh	r3, [r3, #10]
 80139c6:	2b13      	cmp	r3, #19
 80139c8:	d806      	bhi.n	80139d8 <ip4_frag+0xd0>
 80139ca:	4b6c      	ldr	r3, [pc, #432]	; (8013b7c <ip4_frag+0x274>)
 80139cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80139d0:	496d      	ldr	r1, [pc, #436]	; (8013b88 <ip4_frag+0x280>)
 80139d2:	486c      	ldr	r0, [pc, #432]	; (8013b84 <ip4_frag+0x27c>)
 80139d4:	f000 fa18 	bl	8013e08 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80139d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	2214      	movs	r2, #20
 80139de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80139e0:	4618      	mov	r0, r3
 80139e2:	f000 f9e1 	bl	8013da8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80139e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80139ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80139ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80139f2:	e064      	b.n	8013abe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	895a      	ldrh	r2, [r3, #10]
 80139f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139fa:	1ad3      	subs	r3, r2, r3
 80139fc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	895b      	ldrh	r3, [r3, #10]
 8013a02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d906      	bls.n	8013a16 <ip4_frag+0x10e>
 8013a08:	4b5c      	ldr	r3, [pc, #368]	; (8013b7c <ip4_frag+0x274>)
 8013a0a:	f240 322d 	movw	r2, #813	; 0x32d
 8013a0e:	495f      	ldr	r1, [pc, #380]	; (8013b8c <ip4_frag+0x284>)
 8013a10:	485c      	ldr	r0, [pc, #368]	; (8013b84 <ip4_frag+0x27c>)
 8013a12:	f000 f9f9 	bl	8013e08 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013a16:	8bfa      	ldrh	r2, [r7, #30]
 8013a18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a1c:	4293      	cmp	r3, r2
 8013a1e:	bf28      	it	cs
 8013a20:	4613      	movcs	r3, r2
 8013a22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013a26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d105      	bne.n	8013a3a <ip4_frag+0x132>
        poff = 0;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	60fb      	str	r3, [r7, #12]
        continue;
 8013a38:	e041      	b.n	8013abe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013a3a:	f7ff ff0d 	bl	8013858 <ip_frag_alloc_pbuf_custom_ref>
 8013a3e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013a40:	69bb      	ldr	r3, [r7, #24]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d103      	bne.n	8013a4e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a48:	f7f5 fdfe 	bl	8009648 <pbuf_free>
        goto memerr;
 8013a4c:	e08f      	b.n	8013b6e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a4e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a56:	4413      	add	r3, r2
 8013a58:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013a5c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013a60:	9201      	str	r2, [sp, #4]
 8013a62:	9300      	str	r3, [sp, #0]
 8013a64:	4603      	mov	r3, r0
 8013a66:	2241      	movs	r2, #65	; 0x41
 8013a68:	2000      	movs	r0, #0
 8013a6a:	f7f5 fc33 	bl	80092d4 <pbuf_alloced_custom>
 8013a6e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d106      	bne.n	8013a84 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013a76:	69b8      	ldr	r0, [r7, #24]
 8013a78:	f7ff fef6 	bl	8013868 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a7e:	f7f5 fde3 	bl	8009648 <pbuf_free>
        goto memerr;
 8013a82:	e074      	b.n	8013b6e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013a84:	68f8      	ldr	r0, [r7, #12]
 8013a86:	f7f5 fe7f 	bl	8009788 <pbuf_ref>
      pcr->original = p;
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013a90:	69bb      	ldr	r3, [r7, #24]
 8013a92:	4a3f      	ldr	r2, [pc, #252]	; (8013b90 <ip4_frag+0x288>)
 8013a94:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013a96:	6979      	ldr	r1, [r7, #20]
 8013a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a9a:	f7f5 fe97 	bl	80097cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013a9e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013aa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013aa6:	1ad3      	subs	r3, r2, r3
 8013aa8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013aac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d004      	beq.n	8013abe <ip4_frag+0x1b6>
        poff = 0;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013abe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d196      	bne.n	80139f4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013ac6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013ac8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013acc:	4413      	add	r3, r2
 8013ace:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ad4:	f1a3 0213 	sub.w	r2, r3, #19
 8013ad8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013adc:	429a      	cmp	r2, r3
 8013ade:	bfcc      	ite	gt
 8013ae0:	2301      	movgt	r3, #1
 8013ae2:	2300      	movle	r3, #0
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013ae8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013af0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013af2:	6a3b      	ldr	r3, [r7, #32]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d002      	beq.n	8013afe <ip4_frag+0x1f6>
 8013af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d003      	beq.n	8013b06 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013afe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013b04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013b06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7f4 fa33 	bl	8007f74 <lwip_htons>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	461a      	mov	r2, r3
 8013b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b14:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013b16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b18:	3314      	adds	r3, #20
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7f4 fa29 	bl	8007f74 <lwip_htons>
 8013b22:	4603      	mov	r3, r0
 8013b24:	461a      	mov	r2, r3
 8013b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b28:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	729a      	strb	r2, [r3, #10]
 8013b30:	2200      	movs	r2, #0
 8013b32:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	695b      	ldr	r3, [r3, #20]
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b3c:	68b8      	ldr	r0, [r7, #8]
 8013b3e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b42:	f7f5 fd81 	bl	8009648 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013b46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b4c:	1ad3      	subs	r3, r2, r3
 8013b4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013b52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013b56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b58:	4413      	add	r3, r2
 8013b5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013b5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	f47f af19 	bne.w	801399a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	e002      	b.n	8013b72 <ip4_frag+0x26a>
      goto memerr;
 8013b6c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3748      	adds	r7, #72	; 0x48
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	08017e68 	.word	0x08017e68
 8013b80:	08018044 	.word	0x08018044
 8013b84:	08017eb0 	.word	0x08017eb0
 8013b88:	08018060 	.word	0x08018060
 8013b8c:	08018080 	.word	0x08018080
 8013b90:	080138a1 	.word	0x080138a1

08013b94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b086      	sub	sp, #24
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013b9e:	230e      	movs	r3, #14
 8013ba0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	895b      	ldrh	r3, [r3, #10]
 8013ba6:	2b0e      	cmp	r3, #14
 8013ba8:	d96e      	bls.n	8013c88 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	7bdb      	ldrb	r3, [r3, #15]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d106      	bne.n	8013bc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013bb8:	3301      	adds	r3, #1
 8013bba:	b2da      	uxtb	r2, r3
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	7b1a      	ldrb	r2, [r3, #12]
 8013bca:	7b5b      	ldrb	r3, [r3, #13]
 8013bcc:	021b      	lsls	r3, r3, #8
 8013bce:	4313      	orrs	r3, r2
 8013bd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	f003 0301 	and.w	r3, r3, #1
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d023      	beq.n	8013c26 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	2b01      	cmp	r3, #1
 8013be4:	d10f      	bne.n	8013c06 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	785b      	ldrb	r3, [r3, #1]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d11b      	bne.n	8013c26 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013bf2:	2b5e      	cmp	r3, #94	; 0x5e
 8013bf4:	d117      	bne.n	8013c26 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	7b5b      	ldrb	r3, [r3, #13]
 8013bfa:	f043 0310 	orr.w	r3, r3, #16
 8013bfe:	b2da      	uxtb	r2, r3
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	735a      	strb	r2, [r3, #13]
 8013c04:	e00f      	b.n	8013c26 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	2206      	movs	r2, #6
 8013c0a:	4928      	ldr	r1, [pc, #160]	; (8013cac <ethernet_input+0x118>)
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f000 f8bb 	bl	8013d88 <memcmp>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d106      	bne.n	8013c26 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	7b5b      	ldrb	r3, [r3, #13]
 8013c1c:	f043 0308 	orr.w	r3, r3, #8
 8013c20:	b2da      	uxtb	r2, r3
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013c26:	89fb      	ldrh	r3, [r7, #14]
 8013c28:	2b08      	cmp	r3, #8
 8013c2a:	d003      	beq.n	8013c34 <ethernet_input+0xa0>
 8013c2c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013c30:	d014      	beq.n	8013c5c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013c32:	e032      	b.n	8013c9a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c3a:	f003 0308 	and.w	r3, r3, #8
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d024      	beq.n	8013c8c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c42:	8afb      	ldrh	r3, [r7, #22]
 8013c44:	4619      	mov	r1, r3
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f7f5 fc78 	bl	800953c <pbuf_remove_header>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d11e      	bne.n	8013c90 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013c52:	6839      	ldr	r1, [r7, #0]
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f7fe ff03 	bl	8012a60 <ip4_input>
      break;
 8013c5a:	e013      	b.n	8013c84 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c62:	f003 0308 	and.w	r3, r3, #8
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d014      	beq.n	8013c94 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c6a:	8afb      	ldrh	r3, [r7, #22]
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7f5 fc64 	bl	800953c <pbuf_remove_header>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d10e      	bne.n	8013c98 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013c7a:	6839      	ldr	r1, [r7, #0]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7fe f89f 	bl	8011dc0 <etharp_input>
      break;
 8013c82:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013c84:	2300      	movs	r3, #0
 8013c86:	e00c      	b.n	8013ca2 <ethernet_input+0x10e>
    goto free_and_return;
 8013c88:	bf00      	nop
 8013c8a:	e006      	b.n	8013c9a <ethernet_input+0x106>
        goto free_and_return;
 8013c8c:	bf00      	nop
 8013c8e:	e004      	b.n	8013c9a <ethernet_input+0x106>
        goto free_and_return;
 8013c90:	bf00      	nop
 8013c92:	e002      	b.n	8013c9a <ethernet_input+0x106>
        goto free_and_return;
 8013c94:	bf00      	nop
 8013c96:	e000      	b.n	8013c9a <ethernet_input+0x106>
        goto free_and_return;
 8013c98:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f7f5 fcd4 	bl	8009648 <pbuf_free>
  return ERR_OK;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3718      	adds	r7, #24
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	0801a758 	.word	0x0801a758

08013cb0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b086      	sub	sp, #24
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	60f8      	str	r0, [r7, #12]
 8013cb8:	60b9      	str	r1, [r7, #8]
 8013cba:	607a      	str	r2, [r7, #4]
 8013cbc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013cbe:	8c3b      	ldrh	r3, [r7, #32]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7f4 f957 	bl	8007f74 <lwip_htons>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013cca:	210e      	movs	r1, #14
 8013ccc:	68b8      	ldr	r0, [r7, #8]
 8013cce:	f7f5 fc25 	bl	800951c <pbuf_add_header>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d125      	bne.n	8013d24 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013cde:	693b      	ldr	r3, [r7, #16]
 8013ce0:	8afa      	ldrh	r2, [r7, #22]
 8013ce2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013ce4:	693b      	ldr	r3, [r7, #16]
 8013ce6:	2206      	movs	r2, #6
 8013ce8:	6839      	ldr	r1, [r7, #0]
 8013cea:	4618      	mov	r0, r3
 8013cec:	f000 f85c 	bl	8013da8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	3306      	adds	r3, #6
 8013cf4:	2206      	movs	r2, #6
 8013cf6:	6879      	ldr	r1, [r7, #4]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f000 f855 	bl	8013da8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d04:	2b06      	cmp	r3, #6
 8013d06:	d006      	beq.n	8013d16 <ethernet_output+0x66>
 8013d08:	4b0a      	ldr	r3, [pc, #40]	; (8013d34 <ethernet_output+0x84>)
 8013d0a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013d0e:	490a      	ldr	r1, [pc, #40]	; (8013d38 <ethernet_output+0x88>)
 8013d10:	480a      	ldr	r0, [pc, #40]	; (8013d3c <ethernet_output+0x8c>)
 8013d12:	f000 f879 	bl	8013e08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	699b      	ldr	r3, [r3, #24]
 8013d1a:	68b9      	ldr	r1, [r7, #8]
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	4798      	blx	r3
 8013d20:	4603      	mov	r3, r0
 8013d22:	e002      	b.n	8013d2a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013d24:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013d26:	f06f 0301 	mvn.w	r3, #1
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3718      	adds	r7, #24
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	08018090 	.word	0x08018090
 8013d38:	080180c8 	.word	0x080180c8
 8013d3c:	080180fc 	.word	0x080180fc

08013d40 <__libc_init_array>:
 8013d40:	b570      	push	{r4, r5, r6, lr}
 8013d42:	4d0d      	ldr	r5, [pc, #52]	; (8013d78 <__libc_init_array+0x38>)
 8013d44:	4c0d      	ldr	r4, [pc, #52]	; (8013d7c <__libc_init_array+0x3c>)
 8013d46:	1b64      	subs	r4, r4, r5
 8013d48:	10a4      	asrs	r4, r4, #2
 8013d4a:	2600      	movs	r6, #0
 8013d4c:	42a6      	cmp	r6, r4
 8013d4e:	d109      	bne.n	8013d64 <__libc_init_array+0x24>
 8013d50:	4d0b      	ldr	r5, [pc, #44]	; (8013d80 <__libc_init_array+0x40>)
 8013d52:	4c0c      	ldr	r4, [pc, #48]	; (8013d84 <__libc_init_array+0x44>)
 8013d54:	f001 fa5c 	bl	8015210 <_init>
 8013d58:	1b64      	subs	r4, r4, r5
 8013d5a:	10a4      	asrs	r4, r4, #2
 8013d5c:	2600      	movs	r6, #0
 8013d5e:	42a6      	cmp	r6, r4
 8013d60:	d105      	bne.n	8013d6e <__libc_init_array+0x2e>
 8013d62:	bd70      	pop	{r4, r5, r6, pc}
 8013d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d68:	4798      	blx	r3
 8013d6a:	3601      	adds	r6, #1
 8013d6c:	e7ee      	b.n	8013d4c <__libc_init_array+0xc>
 8013d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d72:	4798      	blx	r3
 8013d74:	3601      	adds	r6, #1
 8013d76:	e7f2      	b.n	8013d5e <__libc_init_array+0x1e>
 8013d78:	0801a8b8 	.word	0x0801a8b8
 8013d7c:	0801a8b8 	.word	0x0801a8b8
 8013d80:	0801a8b8 	.word	0x0801a8b8
 8013d84:	0801a8bc 	.word	0x0801a8bc

08013d88 <memcmp>:
 8013d88:	b510      	push	{r4, lr}
 8013d8a:	3901      	subs	r1, #1
 8013d8c:	4402      	add	r2, r0
 8013d8e:	4290      	cmp	r0, r2
 8013d90:	d101      	bne.n	8013d96 <memcmp+0xe>
 8013d92:	2000      	movs	r0, #0
 8013d94:	e005      	b.n	8013da2 <memcmp+0x1a>
 8013d96:	7803      	ldrb	r3, [r0, #0]
 8013d98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013d9c:	42a3      	cmp	r3, r4
 8013d9e:	d001      	beq.n	8013da4 <memcmp+0x1c>
 8013da0:	1b18      	subs	r0, r3, r4
 8013da2:	bd10      	pop	{r4, pc}
 8013da4:	3001      	adds	r0, #1
 8013da6:	e7f2      	b.n	8013d8e <memcmp+0x6>

08013da8 <memcpy>:
 8013da8:	440a      	add	r2, r1
 8013daa:	4291      	cmp	r1, r2
 8013dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8013db0:	d100      	bne.n	8013db4 <memcpy+0xc>
 8013db2:	4770      	bx	lr
 8013db4:	b510      	push	{r4, lr}
 8013db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013dbe:	4291      	cmp	r1, r2
 8013dc0:	d1f9      	bne.n	8013db6 <memcpy+0xe>
 8013dc2:	bd10      	pop	{r4, pc}

08013dc4 <memmove>:
 8013dc4:	4288      	cmp	r0, r1
 8013dc6:	b510      	push	{r4, lr}
 8013dc8:	eb01 0402 	add.w	r4, r1, r2
 8013dcc:	d902      	bls.n	8013dd4 <memmove+0x10>
 8013dce:	4284      	cmp	r4, r0
 8013dd0:	4623      	mov	r3, r4
 8013dd2:	d807      	bhi.n	8013de4 <memmove+0x20>
 8013dd4:	1e43      	subs	r3, r0, #1
 8013dd6:	42a1      	cmp	r1, r4
 8013dd8:	d008      	beq.n	8013dec <memmove+0x28>
 8013dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013de2:	e7f8      	b.n	8013dd6 <memmove+0x12>
 8013de4:	4402      	add	r2, r0
 8013de6:	4601      	mov	r1, r0
 8013de8:	428a      	cmp	r2, r1
 8013dea:	d100      	bne.n	8013dee <memmove+0x2a>
 8013dec:	bd10      	pop	{r4, pc}
 8013dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013df6:	e7f7      	b.n	8013de8 <memmove+0x24>

08013df8 <memset>:
 8013df8:	4402      	add	r2, r0
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d100      	bne.n	8013e02 <memset+0xa>
 8013e00:	4770      	bx	lr
 8013e02:	f803 1b01 	strb.w	r1, [r3], #1
 8013e06:	e7f9      	b.n	8013dfc <memset+0x4>

08013e08 <iprintf>:
 8013e08:	b40f      	push	{r0, r1, r2, r3}
 8013e0a:	4b0a      	ldr	r3, [pc, #40]	; (8013e34 <iprintf+0x2c>)
 8013e0c:	b513      	push	{r0, r1, r4, lr}
 8013e0e:	681c      	ldr	r4, [r3, #0]
 8013e10:	b124      	cbz	r4, 8013e1c <iprintf+0x14>
 8013e12:	69a3      	ldr	r3, [r4, #24]
 8013e14:	b913      	cbnz	r3, 8013e1c <iprintf+0x14>
 8013e16:	4620      	mov	r0, r4
 8013e18:	f000 f8e2 	bl	8013fe0 <__sinit>
 8013e1c:	ab05      	add	r3, sp, #20
 8013e1e:	9a04      	ldr	r2, [sp, #16]
 8013e20:	68a1      	ldr	r1, [r4, #8]
 8013e22:	9301      	str	r3, [sp, #4]
 8013e24:	4620      	mov	r0, r4
 8013e26:	f000 fbfb 	bl	8014620 <_vfiprintf_r>
 8013e2a:	b002      	add	sp, #8
 8013e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e30:	b004      	add	sp, #16
 8013e32:	4770      	bx	lr
 8013e34:	20000048 	.word	0x20000048

08013e38 <rand>:
 8013e38:	4b16      	ldr	r3, [pc, #88]	; (8013e94 <rand+0x5c>)
 8013e3a:	b510      	push	{r4, lr}
 8013e3c:	681c      	ldr	r4, [r3, #0]
 8013e3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013e40:	b9b3      	cbnz	r3, 8013e70 <rand+0x38>
 8013e42:	2018      	movs	r0, #24
 8013e44:	f000 f97e 	bl	8014144 <malloc>
 8013e48:	63a0      	str	r0, [r4, #56]	; 0x38
 8013e4a:	b928      	cbnz	r0, 8013e58 <rand+0x20>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	4b12      	ldr	r3, [pc, #72]	; (8013e98 <rand+0x60>)
 8013e50:	4812      	ldr	r0, [pc, #72]	; (8013e9c <rand+0x64>)
 8013e52:	214e      	movs	r1, #78	; 0x4e
 8013e54:	f000 f84e 	bl	8013ef4 <__assert_func>
 8013e58:	4a11      	ldr	r2, [pc, #68]	; (8013ea0 <rand+0x68>)
 8013e5a:	4b12      	ldr	r3, [pc, #72]	; (8013ea4 <rand+0x6c>)
 8013e5c:	e9c0 2300 	strd	r2, r3, [r0]
 8013e60:	4b11      	ldr	r3, [pc, #68]	; (8013ea8 <rand+0x70>)
 8013e62:	6083      	str	r3, [r0, #8]
 8013e64:	230b      	movs	r3, #11
 8013e66:	8183      	strh	r3, [r0, #12]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013e70:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013e72:	4a0e      	ldr	r2, [pc, #56]	; (8013eac <rand+0x74>)
 8013e74:	6920      	ldr	r0, [r4, #16]
 8013e76:	6963      	ldr	r3, [r4, #20]
 8013e78:	490d      	ldr	r1, [pc, #52]	; (8013eb0 <rand+0x78>)
 8013e7a:	4342      	muls	r2, r0
 8013e7c:	fb01 2203 	mla	r2, r1, r3, r2
 8013e80:	fba0 0101 	umull	r0, r1, r0, r1
 8013e84:	1c43      	adds	r3, r0, #1
 8013e86:	eb42 0001 	adc.w	r0, r2, r1
 8013e8a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013e8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013e92:	bd10      	pop	{r4, pc}
 8013e94:	20000048 	.word	0x20000048
 8013e98:	0801a76c 	.word	0x0801a76c
 8013e9c:	0801a783 	.word	0x0801a783
 8013ea0:	abcd330e 	.word	0xabcd330e
 8013ea4:	e66d1234 	.word	0xe66d1234
 8013ea8:	0005deec 	.word	0x0005deec
 8013eac:	5851f42d 	.word	0x5851f42d
 8013eb0:	4c957f2d 	.word	0x4c957f2d

08013eb4 <siprintf>:
 8013eb4:	b40e      	push	{r1, r2, r3}
 8013eb6:	b500      	push	{lr}
 8013eb8:	b09c      	sub	sp, #112	; 0x70
 8013eba:	ab1d      	add	r3, sp, #116	; 0x74
 8013ebc:	9002      	str	r0, [sp, #8]
 8013ebe:	9006      	str	r0, [sp, #24]
 8013ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ec4:	4809      	ldr	r0, [pc, #36]	; (8013eec <siprintf+0x38>)
 8013ec6:	9107      	str	r1, [sp, #28]
 8013ec8:	9104      	str	r1, [sp, #16]
 8013eca:	4909      	ldr	r1, [pc, #36]	; (8013ef0 <siprintf+0x3c>)
 8013ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ed0:	9105      	str	r1, [sp, #20]
 8013ed2:	6800      	ldr	r0, [r0, #0]
 8013ed4:	9301      	str	r3, [sp, #4]
 8013ed6:	a902      	add	r1, sp, #8
 8013ed8:	f000 fa78 	bl	80143cc <_svfiprintf_r>
 8013edc:	9b02      	ldr	r3, [sp, #8]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	701a      	strb	r2, [r3, #0]
 8013ee2:	b01c      	add	sp, #112	; 0x70
 8013ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ee8:	b003      	add	sp, #12
 8013eea:	4770      	bx	lr
 8013eec:	20000048 	.word	0x20000048
 8013ef0:	ffff0208 	.word	0xffff0208

08013ef4 <__assert_func>:
 8013ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ef6:	4614      	mov	r4, r2
 8013ef8:	461a      	mov	r2, r3
 8013efa:	4b09      	ldr	r3, [pc, #36]	; (8013f20 <__assert_func+0x2c>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	4605      	mov	r5, r0
 8013f00:	68d8      	ldr	r0, [r3, #12]
 8013f02:	b14c      	cbz	r4, 8013f18 <__assert_func+0x24>
 8013f04:	4b07      	ldr	r3, [pc, #28]	; (8013f24 <__assert_func+0x30>)
 8013f06:	9100      	str	r1, [sp, #0]
 8013f08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f0c:	4906      	ldr	r1, [pc, #24]	; (8013f28 <__assert_func+0x34>)
 8013f0e:	462b      	mov	r3, r5
 8013f10:	f000 f8e4 	bl	80140dc <fiprintf>
 8013f14:	f000 ff6e 	bl	8014df4 <abort>
 8013f18:	4b04      	ldr	r3, [pc, #16]	; (8013f2c <__assert_func+0x38>)
 8013f1a:	461c      	mov	r4, r3
 8013f1c:	e7f3      	b.n	8013f06 <__assert_func+0x12>
 8013f1e:	bf00      	nop
 8013f20:	20000048 	.word	0x20000048
 8013f24:	0801a7de 	.word	0x0801a7de
 8013f28:	0801a7eb 	.word	0x0801a7eb
 8013f2c:	0801a819 	.word	0x0801a819

08013f30 <std>:
 8013f30:	2300      	movs	r3, #0
 8013f32:	b510      	push	{r4, lr}
 8013f34:	4604      	mov	r4, r0
 8013f36:	e9c0 3300 	strd	r3, r3, [r0]
 8013f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013f3e:	6083      	str	r3, [r0, #8]
 8013f40:	8181      	strh	r1, [r0, #12]
 8013f42:	6643      	str	r3, [r0, #100]	; 0x64
 8013f44:	81c2      	strh	r2, [r0, #14]
 8013f46:	6183      	str	r3, [r0, #24]
 8013f48:	4619      	mov	r1, r3
 8013f4a:	2208      	movs	r2, #8
 8013f4c:	305c      	adds	r0, #92	; 0x5c
 8013f4e:	f7ff ff53 	bl	8013df8 <memset>
 8013f52:	4b05      	ldr	r3, [pc, #20]	; (8013f68 <std+0x38>)
 8013f54:	6263      	str	r3, [r4, #36]	; 0x24
 8013f56:	4b05      	ldr	r3, [pc, #20]	; (8013f6c <std+0x3c>)
 8013f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f5a:	4b05      	ldr	r3, [pc, #20]	; (8013f70 <std+0x40>)
 8013f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f5e:	4b05      	ldr	r3, [pc, #20]	; (8013f74 <std+0x44>)
 8013f60:	6224      	str	r4, [r4, #32]
 8013f62:	6323      	str	r3, [r4, #48]	; 0x30
 8013f64:	bd10      	pop	{r4, pc}
 8013f66:	bf00      	nop
 8013f68:	08014bc9 	.word	0x08014bc9
 8013f6c:	08014beb 	.word	0x08014beb
 8013f70:	08014c23 	.word	0x08014c23
 8013f74:	08014c47 	.word	0x08014c47

08013f78 <_cleanup_r>:
 8013f78:	4901      	ldr	r1, [pc, #4]	; (8013f80 <_cleanup_r+0x8>)
 8013f7a:	f000 b8c1 	b.w	8014100 <_fwalk_reent>
 8013f7e:	bf00      	nop
 8013f80:	08014f31 	.word	0x08014f31

08013f84 <__sfmoreglue>:
 8013f84:	b570      	push	{r4, r5, r6, lr}
 8013f86:	2268      	movs	r2, #104	; 0x68
 8013f88:	1e4d      	subs	r5, r1, #1
 8013f8a:	4355      	muls	r5, r2
 8013f8c:	460e      	mov	r6, r1
 8013f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013f92:	f000 f94b 	bl	801422c <_malloc_r>
 8013f96:	4604      	mov	r4, r0
 8013f98:	b140      	cbz	r0, 8013fac <__sfmoreglue+0x28>
 8013f9a:	2100      	movs	r1, #0
 8013f9c:	e9c0 1600 	strd	r1, r6, [r0]
 8013fa0:	300c      	adds	r0, #12
 8013fa2:	60a0      	str	r0, [r4, #8]
 8013fa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013fa8:	f7ff ff26 	bl	8013df8 <memset>
 8013fac:	4620      	mov	r0, r4
 8013fae:	bd70      	pop	{r4, r5, r6, pc}

08013fb0 <__sfp_lock_acquire>:
 8013fb0:	4801      	ldr	r0, [pc, #4]	; (8013fb8 <__sfp_lock_acquire+0x8>)
 8013fb2:	f000 b8c5 	b.w	8014140 <__retarget_lock_acquire_recursive>
 8013fb6:	bf00      	nop
 8013fb8:	2000b055 	.word	0x2000b055

08013fbc <__sfp_lock_release>:
 8013fbc:	4801      	ldr	r0, [pc, #4]	; (8013fc4 <__sfp_lock_release+0x8>)
 8013fbe:	f000 b8c0 	b.w	8014142 <__retarget_lock_release_recursive>
 8013fc2:	bf00      	nop
 8013fc4:	2000b055 	.word	0x2000b055

08013fc8 <__sinit_lock_acquire>:
 8013fc8:	4801      	ldr	r0, [pc, #4]	; (8013fd0 <__sinit_lock_acquire+0x8>)
 8013fca:	f000 b8b9 	b.w	8014140 <__retarget_lock_acquire_recursive>
 8013fce:	bf00      	nop
 8013fd0:	2000b056 	.word	0x2000b056

08013fd4 <__sinit_lock_release>:
 8013fd4:	4801      	ldr	r0, [pc, #4]	; (8013fdc <__sinit_lock_release+0x8>)
 8013fd6:	f000 b8b4 	b.w	8014142 <__retarget_lock_release_recursive>
 8013fda:	bf00      	nop
 8013fdc:	2000b056 	.word	0x2000b056

08013fe0 <__sinit>:
 8013fe0:	b510      	push	{r4, lr}
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	f7ff fff0 	bl	8013fc8 <__sinit_lock_acquire>
 8013fe8:	69a3      	ldr	r3, [r4, #24]
 8013fea:	b11b      	cbz	r3, 8013ff4 <__sinit+0x14>
 8013fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ff0:	f7ff bff0 	b.w	8013fd4 <__sinit_lock_release>
 8013ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8013ffa:	4b13      	ldr	r3, [pc, #76]	; (8014048 <__sinit+0x68>)
 8013ffc:	4a13      	ldr	r2, [pc, #76]	; (801404c <__sinit+0x6c>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	62a2      	str	r2, [r4, #40]	; 0x28
 8014002:	42a3      	cmp	r3, r4
 8014004:	bf04      	itt	eq
 8014006:	2301      	moveq	r3, #1
 8014008:	61a3      	streq	r3, [r4, #24]
 801400a:	4620      	mov	r0, r4
 801400c:	f000 f820 	bl	8014050 <__sfp>
 8014010:	6060      	str	r0, [r4, #4]
 8014012:	4620      	mov	r0, r4
 8014014:	f000 f81c 	bl	8014050 <__sfp>
 8014018:	60a0      	str	r0, [r4, #8]
 801401a:	4620      	mov	r0, r4
 801401c:	f000 f818 	bl	8014050 <__sfp>
 8014020:	2200      	movs	r2, #0
 8014022:	60e0      	str	r0, [r4, #12]
 8014024:	2104      	movs	r1, #4
 8014026:	6860      	ldr	r0, [r4, #4]
 8014028:	f7ff ff82 	bl	8013f30 <std>
 801402c:	68a0      	ldr	r0, [r4, #8]
 801402e:	2201      	movs	r2, #1
 8014030:	2109      	movs	r1, #9
 8014032:	f7ff ff7d 	bl	8013f30 <std>
 8014036:	68e0      	ldr	r0, [r4, #12]
 8014038:	2202      	movs	r2, #2
 801403a:	2112      	movs	r1, #18
 801403c:	f7ff ff78 	bl	8013f30 <std>
 8014040:	2301      	movs	r3, #1
 8014042:	61a3      	str	r3, [r4, #24]
 8014044:	e7d2      	b.n	8013fec <__sinit+0xc>
 8014046:	bf00      	nop
 8014048:	0801a768 	.word	0x0801a768
 801404c:	08013f79 	.word	0x08013f79

08014050 <__sfp>:
 8014050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014052:	4607      	mov	r7, r0
 8014054:	f7ff ffac 	bl	8013fb0 <__sfp_lock_acquire>
 8014058:	4b1e      	ldr	r3, [pc, #120]	; (80140d4 <__sfp+0x84>)
 801405a:	681e      	ldr	r6, [r3, #0]
 801405c:	69b3      	ldr	r3, [r6, #24]
 801405e:	b913      	cbnz	r3, 8014066 <__sfp+0x16>
 8014060:	4630      	mov	r0, r6
 8014062:	f7ff ffbd 	bl	8013fe0 <__sinit>
 8014066:	3648      	adds	r6, #72	; 0x48
 8014068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801406c:	3b01      	subs	r3, #1
 801406e:	d503      	bpl.n	8014078 <__sfp+0x28>
 8014070:	6833      	ldr	r3, [r6, #0]
 8014072:	b30b      	cbz	r3, 80140b8 <__sfp+0x68>
 8014074:	6836      	ldr	r6, [r6, #0]
 8014076:	e7f7      	b.n	8014068 <__sfp+0x18>
 8014078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801407c:	b9d5      	cbnz	r5, 80140b4 <__sfp+0x64>
 801407e:	4b16      	ldr	r3, [pc, #88]	; (80140d8 <__sfp+0x88>)
 8014080:	60e3      	str	r3, [r4, #12]
 8014082:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014086:	6665      	str	r5, [r4, #100]	; 0x64
 8014088:	f000 f859 	bl	801413e <__retarget_lock_init_recursive>
 801408c:	f7ff ff96 	bl	8013fbc <__sfp_lock_release>
 8014090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014098:	6025      	str	r5, [r4, #0]
 801409a:	61a5      	str	r5, [r4, #24]
 801409c:	2208      	movs	r2, #8
 801409e:	4629      	mov	r1, r5
 80140a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80140a4:	f7ff fea8 	bl	8013df8 <memset>
 80140a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80140ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80140b0:	4620      	mov	r0, r4
 80140b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140b4:	3468      	adds	r4, #104	; 0x68
 80140b6:	e7d9      	b.n	801406c <__sfp+0x1c>
 80140b8:	2104      	movs	r1, #4
 80140ba:	4638      	mov	r0, r7
 80140bc:	f7ff ff62 	bl	8013f84 <__sfmoreglue>
 80140c0:	4604      	mov	r4, r0
 80140c2:	6030      	str	r0, [r6, #0]
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d1d5      	bne.n	8014074 <__sfp+0x24>
 80140c8:	f7ff ff78 	bl	8013fbc <__sfp_lock_release>
 80140cc:	230c      	movs	r3, #12
 80140ce:	603b      	str	r3, [r7, #0]
 80140d0:	e7ee      	b.n	80140b0 <__sfp+0x60>
 80140d2:	bf00      	nop
 80140d4:	0801a768 	.word	0x0801a768
 80140d8:	ffff0001 	.word	0xffff0001

080140dc <fiprintf>:
 80140dc:	b40e      	push	{r1, r2, r3}
 80140de:	b503      	push	{r0, r1, lr}
 80140e0:	4601      	mov	r1, r0
 80140e2:	ab03      	add	r3, sp, #12
 80140e4:	4805      	ldr	r0, [pc, #20]	; (80140fc <fiprintf+0x20>)
 80140e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80140ea:	6800      	ldr	r0, [r0, #0]
 80140ec:	9301      	str	r3, [sp, #4]
 80140ee:	f000 fa97 	bl	8014620 <_vfiprintf_r>
 80140f2:	b002      	add	sp, #8
 80140f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80140f8:	b003      	add	sp, #12
 80140fa:	4770      	bx	lr
 80140fc:	20000048 	.word	0x20000048

08014100 <_fwalk_reent>:
 8014100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014104:	4606      	mov	r6, r0
 8014106:	4688      	mov	r8, r1
 8014108:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801410c:	2700      	movs	r7, #0
 801410e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014112:	f1b9 0901 	subs.w	r9, r9, #1
 8014116:	d505      	bpl.n	8014124 <_fwalk_reent+0x24>
 8014118:	6824      	ldr	r4, [r4, #0]
 801411a:	2c00      	cmp	r4, #0
 801411c:	d1f7      	bne.n	801410e <_fwalk_reent+0xe>
 801411e:	4638      	mov	r0, r7
 8014120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014124:	89ab      	ldrh	r3, [r5, #12]
 8014126:	2b01      	cmp	r3, #1
 8014128:	d907      	bls.n	801413a <_fwalk_reent+0x3a>
 801412a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801412e:	3301      	adds	r3, #1
 8014130:	d003      	beq.n	801413a <_fwalk_reent+0x3a>
 8014132:	4629      	mov	r1, r5
 8014134:	4630      	mov	r0, r6
 8014136:	47c0      	blx	r8
 8014138:	4307      	orrs	r7, r0
 801413a:	3568      	adds	r5, #104	; 0x68
 801413c:	e7e9      	b.n	8014112 <_fwalk_reent+0x12>

0801413e <__retarget_lock_init_recursive>:
 801413e:	4770      	bx	lr

08014140 <__retarget_lock_acquire_recursive>:
 8014140:	4770      	bx	lr

08014142 <__retarget_lock_release_recursive>:
 8014142:	4770      	bx	lr

08014144 <malloc>:
 8014144:	4b02      	ldr	r3, [pc, #8]	; (8014150 <malloc+0xc>)
 8014146:	4601      	mov	r1, r0
 8014148:	6818      	ldr	r0, [r3, #0]
 801414a:	f000 b86f 	b.w	801422c <_malloc_r>
 801414e:	bf00      	nop
 8014150:	20000048 	.word	0x20000048

08014154 <_free_r>:
 8014154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014156:	2900      	cmp	r1, #0
 8014158:	d044      	beq.n	80141e4 <_free_r+0x90>
 801415a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801415e:	9001      	str	r0, [sp, #4]
 8014160:	2b00      	cmp	r3, #0
 8014162:	f1a1 0404 	sub.w	r4, r1, #4
 8014166:	bfb8      	it	lt
 8014168:	18e4      	addlt	r4, r4, r3
 801416a:	f000 ff95 	bl	8015098 <__malloc_lock>
 801416e:	4a1e      	ldr	r2, [pc, #120]	; (80141e8 <_free_r+0x94>)
 8014170:	9801      	ldr	r0, [sp, #4]
 8014172:	6813      	ldr	r3, [r2, #0]
 8014174:	b933      	cbnz	r3, 8014184 <_free_r+0x30>
 8014176:	6063      	str	r3, [r4, #4]
 8014178:	6014      	str	r4, [r2, #0]
 801417a:	b003      	add	sp, #12
 801417c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014180:	f000 bf90 	b.w	80150a4 <__malloc_unlock>
 8014184:	42a3      	cmp	r3, r4
 8014186:	d908      	bls.n	801419a <_free_r+0x46>
 8014188:	6825      	ldr	r5, [r4, #0]
 801418a:	1961      	adds	r1, r4, r5
 801418c:	428b      	cmp	r3, r1
 801418e:	bf01      	itttt	eq
 8014190:	6819      	ldreq	r1, [r3, #0]
 8014192:	685b      	ldreq	r3, [r3, #4]
 8014194:	1949      	addeq	r1, r1, r5
 8014196:	6021      	streq	r1, [r4, #0]
 8014198:	e7ed      	b.n	8014176 <_free_r+0x22>
 801419a:	461a      	mov	r2, r3
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	b10b      	cbz	r3, 80141a4 <_free_r+0x50>
 80141a0:	42a3      	cmp	r3, r4
 80141a2:	d9fa      	bls.n	801419a <_free_r+0x46>
 80141a4:	6811      	ldr	r1, [r2, #0]
 80141a6:	1855      	adds	r5, r2, r1
 80141a8:	42a5      	cmp	r5, r4
 80141aa:	d10b      	bne.n	80141c4 <_free_r+0x70>
 80141ac:	6824      	ldr	r4, [r4, #0]
 80141ae:	4421      	add	r1, r4
 80141b0:	1854      	adds	r4, r2, r1
 80141b2:	42a3      	cmp	r3, r4
 80141b4:	6011      	str	r1, [r2, #0]
 80141b6:	d1e0      	bne.n	801417a <_free_r+0x26>
 80141b8:	681c      	ldr	r4, [r3, #0]
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	6053      	str	r3, [r2, #4]
 80141be:	4421      	add	r1, r4
 80141c0:	6011      	str	r1, [r2, #0]
 80141c2:	e7da      	b.n	801417a <_free_r+0x26>
 80141c4:	d902      	bls.n	80141cc <_free_r+0x78>
 80141c6:	230c      	movs	r3, #12
 80141c8:	6003      	str	r3, [r0, #0]
 80141ca:	e7d6      	b.n	801417a <_free_r+0x26>
 80141cc:	6825      	ldr	r5, [r4, #0]
 80141ce:	1961      	adds	r1, r4, r5
 80141d0:	428b      	cmp	r3, r1
 80141d2:	bf04      	itt	eq
 80141d4:	6819      	ldreq	r1, [r3, #0]
 80141d6:	685b      	ldreq	r3, [r3, #4]
 80141d8:	6063      	str	r3, [r4, #4]
 80141da:	bf04      	itt	eq
 80141dc:	1949      	addeq	r1, r1, r5
 80141de:	6021      	streq	r1, [r4, #0]
 80141e0:	6054      	str	r4, [r2, #4]
 80141e2:	e7ca      	b.n	801417a <_free_r+0x26>
 80141e4:	b003      	add	sp, #12
 80141e6:	bd30      	pop	{r4, r5, pc}
 80141e8:	2000b058 	.word	0x2000b058

080141ec <sbrk_aligned>:
 80141ec:	b570      	push	{r4, r5, r6, lr}
 80141ee:	4e0e      	ldr	r6, [pc, #56]	; (8014228 <sbrk_aligned+0x3c>)
 80141f0:	460c      	mov	r4, r1
 80141f2:	6831      	ldr	r1, [r6, #0]
 80141f4:	4605      	mov	r5, r0
 80141f6:	b911      	cbnz	r1, 80141fe <sbrk_aligned+0x12>
 80141f8:	f000 fcd6 	bl	8014ba8 <_sbrk_r>
 80141fc:	6030      	str	r0, [r6, #0]
 80141fe:	4621      	mov	r1, r4
 8014200:	4628      	mov	r0, r5
 8014202:	f000 fcd1 	bl	8014ba8 <_sbrk_r>
 8014206:	1c43      	adds	r3, r0, #1
 8014208:	d00a      	beq.n	8014220 <sbrk_aligned+0x34>
 801420a:	1cc4      	adds	r4, r0, #3
 801420c:	f024 0403 	bic.w	r4, r4, #3
 8014210:	42a0      	cmp	r0, r4
 8014212:	d007      	beq.n	8014224 <sbrk_aligned+0x38>
 8014214:	1a21      	subs	r1, r4, r0
 8014216:	4628      	mov	r0, r5
 8014218:	f000 fcc6 	bl	8014ba8 <_sbrk_r>
 801421c:	3001      	adds	r0, #1
 801421e:	d101      	bne.n	8014224 <sbrk_aligned+0x38>
 8014220:	f04f 34ff 	mov.w	r4, #4294967295
 8014224:	4620      	mov	r0, r4
 8014226:	bd70      	pop	{r4, r5, r6, pc}
 8014228:	2000b05c 	.word	0x2000b05c

0801422c <_malloc_r>:
 801422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014230:	1ccd      	adds	r5, r1, #3
 8014232:	f025 0503 	bic.w	r5, r5, #3
 8014236:	3508      	adds	r5, #8
 8014238:	2d0c      	cmp	r5, #12
 801423a:	bf38      	it	cc
 801423c:	250c      	movcc	r5, #12
 801423e:	2d00      	cmp	r5, #0
 8014240:	4607      	mov	r7, r0
 8014242:	db01      	blt.n	8014248 <_malloc_r+0x1c>
 8014244:	42a9      	cmp	r1, r5
 8014246:	d905      	bls.n	8014254 <_malloc_r+0x28>
 8014248:	230c      	movs	r3, #12
 801424a:	603b      	str	r3, [r7, #0]
 801424c:	2600      	movs	r6, #0
 801424e:	4630      	mov	r0, r6
 8014250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014254:	4e2e      	ldr	r6, [pc, #184]	; (8014310 <_malloc_r+0xe4>)
 8014256:	f000 ff1f 	bl	8015098 <__malloc_lock>
 801425a:	6833      	ldr	r3, [r6, #0]
 801425c:	461c      	mov	r4, r3
 801425e:	bb34      	cbnz	r4, 80142ae <_malloc_r+0x82>
 8014260:	4629      	mov	r1, r5
 8014262:	4638      	mov	r0, r7
 8014264:	f7ff ffc2 	bl	80141ec <sbrk_aligned>
 8014268:	1c43      	adds	r3, r0, #1
 801426a:	4604      	mov	r4, r0
 801426c:	d14d      	bne.n	801430a <_malloc_r+0xde>
 801426e:	6834      	ldr	r4, [r6, #0]
 8014270:	4626      	mov	r6, r4
 8014272:	2e00      	cmp	r6, #0
 8014274:	d140      	bne.n	80142f8 <_malloc_r+0xcc>
 8014276:	6823      	ldr	r3, [r4, #0]
 8014278:	4631      	mov	r1, r6
 801427a:	4638      	mov	r0, r7
 801427c:	eb04 0803 	add.w	r8, r4, r3
 8014280:	f000 fc92 	bl	8014ba8 <_sbrk_r>
 8014284:	4580      	cmp	r8, r0
 8014286:	d13a      	bne.n	80142fe <_malloc_r+0xd2>
 8014288:	6821      	ldr	r1, [r4, #0]
 801428a:	3503      	adds	r5, #3
 801428c:	1a6d      	subs	r5, r5, r1
 801428e:	f025 0503 	bic.w	r5, r5, #3
 8014292:	3508      	adds	r5, #8
 8014294:	2d0c      	cmp	r5, #12
 8014296:	bf38      	it	cc
 8014298:	250c      	movcc	r5, #12
 801429a:	4629      	mov	r1, r5
 801429c:	4638      	mov	r0, r7
 801429e:	f7ff ffa5 	bl	80141ec <sbrk_aligned>
 80142a2:	3001      	adds	r0, #1
 80142a4:	d02b      	beq.n	80142fe <_malloc_r+0xd2>
 80142a6:	6823      	ldr	r3, [r4, #0]
 80142a8:	442b      	add	r3, r5
 80142aa:	6023      	str	r3, [r4, #0]
 80142ac:	e00e      	b.n	80142cc <_malloc_r+0xa0>
 80142ae:	6822      	ldr	r2, [r4, #0]
 80142b0:	1b52      	subs	r2, r2, r5
 80142b2:	d41e      	bmi.n	80142f2 <_malloc_r+0xc6>
 80142b4:	2a0b      	cmp	r2, #11
 80142b6:	d916      	bls.n	80142e6 <_malloc_r+0xba>
 80142b8:	1961      	adds	r1, r4, r5
 80142ba:	42a3      	cmp	r3, r4
 80142bc:	6025      	str	r5, [r4, #0]
 80142be:	bf18      	it	ne
 80142c0:	6059      	strne	r1, [r3, #4]
 80142c2:	6863      	ldr	r3, [r4, #4]
 80142c4:	bf08      	it	eq
 80142c6:	6031      	streq	r1, [r6, #0]
 80142c8:	5162      	str	r2, [r4, r5]
 80142ca:	604b      	str	r3, [r1, #4]
 80142cc:	4638      	mov	r0, r7
 80142ce:	f104 060b 	add.w	r6, r4, #11
 80142d2:	f000 fee7 	bl	80150a4 <__malloc_unlock>
 80142d6:	f026 0607 	bic.w	r6, r6, #7
 80142da:	1d23      	adds	r3, r4, #4
 80142dc:	1af2      	subs	r2, r6, r3
 80142de:	d0b6      	beq.n	801424e <_malloc_r+0x22>
 80142e0:	1b9b      	subs	r3, r3, r6
 80142e2:	50a3      	str	r3, [r4, r2]
 80142e4:	e7b3      	b.n	801424e <_malloc_r+0x22>
 80142e6:	6862      	ldr	r2, [r4, #4]
 80142e8:	42a3      	cmp	r3, r4
 80142ea:	bf0c      	ite	eq
 80142ec:	6032      	streq	r2, [r6, #0]
 80142ee:	605a      	strne	r2, [r3, #4]
 80142f0:	e7ec      	b.n	80142cc <_malloc_r+0xa0>
 80142f2:	4623      	mov	r3, r4
 80142f4:	6864      	ldr	r4, [r4, #4]
 80142f6:	e7b2      	b.n	801425e <_malloc_r+0x32>
 80142f8:	4634      	mov	r4, r6
 80142fa:	6876      	ldr	r6, [r6, #4]
 80142fc:	e7b9      	b.n	8014272 <_malloc_r+0x46>
 80142fe:	230c      	movs	r3, #12
 8014300:	603b      	str	r3, [r7, #0]
 8014302:	4638      	mov	r0, r7
 8014304:	f000 fece 	bl	80150a4 <__malloc_unlock>
 8014308:	e7a1      	b.n	801424e <_malloc_r+0x22>
 801430a:	6025      	str	r5, [r4, #0]
 801430c:	e7de      	b.n	80142cc <_malloc_r+0xa0>
 801430e:	bf00      	nop
 8014310:	2000b058 	.word	0x2000b058

08014314 <__ssputs_r>:
 8014314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014318:	688e      	ldr	r6, [r1, #8]
 801431a:	429e      	cmp	r6, r3
 801431c:	4682      	mov	sl, r0
 801431e:	460c      	mov	r4, r1
 8014320:	4690      	mov	r8, r2
 8014322:	461f      	mov	r7, r3
 8014324:	d838      	bhi.n	8014398 <__ssputs_r+0x84>
 8014326:	898a      	ldrh	r2, [r1, #12]
 8014328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801432c:	d032      	beq.n	8014394 <__ssputs_r+0x80>
 801432e:	6825      	ldr	r5, [r4, #0]
 8014330:	6909      	ldr	r1, [r1, #16]
 8014332:	eba5 0901 	sub.w	r9, r5, r1
 8014336:	6965      	ldr	r5, [r4, #20]
 8014338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801433c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014340:	3301      	adds	r3, #1
 8014342:	444b      	add	r3, r9
 8014344:	106d      	asrs	r5, r5, #1
 8014346:	429d      	cmp	r5, r3
 8014348:	bf38      	it	cc
 801434a:	461d      	movcc	r5, r3
 801434c:	0553      	lsls	r3, r2, #21
 801434e:	d531      	bpl.n	80143b4 <__ssputs_r+0xa0>
 8014350:	4629      	mov	r1, r5
 8014352:	f7ff ff6b 	bl	801422c <_malloc_r>
 8014356:	4606      	mov	r6, r0
 8014358:	b950      	cbnz	r0, 8014370 <__ssputs_r+0x5c>
 801435a:	230c      	movs	r3, #12
 801435c:	f8ca 3000 	str.w	r3, [sl]
 8014360:	89a3      	ldrh	r3, [r4, #12]
 8014362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014366:	81a3      	strh	r3, [r4, #12]
 8014368:	f04f 30ff 	mov.w	r0, #4294967295
 801436c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014370:	6921      	ldr	r1, [r4, #16]
 8014372:	464a      	mov	r2, r9
 8014374:	f7ff fd18 	bl	8013da8 <memcpy>
 8014378:	89a3      	ldrh	r3, [r4, #12]
 801437a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014382:	81a3      	strh	r3, [r4, #12]
 8014384:	6126      	str	r6, [r4, #16]
 8014386:	6165      	str	r5, [r4, #20]
 8014388:	444e      	add	r6, r9
 801438a:	eba5 0509 	sub.w	r5, r5, r9
 801438e:	6026      	str	r6, [r4, #0]
 8014390:	60a5      	str	r5, [r4, #8]
 8014392:	463e      	mov	r6, r7
 8014394:	42be      	cmp	r6, r7
 8014396:	d900      	bls.n	801439a <__ssputs_r+0x86>
 8014398:	463e      	mov	r6, r7
 801439a:	6820      	ldr	r0, [r4, #0]
 801439c:	4632      	mov	r2, r6
 801439e:	4641      	mov	r1, r8
 80143a0:	f7ff fd10 	bl	8013dc4 <memmove>
 80143a4:	68a3      	ldr	r3, [r4, #8]
 80143a6:	1b9b      	subs	r3, r3, r6
 80143a8:	60a3      	str	r3, [r4, #8]
 80143aa:	6823      	ldr	r3, [r4, #0]
 80143ac:	4433      	add	r3, r6
 80143ae:	6023      	str	r3, [r4, #0]
 80143b0:	2000      	movs	r0, #0
 80143b2:	e7db      	b.n	801436c <__ssputs_r+0x58>
 80143b4:	462a      	mov	r2, r5
 80143b6:	f000 fe7b 	bl	80150b0 <_realloc_r>
 80143ba:	4606      	mov	r6, r0
 80143bc:	2800      	cmp	r0, #0
 80143be:	d1e1      	bne.n	8014384 <__ssputs_r+0x70>
 80143c0:	6921      	ldr	r1, [r4, #16]
 80143c2:	4650      	mov	r0, sl
 80143c4:	f7ff fec6 	bl	8014154 <_free_r>
 80143c8:	e7c7      	b.n	801435a <__ssputs_r+0x46>
	...

080143cc <_svfiprintf_r>:
 80143cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d0:	4698      	mov	r8, r3
 80143d2:	898b      	ldrh	r3, [r1, #12]
 80143d4:	061b      	lsls	r3, r3, #24
 80143d6:	b09d      	sub	sp, #116	; 0x74
 80143d8:	4607      	mov	r7, r0
 80143da:	460d      	mov	r5, r1
 80143dc:	4614      	mov	r4, r2
 80143de:	d50e      	bpl.n	80143fe <_svfiprintf_r+0x32>
 80143e0:	690b      	ldr	r3, [r1, #16]
 80143e2:	b963      	cbnz	r3, 80143fe <_svfiprintf_r+0x32>
 80143e4:	2140      	movs	r1, #64	; 0x40
 80143e6:	f7ff ff21 	bl	801422c <_malloc_r>
 80143ea:	6028      	str	r0, [r5, #0]
 80143ec:	6128      	str	r0, [r5, #16]
 80143ee:	b920      	cbnz	r0, 80143fa <_svfiprintf_r+0x2e>
 80143f0:	230c      	movs	r3, #12
 80143f2:	603b      	str	r3, [r7, #0]
 80143f4:	f04f 30ff 	mov.w	r0, #4294967295
 80143f8:	e0d1      	b.n	801459e <_svfiprintf_r+0x1d2>
 80143fa:	2340      	movs	r3, #64	; 0x40
 80143fc:	616b      	str	r3, [r5, #20]
 80143fe:	2300      	movs	r3, #0
 8014400:	9309      	str	r3, [sp, #36]	; 0x24
 8014402:	2320      	movs	r3, #32
 8014404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014408:	f8cd 800c 	str.w	r8, [sp, #12]
 801440c:	2330      	movs	r3, #48	; 0x30
 801440e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80145b8 <_svfiprintf_r+0x1ec>
 8014412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014416:	f04f 0901 	mov.w	r9, #1
 801441a:	4623      	mov	r3, r4
 801441c:	469a      	mov	sl, r3
 801441e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014422:	b10a      	cbz	r2, 8014428 <_svfiprintf_r+0x5c>
 8014424:	2a25      	cmp	r2, #37	; 0x25
 8014426:	d1f9      	bne.n	801441c <_svfiprintf_r+0x50>
 8014428:	ebba 0b04 	subs.w	fp, sl, r4
 801442c:	d00b      	beq.n	8014446 <_svfiprintf_r+0x7a>
 801442e:	465b      	mov	r3, fp
 8014430:	4622      	mov	r2, r4
 8014432:	4629      	mov	r1, r5
 8014434:	4638      	mov	r0, r7
 8014436:	f7ff ff6d 	bl	8014314 <__ssputs_r>
 801443a:	3001      	adds	r0, #1
 801443c:	f000 80aa 	beq.w	8014594 <_svfiprintf_r+0x1c8>
 8014440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014442:	445a      	add	r2, fp
 8014444:	9209      	str	r2, [sp, #36]	; 0x24
 8014446:	f89a 3000 	ldrb.w	r3, [sl]
 801444a:	2b00      	cmp	r3, #0
 801444c:	f000 80a2 	beq.w	8014594 <_svfiprintf_r+0x1c8>
 8014450:	2300      	movs	r3, #0
 8014452:	f04f 32ff 	mov.w	r2, #4294967295
 8014456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801445a:	f10a 0a01 	add.w	sl, sl, #1
 801445e:	9304      	str	r3, [sp, #16]
 8014460:	9307      	str	r3, [sp, #28]
 8014462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014466:	931a      	str	r3, [sp, #104]	; 0x68
 8014468:	4654      	mov	r4, sl
 801446a:	2205      	movs	r2, #5
 801446c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014470:	4851      	ldr	r0, [pc, #324]	; (80145b8 <_svfiprintf_r+0x1ec>)
 8014472:	f7eb fecd 	bl	8000210 <memchr>
 8014476:	9a04      	ldr	r2, [sp, #16]
 8014478:	b9d8      	cbnz	r0, 80144b2 <_svfiprintf_r+0xe6>
 801447a:	06d0      	lsls	r0, r2, #27
 801447c:	bf44      	itt	mi
 801447e:	2320      	movmi	r3, #32
 8014480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014484:	0711      	lsls	r1, r2, #28
 8014486:	bf44      	itt	mi
 8014488:	232b      	movmi	r3, #43	; 0x2b
 801448a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801448e:	f89a 3000 	ldrb.w	r3, [sl]
 8014492:	2b2a      	cmp	r3, #42	; 0x2a
 8014494:	d015      	beq.n	80144c2 <_svfiprintf_r+0xf6>
 8014496:	9a07      	ldr	r2, [sp, #28]
 8014498:	4654      	mov	r4, sl
 801449a:	2000      	movs	r0, #0
 801449c:	f04f 0c0a 	mov.w	ip, #10
 80144a0:	4621      	mov	r1, r4
 80144a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144a6:	3b30      	subs	r3, #48	; 0x30
 80144a8:	2b09      	cmp	r3, #9
 80144aa:	d94e      	bls.n	801454a <_svfiprintf_r+0x17e>
 80144ac:	b1b0      	cbz	r0, 80144dc <_svfiprintf_r+0x110>
 80144ae:	9207      	str	r2, [sp, #28]
 80144b0:	e014      	b.n	80144dc <_svfiprintf_r+0x110>
 80144b2:	eba0 0308 	sub.w	r3, r0, r8
 80144b6:	fa09 f303 	lsl.w	r3, r9, r3
 80144ba:	4313      	orrs	r3, r2
 80144bc:	9304      	str	r3, [sp, #16]
 80144be:	46a2      	mov	sl, r4
 80144c0:	e7d2      	b.n	8014468 <_svfiprintf_r+0x9c>
 80144c2:	9b03      	ldr	r3, [sp, #12]
 80144c4:	1d19      	adds	r1, r3, #4
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	9103      	str	r1, [sp, #12]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	bfbb      	ittet	lt
 80144ce:	425b      	neglt	r3, r3
 80144d0:	f042 0202 	orrlt.w	r2, r2, #2
 80144d4:	9307      	strge	r3, [sp, #28]
 80144d6:	9307      	strlt	r3, [sp, #28]
 80144d8:	bfb8      	it	lt
 80144da:	9204      	strlt	r2, [sp, #16]
 80144dc:	7823      	ldrb	r3, [r4, #0]
 80144de:	2b2e      	cmp	r3, #46	; 0x2e
 80144e0:	d10c      	bne.n	80144fc <_svfiprintf_r+0x130>
 80144e2:	7863      	ldrb	r3, [r4, #1]
 80144e4:	2b2a      	cmp	r3, #42	; 0x2a
 80144e6:	d135      	bne.n	8014554 <_svfiprintf_r+0x188>
 80144e8:	9b03      	ldr	r3, [sp, #12]
 80144ea:	1d1a      	adds	r2, r3, #4
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	9203      	str	r2, [sp, #12]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	bfb8      	it	lt
 80144f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80144f8:	3402      	adds	r4, #2
 80144fa:	9305      	str	r3, [sp, #20]
 80144fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80145c8 <_svfiprintf_r+0x1fc>
 8014500:	7821      	ldrb	r1, [r4, #0]
 8014502:	2203      	movs	r2, #3
 8014504:	4650      	mov	r0, sl
 8014506:	f7eb fe83 	bl	8000210 <memchr>
 801450a:	b140      	cbz	r0, 801451e <_svfiprintf_r+0x152>
 801450c:	2340      	movs	r3, #64	; 0x40
 801450e:	eba0 000a 	sub.w	r0, r0, sl
 8014512:	fa03 f000 	lsl.w	r0, r3, r0
 8014516:	9b04      	ldr	r3, [sp, #16]
 8014518:	4303      	orrs	r3, r0
 801451a:	3401      	adds	r4, #1
 801451c:	9304      	str	r3, [sp, #16]
 801451e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014522:	4826      	ldr	r0, [pc, #152]	; (80145bc <_svfiprintf_r+0x1f0>)
 8014524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014528:	2206      	movs	r2, #6
 801452a:	f7eb fe71 	bl	8000210 <memchr>
 801452e:	2800      	cmp	r0, #0
 8014530:	d038      	beq.n	80145a4 <_svfiprintf_r+0x1d8>
 8014532:	4b23      	ldr	r3, [pc, #140]	; (80145c0 <_svfiprintf_r+0x1f4>)
 8014534:	bb1b      	cbnz	r3, 801457e <_svfiprintf_r+0x1b2>
 8014536:	9b03      	ldr	r3, [sp, #12]
 8014538:	3307      	adds	r3, #7
 801453a:	f023 0307 	bic.w	r3, r3, #7
 801453e:	3308      	adds	r3, #8
 8014540:	9303      	str	r3, [sp, #12]
 8014542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014544:	4433      	add	r3, r6
 8014546:	9309      	str	r3, [sp, #36]	; 0x24
 8014548:	e767      	b.n	801441a <_svfiprintf_r+0x4e>
 801454a:	fb0c 3202 	mla	r2, ip, r2, r3
 801454e:	460c      	mov	r4, r1
 8014550:	2001      	movs	r0, #1
 8014552:	e7a5      	b.n	80144a0 <_svfiprintf_r+0xd4>
 8014554:	2300      	movs	r3, #0
 8014556:	3401      	adds	r4, #1
 8014558:	9305      	str	r3, [sp, #20]
 801455a:	4619      	mov	r1, r3
 801455c:	f04f 0c0a 	mov.w	ip, #10
 8014560:	4620      	mov	r0, r4
 8014562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014566:	3a30      	subs	r2, #48	; 0x30
 8014568:	2a09      	cmp	r2, #9
 801456a:	d903      	bls.n	8014574 <_svfiprintf_r+0x1a8>
 801456c:	2b00      	cmp	r3, #0
 801456e:	d0c5      	beq.n	80144fc <_svfiprintf_r+0x130>
 8014570:	9105      	str	r1, [sp, #20]
 8014572:	e7c3      	b.n	80144fc <_svfiprintf_r+0x130>
 8014574:	fb0c 2101 	mla	r1, ip, r1, r2
 8014578:	4604      	mov	r4, r0
 801457a:	2301      	movs	r3, #1
 801457c:	e7f0      	b.n	8014560 <_svfiprintf_r+0x194>
 801457e:	ab03      	add	r3, sp, #12
 8014580:	9300      	str	r3, [sp, #0]
 8014582:	462a      	mov	r2, r5
 8014584:	4b0f      	ldr	r3, [pc, #60]	; (80145c4 <_svfiprintf_r+0x1f8>)
 8014586:	a904      	add	r1, sp, #16
 8014588:	4638      	mov	r0, r7
 801458a:	f3af 8000 	nop.w
 801458e:	1c42      	adds	r2, r0, #1
 8014590:	4606      	mov	r6, r0
 8014592:	d1d6      	bne.n	8014542 <_svfiprintf_r+0x176>
 8014594:	89ab      	ldrh	r3, [r5, #12]
 8014596:	065b      	lsls	r3, r3, #25
 8014598:	f53f af2c 	bmi.w	80143f4 <_svfiprintf_r+0x28>
 801459c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801459e:	b01d      	add	sp, #116	; 0x74
 80145a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a4:	ab03      	add	r3, sp, #12
 80145a6:	9300      	str	r3, [sp, #0]
 80145a8:	462a      	mov	r2, r5
 80145aa:	4b06      	ldr	r3, [pc, #24]	; (80145c4 <_svfiprintf_r+0x1f8>)
 80145ac:	a904      	add	r1, sp, #16
 80145ae:	4638      	mov	r0, r7
 80145b0:	f000 f9d4 	bl	801495c <_printf_i>
 80145b4:	e7eb      	b.n	801458e <_svfiprintf_r+0x1c2>
 80145b6:	bf00      	nop
 80145b8:	0801a87c 	.word	0x0801a87c
 80145bc:	0801a886 	.word	0x0801a886
 80145c0:	00000000 	.word	0x00000000
 80145c4:	08014315 	.word	0x08014315
 80145c8:	0801a882 	.word	0x0801a882

080145cc <__sfputc_r>:
 80145cc:	6893      	ldr	r3, [r2, #8]
 80145ce:	3b01      	subs	r3, #1
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	b410      	push	{r4}
 80145d4:	6093      	str	r3, [r2, #8]
 80145d6:	da08      	bge.n	80145ea <__sfputc_r+0x1e>
 80145d8:	6994      	ldr	r4, [r2, #24]
 80145da:	42a3      	cmp	r3, r4
 80145dc:	db01      	blt.n	80145e2 <__sfputc_r+0x16>
 80145de:	290a      	cmp	r1, #10
 80145e0:	d103      	bne.n	80145ea <__sfputc_r+0x1e>
 80145e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145e6:	f000 bb33 	b.w	8014c50 <__swbuf_r>
 80145ea:	6813      	ldr	r3, [r2, #0]
 80145ec:	1c58      	adds	r0, r3, #1
 80145ee:	6010      	str	r0, [r2, #0]
 80145f0:	7019      	strb	r1, [r3, #0]
 80145f2:	4608      	mov	r0, r1
 80145f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145f8:	4770      	bx	lr

080145fa <__sfputs_r>:
 80145fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145fc:	4606      	mov	r6, r0
 80145fe:	460f      	mov	r7, r1
 8014600:	4614      	mov	r4, r2
 8014602:	18d5      	adds	r5, r2, r3
 8014604:	42ac      	cmp	r4, r5
 8014606:	d101      	bne.n	801460c <__sfputs_r+0x12>
 8014608:	2000      	movs	r0, #0
 801460a:	e007      	b.n	801461c <__sfputs_r+0x22>
 801460c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014610:	463a      	mov	r2, r7
 8014612:	4630      	mov	r0, r6
 8014614:	f7ff ffda 	bl	80145cc <__sfputc_r>
 8014618:	1c43      	adds	r3, r0, #1
 801461a:	d1f3      	bne.n	8014604 <__sfputs_r+0xa>
 801461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014620 <_vfiprintf_r>:
 8014620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014624:	460d      	mov	r5, r1
 8014626:	b09d      	sub	sp, #116	; 0x74
 8014628:	4614      	mov	r4, r2
 801462a:	4698      	mov	r8, r3
 801462c:	4606      	mov	r6, r0
 801462e:	b118      	cbz	r0, 8014638 <_vfiprintf_r+0x18>
 8014630:	6983      	ldr	r3, [r0, #24]
 8014632:	b90b      	cbnz	r3, 8014638 <_vfiprintf_r+0x18>
 8014634:	f7ff fcd4 	bl	8013fe0 <__sinit>
 8014638:	4b89      	ldr	r3, [pc, #548]	; (8014860 <_vfiprintf_r+0x240>)
 801463a:	429d      	cmp	r5, r3
 801463c:	d11b      	bne.n	8014676 <_vfiprintf_r+0x56>
 801463e:	6875      	ldr	r5, [r6, #4]
 8014640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014642:	07d9      	lsls	r1, r3, #31
 8014644:	d405      	bmi.n	8014652 <_vfiprintf_r+0x32>
 8014646:	89ab      	ldrh	r3, [r5, #12]
 8014648:	059a      	lsls	r2, r3, #22
 801464a:	d402      	bmi.n	8014652 <_vfiprintf_r+0x32>
 801464c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801464e:	f7ff fd77 	bl	8014140 <__retarget_lock_acquire_recursive>
 8014652:	89ab      	ldrh	r3, [r5, #12]
 8014654:	071b      	lsls	r3, r3, #28
 8014656:	d501      	bpl.n	801465c <_vfiprintf_r+0x3c>
 8014658:	692b      	ldr	r3, [r5, #16]
 801465a:	b9eb      	cbnz	r3, 8014698 <_vfiprintf_r+0x78>
 801465c:	4629      	mov	r1, r5
 801465e:	4630      	mov	r0, r6
 8014660:	f000 fb5a 	bl	8014d18 <__swsetup_r>
 8014664:	b1c0      	cbz	r0, 8014698 <_vfiprintf_r+0x78>
 8014666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014668:	07dc      	lsls	r4, r3, #31
 801466a:	d50e      	bpl.n	801468a <_vfiprintf_r+0x6a>
 801466c:	f04f 30ff 	mov.w	r0, #4294967295
 8014670:	b01d      	add	sp, #116	; 0x74
 8014672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014676:	4b7b      	ldr	r3, [pc, #492]	; (8014864 <_vfiprintf_r+0x244>)
 8014678:	429d      	cmp	r5, r3
 801467a:	d101      	bne.n	8014680 <_vfiprintf_r+0x60>
 801467c:	68b5      	ldr	r5, [r6, #8]
 801467e:	e7df      	b.n	8014640 <_vfiprintf_r+0x20>
 8014680:	4b79      	ldr	r3, [pc, #484]	; (8014868 <_vfiprintf_r+0x248>)
 8014682:	429d      	cmp	r5, r3
 8014684:	bf08      	it	eq
 8014686:	68f5      	ldreq	r5, [r6, #12]
 8014688:	e7da      	b.n	8014640 <_vfiprintf_r+0x20>
 801468a:	89ab      	ldrh	r3, [r5, #12]
 801468c:	0598      	lsls	r0, r3, #22
 801468e:	d4ed      	bmi.n	801466c <_vfiprintf_r+0x4c>
 8014690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014692:	f7ff fd56 	bl	8014142 <__retarget_lock_release_recursive>
 8014696:	e7e9      	b.n	801466c <_vfiprintf_r+0x4c>
 8014698:	2300      	movs	r3, #0
 801469a:	9309      	str	r3, [sp, #36]	; 0x24
 801469c:	2320      	movs	r3, #32
 801469e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80146a6:	2330      	movs	r3, #48	; 0x30
 80146a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801486c <_vfiprintf_r+0x24c>
 80146ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146b0:	f04f 0901 	mov.w	r9, #1
 80146b4:	4623      	mov	r3, r4
 80146b6:	469a      	mov	sl, r3
 80146b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146bc:	b10a      	cbz	r2, 80146c2 <_vfiprintf_r+0xa2>
 80146be:	2a25      	cmp	r2, #37	; 0x25
 80146c0:	d1f9      	bne.n	80146b6 <_vfiprintf_r+0x96>
 80146c2:	ebba 0b04 	subs.w	fp, sl, r4
 80146c6:	d00b      	beq.n	80146e0 <_vfiprintf_r+0xc0>
 80146c8:	465b      	mov	r3, fp
 80146ca:	4622      	mov	r2, r4
 80146cc:	4629      	mov	r1, r5
 80146ce:	4630      	mov	r0, r6
 80146d0:	f7ff ff93 	bl	80145fa <__sfputs_r>
 80146d4:	3001      	adds	r0, #1
 80146d6:	f000 80aa 	beq.w	801482e <_vfiprintf_r+0x20e>
 80146da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146dc:	445a      	add	r2, fp
 80146de:	9209      	str	r2, [sp, #36]	; 0x24
 80146e0:	f89a 3000 	ldrb.w	r3, [sl]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	f000 80a2 	beq.w	801482e <_vfiprintf_r+0x20e>
 80146ea:	2300      	movs	r3, #0
 80146ec:	f04f 32ff 	mov.w	r2, #4294967295
 80146f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146f4:	f10a 0a01 	add.w	sl, sl, #1
 80146f8:	9304      	str	r3, [sp, #16]
 80146fa:	9307      	str	r3, [sp, #28]
 80146fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014700:	931a      	str	r3, [sp, #104]	; 0x68
 8014702:	4654      	mov	r4, sl
 8014704:	2205      	movs	r2, #5
 8014706:	f814 1b01 	ldrb.w	r1, [r4], #1
 801470a:	4858      	ldr	r0, [pc, #352]	; (801486c <_vfiprintf_r+0x24c>)
 801470c:	f7eb fd80 	bl	8000210 <memchr>
 8014710:	9a04      	ldr	r2, [sp, #16]
 8014712:	b9d8      	cbnz	r0, 801474c <_vfiprintf_r+0x12c>
 8014714:	06d1      	lsls	r1, r2, #27
 8014716:	bf44      	itt	mi
 8014718:	2320      	movmi	r3, #32
 801471a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801471e:	0713      	lsls	r3, r2, #28
 8014720:	bf44      	itt	mi
 8014722:	232b      	movmi	r3, #43	; 0x2b
 8014724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014728:	f89a 3000 	ldrb.w	r3, [sl]
 801472c:	2b2a      	cmp	r3, #42	; 0x2a
 801472e:	d015      	beq.n	801475c <_vfiprintf_r+0x13c>
 8014730:	9a07      	ldr	r2, [sp, #28]
 8014732:	4654      	mov	r4, sl
 8014734:	2000      	movs	r0, #0
 8014736:	f04f 0c0a 	mov.w	ip, #10
 801473a:	4621      	mov	r1, r4
 801473c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014740:	3b30      	subs	r3, #48	; 0x30
 8014742:	2b09      	cmp	r3, #9
 8014744:	d94e      	bls.n	80147e4 <_vfiprintf_r+0x1c4>
 8014746:	b1b0      	cbz	r0, 8014776 <_vfiprintf_r+0x156>
 8014748:	9207      	str	r2, [sp, #28]
 801474a:	e014      	b.n	8014776 <_vfiprintf_r+0x156>
 801474c:	eba0 0308 	sub.w	r3, r0, r8
 8014750:	fa09 f303 	lsl.w	r3, r9, r3
 8014754:	4313      	orrs	r3, r2
 8014756:	9304      	str	r3, [sp, #16]
 8014758:	46a2      	mov	sl, r4
 801475a:	e7d2      	b.n	8014702 <_vfiprintf_r+0xe2>
 801475c:	9b03      	ldr	r3, [sp, #12]
 801475e:	1d19      	adds	r1, r3, #4
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	9103      	str	r1, [sp, #12]
 8014764:	2b00      	cmp	r3, #0
 8014766:	bfbb      	ittet	lt
 8014768:	425b      	neglt	r3, r3
 801476a:	f042 0202 	orrlt.w	r2, r2, #2
 801476e:	9307      	strge	r3, [sp, #28]
 8014770:	9307      	strlt	r3, [sp, #28]
 8014772:	bfb8      	it	lt
 8014774:	9204      	strlt	r2, [sp, #16]
 8014776:	7823      	ldrb	r3, [r4, #0]
 8014778:	2b2e      	cmp	r3, #46	; 0x2e
 801477a:	d10c      	bne.n	8014796 <_vfiprintf_r+0x176>
 801477c:	7863      	ldrb	r3, [r4, #1]
 801477e:	2b2a      	cmp	r3, #42	; 0x2a
 8014780:	d135      	bne.n	80147ee <_vfiprintf_r+0x1ce>
 8014782:	9b03      	ldr	r3, [sp, #12]
 8014784:	1d1a      	adds	r2, r3, #4
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	9203      	str	r2, [sp, #12]
 801478a:	2b00      	cmp	r3, #0
 801478c:	bfb8      	it	lt
 801478e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014792:	3402      	adds	r4, #2
 8014794:	9305      	str	r3, [sp, #20]
 8014796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801487c <_vfiprintf_r+0x25c>
 801479a:	7821      	ldrb	r1, [r4, #0]
 801479c:	2203      	movs	r2, #3
 801479e:	4650      	mov	r0, sl
 80147a0:	f7eb fd36 	bl	8000210 <memchr>
 80147a4:	b140      	cbz	r0, 80147b8 <_vfiprintf_r+0x198>
 80147a6:	2340      	movs	r3, #64	; 0x40
 80147a8:	eba0 000a 	sub.w	r0, r0, sl
 80147ac:	fa03 f000 	lsl.w	r0, r3, r0
 80147b0:	9b04      	ldr	r3, [sp, #16]
 80147b2:	4303      	orrs	r3, r0
 80147b4:	3401      	adds	r4, #1
 80147b6:	9304      	str	r3, [sp, #16]
 80147b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147bc:	482c      	ldr	r0, [pc, #176]	; (8014870 <_vfiprintf_r+0x250>)
 80147be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147c2:	2206      	movs	r2, #6
 80147c4:	f7eb fd24 	bl	8000210 <memchr>
 80147c8:	2800      	cmp	r0, #0
 80147ca:	d03f      	beq.n	801484c <_vfiprintf_r+0x22c>
 80147cc:	4b29      	ldr	r3, [pc, #164]	; (8014874 <_vfiprintf_r+0x254>)
 80147ce:	bb1b      	cbnz	r3, 8014818 <_vfiprintf_r+0x1f8>
 80147d0:	9b03      	ldr	r3, [sp, #12]
 80147d2:	3307      	adds	r3, #7
 80147d4:	f023 0307 	bic.w	r3, r3, #7
 80147d8:	3308      	adds	r3, #8
 80147da:	9303      	str	r3, [sp, #12]
 80147dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147de:	443b      	add	r3, r7
 80147e0:	9309      	str	r3, [sp, #36]	; 0x24
 80147e2:	e767      	b.n	80146b4 <_vfiprintf_r+0x94>
 80147e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80147e8:	460c      	mov	r4, r1
 80147ea:	2001      	movs	r0, #1
 80147ec:	e7a5      	b.n	801473a <_vfiprintf_r+0x11a>
 80147ee:	2300      	movs	r3, #0
 80147f0:	3401      	adds	r4, #1
 80147f2:	9305      	str	r3, [sp, #20]
 80147f4:	4619      	mov	r1, r3
 80147f6:	f04f 0c0a 	mov.w	ip, #10
 80147fa:	4620      	mov	r0, r4
 80147fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014800:	3a30      	subs	r2, #48	; 0x30
 8014802:	2a09      	cmp	r2, #9
 8014804:	d903      	bls.n	801480e <_vfiprintf_r+0x1ee>
 8014806:	2b00      	cmp	r3, #0
 8014808:	d0c5      	beq.n	8014796 <_vfiprintf_r+0x176>
 801480a:	9105      	str	r1, [sp, #20]
 801480c:	e7c3      	b.n	8014796 <_vfiprintf_r+0x176>
 801480e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014812:	4604      	mov	r4, r0
 8014814:	2301      	movs	r3, #1
 8014816:	e7f0      	b.n	80147fa <_vfiprintf_r+0x1da>
 8014818:	ab03      	add	r3, sp, #12
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	462a      	mov	r2, r5
 801481e:	4b16      	ldr	r3, [pc, #88]	; (8014878 <_vfiprintf_r+0x258>)
 8014820:	a904      	add	r1, sp, #16
 8014822:	4630      	mov	r0, r6
 8014824:	f3af 8000 	nop.w
 8014828:	4607      	mov	r7, r0
 801482a:	1c78      	adds	r0, r7, #1
 801482c:	d1d6      	bne.n	80147dc <_vfiprintf_r+0x1bc>
 801482e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014830:	07d9      	lsls	r1, r3, #31
 8014832:	d405      	bmi.n	8014840 <_vfiprintf_r+0x220>
 8014834:	89ab      	ldrh	r3, [r5, #12]
 8014836:	059a      	lsls	r2, r3, #22
 8014838:	d402      	bmi.n	8014840 <_vfiprintf_r+0x220>
 801483a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801483c:	f7ff fc81 	bl	8014142 <__retarget_lock_release_recursive>
 8014840:	89ab      	ldrh	r3, [r5, #12]
 8014842:	065b      	lsls	r3, r3, #25
 8014844:	f53f af12 	bmi.w	801466c <_vfiprintf_r+0x4c>
 8014848:	9809      	ldr	r0, [sp, #36]	; 0x24
 801484a:	e711      	b.n	8014670 <_vfiprintf_r+0x50>
 801484c:	ab03      	add	r3, sp, #12
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	462a      	mov	r2, r5
 8014852:	4b09      	ldr	r3, [pc, #36]	; (8014878 <_vfiprintf_r+0x258>)
 8014854:	a904      	add	r1, sp, #16
 8014856:	4630      	mov	r0, r6
 8014858:	f000 f880 	bl	801495c <_printf_i>
 801485c:	e7e4      	b.n	8014828 <_vfiprintf_r+0x208>
 801485e:	bf00      	nop
 8014860:	0801a83c 	.word	0x0801a83c
 8014864:	0801a85c 	.word	0x0801a85c
 8014868:	0801a81c 	.word	0x0801a81c
 801486c:	0801a87c 	.word	0x0801a87c
 8014870:	0801a886 	.word	0x0801a886
 8014874:	00000000 	.word	0x00000000
 8014878:	080145fb 	.word	0x080145fb
 801487c:	0801a882 	.word	0x0801a882

08014880 <_printf_common>:
 8014880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014884:	4616      	mov	r6, r2
 8014886:	4699      	mov	r9, r3
 8014888:	688a      	ldr	r2, [r1, #8]
 801488a:	690b      	ldr	r3, [r1, #16]
 801488c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014890:	4293      	cmp	r3, r2
 8014892:	bfb8      	it	lt
 8014894:	4613      	movlt	r3, r2
 8014896:	6033      	str	r3, [r6, #0]
 8014898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801489c:	4607      	mov	r7, r0
 801489e:	460c      	mov	r4, r1
 80148a0:	b10a      	cbz	r2, 80148a6 <_printf_common+0x26>
 80148a2:	3301      	adds	r3, #1
 80148a4:	6033      	str	r3, [r6, #0]
 80148a6:	6823      	ldr	r3, [r4, #0]
 80148a8:	0699      	lsls	r1, r3, #26
 80148aa:	bf42      	ittt	mi
 80148ac:	6833      	ldrmi	r3, [r6, #0]
 80148ae:	3302      	addmi	r3, #2
 80148b0:	6033      	strmi	r3, [r6, #0]
 80148b2:	6825      	ldr	r5, [r4, #0]
 80148b4:	f015 0506 	ands.w	r5, r5, #6
 80148b8:	d106      	bne.n	80148c8 <_printf_common+0x48>
 80148ba:	f104 0a19 	add.w	sl, r4, #25
 80148be:	68e3      	ldr	r3, [r4, #12]
 80148c0:	6832      	ldr	r2, [r6, #0]
 80148c2:	1a9b      	subs	r3, r3, r2
 80148c4:	42ab      	cmp	r3, r5
 80148c6:	dc26      	bgt.n	8014916 <_printf_common+0x96>
 80148c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80148cc:	1e13      	subs	r3, r2, #0
 80148ce:	6822      	ldr	r2, [r4, #0]
 80148d0:	bf18      	it	ne
 80148d2:	2301      	movne	r3, #1
 80148d4:	0692      	lsls	r2, r2, #26
 80148d6:	d42b      	bmi.n	8014930 <_printf_common+0xb0>
 80148d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148dc:	4649      	mov	r1, r9
 80148de:	4638      	mov	r0, r7
 80148e0:	47c0      	blx	r8
 80148e2:	3001      	adds	r0, #1
 80148e4:	d01e      	beq.n	8014924 <_printf_common+0xa4>
 80148e6:	6823      	ldr	r3, [r4, #0]
 80148e8:	68e5      	ldr	r5, [r4, #12]
 80148ea:	6832      	ldr	r2, [r6, #0]
 80148ec:	f003 0306 	and.w	r3, r3, #6
 80148f0:	2b04      	cmp	r3, #4
 80148f2:	bf08      	it	eq
 80148f4:	1aad      	subeq	r5, r5, r2
 80148f6:	68a3      	ldr	r3, [r4, #8]
 80148f8:	6922      	ldr	r2, [r4, #16]
 80148fa:	bf0c      	ite	eq
 80148fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014900:	2500      	movne	r5, #0
 8014902:	4293      	cmp	r3, r2
 8014904:	bfc4      	itt	gt
 8014906:	1a9b      	subgt	r3, r3, r2
 8014908:	18ed      	addgt	r5, r5, r3
 801490a:	2600      	movs	r6, #0
 801490c:	341a      	adds	r4, #26
 801490e:	42b5      	cmp	r5, r6
 8014910:	d11a      	bne.n	8014948 <_printf_common+0xc8>
 8014912:	2000      	movs	r0, #0
 8014914:	e008      	b.n	8014928 <_printf_common+0xa8>
 8014916:	2301      	movs	r3, #1
 8014918:	4652      	mov	r2, sl
 801491a:	4649      	mov	r1, r9
 801491c:	4638      	mov	r0, r7
 801491e:	47c0      	blx	r8
 8014920:	3001      	adds	r0, #1
 8014922:	d103      	bne.n	801492c <_printf_common+0xac>
 8014924:	f04f 30ff 	mov.w	r0, #4294967295
 8014928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801492c:	3501      	adds	r5, #1
 801492e:	e7c6      	b.n	80148be <_printf_common+0x3e>
 8014930:	18e1      	adds	r1, r4, r3
 8014932:	1c5a      	adds	r2, r3, #1
 8014934:	2030      	movs	r0, #48	; 0x30
 8014936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801493a:	4422      	add	r2, r4
 801493c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014944:	3302      	adds	r3, #2
 8014946:	e7c7      	b.n	80148d8 <_printf_common+0x58>
 8014948:	2301      	movs	r3, #1
 801494a:	4622      	mov	r2, r4
 801494c:	4649      	mov	r1, r9
 801494e:	4638      	mov	r0, r7
 8014950:	47c0      	blx	r8
 8014952:	3001      	adds	r0, #1
 8014954:	d0e6      	beq.n	8014924 <_printf_common+0xa4>
 8014956:	3601      	adds	r6, #1
 8014958:	e7d9      	b.n	801490e <_printf_common+0x8e>
	...

0801495c <_printf_i>:
 801495c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014960:	7e0f      	ldrb	r7, [r1, #24]
 8014962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014964:	2f78      	cmp	r7, #120	; 0x78
 8014966:	4691      	mov	r9, r2
 8014968:	4680      	mov	r8, r0
 801496a:	460c      	mov	r4, r1
 801496c:	469a      	mov	sl, r3
 801496e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014972:	d807      	bhi.n	8014984 <_printf_i+0x28>
 8014974:	2f62      	cmp	r7, #98	; 0x62
 8014976:	d80a      	bhi.n	801498e <_printf_i+0x32>
 8014978:	2f00      	cmp	r7, #0
 801497a:	f000 80d8 	beq.w	8014b2e <_printf_i+0x1d2>
 801497e:	2f58      	cmp	r7, #88	; 0x58
 8014980:	f000 80a3 	beq.w	8014aca <_printf_i+0x16e>
 8014984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801498c:	e03a      	b.n	8014a04 <_printf_i+0xa8>
 801498e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014992:	2b15      	cmp	r3, #21
 8014994:	d8f6      	bhi.n	8014984 <_printf_i+0x28>
 8014996:	a101      	add	r1, pc, #4	; (adr r1, 801499c <_printf_i+0x40>)
 8014998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801499c:	080149f5 	.word	0x080149f5
 80149a0:	08014a09 	.word	0x08014a09
 80149a4:	08014985 	.word	0x08014985
 80149a8:	08014985 	.word	0x08014985
 80149ac:	08014985 	.word	0x08014985
 80149b0:	08014985 	.word	0x08014985
 80149b4:	08014a09 	.word	0x08014a09
 80149b8:	08014985 	.word	0x08014985
 80149bc:	08014985 	.word	0x08014985
 80149c0:	08014985 	.word	0x08014985
 80149c4:	08014985 	.word	0x08014985
 80149c8:	08014b15 	.word	0x08014b15
 80149cc:	08014a39 	.word	0x08014a39
 80149d0:	08014af7 	.word	0x08014af7
 80149d4:	08014985 	.word	0x08014985
 80149d8:	08014985 	.word	0x08014985
 80149dc:	08014b37 	.word	0x08014b37
 80149e0:	08014985 	.word	0x08014985
 80149e4:	08014a39 	.word	0x08014a39
 80149e8:	08014985 	.word	0x08014985
 80149ec:	08014985 	.word	0x08014985
 80149f0:	08014aff 	.word	0x08014aff
 80149f4:	682b      	ldr	r3, [r5, #0]
 80149f6:	1d1a      	adds	r2, r3, #4
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	602a      	str	r2, [r5, #0]
 80149fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a04:	2301      	movs	r3, #1
 8014a06:	e0a3      	b.n	8014b50 <_printf_i+0x1f4>
 8014a08:	6820      	ldr	r0, [r4, #0]
 8014a0a:	6829      	ldr	r1, [r5, #0]
 8014a0c:	0606      	lsls	r6, r0, #24
 8014a0e:	f101 0304 	add.w	r3, r1, #4
 8014a12:	d50a      	bpl.n	8014a2a <_printf_i+0xce>
 8014a14:	680e      	ldr	r6, [r1, #0]
 8014a16:	602b      	str	r3, [r5, #0]
 8014a18:	2e00      	cmp	r6, #0
 8014a1a:	da03      	bge.n	8014a24 <_printf_i+0xc8>
 8014a1c:	232d      	movs	r3, #45	; 0x2d
 8014a1e:	4276      	negs	r6, r6
 8014a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a24:	485e      	ldr	r0, [pc, #376]	; (8014ba0 <_printf_i+0x244>)
 8014a26:	230a      	movs	r3, #10
 8014a28:	e019      	b.n	8014a5e <_printf_i+0x102>
 8014a2a:	680e      	ldr	r6, [r1, #0]
 8014a2c:	602b      	str	r3, [r5, #0]
 8014a2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a32:	bf18      	it	ne
 8014a34:	b236      	sxthne	r6, r6
 8014a36:	e7ef      	b.n	8014a18 <_printf_i+0xbc>
 8014a38:	682b      	ldr	r3, [r5, #0]
 8014a3a:	6820      	ldr	r0, [r4, #0]
 8014a3c:	1d19      	adds	r1, r3, #4
 8014a3e:	6029      	str	r1, [r5, #0]
 8014a40:	0601      	lsls	r1, r0, #24
 8014a42:	d501      	bpl.n	8014a48 <_printf_i+0xec>
 8014a44:	681e      	ldr	r6, [r3, #0]
 8014a46:	e002      	b.n	8014a4e <_printf_i+0xf2>
 8014a48:	0646      	lsls	r6, r0, #25
 8014a4a:	d5fb      	bpl.n	8014a44 <_printf_i+0xe8>
 8014a4c:	881e      	ldrh	r6, [r3, #0]
 8014a4e:	4854      	ldr	r0, [pc, #336]	; (8014ba0 <_printf_i+0x244>)
 8014a50:	2f6f      	cmp	r7, #111	; 0x6f
 8014a52:	bf0c      	ite	eq
 8014a54:	2308      	moveq	r3, #8
 8014a56:	230a      	movne	r3, #10
 8014a58:	2100      	movs	r1, #0
 8014a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a5e:	6865      	ldr	r5, [r4, #4]
 8014a60:	60a5      	str	r5, [r4, #8]
 8014a62:	2d00      	cmp	r5, #0
 8014a64:	bfa2      	ittt	ge
 8014a66:	6821      	ldrge	r1, [r4, #0]
 8014a68:	f021 0104 	bicge.w	r1, r1, #4
 8014a6c:	6021      	strge	r1, [r4, #0]
 8014a6e:	b90e      	cbnz	r6, 8014a74 <_printf_i+0x118>
 8014a70:	2d00      	cmp	r5, #0
 8014a72:	d04d      	beq.n	8014b10 <_printf_i+0x1b4>
 8014a74:	4615      	mov	r5, r2
 8014a76:	fbb6 f1f3 	udiv	r1, r6, r3
 8014a7a:	fb03 6711 	mls	r7, r3, r1, r6
 8014a7e:	5dc7      	ldrb	r7, [r0, r7]
 8014a80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014a84:	4637      	mov	r7, r6
 8014a86:	42bb      	cmp	r3, r7
 8014a88:	460e      	mov	r6, r1
 8014a8a:	d9f4      	bls.n	8014a76 <_printf_i+0x11a>
 8014a8c:	2b08      	cmp	r3, #8
 8014a8e:	d10b      	bne.n	8014aa8 <_printf_i+0x14c>
 8014a90:	6823      	ldr	r3, [r4, #0]
 8014a92:	07de      	lsls	r6, r3, #31
 8014a94:	d508      	bpl.n	8014aa8 <_printf_i+0x14c>
 8014a96:	6923      	ldr	r3, [r4, #16]
 8014a98:	6861      	ldr	r1, [r4, #4]
 8014a9a:	4299      	cmp	r1, r3
 8014a9c:	bfde      	ittt	le
 8014a9e:	2330      	movle	r3, #48	; 0x30
 8014aa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014aa4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014aa8:	1b52      	subs	r2, r2, r5
 8014aaa:	6122      	str	r2, [r4, #16]
 8014aac:	f8cd a000 	str.w	sl, [sp]
 8014ab0:	464b      	mov	r3, r9
 8014ab2:	aa03      	add	r2, sp, #12
 8014ab4:	4621      	mov	r1, r4
 8014ab6:	4640      	mov	r0, r8
 8014ab8:	f7ff fee2 	bl	8014880 <_printf_common>
 8014abc:	3001      	adds	r0, #1
 8014abe:	d14c      	bne.n	8014b5a <_printf_i+0x1fe>
 8014ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac4:	b004      	add	sp, #16
 8014ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aca:	4835      	ldr	r0, [pc, #212]	; (8014ba0 <_printf_i+0x244>)
 8014acc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014ad0:	6829      	ldr	r1, [r5, #0]
 8014ad2:	6823      	ldr	r3, [r4, #0]
 8014ad4:	f851 6b04 	ldr.w	r6, [r1], #4
 8014ad8:	6029      	str	r1, [r5, #0]
 8014ada:	061d      	lsls	r5, r3, #24
 8014adc:	d514      	bpl.n	8014b08 <_printf_i+0x1ac>
 8014ade:	07df      	lsls	r7, r3, #31
 8014ae0:	bf44      	itt	mi
 8014ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8014ae6:	6023      	strmi	r3, [r4, #0]
 8014ae8:	b91e      	cbnz	r6, 8014af2 <_printf_i+0x196>
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	f023 0320 	bic.w	r3, r3, #32
 8014af0:	6023      	str	r3, [r4, #0]
 8014af2:	2310      	movs	r3, #16
 8014af4:	e7b0      	b.n	8014a58 <_printf_i+0xfc>
 8014af6:	6823      	ldr	r3, [r4, #0]
 8014af8:	f043 0320 	orr.w	r3, r3, #32
 8014afc:	6023      	str	r3, [r4, #0]
 8014afe:	2378      	movs	r3, #120	; 0x78
 8014b00:	4828      	ldr	r0, [pc, #160]	; (8014ba4 <_printf_i+0x248>)
 8014b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b06:	e7e3      	b.n	8014ad0 <_printf_i+0x174>
 8014b08:	0659      	lsls	r1, r3, #25
 8014b0a:	bf48      	it	mi
 8014b0c:	b2b6      	uxthmi	r6, r6
 8014b0e:	e7e6      	b.n	8014ade <_printf_i+0x182>
 8014b10:	4615      	mov	r5, r2
 8014b12:	e7bb      	b.n	8014a8c <_printf_i+0x130>
 8014b14:	682b      	ldr	r3, [r5, #0]
 8014b16:	6826      	ldr	r6, [r4, #0]
 8014b18:	6961      	ldr	r1, [r4, #20]
 8014b1a:	1d18      	adds	r0, r3, #4
 8014b1c:	6028      	str	r0, [r5, #0]
 8014b1e:	0635      	lsls	r5, r6, #24
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	d501      	bpl.n	8014b28 <_printf_i+0x1cc>
 8014b24:	6019      	str	r1, [r3, #0]
 8014b26:	e002      	b.n	8014b2e <_printf_i+0x1d2>
 8014b28:	0670      	lsls	r0, r6, #25
 8014b2a:	d5fb      	bpl.n	8014b24 <_printf_i+0x1c8>
 8014b2c:	8019      	strh	r1, [r3, #0]
 8014b2e:	2300      	movs	r3, #0
 8014b30:	6123      	str	r3, [r4, #16]
 8014b32:	4615      	mov	r5, r2
 8014b34:	e7ba      	b.n	8014aac <_printf_i+0x150>
 8014b36:	682b      	ldr	r3, [r5, #0]
 8014b38:	1d1a      	adds	r2, r3, #4
 8014b3a:	602a      	str	r2, [r5, #0]
 8014b3c:	681d      	ldr	r5, [r3, #0]
 8014b3e:	6862      	ldr	r2, [r4, #4]
 8014b40:	2100      	movs	r1, #0
 8014b42:	4628      	mov	r0, r5
 8014b44:	f7eb fb64 	bl	8000210 <memchr>
 8014b48:	b108      	cbz	r0, 8014b4e <_printf_i+0x1f2>
 8014b4a:	1b40      	subs	r0, r0, r5
 8014b4c:	6060      	str	r0, [r4, #4]
 8014b4e:	6863      	ldr	r3, [r4, #4]
 8014b50:	6123      	str	r3, [r4, #16]
 8014b52:	2300      	movs	r3, #0
 8014b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b58:	e7a8      	b.n	8014aac <_printf_i+0x150>
 8014b5a:	6923      	ldr	r3, [r4, #16]
 8014b5c:	462a      	mov	r2, r5
 8014b5e:	4649      	mov	r1, r9
 8014b60:	4640      	mov	r0, r8
 8014b62:	47d0      	blx	sl
 8014b64:	3001      	adds	r0, #1
 8014b66:	d0ab      	beq.n	8014ac0 <_printf_i+0x164>
 8014b68:	6823      	ldr	r3, [r4, #0]
 8014b6a:	079b      	lsls	r3, r3, #30
 8014b6c:	d413      	bmi.n	8014b96 <_printf_i+0x23a>
 8014b6e:	68e0      	ldr	r0, [r4, #12]
 8014b70:	9b03      	ldr	r3, [sp, #12]
 8014b72:	4298      	cmp	r0, r3
 8014b74:	bfb8      	it	lt
 8014b76:	4618      	movlt	r0, r3
 8014b78:	e7a4      	b.n	8014ac4 <_printf_i+0x168>
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	4632      	mov	r2, r6
 8014b7e:	4649      	mov	r1, r9
 8014b80:	4640      	mov	r0, r8
 8014b82:	47d0      	blx	sl
 8014b84:	3001      	adds	r0, #1
 8014b86:	d09b      	beq.n	8014ac0 <_printf_i+0x164>
 8014b88:	3501      	adds	r5, #1
 8014b8a:	68e3      	ldr	r3, [r4, #12]
 8014b8c:	9903      	ldr	r1, [sp, #12]
 8014b8e:	1a5b      	subs	r3, r3, r1
 8014b90:	42ab      	cmp	r3, r5
 8014b92:	dcf2      	bgt.n	8014b7a <_printf_i+0x21e>
 8014b94:	e7eb      	b.n	8014b6e <_printf_i+0x212>
 8014b96:	2500      	movs	r5, #0
 8014b98:	f104 0619 	add.w	r6, r4, #25
 8014b9c:	e7f5      	b.n	8014b8a <_printf_i+0x22e>
 8014b9e:	bf00      	nop
 8014ba0:	0801a88d 	.word	0x0801a88d
 8014ba4:	0801a89e 	.word	0x0801a89e

08014ba8 <_sbrk_r>:
 8014ba8:	b538      	push	{r3, r4, r5, lr}
 8014baa:	4d06      	ldr	r5, [pc, #24]	; (8014bc4 <_sbrk_r+0x1c>)
 8014bac:	2300      	movs	r3, #0
 8014bae:	4604      	mov	r4, r0
 8014bb0:	4608      	mov	r0, r1
 8014bb2:	602b      	str	r3, [r5, #0]
 8014bb4:	f7ed fc56 	bl	8002464 <_sbrk>
 8014bb8:	1c43      	adds	r3, r0, #1
 8014bba:	d102      	bne.n	8014bc2 <_sbrk_r+0x1a>
 8014bbc:	682b      	ldr	r3, [r5, #0]
 8014bbe:	b103      	cbz	r3, 8014bc2 <_sbrk_r+0x1a>
 8014bc0:	6023      	str	r3, [r4, #0]
 8014bc2:	bd38      	pop	{r3, r4, r5, pc}
 8014bc4:	2000b050 	.word	0x2000b050

08014bc8 <__sread>:
 8014bc8:	b510      	push	{r4, lr}
 8014bca:	460c      	mov	r4, r1
 8014bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bd0:	f000 fa9e 	bl	8015110 <_read_r>
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	bfab      	itete	ge
 8014bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bda:	89a3      	ldrhlt	r3, [r4, #12]
 8014bdc:	181b      	addge	r3, r3, r0
 8014bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014be2:	bfac      	ite	ge
 8014be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8014be6:	81a3      	strhlt	r3, [r4, #12]
 8014be8:	bd10      	pop	{r4, pc}

08014bea <__swrite>:
 8014bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bee:	461f      	mov	r7, r3
 8014bf0:	898b      	ldrh	r3, [r1, #12]
 8014bf2:	05db      	lsls	r3, r3, #23
 8014bf4:	4605      	mov	r5, r0
 8014bf6:	460c      	mov	r4, r1
 8014bf8:	4616      	mov	r6, r2
 8014bfa:	d505      	bpl.n	8014c08 <__swrite+0x1e>
 8014bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c00:	2302      	movs	r3, #2
 8014c02:	2200      	movs	r2, #0
 8014c04:	f000 f9d0 	bl	8014fa8 <_lseek_r>
 8014c08:	89a3      	ldrh	r3, [r4, #12]
 8014c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c12:	81a3      	strh	r3, [r4, #12]
 8014c14:	4632      	mov	r2, r6
 8014c16:	463b      	mov	r3, r7
 8014c18:	4628      	mov	r0, r5
 8014c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1e:	f000 b869 	b.w	8014cf4 <_write_r>

08014c22 <__sseek>:
 8014c22:	b510      	push	{r4, lr}
 8014c24:	460c      	mov	r4, r1
 8014c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c2a:	f000 f9bd 	bl	8014fa8 <_lseek_r>
 8014c2e:	1c43      	adds	r3, r0, #1
 8014c30:	89a3      	ldrh	r3, [r4, #12]
 8014c32:	bf15      	itete	ne
 8014c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c3e:	81a3      	strheq	r3, [r4, #12]
 8014c40:	bf18      	it	ne
 8014c42:	81a3      	strhne	r3, [r4, #12]
 8014c44:	bd10      	pop	{r4, pc}

08014c46 <__sclose>:
 8014c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c4a:	f000 b8db 	b.w	8014e04 <_close_r>
	...

08014c50 <__swbuf_r>:
 8014c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c52:	460e      	mov	r6, r1
 8014c54:	4614      	mov	r4, r2
 8014c56:	4605      	mov	r5, r0
 8014c58:	b118      	cbz	r0, 8014c62 <__swbuf_r+0x12>
 8014c5a:	6983      	ldr	r3, [r0, #24]
 8014c5c:	b90b      	cbnz	r3, 8014c62 <__swbuf_r+0x12>
 8014c5e:	f7ff f9bf 	bl	8013fe0 <__sinit>
 8014c62:	4b21      	ldr	r3, [pc, #132]	; (8014ce8 <__swbuf_r+0x98>)
 8014c64:	429c      	cmp	r4, r3
 8014c66:	d12b      	bne.n	8014cc0 <__swbuf_r+0x70>
 8014c68:	686c      	ldr	r4, [r5, #4]
 8014c6a:	69a3      	ldr	r3, [r4, #24]
 8014c6c:	60a3      	str	r3, [r4, #8]
 8014c6e:	89a3      	ldrh	r3, [r4, #12]
 8014c70:	071a      	lsls	r2, r3, #28
 8014c72:	d52f      	bpl.n	8014cd4 <__swbuf_r+0x84>
 8014c74:	6923      	ldr	r3, [r4, #16]
 8014c76:	b36b      	cbz	r3, 8014cd4 <__swbuf_r+0x84>
 8014c78:	6923      	ldr	r3, [r4, #16]
 8014c7a:	6820      	ldr	r0, [r4, #0]
 8014c7c:	1ac0      	subs	r0, r0, r3
 8014c7e:	6963      	ldr	r3, [r4, #20]
 8014c80:	b2f6      	uxtb	r6, r6
 8014c82:	4283      	cmp	r3, r0
 8014c84:	4637      	mov	r7, r6
 8014c86:	dc04      	bgt.n	8014c92 <__swbuf_r+0x42>
 8014c88:	4621      	mov	r1, r4
 8014c8a:	4628      	mov	r0, r5
 8014c8c:	f000 f950 	bl	8014f30 <_fflush_r>
 8014c90:	bb30      	cbnz	r0, 8014ce0 <__swbuf_r+0x90>
 8014c92:	68a3      	ldr	r3, [r4, #8]
 8014c94:	3b01      	subs	r3, #1
 8014c96:	60a3      	str	r3, [r4, #8]
 8014c98:	6823      	ldr	r3, [r4, #0]
 8014c9a:	1c5a      	adds	r2, r3, #1
 8014c9c:	6022      	str	r2, [r4, #0]
 8014c9e:	701e      	strb	r6, [r3, #0]
 8014ca0:	6963      	ldr	r3, [r4, #20]
 8014ca2:	3001      	adds	r0, #1
 8014ca4:	4283      	cmp	r3, r0
 8014ca6:	d004      	beq.n	8014cb2 <__swbuf_r+0x62>
 8014ca8:	89a3      	ldrh	r3, [r4, #12]
 8014caa:	07db      	lsls	r3, r3, #31
 8014cac:	d506      	bpl.n	8014cbc <__swbuf_r+0x6c>
 8014cae:	2e0a      	cmp	r6, #10
 8014cb0:	d104      	bne.n	8014cbc <__swbuf_r+0x6c>
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	4628      	mov	r0, r5
 8014cb6:	f000 f93b 	bl	8014f30 <_fflush_r>
 8014cba:	b988      	cbnz	r0, 8014ce0 <__swbuf_r+0x90>
 8014cbc:	4638      	mov	r0, r7
 8014cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cc0:	4b0a      	ldr	r3, [pc, #40]	; (8014cec <__swbuf_r+0x9c>)
 8014cc2:	429c      	cmp	r4, r3
 8014cc4:	d101      	bne.n	8014cca <__swbuf_r+0x7a>
 8014cc6:	68ac      	ldr	r4, [r5, #8]
 8014cc8:	e7cf      	b.n	8014c6a <__swbuf_r+0x1a>
 8014cca:	4b09      	ldr	r3, [pc, #36]	; (8014cf0 <__swbuf_r+0xa0>)
 8014ccc:	429c      	cmp	r4, r3
 8014cce:	bf08      	it	eq
 8014cd0:	68ec      	ldreq	r4, [r5, #12]
 8014cd2:	e7ca      	b.n	8014c6a <__swbuf_r+0x1a>
 8014cd4:	4621      	mov	r1, r4
 8014cd6:	4628      	mov	r0, r5
 8014cd8:	f000 f81e 	bl	8014d18 <__swsetup_r>
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d0cb      	beq.n	8014c78 <__swbuf_r+0x28>
 8014ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8014ce4:	e7ea      	b.n	8014cbc <__swbuf_r+0x6c>
 8014ce6:	bf00      	nop
 8014ce8:	0801a83c 	.word	0x0801a83c
 8014cec:	0801a85c 	.word	0x0801a85c
 8014cf0:	0801a81c 	.word	0x0801a81c

08014cf4 <_write_r>:
 8014cf4:	b538      	push	{r3, r4, r5, lr}
 8014cf6:	4d07      	ldr	r5, [pc, #28]	; (8014d14 <_write_r+0x20>)
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	4608      	mov	r0, r1
 8014cfc:	4611      	mov	r1, r2
 8014cfe:	2200      	movs	r2, #0
 8014d00:	602a      	str	r2, [r5, #0]
 8014d02:	461a      	mov	r2, r3
 8014d04:	f7ed fb5d 	bl	80023c2 <_write>
 8014d08:	1c43      	adds	r3, r0, #1
 8014d0a:	d102      	bne.n	8014d12 <_write_r+0x1e>
 8014d0c:	682b      	ldr	r3, [r5, #0]
 8014d0e:	b103      	cbz	r3, 8014d12 <_write_r+0x1e>
 8014d10:	6023      	str	r3, [r4, #0]
 8014d12:	bd38      	pop	{r3, r4, r5, pc}
 8014d14:	2000b050 	.word	0x2000b050

08014d18 <__swsetup_r>:
 8014d18:	4b32      	ldr	r3, [pc, #200]	; (8014de4 <__swsetup_r+0xcc>)
 8014d1a:	b570      	push	{r4, r5, r6, lr}
 8014d1c:	681d      	ldr	r5, [r3, #0]
 8014d1e:	4606      	mov	r6, r0
 8014d20:	460c      	mov	r4, r1
 8014d22:	b125      	cbz	r5, 8014d2e <__swsetup_r+0x16>
 8014d24:	69ab      	ldr	r3, [r5, #24]
 8014d26:	b913      	cbnz	r3, 8014d2e <__swsetup_r+0x16>
 8014d28:	4628      	mov	r0, r5
 8014d2a:	f7ff f959 	bl	8013fe0 <__sinit>
 8014d2e:	4b2e      	ldr	r3, [pc, #184]	; (8014de8 <__swsetup_r+0xd0>)
 8014d30:	429c      	cmp	r4, r3
 8014d32:	d10f      	bne.n	8014d54 <__swsetup_r+0x3c>
 8014d34:	686c      	ldr	r4, [r5, #4]
 8014d36:	89a3      	ldrh	r3, [r4, #12]
 8014d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d3c:	0719      	lsls	r1, r3, #28
 8014d3e:	d42c      	bmi.n	8014d9a <__swsetup_r+0x82>
 8014d40:	06dd      	lsls	r5, r3, #27
 8014d42:	d411      	bmi.n	8014d68 <__swsetup_r+0x50>
 8014d44:	2309      	movs	r3, #9
 8014d46:	6033      	str	r3, [r6, #0]
 8014d48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d4c:	81a3      	strh	r3, [r4, #12]
 8014d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8014d52:	e03e      	b.n	8014dd2 <__swsetup_r+0xba>
 8014d54:	4b25      	ldr	r3, [pc, #148]	; (8014dec <__swsetup_r+0xd4>)
 8014d56:	429c      	cmp	r4, r3
 8014d58:	d101      	bne.n	8014d5e <__swsetup_r+0x46>
 8014d5a:	68ac      	ldr	r4, [r5, #8]
 8014d5c:	e7eb      	b.n	8014d36 <__swsetup_r+0x1e>
 8014d5e:	4b24      	ldr	r3, [pc, #144]	; (8014df0 <__swsetup_r+0xd8>)
 8014d60:	429c      	cmp	r4, r3
 8014d62:	bf08      	it	eq
 8014d64:	68ec      	ldreq	r4, [r5, #12]
 8014d66:	e7e6      	b.n	8014d36 <__swsetup_r+0x1e>
 8014d68:	0758      	lsls	r0, r3, #29
 8014d6a:	d512      	bpl.n	8014d92 <__swsetup_r+0x7a>
 8014d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d6e:	b141      	cbz	r1, 8014d82 <__swsetup_r+0x6a>
 8014d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d74:	4299      	cmp	r1, r3
 8014d76:	d002      	beq.n	8014d7e <__swsetup_r+0x66>
 8014d78:	4630      	mov	r0, r6
 8014d7a:	f7ff f9eb 	bl	8014154 <_free_r>
 8014d7e:	2300      	movs	r3, #0
 8014d80:	6363      	str	r3, [r4, #52]	; 0x34
 8014d82:	89a3      	ldrh	r3, [r4, #12]
 8014d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d88:	81a3      	strh	r3, [r4, #12]
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	6063      	str	r3, [r4, #4]
 8014d8e:	6923      	ldr	r3, [r4, #16]
 8014d90:	6023      	str	r3, [r4, #0]
 8014d92:	89a3      	ldrh	r3, [r4, #12]
 8014d94:	f043 0308 	orr.w	r3, r3, #8
 8014d98:	81a3      	strh	r3, [r4, #12]
 8014d9a:	6923      	ldr	r3, [r4, #16]
 8014d9c:	b94b      	cbnz	r3, 8014db2 <__swsetup_r+0x9a>
 8014d9e:	89a3      	ldrh	r3, [r4, #12]
 8014da0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014da8:	d003      	beq.n	8014db2 <__swsetup_r+0x9a>
 8014daa:	4621      	mov	r1, r4
 8014dac:	4630      	mov	r0, r6
 8014dae:	f000 f933 	bl	8015018 <__smakebuf_r>
 8014db2:	89a0      	ldrh	r0, [r4, #12]
 8014db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014db8:	f010 0301 	ands.w	r3, r0, #1
 8014dbc:	d00a      	beq.n	8014dd4 <__swsetup_r+0xbc>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	60a3      	str	r3, [r4, #8]
 8014dc2:	6963      	ldr	r3, [r4, #20]
 8014dc4:	425b      	negs	r3, r3
 8014dc6:	61a3      	str	r3, [r4, #24]
 8014dc8:	6923      	ldr	r3, [r4, #16]
 8014dca:	b943      	cbnz	r3, 8014dde <__swsetup_r+0xc6>
 8014dcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014dd0:	d1ba      	bne.n	8014d48 <__swsetup_r+0x30>
 8014dd2:	bd70      	pop	{r4, r5, r6, pc}
 8014dd4:	0781      	lsls	r1, r0, #30
 8014dd6:	bf58      	it	pl
 8014dd8:	6963      	ldrpl	r3, [r4, #20]
 8014dda:	60a3      	str	r3, [r4, #8]
 8014ddc:	e7f4      	b.n	8014dc8 <__swsetup_r+0xb0>
 8014dde:	2000      	movs	r0, #0
 8014de0:	e7f7      	b.n	8014dd2 <__swsetup_r+0xba>
 8014de2:	bf00      	nop
 8014de4:	20000048 	.word	0x20000048
 8014de8:	0801a83c 	.word	0x0801a83c
 8014dec:	0801a85c 	.word	0x0801a85c
 8014df0:	0801a81c 	.word	0x0801a81c

08014df4 <abort>:
 8014df4:	b508      	push	{r3, lr}
 8014df6:	2006      	movs	r0, #6
 8014df8:	f000 f9c4 	bl	8015184 <raise>
 8014dfc:	2001      	movs	r0, #1
 8014dfe:	f7ed fab9 	bl	8002374 <_exit>
	...

08014e04 <_close_r>:
 8014e04:	b538      	push	{r3, r4, r5, lr}
 8014e06:	4d06      	ldr	r5, [pc, #24]	; (8014e20 <_close_r+0x1c>)
 8014e08:	2300      	movs	r3, #0
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	4608      	mov	r0, r1
 8014e0e:	602b      	str	r3, [r5, #0]
 8014e10:	f7ed faf3 	bl	80023fa <_close>
 8014e14:	1c43      	adds	r3, r0, #1
 8014e16:	d102      	bne.n	8014e1e <_close_r+0x1a>
 8014e18:	682b      	ldr	r3, [r5, #0]
 8014e1a:	b103      	cbz	r3, 8014e1e <_close_r+0x1a>
 8014e1c:	6023      	str	r3, [r4, #0]
 8014e1e:	bd38      	pop	{r3, r4, r5, pc}
 8014e20:	2000b050 	.word	0x2000b050

08014e24 <__sflush_r>:
 8014e24:	898a      	ldrh	r2, [r1, #12]
 8014e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2a:	4605      	mov	r5, r0
 8014e2c:	0710      	lsls	r0, r2, #28
 8014e2e:	460c      	mov	r4, r1
 8014e30:	d458      	bmi.n	8014ee4 <__sflush_r+0xc0>
 8014e32:	684b      	ldr	r3, [r1, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	dc05      	bgt.n	8014e44 <__sflush_r+0x20>
 8014e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	dc02      	bgt.n	8014e44 <__sflush_r+0x20>
 8014e3e:	2000      	movs	r0, #0
 8014e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e46:	2e00      	cmp	r6, #0
 8014e48:	d0f9      	beq.n	8014e3e <__sflush_r+0x1a>
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e50:	682f      	ldr	r7, [r5, #0]
 8014e52:	602b      	str	r3, [r5, #0]
 8014e54:	d032      	beq.n	8014ebc <__sflush_r+0x98>
 8014e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e58:	89a3      	ldrh	r3, [r4, #12]
 8014e5a:	075a      	lsls	r2, r3, #29
 8014e5c:	d505      	bpl.n	8014e6a <__sflush_r+0x46>
 8014e5e:	6863      	ldr	r3, [r4, #4]
 8014e60:	1ac0      	subs	r0, r0, r3
 8014e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e64:	b10b      	cbz	r3, 8014e6a <__sflush_r+0x46>
 8014e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e68:	1ac0      	subs	r0, r0, r3
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	4602      	mov	r2, r0
 8014e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e70:	6a21      	ldr	r1, [r4, #32]
 8014e72:	4628      	mov	r0, r5
 8014e74:	47b0      	blx	r6
 8014e76:	1c43      	adds	r3, r0, #1
 8014e78:	89a3      	ldrh	r3, [r4, #12]
 8014e7a:	d106      	bne.n	8014e8a <__sflush_r+0x66>
 8014e7c:	6829      	ldr	r1, [r5, #0]
 8014e7e:	291d      	cmp	r1, #29
 8014e80:	d82c      	bhi.n	8014edc <__sflush_r+0xb8>
 8014e82:	4a2a      	ldr	r2, [pc, #168]	; (8014f2c <__sflush_r+0x108>)
 8014e84:	40ca      	lsrs	r2, r1
 8014e86:	07d6      	lsls	r6, r2, #31
 8014e88:	d528      	bpl.n	8014edc <__sflush_r+0xb8>
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	6062      	str	r2, [r4, #4]
 8014e8e:	04d9      	lsls	r1, r3, #19
 8014e90:	6922      	ldr	r2, [r4, #16]
 8014e92:	6022      	str	r2, [r4, #0]
 8014e94:	d504      	bpl.n	8014ea0 <__sflush_r+0x7c>
 8014e96:	1c42      	adds	r2, r0, #1
 8014e98:	d101      	bne.n	8014e9e <__sflush_r+0x7a>
 8014e9a:	682b      	ldr	r3, [r5, #0]
 8014e9c:	b903      	cbnz	r3, 8014ea0 <__sflush_r+0x7c>
 8014e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8014ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ea2:	602f      	str	r7, [r5, #0]
 8014ea4:	2900      	cmp	r1, #0
 8014ea6:	d0ca      	beq.n	8014e3e <__sflush_r+0x1a>
 8014ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014eac:	4299      	cmp	r1, r3
 8014eae:	d002      	beq.n	8014eb6 <__sflush_r+0x92>
 8014eb0:	4628      	mov	r0, r5
 8014eb2:	f7ff f94f 	bl	8014154 <_free_r>
 8014eb6:	2000      	movs	r0, #0
 8014eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8014eba:	e7c1      	b.n	8014e40 <__sflush_r+0x1c>
 8014ebc:	6a21      	ldr	r1, [r4, #32]
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	47b0      	blx	r6
 8014ec4:	1c41      	adds	r1, r0, #1
 8014ec6:	d1c7      	bne.n	8014e58 <__sflush_r+0x34>
 8014ec8:	682b      	ldr	r3, [r5, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d0c4      	beq.n	8014e58 <__sflush_r+0x34>
 8014ece:	2b1d      	cmp	r3, #29
 8014ed0:	d001      	beq.n	8014ed6 <__sflush_r+0xb2>
 8014ed2:	2b16      	cmp	r3, #22
 8014ed4:	d101      	bne.n	8014eda <__sflush_r+0xb6>
 8014ed6:	602f      	str	r7, [r5, #0]
 8014ed8:	e7b1      	b.n	8014e3e <__sflush_r+0x1a>
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ee0:	81a3      	strh	r3, [r4, #12]
 8014ee2:	e7ad      	b.n	8014e40 <__sflush_r+0x1c>
 8014ee4:	690f      	ldr	r7, [r1, #16]
 8014ee6:	2f00      	cmp	r7, #0
 8014ee8:	d0a9      	beq.n	8014e3e <__sflush_r+0x1a>
 8014eea:	0793      	lsls	r3, r2, #30
 8014eec:	680e      	ldr	r6, [r1, #0]
 8014eee:	bf08      	it	eq
 8014ef0:	694b      	ldreq	r3, [r1, #20]
 8014ef2:	600f      	str	r7, [r1, #0]
 8014ef4:	bf18      	it	ne
 8014ef6:	2300      	movne	r3, #0
 8014ef8:	eba6 0807 	sub.w	r8, r6, r7
 8014efc:	608b      	str	r3, [r1, #8]
 8014efe:	f1b8 0f00 	cmp.w	r8, #0
 8014f02:	dd9c      	ble.n	8014e3e <__sflush_r+0x1a>
 8014f04:	6a21      	ldr	r1, [r4, #32]
 8014f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f08:	4643      	mov	r3, r8
 8014f0a:	463a      	mov	r2, r7
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	47b0      	blx	r6
 8014f10:	2800      	cmp	r0, #0
 8014f12:	dc06      	bgt.n	8014f22 <__sflush_r+0xfe>
 8014f14:	89a3      	ldrh	r3, [r4, #12]
 8014f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f1a:	81a3      	strh	r3, [r4, #12]
 8014f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f20:	e78e      	b.n	8014e40 <__sflush_r+0x1c>
 8014f22:	4407      	add	r7, r0
 8014f24:	eba8 0800 	sub.w	r8, r8, r0
 8014f28:	e7e9      	b.n	8014efe <__sflush_r+0xda>
 8014f2a:	bf00      	nop
 8014f2c:	20400001 	.word	0x20400001

08014f30 <_fflush_r>:
 8014f30:	b538      	push	{r3, r4, r5, lr}
 8014f32:	690b      	ldr	r3, [r1, #16]
 8014f34:	4605      	mov	r5, r0
 8014f36:	460c      	mov	r4, r1
 8014f38:	b913      	cbnz	r3, 8014f40 <_fflush_r+0x10>
 8014f3a:	2500      	movs	r5, #0
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	bd38      	pop	{r3, r4, r5, pc}
 8014f40:	b118      	cbz	r0, 8014f4a <_fflush_r+0x1a>
 8014f42:	6983      	ldr	r3, [r0, #24]
 8014f44:	b90b      	cbnz	r3, 8014f4a <_fflush_r+0x1a>
 8014f46:	f7ff f84b 	bl	8013fe0 <__sinit>
 8014f4a:	4b14      	ldr	r3, [pc, #80]	; (8014f9c <_fflush_r+0x6c>)
 8014f4c:	429c      	cmp	r4, r3
 8014f4e:	d11b      	bne.n	8014f88 <_fflush_r+0x58>
 8014f50:	686c      	ldr	r4, [r5, #4]
 8014f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d0ef      	beq.n	8014f3a <_fflush_r+0xa>
 8014f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f5c:	07d0      	lsls	r0, r2, #31
 8014f5e:	d404      	bmi.n	8014f6a <_fflush_r+0x3a>
 8014f60:	0599      	lsls	r1, r3, #22
 8014f62:	d402      	bmi.n	8014f6a <_fflush_r+0x3a>
 8014f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f66:	f7ff f8eb 	bl	8014140 <__retarget_lock_acquire_recursive>
 8014f6a:	4628      	mov	r0, r5
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	f7ff ff59 	bl	8014e24 <__sflush_r>
 8014f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f74:	07da      	lsls	r2, r3, #31
 8014f76:	4605      	mov	r5, r0
 8014f78:	d4e0      	bmi.n	8014f3c <_fflush_r+0xc>
 8014f7a:	89a3      	ldrh	r3, [r4, #12]
 8014f7c:	059b      	lsls	r3, r3, #22
 8014f7e:	d4dd      	bmi.n	8014f3c <_fflush_r+0xc>
 8014f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f82:	f7ff f8de 	bl	8014142 <__retarget_lock_release_recursive>
 8014f86:	e7d9      	b.n	8014f3c <_fflush_r+0xc>
 8014f88:	4b05      	ldr	r3, [pc, #20]	; (8014fa0 <_fflush_r+0x70>)
 8014f8a:	429c      	cmp	r4, r3
 8014f8c:	d101      	bne.n	8014f92 <_fflush_r+0x62>
 8014f8e:	68ac      	ldr	r4, [r5, #8]
 8014f90:	e7df      	b.n	8014f52 <_fflush_r+0x22>
 8014f92:	4b04      	ldr	r3, [pc, #16]	; (8014fa4 <_fflush_r+0x74>)
 8014f94:	429c      	cmp	r4, r3
 8014f96:	bf08      	it	eq
 8014f98:	68ec      	ldreq	r4, [r5, #12]
 8014f9a:	e7da      	b.n	8014f52 <_fflush_r+0x22>
 8014f9c:	0801a83c 	.word	0x0801a83c
 8014fa0:	0801a85c 	.word	0x0801a85c
 8014fa4:	0801a81c 	.word	0x0801a81c

08014fa8 <_lseek_r>:
 8014fa8:	b538      	push	{r3, r4, r5, lr}
 8014faa:	4d07      	ldr	r5, [pc, #28]	; (8014fc8 <_lseek_r+0x20>)
 8014fac:	4604      	mov	r4, r0
 8014fae:	4608      	mov	r0, r1
 8014fb0:	4611      	mov	r1, r2
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	602a      	str	r2, [r5, #0]
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	f7ed fa46 	bl	8002448 <_lseek>
 8014fbc:	1c43      	adds	r3, r0, #1
 8014fbe:	d102      	bne.n	8014fc6 <_lseek_r+0x1e>
 8014fc0:	682b      	ldr	r3, [r5, #0]
 8014fc2:	b103      	cbz	r3, 8014fc6 <_lseek_r+0x1e>
 8014fc4:	6023      	str	r3, [r4, #0]
 8014fc6:	bd38      	pop	{r3, r4, r5, pc}
 8014fc8:	2000b050 	.word	0x2000b050

08014fcc <__swhatbuf_r>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	460e      	mov	r6, r1
 8014fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fd4:	2900      	cmp	r1, #0
 8014fd6:	b096      	sub	sp, #88	; 0x58
 8014fd8:	4614      	mov	r4, r2
 8014fda:	461d      	mov	r5, r3
 8014fdc:	da08      	bge.n	8014ff0 <__swhatbuf_r+0x24>
 8014fde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	602a      	str	r2, [r5, #0]
 8014fe6:	061a      	lsls	r2, r3, #24
 8014fe8:	d410      	bmi.n	801500c <__swhatbuf_r+0x40>
 8014fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fee:	e00e      	b.n	801500e <__swhatbuf_r+0x42>
 8014ff0:	466a      	mov	r2, sp
 8014ff2:	f000 f8e3 	bl	80151bc <_fstat_r>
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	dbf1      	blt.n	8014fde <__swhatbuf_r+0x12>
 8014ffa:	9a01      	ldr	r2, [sp, #4]
 8014ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015004:	425a      	negs	r2, r3
 8015006:	415a      	adcs	r2, r3
 8015008:	602a      	str	r2, [r5, #0]
 801500a:	e7ee      	b.n	8014fea <__swhatbuf_r+0x1e>
 801500c:	2340      	movs	r3, #64	; 0x40
 801500e:	2000      	movs	r0, #0
 8015010:	6023      	str	r3, [r4, #0]
 8015012:	b016      	add	sp, #88	; 0x58
 8015014:	bd70      	pop	{r4, r5, r6, pc}
	...

08015018 <__smakebuf_r>:
 8015018:	898b      	ldrh	r3, [r1, #12]
 801501a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801501c:	079d      	lsls	r5, r3, #30
 801501e:	4606      	mov	r6, r0
 8015020:	460c      	mov	r4, r1
 8015022:	d507      	bpl.n	8015034 <__smakebuf_r+0x1c>
 8015024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	6123      	str	r3, [r4, #16]
 801502c:	2301      	movs	r3, #1
 801502e:	6163      	str	r3, [r4, #20]
 8015030:	b002      	add	sp, #8
 8015032:	bd70      	pop	{r4, r5, r6, pc}
 8015034:	ab01      	add	r3, sp, #4
 8015036:	466a      	mov	r2, sp
 8015038:	f7ff ffc8 	bl	8014fcc <__swhatbuf_r>
 801503c:	9900      	ldr	r1, [sp, #0]
 801503e:	4605      	mov	r5, r0
 8015040:	4630      	mov	r0, r6
 8015042:	f7ff f8f3 	bl	801422c <_malloc_r>
 8015046:	b948      	cbnz	r0, 801505c <__smakebuf_r+0x44>
 8015048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801504c:	059a      	lsls	r2, r3, #22
 801504e:	d4ef      	bmi.n	8015030 <__smakebuf_r+0x18>
 8015050:	f023 0303 	bic.w	r3, r3, #3
 8015054:	f043 0302 	orr.w	r3, r3, #2
 8015058:	81a3      	strh	r3, [r4, #12]
 801505a:	e7e3      	b.n	8015024 <__smakebuf_r+0xc>
 801505c:	4b0d      	ldr	r3, [pc, #52]	; (8015094 <__smakebuf_r+0x7c>)
 801505e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015060:	89a3      	ldrh	r3, [r4, #12]
 8015062:	6020      	str	r0, [r4, #0]
 8015064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015068:	81a3      	strh	r3, [r4, #12]
 801506a:	9b00      	ldr	r3, [sp, #0]
 801506c:	6163      	str	r3, [r4, #20]
 801506e:	9b01      	ldr	r3, [sp, #4]
 8015070:	6120      	str	r0, [r4, #16]
 8015072:	b15b      	cbz	r3, 801508c <__smakebuf_r+0x74>
 8015074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015078:	4630      	mov	r0, r6
 801507a:	f000 f8b1 	bl	80151e0 <_isatty_r>
 801507e:	b128      	cbz	r0, 801508c <__smakebuf_r+0x74>
 8015080:	89a3      	ldrh	r3, [r4, #12]
 8015082:	f023 0303 	bic.w	r3, r3, #3
 8015086:	f043 0301 	orr.w	r3, r3, #1
 801508a:	81a3      	strh	r3, [r4, #12]
 801508c:	89a0      	ldrh	r0, [r4, #12]
 801508e:	4305      	orrs	r5, r0
 8015090:	81a5      	strh	r5, [r4, #12]
 8015092:	e7cd      	b.n	8015030 <__smakebuf_r+0x18>
 8015094:	08013f79 	.word	0x08013f79

08015098 <__malloc_lock>:
 8015098:	4801      	ldr	r0, [pc, #4]	; (80150a0 <__malloc_lock+0x8>)
 801509a:	f7ff b851 	b.w	8014140 <__retarget_lock_acquire_recursive>
 801509e:	bf00      	nop
 80150a0:	2000b054 	.word	0x2000b054

080150a4 <__malloc_unlock>:
 80150a4:	4801      	ldr	r0, [pc, #4]	; (80150ac <__malloc_unlock+0x8>)
 80150a6:	f7ff b84c 	b.w	8014142 <__retarget_lock_release_recursive>
 80150aa:	bf00      	nop
 80150ac:	2000b054 	.word	0x2000b054

080150b0 <_realloc_r>:
 80150b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150b4:	4680      	mov	r8, r0
 80150b6:	4614      	mov	r4, r2
 80150b8:	460e      	mov	r6, r1
 80150ba:	b921      	cbnz	r1, 80150c6 <_realloc_r+0x16>
 80150bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150c0:	4611      	mov	r1, r2
 80150c2:	f7ff b8b3 	b.w	801422c <_malloc_r>
 80150c6:	b92a      	cbnz	r2, 80150d4 <_realloc_r+0x24>
 80150c8:	f7ff f844 	bl	8014154 <_free_r>
 80150cc:	4625      	mov	r5, r4
 80150ce:	4628      	mov	r0, r5
 80150d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150d4:	f000 f894 	bl	8015200 <_malloc_usable_size_r>
 80150d8:	4284      	cmp	r4, r0
 80150da:	4607      	mov	r7, r0
 80150dc:	d802      	bhi.n	80150e4 <_realloc_r+0x34>
 80150de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80150e2:	d812      	bhi.n	801510a <_realloc_r+0x5a>
 80150e4:	4621      	mov	r1, r4
 80150e6:	4640      	mov	r0, r8
 80150e8:	f7ff f8a0 	bl	801422c <_malloc_r>
 80150ec:	4605      	mov	r5, r0
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d0ed      	beq.n	80150ce <_realloc_r+0x1e>
 80150f2:	42bc      	cmp	r4, r7
 80150f4:	4622      	mov	r2, r4
 80150f6:	4631      	mov	r1, r6
 80150f8:	bf28      	it	cs
 80150fa:	463a      	movcs	r2, r7
 80150fc:	f7fe fe54 	bl	8013da8 <memcpy>
 8015100:	4631      	mov	r1, r6
 8015102:	4640      	mov	r0, r8
 8015104:	f7ff f826 	bl	8014154 <_free_r>
 8015108:	e7e1      	b.n	80150ce <_realloc_r+0x1e>
 801510a:	4635      	mov	r5, r6
 801510c:	e7df      	b.n	80150ce <_realloc_r+0x1e>
	...

08015110 <_read_r>:
 8015110:	b538      	push	{r3, r4, r5, lr}
 8015112:	4d07      	ldr	r5, [pc, #28]	; (8015130 <_read_r+0x20>)
 8015114:	4604      	mov	r4, r0
 8015116:	4608      	mov	r0, r1
 8015118:	4611      	mov	r1, r2
 801511a:	2200      	movs	r2, #0
 801511c:	602a      	str	r2, [r5, #0]
 801511e:	461a      	mov	r2, r3
 8015120:	f7ed f932 	bl	8002388 <_read>
 8015124:	1c43      	adds	r3, r0, #1
 8015126:	d102      	bne.n	801512e <_read_r+0x1e>
 8015128:	682b      	ldr	r3, [r5, #0]
 801512a:	b103      	cbz	r3, 801512e <_read_r+0x1e>
 801512c:	6023      	str	r3, [r4, #0]
 801512e:	bd38      	pop	{r3, r4, r5, pc}
 8015130:	2000b050 	.word	0x2000b050

08015134 <_raise_r>:
 8015134:	291f      	cmp	r1, #31
 8015136:	b538      	push	{r3, r4, r5, lr}
 8015138:	4604      	mov	r4, r0
 801513a:	460d      	mov	r5, r1
 801513c:	d904      	bls.n	8015148 <_raise_r+0x14>
 801513e:	2316      	movs	r3, #22
 8015140:	6003      	str	r3, [r0, #0]
 8015142:	f04f 30ff 	mov.w	r0, #4294967295
 8015146:	bd38      	pop	{r3, r4, r5, pc}
 8015148:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801514a:	b112      	cbz	r2, 8015152 <_raise_r+0x1e>
 801514c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015150:	b94b      	cbnz	r3, 8015166 <_raise_r+0x32>
 8015152:	4620      	mov	r0, r4
 8015154:	f000 f830 	bl	80151b8 <_getpid_r>
 8015158:	462a      	mov	r2, r5
 801515a:	4601      	mov	r1, r0
 801515c:	4620      	mov	r0, r4
 801515e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015162:	f000 b817 	b.w	8015194 <_kill_r>
 8015166:	2b01      	cmp	r3, #1
 8015168:	d00a      	beq.n	8015180 <_raise_r+0x4c>
 801516a:	1c59      	adds	r1, r3, #1
 801516c:	d103      	bne.n	8015176 <_raise_r+0x42>
 801516e:	2316      	movs	r3, #22
 8015170:	6003      	str	r3, [r0, #0]
 8015172:	2001      	movs	r0, #1
 8015174:	e7e7      	b.n	8015146 <_raise_r+0x12>
 8015176:	2400      	movs	r4, #0
 8015178:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801517c:	4628      	mov	r0, r5
 801517e:	4798      	blx	r3
 8015180:	2000      	movs	r0, #0
 8015182:	e7e0      	b.n	8015146 <_raise_r+0x12>

08015184 <raise>:
 8015184:	4b02      	ldr	r3, [pc, #8]	; (8015190 <raise+0xc>)
 8015186:	4601      	mov	r1, r0
 8015188:	6818      	ldr	r0, [r3, #0]
 801518a:	f7ff bfd3 	b.w	8015134 <_raise_r>
 801518e:	bf00      	nop
 8015190:	20000048 	.word	0x20000048

08015194 <_kill_r>:
 8015194:	b538      	push	{r3, r4, r5, lr}
 8015196:	4d07      	ldr	r5, [pc, #28]	; (80151b4 <_kill_r+0x20>)
 8015198:	2300      	movs	r3, #0
 801519a:	4604      	mov	r4, r0
 801519c:	4608      	mov	r0, r1
 801519e:	4611      	mov	r1, r2
 80151a0:	602b      	str	r3, [r5, #0]
 80151a2:	f7ed f8d5 	bl	8002350 <_kill>
 80151a6:	1c43      	adds	r3, r0, #1
 80151a8:	d102      	bne.n	80151b0 <_kill_r+0x1c>
 80151aa:	682b      	ldr	r3, [r5, #0]
 80151ac:	b103      	cbz	r3, 80151b0 <_kill_r+0x1c>
 80151ae:	6023      	str	r3, [r4, #0]
 80151b0:	bd38      	pop	{r3, r4, r5, pc}
 80151b2:	bf00      	nop
 80151b4:	2000b050 	.word	0x2000b050

080151b8 <_getpid_r>:
 80151b8:	f7ed b8c2 	b.w	8002340 <_getpid>

080151bc <_fstat_r>:
 80151bc:	b538      	push	{r3, r4, r5, lr}
 80151be:	4d07      	ldr	r5, [pc, #28]	; (80151dc <_fstat_r+0x20>)
 80151c0:	2300      	movs	r3, #0
 80151c2:	4604      	mov	r4, r0
 80151c4:	4608      	mov	r0, r1
 80151c6:	4611      	mov	r1, r2
 80151c8:	602b      	str	r3, [r5, #0]
 80151ca:	f7ed f922 	bl	8002412 <_fstat>
 80151ce:	1c43      	adds	r3, r0, #1
 80151d0:	d102      	bne.n	80151d8 <_fstat_r+0x1c>
 80151d2:	682b      	ldr	r3, [r5, #0]
 80151d4:	b103      	cbz	r3, 80151d8 <_fstat_r+0x1c>
 80151d6:	6023      	str	r3, [r4, #0]
 80151d8:	bd38      	pop	{r3, r4, r5, pc}
 80151da:	bf00      	nop
 80151dc:	2000b050 	.word	0x2000b050

080151e0 <_isatty_r>:
 80151e0:	b538      	push	{r3, r4, r5, lr}
 80151e2:	4d06      	ldr	r5, [pc, #24]	; (80151fc <_isatty_r+0x1c>)
 80151e4:	2300      	movs	r3, #0
 80151e6:	4604      	mov	r4, r0
 80151e8:	4608      	mov	r0, r1
 80151ea:	602b      	str	r3, [r5, #0]
 80151ec:	f7ed f921 	bl	8002432 <_isatty>
 80151f0:	1c43      	adds	r3, r0, #1
 80151f2:	d102      	bne.n	80151fa <_isatty_r+0x1a>
 80151f4:	682b      	ldr	r3, [r5, #0]
 80151f6:	b103      	cbz	r3, 80151fa <_isatty_r+0x1a>
 80151f8:	6023      	str	r3, [r4, #0]
 80151fa:	bd38      	pop	{r3, r4, r5, pc}
 80151fc:	2000b050 	.word	0x2000b050

08015200 <_malloc_usable_size_r>:
 8015200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015204:	1f18      	subs	r0, r3, #4
 8015206:	2b00      	cmp	r3, #0
 8015208:	bfbc      	itt	lt
 801520a:	580b      	ldrlt	r3, [r1, r0]
 801520c:	18c0      	addlt	r0, r0, r3
 801520e:	4770      	bx	lr

08015210 <_init>:
 8015210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015212:	bf00      	nop
 8015214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015216:	bc08      	pop	{r3}
 8015218:	469e      	mov	lr, r3
 801521a:	4770      	bx	lr

0801521c <_fini>:
 801521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801521e:	bf00      	nop
 8015220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015222:	bc08      	pop	{r3}
 8015224:	469e      	mov	lr, r3
 8015226:	4770      	bx	lr
