
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058cc  08016d40  08016d40  00026d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c60c  0801c60c  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c60c  0801c60c  0002c60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c614  0801c614  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c614  0801c614  0002c614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c618  0801c618  0002c618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0801c61c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  0801c6e8  000300cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  0801c788  0003016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000afc4  2000020c  0801c828  0003020c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000b1d0  0801c828  0003b1d0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002d937  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006b75  00000000  00000000  0005db73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001fd8  00000000  00000000  000646e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001e90  00000000  00000000  000666c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034e12  00000000  00000000  00068550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033518  00000000  00000000  0009d362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a640  00000000  00000000  000d087a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001daeba  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e68  00000000  00000000  001daf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016d28 	.word	0x08016d28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	08016d28 	.word	0x08016d28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
}
 80005cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ce:	f3bf 8f6f 	isb	sy
}
 80005d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <SCB_EnableICache+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableICache+0x48>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableICache+0x48>)
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SCB_EnableDCache+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800061e:	f3bf 8f4f 	dsb	sy
}
 8000622:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <SCB_EnableDCache+0x84>)
 8000626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800062a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0b5b      	lsrs	r3, r3, #13
 8000630:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000634:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800063e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	015a      	lsls	r2, r3, #5
 8000644:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000648:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064e:	4911      	ldr	r1, [pc, #68]	; (8000694 <SCB_EnableDCache+0x84>)
 8000650:	4313      	orrs	r3, r2
 8000652:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	60ba      	str	r2, [r7, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1ef      	bne.n	8000640 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	60fa      	str	r2, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1e5      	bne.n	8000636 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
}
 800066e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SCB_EnableDCache+0x84>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SCB_EnableDCache+0x84>)
 8000676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800067c:	f3bf 8f4f 	dsb	sy
}
 8000680:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000682:	f3bf 8f6f 	isb	sy
}
 8000686:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d013      	beq.n	80006d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00b      	beq.n	80006d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006c0:	e000      	b.n	80006c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0f9      	beq.n	80006c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
	int i =0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e009      	b.n	8000710 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffc7 	bl	8000698 <ITM_SendChar>
	for (i=0; i<len; i++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf1      	blt.n	80006fc <_write+0x16>
	return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_UART_RxCpltCallback>:
//VARIABLES DE COMUNICACION SERIAL
uint8_t tx_buff[]="COMANDO 1 \n\r";
uint8_t tx_buff2[]="COMANDO 2 \n\r";
uint8_t rx_buff[8];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart7, rx_buff, 8);
 800072c:	2208      	movs	r2, #8
 800072e:	4904      	ldr	r1, [pc, #16]	; (8000740 <HAL_UART_RxCpltCallback+0x1c>)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <HAL_UART_RxCpltCallback+0x20>)
 8000732:	f006 ffc5 	bl	80076c0 <HAL_UART_Receive_IT>
	//HAL_UART_Transmit_IT(&huart7, tx_buff, strlen((char*)tx_buff));
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200009f0 	.word	0x200009f0
 8000744:	2000030c 	.word	0x2000030c

08000748 <main>:

int main(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b08d      	sub	sp, #52	; 0x34
 800074c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800074e:	f000 fc8b 	bl	8001068 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000752:	f7ff ff37 	bl	80005c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000756:	f7ff ff5b 	bl	8000610 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f002 fb47 	bl	8002dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f9d5 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 fbd3 	bl	8000f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000766:	f000 fbab 	bl	8000ec0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800076a:	f000 fb7b 	bl	8000e64 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800076e:	f000 fad9 	bl	8000d24 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000772:	f000 fa33 	bl	8000bdc <MX_ADC1_Init>
  MX_ADC3_Init();
 8000776:	f000 fa83 	bl	8000c80 <MX_ADC3_Init>
  MX_LWIP_Init();
 800077a:	f008 fd5b 	bl	8009234 <MX_LWIP_Init>
  MX_UART7_Init();
 800077e:	f000 fb11 	bl	8000da4 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8000782:	f000 fb3f 	bl	8000e04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000786:	f000 fcb7 	bl	80010f8 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 800078a:	f001 fdff 	bl	800238c <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 800078e:	f001 fe09 	bl	80023a4 <ssd1306_OhmioMenuPrincipal>
  /* USER CODE BEGIN WHILE */
  uint32_t ipaddr;
  uint32_t netmask;
   char ip_str[16];
   char netmask_str[16];
   HAL_UART_Init(&huart7);
 8000792:	4880      	ldr	r0, [pc, #512]	; (8000994 <main+0x24c>)
 8000794:	f006 fee8 	bl	8007568 <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart7,rx_buff,8);
 8000798:	2208      	movs	r2, #8
 800079a:	497f      	ldr	r1, [pc, #508]	; (8000998 <main+0x250>)
 800079c:	487d      	ldr	r0, [pc, #500]	; (8000994 <main+0x24c>)
 800079e:	f006 ff8f 	bl	80076c0 <HAL_UART_Receive_IT>
/* 	HAL_UART_Transmit_IT(&huart7, tx_buff, 8
  );
	HAL_Delay(5000); */

	  //INICIALIZAMOS EL SPLASH
    ethernetif_input(&gnetif);
 80007a2:	487e      	ldr	r0, [pc, #504]	; (800099c <main+0x254>)
 80007a4:	f008 fef6 	bl	8009594 <ethernetif_input>
    sys_check_timeouts();
 80007a8:	f010 f9dc 	bl	8010b64 <sys_check_timeouts>

    ipaddr = netif_ip4_addr(&gnetif);
 80007ac:	4b7c      	ldr	r3, [pc, #496]	; (80009a0 <main+0x258>)
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    netmask = netif_ip4_netmask(&gnetif);
 80007b0:	4b7c      	ldr	r3, [pc, #496]	; (80009a4 <main+0x25c>)
 80007b2:	623b      	str	r3, [r7, #32]

// Convertir la dirección IP en una cadena de caracteres
sprintf(ip_str, "%d.%d.%d.%d", (ipaddr & 0xff), ((ipaddr >> 8) & 0xff), ((ipaddr >> 16) & 0xff), ((ipaddr >> 24) & 0xff));
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	b2d9      	uxtb	r1, r3
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	0a1b      	lsrs	r3, r3, #8
 80007bc:	b2dc      	uxtb	r4, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	0c1b      	lsrs	r3, r3, #16
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	f107 0010 	add.w	r0, r7, #16
 80007cc:	9201      	str	r2, [sp, #4]
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4623      	mov	r3, r4
 80007d2:	460a      	mov	r2, r1
 80007d4:	4974      	ldr	r1, [pc, #464]	; (80009a8 <main+0x260>)
 80007d6:	f015 f8f9 	bl	80159cc <siprintf>

// Convertir la máscara de subred en una cadena de caracteres
sprintf(netmask_str, "%d.%d.%d.%d", (netmask & 0xff), ((netmask >> 8) & 0xff), ((netmask >> 16) & 0xff), ((netmask >> 24) & 0xff));
 80007da:	6a3b      	ldr	r3, [r7, #32]
 80007dc:	b2d9      	uxtb	r1, r3
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b2dc      	uxtb	r4, r3
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	6a3a      	ldr	r2, [r7, #32]
 80007ec:	0e12      	lsrs	r2, r2, #24
 80007ee:	4638      	mov	r0, r7
 80007f0:	9201      	str	r2, [sp, #4]
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	4623      	mov	r3, r4
 80007f6:	460a      	mov	r2, r1
 80007f8:	496b      	ldr	r1, [pc, #428]	; (80009a8 <main+0x260>)
 80007fa:	f015 f8e7 	bl	80159cc <siprintf>

printf("IP");
 80007fe:	486b      	ldr	r0, [pc, #428]	; (80009ac <main+0x264>)
 8000800:	f015 f88e 	bl	8015920 <iprintf>
printf("GATEWAY");
 8000804:	486a      	ldr	r0, [pc, #424]	; (80009b0 <main+0x268>)
 8000806:	f015 f88b 	bl	8015920 <iprintf>


	  HAL_ADC_Start(&hadc3);
 800080a:	486a      	ldr	r0, [pc, #424]	; (80009b4 <main+0x26c>)
 800080c:	f002 fbbc 	bl	8002f88 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc3, 10)==HAL_OK){
 8000810:	210a      	movs	r1, #10
 8000812:	4868      	ldr	r0, [pc, #416]	; (80009b4 <main+0x26c>)
 8000814:	f002 fcba 	bl	800318c <HAL_ADC_PollForConversion>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d112      	bne.n	8000844 <main+0xfc>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc3);
 800081e:	4865      	ldr	r0, [pc, #404]	; (80009b4 <main+0x26c>)
 8000820:	f002 fd3f 	bl	80032a2 <HAL_ADC_GetValue>
 8000824:	4603      	mov	r3, r0
 8000826:	4a64      	ldr	r2, [pc, #400]	; (80009b8 <main+0x270>)
 8000828:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen, ip_str, netmask_str);
 800082a:	4b63      	ldr	r3, [pc, #396]	; (80009b8 <main+0x270>)
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	4b63      	ldr	r3, [pc, #396]	; (80009bc <main+0x274>)
 8000830:	6819      	ldr	r1, [r3, #0]
 8000832:	4b63      	ldr	r3, [pc, #396]	; (80009c0 <main+0x278>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	f107 0410 	add.w	r4, r7, #16
 800083a:	463b      	mov	r3, r7
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	4623      	mov	r3, r4
 8000840:	f001 fd3a 	bl	80022b8 <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 700 && analog_value_keypad <= 950){
 8000844:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <main+0x270>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800084c:	d348      	bcc.n	80008e0 <main+0x198>
 800084e:	4b5a      	ldr	r3, [pc, #360]	; (80009b8 <main+0x270>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000856:	4293      	cmp	r3, r2
 8000858:	d842      	bhi.n	80008e0 <main+0x198>
        if(screen==1){
 800085a:	4b59      	ldr	r3, [pc, #356]	; (80009c0 <main+0x278>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d10d      	bne.n	800087e <main+0x136>
          if (indexMenu==4){
 8000862:	4b56      	ldr	r3, [pc, #344]	; (80009bc <main+0x274>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b04      	cmp	r3, #4
 8000868:	d103      	bne.n	8000872 <main+0x12a>
            indexMenu=0;
 800086a:	4b54      	ldr	r3, [pc, #336]	; (80009bc <main+0x274>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	e036      	b.n	80008e0 <main+0x198>
          }
          else{
            indexMenu++;
 8000872:	4b52      	ldr	r3, [pc, #328]	; (80009bc <main+0x274>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	4a50      	ldr	r2, [pc, #320]	; (80009bc <main+0x274>)
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	e030      	b.n	80008e0 <main+0x198>
          }
        }else if(screen==4){
 800087e:	4b50      	ldr	r3, [pc, #320]	; (80009c0 <main+0x278>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d10d      	bne.n	80008a2 <main+0x15a>
          if (indexMenu==4){
 8000886:	4b4d      	ldr	r3, [pc, #308]	; (80009bc <main+0x274>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d103      	bne.n	8000896 <main+0x14e>
            indexMenu=0;
 800088e:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <main+0x274>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e024      	b.n	80008e0 <main+0x198>
          }
          else{
            indexMenu++;
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <main+0x274>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	3301      	adds	r3, #1
 800089c:	4a47      	ldr	r2, [pc, #284]	; (80009bc <main+0x274>)
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	e01e      	b.n	80008e0 <main+0x198>
          }
        }else if(screen==6){
 80008a2:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <main+0x278>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d10d      	bne.n	80008c6 <main+0x17e>
          if (indexMenu==4){
 80008aa:	4b44      	ldr	r3, [pc, #272]	; (80009bc <main+0x274>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d103      	bne.n	80008ba <main+0x172>
            indexMenu=0;
 80008b2:	4b42      	ldr	r3, [pc, #264]	; (80009bc <main+0x274>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	e012      	b.n	80008e0 <main+0x198>
          }
          else{
            indexMenu++;
 80008ba:	4b40      	ldr	r3, [pc, #256]	; (80009bc <main+0x274>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	4a3e      	ldr	r2, [pc, #248]	; (80009bc <main+0x274>)
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	e00c      	b.n	80008e0 <main+0x198>
          }
        }
        else{
          if (indexMenu==2){
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <main+0x274>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d103      	bne.n	80008d6 <main+0x18e>
            indexMenu=0;
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <main+0x274>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e004      	b.n	80008e0 <main+0x198>
          }
          else{
            indexMenu++;
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <main+0x274>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	4a37      	ldr	r2, [pc, #220]	; (80009bc <main+0x274>)
 80008de:	6013      	str	r3, [r2, #0]
	   //screen=3 -> SETTINGS
	   //screen=4 -> BROADCAST
     //screen=5 -> CLOUD
     //screen=6 -> SERIAL

	      if(analog_value_keypad >= 0 && analog_value_keypad <= 100){
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <main+0x270>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b64      	cmp	r3, #100	; 0x64
 80008e6:	f200 80fd 	bhi.w	8000ae4 <main+0x39c>
			//Select
	    	//Menu Principal
			if(screen==0){
 80008ea:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <main+0x278>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d125      	bne.n	800093e <main+0x1f6>
				if(indexMenu==0){
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <main+0x274>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d108      	bne.n	800090c <main+0x1c4>
					//option Dashboard
					screen=1;
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <main+0x278>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000900:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <main+0x274>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000906:	f000 fc85 	bl	8001214 <ssd1306_UpdateScreen>
 800090a:	e018      	b.n	800093e <main+0x1f6>
				}else if (indexMenu==1){
 800090c:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <main+0x274>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d108      	bne.n	8000926 <main+0x1de>
					//option Energy
					screen=2;
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <main+0x278>)
 8000916:	2202      	movs	r2, #2
 8000918:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <main+0x274>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000920:	f000 fc78 	bl	8001214 <ssd1306_UpdateScreen>
 8000924:	e00b      	b.n	800093e <main+0x1f6>
				}else if (indexMenu==2){
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <main+0x274>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d107      	bne.n	800093e <main+0x1f6>
					screen=3;
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <main+0x278>)
 8000930:	2203      	movs	r2, #3
 8000932:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <main+0x274>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 800093a:	f000 fc6b 	bl	8001214 <ssd1306_UpdateScreen>
				}
			}
			// Dashboard
				if(screen==1){
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <main+0x278>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d14a      	bne.n	80009dc <main+0x294>
					if (indexMenu==0){
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <main+0x274>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d108      	bne.n	8000960 <main+0x218>
						//option RF
						screen=4;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <main+0x278>)
 8000950:	2204      	movs	r2, #4
 8000952:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <main+0x274>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800095a:	f000 fc5b 	bl	8001214 <ssd1306_UpdateScreen>
 800095e:	e03d      	b.n	80009dc <main+0x294>
					}else if (indexMenu==1){
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <main+0x274>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d108      	bne.n	800097a <main+0x232>
						//option CLOUD
						screen=5;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <main+0x278>)
 800096a:	2205      	movs	r2, #5
 800096c:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <main+0x274>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000974:	f000 fc4e 	bl	8001214 <ssd1306_UpdateScreen>
 8000978:	e030      	b.n	80009dc <main+0x294>
					}
					else if (indexMenu==3){
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <main+0x274>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d120      	bne.n	80009c4 <main+0x27c>
						//option SERIAL
						screen=6;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <main+0x278>)
 8000984:	2206      	movs	r2, #6
 8000986:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <main+0x274>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800098e:	f000 fc41 	bl	8001214 <ssd1306_UpdateScreen>
 8000992:	e023      	b.n	80009dc <main+0x294>
 8000994:	2000030c 	.word	0x2000030c
 8000998:	200009f0 	.word	0x200009f0
 800099c:	20000e08 	.word	0x20000e08
 80009a0:	20000e0c 	.word	0x20000e0c
 80009a4:	20000e10 	.word	0x20000e10
 80009a8:	08016d40 	.word	0x08016d40
 80009ac:	08016d4c 	.word	0x08016d4c
 80009b0:	08016d50 	.word	0x08016d50
 80009b4:	20000270 	.word	0x20000270
 80009b8:	200009ec 	.word	0x200009ec
 80009bc:	200009e4 	.word	0x200009e4
 80009c0:	200009e8 	.word	0x200009e8
					}
					else if (indexMenu==4){
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <main+0x3ac>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d107      	bne.n	80009dc <main+0x294>
						//option Atras back
						screen=0;
 80009cc:	4b4a      	ldr	r3, [pc, #296]	; (8000af8 <main+0x3b0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 80009d2:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <main+0x3ac>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 80009d8:	f000 fc1c 	bl	8001214 <ssd1306_UpdateScreen>
					}
				}
			// Energy
				if(screen==2){
 80009dc:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <main+0x3b0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d10f      	bne.n	8000a04 <main+0x2bc>
					if(indexMenu==0){
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <main+0x3ac>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00b      	beq.n	8000a04 <main+0x2bc>
						//option power no hace nada
						//screen=1;
					}else if (indexMenu==2){
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <main+0x3ac>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d107      	bne.n	8000a04 <main+0x2bc>
						//option Atras back
						screen=0;
 80009f4:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <main+0x3b0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 80009fa:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <main+0x3ac>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000a00:	f000 fc08 	bl	8001214 <ssd1306_UpdateScreen>
					}
				}
			// Settings
			if(screen==3){
 8000a04:	4b3c      	ldr	r3, [pc, #240]	; (8000af8 <main+0x3b0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d10f      	bne.n	8000a2c <main+0x2e4>
				if(indexMenu==0){
 8000a0c:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <main+0x3ac>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00b      	beq.n	8000a2c <main+0x2e4>
					//option Version no hace nada
					//screen=1;
				}else if (indexMenu==2){
 8000a14:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <main+0x3ac>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d107      	bne.n	8000a2c <main+0x2e4>
					//option Atras back
					screen=0;
 8000a1c:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <main+0x3b0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000a22:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <main+0x3ac>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000a28:	f000 fbf4 	bl	8001214 <ssd1306_UpdateScreen>
				}
			}
      // BROADCAST
      if(screen==4){
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <main+0x3b0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d10f      	bne.n	8000a54 <main+0x30c>
        if(indexMenu==0){
 8000a34:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <main+0x3ac>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00b      	beq.n	8000a54 <main+0x30c>
					//screen=1;
				}
        else if (indexMenu==4){
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <main+0x3ac>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d107      	bne.n	8000a54 <main+0x30c>
					//option Atras back
					screen=1;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <main+0x3b0>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <main+0x3ac>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000a50:	f000 fbe0 	bl	8001214 <ssd1306_UpdateScreen>
				}
      }
      // CLOUD
      if(screen==5){
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <main+0x3b0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b05      	cmp	r3, #5
 8000a5a:	d10f      	bne.n	8000a7c <main+0x334>
        if(indexMenu==0){
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <main+0x3ac>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00b      	beq.n	8000a7c <main+0x334>
					//screen=1;
				}
        else if (indexMenu==2){
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <main+0x3ac>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d107      	bne.n	8000a7c <main+0x334>
					//option Atras back
					screen=1;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <main+0x3b0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <main+0x3ac>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000a78:	f000 fbcc 	bl	8001214 <ssd1306_UpdateScreen>
				}
      }

       // SERIAL / PRUEBAS DE COMUNICACIÓN
      if(screen==6){
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <main+0x3b0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b06      	cmp	r3, #6
 8000a82:	d12f      	bne.n	8000ae4 <main+0x39c>
        if(indexMenu==1){
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <main+0x3ac>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d10d      	bne.n	8000aa8 <main+0x360>
					//screen=1;
          HAL_UART_Transmit_IT(&huart7, tx_buff, strlen((char*)tx_buff));
 8000a8c:	481b      	ldr	r0, [pc, #108]	; (8000afc <main+0x3b4>)
 8000a8e:	f7ff fbbf 	bl	8000210 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	461a      	mov	r2, r3
 8000a98:	4918      	ldr	r1, [pc, #96]	; (8000afc <main+0x3b4>)
 8000a9a:	4819      	ldr	r0, [pc, #100]	; (8000b00 <main+0x3b8>)
 8000a9c:	f006 fdb2 	bl	8007604 <HAL_UART_Transmit_IT>
          HAL_Delay(50);
 8000aa0:	2032      	movs	r0, #50	; 0x32
 8000aa2:	f002 fa09 	bl	8002eb8 <HAL_Delay>
 8000aa6:	e01d      	b.n	8000ae4 <main+0x39c>
				} else if(indexMenu==2){
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <main+0x3ac>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d10d      	bne.n	8000acc <main+0x384>
					//screen=1;
          HAL_UART_Transmit_IT(&huart7, tx_buff2, strlen((char*)tx_buff2));
 8000ab0:	4814      	ldr	r0, [pc, #80]	; (8000b04 <main+0x3bc>)
 8000ab2:	f7ff fbad 	bl	8000210 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	461a      	mov	r2, r3
 8000abc:	4911      	ldr	r1, [pc, #68]	; (8000b04 <main+0x3bc>)
 8000abe:	4810      	ldr	r0, [pc, #64]	; (8000b00 <main+0x3b8>)
 8000ac0:	f006 fda0 	bl	8007604 <HAL_UART_Transmit_IT>
          HAL_Delay(50);
 8000ac4:	2032      	movs	r0, #50	; 0x32
 8000ac6:	f002 f9f7 	bl	8002eb8 <HAL_Delay>
 8000aca:	e00b      	b.n	8000ae4 <main+0x39c>
        }
        else if (indexMenu==4){
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <main+0x3ac>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b04      	cmp	r3, #4
 8000ad2:	d107      	bne.n	8000ae4 <main+0x39c>
					//option Atras back
					screen=1;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <main+0x3b0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <main+0x3ac>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 8000ae0:	f000 fb98 	bl	8001214 <ssd1306_UpdateScreen>
      }
	      }



	  HAL_ADC_Stop(&hadc3);
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <main+0x3c0>)
 8000ae6:	f002 fb1d 	bl	8003124 <HAL_ADC_Stop>
	  HAL_Delay(50);
 8000aea:	2032      	movs	r0, #50	; 0x32
 8000aec:	f002 f9e4 	bl	8002eb8 <HAL_Delay>
    ethernetif_input(&gnetif);
 8000af0:	e657      	b.n	80007a2 <main+0x5a>
 8000af2:	bf00      	nop
 8000af4:	200009e4 	.word	0x200009e4
 8000af8:	200009e8 	.word	0x200009e8
 8000afc:	20000000 	.word	0x20000000
 8000b00:	2000030c 	.word	0x2000030c
 8000b04:	20000010 	.word	0x20000010
 8000b08:	20000270 	.word	0x20000270

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	2230      	movs	r2, #48	; 0x30
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f014 fef8 	bl	8015910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b30:	f005 fc50 	bl	80063d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b54:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b80:	2348      	movs	r3, #72	; 0x48
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4618      	mov	r0, r3
 8000b92:	f005 fc2f 	bl	80063f4 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b9c:	f000 fa6d 	bl	800107a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2102      	movs	r1, #2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f005 febd 	bl	800693c <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bc8:	f000 fa57 	bl	800107a <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3750      	adds	r7, #80	; 0x50
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <MX_ADC1_Init+0x9c>)
 8000bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c1c:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <MX_ADC1_Init+0xa0>)
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c3c:	f002 f960 	bl	8002f00 <HAL_ADC_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c46:	f000 fa18 	bl	800107a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_ADC1_Init+0x98>)
 8000c5c:	f002 fb2e 	bl	80032bc <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c66:	f000 fa08 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000228 	.word	0x20000228
 8000c78:	40012000 	.word	0x40012000
 8000c7c:	0f000001 	.word	0x0f000001

08000c80 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000c94:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <MX_ADC3_Init+0x9c>)
 8000c96:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <MX_ADC3_Init+0xa0>)
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cde:	480e      	ldr	r0, [pc, #56]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000ce0:	f002 f90e 	bl	8002f00 <HAL_ADC_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 f9c6 	bl	800107a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000cee:	230f      	movs	r3, #15
 8000cf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_ADC3_Init+0x98>)
 8000d00:	f002 fadc 	bl	80032bc <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000d0a:	f000 f9b6 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000270 	.word	0x20000270
 8000d1c:	40012200 	.word	0x40012200
 8000d20:	0f000001 	.word	0x0f000001

08000d24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <MX_I2C2_Init+0x78>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <MX_I2C2_Init+0x7c>)
 8000d32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d60:	f004 fd6e 	bl	8005840 <HAL_I2C_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d6a:	f000 f986 	bl	800107a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d72:	f005 f94f 	bl	8006014 <HAL_I2CEx_ConfigAnalogFilter>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d7c:	f000 f97d 	bl	800107a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_I2C2_Init+0x74>)
 8000d84:	f005 f991 	bl	80060aa <HAL_I2CEx_ConfigDigitalFilter>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f000 f974 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200002b8 	.word	0x200002b8
 8000d9c:	40005800 	.word	0x40005800
 8000da0:	00301739 	.word	0x00301739

08000da4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_UART7_Init+0x58>)
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <MX_UART7_Init+0x5c>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_UART7_Init+0x58>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_UART7_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_UART7_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_UART7_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_UART7_Init+0x58>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_UART7_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_UART7_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_UART7_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_UART7_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_UART7_Init+0x58>)
 8000de8:	f006 fbbe 	bl	8007568 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 f942 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000030c 	.word	0x2000030c
 8000e00:	40007800 	.word	0x40007800

08000e04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <MX_USART3_UART_Init+0x5c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART3_UART_Init+0x58>)
 8000e48:	f006 fb8e 	bl	8007568 <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e52:	f000 f912 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000394 	.word	0x20000394
 8000e60:	40004800 	.word	0x40004800

08000e64 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e72:	2206      	movs	r2, #6
 8000e74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e84:	2202      	movs	r2, #2
 8000e86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea8:	f005 f94b 	bl	8006142 <HAL_PCD_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000eb2:	f000 f8e2 	bl	800107a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200004dc 	.word	0x200004dc

08000ec0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <MX_DMA_Init+0x48>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <MX_DMA_Init+0x48>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MX_DMA_Init+0x48>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	200c      	movs	r0, #12
 8000ee4:	f002 fd15 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ee8:	200c      	movs	r0, #12
 8000eea:	f002 fd2e 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200e      	movs	r0, #14
 8000ef4:	f002 fd0d 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ef8:	200e      	movs	r0, #14
 8000efa:	f002 fd26 	bl	800394a <HAL_NVIC_EnableIRQ>

}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a46      	ldr	r2, [pc, #280]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b44      	ldr	r3, [pc, #272]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	4b41      	ldr	r3, [pc, #260]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a40      	ldr	r2, [pc, #256]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a3a      	ldr	r2, [pc, #232]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a34      	ldr	r2, [pc, #208]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a2e      	ldr	r2, [pc, #184]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a28      	ldr	r2, [pc, #160]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_GPIO_Init+0x14c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000fd0:	4822      	ldr	r0, [pc, #136]	; (800105c <MX_GPIO_Init+0x150>)
 8000fd2:	f004 fc1b 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2140      	movs	r1, #64	; 0x40
 8000fda:	4821      	ldr	r0, [pc, #132]	; (8001060 <MX_GPIO_Init+0x154>)
 8000fdc:	f004 fc16 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <MX_GPIO_Init+0x158>)
 8000ff8:	f004 fa5c 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ffc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <MX_GPIO_Init+0x150>)
 8001016:	f004 fa4d 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800101a:	2340      	movs	r3, #64	; 0x40
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <MX_GPIO_Init+0x154>)
 8001032:	f004 fa3f 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_GPIO_Init+0x154>)
 800104a:	f004 fa33 	bl	80054b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800104e:	bf00      	nop
 8001050:	3730      	adds	r7, #48	; 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400
 8001060:	40021800 	.word	0x40021800
 8001064:	40020800 	.word	0x40020800

08001068 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  HAL_MPU_Disable();
 800106c:	f002 fc88 	bl	8003980 <HAL_MPU_Disable>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001070:	2004      	movs	r0, #4
 8001072:	f002 fc9d 	bl	80039b0 <HAL_MPU_Enable>

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}

0800107a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800107e:	b672      	cpsid	i
}
 8001080:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001082:	e7fe      	b.n	8001082 <Error_Handler+0x8>

08001084 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	2301      	movs	r3, #1
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	2200      	movs	r2, #0
 80010b0:	2178      	movs	r1, #120	; 0x78
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <ssd1306_WriteCommand+0x2c>)
 80010b4:	f004 fc54 	bl	8005960 <HAL_I2C_Mem_Write>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200002b8 	.word	0x200002b8

080010c4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f04f 32ff 	mov.w	r2, #4294967295
 80010d6:	9202      	str	r2, [sp, #8]
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2240      	movs	r2, #64	; 0x40
 80010e2:	2178      	movs	r1, #120	; 0x78
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <ssd1306_WriteData+0x30>)
 80010e6:	f004 fc3b 	bl	8005960 <HAL_I2C_Mem_Write>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200002b8 	.word	0x200002b8

080010f8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80010fc:	f7ff ffc2 	bl	8001084 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001100:	2064      	movs	r0, #100	; 0x64
 8001102:	f001 fed9 	bl	8002eb8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001106:	2000      	movs	r0, #0
 8001108:	f000 fa34 	bl	8001574 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800110c:	2020      	movs	r0, #32
 800110e:	f7ff ffc1 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ffbe 	bl	8001094 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001118:	20b0      	movs	r0, #176	; 0xb0
 800111a:	f7ff ffbb 	bl	8001094 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800111e:	20c8      	movs	r0, #200	; 0xc8
 8001120:	f7ff ffb8 	bl	8001094 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff ffb5 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800112a:	2010      	movs	r0, #16
 800112c:	f7ff ffb2 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001130:	2040      	movs	r0, #64	; 0x40
 8001132:	f7ff ffaf 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001136:	20ff      	movs	r0, #255	; 0xff
 8001138:	f000 fa09 	bl	800154e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800113c:	20a1      	movs	r0, #161	; 0xa1
 800113e:	f7ff ffa9 	bl	8001094 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001142:	20a6      	movs	r0, #166	; 0xa6
 8001144:	f7ff ffa6 	bl	8001094 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001148:	20a8      	movs	r0, #168	; 0xa8
 800114a:	f7ff ffa3 	bl	8001094 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800114e:	203f      	movs	r0, #63	; 0x3f
 8001150:	f7ff ffa0 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001154:	20a4      	movs	r0, #164	; 0xa4
 8001156:	f7ff ff9d 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800115a:	20d3      	movs	r0, #211	; 0xd3
 800115c:	f7ff ff9a 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ff97 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001166:	20d5      	movs	r0, #213	; 0xd5
 8001168:	f7ff ff94 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800116c:	20f0      	movs	r0, #240	; 0xf0
 800116e:	f7ff ff91 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001172:	20d9      	movs	r0, #217	; 0xd9
 8001174:	f7ff ff8e 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001178:	2022      	movs	r0, #34	; 0x22
 800117a:	f7ff ff8b 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800117e:	20da      	movs	r0, #218	; 0xda
 8001180:	f7ff ff88 	bl	8001094 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001184:	2012      	movs	r0, #18
 8001186:	f7ff ff85 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800118a:	20db      	movs	r0, #219	; 0xdb
 800118c:	f7ff ff82 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001190:	2020      	movs	r0, #32
 8001192:	f7ff ff7f 	bl	8001094 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001196:	208d      	movs	r0, #141	; 0x8d
 8001198:	f7ff ff7c 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800119c:	2014      	movs	r0, #20
 800119e:	f7ff ff79 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011a2:	2001      	movs	r0, #1
 80011a4:	f000 f9e6 	bl	8001574 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f80f 	bl	80011cc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80011ae:	f000 f831 	bl	8001214 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <ssd1306_Init+0xd0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <ssd1306_Init+0xd0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80011be:	4b02      	ldr	r3, [pc, #8]	; (80011c8 <ssd1306_Init+0xd0>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	711a      	strb	r2, [r3, #4]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000df8 	.word	0x20000df8

080011cc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e00d      	b.n	80011f8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <ssd1306_Fill+0x1a>
 80011e2:	2100      	movs	r1, #0
 80011e4:	e000      	b.n	80011e8 <ssd1306_Fill+0x1c>
 80011e6:	21ff      	movs	r1, #255	; 0xff
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <ssd1306_Fill+0x44>)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4413      	add	r3, r2
 80011ee:	460a      	mov	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d3ed      	bcc.n	80011dc <ssd1306_Fill+0x10>
    }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200009f8 	.word	0x200009f8

08001214 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	e016      	b.n	800124e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	3b50      	subs	r3, #80	; 0x50
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff34 	bl	8001094 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800122c:	2002      	movs	r0, #2
 800122e:	f7ff ff31 	bl	8001094 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001232:	2010      	movs	r0, #16
 8001234:	f7ff ff2e 	bl	8001094 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	01db      	lsls	r3, r3, #7
 800123c:	4a08      	ldr	r2, [pc, #32]	; (8001260 <ssd1306_UpdateScreen+0x4c>)
 800123e:	4413      	add	r3, r2
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff3e 	bl	80010c4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	3301      	adds	r3, #1
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b07      	cmp	r3, #7
 8001252:	d9e5      	bls.n	8001220 <ssd1306_UpdateScreen+0xc>
    }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200009f8 	.word	0x200009f8

08001264 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	460b      	mov	r3, r1
 8001270:	71bb      	strb	r3, [r7, #6]
 8001272:	4613      	mov	r3, r2
 8001274:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db3d      	blt.n	80012fa <ssd1306_DrawPixel+0x96>
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b3f      	cmp	r3, #63	; 0x3f
 8001282:	d83a      	bhi.n	80012fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001284:	797b      	ldrb	r3, [r7, #5]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d11a      	bne.n	80012c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	4603      	mov	r3, r0
 8001294:	01db      	lsls	r3, r3, #7
 8001296:	4413      	add	r3, r2
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <ssd1306_DrawPixel+0xa4>)
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	b25a      	sxtb	r2, r3
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b259      	sxtb	r1, r3
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	4603      	mov	r3, r0
 80012b4:	01db      	lsls	r3, r3, #7
 80012b6:	4413      	add	r3, r2
 80012b8:	b2c9      	uxtb	r1, r1
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <ssd1306_DrawPixel+0xa4>)
 80012bc:	54d1      	strb	r1, [r2, r3]
 80012be:	e01d      	b.n	80012fc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	b2d8      	uxtb	r0, r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	01db      	lsls	r3, r3, #7
 80012cc:	4413      	add	r3, r2
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <ssd1306_DrawPixel+0xa4>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	2101      	movs	r1, #1
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	4013      	ands	r3, r2
 80012e8:	b259      	sxtb	r1, r3
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	4603      	mov	r3, r0
 80012ee:	01db      	lsls	r3, r3, #7
 80012f0:	4413      	add	r3, r2
 80012f2:	b2c9      	uxtb	r1, r1
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <ssd1306_DrawPixel+0xa4>)
 80012f6:	54d1      	strb	r1, [r2, r3]
 80012f8:	e000      	b.n	80012fc <ssd1306_DrawPixel+0x98>
        return;
 80012fa:	bf00      	nop
    }
}
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200009f8 	.word	0x200009f8

0800130c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	4604      	mov	r4, r0
 8001314:	1d38      	adds	r0, r7, #4
 8001316:	e880 0006 	stmia.w	r0, {r1, r2}
 800131a:	461a      	mov	r2, r3
 800131c:	4623      	mov	r3, r4
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	4613      	mov	r3, r2
 8001322:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b1f      	cmp	r3, #31
 8001328:	d902      	bls.n	8001330 <ssd1306_WriteChar+0x24>
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b7e      	cmp	r3, #126	; 0x7e
 800132e:	d901      	bls.n	8001334 <ssd1306_WriteChar+0x28>
        return 0;
 8001330:	2300      	movs	r3, #0
 8001332:	e06d      	b.n	8001410 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <ssd1306_WriteChar+0x10c>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	793b      	ldrb	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	2b80      	cmp	r3, #128	; 0x80
 8001340:	dc06      	bgt.n	8001350 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <ssd1306_WriteChar+0x10c>)
 8001344:	885b      	ldrh	r3, [r3, #2]
 8001346:	461a      	mov	r2, r3
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800134c:	2b40      	cmp	r3, #64	; 0x40
 800134e:	dd01      	ble.n	8001354 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001350:	2300      	movs	r3, #0
 8001352:	e05d      	b.n	8001410 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	e04c      	b.n	80013f4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	3b20      	subs	r3, #32
 8001360:	7979      	ldrb	r1, [r7, #5]
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4619      	mov	r1, r3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	440b      	add	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	e034      	b.n	80013e4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <ssd1306_WriteChar+0x10c>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4413      	add	r3, r2
 8001396:	b2d8      	uxtb	r0, r3
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <ssd1306_WriteChar+0x10c>)
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	7bba      	ldrb	r2, [r7, #14]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff ff5b 	bl	8001264 <ssd1306_DrawPixel>
 80013ae:	e016      	b.n	80013de <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <ssd1306_WriteChar+0x10c>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	b2d8      	uxtb	r0, r3
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <ssd1306_WriteChar+0x10c>)
 80013c0:	885b      	ldrh	r3, [r3, #2]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b2d9      	uxtb	r1, r3
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	f7ff ff43 	bl	8001264 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	793b      	ldrb	r3, [r7, #4]
 80013e6:	461a      	mov	r2, r3
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d3c5      	bcc.n	800137a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	797b      	ldrb	r3, [r7, #5]
 80013f6:	461a      	mov	r2, r3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d3ad      	bcc.n	800135a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <ssd1306_WriteChar+0x10c>)
 8001400:	881a      	ldrh	r2, [r3, #0]
 8001402:	793b      	ldrb	r3, [r7, #4]
 8001404:	b29b      	uxth	r3, r3
 8001406:	4413      	add	r3, r2
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b03      	ldr	r3, [pc, #12]	; (8001418 <ssd1306_WriteChar+0x10c>)
 800140c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3724      	adds	r7, #36	; 0x24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	20000df8 	.word	0x20000df8

0800141c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	1d38      	adds	r0, r7, #4
 8001426:	e880 0006 	stmia.w	r0, {r1, r2}
 800142a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800142c:	e012      	b.n	8001454 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	7818      	ldrb	r0, [r3, #0]
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	1d3a      	adds	r2, r7, #4
 8001436:	ca06      	ldmia	r2, {r1, r2}
 8001438:	f7ff ff68 	bl	800130c <ssd1306_WriteChar>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d002      	beq.n	800144e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	e008      	b.n	8001460 <ssd1306_WriteString+0x44>
        }
        str++;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3301      	adds	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e8      	bne.n	800142e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	781b      	ldrb	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <ssd1306_SetCursor+0x2c>)
 800147e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <ssd1306_SetCursor+0x2c>)
 8001486:	805a      	strh	r2, [r3, #2]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	20000df8 	.word	0x20000df8

08001498 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	603a      	str	r2, [r7, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	460b      	mov	r3, r1
 80014a8:	71bb      	strb	r3, [r7, #6]
 80014aa:	4613      	mov	r3, r2
 80014ac:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80014ae:	797b      	ldrb	r3, [r7, #5]
 80014b0:	3307      	adds	r3, #7
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da00      	bge.n	80014b8 <ssd1306_DrawBitmap+0x20>
 80014b6:	3307      	adds	r3, #7
 80014b8:	10db      	asrs	r3, r3, #3
 80014ba:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db3e      	blt.n	8001546 <ssd1306_DrawBitmap+0xae>
 80014c8:	79bb      	ldrb	r3, [r7, #6]
 80014ca:	2b3f      	cmp	r3, #63	; 0x3f
 80014cc:	d83b      	bhi.n	8001546 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	73bb      	strb	r3, [r7, #14]
 80014d2:	e033      	b.n	800153c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	737b      	strb	r3, [r7, #13]
 80014d8:	e026      	b.n	8001528 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80014da:	7b7b      	ldrb	r3, [r7, #13]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e00d      	b.n	8001508 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	7b7a      	ldrb	r2, [r7, #13]
 80014f8:	08d2      	lsrs	r2, r2, #3
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	4413      	add	r3, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150c:	2b00      	cmp	r3, #0
 800150e:	da08      	bge.n	8001522 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	7b7b      	ldrb	r3, [r7, #13]
 8001514:	4413      	add	r3, r2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	7f3a      	ldrb	r2, [r7, #28]
 800151a:	79b9      	ldrb	r1, [r7, #6]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fea1 	bl	8001264 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001522:	7b7b      	ldrb	r3, [r7, #13]
 8001524:	3301      	adds	r3, #1
 8001526:	737b      	strb	r3, [r7, #13]
 8001528:	7b7a      	ldrb	r2, [r7, #13]
 800152a:	797b      	ldrb	r3, [r7, #5]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3d4      	bcc.n	80014da <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	3301      	adds	r3, #1
 8001534:	73bb      	strb	r3, [r7, #14]
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	3301      	adds	r3, #1
 800153a:	71bb      	strb	r3, [r7, #6]
 800153c:	7bba      	ldrb	r2, [r7, #14]
 800153e:	7e3b      	ldrb	r3, [r7, #24]
 8001540:	429a      	cmp	r2, r3
 8001542:	d3c7      	bcc.n	80014d4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001544:	e000      	b.n	8001548 <ssd1306_DrawBitmap+0xb0>
        return;
 8001546:	bf00      	nop
}
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001558:	2381      	movs	r3, #129	; 0x81
 800155a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fd98 	bl	8001094 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fd94 	bl	8001094 <ssd1306_WriteCommand>
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001584:	23af      	movs	r3, #175	; 0xaf
 8001586:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <ssd1306_SetDisplayOn+0x38>)
 800158a:	2201      	movs	r2, #1
 800158c:	715a      	strb	r2, [r3, #5]
 800158e:	e004      	b.n	800159a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001590:	23ae      	movs	r3, #174	; 0xae
 8001592:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <ssd1306_SetDisplayOn+0x38>)
 8001596:	2200      	movs	r2, #0
 8001598:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fd79 	bl	8001094 <ssd1306_WriteCommand>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000df8 	.word	0x20000df8

080015b0 <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fe06 	bl	80011cc <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4619      	mov	r1, r3
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff ff4f 	bl	8001468 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <ssd1306_TestFonts1+0x88>)
 80015cc:	2301      	movs	r3, #1
 80015ce:	ca06      	ldmia	r2, {r1, r2}
 80015d0:	481a      	ldr	r0, [pc, #104]	; (800163c <ssd1306_TestFonts1+0x8c>)
 80015d2:	f7ff ff23 	bl	800141c <ssd1306_WriteString>
    y += 26;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	331a      	adds	r3, #26
 80015da:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4619      	mov	r1, r3
 80015e0:	2002      	movs	r0, #2
 80015e2:	f7ff ff41 	bl	8001468 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <ssd1306_TestFonts1+0x90>)
 80015e8:	2301      	movs	r3, #1
 80015ea:	ca06      	ldmia	r2, {r1, r2}
 80015ec:	4815      	ldr	r0, [pc, #84]	; (8001644 <ssd1306_TestFonts1+0x94>)
 80015ee:	f7ff ff15 	bl	800141c <ssd1306_WriteString>
    y += 10;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	330a      	adds	r3, #10
 80015f6:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4619      	mov	r1, r3
 80015fc:	2002      	movs	r0, #2
 80015fe:	f7ff ff33 	bl	8001468 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 8001602:	4a11      	ldr	r2, [pc, #68]	; (8001648 <ssd1306_TestFonts1+0x98>)
 8001604:	2301      	movs	r3, #1
 8001606:	ca06      	ldmia	r2, {r1, r2}
 8001608:	4810      	ldr	r0, [pc, #64]	; (800164c <ssd1306_TestFonts1+0x9c>)
 800160a:	f7ff ff07 	bl	800141c <ssd1306_WriteString>
    y += 10;
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	330a      	adds	r3, #10
 8001612:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4619      	mov	r1, r3
 8001618:	2002      	movs	r0, #2
 800161a:	f7ff ff25 	bl	8001468 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.0", Font_6x8, White);
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <ssd1306_TestFonts1+0x98>)
 8001620:	2301      	movs	r3, #1
 8001622:	ca06      	ldmia	r2, {r1, r2}
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <ssd1306_TestFonts1+0xa0>)
 8001626:	f7ff fef9 	bl	800141c <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 800162a:	f7ff fdf3 	bl	8001214 <ssd1306_UpdateScreen>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000030 	.word	0x20000030
 800163c:	08016d58 	.word	0x08016d58
 8001640:	20000028 	.word	0x20000028
 8001644:	08016d64 	.word	0x08016d64
 8001648:	20000020 	.word	0x20000020
 800164c:	08016d70 	.word	0x08016d70
 8001650:	08016d84 	.word	0x08016d84

08001654 <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff fdaa 	bl	80011cc <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001678:	7ffb      	ldrb	r3, [r7, #31]
 800167a:	4619      	mov	r1, r3
 800167c:	2002      	movs	r0, #2
 800167e:	f7ff fef3 	bl	8001468 <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 8001682:	4a56      	ldr	r2, [pc, #344]	; (80017dc <ssd1306_PrintPrincipalMenu+0x188>)
 8001684:	2301      	movs	r3, #1
 8001686:	ca06      	ldmia	r2, {r1, r2}
 8001688:	4855      	ldr	r0, [pc, #340]	; (80017e0 <ssd1306_PrintPrincipalMenu+0x18c>)
 800168a:	f7ff fec7 	bl	800141c <ssd1306_WriteString>

	    //SERIAL CONECTION
		  ssd1306_DrawBitmap(55,y,icon_serial,15,15,White);
 800168e:	7ff9      	ldrb	r1, [r7, #31]
 8001690:	2301      	movs	r3, #1
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	230f      	movs	r3, #15
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	230f      	movs	r3, #15
 800169a:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <ssd1306_PrintPrincipalMenu+0x190>)
 800169c:	2037      	movs	r0, #55	; 0x37
 800169e:	f7ff fefb 	bl	8001498 <ssd1306_DrawBitmap>

	    //INTERNET
		  ssd1306_DrawBitmap(75,y,icon_rf,15,15,White);
 80016a2:	7ff9      	ldrb	r1, [r7, #31]
 80016a4:	2301      	movs	r3, #1
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	230f      	movs	r3, #15
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	230f      	movs	r3, #15
 80016ae:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <ssd1306_PrintPrincipalMenu+0x194>)
 80016b0:	204b      	movs	r0, #75	; 0x4b
 80016b2:	f7ff fef1 	bl	8001498 <ssd1306_DrawBitmap>

	    //BATERIA
		  ssd1306_DrawBitmap(95,y,icon_cloud,15,15,White);
 80016b6:	7ff9      	ldrb	r1, [r7, #31]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	230f      	movs	r3, #15
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	230f      	movs	r3, #15
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <ssd1306_PrintPrincipalMenu+0x198>)
 80016c4:	205f      	movs	r0, #95	; 0x5f
 80016c6:	f7ff fee7 	bl	8001498 <ssd1306_DrawBitmap>

	    //SEÑAL GSM
		  ssd1306_DrawBitmap(115,y,icon_battery_full,15,15,White);
 80016ca:	7ff9      	ldrb	r1, [r7, #31]
 80016cc:	2301      	movs	r3, #1
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	230f      	movs	r3, #15
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	230f      	movs	r3, #15
 80016d6:	4a46      	ldr	r2, [pc, #280]	; (80017f0 <ssd1306_PrintPrincipalMenu+0x19c>)
 80016d8:	2073      	movs	r0, #115	; 0x73
 80016da:	f7ff fedd 	bl	8001498 <ssd1306_DrawBitmap>



	    y += 20;
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	3314      	adds	r3, #20
 80016e2:	77fb      	strb	r3, [r7, #31]
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 80016e4:	7ffb      	ldrb	r3, [r7, #31]
 80016e6:	4619      	mov	r1, r3
 80016e8:	2002      	movs	r0, #2
 80016ea:	f7ff febd 	bl	8001468 <ssd1306_SetCursor>
	    if(indexMenu==0){
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d106      	bne.n	8001702 <ssd1306_PrintPrincipalMenu+0xae>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 80016f4:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <ssd1306_PrintPrincipalMenu+0x1a0>)
 80016f6:	2300      	movs	r3, #0
 80016f8:	ca06      	ldmia	r2, {r1, r2}
 80016fa:	483f      	ldr	r0, [pc, #252]	; (80017f8 <ssd1306_PrintPrincipalMenu+0x1a4>)
 80016fc:	f7ff fe8e 	bl	800141c <ssd1306_WriteString>
 8001700:	e005      	b.n	800170e <ssd1306_PrintPrincipalMenu+0xba>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 8001702:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001704:	2301      	movs	r3, #1
 8001706:	ca06      	ldmia	r2, {r1, r2}
 8001708:	483b      	ldr	r0, [pc, #236]	; (80017f8 <ssd1306_PrintPrincipalMenu+0x1a4>)
 800170a:	f7ff fe87 	bl	800141c <ssd1306_WriteString>

	    }
	    y += 10;
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	330a      	adds	r3, #10
 8001712:	77fb      	strb	r3, [r7, #31]
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001714:	7ffb      	ldrb	r3, [r7, #31]
 8001716:	4619      	mov	r1, r3
 8001718:	2002      	movs	r0, #2
 800171a:	f7ff fea5 	bl	8001468 <ssd1306_SetCursor>
	    if(indexMenu==1){
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d106      	bne.n	8001732 <ssd1306_PrintPrincipalMenu+0xde>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 8001724:	4a33      	ldr	r2, [pc, #204]	; (80017f4 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001726:	2300      	movs	r3, #0
 8001728:	ca06      	ldmia	r2, {r1, r2}
 800172a:	4834      	ldr	r0, [pc, #208]	; (80017fc <ssd1306_PrintPrincipalMenu+0x1a8>)
 800172c:	f7ff fe76 	bl	800141c <ssd1306_WriteString>
 8001730:	e005      	b.n	800173e <ssd1306_PrintPrincipalMenu+0xea>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 8001732:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001734:	2301      	movs	r3, #1
 8001736:	ca06      	ldmia	r2, {r1, r2}
 8001738:	4830      	ldr	r0, [pc, #192]	; (80017fc <ssd1306_PrintPrincipalMenu+0x1a8>)
 800173a:	f7ff fe6f 	bl	800141c <ssd1306_WriteString>

	    }
		y += 10;
 800173e:	7ffb      	ldrb	r3, [r7, #31]
 8001740:	330a      	adds	r3, #10
 8001742:	77fb      	strb	r3, [r7, #31]

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001744:	7ffb      	ldrb	r3, [r7, #31]
 8001746:	4619      	mov	r1, r3
 8001748:	2002      	movs	r0, #2
 800174a:	f7ff fe8d 	bl	8001468 <ssd1306_SetCursor>
	    if(indexMenu==2){
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d106      	bne.n	8001762 <ssd1306_PrintPrincipalMenu+0x10e>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001756:	2300      	movs	r3, #0
 8001758:	ca06      	ldmia	r2, {r1, r2}
 800175a:	4829      	ldr	r0, [pc, #164]	; (8001800 <ssd1306_PrintPrincipalMenu+0x1ac>)
 800175c:	f7ff fe5e 	bl	800141c <ssd1306_WriteString>
 8001760:	e005      	b.n	800176e <ssd1306_PrintPrincipalMenu+0x11a>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 8001762:	4a24      	ldr	r2, [pc, #144]	; (80017f4 <ssd1306_PrintPrincipalMenu+0x1a0>)
 8001764:	2301      	movs	r3, #1
 8001766:	ca06      	ldmia	r2, {r1, r2}
 8001768:	4825      	ldr	r0, [pc, #148]	; (8001800 <ssd1306_PrintPrincipalMenu+0x1ac>)
 800176a:	f7ff fe57 	bl	800141c <ssd1306_WriteString>

	    }
		y += 10;
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	330a      	adds	r3, #10
 8001772:	77fb      	strb	r3, [r7, #31]
		#endif




	         if(value >= 2850 && value <= 2950){
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f640 3221 	movw	r2, #2849	; 0xb21
 800177a:	4293      	cmp	r3, r2
 800177c:	dd0c      	ble.n	8001798 <ssd1306_PrintPrincipalMenu+0x144>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f640 3286 	movw	r2, #2950	; 0xb86
 8001784:	4293      	cmp	r3, r2
 8001786:	dc07      	bgt.n	8001798 <ssd1306_PrintPrincipalMenu+0x144>
	            strcpy(stringDirection, "DERECHA");
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <ssd1306_PrintPrincipalMenu+0x1b0>)
 800178e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001792:	e883 0003 	stmia.w	r3, {r0, r1}
 8001796:	e01b      	b.n	80017d0 <ssd1306_PrintPrincipalMenu+0x17c>
	        }
	        else if(value >= 1850 && value <= 1950){
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f240 7239 	movw	r2, #1849	; 0x739
 800179e:	4293      	cmp	r3, r2
 80017a0:	dd0b      	ble.n	80017ba <ssd1306_PrintPrincipalMenu+0x166>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f240 729e 	movw	r2, #1950	; 0x79e
 80017a8:	4293      	cmp	r3, r2
 80017aa:	dc06      	bgt.n	80017ba <ssd1306_PrintPrincipalMenu+0x166>
	            strcpy(stringDirection, "IZQUIERDA");
 80017ac:	4a16      	ldr	r2, [pc, #88]	; (8001808 <ssd1306_PrintPrincipalMenu+0x1b4>)
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b4:	c303      	stmia	r3!, {r0, r1}
 80017b6:	801a      	strh	r2, [r3, #0]
 80017b8:	e00a      	b.n	80017d0 <ssd1306_PrintPrincipalMenu+0x17c>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <ssd1306_PrintPrincipalMenu+0x1b8>)
 80017c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017c4:	6018      	str	r0, [r3, #0]
 80017c6:	3304      	adds	r3, #4
 80017c8:	8019      	strh	r1, [r3, #0]
 80017ca:	3302      	adds	r3, #2
 80017cc:	0c0a      	lsrs	r2, r1, #16
 80017ce:	701a      	strb	r2, [r3, #0]
	         //sprintf(screen_str, "%d", screen); // convert index to a string
	         //ssd1306_SetCursor(20, y); // set the cursor position
	         //ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
	         //   #endif

	    ssd1306_UpdateScreen();
 80017d0:	f7ff fd20 	bl	8001214 <ssd1306_UpdateScreen>
}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000030 	.word	0x20000030
 80017e0:	08016d90 	.word	0x08016d90
 80017e4:	0801b7e0 	.word	0x0801b7e0
 80017e8:	0801b7c0 	.word	0x0801b7c0
 80017ec:	0801b780 	.word	0x0801b780
 80017f0:	0801b7a0 	.word	0x0801b7a0
 80017f4:	20000028 	.word	0x20000028
 80017f8:	08016d98 	.word	0x08016d98
 80017fc:	08016da4 	.word	0x08016da4
 8001800:	08016dac 	.word	0x08016dac
 8001804:	08016db8 	.word	0x08016db8
 8001808:	08016dc0 	.word	0x08016dc0
 800180c:	08016dcc 	.word	0x08016dcc

08001810 <ssd1306_PrintDashboardMenu>:

void ssd1306_PrintDashboardMenu(int value, int indexMenu, int screen){
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af02      	add	r7, sp, #8
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	f107 0318 	add.w	r3, r7, #24
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff fccc 	bl	80011cc <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(20, y);
 8001834:	7ffb      	ldrb	r3, [r7, #31]
 8001836:	4619      	mov	r1, r3
 8001838:	2014      	movs	r0, #20
 800183a:	f7ff fe15 	bl	8001468 <ssd1306_SetCursor>
	    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 800183e:	4a84      	ldr	r2, [pc, #528]	; (8001a50 <ssd1306_PrintDashboardMenu+0x240>)
 8001840:	2301      	movs	r3, #1
 8001842:	ca06      	ldmia	r2, {r1, r2}
 8001844:	4883      	ldr	r0, [pc, #524]	; (8001a54 <ssd1306_PrintDashboardMenu+0x244>)
 8001846:	f7ff fde9 	bl	800141c <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800184a:	7ffb      	ldrb	r3, [r7, #31]
 800184c:	3314      	adds	r3, #20
 800184e:	77fb      	strb	r3, [r7, #31]
	    #endif

		ssd1306_SetCursor(2, y);
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	4619      	mov	r1, r3
 8001854:	2002      	movs	r0, #2
 8001856:	f7ff fe07 	bl	8001468 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d11d      	bne.n	800189c <ssd1306_PrintDashboardMenu+0x8c>
			ssd1306_DrawBitmap(2,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 8001860:	7ff9      	ldrb	r1, [r7, #31]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	2328      	movs	r3, #40	; 0x28
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2328      	movs	r3, #40	; 0x28
 800186c:	4a7a      	ldr	r2, [pc, #488]	; (8001a58 <ssd1306_PrintDashboardMenu+0x248>)
 800186e:	2002      	movs	r0, #2
 8001870:	f7ff fe12 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_1_RF,40,40, White);
 8001874:	7ff9      	ldrb	r1, [r7, #31]
 8001876:	2301      	movs	r3, #1
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	2328      	movs	r3, #40	; 0x28
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2328      	movs	r3, #40	; 0x28
 8001880:	4a76      	ldr	r2, [pc, #472]	; (8001a5c <ssd1306_PrintDashboardMenu+0x24c>)
 8001882:	202c      	movs	r0, #44	; 0x2c
 8001884:	f7ff fe08 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_3_CLOUD,40,40, White);
 8001888:	7ff9      	ldrb	r1, [r7, #31]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	2328      	movs	r3, #40	; 0x28
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2328      	movs	r3, #40	; 0x28
 8001894:	4a72      	ldr	r2, [pc, #456]	; (8001a60 <ssd1306_PrintDashboardMenu+0x250>)
 8001896:	2056      	movs	r0, #86	; 0x56
 8001898:	f7ff fdfe 	bl	8001498 <ssd1306_DrawBitmap>
		}
		if(indexMenu==1){
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d11d      	bne.n	80018de <ssd1306_PrintDashboardMenu+0xce>
			ssd1306_DrawBitmap(2,y,Dashboard_1_RF,40,40, White);
 80018a2:	7ff9      	ldrb	r1, [r7, #31]
 80018a4:	2301      	movs	r3, #1
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	2328      	movs	r3, #40	; 0x28
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2328      	movs	r3, #40	; 0x28
 80018ae:	4a6d      	ldr	r2, [pc, #436]	; (8001a64 <ssd1306_PrintDashboardMenu+0x254>)
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff fdf1 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_3_CLOUD,40,40, White);
 80018b6:	7ff9      	ldrb	r1, [r7, #31]
 80018b8:	2301      	movs	r3, #1
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2328      	movs	r3, #40	; 0x28
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2328      	movs	r3, #40	; 0x28
 80018c2:	4a69      	ldr	r2, [pc, #420]	; (8001a68 <ssd1306_PrintDashboardMenu+0x258>)
 80018c4:	202c      	movs	r0, #44	; 0x2c
 80018c6:	f7ff fde7 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_4_LORA,40,40, White);
 80018ca:	7ff9      	ldrb	r1, [r7, #31]
 80018cc:	2301      	movs	r3, #1
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	2328      	movs	r3, #40	; 0x28
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2328      	movs	r3, #40	; 0x28
 80018d6:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <ssd1306_PrintDashboardMenu+0x25c>)
 80018d8:	2056      	movs	r0, #86	; 0x56
 80018da:	f7ff fddd 	bl	8001498 <ssd1306_DrawBitmap>
		}
		if(indexMenu==2){
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d11d      	bne.n	8001920 <ssd1306_PrintDashboardMenu+0x110>
			ssd1306_DrawBitmap(2,y,Dashboard_3_CLOUD,40,40, White);
 80018e4:	7ff9      	ldrb	r1, [r7, #31]
 80018e6:	2301      	movs	r3, #1
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2328      	movs	r3, #40	; 0x28
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2328      	movs	r3, #40	; 0x28
 80018f0:	4a5b      	ldr	r2, [pc, #364]	; (8001a60 <ssd1306_PrintDashboardMenu+0x250>)
 80018f2:	2002      	movs	r0, #2
 80018f4:	f7ff fdd0 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_4_LORA,40,40, White);
 80018f8:	7ff9      	ldrb	r1, [r7, #31]
 80018fa:	2301      	movs	r3, #1
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2328      	movs	r3, #40	; 0x28
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2328      	movs	r3, #40	; 0x28
 8001904:	4a5a      	ldr	r2, [pc, #360]	; (8001a70 <ssd1306_PrintDashboardMenu+0x260>)
 8001906:	202c      	movs	r0, #44	; 0x2c
 8001908:	f7ff fdc6 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_5_SERIAL,40,40, White);
 800190c:	7ff9      	ldrb	r1, [r7, #31]
 800190e:	2301      	movs	r3, #1
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2328      	movs	r3, #40	; 0x28
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2328      	movs	r3, #40	; 0x28
 8001918:	4a56      	ldr	r2, [pc, #344]	; (8001a74 <ssd1306_PrintDashboardMenu+0x264>)
 800191a:	2056      	movs	r0, #86	; 0x56
 800191c:	f7ff fdbc 	bl	8001498 <ssd1306_DrawBitmap>
		}
		if(indexMenu==3){
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d11d      	bne.n	8001962 <ssd1306_PrintDashboardMenu+0x152>
			ssd1306_DrawBitmap(2,y,Dashboard_4_LORA,40,40, White);
 8001926:	7ff9      	ldrb	r1, [r7, #31]
 8001928:	2301      	movs	r3, #1
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2328      	movs	r3, #40	; 0x28
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2328      	movs	r3, #40	; 0x28
 8001932:	4a4e      	ldr	r2, [pc, #312]	; (8001a6c <ssd1306_PrintDashboardMenu+0x25c>)
 8001934:	2002      	movs	r0, #2
 8001936:	f7ff fdaf 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_5_SERIAL,40,40, White);
 800193a:	7ff9      	ldrb	r1, [r7, #31]
 800193c:	2301      	movs	r3, #1
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	2328      	movs	r3, #40	; 0x28
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2328      	movs	r3, #40	; 0x28
 8001946:	4a4c      	ldr	r2, [pc, #304]	; (8001a78 <ssd1306_PrintDashboardMenu+0x268>)
 8001948:	202c      	movs	r0, #44	; 0x2c
 800194a:	f7ff fda5 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_6_BACK,40,40, White);
 800194e:	7ff9      	ldrb	r1, [r7, #31]
 8001950:	2301      	movs	r3, #1
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2328      	movs	r3, #40	; 0x28
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2328      	movs	r3, #40	; 0x28
 800195a:	4a48      	ldr	r2, [pc, #288]	; (8001a7c <ssd1306_PrintDashboardMenu+0x26c>)
 800195c:	2056      	movs	r0, #86	; 0x56
 800195e:	f7ff fd9b 	bl	8001498 <ssd1306_DrawBitmap>
		}
		if(indexMenu==4){
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d11d      	bne.n	80019a4 <ssd1306_PrintDashboardMenu+0x194>
			ssd1306_DrawBitmap(2,y,Dashboard_5_SERIAL,40,40, White);
 8001968:	7ff9      	ldrb	r1, [r7, #31]
 800196a:	2301      	movs	r3, #1
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2328      	movs	r3, #40	; 0x28
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2328      	movs	r3, #40	; 0x28
 8001974:	4a3f      	ldr	r2, [pc, #252]	; (8001a74 <ssd1306_PrintDashboardMenu+0x264>)
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff fd8e 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_6_BACK,40,40, White);
 800197c:	7ff9      	ldrb	r1, [r7, #31]
 800197e:	2301      	movs	r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2328      	movs	r3, #40	; 0x28
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2328      	movs	r3, #40	; 0x28
 8001988:	4a3d      	ldr	r2, [pc, #244]	; (8001a80 <ssd1306_PrintDashboardMenu+0x270>)
 800198a:	202c      	movs	r0, #44	; 0x2c
 800198c:	f7ff fd84 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_2_BLOCKCHAIN,40,40, White);
 8001990:	7ff9      	ldrb	r1, [r7, #31]
 8001992:	2301      	movs	r3, #1
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	2328      	movs	r3, #40	; 0x28
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2328      	movs	r3, #40	; 0x28
 800199c:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <ssd1306_PrintDashboardMenu+0x248>)
 800199e:	2056      	movs	r0, #86	; 0x56
 80019a0:	f7ff fd7a 	bl	8001498 <ssd1306_DrawBitmap>
		}
		if(indexMenu==5){
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d11d      	bne.n	80019e6 <ssd1306_PrintDashboardMenu+0x1d6>
			ssd1306_DrawBitmap(2,y,Dashboard_6_BACK,40,40, White);
 80019aa:	7ff9      	ldrb	r1, [r7, #31]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	2328      	movs	r3, #40	; 0x28
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2328      	movs	r3, #40	; 0x28
 80019b6:	4a31      	ldr	r2, [pc, #196]	; (8001a7c <ssd1306_PrintDashboardMenu+0x26c>)
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7ff fd6d 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(44,y,Dashboard_active_2_BLOCKCHAIN,40,40, White);
 80019be:	7ff9      	ldrb	r1, [r7, #31]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2328      	movs	r3, #40	; 0x28
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2328      	movs	r3, #40	; 0x28
 80019ca:	4a2e      	ldr	r2, [pc, #184]	; (8001a84 <ssd1306_PrintDashboardMenu+0x274>)
 80019cc:	202c      	movs	r0, #44	; 0x2c
 80019ce:	f7ff fd63 	bl	8001498 <ssd1306_DrawBitmap>
			ssd1306_DrawBitmap(86,y,Dashboard_1_RF,40,40, White);
 80019d2:	7ff9      	ldrb	r1, [r7, #31]
 80019d4:	2301      	movs	r3, #1
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2328      	movs	r3, #40	; 0x28
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2328      	movs	r3, #40	; 0x28
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <ssd1306_PrintDashboardMenu+0x254>)
 80019e0:	2056      	movs	r0, #86	; 0x56
 80019e2:	f7ff fd59 	bl	8001498 <ssd1306_DrawBitmap>
		}
		 if(value >= 2850 && value <= 2950){
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f640 3221 	movw	r2, #2849	; 0xb21
 80019ec:	4293      	cmp	r3, r2
 80019ee:	dd0c      	ble.n	8001a0a <ssd1306_PrintDashboardMenu+0x1fa>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f640 3286 	movw	r2, #2950	; 0xb86
 80019f6:	4293      	cmp	r3, r2
 80019f8:	dc07      	bgt.n	8001a0a <ssd1306_PrintDashboardMenu+0x1fa>
			strcpy(stringDirection, "DERECHA");
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <ssd1306_PrintDashboardMenu+0x278>)
 8001a00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a04:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a08:	e01b      	b.n	8001a42 <ssd1306_PrintDashboardMenu+0x232>
		}
		else if(value >= 1850 && value <= 1950){
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f240 7239 	movw	r2, #1849	; 0x739
 8001a10:	4293      	cmp	r3, r2
 8001a12:	dd0b      	ble.n	8001a2c <ssd1306_PrintDashboardMenu+0x21c>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f240 729e 	movw	r2, #1950	; 0x79e
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	dc06      	bgt.n	8001a2c <ssd1306_PrintDashboardMenu+0x21c>
			strcpy(stringDirection, "IZQUIERDA");
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <ssd1306_PrintDashboardMenu+0x27c>)
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a26:	c303      	stmia	r3!, {r0, r1}
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	e00a      	b.n	8001a42 <ssd1306_PrintDashboardMenu+0x232>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <ssd1306_PrintDashboardMenu+0x280>)
 8001a32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a36:	6018      	str	r0, [r3, #0]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	8019      	strh	r1, [r3, #0]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	0c0a      	lsrs	r2, r1, #16
 8001a40:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001a42:	f7ff fbe7 	bl	8001214 <ssd1306_UpdateScreen>
}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000030 	.word	0x20000030
 8001a54:	08016d58 	.word	0x08016d58
 8001a58:	0801b990 	.word	0x0801b990
 8001a5c:	0801bd78 	.word	0x0801bd78
 8001a60:	0801ba58 	.word	0x0801ba58
 8001a64:	0801b8c8 	.word	0x0801b8c8
 8001a68:	0801bf08 	.word	0x0801bf08
 8001a6c:	0801b800 	.word	0x0801b800
 8001a70:	0801bcb0 	.word	0x0801bcb0
 8001a74:	0801bb20 	.word	0x0801bb20
 8001a78:	0801bfd0 	.word	0x0801bfd0
 8001a7c:	0801bbe8 	.word	0x0801bbe8
 8001a80:	0801c098 	.word	0x0801c098
 8001a84:	0801be40 	.word	0x0801be40
 8001a88:	08016db8 	.word	0x08016db8
 8001a8c:	08016dc0 	.word	0x08016dc0
 8001a90:	08016dcc 	.word	0x08016dcc

08001a94 <ssd1306_PrintEnergyMenu>:

void ssd1306_PrintEnergyMenu(int value, int indexMenu, int screen){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff fb8a 	bl	80011cc <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001ab8:	7ffb      	ldrb	r3, [r7, #31]
 8001aba:	4619      	mov	r1, r3
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7ff fcd3 	bl	8001468 <ssd1306_SetCursor>
	    ssd1306_WriteString("ENERGY", Font_11x18, White);
 8001ac2:	4a42      	ldr	r2, [pc, #264]	; (8001bcc <ssd1306_PrintEnergyMenu+0x138>)
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	ca06      	ldmia	r2, {r1, r2}
 8001ac8:	4841      	ldr	r0, [pc, #260]	; (8001bd0 <ssd1306_PrintEnergyMenu+0x13c>)
 8001aca:	f7ff fca7 	bl	800141c <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001ace:	7ffb      	ldrb	r3, [r7, #31]
 8001ad0:	3314      	adds	r3, #20
 8001ad2:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7ff fcc5 	bl	8001468 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <ssd1306_PrintEnergyMenu+0x5e>
	        ssd1306_WriteString("Power Supply", Font_7x10, Black);
 8001ae4:	4a3b      	ldr	r2, [pc, #236]	; (8001bd4 <ssd1306_PrintEnergyMenu+0x140>)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	ca06      	ldmia	r2, {r1, r2}
 8001aea:	483b      	ldr	r0, [pc, #236]	; (8001bd8 <ssd1306_PrintEnergyMenu+0x144>)
 8001aec:	f7ff fc96 	bl	800141c <ssd1306_WriteString>
 8001af0:	e005      	b.n	8001afe <ssd1306_PrintEnergyMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("Power Supply", Font_7x10, White);
 8001af2:	4a38      	ldr	r2, [pc, #224]	; (8001bd4 <ssd1306_PrintEnergyMenu+0x140>)
 8001af4:	2301      	movs	r3, #1
 8001af6:	ca06      	ldmia	r2, {r1, r2}
 8001af8:	4837      	ldr	r0, [pc, #220]	; (8001bd8 <ssd1306_PrintEnergyMenu+0x144>)
 8001afa:	f7ff fc8f 	bl	800141c <ssd1306_WriteString>
	    }
		y += 10;
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
 8001b00:	330a      	adds	r3, #10
 8001b02:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001b04:	7ffb      	ldrb	r3, [r7, #31]
 8001b06:	4619      	mov	r1, r3
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f7ff fcad 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <ssd1306_PrintEnergyMenu+0x8e>
	        ssd1306_WriteString("Status: 80%", Font_7x10, Black);
 8001b14:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <ssd1306_PrintEnergyMenu+0x140>)
 8001b16:	2300      	movs	r3, #0
 8001b18:	ca06      	ldmia	r2, {r1, r2}
 8001b1a:	4830      	ldr	r0, [pc, #192]	; (8001bdc <ssd1306_PrintEnergyMenu+0x148>)
 8001b1c:	f7ff fc7e 	bl	800141c <ssd1306_WriteString>
 8001b20:	e005      	b.n	8001b2e <ssd1306_PrintEnergyMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Status: 80%", Font_7x10, White);
 8001b22:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <ssd1306_PrintEnergyMenu+0x140>)
 8001b24:	2301      	movs	r3, #1
 8001b26:	ca06      	ldmia	r2, {r1, r2}
 8001b28:	482c      	ldr	r0, [pc, #176]	; (8001bdc <ssd1306_PrintEnergyMenu+0x148>)
 8001b2a:	f7ff fc77 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001b2e:	7ffb      	ldrb	r3, [r7, #31]
 8001b30:	330a      	adds	r3, #10
 8001b32:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
 8001b36:	4619      	mov	r1, r3
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7ff fc95 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d106      	bne.n	8001b52 <ssd1306_PrintEnergyMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001b44:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <ssd1306_PrintEnergyMenu+0x140>)
 8001b46:	2300      	movs	r3, #0
 8001b48:	ca06      	ldmia	r2, {r1, r2}
 8001b4a:	4825      	ldr	r0, [pc, #148]	; (8001be0 <ssd1306_PrintEnergyMenu+0x14c>)
 8001b4c:	f7ff fc66 	bl	800141c <ssd1306_WriteString>
 8001b50:	e005      	b.n	8001b5e <ssd1306_PrintEnergyMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <ssd1306_PrintEnergyMenu+0x140>)
 8001b54:	2301      	movs	r3, #1
 8001b56:	ca06      	ldmia	r2, {r1, r2}
 8001b58:	4821      	ldr	r0, [pc, #132]	; (8001be0 <ssd1306_PrintEnergyMenu+0x14c>)
 8001b5a:	f7ff fc5f 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	330a      	adds	r3, #10
 8001b62:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f640 3221 	movw	r2, #2849	; 0xb21
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	dd0c      	ble.n	8001b88 <ssd1306_PrintEnergyMenu+0xf4>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f640 3286 	movw	r2, #2950	; 0xb86
 8001b74:	4293      	cmp	r3, r2
 8001b76:	dc07      	bgt.n	8001b88 <ssd1306_PrintEnergyMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <ssd1306_PrintEnergyMenu+0x150>)
 8001b7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b82:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b86:	e01b      	b.n	8001bc0 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f240 7239 	movw	r2, #1849	; 0x739
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	dd0b      	ble.n	8001baa <ssd1306_PrintEnergyMenu+0x116>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f240 729e 	movw	r2, #1950	; 0x79e
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	dc06      	bgt.n	8001baa <ssd1306_PrintEnergyMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <ssd1306_PrintEnergyMenu+0x154>)
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ba4:	c303      	stmia	r3!, {r0, r1}
 8001ba6:	801a      	strh	r2, [r3, #0]
 8001ba8:	e00a      	b.n	8001bc0 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <ssd1306_PrintEnergyMenu+0x158>)
 8001bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bb4:	6018      	str	r0, [r3, #0]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	8019      	strh	r1, [r3, #0]
 8001bba:	3302      	adds	r3, #2
 8001bbc:	0c0a      	lsrs	r2, r1, #16
 8001bbe:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001bc0:	f7ff fb28 	bl	8001214 <ssd1306_UpdateScreen>
}
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000030 	.word	0x20000030
 8001bd0:	08016da4 	.word	0x08016da4
 8001bd4:	20000028 	.word	0x20000028
 8001bd8:	08016dd4 	.word	0x08016dd4
 8001bdc:	08016de4 	.word	0x08016de4
 8001be0:	08016df0 	.word	0x08016df0
 8001be4:	08016db8 	.word	0x08016db8
 8001be8:	08016dc0 	.word	0x08016dc0
 8001bec:	08016dcc 	.word	0x08016dcc

08001bf0 <ssd1306_PrintRFMenu>:

void ssd1306_PrintRFMenu(int value, int indexMenu, int screen){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
		 uint8_t y = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fadc 	bl	80011cc <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001c14:	7ffb      	ldrb	r3, [r7, #31]
 8001c16:	4619      	mov	r1, r3
 8001c18:	2023      	movs	r0, #35	; 0x23
 8001c1a:	f7ff fc25 	bl	8001468 <ssd1306_SetCursor>
	    ssd1306_WriteString("BROADCAST", Font_7x10, White);
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001c20:	2301      	movs	r3, #1
 8001c22:	ca06      	ldmia	r2, {r1, r2}
 8001c24:	4859      	ldr	r0, [pc, #356]	; (8001d8c <ssd1306_PrintRFMenu+0x19c>)
 8001c26:	f7ff fbf9 	bl	800141c <ssd1306_WriteString>
	    y += 10;
 8001c2a:	7ffb      	ldrb	r3, [r7, #31]
 8001c2c:	330a      	adds	r3, #10
 8001c2e:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001c30:	7ffb      	ldrb	r3, [r7, #31]
 8001c32:	4619      	mov	r1, r3
 8001c34:	2002      	movs	r0, #2
 8001c36:	f7ff fc17 	bl	8001468 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <ssd1306_PrintRFMenu+0x5e>
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, Black);
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001c42:	2300      	movs	r3, #0
 8001c44:	ca06      	ldmia	r2, {r1, r2}
 8001c46:	4852      	ldr	r0, [pc, #328]	; (8001d90 <ssd1306_PrintRFMenu+0x1a0>)
 8001c48:	f7ff fbe8 	bl	800141c <ssd1306_WriteString>
 8001c4c:	e005      	b.n	8001c5a <ssd1306_PrintRFMenu+0x6a>
			}
			else{
				ssd1306_WriteString("Channel: 102.9 MHz", Font_7x10, White);
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001c50:	2301      	movs	r3, #1
 8001c52:	ca06      	ldmia	r2, {r1, r2}
 8001c54:	484e      	ldr	r0, [pc, #312]	; (8001d90 <ssd1306_PrintRFMenu+0x1a0>)
 8001c56:	f7ff fbe1 	bl	800141c <ssd1306_WriteString>
			}
		y += 10;
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	330a      	adds	r3, #10
 8001c5e:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001c60:	7ffb      	ldrb	r3, [r7, #31]
 8001c62:	4619      	mov	r1, r3
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7ff fbff 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d106      	bne.n	8001c7e <ssd1306_PrintRFMenu+0x8e>
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, Black);
 8001c70:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001c72:	2300      	movs	r3, #0
 8001c74:	ca06      	ldmia	r2, {r1, r2}
 8001c76:	4847      	ldr	r0, [pc, #284]	; (8001d94 <ssd1306_PrintRFMenu+0x1a4>)
 8001c78:	f7ff fbd0 	bl	800141c <ssd1306_WriteString>
 8001c7c:	e005      	b.n	8001c8a <ssd1306_PrintRFMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Standard: DVB-T2", Font_7x10, White);
 8001c7e:	4a42      	ldr	r2, [pc, #264]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001c80:	2301      	movs	r3, #1
 8001c82:	ca06      	ldmia	r2, {r1, r2}
 8001c84:	4843      	ldr	r0, [pc, #268]	; (8001d94 <ssd1306_PrintRFMenu+0x1a4>)
 8001c86:	f7ff fbc9 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	330a      	adds	r3, #10
 8001c8e:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetCursor(2, y);
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	4619      	mov	r1, r3
 8001c94:	2002      	movs	r0, #2
 8001c96:	f7ff fbe7 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d106      	bne.n	8001cae <ssd1306_PrintRFMenu+0xbe>
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, Black);
 8001ca0:	4a39      	ldr	r2, [pc, #228]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	ca06      	ldmia	r2, {r1, r2}
 8001ca6:	483c      	ldr	r0, [pc, #240]	; (8001d98 <ssd1306_PrintRFMenu+0x1a8>)
 8001ca8:	f7ff fbb8 	bl	800141c <ssd1306_WriteString>
 8001cac:	e005      	b.n	8001cba <ssd1306_PrintRFMenu+0xca>
		}
		else{
	        ssd1306_WriteString("MER: 0.5 dB", Font_7x10, White);
 8001cae:	4a36      	ldr	r2, [pc, #216]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	ca06      	ldmia	r2, {r1, r2}
 8001cb4:	4838      	ldr	r0, [pc, #224]	; (8001d98 <ssd1306_PrintRFMenu+0x1a8>)
 8001cb6:	f7ff fbb1 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	330a      	adds	r3, #10
 8001cbe:	77fb      	strb	r3, [r7, #31]
		

		ssd1306_SetCursor(2, y);
 8001cc0:	7ffb      	ldrb	r3, [r7, #31]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f7ff fbcf 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==3){
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d106      	bne.n	8001cde <ssd1306_PrintRFMenu+0xee>
	        ssd1306_WriteString("BER: 0.5", Font_7x10, Black);
 8001cd0:	4a2d      	ldr	r2, [pc, #180]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	ca06      	ldmia	r2, {r1, r2}
 8001cd6:	4831      	ldr	r0, [pc, #196]	; (8001d9c <ssd1306_PrintRFMenu+0x1ac>)
 8001cd8:	f7ff fba0 	bl	800141c <ssd1306_WriteString>
 8001cdc:	e005      	b.n	8001cea <ssd1306_PrintRFMenu+0xfa>
		}
		else{
	        ssd1306_WriteString("BER: 0.5", Font_7x10, White);
 8001cde:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	ca06      	ldmia	r2, {r1, r2}
 8001ce4:	482d      	ldr	r0, [pc, #180]	; (8001d9c <ssd1306_PrintRFMenu+0x1ac>)
 8001ce6:	f7ff fb99 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	330a      	adds	r3, #10
 8001cee:	77fb      	strb	r3, [r7, #31]

		

		ssd1306_SetCursor(2, y);
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	f7ff fbb7 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==4){
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d106      	bne.n	8001d0e <ssd1306_PrintRFMenu+0x11e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001d02:	2300      	movs	r3, #0
 8001d04:	ca06      	ldmia	r2, {r1, r2}
 8001d06:	4826      	ldr	r0, [pc, #152]	; (8001da0 <ssd1306_PrintRFMenu+0x1b0>)
 8001d08:	f7ff fb88 	bl	800141c <ssd1306_WriteString>
 8001d0c:	e005      	b.n	8001d1a <ssd1306_PrintRFMenu+0x12a>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <ssd1306_PrintRFMenu+0x198>)
 8001d10:	2301      	movs	r3, #1
 8001d12:	ca06      	ldmia	r2, {r1, r2}
 8001d14:	4822      	ldr	r0, [pc, #136]	; (8001da0 <ssd1306_PrintRFMenu+0x1b0>)
 8001d16:	f7ff fb81 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001d1a:	7ffb      	ldrb	r3, [r7, #31]
 8001d1c:	330a      	adds	r3, #10
 8001d1e:	77fb      	strb	r3, [r7, #31]

		



		 if(value >= 2850 && value <= 2950){
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f640 3221 	movw	r2, #2849	; 0xb21
 8001d26:	4293      	cmp	r3, r2
 8001d28:	dd0c      	ble.n	8001d44 <ssd1306_PrintRFMenu+0x154>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f640 3286 	movw	r2, #2950	; 0xb86
 8001d30:	4293      	cmp	r3, r2
 8001d32:	dc07      	bgt.n	8001d44 <ssd1306_PrintRFMenu+0x154>
			strcpy(stringDirection, "DERECHA");
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <ssd1306_PrintRFMenu+0x1b4>)
 8001d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d42:	e01b      	b.n	8001d7c <ssd1306_PrintRFMenu+0x18c>
		}
		else if(value >= 1850 && value <= 1950){
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f240 7239 	movw	r2, #1849	; 0x739
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	dd0b      	ble.n	8001d66 <ssd1306_PrintRFMenu+0x176>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f240 729e 	movw	r2, #1950	; 0x79e
 8001d54:	4293      	cmp	r3, r2
 8001d56:	dc06      	bgt.n	8001d66 <ssd1306_PrintRFMenu+0x176>
			strcpy(stringDirection, "IZQUIERDA");
 8001d58:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <ssd1306_PrintRFMenu+0x1b8>)
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d60:	c303      	stmia	r3!, {r0, r1}
 8001d62:	801a      	strh	r2, [r3, #0]
 8001d64:	e00a      	b.n	8001d7c <ssd1306_PrintRFMenu+0x18c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <ssd1306_PrintRFMenu+0x1bc>)
 8001d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d70:	6018      	str	r0, [r3, #0]
 8001d72:	3304      	adds	r3, #4
 8001d74:	8019      	strh	r1, [r3, #0]
 8001d76:	3302      	adds	r3, #2
 8001d78:	0c0a      	lsrs	r2, r1, #16
 8001d7a:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001d7c:	f7ff fa4a 	bl	8001214 <ssd1306_UpdateScreen>
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000028 	.word	0x20000028
 8001d8c:	08016df8 	.word	0x08016df8
 8001d90:	08016e04 	.word	0x08016e04
 8001d94:	08016e18 	.word	0x08016e18
 8001d98:	08016e2c 	.word	0x08016e2c
 8001d9c:	08016e38 	.word	0x08016e38
 8001da0:	08016df0 	.word	0x08016df0
 8001da4:	08016db8 	.word	0x08016db8
 8001da8:	08016dc0 	.word	0x08016dc0
 8001dac:	08016dcc 	.word	0x08016dcc

08001db0 <ssd1306_PrintSerialMenu>:

void ssd1306_PrintSerialMenu(int value, int indexMenu, int screen){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
		 uint8_t y = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff f9fc 	bl	80011cc <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001dd4:	7ffb      	ldrb	r3, [r7, #31]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	2023      	movs	r0, #35	; 0x23
 8001dda:	f7ff fb45 	bl	8001468 <ssd1306_SetCursor>
	    ssd1306_WriteString("SERIAL", Font_7x10, White);
 8001dde:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001de0:	2301      	movs	r3, #1
 8001de2:	ca06      	ldmia	r2, {r1, r2}
 8001de4:	4859      	ldr	r0, [pc, #356]	; (8001f4c <ssd1306_PrintSerialMenu+0x19c>)
 8001de6:	f7ff fb19 	bl	800141c <ssd1306_WriteString>
	    y += 10;
 8001dea:	7ffb      	ldrb	r3, [r7, #31]
 8001dec:	330a      	adds	r3, #10
 8001dee:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001df0:	7ffb      	ldrb	r3, [r7, #31]
 8001df2:	4619      	mov	r1, r3
 8001df4:	2002      	movs	r0, #2
 8001df6:	f7ff fb37 	bl	8001468 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <ssd1306_PrintSerialMenu+0x5e>
				ssd1306_WriteString("Status: Connected", Font_7x10, Black);
 8001e00:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001e02:	2300      	movs	r3, #0
 8001e04:	ca06      	ldmia	r2, {r1, r2}
 8001e06:	4852      	ldr	r0, [pc, #328]	; (8001f50 <ssd1306_PrintSerialMenu+0x1a0>)
 8001e08:	f7ff fb08 	bl	800141c <ssd1306_WriteString>
 8001e0c:	e005      	b.n	8001e1a <ssd1306_PrintSerialMenu+0x6a>
			}
			else{
				ssd1306_WriteString("Status: Disconnected", Font_7x10, White);
 8001e0e:	4a4e      	ldr	r2, [pc, #312]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001e10:	2301      	movs	r3, #1
 8001e12:	ca06      	ldmia	r2, {r1, r2}
 8001e14:	484f      	ldr	r0, [pc, #316]	; (8001f54 <ssd1306_PrintSerialMenu+0x1a4>)
 8001e16:	f7ff fb01 	bl	800141c <ssd1306_WriteString>
			}
		y += 10;
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	330a      	adds	r3, #10
 8001e1e:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
 8001e22:	4619      	mov	r1, r3
 8001e24:	2002      	movs	r0, #2
 8001e26:	f7ff fb1f 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <ssd1306_PrintSerialMenu+0x8e>
	        ssd1306_WriteString("Command Test 1", Font_7x10, Black);
 8001e30:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001e32:	2300      	movs	r3, #0
 8001e34:	ca06      	ldmia	r2, {r1, r2}
 8001e36:	4848      	ldr	r0, [pc, #288]	; (8001f58 <ssd1306_PrintSerialMenu+0x1a8>)
 8001e38:	f7ff faf0 	bl	800141c <ssd1306_WriteString>
 8001e3c:	e005      	b.n	8001e4a <ssd1306_PrintSerialMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Commando Test 1", Font_7x10, White);
 8001e3e:	4a42      	ldr	r2, [pc, #264]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001e40:	2301      	movs	r3, #1
 8001e42:	ca06      	ldmia	r2, {r1, r2}
 8001e44:	4845      	ldr	r0, [pc, #276]	; (8001f5c <ssd1306_PrintSerialMenu+0x1ac>)
 8001e46:	f7ff fae9 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001e4a:	7ffb      	ldrb	r3, [r7, #31]
 8001e4c:	330a      	adds	r3, #10
 8001e4e:	77fb      	strb	r3, [r7, #31]

		ssd1306_SetCursor(2, y);
 8001e50:	7ffb      	ldrb	r3, [r7, #31]
 8001e52:	4619      	mov	r1, r3
 8001e54:	2002      	movs	r0, #2
 8001e56:	f7ff fb07 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d106      	bne.n	8001e6e <ssd1306_PrintSerialMenu+0xbe>
	        ssd1306_WriteString("Command Test 2", Font_7x10, Black);
 8001e60:	4a39      	ldr	r2, [pc, #228]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001e62:	2300      	movs	r3, #0
 8001e64:	ca06      	ldmia	r2, {r1, r2}
 8001e66:	483e      	ldr	r0, [pc, #248]	; (8001f60 <ssd1306_PrintSerialMenu+0x1b0>)
 8001e68:	f7ff fad8 	bl	800141c <ssd1306_WriteString>
 8001e6c:	e005      	b.n	8001e7a <ssd1306_PrintSerialMenu+0xca>
		}
		else{
	        ssd1306_WriteString("Commando Test 2", Font_7x10, White);
 8001e6e:	4a36      	ldr	r2, [pc, #216]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001e70:	2301      	movs	r3, #1
 8001e72:	ca06      	ldmia	r2, {r1, r2}
 8001e74:	483b      	ldr	r0, [pc, #236]	; (8001f64 <ssd1306_PrintSerialMenu+0x1b4>)
 8001e76:	f7ff fad1 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	330a      	adds	r3, #10
 8001e7e:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001e80:	7ffb      	ldrb	r3, [r7, #31]
 8001e82:	4619      	mov	r1, r3
 8001e84:	2002      	movs	r0, #2
 8001e86:	f7ff faef 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==3){
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d106      	bne.n	8001e9e <ssd1306_PrintSerialMenu+0xee>
	        ssd1306_WriteString("Current: ", Font_7x10, Black);
 8001e90:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001e92:	2300      	movs	r3, #0
 8001e94:	ca06      	ldmia	r2, {r1, r2}
 8001e96:	4834      	ldr	r0, [pc, #208]	; (8001f68 <ssd1306_PrintSerialMenu+0x1b8>)
 8001e98:	f7ff fac0 	bl	800141c <ssd1306_WriteString>
 8001e9c:	e005      	b.n	8001eaa <ssd1306_PrintSerialMenu+0xfa>
		}
		else{
	        ssd1306_WriteString("Current: ", Font_7x10, White);
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	ca06      	ldmia	r2, {r1, r2}
 8001ea4:	4830      	ldr	r0, [pc, #192]	; (8001f68 <ssd1306_PrintSerialMenu+0x1b8>)
 8001ea6:	f7ff fab9 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	330a      	adds	r3, #10
 8001eae:	77fb      	strb	r3, [r7, #31]



		ssd1306_SetCursor(2, y);
 8001eb0:	7ffb      	ldrb	r3, [r7, #31]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f7ff fad7 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==4){
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d106      	bne.n	8001ece <ssd1306_PrintSerialMenu+0x11e>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001ec0:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	ca06      	ldmia	r2, {r1, r2}
 8001ec6:	4829      	ldr	r0, [pc, #164]	; (8001f6c <ssd1306_PrintSerialMenu+0x1bc>)
 8001ec8:	f7ff faa8 	bl	800141c <ssd1306_WriteString>
 8001ecc:	e005      	b.n	8001eda <ssd1306_PrintSerialMenu+0x12a>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001ece:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <ssd1306_PrintSerialMenu+0x198>)
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	ca06      	ldmia	r2, {r1, r2}
 8001ed4:	4825      	ldr	r0, [pc, #148]	; (8001f6c <ssd1306_PrintSerialMenu+0x1bc>)
 8001ed6:	f7ff faa1 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	330a      	adds	r3, #10
 8001ede:	77fb      	strb	r3, [r7, #31]

		 if(value >= 2850 && value <= 2950){
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f640 3221 	movw	r2, #2849	; 0xb21
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	dd0c      	ble.n	8001f04 <ssd1306_PrintSerialMenu+0x154>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f640 3286 	movw	r2, #2950	; 0xb86
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	dc07      	bgt.n	8001f04 <ssd1306_PrintSerialMenu+0x154>
			strcpy(stringDirection, "DERECHA");
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <ssd1306_PrintSerialMenu+0x1c0>)
 8001efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001efe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f02:	e01b      	b.n	8001f3c <ssd1306_PrintSerialMenu+0x18c>
		}
		else if(value >= 1850 && value <= 1950){
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f240 7239 	movw	r2, #1849	; 0x739
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	dd0b      	ble.n	8001f26 <ssd1306_PrintSerialMenu+0x176>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f240 729e 	movw	r2, #1950	; 0x79e
 8001f14:	4293      	cmp	r3, r2
 8001f16:	dc06      	bgt.n	8001f26 <ssd1306_PrintSerialMenu+0x176>
			strcpy(stringDirection, "IZQUIERDA");
 8001f18:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <ssd1306_PrintSerialMenu+0x1c4>)
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f20:	c303      	stmia	r3!, {r0, r1}
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	e00a      	b.n	8001f3c <ssd1306_PrintSerialMenu+0x18c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <ssd1306_PrintSerialMenu+0x1c8>)
 8001f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f30:	6018      	str	r0, [r3, #0]
 8001f32:	3304      	adds	r3, #4
 8001f34:	8019      	strh	r1, [r3, #0]
 8001f36:	3302      	adds	r3, #2
 8001f38:	0c0a      	lsrs	r2, r1, #16
 8001f3a:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001f3c:	f7ff f96a 	bl	8001214 <ssd1306_UpdateScreen>
}
 8001f40:	bf00      	nop
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000028 	.word	0x20000028
 8001f4c:	08016e44 	.word	0x08016e44
 8001f50:	08016e4c 	.word	0x08016e4c
 8001f54:	08016e60 	.word	0x08016e60
 8001f58:	08016e78 	.word	0x08016e78
 8001f5c:	08016e88 	.word	0x08016e88
 8001f60:	08016e98 	.word	0x08016e98
 8001f64:	08016ea8 	.word	0x08016ea8
 8001f68:	08016eb8 	.word	0x08016eb8
 8001f6c:	08016df0 	.word	0x08016df0
 8001f70:	08016db8 	.word	0x08016db8
 8001f74:	08016dc0 	.word	0x08016dc0
 8001f78:	08016dcc 	.word	0x08016dcc

08001f7c <ssd1306_PrintCloudMenu>:

void ssd1306_PrintCloudMenu(int value, int indexMenu, int screen, char  IPv4, char  Gateway){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	70fb      	strb	r3, [r7, #3]
		 uint8_t y = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	f107 0318 	add.w	r3, r7, #24
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff f915 	bl	80011cc <ssd1306_Fill>

	    ssd1306_SetCursor(35, y);
 8001fa2:	7ffb      	ldrb	r3, [r7, #31]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2023      	movs	r0, #35	; 0x23
 8001fa8:	f7ff fa5e 	bl	8001468 <ssd1306_SetCursor>
	    ssd1306_WriteString("CLOUD", Font_7x10, White);
 8001fac:	4a61      	ldr	r2, [pc, #388]	; (8002134 <ssd1306_PrintCloudMenu+0x1b8>)
 8001fae:	2301      	movs	r3, #1
 8001fb0:	ca06      	ldmia	r2, {r1, r2}
 8001fb2:	4861      	ldr	r0, [pc, #388]	; (8002138 <ssd1306_PrintCloudMenu+0x1bc>)
 8001fb4:	f7ff fa32 	bl	800141c <ssd1306_WriteString>
	    y += 10;
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
 8001fba:	330a      	adds	r3, #10
 8001fbc:	77fb      	strb	r3, [r7, #31]


		ssd1306_SetCursor(2, y);
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2002      	movs	r0, #2
 8001fc4:	f7ff fa50 	bl	8001468 <ssd1306_SetCursor>
			if(indexMenu==0){
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d115      	bne.n	8001ffa <ssd1306_PrintCloudMenu+0x7e>
				ssd1306_WriteString("IPv4:", Font_7x10, Black);
 8001fce:	4a59      	ldr	r2, [pc, #356]	; (8002134 <ssd1306_PrintCloudMenu+0x1b8>)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	ca06      	ldmia	r2, {r1, r2}
 8001fd4:	4859      	ldr	r0, [pc, #356]	; (800213c <ssd1306_PrintCloudMenu+0x1c0>)
 8001fd6:	f7ff fa21 	bl	800141c <ssd1306_WriteString>
				y += 10;
 8001fda:	7ffb      	ldrb	r3, [r7, #31]
 8001fdc:	330a      	adds	r3, #10
 8001fde:	77fb      	strb	r3, [r7, #31]
				ssd1306_SetCursor(2, y);
 8001fe0:	7ffb      	ldrb	r3, [r7, #31]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f7ff fa3f 	bl	8001468 <ssd1306_SetCursor>
				ssd1306_WriteString(IPv4, Font_6x8, Black);
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	4618      	mov	r0, r3
 8001fee:	4a54      	ldr	r2, [pc, #336]	; (8002140 <ssd1306_PrintCloudMenu+0x1c4>)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	ca06      	ldmia	r2, {r1, r2}
 8001ff4:	f7ff fa12 	bl	800141c <ssd1306_WriteString>
 8001ff8:	e014      	b.n	8002024 <ssd1306_PrintCloudMenu+0xa8>

			}
			else{
				ssd1306_WriteString("IPV4:", Font_7x10, White);
 8001ffa:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <ssd1306_PrintCloudMenu+0x1b8>)
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	ca06      	ldmia	r2, {r1, r2}
 8002000:	4850      	ldr	r0, [pc, #320]	; (8002144 <ssd1306_PrintCloudMenu+0x1c8>)
 8002002:	f7ff fa0b 	bl	800141c <ssd1306_WriteString>
				y += 10;
 8002006:	7ffb      	ldrb	r3, [r7, #31]
 8002008:	330a      	adds	r3, #10
 800200a:	77fb      	strb	r3, [r7, #31]
				ssd1306_SetCursor(2, y);
 800200c:	7ffb      	ldrb	r3, [r7, #31]
 800200e:	4619      	mov	r1, r3
 8002010:	2002      	movs	r0, #2
 8002012:	f7ff fa29 	bl	8001468 <ssd1306_SetCursor>
				ssd1306_WriteString(IPv4, Font_6x8, White);
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	4618      	mov	r0, r3
 800201a:	4a49      	ldr	r2, [pc, #292]	; (8002140 <ssd1306_PrintCloudMenu+0x1c4>)
 800201c:	2301      	movs	r3, #1
 800201e:	ca06      	ldmia	r2, {r1, r2}
 8002020:	f7ff f9fc 	bl	800141c <ssd1306_WriteString>
			}
		y += 10;
 8002024:	7ffb      	ldrb	r3, [r7, #31]
 8002026:	330a      	adds	r3, #10
 8002028:	77fb      	strb	r3, [r7, #31]
		
		ssd1306_SetCursor(2, y);
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	4619      	mov	r1, r3
 800202e:	2002      	movs	r0, #2
 8002030:	f7ff fa1a 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==1){
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d116      	bne.n	8002068 <ssd1306_PrintCloudMenu+0xec>
			ssd1306_WriteString("Gateway:", Font_7x10, Black);
 800203a:	4a3e      	ldr	r2, [pc, #248]	; (8002134 <ssd1306_PrintCloudMenu+0x1b8>)
 800203c:	2300      	movs	r3, #0
 800203e:	ca06      	ldmia	r2, {r1, r2}
 8002040:	4841      	ldr	r0, [pc, #260]	; (8002148 <ssd1306_PrintCloudMenu+0x1cc>)
 8002042:	f7ff f9eb 	bl	800141c <ssd1306_WriteString>
			y += 10;
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	330a      	adds	r3, #10
 800204a:	77fb      	strb	r3, [r7, #31]
			ssd1306_SetCursor(2, y);
 800204c:	7ffb      	ldrb	r3, [r7, #31]
 800204e:	4619      	mov	r1, r3
 8002050:	2002      	movs	r0, #2
 8002052:	f7ff fa09 	bl	8001468 <ssd1306_SetCursor>
			ssd1306_WriteString(Gateway, Font_6x8, Black);	
 8002056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800205a:	4618      	mov	r0, r3
 800205c:	4a38      	ldr	r2, [pc, #224]	; (8002140 <ssd1306_PrintCloudMenu+0x1c4>)
 800205e:	2300      	movs	r3, #0
 8002060:	ca06      	ldmia	r2, {r1, r2}
 8002062:	f7ff f9db 	bl	800141c <ssd1306_WriteString>
 8002066:	e015      	b.n	8002094 <ssd1306_PrintCloudMenu+0x118>
		}
		else{
		ssd1306_WriteString("Gateway:", Font_7x10, White);
 8002068:	4a32      	ldr	r2, [pc, #200]	; (8002134 <ssd1306_PrintCloudMenu+0x1b8>)
 800206a:	2301      	movs	r3, #1
 800206c:	ca06      	ldmia	r2, {r1, r2}
 800206e:	4836      	ldr	r0, [pc, #216]	; (8002148 <ssd1306_PrintCloudMenu+0x1cc>)
 8002070:	f7ff f9d4 	bl	800141c <ssd1306_WriteString>
			y += 10;
 8002074:	7ffb      	ldrb	r3, [r7, #31]
 8002076:	330a      	adds	r3, #10
 8002078:	77fb      	strb	r3, [r7, #31]
			ssd1306_SetCursor(2, y);
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	4619      	mov	r1, r3
 800207e:	2002      	movs	r0, #2
 8002080:	f7ff f9f2 	bl	8001468 <ssd1306_SetCursor>
			ssd1306_WriteString(Gateway, Font_6x8, White);
 8002084:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002088:	4618      	mov	r0, r3
 800208a:	4a2d      	ldr	r2, [pc, #180]	; (8002140 <ssd1306_PrintCloudMenu+0x1c4>)
 800208c:	2301      	movs	r3, #1
 800208e:	ca06      	ldmia	r2, {r1, r2}
 8002090:	f7ff f9c4 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8002094:	7ffb      	ldrb	r3, [r7, #31]
 8002096:	330a      	adds	r3, #10
 8002098:	77fb      	strb	r3, [r7, #31]
		}
		y += 10; */

		

		ssd1306_SetCursor(2, y);
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	4619      	mov	r1, r3
 800209e:	2002      	movs	r0, #2
 80020a0:	f7ff f9e2 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==2){
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d106      	bne.n	80020b8 <ssd1306_PrintCloudMenu+0x13c>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 80020aa:	4a22      	ldr	r2, [pc, #136]	; (8002134 <ssd1306_PrintCloudMenu+0x1b8>)
 80020ac:	2300      	movs	r3, #0
 80020ae:	ca06      	ldmia	r2, {r1, r2}
 80020b0:	4826      	ldr	r0, [pc, #152]	; (800214c <ssd1306_PrintCloudMenu+0x1d0>)
 80020b2:	f7ff f9b3 	bl	800141c <ssd1306_WriteString>
 80020b6:	e005      	b.n	80020c4 <ssd1306_PrintCloudMenu+0x148>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 80020b8:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <ssd1306_PrintCloudMenu+0x1b8>)
 80020ba:	2301      	movs	r3, #1
 80020bc:	ca06      	ldmia	r2, {r1, r2}
 80020be:	4823      	ldr	r0, [pc, #140]	; (800214c <ssd1306_PrintCloudMenu+0x1d0>)
 80020c0:	f7ff f9ac 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
 80020c6:	330a      	adds	r3, #10
 80020c8:	77fb      	strb	r3, [r7, #31]


		 if(value >= 2850 && value <= 2950){
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f640 3221 	movw	r2, #2849	; 0xb21
 80020d0:	4293      	cmp	r3, r2
 80020d2:	dd0c      	ble.n	80020ee <ssd1306_PrintCloudMenu+0x172>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f640 3286 	movw	r2, #2950	; 0xb86
 80020da:	4293      	cmp	r3, r2
 80020dc:	dc07      	bgt.n	80020ee <ssd1306_PrintCloudMenu+0x172>
			strcpy(stringDirection, "DERECHA");
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <ssd1306_PrintCloudMenu+0x1d4>)
 80020e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80020ec:	e01b      	b.n	8002126 <ssd1306_PrintCloudMenu+0x1aa>
		}
		else if(value >= 1850 && value <= 1950){
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f240 7239 	movw	r2, #1849	; 0x739
 80020f4:	4293      	cmp	r3, r2
 80020f6:	dd0b      	ble.n	8002110 <ssd1306_PrintCloudMenu+0x194>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f240 729e 	movw	r2, #1950	; 0x79e
 80020fe:	4293      	cmp	r3, r2
 8002100:	dc06      	bgt.n	8002110 <ssd1306_PrintCloudMenu+0x194>
			strcpy(stringDirection, "IZQUIERDA");
 8002102:	4a14      	ldr	r2, [pc, #80]	; (8002154 <ssd1306_PrintCloudMenu+0x1d8>)
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	ca07      	ldmia	r2, {r0, r1, r2}
 800210a:	c303      	stmia	r3!, {r0, r1}
 800210c:	801a      	strh	r2, [r3, #0]
 800210e:	e00a      	b.n	8002126 <ssd1306_PrintCloudMenu+0x1aa>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4a10      	ldr	r2, [pc, #64]	; (8002158 <ssd1306_PrintCloudMenu+0x1dc>)
 8002116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800211a:	6018      	str	r0, [r3, #0]
 800211c:	3304      	adds	r3, #4
 800211e:	8019      	strh	r1, [r3, #0]
 8002120:	3302      	adds	r3, #2
 8002122:	0c0a      	lsrs	r2, r1, #16
 8002124:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8002126:	f7ff f875 	bl	8001214 <ssd1306_UpdateScreen>
}
 800212a:	bf00      	nop
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000028 	.word	0x20000028
 8002138:	08016ec4 	.word	0x08016ec4
 800213c:	08016ecc 	.word	0x08016ecc
 8002140:	20000020 	.word	0x20000020
 8002144:	08016ed4 	.word	0x08016ed4
 8002148:	08016edc 	.word	0x08016edc
 800214c:	08016df0 	.word	0x08016df0
 8002150:	08016db8 	.word	0x08016db8
 8002154:	08016dc0 	.word	0x08016dc0
 8002158:	08016dcc 	.word	0x08016dcc

0800215c <ssd1306_PrintSettingsMenu>:

void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800217a:	2000      	movs	r0, #0
 800217c:	f7ff f826 	bl	80011cc <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	4619      	mov	r1, r3
 8002184:	2002      	movs	r0, #2
 8002186:	f7ff f96f 	bl	8001468 <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 800218a:	4a42      	ldr	r2, [pc, #264]	; (8002294 <ssd1306_PrintSettingsMenu+0x138>)
 800218c:	2301      	movs	r3, #1
 800218e:	ca06      	ldmia	r2, {r1, r2}
 8002190:	4841      	ldr	r0, [pc, #260]	; (8002298 <ssd1306_PrintSettingsMenu+0x13c>)
 8002192:	f7ff f943 	bl	800141c <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8002196:	7ffb      	ldrb	r3, [r7, #31]
 8002198:	3314      	adds	r3, #20
 800219a:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800219c:	7ffb      	ldrb	r3, [r7, #31]
 800219e:	4619      	mov	r1, r3
 80021a0:	2002      	movs	r0, #2
 80021a2:	f7ff f961 	bl	8001468 <ssd1306_SetCursor>
	    if(indexMenu==0){
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <ssd1306_PrintSettingsMenu+0x5e>
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, Black);
 80021ac:	4a3b      	ldr	r2, [pc, #236]	; (800229c <ssd1306_PrintSettingsMenu+0x140>)
 80021ae:	2300      	movs	r3, #0
 80021b0:	ca06      	ldmia	r2, {r1, r2}
 80021b2:	483b      	ldr	r0, [pc, #236]	; (80022a0 <ssd1306_PrintSettingsMenu+0x144>)
 80021b4:	f7ff f932 	bl	800141c <ssd1306_WriteString>
 80021b8:	e005      	b.n	80021c6 <ssd1306_PrintSettingsMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, White);
 80021ba:	4a38      	ldr	r2, [pc, #224]	; (800229c <ssd1306_PrintSettingsMenu+0x140>)
 80021bc:	2301      	movs	r3, #1
 80021be:	ca06      	ldmia	r2, {r1, r2}
 80021c0:	4837      	ldr	r0, [pc, #220]	; (80022a0 <ssd1306_PrintSettingsMenu+0x144>)
 80021c2:	f7ff f92b 	bl	800141c <ssd1306_WriteString>
	    }
		y += 10;
 80021c6:	7ffb      	ldrb	r3, [r7, #31]
 80021c8:	330a      	adds	r3, #10
 80021ca:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80021cc:	7ffb      	ldrb	r3, [r7, #31]
 80021ce:	4619      	mov	r1, r3
 80021d0:	2002      	movs	r0, #2
 80021d2:	f7ff f949 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==1){
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <ssd1306_PrintSettingsMenu+0x8e>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <ssd1306_PrintSettingsMenu+0x140>)
 80021de:	2300      	movs	r3, #0
 80021e0:	ca06      	ldmia	r2, {r1, r2}
 80021e2:	4830      	ldr	r0, [pc, #192]	; (80022a4 <ssd1306_PrintSettingsMenu+0x148>)
 80021e4:	f7ff f91a 	bl	800141c <ssd1306_WriteString>
 80021e8:	e005      	b.n	80021f6 <ssd1306_PrintSettingsMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 80021ea:	4a2c      	ldr	r2, [pc, #176]	; (800229c <ssd1306_PrintSettingsMenu+0x140>)
 80021ec:	2301      	movs	r3, #1
 80021ee:	ca06      	ldmia	r2, {r1, r2}
 80021f0:	482c      	ldr	r0, [pc, #176]	; (80022a4 <ssd1306_PrintSettingsMenu+0x148>)
 80021f2:	f7ff f913 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	330a      	adds	r3, #10
 80021fa:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80021fc:	7ffb      	ldrb	r3, [r7, #31]
 80021fe:	4619      	mov	r1, r3
 8002200:	2002      	movs	r0, #2
 8002202:	f7ff f931 	bl	8001468 <ssd1306_SetCursor>
		if(indexMenu==2){
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d106      	bne.n	800221a <ssd1306_PrintSettingsMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <ssd1306_PrintSettingsMenu+0x140>)
 800220e:	2300      	movs	r3, #0
 8002210:	ca06      	ldmia	r2, {r1, r2}
 8002212:	4825      	ldr	r0, [pc, #148]	; (80022a8 <ssd1306_PrintSettingsMenu+0x14c>)
 8002214:	f7ff f902 	bl	800141c <ssd1306_WriteString>
 8002218:	e005      	b.n	8002226 <ssd1306_PrintSettingsMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 800221a:	4a20      	ldr	r2, [pc, #128]	; (800229c <ssd1306_PrintSettingsMenu+0x140>)
 800221c:	2301      	movs	r3, #1
 800221e:	ca06      	ldmia	r2, {r1, r2}
 8002220:	4821      	ldr	r0, [pc, #132]	; (80022a8 <ssd1306_PrintSettingsMenu+0x14c>)
 8002222:	f7ff f8fb 	bl	800141c <ssd1306_WriteString>
		}
		y += 10;
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	330a      	adds	r3, #10
 800222a:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f640 3221 	movw	r2, #2849	; 0xb21
 8002232:	4293      	cmp	r3, r2
 8002234:	dd0c      	ble.n	8002250 <ssd1306_PrintSettingsMenu+0xf4>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f640 3286 	movw	r2, #2950	; 0xb86
 800223c:	4293      	cmp	r3, r2
 800223e:	dc07      	bgt.n	8002250 <ssd1306_PrintSettingsMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4a19      	ldr	r2, [pc, #100]	; (80022ac <ssd1306_PrintSettingsMenu+0x150>)
 8002246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800224a:	e883 0003 	stmia.w	r3, {r0, r1}
 800224e:	e01b      	b.n	8002288 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f240 7239 	movw	r2, #1849	; 0x739
 8002256:	4293      	cmp	r3, r2
 8002258:	dd0b      	ble.n	8002272 <ssd1306_PrintSettingsMenu+0x116>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f240 729e 	movw	r2, #1950	; 0x79e
 8002260:	4293      	cmp	r3, r2
 8002262:	dc06      	bgt.n	8002272 <ssd1306_PrintSettingsMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8002264:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <ssd1306_PrintSettingsMenu+0x154>)
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	ca07      	ldmia	r2, {r0, r1, r2}
 800226c:	c303      	stmia	r3!, {r0, r1}
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	e00a      	b.n	8002288 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <ssd1306_PrintSettingsMenu+0x158>)
 8002278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227c:	6018      	str	r0, [r3, #0]
 800227e:	3304      	adds	r3, #4
 8002280:	8019      	strh	r1, [r3, #0]
 8002282:	3302      	adds	r3, #2
 8002284:	0c0a      	lsrs	r2, r1, #16
 8002286:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8002288:	f7fe ffc4 	bl	8001214 <ssd1306_UpdateScreen>
}
 800228c:	bf00      	nop
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000030 	.word	0x20000030
 8002298:	08016dac 	.word	0x08016dac
 800229c:	20000028 	.word	0x20000028
 80022a0:	08016ee8 	.word	0x08016ee8
 80022a4:	08016ef8 	.word	0x08016ef8
 80022a8:	08016df0 	.word	0x08016df0
 80022ac:	08016db8 	.word	0x08016db8
 80022b0:	08016dc0 	.word	0x08016dc0
 80022b4:	08016dcc 	.word	0x08016dcc

080022b8 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen, char IPv4, char Gateway) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	70fb      	strb	r3, [r7, #3]
	if (screen==1){
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <ssd1306_DisplayAnalogValue+0x20>
			   ssd1306_PrintDashboardMenu(value, indexMenu, screen);
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff fa9d 	bl	8001810 <ssd1306_PrintDashboardMenu>
 80022d6:	e035      	b.n	8002344 <ssd1306_DisplayAnalogValue+0x8c>
		}
	else if (screen==2){
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d105      	bne.n	80022ea <ssd1306_DisplayAnalogValue+0x32>
		   ssd1306_PrintEnergyMenu(value, indexMenu, screen);
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff fbd6 	bl	8001a94 <ssd1306_PrintEnergyMenu>
 80022e8:	e02c      	b.n	8002344 <ssd1306_DisplayAnalogValue+0x8c>
	}
	else if (screen==3){
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d105      	bne.n	80022fc <ssd1306_DisplayAnalogValue+0x44>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff ff31 	bl	800215c <ssd1306_PrintSettingsMenu>
 80022fa:	e023      	b.n	8002344 <ssd1306_DisplayAnalogValue+0x8c>
	}else if (screen==4){
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d105      	bne.n	800230e <ssd1306_DisplayAnalogValue+0x56>
		   ssd1306_PrintRFMenu(value, indexMenu, screen);
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff fc72 	bl	8001bf0 <ssd1306_PrintRFMenu>
 800230c:	e01a      	b.n	8002344 <ssd1306_DisplayAnalogValue+0x8c>
	}
	else if (screen==5){
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d109      	bne.n	8002328 <ssd1306_DisplayAnalogValue+0x70>
		   ssd1306_PrintCloudMenu(value, indexMenu, screen, IPv4, Gateway);
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	7e3b      	ldrb	r3, [r7, #24]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff fe2b 	bl	8001f7c <ssd1306_PrintCloudMenu>
 8002326:	e00d      	b.n	8002344 <ssd1306_DisplayAnalogValue+0x8c>
	}
	else if (screen==6){
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b06      	cmp	r3, #6
 800232c:	d105      	bne.n	800233a <ssd1306_DisplayAnalogValue+0x82>
		  ssd1306_PrintSerialMenu(value, indexMenu, screen);
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff fd3c 	bl	8001db0 <ssd1306_PrintSerialMenu>
 8002338:	e004      	b.n	8002344 <ssd1306_DisplayAnalogValue+0x8c>
		}
	else{
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff f988 	bl	8001654 <ssd1306_PrintPrincipalMenu>
	}
    HAL_Delay(50);
 8002344:	2032      	movs	r0, #50	; 0x32
 8002346:	f000 fdb7 	bl	8002eb8 <HAL_Delay>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe ff36 	bl	80011cc <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 8002360:	2301      	movs	r3, #1
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2348      	movs	r3, #72	; 0x48
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 800236c:	2100      	movs	r1, #0
 800236e:	2020      	movs	r0, #32
 8002370:	f7ff f892 	bl	8001498 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 8002374:	f7fe ff4e 	bl	8001214 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8002378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800237c:	f000 fd9c 	bl	8002eb8 <HAL_Delay>

}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	0801c160 	.word	0x0801c160

0800238c <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002390:	f7fe feb2 	bl	80010f8 <ssd1306_Init>
    ssd1306_TestFonts1();
 8002394:	f7ff f90c 	bl	80015b0 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002398:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800239c:	f000 fd8c 	bl	8002eb8 <HAL_Delay>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80023a8:	f7fe fea6 	bl	80010f8 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 80023ac:	f7ff ffd2 	bl	8002354 <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 80023b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023b4:	f000 fd80 	bl	8002eb8 <HAL_Delay>
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_MspInit+0x44>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <HAL_MspInit+0x44>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_MspInit+0x44>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_MspInit+0x44>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <HAL_MspInit+0x44>)
 80023e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e4:	6453      	str	r3, [r2, #68]	; 0x44
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_MspInit+0x44>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800

08002404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	; 0x30
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <HAL_ADC_MspInit+0xc8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d124      	bne.n	8002470 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002456:	2310      	movs	r3, #16
 8002458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245a:	2303      	movs	r3, #3
 800245c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4619      	mov	r1, r3
 8002468:	481a      	ldr	r0, [pc, #104]	; (80024d4 <HAL_ADC_MspInit+0xd0>)
 800246a:	f003 f823 	bl	80054b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800246e:	e028      	b.n	80024c2 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC3)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_ADC_MspInit+0xd4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d123      	bne.n	80024c2 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 8002498:	f043 0320 	orr.w	r3, r3, #32
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_ADC_MspInit+0xcc>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024aa:	2320      	movs	r3, #32
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ae:	2303      	movs	r3, #3
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4619      	mov	r1, r3
 80024bc:	4807      	ldr	r0, [pc, #28]	; (80024dc <HAL_ADC_MspInit+0xd8>)
 80024be:	f002 fff9 	bl	80054b4 <HAL_GPIO_Init>
}
 80024c2:	bf00      	nop
 80024c4:	3730      	adds	r7, #48	; 0x30
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40012000 	.word	0x40012000
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40012200 	.word	0x40012200
 80024dc:	40021400 	.word	0x40021400

080024e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b0aa      	sub	sp, #168	; 0xa8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	2284      	movs	r2, #132	; 0x84
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f013 fa05 	bl	8015910 <memset>
  if(hi2c->Instance==I2C2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a21      	ldr	r2, [pc, #132]	; (8002590 <HAL_I2C_MspInit+0xb0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d13b      	bne.n	8002588 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002514:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002516:	2300      	movs	r3, #0
 8002518:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4618      	mov	r0, r3
 8002520:	f004 fc32 	bl	8006d88 <HAL_RCCEx_PeriphCLKConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800252a:	f7fe fda6 	bl	800107a <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800252e:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_I2C_MspInit+0xb4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a18      	ldr	r2, [pc, #96]	; (8002594 <HAL_I2C_MspInit+0xb4>)
 8002534:	f043 0320 	orr.w	r3, r3, #32
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_I2C_MspInit+0xb4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002546:	2303      	movs	r3, #3
 8002548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254c:	2312      	movs	r3, #18
 800254e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800255e:	2304      	movs	r3, #4
 8002560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002564:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002568:	4619      	mov	r1, r3
 800256a:	480b      	ldr	r0, [pc, #44]	; (8002598 <HAL_I2C_MspInit+0xb8>)
 800256c:	f002 ffa2 	bl	80054b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_I2C_MspInit+0xb4>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_I2C_MspInit+0xb4>)
 8002576:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_I2C_MspInit+0xb4>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002588:	bf00      	nop
 800258a:	37a8      	adds	r7, #168	; 0xa8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40005800 	.word	0x40005800
 8002594:	40023800 	.word	0x40023800
 8002598:	40021400 	.word	0x40021400

0800259c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0ac      	sub	sp, #176	; 0xb0
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b4:	f107 0318 	add.w	r3, r7, #24
 80025b8:	2284      	movs	r2, #132	; 0x84
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f013 f9a7 	bl	8015910 <memset>
  if(huart->Instance==UART7)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a75      	ldr	r2, [pc, #468]	; (800279c <HAL_UART_MspInit+0x200>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	f040 80a1 	bne.w	8002710 <HAL_UART_MspInit+0x174>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80025ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d8:	f107 0318 	add.w	r3, r7, #24
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 fbd3 	bl	8006d88 <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80025e8:	f7fe fd47 	bl	800107a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80025ec:	4b6c      	ldr	r3, [pc, #432]	; (80027a0 <HAL_UART_MspInit+0x204>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	4a6b      	ldr	r2, [pc, #428]	; (80027a0 <HAL_UART_MspInit+0x204>)
 80025f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025f6:	6413      	str	r3, [r2, #64]	; 0x40
 80025f8:	4b69      	ldr	r3, [pc, #420]	; (80027a0 <HAL_UART_MspInit+0x204>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002604:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_UART_MspInit+0x204>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_UART_MspInit+0x204>)
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	6313      	str	r3, [r2, #48]	; 0x30
 8002610:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_UART_MspInit+0x204>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800261c:	23c0      	movs	r3, #192	; 0xc0
 800261e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002634:	2308      	movs	r3, #8
 8002636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800263a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800263e:	4619      	mov	r1, r3
 8002640:	4858      	ldr	r0, [pc, #352]	; (80027a4 <HAL_UART_MspInit+0x208>)
 8002642:	f002 ff37 	bl	80054b4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002646:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_UART_MspInit+0x210>)
 800264a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800264c:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 800264e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002652:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002654:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800265a:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 8002662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002666:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002668:	4b4f      	ldr	r3, [pc, #316]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 800266a:	2200      	movs	r2, #0
 800266c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266e:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8002674:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800267a:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002680:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002686:	4848      	ldr	r0, [pc, #288]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 8002688:	f001 f9b2 	bl	80039f0 <HAL_DMA_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002692:	f7fe fcf2 	bl	800107a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a43      	ldr	r2, [pc, #268]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 800269a:	675a      	str	r2, [r3, #116]	; 0x74
 800269c:	4a42      	ldr	r2, [pc, #264]	; (80027a8 <HAL_UART_MspInit+0x20c>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 80026a2:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026a4:	4a43      	ldr	r2, [pc, #268]	; (80027b4 <HAL_UART_MspInit+0x218>)
 80026a6:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026aa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026ae:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b0:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026bc:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c2:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c4:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026dc:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80026e2:	4833      	ldr	r0, [pc, #204]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026e4:	f001 f984 	bl	80039f0 <HAL_DMA_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 80026ee:	f7fe fcc4 	bl	800107a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2e      	ldr	r2, [pc, #184]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026f6:	671a      	str	r2, [r3, #112]	; 0x70
 80026f8:	4a2d      	ldr	r2, [pc, #180]	; (80027b0 <HAL_UART_MspInit+0x214>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	2052      	movs	r0, #82	; 0x52
 8002704:	f001 f905 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002708:	2052      	movs	r0, #82	; 0x52
 800270a:	f001 f91e 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800270e:	e041      	b.n	8002794 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <HAL_UART_MspInit+0x21c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d13c      	bne.n	8002794 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800271a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800271e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002720:	2300      	movs	r3, #0
 8002722:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4618      	mov	r0, r3
 800272a:	f004 fb2d 	bl	8006d88 <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002734:	f7fe fca1 	bl	800107a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_UART_MspInit+0x204>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_UART_MspInit+0x204>)
 800273e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002742:	6413      	str	r3, [r2, #64]	; 0x40
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_UART_MspInit+0x204>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_UART_MspInit+0x204>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <HAL_UART_MspInit+0x204>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	6313      	str	r3, [r2, #48]	; 0x30
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_UART_MspInit+0x204>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002768:	f44f 7340 	mov.w	r3, #768	; 0x300
 800276c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002776:	2301      	movs	r3, #1
 8002778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002782:	2307      	movs	r3, #7
 8002784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002788:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800278c:	4619      	mov	r1, r3
 800278e:	480b      	ldr	r0, [pc, #44]	; (80027bc <HAL_UART_MspInit+0x220>)
 8002790:	f002 fe90 	bl	80054b4 <HAL_GPIO_Init>
}
 8002794:	bf00      	nop
 8002796:	37b0      	adds	r7, #176	; 0xb0
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40007800 	.word	0x40007800
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40021400 	.word	0x40021400
 80027a8:	2000041c 	.word	0x2000041c
 80027ac:	40026058 	.word	0x40026058
 80027b0:	2000047c 	.word	0x2000047c
 80027b4:	40026028 	.word	0x40026028
 80027b8:	40004800 	.word	0x40004800
 80027bc:	40020c00 	.word	0x40020c00

080027c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0ac      	sub	sp, #176	; 0xb0
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027d8:	f107 0318 	add.w	r3, r7, #24
 80027dc:	2284      	movs	r2, #132	; 0x84
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f013 f895 	bl	8015910 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ee:	d159      	bne.n	80028a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80027f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fc:	f107 0318 	add.w	r3, r7, #24
 8002800:	4618      	mov	r0, r3
 8002802:	f004 fac1 	bl	8006d88 <HAL_RCCEx_PeriphCLKConfig>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800280c:	f7fe fc35 	bl	800107a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_PCD_MspInit+0xec>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_PCD_MspInit+0xec>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <HAL_PCD_MspInit+0xec>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002828:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002842:	230a      	movs	r3, #10
 8002844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800284c:	4619      	mov	r1, r3
 800284e:	4818      	ldr	r0, [pc, #96]	; (80028b0 <HAL_PCD_MspInit+0xf0>)
 8002850:	f002 fe30 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800286c:	4619      	mov	r1, r3
 800286e:	4810      	ldr	r0, [pc, #64]	; (80028b0 <HAL_PCD_MspInit+0xf0>)
 8002870:	f002 fe20 	bl	80054b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_PCD_MspInit+0xec>)
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_PCD_MspInit+0xec>)
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	6353      	str	r3, [r2, #52]	; 0x34
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_PCD_MspInit+0xec>)
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_PCD_MspInit+0xec>)
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	4a06      	ldr	r2, [pc, #24]	; (80028ac <HAL_PCD_MspInit+0xec>)
 8002892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002896:	6453      	str	r3, [r2, #68]	; 0x44
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_PCD_MspInit+0xec>)
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80028a4:	bf00      	nop
 80028a6:	37b0      	adds	r7, #176	; 0xb0
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020000 	.word	0x40020000

080028b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <NMI_Handler+0x4>

080028ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <HardFault_Handler+0x4>

080028c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <MemManage_Handler+0x4>

080028c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ca:	e7fe      	b.n	80028ca <BusFault_Handler+0x4>

080028cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <UsageFault_Handler+0x4>

080028d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002900:	f000 faba 	bl	8002e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}

08002908 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <DMA1_Stream1_IRQHandler+0x10>)
 800290e:	f001 f9af 	bl	8003c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000047c 	.word	0x2000047c

0800291c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <DMA1_Stream3_IRQHandler+0x10>)
 8002922:	f001 f9a5 	bl	8003c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000041c 	.word	0x2000041c

08002930 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <ETH_IRQHandler+0x10>)
 8002936:	f001 fed7 	bl	80046e8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200057d8 	.word	0x200057d8

08002944 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <UART7_IRQHandler+0x10>)
 800294a:	f004 fefd 	bl	8007748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000030c 	.word	0x2000030c

08002958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return 1;
 800295c:	2301      	movs	r3, #1
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_kill>:

int _kill(int pid, int sig)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <_kill+0x20>)
 8002974:	2216      	movs	r2, #22
 8002976:	601a      	str	r2, [r3, #0]
  return -1;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	2000b1c0 	.word	0x2000b1c0

0800298c <_exit>:

void _exit (int status)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ffe5 	bl	8002968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800299e:	e7fe      	b.n	800299e <_exit+0x12>

080029a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e00a      	b.n	80029c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b2:	f3af 8000 	nop.w
 80029b6:	4601      	mov	r1, r0
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	60ba      	str	r2, [r7, #8]
 80029be:	b2ca      	uxtb	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	dbf0      	blt.n	80029b2 <_read+0x12>
  }

  return len;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_close>:
  }
  return len;
}

int _close(int file)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a02:	605a      	str	r2, [r3, #4]
  return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <_isatty>:

int _isatty(int file)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <_sbrk+0x5c>)
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <_sbrk+0x60>)
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <_sbrk+0x64>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <_sbrk+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d205      	bcs.n	8002a80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <_sbrk+0x6c>)
 8002a76:	220c      	movs	r2, #12
 8002a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e009      	b.n	8002a94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <_sbrk+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a06      	ldr	r2, [pc, #24]	; (8002aa8 <_sbrk+0x64>)
 8002a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	20050000 	.word	0x20050000
 8002aa4:	00000400 	.word	0x00000400
 8002aa8:	20000e00 	.word	0x20000e00
 8002aac:	2000b1d0 	.word	0x2000b1d0
 8002ab0:	2000b1c0 	.word	0x2000b1c0

08002ab4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <SystemInit+0x20>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <SystemInit+0x20>)
 8002ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002adc:	480d      	ldr	r0, [pc, #52]	; (8002b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ade:	490e      	ldr	r1, [pc, #56]	; (8002b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae4:	e002      	b.n	8002aec <LoopCopyDataInit>

08002ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aea:	3304      	adds	r3, #4

08002aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af0:	d3f9      	bcc.n	8002ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002af2:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002af4:	4c0b      	ldr	r4, [pc, #44]	; (8002b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af8:	e001      	b.n	8002afe <LoopFillZerobss>

08002afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002afc:	3204      	adds	r2, #4

08002afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b00:	d3fb      	bcc.n	8002afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b02:	f7ff ffd7 	bl	8002ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b06:	f012 fea7 	bl	8015858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b0a:	f7fd fe1d 	bl	8000748 <main>
  bx  lr    
 8002b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b18:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002b1c:	0801c61c 	.word	0x0801c61c
  ldr r2, =_sbss
 8002b20:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002b24:	2000b1d0 	.word	0x2000b1d0

08002b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b28:	e7fe      	b.n	8002b28 <ADC_IRQHandler>

08002b2a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <LAN8742_RegisterBusIO+0x28>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <LAN8742_RegisterBusIO+0x28>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <LAN8742_RegisterBusIO+0x28>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e014      	b.n	8002b82 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d17c      	bne.n	8002ca8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e01c      	b.n	8002c02 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f107 0208 	add.w	r2, r7, #8
 8002bd0:	2112      	movs	r1, #18
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	4798      	blx	r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da03      	bge.n	8002be4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002bdc:	f06f 0304 	mvn.w	r3, #4
 8002be0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002be2:	e00b      	b.n	8002bfc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d105      	bne.n	8002bfc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
         break;
 8002bfa:	e005      	b.n	8002c08 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b1f      	cmp	r3, #31
 8002c06:	d9df      	bls.n	8002bc8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b1f      	cmp	r3, #31
 8002c0e:	d902      	bls.n	8002c16 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002c10:	f06f 0302 	mvn.w	r3, #2
 8002c14:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d145      	bne.n	8002ca8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6810      	ldr	r0, [r2, #0]
 8002c24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4798      	blx	r3
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db37      	blt.n	8002ca2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6810      	ldr	r0, [r2, #0]
 8002c3a:	f107 0208 	add.w	r2, r7, #8
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4798      	blx	r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db28      	blt.n	8002c9a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4798      	blx	r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002c52:	e01c      	b.n	8002c8e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4798      	blx	r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c66:	d80e      	bhi.n	8002c86 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6810      	ldr	r0, [r2, #0]
 8002c70:	f107 0208 	add.w	r2, r7, #8
 8002c74:	2100      	movs	r1, #0
 8002c76:	4798      	blx	r3
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da07      	bge.n	8002c8e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002c7e:	f06f 0304 	mvn.w	r3, #4
 8002c82:	613b      	str	r3, [r7, #16]
                 break;
 8002c84:	e010      	b.n	8002ca8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002c86:	f06f 0301 	mvn.w	r3, #1
 8002c8a:	613b      	str	r3, [r7, #16]
               break;
 8002c8c:	e00c      	b.n	8002ca8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1dd      	bne.n	8002c54 <LAN8742_Init+0xc6>
 8002c98:	e006      	b.n	8002ca8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002c9a:	f06f 0304 	mvn.w	r3, #4
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	e002      	b.n	8002ca8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002ca2:	f06f 0303 	mvn.w	r3, #3
 8002ca6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d112      	bne.n	8002cd4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4798      	blx	r3
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002cb8:	bf00      	nop
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	4798      	blx	r3
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ccc:	d9f5      	bls.n	8002cba <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 }
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6810      	ldr	r0, [r2, #0]
 8002cf2:	f107 020c 	add.w	r2, r7, #12
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	4798      	blx	r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	da02      	bge.n	8002d06 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002d00:	f06f 0304 	mvn.w	r3, #4
 8002d04:	e06e      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6810      	ldr	r0, [r2, #0]
 8002d0e:	f107 020c 	add.w	r2, r7, #12
 8002d12:	2101      	movs	r1, #1
 8002d14:	4798      	blx	r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da02      	bge.n	8002d22 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002d1c:	f06f 0304 	mvn.w	r3, #4
 8002d20:	e060      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e059      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6810      	ldr	r0, [r2, #0]
 8002d38:	f107 020c 	add.w	r2, r7, #12
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4798      	blx	r3
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da02      	bge.n	8002d4c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002d46:	f06f 0304 	mvn.w	r3, #4
 8002d4a:	e04b      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11b      	bne.n	8002d8e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <LAN8742_GetLinkState+0x90>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e03a      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e033      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002d86:	2304      	movs	r3, #4
 8002d88:	e02c      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002d8a:	2305      	movs	r3, #5
 8002d8c:	e02a      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6810      	ldr	r0, [r2, #0]
 8002d96:	f107 020c 	add.w	r2, r7, #12
 8002d9a:	211f      	movs	r1, #31
 8002d9c:	4798      	blx	r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	da02      	bge.n	8002daa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002da4:	f06f 0304 	mvn.w	r3, #4
 8002da8:	e01c      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002db4:	2306      	movs	r3, #6
 8002db6:	e015      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 031c 	and.w	r3, r3, #28
 8002dbe:	2b18      	cmp	r3, #24
 8002dc0:	d101      	bne.n	8002dc6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e00e      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 031c 	and.w	r3, r3, #28
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d101      	bne.n	8002dd4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e007      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 031c 	and.w	r3, r3, #28
 8002dda:	2b14      	cmp	r3, #20
 8002ddc:	d101      	bne.n	8002de2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002dde:	2304      	movs	r3, #4
 8002de0:	e000      	b.n	8002de4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002de2:	2305      	movs	r3, #5
    }				
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_Init+0x28>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_Init+0x28>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f000 fd7d 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f000 f808 	bl	8002e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e08:	f7ff fad8 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00

08002e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_InitTick+0x54>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0x58>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fd95 	bl	8003966 <HAL_SYSTICK_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00e      	b.n	8002e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d80a      	bhi.n	8002e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f000 fd5d 	bl	8003912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e58:	4a06      	ldr	r2, [pc, #24]	; (8002e74 <HAL_InitTick+0x5c>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000038 	.word	0x20000038
 8002e70:	20000040 	.word	0x20000040
 8002e74:	2000003c 	.word	0x2000003c

08002e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_IncTick+0x20>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_IncTick+0x24>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_IncTick+0x24>)
 8002e8a:	6013      	str	r3, [r2, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000040 	.word	0x20000040
 8002e9c:	20000e04 	.word	0x20000e04

08002ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_GetTick+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000e04 	.word	0x20000e04

08002eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff ffee 	bl	8002ea0 <HAL_GetTick>
 8002ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d005      	beq.n	8002ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_Delay+0x44>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ede:	bf00      	nop
 8002ee0:	f7ff ffde 	bl	8002ea0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d8f7      	bhi.n	8002ee0 <HAL_Delay+0x28>
  {
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000040 	.word	0x20000040

08002f00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e031      	b.n	8002f7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fa70 	bl	8002404 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_ADC_Init+0x84>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	f043 0202 	orr.w	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fb0a 	bl	8003568 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
 8002f6a:	e001      	b.n	8002f70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	ffffeefd 	.word	0xffffeefd

08002f88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_Start+0x1a>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0ad      	b.n	80030fe <HAL_ADC_Start+0x176>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d018      	beq.n	8002fea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_ADC_Start+0x184>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a50      	ldr	r2, [pc, #320]	; (8003110 <HAL_ADC_Start+0x188>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0c9a      	lsrs	r2, r3, #18
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002fdc:	e002      	b.n	8002fe4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f9      	bne.n	8002fde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d175      	bne.n	80030e4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffc:	4b45      	ldr	r3, [pc, #276]	; (8003114 <HAL_ADC_Start+0x18c>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800301e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003032:	d106      	bne.n	8003042 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	f023 0206 	bic.w	r2, r3, #6
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
 8003040:	e002      	b.n	8003048 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003058:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800305a:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <HAL_ADC_Start+0x190>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10f      	bne.n	8003086 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d143      	bne.n	80030fc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	e03a      	b.n	80030fc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a24      	ldr	r2, [pc, #144]	; (800311c <HAL_ADC_Start+0x194>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10e      	bne.n	80030ae <HAL_ADC_Start+0x126>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030ac:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_ADC_Start+0x190>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d120      	bne.n	80030fc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_ADC_Start+0x198>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d11b      	bne.n	80030fc <HAL_ADC_Start+0x174>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d114      	bne.n	80030fc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	e00b      	b.n	80030fc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f043 0210 	orr.w	r2, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000038 	.word	0x20000038
 8003110:	431bde83 	.word	0x431bde83
 8003114:	fffff8fe 	.word	0xfffff8fe
 8003118:	40012300 	.word	0x40012300
 800311c:	40012000 	.word	0x40012000
 8003120:	40012200 	.word	0x40012200

08003124 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_Stop+0x16>
 8003136:	2302      	movs	r3, #2
 8003138:	e01f      	b.n	800317a <HAL_ADC_Stop+0x56>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_ADC_Stop+0x64>)
 8003166:	4013      	ands	r3, r2
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	ffffeefe 	.word	0xffffeefe

0800318c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d113      	bne.n	80031d2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b8:	d10b      	bne.n	80031d2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e063      	b.n	800329a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031d2:	f7ff fe65 	bl	8002ea0 <HAL_GetTick>
 80031d6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031d8:	e021      	b.n	800321e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d01d      	beq.n	800321e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_ADC_PollForConversion+0x6c>
 80031e8:	f7ff fe5a 	bl	8002ea0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d212      	bcs.n	800321e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d00b      	beq.n	800321e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0204 	orr.w	r2, r3, #4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e03d      	b.n	800329a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b02      	cmp	r3, #2
 800322a:	d1d6      	bne.n	80031da <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0212 	mvn.w	r2, #18
 8003234:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d123      	bne.n	8003298 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11f      	bne.n	8003298 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f043 0201 	orr.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x1c>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e136      	b.n	8003546 <HAL_ADC_ConfigChannel+0x28a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b09      	cmp	r3, #9
 80032e6:	d93a      	bls.n	800335e <HAL_ADC_ConfigChannel+0xa2>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032f0:	d035      	beq.n	800335e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68d9      	ldr	r1, [r3, #12]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	3b1e      	subs	r3, #30
 8003308:	2207      	movs	r2, #7
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	400a      	ands	r2, r1
 8003316:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a8d      	ldr	r2, [pc, #564]	; (8003554 <HAL_ADC_ConfigChannel+0x298>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10a      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68d9      	ldr	r1, [r3, #12]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	061a      	lsls	r2, r3, #24
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003336:	e035      	b.n	80033a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	4603      	mov	r3, r0
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4403      	add	r3, r0
 8003350:	3b1e      	subs	r3, #30
 8003352:	409a      	lsls	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800335c:	e022      	b.n	80033a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6919      	ldr	r1, [r3, #16]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	2207      	movs	r2, #7
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43da      	mvns	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	400a      	ands	r2, r1
 8003380:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6919      	ldr	r1, [r3, #16]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	4618      	mov	r0, r3
 8003394:	4603      	mov	r3, r0
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4403      	add	r3, r0
 800339a:	409a      	lsls	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	d824      	bhi.n	80033f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	3b05      	subs	r3, #5
 80033be:	221f      	movs	r2, #31
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43da      	mvns	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	400a      	ands	r2, r1
 80033cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b05      	subs	r3, #5
 80033e8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	635a      	str	r2, [r3, #52]	; 0x34
 80033f4:	e04c      	b.n	8003490 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d824      	bhi.n	8003448 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b23      	subs	r3, #35	; 0x23
 8003410:	221f      	movs	r2, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b23      	subs	r3, #35	; 0x23
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
 8003446:	e023      	b.n	8003490 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	3b41      	subs	r3, #65	; 0x41
 800345a:	221f      	movs	r2, #31
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43da      	mvns	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	400a      	ands	r2, r1
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	4618      	mov	r0, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	3b41      	subs	r3, #65	; 0x41
 8003484:	fa00 f203 	lsl.w	r2, r0, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a30      	ldr	r2, [pc, #192]	; (8003558 <HAL_ADC_ConfigChannel+0x29c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10a      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x1f4>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034a2:	d105      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a2c      	ldr	r2, [pc, #176]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 80034aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80034ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a28      	ldr	r2, [pc, #160]	; (8003558 <HAL_ADC_ConfigChannel+0x29c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10f      	bne.n	80034da <HAL_ADC_ConfigChannel+0x21e>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b12      	cmp	r3, #18
 80034c0:	d10b      	bne.n	80034da <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80034c2:	4b26      	ldr	r3, [pc, #152]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a25      	ldr	r2, [pc, #148]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 80034c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 80034d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_ADC_ConfigChannel+0x29c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d12b      	bne.n	800353c <HAL_ADC_ConfigChannel+0x280>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <HAL_ADC_ConfigChannel+0x298>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x23a>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b11      	cmp	r3, #17
 80034f4:	d122      	bne.n	800353c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 80034fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003500:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_ADC_ConfigChannel+0x2a0>)
 8003508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800350c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <HAL_ADC_ConfigChannel+0x298>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d111      	bne.n	800353c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_ADC_ConfigChannel+0x2a4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a11      	ldr	r2, [pc, #68]	; (8003564 <HAL_ADC_ConfigChannel+0x2a8>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9a      	lsrs	r2, r3, #18
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800352e:	e002      	b.n	8003536 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3b01      	subs	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f9      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	10000012 	.word	0x10000012
 8003558:	40012000 	.word	0x40012000
 800355c:	40012300 	.word	0x40012300
 8003560:	20000038 	.word	0x20000038
 8003564:	431bde83 	.word	0x431bde83

08003568 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003570:	4b78      	ldr	r3, [pc, #480]	; (8003754 <ADC_Init+0x1ec>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a77      	ldr	r2, [pc, #476]	; (8003754 <ADC_Init+0x1ec>)
 8003576:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800357a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800357c:	4b75      	ldr	r3, [pc, #468]	; (8003754 <ADC_Init+0x1ec>)
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4973      	ldr	r1, [pc, #460]	; (8003754 <ADC_Init+0x1ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	021a      	lsls	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	4a58      	ldr	r2, [pc, #352]	; (8003758 <ADC_Init+0x1f0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d022      	beq.n	8003642 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800360a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800362c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	e00f      	b.n	8003662 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003660:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0202 	bic.w	r2, r2, #2
 8003670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6899      	ldr	r1, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	005a      	lsls	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800369e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	3b01      	subs	r3, #1
 80036bc:	035a      	lsls	r2, r3, #13
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	e007      	b.n	80036d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	051a      	lsls	r2, r3, #20
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800370c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800371a:	025a      	lsls	r2, r3, #9
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6899      	ldr	r1, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	029a      	lsls	r2, r3, #10
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40012300 	.word	0x40012300
 8003758:	0f000001 	.word	0x0f000001

0800375c <__NVIC_SetPriorityGrouping>:
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	4313      	orrs	r3, r2
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	; (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00
 80037a0:	05fa0000 	.word	0x05fa0000

080037a4 <__NVIC_GetPriorityGrouping>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <SysTick_Config>:
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff8e 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff29 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff3e 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff8e 	bl	8003850 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5d 	bl	80037fc <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff31 	bl	80037c0 <__NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffa2 	bl	80038b8 <SysTick_Config>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003984:	f3bf 8f5f 	dmb	sy
}
 8003988:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_MPU_Disable+0x28>)
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <HAL_MPU_Disable+0x28>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_MPU_Disable+0x2c>)
 8003998:	2200      	movs	r2, #0
 800399a:	605a      	str	r2, [r3, #4]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000ed00 	.word	0xe000ed00
 80039ac:	e000ed90 	.word	0xe000ed90

080039b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <HAL_MPU_Enable+0x38>)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_MPU_Enable+0x3c>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <HAL_MPU_Enable+0x3c>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80039ce:	f3bf 8f4f 	dsb	sy
}
 80039d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039d4:	f3bf 8f6f 	isb	sy
}
 80039d8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000ed90 	.word	0xe000ed90
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff fa50 	bl	8002ea0 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e099      	b.n	8003b40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a2c:	e00f      	b.n	8003a4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a2e:	f7ff fa37 	bl	8002ea0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d908      	bls.n	8003a4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e078      	b.n	8003b40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e8      	bne.n	8003a2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <HAL_DMA_Init+0x158>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d107      	bne.n	8003ab8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d117      	bne.n	8003b12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fa7b 	bl	8003ff0 <DMA_CheckFifoParam>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e016      	b.n	8003b40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa32 	bl	8003f84 <DMA_CalcBaseAndBitshift>
 8003b20:	4603      	mov	r3, r0
 8003b22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	223f      	movs	r2, #63	; 0x3f
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	f010803f 	.word	0xf010803f

08003b4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b5a:	f7ff f9a1 	bl	8002ea0 <HAL_GetTick>
 8003b5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d008      	beq.n	8003b7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2280      	movs	r2, #128	; 0x80
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e052      	b.n	8003c24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0216 	bic.w	r2, r2, #22
 8003b8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <HAL_DMA_Abort+0x62>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0208 	bic.w	r2, r2, #8
 8003bbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bce:	e013      	b.n	8003bf8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd0:	f7ff f966 	bl	8002ea0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d90c      	bls.n	8003bf8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2203      	movs	r2, #3
 8003be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e015      	b.n	8003c24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e4      	bne.n	8003bd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	223f      	movs	r2, #63	; 0x3f
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d004      	beq.n	8003c4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00c      	b.n	8003c64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2205      	movs	r2, #5
 8003c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003c7c:	4b8e      	ldr	r3, [pc, #568]	; (8003eb8 <HAL_DMA_IRQHandler+0x248>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a8e      	ldr	r2, [pc, #568]	; (8003ebc <HAL_DMA_IRQHandler+0x24c>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0a9b      	lsrs	r3, r3, #10
 8003c88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01a      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0204 	bic.w	r2, r2, #4
 8003cc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	2208      	movs	r2, #8
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	2201      	movs	r2, #1
 8003d00:	409a      	lsls	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	f043 0202 	orr.w	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	2204      	movs	r2, #4
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d012      	beq.n	8003d48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	2204      	movs	r2, #4
 8003d36:	409a      	lsls	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f043 0204 	orr.w	r2, r3, #4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d043      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d03c      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d018      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d024      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
 8003d9e:	e01f      	b.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01b      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
 8003db0:	e016      	b.n	8003de0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d107      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0208 	bic.w	r2, r2, #8
 8003dce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	2220      	movs	r2, #32
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 808f 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8087 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	2220      	movs	r2, #32
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d136      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0216 	bic.w	r2, r2, #22
 8003e28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x1da>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0208 	bic.w	r2, r2, #8
 8003e58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	223f      	movs	r2, #63	; 0x3f
 8003e60:	409a      	lsls	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d07e      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
        }
        return;
 8003e86:	e079      	b.n	8003f7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d031      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
 8003eb4:	e02c      	b.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
 8003eb6:	bf00      	nop
 8003eb8:	20000038 	.word	0x20000038
 8003ebc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d023      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
 8003ed0:	e01e      	b.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0210 	bic.w	r2, r2, #16
 8003eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d032      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d022      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2205      	movs	r2, #5
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d307      	bcc.n	8003f58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f2      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x2cc>
 8003f56:	e000      	b.n	8003f5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
 8003f7a:	e000      	b.n	8003f7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f7c:	bf00      	nop
    }
  }
}
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	3b10      	subs	r3, #16
 8003f94:	4a13      	ldr	r2, [pc, #76]	; (8003fe4 <DMA_CalcBaseAndBitshift+0x60>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f9e:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <DMA_CalcBaseAndBitshift+0x64>)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d908      	bls.n	8003fc4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <DMA_CalcBaseAndBitshift+0x68>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	659a      	str	r2, [r3, #88]	; 0x58
 8003fc2:	e006      	b.n	8003fd2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b08      	ldr	r3, [pc, #32]	; (8003fec <DMA_CalcBaseAndBitshift+0x68>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	aaaaaaab 	.word	0xaaaaaaab
 8003fe8:	0801c3b8 	.word	0x0801c3b8
 8003fec:	fffffc00 	.word	0xfffffc00

08003ff0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11f      	bne.n	800404a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d856      	bhi.n	80040be <DMA_CheckFifoParam+0xce>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <DMA_CheckFifoParam+0x28>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004029 	.word	0x08004029
 800401c:	0800403b 	.word	0x0800403b
 8004020:	08004029 	.word	0x08004029
 8004024:	080040bf 	.word	0x080040bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d046      	beq.n	80040c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004038:	e043      	b.n	80040c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004042:	d140      	bne.n	80040c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004048:	e03d      	b.n	80040c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004052:	d121      	bne.n	8004098 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d837      	bhi.n	80040ca <DMA_CheckFifoParam+0xda>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <DMA_CheckFifoParam+0x70>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	08004071 	.word	0x08004071
 8004064:	08004077 	.word	0x08004077
 8004068:	08004071 	.word	0x08004071
 800406c:	08004089 	.word	0x08004089
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      break;
 8004074:	e030      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d025      	beq.n	80040ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004086:	e022      	b.n	80040ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004090:	d11f      	bne.n	80040d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004096:	e01c      	b.n	80040d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d903      	bls.n	80040a6 <DMA_CheckFifoParam+0xb6>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d003      	beq.n	80040ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040a4:	e018      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
      break;
 80040aa:	e015      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00e      	beq.n	80040d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      break;
 80040bc:	e00b      	b.n	80040d6 <DMA_CheckFifoParam+0xe6>
      break;
 80040be:	bf00      	nop
 80040c0:	e00a      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
      break;
 80040c2:	bf00      	nop
 80040c4:	e008      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
      break;
 80040c6:	bf00      	nop
 80040c8:	e006      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ca:	bf00      	nop
 80040cc:	e004      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ce:	bf00      	nop
 80040d0:	e002      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040d2:	bf00      	nop
 80040d4:	e000      	b.n	80040d8 <DMA_CheckFifoParam+0xe8>
      break;
 80040d6:	bf00      	nop
    }
  } 
  
  return status; 
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop

080040e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06a      	b.n	80041d0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2223      	movs	r2, #35	; 0x23
 8004108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f005 fab1 	bl	8009674 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004112:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_ETH_Init+0xf0>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	4a30      	ldr	r2, [pc, #192]	; (80041d8 <HAL_ETH_Init+0xf0>)
 8004118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800411c:	6453      	str	r3, [r2, #68]	; 0x44
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <HAL_ETH_Init+0xf0>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800412a:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <HAL_ETH_Init+0xf4>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4a2b      	ldr	r2, [pc, #172]	; (80041dc <HAL_ETH_Init+0xf4>)
 8004130:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004134:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <HAL_ETH_Init+0xf4>)
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4927      	ldr	r1, [pc, #156]	; (80041dc <HAL_ETH_Init+0xf4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <HAL_ETH_Init+0xf4>)
 8004146:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800415e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004160:	f7fe fe9e 	bl	8002ea0 <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004166:	e011      	b.n	800418c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004168:	f7fe fe9a 	bl	8002ea0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004176:	d909      	bls.n	800418c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2204      	movs	r2, #4
 800417c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	22e0      	movs	r2, #224	; 0xe0
 8004184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e021      	b.n	80041d0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e4      	bne.n	8004168 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fee4 	bl	8004f6c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 ff8b 	bl	80050c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 ffe1 	bl	8005172 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	461a      	mov	r2, r3
 80041b6:	2100      	movs	r1, #0
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 ff49 	bl	8005050 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2210      	movs	r2, #16
 80041ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40013800 	.word	0x40013800

080041e0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d150      	bne.n	8004294 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2223      	movs	r2, #35	; 0x23
 80041f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2204      	movs	r2, #4
 80041fe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f9fd 	bl	8004600 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0208 	orr.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800421e:	2001      	movs	r0, #1
 8004220:	f7fe fe4a 	bl	8002eb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0204 	orr.w	r2, r2, #4
 800423a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004244:	2001      	movs	r0, #1
 8004246:	f7fe fe37 	bl	8002eb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fd2a 	bl	8004cac <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800426a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800426e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	f043 0302 	orr.w	r3, r3, #2
 8004282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004286:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2223      	movs	r2, #35	; 0x23
 800428c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ac:	2b23      	cmp	r3, #35	; 0x23
 80042ae:	d14a      	bne.n	8004346 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2223      	movs	r2, #35	; 0x23
 80042b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042ce:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	f023 0302 	bic.w	r3, r3, #2
 80042e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004300:	2001      	movs	r0, #1
 8004302:	f7fe fdd9 	bl	8002eb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fccc 	bl	8004cac <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0208 	bic.w	r2, r2, #8
 8004322:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800432c:	2001      	movs	r0, #1
 800432e:	f7fe fdc3 	bl	8002eb8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2210      	movs	r2, #16
 800433e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	e000      	b.n	8004348 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
  }
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07c      	b.n	8004470 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	2b23      	cmp	r3, #35	; 0x23
 800437e:	d176      	bne.n	800446e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004380:	2200      	movs	r2, #0
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 ff61 	bl	800524c <ETH_Prepare_Tx_Descriptors>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e065      	b.n	8004470 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80043a4:	f3bf 8f4f 	dsb	sy
}
 80043a8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3206      	adds	r2, #6
 80043b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d904      	bls.n	80043d4 <HAL_ETH_Transmit+0x84>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	1f1a      	subs	r2, r3, #4
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3106      	adds	r1, #6
 80043e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80043ea:	f7fe fd59 	bl	8002ea0 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80043f0:	e037      	b.n	8004462 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d011      	beq.n	8004428 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f043 0208 	orr.w	r2, r3, #8
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e023      	b.n	8004470 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d018      	beq.n	8004462 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004430:	f7fe fd36 	bl	8002ea0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <HAL_ETH_Transmit+0xf6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800445c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e006      	b.n	8004470 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	dbc3      	blt.n	80043f2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0a8      	b.n	80045f6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	2b23      	cmp	r3, #35	; 0x23
 80044ac:	d001      	beq.n	80044b2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0a1      	b.n	80045f6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	3212      	adds	r2, #18
 80044be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c8:	f1c3 0304 	rsb	r3, r3, #4
 80044cc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80044ce:	e06a      	b.n	80045a6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <HAL_ETH_ReadData+0x88>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d040      	beq.n	8004582 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00c      	beq.n	8004544 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004534:	3b04      	subs	r3, #4
 8004536:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800455c:	461a      	mov	r2, r3
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f005 fa51 	bl	8009a08 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	441a      	add	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2200      	movs	r2, #0
 8004580:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3301      	adds	r3, #1
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d902      	bls.n	8004594 <HAL_ETH_ReadData+0x11c>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3b04      	subs	r3, #4
 8004592:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	3212      	adds	r2, #18
 800459a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db06      	blt.n	80045bc <HAL_ETH_ReadData+0x144>
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d202      	bcs.n	80045bc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d089      	beq.n	80044d0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	441a      	add	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f815 	bl	8004600 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d108      	bne.n	80045f4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800460c:	2301      	movs	r3, #1
 800460e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004614:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	3212      	adds	r2, #18
 800461c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004620:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004628:	e040      	b.n	80046ac <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d112      	bne.n	8004658 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004632:	f107 030c 	add.w	r3, r7, #12
 8004636:	4618      	mov	r0, r3
 8004638:	f005 f9b6 	bl	80099a8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	74fb      	strb	r3, [r7, #19]
 8004646:	e007      	b.n	8004658 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	461a      	mov	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	461a      	mov	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d026      	beq.n	80046ac <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <ETH_UpdateDescriptor+0xe4>)
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	e003      	b.n	8004676 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004674:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8004676:	f3bf 8f5f 	dmb	sy
}
 800467a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	3301      	adds	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d902      	bls.n	800469a <ETH_UpdateDescriptor+0x9a>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	3b04      	subs	r3, #4
 8004698:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	3212      	adds	r2, #18
 80046a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a4:	617b      	str	r3, [r7, #20]
      desccount--;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <ETH_UpdateDescriptor+0xb8>
 80046b2:	7cfb      	ldrb	r3, [r7, #19]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1b8      	bne.n	800462a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d00c      	beq.n	80046dc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80046dc:	bf00      	nop
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	80004600 	.word	0x80004600

080046e8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d112      	bne.n	8004728 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d109      	bne.n	8004728 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471c:	461a      	mov	r2, r3
 800471e:	4b50      	ldr	r3, [pc, #320]	; (8004860 <HAL_ETH_IRQHandler+0x178>)
 8004720:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8ac 	bl	8004880 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d113      	bne.n	8004762 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d10a      	bne.n	8004762 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004754:	461a      	mov	r2, r3
 8004756:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800475a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f885 	bl	800486c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	d14c      	bne.n	8004810 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	d142      	bne.n	8004810 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f043 0208 	orr.w	r2, r3, #8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ac:	d11a      	bne.n	80047e4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_ETH_IRQHandler+0x17c>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80047d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047d8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	22e0      	movs	r2, #224	; 0xe0
 80047de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80047e2:	e012      	b.n	800480a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	f248 6380 	movw	r3, #34432	; 0x8680
 80047f2:	4013      	ands	r3, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	461a      	mov	r2, r3
 8004804:	f248 6380 	movw	r3, #34432	; 0x8680
 8004808:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f842 	bl	8004894 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b08      	cmp	r3, #8
 800481c:	d10e      	bne.n	800483c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f83a 	bl	80048a8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <HAL_ETH_IRQHandler+0x180>)
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d006      	beq.n	8004856 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <HAL_ETH_IRQHandler+0x180>)
 800484a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800484e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f833 	bl	80048bc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	00010040 	.word	0x00010040
 8004864:	007e2000 	.word	0x007e2000
 8004868:	40013c00 	.word	0x40013c00

0800486c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 031c 	and.w	r3, r3, #28
 80048ec:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	02db      	lsls	r3, r3, #11
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0302 	bic.w	r3, r3, #2
 800490e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004920:	f7fe fabe 	bl	8002ea0 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004926:	e00d      	b.n	8004944 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004928:	f7fe faba 	bl	8002ea0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d301      	bcc.n	800493c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e010      	b.n	800495e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ec      	bne.n	8004928 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	b29b      	uxth	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f003 031c 	and.w	r3, r3, #28
 8004982:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	02db      	lsls	r3, r3, #11
 8004988:	b29b      	uxth	r3, r3
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	019b      	lsls	r3, r3, #6
 8004994:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f043 0302 	orr.w	r3, r3, #2
 80049a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049c0:	f7fe fa6e 	bl	8002ea0 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049c6:	e00d      	b.n	80049e4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80049c8:	f7fe fa6a 	bl	8002ea0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d6:	d301      	bcc.n	80049dc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e009      	b.n	80049f0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ec      	bne.n	80049c8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0d9      	b.n	8004bc0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf0c      	ite	eq
 8004a7a:	2301      	moveq	r3, #1
 8004a7c:	2300      	movne	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bf0c      	ite	eq
 8004aca:	2301      	moveq	r3, #1
 8004acc:	2300      	movne	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf14      	ite	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	2300      	moveq	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e00b      	b.n	8004bf8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d105      	bne.n	8004bf6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f883 	bl	8004cf8 <ETH_SetMACConfig>

    return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e000      	b.n	8004bf8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 031c 	bic.w	r3, r3, #28
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004c18:	f002 f882 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8004c1c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d908      	bls.n	8004c38 <HAL_ETH_SetMDIOClockRange+0x38>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d804      	bhi.n	8004c38 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f043 0308 	orr.w	r3, r3, #8
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e027      	b.n	8004c88 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4a18      	ldr	r2, [pc, #96]	; (8004c9c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d908      	bls.n	8004c52 <HAL_ETH_SetMDIOClockRange+0x52>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d204      	bcs.n	8004c52 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f043 030c 	orr.w	r3, r3, #12
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e01a      	b.n	8004c88 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d303      	bcc.n	8004c62 <HAL_ETH_SetMDIOClockRange+0x62>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d911      	bls.n	8004c86 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4a0f      	ldr	r2, [pc, #60]	; (8004ca4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d908      	bls.n	8004c7c <HAL_ETH_SetMDIOClockRange+0x7c>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d804      	bhi.n	8004c7c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f043 0304 	orr.w	r3, r3, #4
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e005      	b.n	8004c88 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f043 0310 	orr.w	r3, r3, #16
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e000      	b.n	8004c88 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004c86:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	611a      	str	r2, [r3, #16]
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	01312cff 	.word	0x01312cff
 8004c9c:	02160ebf 	.word	0x02160ebf
 8004ca0:	03938700 	.word	0x03938700
 8004ca4:	05f5e0ff 	.word	0x05f5e0ff
 8004ca8:	08f0d17f 	.word	0x08f0d17f

08004cac <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cce:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f7fe f8eb 	bl	8002eb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cec:	6193      	str	r3, [r2, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4b51      	ldr	r3, [pc, #324]	; (8004e54 <ETH_SetMACConfig+0x15c>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	7c1b      	ldrb	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <ETH_SetMACConfig+0x28>
 8004d1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d1e:	e000      	b.n	8004d22 <ETH_SetMACConfig+0x2a>
 8004d20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	7c5b      	ldrb	r3, [r3, #17]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <ETH_SetMACConfig+0x38>
 8004d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d2e:	e000      	b.n	8004d32 <ETH_SetMACConfig+0x3a>
 8004d30:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004d32:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004d38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	7fdb      	ldrb	r3, [r3, #31]
 8004d3e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004d40:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004d46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	7f92      	ldrb	r2, [r2, #30]
 8004d4c:	2a00      	cmp	r2, #0
 8004d4e:	d102      	bne.n	8004d56 <ETH_SetMACConfig+0x5e>
 8004d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d54:	e000      	b.n	8004d58 <ETH_SetMACConfig+0x60>
 8004d56:	2200      	movs	r2, #0
                        macconf->Speed |
 8004d58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	7f1b      	ldrb	r3, [r3, #28]
 8004d5e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004d60:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004d66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	791b      	ldrb	r3, [r3, #4]
 8004d6c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004d6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004d76:	2a00      	cmp	r2, #0
 8004d78:	d102      	bne.n	8004d80 <ETH_SetMACConfig+0x88>
 8004d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7e:	e000      	b.n	8004d82 <ETH_SetMACConfig+0x8a>
 8004d80:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004d82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	7bdb      	ldrb	r3, [r3, #15]
 8004d88:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004d8a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004d90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d98:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004db2:	2001      	movs	r0, #1
 8004db4:	f7fe f880 	bl	8002eb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004dce:	4013      	ands	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	d101      	bne.n	8004de6 <ETH_SetMACConfig+0xee>
 8004de2:	2280      	movs	r2, #128	; 0x80
 8004de4:	e000      	b.n	8004de8 <ETH_SetMACConfig+0xf0>
 8004de6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004de8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004dee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004df6:	2a01      	cmp	r2, #1
 8004df8:	d101      	bne.n	8004dfe <ETH_SetMACConfig+0x106>
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	e000      	b.n	8004e00 <ETH_SetMACConfig+0x108>
 8004dfe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004e00:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004e08:	2a01      	cmp	r2, #1
 8004e0a:	d101      	bne.n	8004e10 <ETH_SetMACConfig+0x118>
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	e000      	b.n	8004e12 <ETH_SetMACConfig+0x11a>
 8004e10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004e12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004e1a:	2a01      	cmp	r2, #1
 8004e1c:	d101      	bne.n	8004e22 <ETH_SetMACConfig+0x12a>
 8004e1e:	2202      	movs	r2, #2
 8004e20:	e000      	b.n	8004e24 <ETH_SetMACConfig+0x12c>
 8004e22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004e24:	4313      	orrs	r3, r2
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	f7fe f83b 	bl	8002eb8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	619a      	str	r2, [r3, #24]
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	ff20810f 	.word	0xff20810f

08004e58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <ETH_SetDMAConfig+0x110>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	7b1b      	ldrb	r3, [r3, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <ETH_SetDMAConfig+0x2c>
 8004e7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e82:	e000      	b.n	8004e86 <ETH_SetDMAConfig+0x2e>
 8004e84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	7b5b      	ldrb	r3, [r3, #13]
 8004e8a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004e8c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	7f52      	ldrb	r2, [r2, #29]
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	d102      	bne.n	8004e9c <ETH_SetDMAConfig+0x44>
 8004e96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e9a:	e000      	b.n	8004e9e <ETH_SetDMAConfig+0x46>
 8004e9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004e9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	7b9b      	ldrb	r3, [r3, #14]
 8004ea4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004ea6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004eac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	7f1b      	ldrb	r3, [r3, #28]
 8004eb2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004eb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	7f9b      	ldrb	r3, [r3, #30]
 8004eba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004ebc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004ec2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004edc:	461a      	mov	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004eee:	2001      	movs	r0, #1
 8004ef0:	f7fd ffe2 	bl	8002eb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efc:	461a      	mov	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	791b      	ldrb	r3, [r3, #4]
 8004f06:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004f0c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004f12:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004f18:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f20:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004f22:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004f2a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004f30:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f3e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	f7fd ffb3 	bl	8002eb8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6013      	str	r3, [r2, #0]
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	f8de3f23 	.word	0xf8de3f23

08004f6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0a6      	sub	sp, #152	; 0x98
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004f80:	2300      	movs	r3, #0
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004fce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004fe0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff fe86 	bl	8004cf8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004fec:	2301      	movs	r3, #1
 8004fee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005008:	2300      	movs	r3, #0
 800500a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800500e:	2300      	movs	r3, #0
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005018:	2301      	movs	r3, #1
 800501a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800501c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005020:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005026:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800502c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005034:	2300      	movs	r3, #0
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005038:	2300      	movs	r3, #0
 800503a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff ff08 	bl	8004e58 <ETH_SetDMAConfig>
}
 8005048:	bf00      	nop
 800504a:	3798      	adds	r7, #152	; 0x98
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3305      	adds	r3, #5
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	3204      	adds	r2, #4
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <ETH_MACAddressConfig+0x68>)
 8005072:	4413      	add	r3, r2
 8005074:	461a      	mov	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3303      	adds	r3, #3
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	061a      	lsls	r2, r3, #24
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3302      	adds	r3, #2
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	041b      	lsls	r3, r3, #16
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	4313      	orrs	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <ETH_MACAddressConfig+0x6c>)
 80050a2:	4413      	add	r3, r2
 80050a4:	461a      	mov	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	6013      	str	r3, [r2, #0]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40028040 	.word	0x40028040
 80050bc:	40028044 	.word	0x40028044

080050c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e03e      	b.n	800514c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68d9      	ldr	r1, [r3, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	440b      	add	r3, r1
 80050de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2200      	movs	r2, #0
 80050ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2200      	movs	r2, #0
 80050f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	3206      	adds	r2, #6
 8005100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d80c      	bhi.n	8005130 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68d9      	ldr	r1, [r3, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	440b      	add	r3, r1
 8005128:	461a      	mov	r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	60da      	str	r2, [r3, #12]
 800512e:	e004      	b.n	800513a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	461a      	mov	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3301      	adds	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d9bd      	bls.n	80050ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005164:	611a      	str	r2, [r3, #16]
}
 8005166:	bf00      	nop
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e046      	b.n	800520e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6919      	ldr	r1, [r3, #16]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	440b      	add	r3, r1
 8005190:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2200      	movs	r2, #0
 80051a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2200      	movs	r2, #0
 80051a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2200      	movs	r2, #0
 80051ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80051c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	3212      	adds	r2, #18
 80051da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d80c      	bhi.n	80051fe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6919      	ldr	r1, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	461a      	mov	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	60da      	str	r2, [r3, #12]
 80051fc:	e004      	b.n	8005208 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d9b5      	bls.n	8005180 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	60da      	str	r2, [r3, #12]
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800524c:	b480      	push	{r7}
 800524e:	b08d      	sub	sp, #52	; 0x34
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3318      	adds	r3, #24
 800525c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005276:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800528a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800528e:	d007      	beq.n	80052a0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	3304      	adds	r3, #4
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80052a0:	2302      	movs	r3, #2
 80052a2:	e0ff      	b.n	80054a4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	3301      	adds	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	4b7d      	ldr	r3, [pc, #500]	; (80054b0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	6852      	ldr	r2, [r2, #4]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	431a      	orrs	r2, r3
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005326:	f3bf 8f5f 	dmb	sy
}
 800532a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005338:	e082      	b.n	8005440 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e005      	b.n	8005366 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	3301      	adds	r3, #1
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	2b03      	cmp	r3, #3
 8005370:	d902      	bls.n	8005378 <ETH_Prepare_Tx_Descriptors+0x12c>
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	3b04      	subs	r3, #4
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800537c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005380:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539a:	d007      	beq.n	80053ac <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	3304      	adds	r3, #4
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d029      	beq.n	8005400 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053be:	e019      	b.n	80053f4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80053c0:	f3bf 8f5f 	dmb	sy
}
 80053c4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	3301      	adds	r3, #1
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d902      	bls.n	80053e4 <ETH_Prepare_Tx_Descriptors+0x198>
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	3b04      	subs	r3, #4
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ec:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	3301      	adds	r3, #1
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d3e1      	bcc.n	80053c0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80053fc:	2302      	movs	r3, #2
 80053fe:	e051      	b.n	80054a4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	3301      	adds	r3, #1
 8005404:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800541c:	4013      	ands	r3, r2
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	6852      	ldr	r2, [r2, #4]
 8005422:	431a      	orrs	r2, r3
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	3301      	adds	r3, #1
 800542c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800542e:	f3bf 8f5f 	dmb	sy
}
 8005432:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f47f af78 	bne.w	800533a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	e005      	b.n	800546a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	3304      	adds	r3, #4
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800548a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800548c:	b672      	cpsid	i
}
 800548e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	4413      	add	r3, r2
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800549e:	b662      	cpsie	i
}
 80054a0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3734      	adds	r7, #52	; 0x34
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	ffffe000 	.word	0xffffe000

080054b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b089      	sub	sp, #36	; 0x24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e175      	b.n	80057c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80054d4:	2201      	movs	r2, #1
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4013      	ands	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f040 8164 	bne.w	80057ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d005      	beq.n	800550a <HAL_GPIO_Init+0x56>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d130      	bne.n	800556c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	2203      	movs	r2, #3
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005540:	2201      	movs	r2, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 0201 	and.w	r2, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b03      	cmp	r3, #3
 8005576:	d017      	beq.n	80055a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	2203      	movs	r2, #3
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4313      	orrs	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d123      	bne.n	80055fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	08da      	lsrs	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3208      	adds	r2, #8
 80055bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	220f      	movs	r2, #15
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	08da      	lsrs	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3208      	adds	r2, #8
 80055f6:	69b9      	ldr	r1, [r7, #24]
 80055f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	2203      	movs	r2, #3
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 0203 	and.w	r2, r3, #3
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80be 	beq.w	80057ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800563e:	4b66      	ldr	r3, [pc, #408]	; (80057d8 <HAL_GPIO_Init+0x324>)
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	4a65      	ldr	r2, [pc, #404]	; (80057d8 <HAL_GPIO_Init+0x324>)
 8005644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005648:	6453      	str	r3, [r2, #68]	; 0x44
 800564a:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <HAL_GPIO_Init+0x324>)
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005656:	4a61      	ldr	r2, [pc, #388]	; (80057dc <HAL_GPIO_Init+0x328>)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	3302      	adds	r3, #2
 800565e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005662:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	220f      	movs	r2, #15
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4013      	ands	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a58      	ldr	r2, [pc, #352]	; (80057e0 <HAL_GPIO_Init+0x32c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d037      	beq.n	80056f2 <HAL_GPIO_Init+0x23e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a57      	ldr	r2, [pc, #348]	; (80057e4 <HAL_GPIO_Init+0x330>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d031      	beq.n	80056ee <HAL_GPIO_Init+0x23a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a56      	ldr	r2, [pc, #344]	; (80057e8 <HAL_GPIO_Init+0x334>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02b      	beq.n	80056ea <HAL_GPIO_Init+0x236>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a55      	ldr	r2, [pc, #340]	; (80057ec <HAL_GPIO_Init+0x338>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d025      	beq.n	80056e6 <HAL_GPIO_Init+0x232>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a54      	ldr	r2, [pc, #336]	; (80057f0 <HAL_GPIO_Init+0x33c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01f      	beq.n	80056e2 <HAL_GPIO_Init+0x22e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a53      	ldr	r2, [pc, #332]	; (80057f4 <HAL_GPIO_Init+0x340>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d019      	beq.n	80056de <HAL_GPIO_Init+0x22a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a52      	ldr	r2, [pc, #328]	; (80057f8 <HAL_GPIO_Init+0x344>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_GPIO_Init+0x226>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a51      	ldr	r2, [pc, #324]	; (80057fc <HAL_GPIO_Init+0x348>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00d      	beq.n	80056d6 <HAL_GPIO_Init+0x222>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a50      	ldr	r2, [pc, #320]	; (8005800 <HAL_GPIO_Init+0x34c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <HAL_GPIO_Init+0x21e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a4f      	ldr	r2, [pc, #316]	; (8005804 <HAL_GPIO_Init+0x350>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d101      	bne.n	80056ce <HAL_GPIO_Init+0x21a>
 80056ca:	2309      	movs	r3, #9
 80056cc:	e012      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ce:	230a      	movs	r3, #10
 80056d0:	e010      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056d2:	2308      	movs	r3, #8
 80056d4:	e00e      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056d6:	2307      	movs	r3, #7
 80056d8:	e00c      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056da:	2306      	movs	r3, #6
 80056dc:	e00a      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056de:	2305      	movs	r3, #5
 80056e0:	e008      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056e2:	2304      	movs	r3, #4
 80056e4:	e006      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056e6:	2303      	movs	r3, #3
 80056e8:	e004      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e002      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <HAL_GPIO_Init+0x240>
 80056f2:	2300      	movs	r3, #0
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	f002 0203 	and.w	r2, r2, #3
 80056fa:	0092      	lsls	r2, r2, #2
 80056fc:	4093      	lsls	r3, r2
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4313      	orrs	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005704:	4935      	ldr	r1, [pc, #212]	; (80057dc <HAL_GPIO_Init+0x328>)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	3302      	adds	r3, #2
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005712:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800573c:	4b32      	ldr	r3, [pc, #200]	; (8005808 <HAL_GPIO_Init+0x354>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005760:	4a29      	ldr	r2, [pc, #164]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005766:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	43db      	mvns	r3, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4013      	ands	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800578a:	4a1f      	ldr	r2, [pc, #124]	; (8005808 <HAL_GPIO_Init+0x354>)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005790:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <HAL_GPIO_Init+0x354>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057b4:	4a14      	ldr	r2, [pc, #80]	; (8005808 <HAL_GPIO_Init+0x354>)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3301      	adds	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	f67f ae86 	bls.w	80054d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	3724      	adds	r7, #36	; 0x24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40013800 	.word	0x40013800
 80057e0:	40020000 	.word	0x40020000
 80057e4:	40020400 	.word	0x40020400
 80057e8:	40020800 	.word	0x40020800
 80057ec:	40020c00 	.word	0x40020c00
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40021400 	.word	0x40021400
 80057f8:	40021800 	.word	0x40021800
 80057fc:	40021c00 	.word	0x40021c00
 8005800:	40022000 	.word	0x40022000
 8005804:	40022400 	.word	0x40022400
 8005808:	40013c00 	.word	0x40013c00

0800580c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
 8005818:	4613      	mov	r3, r2
 800581a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800581c:	787b      	ldrb	r3, [r7, #1]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005822:	887a      	ldrh	r2, [r7, #2]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005828:	e003      	b.n	8005832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800582a:	887b      	ldrh	r3, [r7, #2]
 800582c:	041a      	lsls	r2, r3, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	619a      	str	r2, [r3, #24]
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e07f      	b.n	8005952 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fc fe3a 	bl	80024e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2224      	movs	r2, #36	; 0x24
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0201 	bic.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005890:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	e006      	b.n	80058c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d104      	bne.n	80058da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6859      	ldr	r1, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b1d      	ldr	r3, [pc, #116]	; (800595c <HAL_I2C_Init+0x11c>)
 80058e6:	430b      	orrs	r3, r1
 80058e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69d9      	ldr	r1, [r3, #28]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	02008000 	.word	0x02008000

08005960 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	4608      	mov	r0, r1
 800596a:	4611      	mov	r1, r2
 800596c:	461a      	mov	r2, r3
 800596e:	4603      	mov	r3, r0
 8005970:	817b      	strh	r3, [r7, #10]
 8005972:	460b      	mov	r3, r1
 8005974:	813b      	strh	r3, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b20      	cmp	r3, #32
 8005984:	f040 80f9 	bne.w	8005b7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_I2C_Mem_Write+0x34>
 800598e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800599a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0ed      	b.n	8005b7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_I2C_Mem_Write+0x4e>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e0e6      	b.n	8005b7c <HAL_I2C_Mem_Write+0x21c>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059b6:	f7fd fa73 	bl	8002ea0 <HAL_GetTick>
 80059ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2319      	movs	r3, #25
 80059c2:	2201      	movs	r2, #1
 80059c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f955 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0d1      	b.n	8005b7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2221      	movs	r2, #33	; 0x21
 80059dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2240      	movs	r2, #64	; 0x40
 80059e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a00:	88f8      	ldrh	r0, [r7, #6]
 8005a02:	893a      	ldrh	r2, [r7, #8]
 8005a04:	8979      	ldrh	r1, [r7, #10]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	4603      	mov	r3, r0
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f8b9 	bl	8005b88 <I2C_RequestMemoryWrite>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0a9      	b.n	8005b7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2bff      	cmp	r3, #255	; 0xff
 8005a30:	d90e      	bls.n	8005a50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	22ff      	movs	r2, #255	; 0xff
 8005a36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	8979      	ldrh	r1, [r7, #10]
 8005a40:	2300      	movs	r3, #0
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fab1 	bl	8005fb0 <I2C_TransferConfig>
 8005a4e:	e00f      	b.n	8005a70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	8979      	ldrh	r1, [r7, #10]
 8005a62:	2300      	movs	r3, #0
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 faa0 	bl	8005fb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f93f 	bl	8005cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e07b      	b.n	8005b7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	781a      	ldrb	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d034      	beq.n	8005b28 <HAL_I2C_Mem_Write+0x1c8>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d130      	bne.n	8005b28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	2200      	movs	r2, #0
 8005ace:	2180      	movs	r1, #128	; 0x80
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f8d1 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e04d      	b.n	8005b7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2bff      	cmp	r3, #255	; 0xff
 8005ae8:	d90e      	bls.n	8005b08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	22ff      	movs	r2, #255	; 0xff
 8005aee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	8979      	ldrh	r1, [r7, #10]
 8005af8:	2300      	movs	r3, #0
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fa55 	bl	8005fb0 <I2C_TransferConfig>
 8005b06:	e00f      	b.n	8005b28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	8979      	ldrh	r1, [r7, #10]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fa44 	bl	8005fb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d19e      	bne.n	8005a70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f91e 	bl	8005d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e01a      	b.n	8005b7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <HAL_I2C_Mem_Write+0x224>)
 8005b5a:	400b      	ands	r3, r1
 8005b5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	fe00e800 	.word	0xfe00e800

08005b88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	461a      	mov	r2, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	817b      	strh	r3, [r7, #10]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	813b      	strh	r3, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	8979      	ldrh	r1, [r7, #10]
 8005ba8:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <I2C_RequestMemoryWrite+0xa4>)
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f9fd 	bl	8005fb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	69b9      	ldr	r1, [r7, #24]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f89c 	bl	8005cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e02c      	b.n	8005c24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d105      	bne.n	8005bdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd0:	893b      	ldrh	r3, [r7, #8]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	629a      	str	r2, [r3, #40]	; 0x28
 8005bda:	e015      	b.n	8005c08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bdc:	893b      	ldrh	r3, [r7, #8]
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f882 	bl	8005cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e012      	b.n	8005c24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bfe:	893b      	ldrh	r3, [r7, #8]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2180      	movs	r1, #128	; 0x80
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f830 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	80002000 	.word	0x80002000

08005c30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d103      	bne.n	8005c4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d007      	beq.n	8005c6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	619a      	str	r2, [r3, #24]
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c88:	e022      	b.n	8005cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d01e      	beq.n	8005cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c92:	f7fd f905 	bl	8002ea0 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d113      	bne.n	8005cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cac:	f043 0220 	orr.w	r2, r3, #32
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e00f      	b.n	8005cf0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d0cd      	beq.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d04:	e02c      	b.n	8005d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f870 	bl	8005df0 <I2C_IsErrorOccurred>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e02a      	b.n	8005d70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d01e      	beq.n	8005d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d22:	f7fd f8bd 	bl	8002ea0 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d302      	bcc.n	8005d38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d113      	bne.n	8005d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	f043 0220 	orr.w	r2, r3, #32
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e007      	b.n	8005d70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d1cb      	bne.n	8005d06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d84:	e028      	b.n	8005dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f830 	bl	8005df0 <I2C_IsErrorOccurred>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e026      	b.n	8005de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9a:	f7fd f881 	bl	8002ea0 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d113      	bne.n	8005dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e007      	b.n	8005de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d1cf      	bne.n	8005d86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08a      	sub	sp, #40	; 0x28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d068      	beq.n	8005eee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2210      	movs	r2, #16
 8005e22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e24:	e049      	b.n	8005eba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d045      	beq.n	8005eba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fd f837 	bl	8002ea0 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <I2C_IsErrorOccurred+0x54>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d13a      	bne.n	8005eba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e66:	d121      	bne.n	8005eac <I2C_IsErrorOccurred+0xbc>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e6e:	d01d      	beq.n	8005eac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d01a      	beq.n	8005eac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e86:	f7fd f80b 	bl	8002ea0 <HAL_GetTick>
 8005e8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e8c:	e00e      	b.n	8005eac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e8e:	f7fd f807 	bl	8002ea0 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b19      	cmp	r3, #25
 8005e9a:	d907      	bls.n	8005eac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	f043 0320 	orr.w	r3, r3, #32
 8005ea2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005eaa:	e006      	b.n	8005eba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d1e9      	bne.n	8005e8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d003      	beq.n	8005ed0 <I2C_IsErrorOccurred+0xe0>
 8005ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0aa      	beq.n	8005e26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d103      	bne.n	8005ee0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2220      	movs	r2, #32
 8005ede:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	f043 0304 	orr.w	r3, r3, #4
 8005ee6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00b      	beq.n	8005f18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f043 0308 	orr.w	r3, r3, #8
 8005f28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f043 0302 	orr.w	r3, r3, #2
 8005f4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01c      	beq.n	8005f9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff fe63 	bl	8005c30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <I2C_IsErrorOccurred+0x1bc>)
 8005f76:	400b      	ands	r3, r1
 8005f78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3728      	adds	r7, #40	; 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	fe00e800 	.word	0xfe00e800

08005fb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fc2:	897b      	ldrh	r3, [r7, #10]
 8005fc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fc8:	7a7b      	ldrb	r3, [r7, #9]
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	0d5b      	lsrs	r3, r3, #21
 8005fea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005fee:	4b08      	ldr	r3, [pc, #32]	; (8006010 <I2C_TransferConfig+0x60>)
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	ea02 0103 	and.w	r1, r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	03ff63ff 	.word	0x03ff63ff

08006014 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b20      	cmp	r3, #32
 8006028:	d138      	bne.n	800609c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006034:	2302      	movs	r3, #2
 8006036:	e032      	b.n	800609e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2224      	movs	r2, #36	; 0x24
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006066:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6819      	ldr	r1, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e000      	b.n	800609e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d139      	bne.n	8006134 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e033      	b.n	8006136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2224      	movs	r2, #36	; 0x24
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0201 	bic.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	e000      	b.n	8006136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006134:	2302      	movs	r3, #2
  }
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006144:	b08f      	sub	sp, #60	; 0x3c
 8006146:	af0a      	add	r7, sp, #40	; 0x28
 8006148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e116      	b.n	8006382 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc fb26 	bl	80027c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2203      	movs	r2, #3
 8006178:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d102      	bne.n	800618e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f002 fdb2 	bl	8008cfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	687e      	ldr	r6, [r7, #4]
 80061a0:	466d      	mov	r5, sp
 80061a2:	f106 0410 	add.w	r4, r6, #16
 80061a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80061b6:	1d33      	adds	r3, r6, #4
 80061b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061ba:	6838      	ldr	r0, [r7, #0]
 80061bc:	f002 fd46 	bl	8008c4c <USB_CoreInit>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e0d7      	b.n	8006382 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f002 fda0 	bl	8008d1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e04a      	b.n	800627a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061e4:	7bfa      	ldrb	r2, [r7, #15]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	333d      	adds	r3, #61	; 0x3d
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061f8:	7bfa      	ldrb	r2, [r7, #15]
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	333c      	adds	r3, #60	; 0x3c
 8006208:	7bfa      	ldrb	r2, [r7, #15]
 800620a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800620c:	7bfa      	ldrb	r2, [r7, #15]
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	b298      	uxth	r0, r3
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	3344      	adds	r3, #68	; 0x44
 8006220:	4602      	mov	r2, r0
 8006222:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006224:	7bfa      	ldrb	r2, [r7, #15]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	3340      	adds	r3, #64	; 0x40
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006238:	7bfa      	ldrb	r2, [r7, #15]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	3348      	adds	r3, #72	; 0x48
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800624c:	7bfa      	ldrb	r2, [r7, #15]
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	334c      	adds	r3, #76	; 0x4c
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006260:	7bfa      	ldrb	r2, [r7, #15]
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	4613      	mov	r3, r2
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	4413      	add	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	3354      	adds	r3, #84	; 0x54
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	3301      	adds	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d3af      	bcc.n	80061e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]
 8006288:	e044      	b.n	8006314 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800628a:	7bfa      	ldrb	r2, [r7, #15]
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	4613      	mov	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80062b2:	7bfa      	ldrb	r2, [r7, #15]
 80062b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062b6:	7bfa      	ldrb	r2, [r7, #15]
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80062cc:	7bfa      	ldrb	r2, [r7, #15]
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062e2:	7bfa      	ldrb	r2, [r7, #15]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062f8:	7bfa      	ldrb	r2, [r7, #15]
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	440b      	add	r3, r1
 8006306:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	3301      	adds	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
 8006314:	7bfa      	ldrb	r2, [r7, #15]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	429a      	cmp	r2, r3
 800631c:	d3b5      	bcc.n	800628a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	687e      	ldr	r6, [r7, #4]
 8006326:	466d      	mov	r5, sp
 8006328:	f106 0410 	add.w	r4, r6, #16
 800632c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800632e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006334:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006338:	e885 0003 	stmia.w	r5, {r0, r1}
 800633c:	1d33      	adds	r3, r6, #4
 800633e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006340:	6838      	ldr	r0, [r7, #0]
 8006342:	f002 fd39 	bl	8008db8 <USB_DevInit>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e014      	b.n	8006382 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	2b01      	cmp	r3, #1
 800636e:	d102      	bne.n	8006376 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f80b 	bl	800638c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f002 fef7 	bl	800916e <USB_DevDisconnect>

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800638c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ba:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	10000003 	.word	0x10000003

080063d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a04      	ldr	r2, [pc, #16]	; (80063f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e2:	6013      	str	r3, [r2, #0]
}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40007000 	.word	0x40007000

080063f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80063fc:	2300      	movs	r3, #0
 80063fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e291      	b.n	800692e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8087 	beq.w	8006526 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006418:	4b96      	ldr	r3, [pc, #600]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 030c 	and.w	r3, r3, #12
 8006420:	2b04      	cmp	r3, #4
 8006422:	d00c      	beq.n	800643e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006424:	4b93      	ldr	r3, [pc, #588]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b08      	cmp	r3, #8
 800642e:	d112      	bne.n	8006456 <HAL_RCC_OscConfig+0x62>
 8006430:	4b90      	ldr	r3, [pc, #576]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643c:	d10b      	bne.n	8006456 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643e:	4b8d      	ldr	r3, [pc, #564]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d06c      	beq.n	8006524 <HAL_RCC_OscConfig+0x130>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d168      	bne.n	8006524 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e26b      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	d106      	bne.n	800646e <HAL_RCC_OscConfig+0x7a>
 8006460:	4b84      	ldr	r3, [pc, #528]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a83      	ldr	r2, [pc, #524]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e02e      	b.n	80064cc <HAL_RCC_OscConfig+0xd8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10c      	bne.n	8006490 <HAL_RCC_OscConfig+0x9c>
 8006476:	4b7f      	ldr	r3, [pc, #508]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a7e      	ldr	r2, [pc, #504]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800647c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4b7c      	ldr	r3, [pc, #496]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a7b      	ldr	r2, [pc, #492]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e01d      	b.n	80064cc <HAL_RCC_OscConfig+0xd8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0xc0>
 800649a:	4b76      	ldr	r3, [pc, #472]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a75      	ldr	r2, [pc, #468]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b73      	ldr	r3, [pc, #460]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a72      	ldr	r2, [pc, #456]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e00b      	b.n	80064cc <HAL_RCC_OscConfig+0xd8>
 80064b4:	4b6f      	ldr	r3, [pc, #444]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a6e      	ldr	r2, [pc, #440]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	4b6c      	ldr	r3, [pc, #432]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a6b      	ldr	r2, [pc, #428]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d013      	beq.n	80064fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fc fce4 	bl	8002ea0 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064dc:	f7fc fce0 	bl	8002ea0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	; 0x64
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e21f      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ee:	4b61      	ldr	r3, [pc, #388]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0xe8>
 80064fa:	e014      	b.n	8006526 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fc fcd0 	bl	8002ea0 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006504:	f7fc fccc 	bl	8002ea0 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	; 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e20b      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006516:	4b57      	ldr	r3, [pc, #348]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x110>
 8006522:	e000      	b.n	8006526 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d069      	beq.n	8006606 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006532:	4b50      	ldr	r3, [pc, #320]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 030c 	and.w	r3, r3, #12
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800653e:	4b4d      	ldr	r3, [pc, #308]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b08      	cmp	r3, #8
 8006548:	d11c      	bne.n	8006584 <HAL_RCC_OscConfig+0x190>
 800654a:	4b4a      	ldr	r3, [pc, #296]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d116      	bne.n	8006584 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006556:	4b47      	ldr	r3, [pc, #284]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_RCC_OscConfig+0x17a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d001      	beq.n	800656e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e1df      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656e:	4b41      	ldr	r3, [pc, #260]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	493d      	ldr	r1, [pc, #244]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800657e:	4313      	orrs	r3, r2
 8006580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006582:	e040      	b.n	8006606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d023      	beq.n	80065d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800658c:	4b39      	ldr	r3, [pc, #228]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a38      	ldr	r2, [pc, #224]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fc fc82 	bl	8002ea0 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a0:	f7fc fc7e 	bl	8002ea0 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e1bd      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b2:	4b30      	ldr	r3, [pc, #192]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065be:	4b2d      	ldr	r3, [pc, #180]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4929      	ldr	r1, [pc, #164]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]
 80065d2:	e018      	b.n	8006606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065d4:	4b27      	ldr	r3, [pc, #156]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a26      	ldr	r2, [pc, #152]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e0:	f7fc fc5e 	bl	8002ea0 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e8:	f7fc fc5a 	bl	8002ea0 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e199      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065fa:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d038      	beq.n	8006684 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d019      	beq.n	800664e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800661a:	4b16      	ldr	r3, [pc, #88]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800661c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661e:	4a15      	ldr	r2, [pc, #84]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006626:	f7fc fc3b 	bl	8002ea0 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800662e:	f7fc fc37 	bl	8002ea0 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e176      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006640:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x23a>
 800664c:	e01a      	b.n	8006684 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800664e:	4b09      	ldr	r3, [pc, #36]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006652:	4a08      	ldr	r2, [pc, #32]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665a:	f7fc fc21 	bl	8002ea0 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006660:	e00a      	b.n	8006678 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006662:	f7fc fc1d 	bl	8002ea0 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d903      	bls.n	8006678 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e15c      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
 8006674:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006678:	4b91      	ldr	r3, [pc, #580]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800667a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1ee      	bne.n	8006662 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80a4 	beq.w	80067da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006692:	4b8b      	ldr	r3, [pc, #556]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800669e:	4b88      	ldr	r3, [pc, #544]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	4a87      	ldr	r2, [pc, #540]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80066a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a8:	6413      	str	r3, [r2, #64]	; 0x40
 80066aa:	4b85      	ldr	r3, [pc, #532]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ba:	4b82      	ldr	r3, [pc, #520]	; (80068c4 <HAL_RCC_OscConfig+0x4d0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d118      	bne.n	80066f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066c6:	4b7f      	ldr	r3, [pc, #508]	; (80068c4 <HAL_RCC_OscConfig+0x4d0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a7e      	ldr	r2, [pc, #504]	; (80068c4 <HAL_RCC_OscConfig+0x4d0>)
 80066cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066d2:	f7fc fbe5 	bl	8002ea0 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066da:	f7fc fbe1 	bl	8002ea0 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b64      	cmp	r3, #100	; 0x64
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e120      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ec:	4b75      	ldr	r3, [pc, #468]	; (80068c4 <HAL_RCC_OscConfig+0x4d0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d106      	bne.n	800670e <HAL_RCC_OscConfig+0x31a>
 8006700:	4b6f      	ldr	r3, [pc, #444]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006704:	4a6e      	ldr	r2, [pc, #440]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	6713      	str	r3, [r2, #112]	; 0x70
 800670c:	e02d      	b.n	800676a <HAL_RCC_OscConfig+0x376>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10c      	bne.n	8006730 <HAL_RCC_OscConfig+0x33c>
 8006716:	4b6a      	ldr	r3, [pc, #424]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	4a69      	ldr	r2, [pc, #420]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	6713      	str	r3, [r2, #112]	; 0x70
 8006722:	4b67      	ldr	r3, [pc, #412]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a66      	ldr	r2, [pc, #408]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	6713      	str	r3, [r2, #112]	; 0x70
 800672e:	e01c      	b.n	800676a <HAL_RCC_OscConfig+0x376>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b05      	cmp	r3, #5
 8006736:	d10c      	bne.n	8006752 <HAL_RCC_OscConfig+0x35e>
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a60      	ldr	r2, [pc, #384]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800673e:	f043 0304 	orr.w	r3, r3, #4
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
 8006744:	4b5e      	ldr	r3, [pc, #376]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a5d      	ldr	r2, [pc, #372]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
 8006750:	e00b      	b.n	800676a <HAL_RCC_OscConfig+0x376>
 8006752:	4b5b      	ldr	r3, [pc, #364]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	4a5a      	ldr	r2, [pc, #360]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	6713      	str	r3, [r2, #112]	; 0x70
 800675e:	4b58      	ldr	r3, [pc, #352]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	4a57      	ldr	r2, [pc, #348]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d015      	beq.n	800679e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006772:	f7fc fb95 	bl	8002ea0 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006778:	e00a      	b.n	8006790 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677a:	f7fc fb91 	bl	8002ea0 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	f241 3288 	movw	r2, #5000	; 0x1388
 8006788:	4293      	cmp	r3, r2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e0ce      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006790:	4b4b      	ldr	r3, [pc, #300]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0ee      	beq.n	800677a <HAL_RCC_OscConfig+0x386>
 800679c:	e014      	b.n	80067c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679e:	f7fc fb7f 	bl	8002ea0 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a4:	e00a      	b.n	80067bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f7fc fb7b 	bl	8002ea0 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0b8      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067bc:	4b40      	ldr	r3, [pc, #256]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ee      	bne.n	80067a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d105      	bne.n	80067da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ce:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	4a3b      	ldr	r2, [pc, #236]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80a4 	beq.w	800692c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067e4:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 030c 	and.w	r3, r3, #12
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d06b      	beq.n	80068c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d149      	bne.n	800688c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f8:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a30      	ldr	r2, [pc, #192]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fc fb4c 	bl	8002ea0 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800680c:	f7fc fb48 	bl	8002ea0 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e087      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	019b      	lsls	r3, r3, #6
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	3b01      	subs	r3, #1
 8006844:	041b      	lsls	r3, r3, #16
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	061b      	lsls	r3, r3, #24
 800684e:	4313      	orrs	r3, r2
 8006850:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006856:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006858:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800685e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006864:	f7fc fb1c 	bl	8002ea0 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800686c:	f7fc fb18 	bl	8002ea0 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e057      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687e:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x478>
 800688a:	e04f      	b.n	800692c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fc fb02 	bl	8002ea0 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a0:	f7fc fafe 	bl	8002ea0 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e03d      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068b2:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f0      	bne.n	80068a0 <HAL_RCC_OscConfig+0x4ac>
 80068be:	e035      	b.n	800692c <HAL_RCC_OscConfig+0x538>
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80068c8:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <HAL_RCC_OscConfig+0x544>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d028      	beq.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d121      	bne.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d11a      	bne.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068f8:	4013      	ands	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006900:	4293      	cmp	r3, r2
 8006902:	d111      	bne.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	3b01      	subs	r3, #1
 8006912:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006914:	429a      	cmp	r2, r3
 8006916:	d107      	bne.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40023800 	.word	0x40023800

0800693c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0d0      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006954:	4b6a      	ldr	r3, [pc, #424]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d910      	bls.n	8006984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006962:	4b67      	ldr	r3, [pc, #412]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 020f 	bic.w	r2, r3, #15
 800696a:	4965      	ldr	r1, [pc, #404]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	4b63      	ldr	r3, [pc, #396]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d001      	beq.n	8006984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0b8      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d020      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800699c:	4b59      	ldr	r3, [pc, #356]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4a58      	ldr	r2, [pc, #352]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069b4:	4b53      	ldr	r3, [pc, #332]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	4a52      	ldr	r2, [pc, #328]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069c0:	4b50      	ldr	r3, [pc, #320]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	494d      	ldr	r1, [pc, #308]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d040      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d107      	bne.n	80069f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e6:	4b47      	ldr	r3, [pc, #284]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d115      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e07f      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d107      	bne.n	8006a0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069fe:	4b41      	ldr	r3, [pc, #260]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e073      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a0e:	4b3d      	ldr	r3, [pc, #244]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e06b      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a1e:	4b39      	ldr	r3, [pc, #228]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f023 0203 	bic.w	r2, r3, #3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4936      	ldr	r1, [pc, #216]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a30:	f7fc fa36 	bl	8002ea0 <HAL_GetTick>
 8006a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a36:	e00a      	b.n	8006a4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a38:	f7fc fa32 	bl	8002ea0 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e053      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4e:	4b2d      	ldr	r3, [pc, #180]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 020c 	and.w	r2, r3, #12
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d1eb      	bne.n	8006a38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d210      	bcs.n	8006a90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f023 020f 	bic.w	r2, r3, #15
 8006a76:	4922      	ldr	r1, [pc, #136]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7e:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e032      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a9c:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4916      	ldr	r1, [pc, #88]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006aba:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	490e      	ldr	r1, [pc, #56]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ace:	f000 f821 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	091b      	lsrs	r3, r3, #4
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	490a      	ldr	r1, [pc, #40]	; (8006b08 <HAL_RCC_ClockConfig+0x1cc>)
 8006ae0:	5ccb      	ldrb	r3, [r1, r3]
 8006ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <HAL_RCC_ClockConfig+0x1d0>)
 8006ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006aea:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <HAL_RCC_ClockConfig+0x1d4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fc f992 	bl	8002e18 <HAL_InitTick>

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40023c00 	.word	0x40023c00
 8006b04:	40023800 	.word	0x40023800
 8006b08:	0801c3a0 	.word	0x0801c3a0
 8006b0c:	20000038 	.word	0x20000038
 8006b10:	2000003c 	.word	0x2000003c

08006b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b18:	b094      	sub	sp, #80	; 0x50
 8006b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b20:	2300      	movs	r3, #0
 8006b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b24:	2300      	movs	r3, #0
 8006b26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b2c:	4b79      	ldr	r3, [pc, #484]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d00d      	beq.n	8006b54 <HAL_RCC_GetSysClockFreq+0x40>
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	f200 80e1 	bhi.w	8006d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_RCC_GetSysClockFreq+0x34>
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d003      	beq.n	8006b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006b46:	e0db      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b48:	4b73      	ldr	r3, [pc, #460]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b4c:	e0db      	b.n	8006d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b4e:	4b73      	ldr	r3, [pc, #460]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8006b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b52:	e0d8      	b.n	8006d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b54:	4b6f      	ldr	r3, [pc, #444]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b5e:	4b6d      	ldr	r3, [pc, #436]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d063      	beq.n	8006c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b6a:	4b6a      	ldr	r3, [pc, #424]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	099b      	lsrs	r3, r3, #6
 8006b70:	2200      	movs	r2, #0
 8006b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b7e:	2300      	movs	r3, #0
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
 8006b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b86:	4622      	mov	r2, r4
 8006b88:	462b      	mov	r3, r5
 8006b8a:	f04f 0000 	mov.w	r0, #0
 8006b8e:	f04f 0100 	mov.w	r1, #0
 8006b92:	0159      	lsls	r1, r3, #5
 8006b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b98:	0150      	lsls	r0, r2, #5
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	1a51      	subs	r1, r2, r1
 8006ba2:	6139      	str	r1, [r7, #16]
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bb8:	4659      	mov	r1, fp
 8006bba:	018b      	lsls	r3, r1, #6
 8006bbc:	4651      	mov	r1, sl
 8006bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bc2:	4651      	mov	r1, sl
 8006bc4:	018a      	lsls	r2, r1, #6
 8006bc6:	4651      	mov	r1, sl
 8006bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8006bcc:	4659      	mov	r1, fp
 8006bce:	eb63 0901 	sbc.w	r9, r3, r1
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006be6:	4690      	mov	r8, r2
 8006be8:	4699      	mov	r9, r3
 8006bea:	4623      	mov	r3, r4
 8006bec:	eb18 0303 	adds.w	r3, r8, r3
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	eb49 0303 	adc.w	r3, r9, r3
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c06:	4629      	mov	r1, r5
 8006c08:	024b      	lsls	r3, r1, #9
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c10:	4621      	mov	r1, r4
 8006c12:	024a      	lsls	r2, r1, #9
 8006c14:	4610      	mov	r0, r2
 8006c16:	4619      	mov	r1, r3
 8006c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c24:	f7f9 fb4c 	bl	80002c0 <__aeabi_uldivmod>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c30:	e058      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c32:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	099b      	lsrs	r3, r3, #6
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c42:	623b      	str	r3, [r7, #32]
 8006c44:	2300      	movs	r3, #0
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
 8006c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	464b      	mov	r3, r9
 8006c50:	f04f 0000 	mov.w	r0, #0
 8006c54:	f04f 0100 	mov.w	r1, #0
 8006c58:	0159      	lsls	r1, r3, #5
 8006c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c5e:	0150      	lsls	r0, r2, #5
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4641      	mov	r1, r8
 8006c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c84:	ebb2 040a 	subs.w	r4, r2, sl
 8006c88:	eb63 050b 	sbc.w	r5, r3, fp
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	00eb      	lsls	r3, r5, #3
 8006c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c9a:	00e2      	lsls	r2, r4, #3
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	4643      	mov	r3, r8
 8006ca2:	18e3      	adds	r3, r4, r3
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	eb45 0303 	adc.w	r3, r5, r3
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cba:	4629      	mov	r1, r5
 8006cbc:	028b      	lsls	r3, r1, #10
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	028a      	lsls	r2, r1, #10
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cce:	2200      	movs	r2, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cd8:	f7f9 faf2 	bl	80002c0 <__aeabi_uldivmod>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	3301      	adds	r3, #1
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cfe:	e002      	b.n	8006d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3750      	adds	r7, #80	; 0x50
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d12:	bf00      	nop
 8006d14:	40023800 	.word	0x40023800
 8006d18:	00f42400 	.word	0x00f42400
 8006d1c:	007a1200 	.word	0x007a1200

08006d20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d24:	4b03      	ldr	r3, [pc, #12]	; (8006d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d26:	681b      	ldr	r3, [r3, #0]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	20000038 	.word	0x20000038

08006d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d3c:	f7ff fff0 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8006d40:	4602      	mov	r2, r0
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	0a9b      	lsrs	r3, r3, #10
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	4903      	ldr	r1, [pc, #12]	; (8006d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d4e:	5ccb      	ldrb	r3, [r1, r3]
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	0801c3b0 	.word	0x0801c3b0

08006d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d64:	f7ff ffdc 	bl	8006d20 <HAL_RCC_GetHCLKFreq>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	0b5b      	lsrs	r3, r3, #13
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	4903      	ldr	r1, [pc, #12]	; (8006d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d76:	5ccb      	ldrb	r3, [r1, r3]
 8006d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40023800 	.word	0x40023800
 8006d84:	0801c3b0 	.word	0x0801c3b0

08006d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d012      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006db0:	4b69      	ldr	r3, [pc, #420]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4a68      	ldr	r2, [pc, #416]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dba:	6093      	str	r3, [r2, #8]
 8006dbc:	4b66      	ldr	r3, [pc, #408]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	4964      	ldr	r1, [pc, #400]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d017      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006de2:	4b5d      	ldr	r3, [pc, #372]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df0:	4959      	ldr	r1, [pc, #356]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e00:	d101      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e02:	2301      	movs	r3, #1
 8006e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d017      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e1e:	4b4e      	ldr	r3, [pc, #312]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	494a      	ldr	r1, [pc, #296]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e3c:	d101      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 808b 	beq.w	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e6c:	4b3a      	ldr	r3, [pc, #232]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	4a39      	ldr	r2, [pc, #228]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e76:	6413      	str	r3, [r2, #64]	; 0x40
 8006e78:	4b37      	ldr	r3, [pc, #220]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e84:	4b35      	ldr	r3, [pc, #212]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a34      	ldr	r2, [pc, #208]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e90:	f7fc f806 	bl	8002ea0 <HAL_GetTick>
 8006e94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e98:	f7fc f802 	bl	8002ea0 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b64      	cmp	r3, #100	; 0x64
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e357      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006eaa:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f0      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eb6:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d035      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d02e      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ed4:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006edc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ede:	4b1e      	ldr	r3, [pc, #120]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eea:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ef6:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006efc:	4b16      	ldr	r3, [pc, #88]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d114      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f08:	f7fb ffca 	bl	8002ea0 <HAL_GetTick>
 8006f0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f0e:	e00a      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f10:	f7fb ffc6 	bl	8002ea0 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e319      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f26:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0ee      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f3e:	d111      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f4c:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f4e:	400b      	ands	r3, r1
 8006f50:	4901      	ldr	r1, [pc, #4]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	608b      	str	r3, [r1, #8]
 8006f56:	e00b      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	40007000 	.word	0x40007000
 8006f60:	0ffffcff 	.word	0x0ffffcff
 8006f64:	4baa      	ldr	r3, [pc, #680]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4aa9      	ldr	r2, [pc, #676]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f6e:	6093      	str	r3, [r2, #8]
 8006f70:	4ba7      	ldr	r3, [pc, #668]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f7c:	49a4      	ldr	r1, [pc, #656]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0310 	and.w	r3, r3, #16
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d010      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f8e:	4ba0      	ldr	r3, [pc, #640]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f94:	4a9e      	ldr	r2, [pc, #632]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006f9e:	4b9c      	ldr	r3, [pc, #624]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	4999      	ldr	r1, [pc, #612]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fbc:	4b94      	ldr	r3, [pc, #592]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fca:	4991      	ldr	r1, [pc, #580]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fde:	4b8c      	ldr	r3, [pc, #560]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fec:	4988      	ldr	r1, [pc, #544]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007000:	4b83      	ldr	r3, [pc, #524]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800700e:	4980      	ldr	r1, [pc, #512]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007010:	4313      	orrs	r3, r2
 8007012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007022:	4b7b      	ldr	r3, [pc, #492]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007030:	4977      	ldr	r1, [pc, #476]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007044:	4b72      	ldr	r3, [pc, #456]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704a:	f023 0203 	bic.w	r2, r3, #3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007052:	496f      	ldr	r1, [pc, #444]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007054:	4313      	orrs	r3, r2
 8007056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007066:	4b6a      	ldr	r3, [pc, #424]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706c:	f023 020c 	bic.w	r2, r3, #12
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007074:	4966      	ldr	r1, [pc, #408]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007076:	4313      	orrs	r3, r2
 8007078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007088:	4b61      	ldr	r3, [pc, #388]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007096:	495e      	ldr	r1, [pc, #376]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007098:	4313      	orrs	r3, r2
 800709a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070aa:	4b59      	ldr	r3, [pc, #356]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b8:	4955      	ldr	r1, [pc, #340]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070cc:	4b50      	ldr	r3, [pc, #320]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	494d      	ldr	r1, [pc, #308]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80070ee:	4b48      	ldr	r3, [pc, #288]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fc:	4944      	ldr	r1, [pc, #272]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007110:	4b3f      	ldr	r3, [pc, #252]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711e:	493c      	ldr	r1, [pc, #240]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007132:	4b37      	ldr	r3, [pc, #220]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007140:	4933      	ldr	r1, [pc, #204]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007154:	4b2e      	ldr	r3, [pc, #184]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007162:	492b      	ldr	r1, [pc, #172]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d011      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007176:	4b26      	ldr	r3, [pc, #152]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007184:	4922      	ldr	r1, [pc, #136]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007194:	d101      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007196:	2301      	movs	r3, #1
 8007198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80071a6:	2301      	movs	r3, #1
 80071a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071b6:	4b16      	ldr	r3, [pc, #88]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c4:	4912      	ldr	r1, [pc, #72]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071d8:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e8:	4909      	ldr	r1, [pc, #36]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d006      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 80d9 	beq.w	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007204:	4b02      	ldr	r3, [pc, #8]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a01      	ldr	r2, [pc, #4]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800720a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800720e:	e001      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007210:	40023800 	.word	0x40023800
 8007214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007216:	f7fb fe43 	bl	8002ea0 <HAL_GetTick>
 800721a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800721c:	e008      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800721e:	f7fb fe3f 	bl	8002ea0 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b64      	cmp	r3, #100	; 0x64
 800722a:	d901      	bls.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e194      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007230:	4b6c      	ldr	r3, [pc, #432]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f0      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d021      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724c:	2b00      	cmp	r3, #0
 800724e:	d11d      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007250:	4b64      	ldr	r3, [pc, #400]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007256:	0c1b      	lsrs	r3, r3, #16
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800725e:	4b61      	ldr	r3, [pc, #388]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007264:	0e1b      	lsrs	r3, r3, #24
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	019a      	lsls	r2, r3, #6
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	431a      	orrs	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	061b      	lsls	r3, r3, #24
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	071b      	lsls	r3, r3, #28
 8007284:	4957      	ldr	r1, [pc, #348]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007286:	4313      	orrs	r3, r2
 8007288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a0:	d00a      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d02e      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072b6:	d129      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072b8:	4b4a      	ldr	r3, [pc, #296]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072be:	0c1b      	lsrs	r3, r3, #16
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072c6:	4b47      	ldr	r3, [pc, #284]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072cc:	0f1b      	lsrs	r3, r3, #28
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	019a      	lsls	r2, r3, #6
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	041b      	lsls	r3, r3, #16
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	061b      	lsls	r3, r3, #24
 80072e6:	431a      	orrs	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	071b      	lsls	r3, r3, #28
 80072ec:	493d      	ldr	r1, [pc, #244]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072f4:	4b3b      	ldr	r3, [pc, #236]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072fa:	f023 021f 	bic.w	r2, r3, #31
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	3b01      	subs	r3, #1
 8007304:	4937      	ldr	r1, [pc, #220]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01d      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007318:	4b32      	ldr	r3, [pc, #200]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800731a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731e:	0e1b      	lsrs	r3, r3, #24
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007326:	4b2f      	ldr	r3, [pc, #188]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732c:	0f1b      	lsrs	r3, r3, #28
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	019a      	lsls	r2, r3, #6
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	431a      	orrs	r2, r3
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	061b      	lsls	r3, r3, #24
 8007346:	431a      	orrs	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	071b      	lsls	r3, r3, #28
 800734c:	4925      	ldr	r1, [pc, #148]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d011      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	019a      	lsls	r2, r3, #6
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	061b      	lsls	r3, r3, #24
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	071b      	lsls	r3, r3, #28
 800737c:	4919      	ldr	r1, [pc, #100]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007384:	4b17      	ldr	r3, [pc, #92]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a16      	ldr	r2, [pc, #88]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800738a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800738e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007390:	f7fb fd86 	bl	8002ea0 <HAL_GetTick>
 8007394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007398:	f7fb fd82 	bl	8002ea0 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b64      	cmp	r3, #100	; 0x64
 80073a4:	d901      	bls.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e0d7      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073aa:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0f0      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	f040 80cd 	bne.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a08      	ldr	r2, [pc, #32]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ca:	f7fb fd69 	bl	8002ea0 <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073d0:	e00a      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073d2:	f7fb fd65 	bl	8002ea0 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b64      	cmp	r3, #100	; 0x64
 80073de:	d903      	bls.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e0ba      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80073e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073e8:	4b5e      	ldr	r3, [pc, #376]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f4:	d0ed      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02e      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d12a      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800741e:	4b51      	ldr	r3, [pc, #324]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800742c:	4b4d      	ldr	r3, [pc, #308]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007432:	0f1b      	lsrs	r3, r3, #28
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	019a      	lsls	r2, r3, #6
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	061b      	lsls	r3, r3, #24
 800744c:	431a      	orrs	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	071b      	lsls	r3, r3, #28
 8007452:	4944      	ldr	r1, [pc, #272]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007454:	4313      	orrs	r3, r2
 8007456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800745a:	4b42      	ldr	r3, [pc, #264]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800745c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007460:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	493d      	ldr	r1, [pc, #244]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d022      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007488:	d11d      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800748a:	4b36      	ldr	r3, [pc, #216]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007498:	4b32      	ldr	r3, [pc, #200]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749e:	0f1b      	lsrs	r3, r3, #28
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	019a      	lsls	r2, r3, #6
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	431a      	orrs	r2, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	061b      	lsls	r3, r3, #24
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	071b      	lsls	r3, r3, #28
 80074be:	4929      	ldr	r1, [pc, #164]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d028      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074d2:	4b24      	ldr	r3, [pc, #144]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d8:	0e1b      	lsrs	r3, r3, #24
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074e0:	4b20      	ldr	r3, [pc, #128]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e6:	0c1b      	lsrs	r3, r3, #16
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	019a      	lsls	r2, r3, #6
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	041b      	lsls	r3, r3, #16
 80074f8:	431a      	orrs	r2, r3
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	061b      	lsls	r3, r3, #24
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	071b      	lsls	r3, r3, #28
 8007506:	4917      	ldr	r1, [pc, #92]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800750e:	4b15      	ldr	r3, [pc, #84]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	4911      	ldr	r1, [pc, #68]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007524:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a0e      	ldr	r2, [pc, #56]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800752a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800752e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007530:	f7fb fcb6 	bl	8002ea0 <HAL_GetTick>
 8007534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007536:	e008      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007538:	f7fb fcb2 	bl	8002ea0 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b64      	cmp	r3, #100	; 0x64
 8007544:	d901      	bls.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e007      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800754a:	4b06      	ldr	r3, [pc, #24]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007556:	d1ef      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40023800 	.word	0x40023800

08007568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e040      	b.n	80075fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fb f806 	bl	800259c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2224      	movs	r2, #36	; 0x24
 8007594:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0201 	bic.w	r2, r2, #1
 80075a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fbc0 	bl	8007d2c <UART_SetConfig>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e022      	b.n	80075fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fe18 	bl	80081f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fe9f 	bl	8008338 <UART_CheckIdleState>
 80075fa:	4603      	mov	r3, r0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007604:	b480      	push	{r7}
 8007606:	b08b      	sub	sp, #44	; 0x2c
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007616:	2b20      	cmp	r3, #32
 8007618:	d147      	bne.n	80076aa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_UART_Transmit_IT+0x22>
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e040      	b.n	80076ac <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	88fa      	ldrh	r2, [r7, #6]
 8007634:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	88fa      	ldrh	r2, [r7, #6]
 800763c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2221      	movs	r2, #33	; 0x21
 8007652:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765c:	d107      	bne.n	800766e <HAL_UART_Transmit_IT+0x6a>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4a13      	ldr	r2, [pc, #76]	; (80076b8 <HAL_UART_Transmit_IT+0xb4>)
 800766a:	66da      	str	r2, [r3, #108]	; 0x6c
 800766c:	e002      	b.n	8007674 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4a12      	ldr	r2, [pc, #72]	; (80076bc <HAL_UART_Transmit_IT+0xb8>)
 8007672:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	613b      	str	r3, [r7, #16]
   return(result);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	623b      	str	r3, [r7, #32]
 8007694:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	69f9      	ldr	r1, [r7, #28]
 8007698:	6a3a      	ldr	r2, [r7, #32]
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	61bb      	str	r3, [r7, #24]
   return(result);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e6      	bne.n	8007674 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e000      	b.n	80076ac <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80076aa:	2302      	movs	r3, #2
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	372c      	adds	r7, #44	; 0x2c
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	0800886b 	.word	0x0800886b
 80076bc:	080087b5 	.word	0x080087b5

080076c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	; 0x28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d132      	bne.n	800773e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_UART_Receive_IT+0x24>
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e02b      	b.n	8007740 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d018      	beq.n	800772e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	613b      	str	r3, [r7, #16]
   return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	623b      	str	r3, [r7, #32]
 800771c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	69f9      	ldr	r1, [r7, #28]
 8007720:	6a3a      	ldr	r2, [r7, #32]
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	61bb      	str	r3, [r7, #24]
   return(result);
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e6      	bne.n	80076fc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	461a      	mov	r2, r3
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fefd 	bl	8008534 <UART_Start_Receive_IT>
 800773a:	4603      	mov	r3, r0
 800773c:	e000      	b.n	8007740 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800773e:	2302      	movs	r3, #2
  }
}
 8007740:	4618      	mov	r0, r3
 8007742:	3728      	adds	r7, #40	; 0x28
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b0ba      	sub	sp, #232	; 0xe8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800776e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007772:	f640 030f 	movw	r3, #2063	; 0x80f
 8007776:	4013      	ands	r3, r2
 8007778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800777c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d115      	bne.n	80077b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00f      	beq.n	80077b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	f003 0320 	and.w	r3, r3, #32
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8297 	beq.w	8007cd4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
      }
      return;
 80077ae:	e291      	b.n	8007cd4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8117 	beq.w	80079e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077ca:	4b85      	ldr	r3, [pc, #532]	; (80079e0 <HAL_UART_IRQHandler+0x298>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 810a 	beq.w	80079e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d011      	beq.n	8007804 <HAL_UART_IRQHandler+0xbc>
 80077e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2201      	movs	r2, #1
 80077f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fa:	f043 0201 	orr.w	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d011      	beq.n	8007834 <HAL_UART_IRQHandler+0xec>
 8007810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2202      	movs	r2, #2
 8007822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800782a:	f043 0204 	orr.w	r2, r3, #4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d011      	beq.n	8007864 <HAL_UART_IRQHandler+0x11c>
 8007840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2204      	movs	r2, #4
 8007852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785a:	f043 0202 	orr.w	r2, r3, #2
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b00      	cmp	r3, #0
 800786e:	d017      	beq.n	80078a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d105      	bne.n	8007888 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800787c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007880:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2208      	movs	r2, #8
 800788e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007896:	f043 0208 	orr.w	r2, r3, #8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d012      	beq.n	80078d2 <HAL_UART_IRQHandler+0x18a>
 80078ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00c      	beq.n	80078d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c8:	f043 0220 	orr.w	r2, r3, #32
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 81fd 	beq.w	8007cd8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00d      	beq.n	8007906 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800790c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d005      	beq.n	800792a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800791e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007922:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007926:	2b00      	cmp	r3, #0
 8007928:	d04f      	beq.n	80079ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fec8 	bl	80086c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	d141      	bne.n	80079c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800795c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3308      	adds	r3, #8
 8007966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800796a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800796e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1d9      	bne.n	800793e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800798e:	2b00      	cmp	r3, #0
 8007990:	d013      	beq.n	80079ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007996:	4a13      	ldr	r2, [pc, #76]	; (80079e4 <HAL_UART_IRQHandler+0x29c>)
 8007998:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fc f944 	bl	8003c2c <HAL_DMA_Abort_IT>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d017      	beq.n	80079da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079b4:	4610      	mov	r0, r2
 80079b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b8:	e00f      	b.n	80079da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f9a0 	bl	8007d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c0:	e00b      	b.n	80079da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f99c 	bl	8007d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c8:	e007      	b.n	80079da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f998 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80079d8:	e17e      	b.n	8007cd8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079da:	bf00      	nop
    return;
 80079dc:	e17c      	b.n	8007cd8 <HAL_UART_IRQHandler+0x590>
 80079de:	bf00      	nop
 80079e0:	04000120 	.word	0x04000120
 80079e4:	08008789 	.word	0x08008789

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	f040 814c 	bne.w	8007c8a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0310 	and.w	r3, r3, #16
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8145 	beq.w	8007c8a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 813e 	beq.w	8007c8a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2210      	movs	r2, #16
 8007a14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	f040 80b6 	bne.w	8007b92 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 8150 	beq.w	8007cdc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a46:	429a      	cmp	r2, r3
 8007a48:	f080 8148 	bcs.w	8007cdc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a60:	f000 8086 	beq.w	8007b70 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1da      	bne.n	8007a64 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ac0:	f023 0301 	bic.w	r3, r3, #1
 8007ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3308      	adds	r3, #8
 8007ace:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ad2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ada:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e1      	bne.n	8007aae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3308      	adds	r3, #8
 8007b0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e3      	bne.n	8007aea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b40:	f023 0310 	bic.w	r3, r3, #16
 8007b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b52:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e4      	bne.n	8007b30 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fb ffee 	bl	8003b4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f8c2 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b90:	e0a4      	b.n	8007cdc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8096 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 8091 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007be0:	647b      	str	r3, [r7, #68]	; 0x44
 8007be2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e4      	bne.n	8007bbe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	e853 3f00 	ldrex	r3, [r3]
 8007c02:	623b      	str	r3, [r7, #32]
   return(result);
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3308      	adds	r3, #8
 8007c14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c18:	633a      	str	r2, [r7, #48]	; 0x30
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c20:	e841 2300 	strex	r3, r2, [r1]
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1e3      	bne.n	8007bf4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f023 0310 	bic.w	r3, r3, #16
 8007c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c62:	61fb      	str	r3, [r7, #28]
 8007c64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	69b9      	ldr	r1, [r7, #24]
 8007c68:	69fa      	ldr	r2, [r7, #28]
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e4      	bne.n	8007c40 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f846 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c88:	e02a      	b.n	8007ce0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00e      	beq.n	8007cb4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d008      	beq.n	8007cb4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01c      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
    }
    return;
 8007cb2:	e017      	b.n	8007ce4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d012      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x59e>
 8007cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00c      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fe2c 	bl	800892a <UART_EndTransmit_IT>
    return;
 8007cd2:	e008      	b.n	8007ce6 <HAL_UART_IRQHandler+0x59e>
      return;
 8007cd4:	bf00      	nop
 8007cd6:	e006      	b.n	8007ce6 <HAL_UART_IRQHandler+0x59e>
    return;
 8007cd8:	bf00      	nop
 8007cda:	e004      	b.n	8007ce6 <HAL_UART_IRQHandler+0x59e>
      return;
 8007cdc:	bf00      	nop
 8007cde:	e002      	b.n	8007ce6 <HAL_UART_IRQHandler+0x59e>
      return;
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <HAL_UART_IRQHandler+0x59e>
    return;
 8007ce4:	bf00      	nop
  }

}
 8007ce6:	37e8      	adds	r7, #232	; 0xe8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	4ba6      	ldr	r3, [pc, #664]	; (8007ff0 <UART_SetConfig+0x2c4>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	6979      	ldr	r1, [r7, #20]
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a94      	ldr	r2, [pc, #592]	; (8007ff4 <UART_SetConfig+0x2c8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d120      	bne.n	8007dea <UART_SetConfig+0xbe>
 8007da8:	4b93      	ldr	r3, [pc, #588]	; (8007ff8 <UART_SetConfig+0x2cc>)
 8007daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d816      	bhi.n	8007de4 <UART_SetConfig+0xb8>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <UART_SetConfig+0x90>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007dcd 	.word	0x08007dcd
 8007dc0:	08007dd9 	.word	0x08007dd9
 8007dc4:	08007dd3 	.word	0x08007dd3
 8007dc8:	08007ddf 	.word	0x08007ddf
 8007dcc:	2301      	movs	r3, #1
 8007dce:	77fb      	strb	r3, [r7, #31]
 8007dd0:	e150      	b.n	8008074 <UART_SetConfig+0x348>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	77fb      	strb	r3, [r7, #31]
 8007dd6:	e14d      	b.n	8008074 <UART_SetConfig+0x348>
 8007dd8:	2304      	movs	r3, #4
 8007dda:	77fb      	strb	r3, [r7, #31]
 8007ddc:	e14a      	b.n	8008074 <UART_SetConfig+0x348>
 8007dde:	2308      	movs	r3, #8
 8007de0:	77fb      	strb	r3, [r7, #31]
 8007de2:	e147      	b.n	8008074 <UART_SetConfig+0x348>
 8007de4:	2310      	movs	r3, #16
 8007de6:	77fb      	strb	r3, [r7, #31]
 8007de8:	e144      	b.n	8008074 <UART_SetConfig+0x348>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a83      	ldr	r2, [pc, #524]	; (8007ffc <UART_SetConfig+0x2d0>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d132      	bne.n	8007e5a <UART_SetConfig+0x12e>
 8007df4:	4b80      	ldr	r3, [pc, #512]	; (8007ff8 <UART_SetConfig+0x2cc>)
 8007df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfa:	f003 030c 	and.w	r3, r3, #12
 8007dfe:	2b0c      	cmp	r3, #12
 8007e00:	d828      	bhi.n	8007e54 <UART_SetConfig+0x128>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0xdc>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e3d 	.word	0x08007e3d
 8007e0c:	08007e55 	.word	0x08007e55
 8007e10:	08007e55 	.word	0x08007e55
 8007e14:	08007e55 	.word	0x08007e55
 8007e18:	08007e49 	.word	0x08007e49
 8007e1c:	08007e55 	.word	0x08007e55
 8007e20:	08007e55 	.word	0x08007e55
 8007e24:	08007e55 	.word	0x08007e55
 8007e28:	08007e43 	.word	0x08007e43
 8007e2c:	08007e55 	.word	0x08007e55
 8007e30:	08007e55 	.word	0x08007e55
 8007e34:	08007e55 	.word	0x08007e55
 8007e38:	08007e4f 	.word	0x08007e4f
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	77fb      	strb	r3, [r7, #31]
 8007e40:	e118      	b.n	8008074 <UART_SetConfig+0x348>
 8007e42:	2302      	movs	r3, #2
 8007e44:	77fb      	strb	r3, [r7, #31]
 8007e46:	e115      	b.n	8008074 <UART_SetConfig+0x348>
 8007e48:	2304      	movs	r3, #4
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e112      	b.n	8008074 <UART_SetConfig+0x348>
 8007e4e:	2308      	movs	r3, #8
 8007e50:	77fb      	strb	r3, [r7, #31]
 8007e52:	e10f      	b.n	8008074 <UART_SetConfig+0x348>
 8007e54:	2310      	movs	r3, #16
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e10c      	b.n	8008074 <UART_SetConfig+0x348>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a68      	ldr	r2, [pc, #416]	; (8008000 <UART_SetConfig+0x2d4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d120      	bne.n	8007ea6 <UART_SetConfig+0x17a>
 8007e64:	4b64      	ldr	r3, [pc, #400]	; (8007ff8 <UART_SetConfig+0x2cc>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e6e:	2b30      	cmp	r3, #48	; 0x30
 8007e70:	d013      	beq.n	8007e9a <UART_SetConfig+0x16e>
 8007e72:	2b30      	cmp	r3, #48	; 0x30
 8007e74:	d814      	bhi.n	8007ea0 <UART_SetConfig+0x174>
 8007e76:	2b20      	cmp	r3, #32
 8007e78:	d009      	beq.n	8007e8e <UART_SetConfig+0x162>
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	d810      	bhi.n	8007ea0 <UART_SetConfig+0x174>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <UART_SetConfig+0x15c>
 8007e82:	2b10      	cmp	r3, #16
 8007e84:	d006      	beq.n	8007e94 <UART_SetConfig+0x168>
 8007e86:	e00b      	b.n	8007ea0 <UART_SetConfig+0x174>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	77fb      	strb	r3, [r7, #31]
 8007e8c:	e0f2      	b.n	8008074 <UART_SetConfig+0x348>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	77fb      	strb	r3, [r7, #31]
 8007e92:	e0ef      	b.n	8008074 <UART_SetConfig+0x348>
 8007e94:	2304      	movs	r3, #4
 8007e96:	77fb      	strb	r3, [r7, #31]
 8007e98:	e0ec      	b.n	8008074 <UART_SetConfig+0x348>
 8007e9a:	2308      	movs	r3, #8
 8007e9c:	77fb      	strb	r3, [r7, #31]
 8007e9e:	e0e9      	b.n	8008074 <UART_SetConfig+0x348>
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	77fb      	strb	r3, [r7, #31]
 8007ea4:	e0e6      	b.n	8008074 <UART_SetConfig+0x348>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a56      	ldr	r2, [pc, #344]	; (8008004 <UART_SetConfig+0x2d8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d120      	bne.n	8007ef2 <UART_SetConfig+0x1c6>
 8007eb0:	4b51      	ldr	r3, [pc, #324]	; (8007ff8 <UART_SetConfig+0x2cc>)
 8007eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007eba:	2bc0      	cmp	r3, #192	; 0xc0
 8007ebc:	d013      	beq.n	8007ee6 <UART_SetConfig+0x1ba>
 8007ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8007ec0:	d814      	bhi.n	8007eec <UART_SetConfig+0x1c0>
 8007ec2:	2b80      	cmp	r3, #128	; 0x80
 8007ec4:	d009      	beq.n	8007eda <UART_SetConfig+0x1ae>
 8007ec6:	2b80      	cmp	r3, #128	; 0x80
 8007ec8:	d810      	bhi.n	8007eec <UART_SetConfig+0x1c0>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <UART_SetConfig+0x1a8>
 8007ece:	2b40      	cmp	r3, #64	; 0x40
 8007ed0:	d006      	beq.n	8007ee0 <UART_SetConfig+0x1b4>
 8007ed2:	e00b      	b.n	8007eec <UART_SetConfig+0x1c0>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	77fb      	strb	r3, [r7, #31]
 8007ed8:	e0cc      	b.n	8008074 <UART_SetConfig+0x348>
 8007eda:	2302      	movs	r3, #2
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	e0c9      	b.n	8008074 <UART_SetConfig+0x348>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e0c6      	b.n	8008074 <UART_SetConfig+0x348>
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e0c3      	b.n	8008074 <UART_SetConfig+0x348>
 8007eec:	2310      	movs	r3, #16
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e0c0      	b.n	8008074 <UART_SetConfig+0x348>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a44      	ldr	r2, [pc, #272]	; (8008008 <UART_SetConfig+0x2dc>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d125      	bne.n	8007f48 <UART_SetConfig+0x21c>
 8007efc:	4b3e      	ldr	r3, [pc, #248]	; (8007ff8 <UART_SetConfig+0x2cc>)
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f0a:	d017      	beq.n	8007f3c <UART_SetConfig+0x210>
 8007f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f10:	d817      	bhi.n	8007f42 <UART_SetConfig+0x216>
 8007f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f16:	d00b      	beq.n	8007f30 <UART_SetConfig+0x204>
 8007f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f1c:	d811      	bhi.n	8007f42 <UART_SetConfig+0x216>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <UART_SetConfig+0x1fe>
 8007f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f26:	d006      	beq.n	8007f36 <UART_SetConfig+0x20a>
 8007f28:	e00b      	b.n	8007f42 <UART_SetConfig+0x216>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	77fb      	strb	r3, [r7, #31]
 8007f2e:	e0a1      	b.n	8008074 <UART_SetConfig+0x348>
 8007f30:	2302      	movs	r3, #2
 8007f32:	77fb      	strb	r3, [r7, #31]
 8007f34:	e09e      	b.n	8008074 <UART_SetConfig+0x348>
 8007f36:	2304      	movs	r3, #4
 8007f38:	77fb      	strb	r3, [r7, #31]
 8007f3a:	e09b      	b.n	8008074 <UART_SetConfig+0x348>
 8007f3c:	2308      	movs	r3, #8
 8007f3e:	77fb      	strb	r3, [r7, #31]
 8007f40:	e098      	b.n	8008074 <UART_SetConfig+0x348>
 8007f42:	2310      	movs	r3, #16
 8007f44:	77fb      	strb	r3, [r7, #31]
 8007f46:	e095      	b.n	8008074 <UART_SetConfig+0x348>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a2f      	ldr	r2, [pc, #188]	; (800800c <UART_SetConfig+0x2e0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d125      	bne.n	8007f9e <UART_SetConfig+0x272>
 8007f52:	4b29      	ldr	r3, [pc, #164]	; (8007ff8 <UART_SetConfig+0x2cc>)
 8007f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f60:	d017      	beq.n	8007f92 <UART_SetConfig+0x266>
 8007f62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f66:	d817      	bhi.n	8007f98 <UART_SetConfig+0x26c>
 8007f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6c:	d00b      	beq.n	8007f86 <UART_SetConfig+0x25a>
 8007f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f72:	d811      	bhi.n	8007f98 <UART_SetConfig+0x26c>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <UART_SetConfig+0x254>
 8007f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7c:	d006      	beq.n	8007f8c <UART_SetConfig+0x260>
 8007f7e:	e00b      	b.n	8007f98 <UART_SetConfig+0x26c>
 8007f80:	2301      	movs	r3, #1
 8007f82:	77fb      	strb	r3, [r7, #31]
 8007f84:	e076      	b.n	8008074 <UART_SetConfig+0x348>
 8007f86:	2302      	movs	r3, #2
 8007f88:	77fb      	strb	r3, [r7, #31]
 8007f8a:	e073      	b.n	8008074 <UART_SetConfig+0x348>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e070      	b.n	8008074 <UART_SetConfig+0x348>
 8007f92:	2308      	movs	r3, #8
 8007f94:	77fb      	strb	r3, [r7, #31]
 8007f96:	e06d      	b.n	8008074 <UART_SetConfig+0x348>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e06a      	b.n	8008074 <UART_SetConfig+0x348>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <UART_SetConfig+0x2e4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d138      	bne.n	800801a <UART_SetConfig+0x2ee>
 8007fa8:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <UART_SetConfig+0x2cc>)
 8007faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fb6:	d017      	beq.n	8007fe8 <UART_SetConfig+0x2bc>
 8007fb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fbc:	d82a      	bhi.n	8008014 <UART_SetConfig+0x2e8>
 8007fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fc2:	d00b      	beq.n	8007fdc <UART_SetConfig+0x2b0>
 8007fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fc8:	d824      	bhi.n	8008014 <UART_SetConfig+0x2e8>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <UART_SetConfig+0x2aa>
 8007fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd2:	d006      	beq.n	8007fe2 <UART_SetConfig+0x2b6>
 8007fd4:	e01e      	b.n	8008014 <UART_SetConfig+0x2e8>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	77fb      	strb	r3, [r7, #31]
 8007fda:	e04b      	b.n	8008074 <UART_SetConfig+0x348>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	77fb      	strb	r3, [r7, #31]
 8007fe0:	e048      	b.n	8008074 <UART_SetConfig+0x348>
 8007fe2:	2304      	movs	r3, #4
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e045      	b.n	8008074 <UART_SetConfig+0x348>
 8007fe8:	2308      	movs	r3, #8
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e042      	b.n	8008074 <UART_SetConfig+0x348>
 8007fee:	bf00      	nop
 8007ff0:	efff69f3 	.word	0xefff69f3
 8007ff4:	40011000 	.word	0x40011000
 8007ff8:	40023800 	.word	0x40023800
 8007ffc:	40004400 	.word	0x40004400
 8008000:	40004800 	.word	0x40004800
 8008004:	40004c00 	.word	0x40004c00
 8008008:	40005000 	.word	0x40005000
 800800c:	40011400 	.word	0x40011400
 8008010:	40007800 	.word	0x40007800
 8008014:	2310      	movs	r3, #16
 8008016:	77fb      	strb	r3, [r7, #31]
 8008018:	e02c      	b.n	8008074 <UART_SetConfig+0x348>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a72      	ldr	r2, [pc, #456]	; (80081e8 <UART_SetConfig+0x4bc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d125      	bne.n	8008070 <UART_SetConfig+0x344>
 8008024:	4b71      	ldr	r3, [pc, #452]	; (80081ec <UART_SetConfig+0x4c0>)
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800802e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008032:	d017      	beq.n	8008064 <UART_SetConfig+0x338>
 8008034:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008038:	d817      	bhi.n	800806a <UART_SetConfig+0x33e>
 800803a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800803e:	d00b      	beq.n	8008058 <UART_SetConfig+0x32c>
 8008040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008044:	d811      	bhi.n	800806a <UART_SetConfig+0x33e>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <UART_SetConfig+0x326>
 800804a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800804e:	d006      	beq.n	800805e <UART_SetConfig+0x332>
 8008050:	e00b      	b.n	800806a <UART_SetConfig+0x33e>
 8008052:	2300      	movs	r3, #0
 8008054:	77fb      	strb	r3, [r7, #31]
 8008056:	e00d      	b.n	8008074 <UART_SetConfig+0x348>
 8008058:	2302      	movs	r3, #2
 800805a:	77fb      	strb	r3, [r7, #31]
 800805c:	e00a      	b.n	8008074 <UART_SetConfig+0x348>
 800805e:	2304      	movs	r3, #4
 8008060:	77fb      	strb	r3, [r7, #31]
 8008062:	e007      	b.n	8008074 <UART_SetConfig+0x348>
 8008064:	2308      	movs	r3, #8
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e004      	b.n	8008074 <UART_SetConfig+0x348>
 800806a:	2310      	movs	r3, #16
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e001      	b.n	8008074 <UART_SetConfig+0x348>
 8008070:	2310      	movs	r3, #16
 8008072:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800807c:	d15b      	bne.n	8008136 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800807e:	7ffb      	ldrb	r3, [r7, #31]
 8008080:	2b08      	cmp	r3, #8
 8008082:	d828      	bhi.n	80080d6 <UART_SetConfig+0x3aa>
 8008084:	a201      	add	r2, pc, #4	; (adr r2, 800808c <UART_SetConfig+0x360>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b9 	.word	0x080080b9
 8008094:	080080c1 	.word	0x080080c1
 8008098:	080080d7 	.word	0x080080d7
 800809c:	080080c7 	.word	0x080080c7
 80080a0:	080080d7 	.word	0x080080d7
 80080a4:	080080d7 	.word	0x080080d7
 80080a8:	080080d7 	.word	0x080080d7
 80080ac:	080080cf 	.word	0x080080cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b0:	f7fe fe42 	bl	8006d38 <HAL_RCC_GetPCLK1Freq>
 80080b4:	61b8      	str	r0, [r7, #24]
        break;
 80080b6:	e013      	b.n	80080e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080b8:	f7fe fe52 	bl	8006d60 <HAL_RCC_GetPCLK2Freq>
 80080bc:	61b8      	str	r0, [r7, #24]
        break;
 80080be:	e00f      	b.n	80080e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080c0:	4b4b      	ldr	r3, [pc, #300]	; (80081f0 <UART_SetConfig+0x4c4>)
 80080c2:	61bb      	str	r3, [r7, #24]
        break;
 80080c4:	e00c      	b.n	80080e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080c6:	f7fe fd25 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 80080ca:	61b8      	str	r0, [r7, #24]
        break;
 80080cc:	e008      	b.n	80080e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d2:	61bb      	str	r3, [r7, #24]
        break;
 80080d4:	e004      	b.n	80080e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	77bb      	strb	r3, [r7, #30]
        break;
 80080de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d074      	beq.n	80081d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	005a      	lsls	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	085b      	lsrs	r3, r3, #1
 80080f0:	441a      	add	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2b0f      	cmp	r3, #15
 8008100:	d916      	bls.n	8008130 <UART_SetConfig+0x404>
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008108:	d212      	bcs.n	8008130 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	b29b      	uxth	r3, r3
 800810e:	f023 030f 	bic.w	r3, r3, #15
 8008112:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	085b      	lsrs	r3, r3, #1
 8008118:	b29b      	uxth	r3, r3
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	b29a      	uxth	r2, r3
 8008120:	89fb      	ldrh	r3, [r7, #14]
 8008122:	4313      	orrs	r3, r2
 8008124:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	89fa      	ldrh	r2, [r7, #14]
 800812c:	60da      	str	r2, [r3, #12]
 800812e:	e04f      	b.n	80081d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	77bb      	strb	r3, [r7, #30]
 8008134:	e04c      	b.n	80081d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008136:	7ffb      	ldrb	r3, [r7, #31]
 8008138:	2b08      	cmp	r3, #8
 800813a:	d828      	bhi.n	800818e <UART_SetConfig+0x462>
 800813c:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <UART_SetConfig+0x418>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008169 	.word	0x08008169
 8008148:	08008171 	.word	0x08008171
 800814c:	08008179 	.word	0x08008179
 8008150:	0800818f 	.word	0x0800818f
 8008154:	0800817f 	.word	0x0800817f
 8008158:	0800818f 	.word	0x0800818f
 800815c:	0800818f 	.word	0x0800818f
 8008160:	0800818f 	.word	0x0800818f
 8008164:	08008187 	.word	0x08008187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008168:	f7fe fde6 	bl	8006d38 <HAL_RCC_GetPCLK1Freq>
 800816c:	61b8      	str	r0, [r7, #24]
        break;
 800816e:	e013      	b.n	8008198 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008170:	f7fe fdf6 	bl	8006d60 <HAL_RCC_GetPCLK2Freq>
 8008174:	61b8      	str	r0, [r7, #24]
        break;
 8008176:	e00f      	b.n	8008198 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008178:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <UART_SetConfig+0x4c4>)
 800817a:	61bb      	str	r3, [r7, #24]
        break;
 800817c:	e00c      	b.n	8008198 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800817e:	f7fe fcc9 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8008182:	61b8      	str	r0, [r7, #24]
        break;
 8008184:	e008      	b.n	8008198 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818a:	61bb      	str	r3, [r7, #24]
        break;
 800818c:	e004      	b.n	8008198 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	77bb      	strb	r3, [r7, #30]
        break;
 8008196:	bf00      	nop
    }

    if (pclk != 0U)
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d018      	beq.n	80081d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	085a      	lsrs	r2, r3, #1
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	441a      	add	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b0f      	cmp	r3, #15
 80081b6:	d909      	bls.n	80081cc <UART_SetConfig+0x4a0>
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081be:	d205      	bcs.n	80081cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60da      	str	r2, [r3, #12]
 80081ca:	e001      	b.n	80081d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80081dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3720      	adds	r7, #32
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	40007c00 	.word	0x40007c00
 80081ec:	40023800 	.word	0x40023800
 80081f0:	00f42400 	.word	0x00f42400

080081f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	f003 0308 	and.w	r3, r3, #8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01a      	beq.n	800830a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082f2:	d10a      	bne.n	800830a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	605a      	str	r2, [r3, #4]
  }
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af02      	add	r7, sp, #8
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008348:	f7fa fdaa 	bl	8002ea0 <HAL_GetTick>
 800834c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b08      	cmp	r3, #8
 800835a:	d10e      	bne.n	800837a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800835c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f81b 	bl	80083a6 <UART_WaitOnFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e011      	b.n	800839e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2220      	movs	r2, #32
 800837e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b09c      	sub	sp, #112	; 0x70
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	603b      	str	r3, [r7, #0]
 80083b2:	4613      	mov	r3, r2
 80083b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083b6:	e0a7      	b.n	8008508 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083be:	f000 80a3 	beq.w	8008508 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083c2:	f7fa fd6d 	bl	8002ea0 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d302      	bcc.n	80083d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80083d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d13f      	bne.n	8008458 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083ec:	667b      	str	r3, [r7, #100]	; 0x64
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e6      	bne.n	80083d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	663b      	str	r3, [r7, #96]	; 0x60
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800842a:	64ba      	str	r2, [r7, #72]	; 0x48
 800842c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e5      	bne.n	800840a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2220      	movs	r2, #32
 8008442:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2220      	movs	r2, #32
 8008448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e068      	b.n	800852a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d050      	beq.n	8008508 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008474:	d148      	bne.n	8008508 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800847e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008494:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
 80084a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e6      	bne.n	8008480 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3308      	adds	r3, #8
 80084b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	613b      	str	r3, [r7, #16]
   return(result);
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084d2:	623a      	str	r2, [r7, #32]
 80084d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	69f9      	ldr	r1, [r7, #28]
 80084d8:	6a3a      	ldr	r2, [r7, #32]
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	61bb      	str	r3, [r7, #24]
   return(result);
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e5      	bne.n	80084b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2220      	movs	r2, #32
 80084ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e010      	b.n	800852a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69da      	ldr	r2, [r3, #28]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	4013      	ands	r3, r2
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	429a      	cmp	r2, r3
 8008516:	bf0c      	ite	eq
 8008518:	2301      	moveq	r3, #1
 800851a:	2300      	movne	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	429a      	cmp	r2, r3
 8008524:	f43f af48 	beq.w	80083b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3770      	adds	r7, #112	; 0x70
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008534:	b480      	push	{r7}
 8008536:	b097      	sub	sp, #92	; 0x5c
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	4613      	mov	r3, r2
 8008540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	88fa      	ldrh	r2, [r7, #6]
 800854c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	88fa      	ldrh	r2, [r7, #6]
 8008554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008566:	d10e      	bne.n	8008586 <UART_Start_Receive_IT+0x52>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <UART_Start_Receive_IT+0x48>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800857a:	e02d      	b.n	80085d8 <UART_Start_Receive_IT+0xa4>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	22ff      	movs	r2, #255	; 0xff
 8008580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008584:	e028      	b.n	80085d8 <UART_Start_Receive_IT+0xa4>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10d      	bne.n	80085aa <UART_Start_Receive_IT+0x76>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d104      	bne.n	80085a0 <UART_Start_Receive_IT+0x6c>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	22ff      	movs	r2, #255	; 0xff
 800859a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800859e:	e01b      	b.n	80085d8 <UART_Start_Receive_IT+0xa4>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	227f      	movs	r2, #127	; 0x7f
 80085a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085a8:	e016      	b.n	80085d8 <UART_Start_Receive_IT+0xa4>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085b2:	d10d      	bne.n	80085d0 <UART_Start_Receive_IT+0x9c>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <UART_Start_Receive_IT+0x92>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	227f      	movs	r2, #127	; 0x7f
 80085c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085c4:	e008      	b.n	80085d8 <UART_Start_Receive_IT+0xa4>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	223f      	movs	r2, #63	; 0x3f
 80085ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085ce:	e003      	b.n	80085d8 <UART_Start_Receive_IT+0xa4>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2222      	movs	r2, #34	; 0x22
 80085e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fa:	f043 0301 	orr.w	r3, r3, #1
 80085fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008608:	64ba      	str	r2, [r7, #72]	; 0x48
 800860a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800860e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008624:	d107      	bne.n	8008636 <UART_Start_Receive_IT+0x102>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d103      	bne.n	8008636 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	4a21      	ldr	r2, [pc, #132]	; (80086b8 <UART_Start_Receive_IT+0x184>)
 8008632:	669a      	str	r2, [r3, #104]	; 0x68
 8008634:	e002      	b.n	800863c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4a20      	ldr	r2, [pc, #128]	; (80086bc <UART_Start_Receive_IT+0x188>)
 800863a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d019      	beq.n	8008678 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008662:	637b      	str	r3, [r7, #52]	; 0x34
 8008664:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e6      	bne.n	8008644 <UART_Start_Receive_IT+0x110>
 8008676:	e018      	b.n	80086aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	613b      	str	r3, [r7, #16]
   return(result);
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f043 0320 	orr.w	r3, r3, #32
 800868c:	653b      	str	r3, [r7, #80]	; 0x50
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008696:	623b      	str	r3, [r7, #32]
 8008698:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	69f9      	ldr	r1, [r7, #28]
 800869c:	6a3a      	ldr	r2, [r7, #32]
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e6      	bne.n	8008678 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	375c      	adds	r7, #92	; 0x5c
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	08008ae5 	.word	0x08008ae5
 80086bc:	0800897f 	.word	0x0800897f

080086c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b095      	sub	sp, #84	; 0x54
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e6:	643b      	str	r3, [r7, #64]	; 0x40
 80086e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e6      	bne.n	80086c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	61fb      	str	r3, [r7, #28]
   return(result);
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	f023 0301 	bic.w	r3, r3, #1
 8008710:	64bb      	str	r3, [r7, #72]	; 0x48
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3308      	adds	r3, #8
 8008718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800871a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800871c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e5      	bne.n	80086fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008732:	2b01      	cmp	r3, #1
 8008734:	d118      	bne.n	8008768 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	60bb      	str	r3, [r7, #8]
   return(result);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f023 0310 	bic.w	r3, r3, #16
 800874a:	647b      	str	r3, [r7, #68]	; 0x44
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008754:	61bb      	str	r3, [r7, #24]
 8008756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6979      	ldr	r1, [r7, #20]
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	613b      	str	r3, [r7, #16]
   return(result);
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e6      	bne.n	8008736 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2220      	movs	r2, #32
 800876c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800877c:	bf00      	nop
 800877e:	3754      	adds	r7, #84	; 0x54
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff faaa 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b08f      	sub	sp, #60	; 0x3c
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087c0:	2b21      	cmp	r3, #33	; 0x21
 80087c2:	d14c      	bne.n	800885e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d132      	bne.n	8008836 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087f0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e6      	bne.n	80087d0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008816:	633b      	str	r3, [r7, #48]	; 0x30
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6979      	ldr	r1, [r7, #20]
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	613b      	str	r3, [r7, #16]
   return(result);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e6      	bne.n	8008802 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008834:	e013      	b.n	800885e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008852:	b29b      	uxth	r3, r3
 8008854:	3b01      	subs	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800885e:	bf00      	nop
 8008860:	373c      	adds	r7, #60	; 0x3c
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800886a:	b480      	push	{r7}
 800886c:	b091      	sub	sp, #68	; 0x44
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008876:	2b21      	cmp	r3, #33	; 0x21
 8008878:	d151      	bne.n	800891e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d132      	bne.n	80088ec <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	623b      	str	r3, [r7, #32]
   return(result);
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800889a:	63bb      	str	r3, [r7, #56]	; 0x38
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	633b      	str	r3, [r7, #48]	; 0x30
 80088a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e6      	bne.n	8008886 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088cc:	637b      	str	r3, [r7, #52]	; 0x34
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	69b9      	ldr	r1, [r7, #24]
 80088dc:	69fa      	ldr	r2, [r7, #28]
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	617b      	str	r3, [r7, #20]
   return(result);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e6      	bne.n	80088b8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80088ea:	e018      	b.n	800891e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80088f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008900:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008906:	1c9a      	adds	r2, r3, #2
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008912:	b29b      	uxth	r3, r3
 8008914:	3b01      	subs	r3, #1
 8008916:	b29a      	uxth	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800891e:	bf00      	nop
 8008920:	3744      	adds	r7, #68	; 0x44
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b088      	sub	sp, #32
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6979      	ldr	r1, [r7, #20]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	613b      	str	r3, [r7, #16]
   return(result);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e6      	bne.n	8008932 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff f9bb 	bl	8007cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008976:	bf00      	nop
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b096      	sub	sp, #88	; 0x58
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800898c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008996:	2b22      	cmp	r3, #34	; 0x22
 8008998:	f040 8098 	bne.w	8008acc <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80089aa:	b2d9      	uxtb	r1, r3
 80089ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b6:	400a      	ands	r2, r1
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089de:	b29b      	uxth	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d17b      	bne.n	8008adc <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089f8:	653b      	str	r3, [r7, #80]	; 0x50
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a02:	647b      	str	r3, [r7, #68]	; 0x44
 8008a04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e6      	bne.n	80089e4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	623b      	str	r3, [r7, #32]
   return(result);
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3308      	adds	r3, #8
 8008a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a36:	633a      	str	r2, [r7, #48]	; 0x30
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e5      	bne.n	8008a16 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d12e      	bne.n	8008ac4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f023 0310 	bic.w	r3, r3, #16
 8008a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a8a:	61fb      	str	r3, [r7, #28]
 8008a8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	69b9      	ldr	r1, [r7, #24]
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	617b      	str	r3, [r7, #20]
   return(result);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e6      	bne.n	8008a6c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	f003 0310 	and.w	r3, r3, #16
 8008aa8:	2b10      	cmp	r3, #16
 8008aaa:	d103      	bne.n	8008ab4 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2210      	movs	r2, #16
 8008ab2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff f929 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ac2:	e00b      	b.n	8008adc <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7f7 fe2d 	bl	8000724 <HAL_UART_RxCpltCallback>
}
 8008aca:	e007      	b.n	8008adc <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699a      	ldr	r2, [r3, #24]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0208 	orr.w	r2, r2, #8
 8008ada:	619a      	str	r2, [r3, #24]
}
 8008adc:	bf00      	nop
 8008ade:	3758      	adds	r7, #88	; 0x58
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b096      	sub	sp, #88	; 0x58
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008af2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008afc:	2b22      	cmp	r3, #34	; 0x22
 8008afe:	f040 8098 	bne.w	8008c32 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b10:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b12:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b16:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	1c9a      	adds	r2, r3, #2
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d17b      	bne.n	8008c42 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b68:	643b      	str	r3, [r7, #64]	; 0x40
 8008b6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e6      	bne.n	8008b4a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3308      	adds	r3, #8
 8008b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3308      	adds	r3, #8
 8008b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e5      	bne.n	8008b7c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d12e      	bne.n	8008c2a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f023 0310 	bic.w	r3, r3, #16
 8008be6:	647b      	str	r3, [r7, #68]	; 0x44
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf0:	61bb      	str	r3, [r7, #24]
 8008bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6979      	ldr	r1, [r7, #20]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e6      	bne.n	8008bd2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	2b10      	cmp	r3, #16
 8008c10:	d103      	bne.n	8008c1a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2210      	movs	r2, #16
 8008c18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff f876 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c28:	e00b      	b.n	8008c42 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7f7 fd7a 	bl	8000724 <HAL_UART_RxCpltCallback>
}
 8008c30:	e007      	b.n	8008c42 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	699a      	ldr	r2, [r3, #24]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f042 0208 	orr.w	r2, r2, #8
 8008c40:	619a      	str	r2, [r3, #24]
}
 8008c42:	bf00      	nop
 8008c44:	3758      	adds	r7, #88	; 0x58
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	f107 001c 	add.w	r0, r7, #28
 8008c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d120      	bne.n	8008ca6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	4b20      	ldr	r3, [pc, #128]	; (8008cf8 <USB_CoreInit+0xac>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d105      	bne.n	8008c9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa96 	bl	80091cc <USB_CoreReset>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e010      	b.n	8008cc8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa8a 	bl	80091cc <USB_CoreReset>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d10b      	bne.n	8008ce6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f043 0206 	orr.w	r2, r3, #6
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f043 0220 	orr.w	r2, r3, #32
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cf2:	b004      	add	sp, #16
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	ffbdffbf 	.word	0xffbdffbf

08008cfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f023 0201 	bic.w	r2, r3, #1
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d115      	bne.n	8008d6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	f7fa f8b3 	bl	8002eb8 <HAL_Delay>
      ms++;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fa29 	bl	80091b0 <USB_GetMode>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d01e      	beq.n	8008da2 <USB_SetCurrentMode+0x84>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b31      	cmp	r3, #49	; 0x31
 8008d68:	d9f0      	bls.n	8008d4c <USB_SetCurrentMode+0x2e>
 8008d6a:	e01a      	b.n	8008da2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d115      	bne.n	8008d9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d7e:	2001      	movs	r0, #1
 8008d80:	f7fa f89a 	bl	8002eb8 <HAL_Delay>
      ms++;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3301      	adds	r3, #1
 8008d88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa10 	bl	80091b0 <USB_GetMode>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d005      	beq.n	8008da2 <USB_SetCurrentMode+0x84>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b31      	cmp	r3, #49	; 0x31
 8008d9a:	d9f0      	bls.n	8008d7e <USB_SetCurrentMode+0x60>
 8008d9c:	e001      	b.n	8008da2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e005      	b.n	8008dae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b32      	cmp	r3, #50	; 0x32
 8008da6:	d101      	bne.n	8008dac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008db8:	b084      	sub	sp, #16
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b086      	sub	sp, #24
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	613b      	str	r3, [r7, #16]
 8008dd6:	e009      	b.n	8008dec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	3340      	adds	r3, #64	; 0x40
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	2200      	movs	r2, #0
 8008de4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	3301      	adds	r3, #1
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b0e      	cmp	r3, #14
 8008df0:	d9f2      	bls.n	8008dd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11c      	bne.n	8008e32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e06:	f043 0302 	orr.w	r3, r3, #2
 8008e0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e005      	b.n	8008e3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e44:	461a      	mov	r2, r3
 8008e46:	2300      	movs	r3, #0
 8008e48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e50:	4619      	mov	r1, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e58:	461a      	mov	r2, r3
 8008e5a:	680b      	ldr	r3, [r1, #0]
 8008e5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d10c      	bne.n	8008e7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d104      	bne.n	8008e74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f965 	bl	800913c <USB_SetDevSpeed>
 8008e72:	e008      	b.n	8008e86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e74:	2101      	movs	r1, #1
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f960 	bl	800913c <USB_SetDevSpeed>
 8008e7c:	e003      	b.n	8008e86 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e7e:	2103      	movs	r1, #3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f95b 	bl	800913c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e86:	2110      	movs	r1, #16
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f8f3 	bl	8009074 <USB_FlushTxFifo>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f91f 	bl	80090dc <USB_FlushRxFifo>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eae:	461a      	mov	r2, r3
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eba:	461a      	mov	r2, r3
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	613b      	str	r3, [r7, #16]
 8008ed0:	e043      	b.n	8008f5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ee8:	d118      	bne.n	8008f1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efc:	461a      	mov	r2, r3
 8008efe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	e013      	b.n	8008f2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f12:	461a      	mov	r2, r3
 8008f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f18:	6013      	str	r3, [r2, #0]
 8008f1a:	e008      	b.n	8008f2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f28:	461a      	mov	r2, r3
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	3301      	adds	r3, #1
 8008f58:	613b      	str	r3, [r7, #16]
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d3b7      	bcc.n	8008ed2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f62:	2300      	movs	r3, #0
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	e043      	b.n	8008ff0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f7e:	d118      	bne.n	8008fb2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10a      	bne.n	8008f9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f92:	461a      	mov	r2, r3
 8008f94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	e013      	b.n	8008fc4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	e008      	b.n	8008fc4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fe8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	3301      	adds	r3, #1
 8008fee:	613b      	str	r3, [r7, #16]
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d3b7      	bcc.n	8008f68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800900a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009018:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	2b00      	cmp	r3, #0
 800901e:	d105      	bne.n	800902c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f043 0210 	orr.w	r2, r3, #16
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	699a      	ldr	r2, [r3, #24]
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <USB_DevInit+0x2b4>)
 8009032:	4313      	orrs	r3, r2
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903a:	2b00      	cmp	r3, #0
 800903c:	d005      	beq.n	800904a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	f043 0208 	orr.w	r2, r3, #8
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800904a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904c:	2b01      	cmp	r3, #1
 800904e:	d105      	bne.n	800905c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	4b06      	ldr	r3, [pc, #24]	; (8009070 <USB_DevInit+0x2b8>)
 8009056:	4313      	orrs	r3, r2
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800905c:	7dfb      	ldrb	r3, [r7, #23]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009068:	b004      	add	sp, #16
 800906a:	4770      	bx	lr
 800906c:	803c3800 	.word	0x803c3800
 8009070:	40000004 	.word	0x40000004

08009074 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3301      	adds	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4a13      	ldr	r2, [pc, #76]	; (80090d8 <USB_FlushTxFifo+0x64>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d901      	bls.n	8009094 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e01b      	b.n	80090cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	daf2      	bge.n	8009082 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	019b      	lsls	r3, r3, #6
 80090a4:	f043 0220 	orr.w	r2, r3, #32
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3301      	adds	r3, #1
 80090b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <USB_FlushTxFifo+0x64>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d901      	bls.n	80090be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e006      	b.n	80090cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	d0f0      	beq.n	80090ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	00030d40 	.word	0x00030d40

080090dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3301      	adds	r3, #1
 80090ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	4a11      	ldr	r2, [pc, #68]	; (8009138 <USB_FlushRxFifo+0x5c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d901      	bls.n	80090fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e018      	b.n	800912c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	daf2      	bge.n	80090e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2210      	movs	r2, #16
 800910a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4a08      	ldr	r2, [pc, #32]	; (8009138 <USB_FlushRxFifo+0x5c>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d901      	bls.n	800911e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e006      	b.n	800912c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b10      	cmp	r3, #16
 8009128:	d0f0      	beq.n	800910c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	00030d40 	.word	0x00030d40

0800913c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	68f9      	ldr	r1, [r7, #12]
 8009158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800915c:	4313      	orrs	r3, r2
 800915e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800916e:	b480      	push	{r7}
 8009170:	b085      	sub	sp, #20
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009188:	f023 0303 	bic.w	r3, r3, #3
 800918c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800919c:	f043 0302 	orr.w	r3, r3, #2
 80091a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	f003 0301 	and.w	r3, r3, #1
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3301      	adds	r3, #1
 80091dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	4a13      	ldr	r2, [pc, #76]	; (8009230 <USB_CoreReset+0x64>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d901      	bls.n	80091ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e01b      	b.n	8009222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	daf2      	bge.n	80091d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f043 0201 	orr.w	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4a09      	ldr	r2, [pc, #36]	; (8009230 <USB_CoreReset+0x64>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d901      	bls.n	8009214 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e006      	b.n	8009222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b01      	cmp	r3, #1
 800921e:	d0f0      	beq.n	8009202 <USB_CoreReset+0x36>

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	00030d40 	.word	0x00030d40

08009234 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800923a:	f000 fc55 	bl	8009ae8 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800923e:	4b19      	ldr	r3, [pc, #100]	; (80092a4 <MX_LWIP_Init+0x70>)
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009244:	4b18      	ldr	r3, [pc, #96]	; (80092a8 <MX_LWIP_Init+0x74>)
 8009246:	2200      	movs	r2, #0
 8009248:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800924a:	4b18      	ldr	r3, [pc, #96]	; (80092ac <MX_LWIP_Init+0x78>)
 800924c:	2200      	movs	r2, #0
 800924e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <MX_LWIP_Init+0x7c>)
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	4b17      	ldr	r3, [pc, #92]	; (80092b4 <MX_LWIP_Init+0x80>)
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	2300      	movs	r3, #0
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	4b13      	ldr	r3, [pc, #76]	; (80092ac <MX_LWIP_Init+0x78>)
 800925e:	4a12      	ldr	r2, [pc, #72]	; (80092a8 <MX_LWIP_Init+0x74>)
 8009260:	4910      	ldr	r1, [pc, #64]	; (80092a4 <MX_LWIP_Init+0x70>)
 8009262:	4815      	ldr	r0, [pc, #84]	; (80092b8 <MX_LWIP_Init+0x84>)
 8009264:	f001 f92c 	bl	800a4c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009268:	4813      	ldr	r0, [pc, #76]	; (80092b8 <MX_LWIP_Init+0x84>)
 800926a:	f001 fae3 	bl	800a834 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <MX_LWIP_Init+0x84>)
 8009270:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009274:	089b      	lsrs	r3, r3, #2
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009280:	480d      	ldr	r0, [pc, #52]	; (80092b8 <MX_LWIP_Init+0x84>)
 8009282:	f001 fae7 	bl	800a854 <netif_set_up>
 8009286:	e002      	b.n	800928e <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009288:	480b      	ldr	r0, [pc, #44]	; (80092b8 <MX_LWIP_Init+0x84>)
 800928a:	f001 fb4f 	bl	800a92c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800928e:	490b      	ldr	r1, [pc, #44]	; (80092bc <MX_LWIP_Init+0x88>)
 8009290:	4809      	ldr	r0, [pc, #36]	; (80092b8 <MX_LWIP_Init+0x84>)
 8009292:	f001 fbe5 	bl	800aa60 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8009296:	4808      	ldr	r0, [pc, #32]	; (80092b8 <MX_LWIP_Init+0x84>)
 8009298:	f008 fce0 	bl	8011c5c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800929c:	bf00      	nop
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000e40 	.word	0x20000e40
 80092a8:	20000e44 	.word	0x20000e44
 80092ac:	20000e48 	.word	0x20000e48
 80092b0:	080156ad 	.word	0x080156ad
 80092b4:	080095d5 	.word	0x080095d5
 80092b8:	20000e08 	.word	0x20000e08
 80092bc:	080092c1 	.word	0x080092c1

080092c0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <SCB_InvalidateDCache_by_Addr>:
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80092e6:	2320      	movs	r3, #32
 80092e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80092ea:	f3bf 8f4f 	dsb	sy
}
 80092ee:	bf00      	nop
    while (op_size > 0) {
 80092f0:	e00b      	b.n	800930a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80092f2:	4a0d      	ldr	r2, [pc, #52]	; (8009328 <SCB_InvalidateDCache_by_Addr+0x54>)
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	4413      	add	r3, r2
 8009300:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b00      	cmp	r3, #0
 800930e:	dcf0      	bgt.n	80092f2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009310:	f3bf 8f4f 	dsb	sy
}
 8009314:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009316:	f3bf 8f6f 	isb	sy
}
 800931a:	bf00      	nop
}
 800931c:	bf00      	nop
 800931e:	371c      	adds	r7, #28
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	e000ed00 	.word	0xe000ed00

0800932c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009338:	4b40      	ldr	r3, [pc, #256]	; (800943c <low_level_init+0x110>)
 800933a:	4a41      	ldr	r2, [pc, #260]	; (8009440 <low_level_init+0x114>)
 800933c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800933e:	2300      	movs	r3, #0
 8009340:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009342:	2380      	movs	r3, #128	; 0x80
 8009344:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009346:	23e1      	movs	r3, #225	; 0xe1
 8009348:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800934a:	2300      	movs	r3, #0
 800934c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800934e:	2300      	movs	r3, #0
 8009350:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009352:	2300      	movs	r3, #0
 8009354:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009356:	4a39      	ldr	r2, [pc, #228]	; (800943c <low_level_init+0x110>)
 8009358:	f107 0308 	add.w	r3, r7, #8
 800935c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800935e:	4b37      	ldr	r3, [pc, #220]	; (800943c <low_level_init+0x110>)
 8009360:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009364:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009366:	4b35      	ldr	r3, [pc, #212]	; (800943c <low_level_init+0x110>)
 8009368:	4a36      	ldr	r2, [pc, #216]	; (8009444 <low_level_init+0x118>)
 800936a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800936c:	4b33      	ldr	r3, [pc, #204]	; (800943c <low_level_init+0x110>)
 800936e:	4a36      	ldr	r2, [pc, #216]	; (8009448 <low_level_init+0x11c>)
 8009370:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009372:	4b32      	ldr	r3, [pc, #200]	; (800943c <low_level_init+0x110>)
 8009374:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009378:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800937a:	4830      	ldr	r0, [pc, #192]	; (800943c <low_level_init+0x110>)
 800937c:	f7fa feb4 	bl	80040e8 <HAL_ETH_Init>
 8009380:	4603      	mov	r3, r0
 8009382:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009384:	2238      	movs	r2, #56	; 0x38
 8009386:	2100      	movs	r1, #0
 8009388:	4830      	ldr	r0, [pc, #192]	; (800944c <low_level_init+0x120>)
 800938a:	f00c fac1 	bl	8015910 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800938e:	4b2f      	ldr	r3, [pc, #188]	; (800944c <low_level_init+0x120>)
 8009390:	2221      	movs	r2, #33	; 0x21
 8009392:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009394:	4b2d      	ldr	r3, [pc, #180]	; (800944c <low_level_init+0x120>)
 8009396:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800939a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800939c:	4b2b      	ldr	r3, [pc, #172]	; (800944c <low_level_init+0x120>)
 800939e:	2200      	movs	r2, #0
 80093a0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80093a2:	482b      	ldr	r0, [pc, #172]	; (8009450 <low_level_init+0x124>)
 80093a4:	f000 ff54 	bl	800a250 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2206      	movs	r2, #6
 80093ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80093b0:	4b22      	ldr	r3, [pc, #136]	; (800943c <low_level_init+0x110>)
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80093bc:	4b1f      	ldr	r3, [pc, #124]	; (800943c <low_level_init+0x110>)
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	785a      	ldrb	r2, [r3, #1]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80093c8:	4b1c      	ldr	r3, [pc, #112]	; (800943c <low_level_init+0x110>)
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	789a      	ldrb	r2, [r3, #2]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80093d4:	4b19      	ldr	r3, [pc, #100]	; (800943c <low_level_init+0x110>)
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	78da      	ldrb	r2, [r3, #3]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80093e0:	4b16      	ldr	r3, [pc, #88]	; (800943c <low_level_init+0x110>)
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	791a      	ldrb	r2, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80093ec:	4b13      	ldr	r3, [pc, #76]	; (800943c <low_level_init+0x110>)
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	795a      	ldrb	r2, [r3, #5]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80093fe:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009406:	f043 030a 	orr.w	r3, r3, #10
 800940a:	b2da      	uxtb	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009412:	4910      	ldr	r1, [pc, #64]	; (8009454 <low_level_init+0x128>)
 8009414:	4810      	ldr	r0, [pc, #64]	; (8009458 <low_level_init+0x12c>)
 8009416:	f7f9 fb88 	bl	8002b2a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800941a:	480f      	ldr	r0, [pc, #60]	; (8009458 <low_level_init+0x12c>)
 800941c:	f7f9 fbb7 	bl	8002b8e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d103      	bne.n	800942e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa32 	bl	8009890 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800942c:	e001      	b.n	8009432 <low_level_init+0x106>
    Error_Handler();
 800942e:	f7f7 fe24 	bl	800107a <Error_Handler>
}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	200057d8 	.word	0x200057d8
 8009440:	40028000 	.word	0x40028000
 8009444:	2000016c 	.word	0x2000016c
 8009448:	200000cc 	.word	0x200000cc
 800944c:	20005888 	.word	0x20005888
 8009450:	0801c3c0 	.word	0x0801c3c0
 8009454:	20000044 	.word	0x20000044
 8009458:	200058c0 	.word	0x200058c0

0800945c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b092      	sub	sp, #72	; 0x48
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800946a:	2300      	movs	r3, #0
 800946c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009474:	f107 030c 	add.w	r3, r7, #12
 8009478:	2230      	movs	r2, #48	; 0x30
 800947a:	2100      	movs	r1, #0
 800947c:	4618      	mov	r0, r3
 800947e:	f00c fa47 	bl	8015910 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009482:	f107 030c 	add.w	r3, r7, #12
 8009486:	2230      	movs	r2, #48	; 0x30
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f00c fa40 	bl	8015910 <memset>

  for(q = p; q != NULL; q = q->next)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	643b      	str	r3, [r7, #64]	; 0x40
 8009494:	e045      	b.n	8009522 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009498:	2b03      	cmp	r3, #3
 800949a:	d902      	bls.n	80094a2 <low_level_output+0x46>
      return ERR_IF;
 800949c:	f06f 030b 	mvn.w	r3, #11
 80094a0:	e055      	b.n	800954e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80094a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a4:	6859      	ldr	r1, [r3, #4]
 80094a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094a8:	4613      	mov	r3, r2
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	4413      	add	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	3348      	adds	r3, #72	; 0x48
 80094b2:	443b      	add	r3, r7
 80094b4:	3b3c      	subs	r3, #60	; 0x3c
 80094b6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80094b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ba:	895b      	ldrh	r3, [r3, #10]
 80094bc:	4619      	mov	r1, r3
 80094be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094c0:	4613      	mov	r3, r2
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	3348      	adds	r3, #72	; 0x48
 80094ca:	443b      	add	r3, r7
 80094cc:	3b38      	subs	r3, #56	; 0x38
 80094ce:	6019      	str	r1, [r3, #0]

    if(i>0)
 80094d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d011      	beq.n	80094fa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80094d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d8:	1e5a      	subs	r2, r3, #1
 80094da:	f107 000c 	add.w	r0, r7, #12
 80094de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094e0:	460b      	mov	r3, r1
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	440b      	add	r3, r1
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	18c1      	adds	r1, r0, r3
 80094ea:	4613      	mov	r3, r2
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	3348      	adds	r3, #72	; 0x48
 80094f4:	443b      	add	r3, r7
 80094f6:	3b34      	subs	r3, #52	; 0x34
 80094f8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80094fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009504:	4613      	mov	r3, r2
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	3348      	adds	r3, #72	; 0x48
 800950e:	443b      	add	r3, r7
 8009510:	3b34      	subs	r3, #52	; 0x34
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009518:	3301      	adds	r3, #1
 800951a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800951c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	643b      	str	r3, [r7, #64]	; 0x40
 8009522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1b6      	bne.n	8009496 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	891b      	ldrh	r3, [r3, #8]
 800952c:	461a      	mov	r2, r3
 800952e:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <low_level_output+0xfc>)
 8009530:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009532:	4a09      	ldr	r2, [pc, #36]	; (8009558 <low_level_output+0xfc>)
 8009534:	f107 030c 	add.w	r3, r7, #12
 8009538:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800953a:	4a07      	ldr	r2, [pc, #28]	; (8009558 <low_level_output+0xfc>)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009540:	2214      	movs	r2, #20
 8009542:	4905      	ldr	r1, [pc, #20]	; (8009558 <low_level_output+0xfc>)
 8009544:	4805      	ldr	r0, [pc, #20]	; (800955c <low_level_output+0x100>)
 8009546:	f7fa ff03 	bl	8004350 <HAL_ETH_Transmit>

  return errval;
 800954a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800954e:	4618      	mov	r0, r3
 8009550:	3748      	adds	r7, #72	; 0x48
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20005888 	.word	0x20005888
 800955c:	200057d8 	.word	0x200057d8

08009560 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800956c:	4b07      	ldr	r3, [pc, #28]	; (800958c <low_level_input+0x2c>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d105      	bne.n	8009580 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009574:	f107 030c 	add.w	r3, r7, #12
 8009578:	4619      	mov	r1, r3
 800957a:	4805      	ldr	r0, [pc, #20]	; (8009590 <low_level_input+0x30>)
 800957c:	f7fa ff7c 	bl	8004478 <HAL_ETH_ReadData>
  }

  return p;
 8009580:	68fb      	ldr	r3, [r7, #12]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	200057d4 	.word	0x200057d4
 8009590:	200057d8 	.word	0x200057d8

08009594 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800959c:	2300      	movs	r3, #0
 800959e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff ffdd 	bl	8009560 <low_level_input>
 80095a6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00a      	beq.n	80095c4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	4798      	blx	r3
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f001 fdce 	bl	800b160 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1ea      	bne.n	80095a0 <ethernetif_input+0xc>
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <ethernetif_init+0x1c>
 80095e2:	4b0e      	ldr	r3, [pc, #56]	; (800961c <ethernetif_init+0x48>)
 80095e4:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 80095e8:	490d      	ldr	r1, [pc, #52]	; (8009620 <ethernetif_init+0x4c>)
 80095ea:	480e      	ldr	r0, [pc, #56]	; (8009624 <ethernetif_init+0x50>)
 80095ec:	f00c f998 	bl	8015920 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2273      	movs	r2, #115	; 0x73
 80095f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2274      	movs	r2, #116	; 0x74
 80095fc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a09      	ldr	r2, [pc, #36]	; (8009628 <ethernetif_init+0x54>)
 8009604:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a08      	ldr	r2, [pc, #32]	; (800962c <ethernetif_init+0x58>)
 800960a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff fe8d 	bl	800932c <low_level_init>

  return ERR_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	08016f48 	.word	0x08016f48
 8009620:	08016f64 	.word	0x08016f64
 8009624:	08016f74 	.word	0x08016f74
 8009628:	08013b29 	.word	0x08013b29
 800962c:	0800945d 	.word	0x0800945d

08009630 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800963c:	68f9      	ldr	r1, [r7, #12]
 800963e:	4807      	ldr	r0, [pc, #28]	; (800965c <pbuf_free_custom+0x2c>)
 8009640:	f000 fee8 	bl	800a414 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009644:	4b06      	ldr	r3, [pc, #24]	; (8009660 <pbuf_free_custom+0x30>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d102      	bne.n	8009652 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800964c:	4b04      	ldr	r3, [pc, #16]	; (8009660 <pbuf_free_custom+0x30>)
 800964e:	2200      	movs	r2, #0
 8009650:	701a      	strb	r2, [r3, #0]
  }
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	0801c3c0 	.word	0x0801c3c0
 8009660:	200057d4 	.word	0x200057d4

08009664 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009668:	f7f9 fc1a 	bl	8002ea0 <HAL_GetTick>
 800966c:	4603      	mov	r3, r0
}
 800966e:	4618      	mov	r0, r3
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08e      	sub	sp, #56	; 0x38
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800967c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009680:	2200      	movs	r2, #0
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	605a      	str	r2, [r3, #4]
 8009686:	609a      	str	r2, [r3, #8]
 8009688:	60da      	str	r2, [r3, #12]
 800968a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a52      	ldr	r2, [pc, #328]	; (80097dc <HAL_ETH_MspInit+0x168>)
 8009692:	4293      	cmp	r3, r2
 8009694:	f040 809e 	bne.w	80097d4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009698:	4b51      	ldr	r3, [pc, #324]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 800969a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969c:	4a50      	ldr	r2, [pc, #320]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 800969e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80096a2:	6313      	str	r3, [r2, #48]	; 0x30
 80096a4:	4b4e      	ldr	r3, [pc, #312]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ac:	623b      	str	r3, [r7, #32]
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	4b4b      	ldr	r3, [pc, #300]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b4:	4a4a      	ldr	r2, [pc, #296]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096ba:	6313      	str	r3, [r2, #48]	; 0x30
 80096bc:	4b48      	ldr	r3, [pc, #288]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096c4:	61fb      	str	r3, [r7, #28]
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	4b45      	ldr	r3, [pc, #276]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096cc:	4a44      	ldr	r2, [pc, #272]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80096d2:	6313      	str	r3, [r2, #48]	; 0x30
 80096d4:	4b42      	ldr	r3, [pc, #264]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80096e0:	4b3f      	ldr	r3, [pc, #252]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	4a3e      	ldr	r2, [pc, #248]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096e6:	f043 0304 	orr.w	r3, r3, #4
 80096ea:	6313      	str	r3, [r2, #48]	; 0x30
 80096ec:	4b3c      	ldr	r3, [pc, #240]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	617b      	str	r3, [r7, #20]
 80096f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096f8:	4b39      	ldr	r3, [pc, #228]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fc:	4a38      	ldr	r2, [pc, #224]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	6313      	str	r3, [r2, #48]	; 0x30
 8009704:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 8009706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	613b      	str	r3, [r7, #16]
 800970e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009710:	4b33      	ldr	r3, [pc, #204]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 8009712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009714:	4a32      	ldr	r2, [pc, #200]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 8009716:	f043 0302 	orr.w	r3, r3, #2
 800971a:	6313      	str	r3, [r2, #48]	; 0x30
 800971c:	4b30      	ldr	r3, [pc, #192]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 800971e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009728:	4b2d      	ldr	r3, [pc, #180]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 800972a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972c:	4a2c      	ldr	r2, [pc, #176]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 800972e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009732:	6313      	str	r3, [r2, #48]	; 0x30
 8009734:	4b2a      	ldr	r3, [pc, #168]	; (80097e0 <HAL_ETH_MspInit+0x16c>)
 8009736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973c:	60bb      	str	r3, [r7, #8]
 800973e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009740:	2332      	movs	r3, #50	; 0x32
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009744:	2302      	movs	r3, #2
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009748:	2300      	movs	r3, #0
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800974c:	2303      	movs	r3, #3
 800974e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009750:	230b      	movs	r3, #11
 8009752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009758:	4619      	mov	r1, r3
 800975a:	4822      	ldr	r0, [pc, #136]	; (80097e4 <HAL_ETH_MspInit+0x170>)
 800975c:	f7fb feaa 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009760:	2386      	movs	r3, #134	; 0x86
 8009762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009764:	2302      	movs	r3, #2
 8009766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009768:	2300      	movs	r3, #0
 800976a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800976c:	2303      	movs	r3, #3
 800976e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009770:	230b      	movs	r3, #11
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009778:	4619      	mov	r1, r3
 800977a:	481b      	ldr	r0, [pc, #108]	; (80097e8 <HAL_ETH_MspInit+0x174>)
 800977c:	f7fb fe9a 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8009780:	f242 0301 	movw	r3, #8193	; 0x2001
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009786:	2302      	movs	r3, #2
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800978a:	2300      	movs	r3, #0
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800978e:	2303      	movs	r3, #3
 8009790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009792:	230b      	movs	r3, #11
 8009794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800979a:	4619      	mov	r1, r3
 800979c:	4813      	ldr	r0, [pc, #76]	; (80097ec <HAL_ETH_MspInit+0x178>)
 800979e:	f7fb fe89 	bl	80054b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80097a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a8:	2302      	movs	r3, #2
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ac:	2300      	movs	r3, #0
 80097ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097b0:	2303      	movs	r3, #3
 80097b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097b4:	230b      	movs	r3, #11
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80097b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097bc:	4619      	mov	r1, r3
 80097be:	480c      	ldr	r0, [pc, #48]	; (80097f0 <HAL_ETH_MspInit+0x17c>)
 80097c0:	f7fb fe78 	bl	80054b4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80097c4:	2200      	movs	r2, #0
 80097c6:	2100      	movs	r1, #0
 80097c8:	203d      	movs	r0, #61	; 0x3d
 80097ca:	f7fa f8a2 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80097ce:	203d      	movs	r0, #61	; 0x3d
 80097d0:	f7fa f8bb 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80097d4:	bf00      	nop
 80097d6:	3738      	adds	r7, #56	; 0x38
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	40028000 	.word	0x40028000
 80097e0:	40023800 	.word	0x40023800
 80097e4:	40020800 	.word	0x40020800
 80097e8:	40020000 	.word	0x40020000
 80097ec:	40020400 	.word	0x40020400
 80097f0:	40021800 	.word	0x40021800

080097f4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80097f8:	4802      	ldr	r0, [pc, #8]	; (8009804 <ETH_PHY_IO_Init+0x10>)
 80097fa:	f7fb fa01 	bl	8004c00 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	bd80      	pop	{r7, pc}
 8009804:	200057d8 	.word	0x200057d8

08009808 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  return 0;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	68f9      	ldr	r1, [r7, #12]
 800982a:	4807      	ldr	r0, [pc, #28]	; (8009848 <ETH_PHY_IO_ReadReg+0x30>)
 800982c:	f7fb f850 	bl	80048d0 <HAL_ETH_ReadPHYRegister>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009836:	f04f 33ff 	mov.w	r3, #4294967295
 800983a:	e000      	b.n	800983e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	200057d8 	.word	0x200057d8

0800984c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	68f9      	ldr	r1, [r7, #12]
 800985e:	4807      	ldr	r0, [pc, #28]	; (800987c <ETH_PHY_IO_WriteReg+0x30>)
 8009860:	f7fb f881 	bl	8004966 <HAL_ETH_WritePHYRegister>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800986a:	f04f 33ff 	mov.w	r3, #4294967295
 800986e:	e000      	b.n	8009872 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	200057d8 	.word	0x200057d8

08009880 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009884:	f7f9 fb0c 	bl	8002ea0 <HAL_GetTick>
 8009888:	4603      	mov	r3, r0
}
 800988a:	4618      	mov	r0, r3
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b0a0      	sub	sp, #128	; 0x80
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009898:	f107 030c 	add.w	r3, r7, #12
 800989c:	2264      	movs	r2, #100	; 0x64
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f00c f835 	bl	8015910 <memset>
  int32_t PHYLinkState = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80098aa:	2300      	movs	r3, #0
 80098ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098ae:	2300      	movs	r3, #0
 80098b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80098b2:	2300      	movs	r3, #0
 80098b4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80098b6:	483a      	ldr	r0, [pc, #232]	; (80099a0 <ethernet_link_check_state+0x110>)
 80098b8:	f7f9 fa11 	bl	8002cde <LAN8742_GetLinkState>
 80098bc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80098c4:	089b      	lsrs	r3, r3, #2
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00c      	beq.n	80098ea <ethernet_link_check_state+0x5a>
 80098d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	dc09      	bgt.n	80098ea <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80098d6:	4833      	ldr	r0, [pc, #204]	; (80099a4 <ethernet_link_check_state+0x114>)
 80098d8:	f7fa fce1 	bl	800429e <HAL_ETH_Stop>
    netif_set_down(netif);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f825 	bl	800a92c <netif_set_down>
    netif_set_link_down(netif);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f001 f88c 	bl	800aa00 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80098e8:	e055      	b.n	8009996 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80098f0:	f003 0304 	and.w	r3, r3, #4
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d14e      	bne.n	8009996 <ethernet_link_check_state+0x106>
 80098f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	dd4b      	ble.n	8009996 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80098fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009900:	3b02      	subs	r3, #2
 8009902:	2b03      	cmp	r3, #3
 8009904:	d82a      	bhi.n	800995c <ethernet_link_check_state+0xcc>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <ethernet_link_check_state+0x7c>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	0800991d 	.word	0x0800991d
 8009910:	0800992f 	.word	0x0800992f
 8009914:	0800993f 	.word	0x0800993f
 8009918:	0800994f 	.word	0x0800994f
      duplex = ETH_FULLDUPLEX_MODE;
 800991c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009920:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009926:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009928:	2301      	movs	r3, #1
 800992a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800992c:	e017      	b.n	800995e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800992e:	2300      	movs	r3, #0
 8009930:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009932:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009936:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009938:	2301      	movs	r3, #1
 800993a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800993c:	e00f      	b.n	800995e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800993e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009942:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009944:	2300      	movs	r3, #0
 8009946:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009948:	2301      	movs	r3, #1
 800994a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800994c:	e007      	b.n	800995e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800994e:	2300      	movs	r3, #0
 8009950:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009952:	2300      	movs	r3, #0
 8009954:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009956:	2301      	movs	r3, #1
 8009958:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800995a:	e000      	b.n	800995e <ethernet_link_check_state+0xce>
      break;
 800995c:	bf00      	nop
    if(linkchanged)
 800995e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009960:	2b00      	cmp	r3, #0
 8009962:	d018      	beq.n	8009996 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009964:	f107 030c 	add.w	r3, r7, #12
 8009968:	4619      	mov	r1, r3
 800996a:	480e      	ldr	r0, [pc, #56]	; (80099a4 <ethernet_link_check_state+0x114>)
 800996c:	f7fb f844 	bl	80049f8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009972:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8009974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009976:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009978:	f107 030c 	add.w	r3, r7, #12
 800997c:	4619      	mov	r1, r3
 800997e:	4809      	ldr	r0, [pc, #36]	; (80099a4 <ethernet_link_check_state+0x114>)
 8009980:	f7fb f924 	bl	8004bcc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009984:	4807      	ldr	r0, [pc, #28]	; (80099a4 <ethernet_link_check_state+0x114>)
 8009986:	f7fa fc2b 	bl	80041e0 <HAL_ETH_Start>
      netif_set_up(netif);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 ff62 	bl	800a854 <netif_set_up>
      netif_set_link_up(netif);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fffd 	bl	800a990 <netif_set_link_up>
}
 8009996:	bf00      	nop
 8009998:	3780      	adds	r7, #128	; 0x80
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	200058c0 	.word	0x200058c0
 80099a4:	200057d8 	.word	0x200057d8

080099a8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af02      	add	r7, sp, #8
 80099ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80099b0:	4812      	ldr	r0, [pc, #72]	; (80099fc <HAL_ETH_RxAllocateCallback+0x54>)
 80099b2:	f000 fcc1 	bl	800a338 <memp_malloc_pool>
 80099b6:	60f8      	str	r0, [r7, #12]
  if (p)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d014      	beq.n	80099e8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f103 0220 	add.w	r2, r3, #32
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4a0d      	ldr	r2, [pc, #52]	; (8009a00 <HAL_ETH_RxAllocateCallback+0x58>)
 80099cc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80099d6:	9201      	str	r2, [sp, #4]
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2241      	movs	r2, #65	; 0x41
 80099de:	2100      	movs	r1, #0
 80099e0:	2000      	movs	r0, #0
 80099e2:	f001 fa03 	bl	800adec <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80099e6:	e005      	b.n	80099f4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80099e8:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <HAL_ETH_RxAllocateCallback+0x5c>)
 80099ea:	2201      	movs	r2, #1
 80099ec:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	601a      	str	r2, [r3, #0]
}
 80099f4:	bf00      	nop
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	0801c3c0 	.word	0x0801c3c0
 8009a00:	08009631 	.word	0x08009631
 8009a04:	200057d4 	.word	0x200057d4

08009a08 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3b20      	subs	r3, #32
 8009a26:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2200      	movs	r2, #0
 8009a32:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	887a      	ldrh	r2, [r7, #2]
 8009a38:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d103      	bne.n	8009a4a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	69fa      	ldr	r2, [r7, #28]
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	e003      	b.n	8009a52 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	69fa      	ldr	r2, [r7, #28]
 8009a56:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	61fb      	str	r3, [r7, #28]
 8009a5e:	e009      	b.n	8009a74 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	891a      	ldrh	r2, [r3, #8]
 8009a64:	887b      	ldrh	r3, [r7, #2]
 8009a66:	4413      	add	r3, r2
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	61fb      	str	r3, [r7, #28]
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1f2      	bne.n	8009a60 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009a7a:	887b      	ldrh	r3, [r7, #2]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fc28 	bl	80092d4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009a84:	bf00      	nop
 8009a86:	3720      	adds	r7, #32
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	b21a      	sxth	r2, r3
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	b21b      	sxth	r3, r3
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	b21b      	sxth	r3, r3
 8009aa8:	b29b      	uxth	r3, r3
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	061a      	lsls	r2, r3, #24
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	021b      	lsls	r3, r3, #8
 8009ac6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	0e1b      	lsrs	r3, r3, #24
 8009ada:	4313      	orrs	r3, r2
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009af2:	f000 f8d5 	bl	8009ca0 <mem_init>
  memp_init();
 8009af6:	f000 fbdb 	bl	800a2b0 <memp_init>
  pbuf_init();
  netif_init();
 8009afa:	f000 fcd9 	bl	800a4b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009afe:	f007 f873 	bl	8010be8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009b02:	f001 fdcb 	bl	800b69c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009b06:	f006 ffe5 	bl	8010ad4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
	...

08009b14 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <ptr_to_mem+0x20>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	4413      	add	r3, r2
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	2000810c 	.word	0x2000810c

08009b38 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <mem_to_ptr+0x20>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	b29b      	uxth	r3, r3
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	2000810c 	.word	0x2000810c

08009b5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009b5c:	b590      	push	{r4, r7, lr}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009b64:	4b45      	ldr	r3, [pc, #276]	; (8009c7c <plug_holes+0x120>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d206      	bcs.n	8009b7c <plug_holes+0x20>
 8009b6e:	4b44      	ldr	r3, [pc, #272]	; (8009c80 <plug_holes+0x124>)
 8009b70:	f240 12df 	movw	r2, #479	; 0x1df
 8009b74:	4943      	ldr	r1, [pc, #268]	; (8009c84 <plug_holes+0x128>)
 8009b76:	4844      	ldr	r0, [pc, #272]	; (8009c88 <plug_holes+0x12c>)
 8009b78:	f00b fed2 	bl	8015920 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009b7c:	4b43      	ldr	r3, [pc, #268]	; (8009c8c <plug_holes+0x130>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d306      	bcc.n	8009b94 <plug_holes+0x38>
 8009b86:	4b3e      	ldr	r3, [pc, #248]	; (8009c80 <plug_holes+0x124>)
 8009b88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009b8c:	4940      	ldr	r1, [pc, #256]	; (8009c90 <plug_holes+0x134>)
 8009b8e:	483e      	ldr	r0, [pc, #248]	; (8009c88 <plug_holes+0x12c>)
 8009b90:	f00b fec6 	bl	8015920 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	791b      	ldrb	r3, [r3, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d006      	beq.n	8009baa <plug_holes+0x4e>
 8009b9c:	4b38      	ldr	r3, [pc, #224]	; (8009c80 <plug_holes+0x124>)
 8009b9e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009ba2:	493c      	ldr	r1, [pc, #240]	; (8009c94 <plug_holes+0x138>)
 8009ba4:	4838      	ldr	r0, [pc, #224]	; (8009c88 <plug_holes+0x12c>)
 8009ba6:	f00b febb 	bl	8015920 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009bb2:	d906      	bls.n	8009bc2 <plug_holes+0x66>
 8009bb4:	4b32      	ldr	r3, [pc, #200]	; (8009c80 <plug_holes+0x124>)
 8009bb6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009bba:	4937      	ldr	r1, [pc, #220]	; (8009c98 <plug_holes+0x13c>)
 8009bbc:	4832      	ldr	r0, [pc, #200]	; (8009c88 <plug_holes+0x12c>)
 8009bbe:	f00b feaf 	bl	8015920 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7ff ffa4 	bl	8009b14 <ptr_to_mem>
 8009bcc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d024      	beq.n	8009c20 <plug_holes+0xc4>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	791b      	ldrb	r3, [r3, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d120      	bne.n	8009c20 <plug_holes+0xc4>
 8009bde:	4b2b      	ldr	r3, [pc, #172]	; (8009c8c <plug_holes+0x130>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d01b      	beq.n	8009c20 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009be8:	4b2c      	ldr	r3, [pc, #176]	; (8009c9c <plug_holes+0x140>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d102      	bne.n	8009bf8 <plug_holes+0x9c>
      lfree = mem;
 8009bf2:	4a2a      	ldr	r2, [pc, #168]	; (8009c9c <plug_holes+0x140>)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	881a      	ldrh	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009c08:	d00a      	beq.n	8009c20 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff ff80 	bl	8009b14 <ptr_to_mem>
 8009c14:	4604      	mov	r4, r0
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff ff8e 	bl	8009b38 <mem_to_ptr>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	885b      	ldrh	r3, [r3, #2]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff ff75 	bl	8009b14 <ptr_to_mem>
 8009c2a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d01f      	beq.n	8009c74 <plug_holes+0x118>
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	791b      	ldrb	r3, [r3, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d11b      	bne.n	8009c74 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009c3c:	4b17      	ldr	r3, [pc, #92]	; (8009c9c <plug_holes+0x140>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d102      	bne.n	8009c4c <plug_holes+0xf0>
      lfree = pmem;
 8009c46:	4a15      	ldr	r2, [pc, #84]	; (8009c9c <plug_holes+0x140>)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	881a      	ldrh	r2, [r3, #0]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009c5c:	d00a      	beq.n	8009c74 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff ff56 	bl	8009b14 <ptr_to_mem>
 8009c68:	4604      	mov	r4, r0
 8009c6a:	68b8      	ldr	r0, [r7, #8]
 8009c6c:	f7ff ff64 	bl	8009b38 <mem_to_ptr>
 8009c70:	4603      	mov	r3, r0
 8009c72:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009c74:	bf00      	nop
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd90      	pop	{r4, r7, pc}
 8009c7c:	2000810c 	.word	0x2000810c
 8009c80:	08016f9c 	.word	0x08016f9c
 8009c84:	08016fcc 	.word	0x08016fcc
 8009c88:	08016fe4 	.word	0x08016fe4
 8009c8c:	20008110 	.word	0x20008110
 8009c90:	0801700c 	.word	0x0801700c
 8009c94:	08017028 	.word	0x08017028
 8009c98:	08017044 	.word	0x08017044
 8009c9c:	20008114 	.word	0x20008114

08009ca0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009ca6:	4b18      	ldr	r3, [pc, #96]	; (8009d08 <mem_init+0x68>)
 8009ca8:	3303      	adds	r3, #3
 8009caa:	f023 0303 	bic.w	r3, r3, #3
 8009cae:	461a      	mov	r2, r3
 8009cb0:	4b16      	ldr	r3, [pc, #88]	; (8009d0c <mem_init+0x6c>)
 8009cb2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009cb4:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <mem_init+0x6c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009cc0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009cce:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8009cd2:	f7ff ff1f 	bl	8009b14 <ptr_to_mem>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4a0d      	ldr	r2, [pc, #52]	; (8009d10 <mem_init+0x70>)
 8009cda:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009cdc:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <mem_init+0x70>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009ce4:	4b0a      	ldr	r3, [pc, #40]	; (8009d10 <mem_init+0x70>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009cec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009cee:	4b08      	ldr	r3, [pc, #32]	; (8009d10 <mem_init+0x70>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009cf6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009cf8:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <mem_init+0x6c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a05      	ldr	r2, [pc, #20]	; (8009d14 <mem_init+0x74>)
 8009cfe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	200058f8 	.word	0x200058f8
 8009d0c:	2000810c 	.word	0x2000810c
 8009d10:	20008110 	.word	0x20008110
 8009d14:	20008114 	.word	0x20008114

08009d18 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff ff09 	bl	8009b38 <mem_to_ptr>
 8009d26:	4603      	mov	r3, r0
 8009d28:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff fef0 	bl	8009b14 <ptr_to_mem>
 8009d34:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	885b      	ldrh	r3, [r3, #2]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7ff feea 	bl	8009b14 <ptr_to_mem>
 8009d40:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009d4a:	d818      	bhi.n	8009d7e <mem_link_valid+0x66>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	885b      	ldrh	r3, [r3, #2]
 8009d50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009d54:	d813      	bhi.n	8009d7e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009d5a:	8afa      	ldrh	r2, [r7, #22]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d004      	beq.n	8009d6a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	8afa      	ldrh	r2, [r7, #22]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d109      	bne.n	8009d7e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009d6a:	4b08      	ldr	r3, [pc, #32]	; (8009d8c <mem_link_valid+0x74>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d006      	beq.n	8009d82 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	885b      	ldrh	r3, [r3, #2]
 8009d78:	8afa      	ldrh	r2, [r7, #22]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d001      	beq.n	8009d82 <mem_link_valid+0x6a>
    return 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e000      	b.n	8009d84 <mem_link_valid+0x6c>
  }
  return 1;
 8009d82:	2301      	movs	r3, #1
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20008110 	.word	0x20008110

08009d90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d04c      	beq.n	8009e38 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f003 0303 	and.w	r3, r3, #3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d007      	beq.n	8009db8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009da8:	4b25      	ldr	r3, [pc, #148]	; (8009e40 <mem_free+0xb0>)
 8009daa:	f240 2273 	movw	r2, #627	; 0x273
 8009dae:	4925      	ldr	r1, [pc, #148]	; (8009e44 <mem_free+0xb4>)
 8009db0:	4825      	ldr	r0, [pc, #148]	; (8009e48 <mem_free+0xb8>)
 8009db2:	f00b fdb5 	bl	8015920 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009db6:	e040      	b.n	8009e3a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3b08      	subs	r3, #8
 8009dbc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009dbe:	4b23      	ldr	r3, [pc, #140]	; (8009e4c <mem_free+0xbc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d306      	bcc.n	8009dd6 <mem_free+0x46>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f103 020c 	add.w	r2, r3, #12
 8009dce:	4b20      	ldr	r3, [pc, #128]	; (8009e50 <mem_free+0xc0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d907      	bls.n	8009de6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009dd6:	4b1a      	ldr	r3, [pc, #104]	; (8009e40 <mem_free+0xb0>)
 8009dd8:	f240 227f 	movw	r2, #639	; 0x27f
 8009ddc:	491d      	ldr	r1, [pc, #116]	; (8009e54 <mem_free+0xc4>)
 8009dde:	481a      	ldr	r0, [pc, #104]	; (8009e48 <mem_free+0xb8>)
 8009de0:	f00b fd9e 	bl	8015920 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009de4:	e029      	b.n	8009e3a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	791b      	ldrb	r3, [r3, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d107      	bne.n	8009dfe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009dee:	4b14      	ldr	r3, [pc, #80]	; (8009e40 <mem_free+0xb0>)
 8009df0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009df4:	4918      	ldr	r1, [pc, #96]	; (8009e58 <mem_free+0xc8>)
 8009df6:	4814      	ldr	r0, [pc, #80]	; (8009e48 <mem_free+0xb8>)
 8009df8:	f00b fd92 	bl	8015920 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009dfc:	e01d      	b.n	8009e3a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7ff ff8a 	bl	8009d18 <mem_link_valid>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d107      	bne.n	8009e1a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009e0a:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <mem_free+0xb0>)
 8009e0c:	f240 2295 	movw	r2, #661	; 0x295
 8009e10:	4912      	ldr	r1, [pc, #72]	; (8009e5c <mem_free+0xcc>)
 8009e12:	480d      	ldr	r0, [pc, #52]	; (8009e48 <mem_free+0xb8>)
 8009e14:	f00b fd84 	bl	8015920 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009e18:	e00f      	b.n	8009e3a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009e20:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <mem_free+0xd0>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d202      	bcs.n	8009e30 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009e2a:	4a0d      	ldr	r2, [pc, #52]	; (8009e60 <mem_free+0xd0>)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7ff fe93 	bl	8009b5c <plug_holes>
 8009e36:	e000      	b.n	8009e3a <mem_free+0xaa>
    return;
 8009e38:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	08016f9c 	.word	0x08016f9c
 8009e44:	08017070 	.word	0x08017070
 8009e48:	08016fe4 	.word	0x08016fe4
 8009e4c:	2000810c 	.word	0x2000810c
 8009e50:	20008110 	.word	0x20008110
 8009e54:	08017094 	.word	0x08017094
 8009e58:	080170b0 	.word	0x080170b0
 8009e5c:	080170d8 	.word	0x080170d8
 8009e60:	20008114 	.word	0x20008114

08009e64 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009e70:	887b      	ldrh	r3, [r7, #2]
 8009e72:	3303      	adds	r3, #3
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	f023 0303 	bic.w	r3, r3, #3
 8009e7a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009e7c:	8bfb      	ldrh	r3, [r7, #30]
 8009e7e:	2b0b      	cmp	r3, #11
 8009e80:	d801      	bhi.n	8009e86 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009e82:	230c      	movs	r3, #12
 8009e84:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009e86:	8bfb      	ldrh	r3, [r7, #30]
 8009e88:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009e8c:	d803      	bhi.n	8009e96 <mem_trim+0x32>
 8009e8e:	8bfa      	ldrh	r2, [r7, #30]
 8009e90:	887b      	ldrh	r3, [r7, #2]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d201      	bcs.n	8009e9a <mem_trim+0x36>
    return NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	e0cc      	b.n	800a034 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009e9a:	4b68      	ldr	r3, [pc, #416]	; (800a03c <mem_trim+0x1d8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d304      	bcc.n	8009eae <mem_trim+0x4a>
 8009ea4:	4b66      	ldr	r3, [pc, #408]	; (800a040 <mem_trim+0x1dc>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d306      	bcc.n	8009ebc <mem_trim+0x58>
 8009eae:	4b65      	ldr	r3, [pc, #404]	; (800a044 <mem_trim+0x1e0>)
 8009eb0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009eb4:	4964      	ldr	r1, [pc, #400]	; (800a048 <mem_trim+0x1e4>)
 8009eb6:	4865      	ldr	r0, [pc, #404]	; (800a04c <mem_trim+0x1e8>)
 8009eb8:	f00b fd32 	bl	8015920 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009ebc:	4b5f      	ldr	r3, [pc, #380]	; (800a03c <mem_trim+0x1d8>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d304      	bcc.n	8009ed0 <mem_trim+0x6c>
 8009ec6:	4b5e      	ldr	r3, [pc, #376]	; (800a040 <mem_trim+0x1dc>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d301      	bcc.n	8009ed4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	e0af      	b.n	800a034 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3b08      	subs	r3, #8
 8009ed8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009eda:	69b8      	ldr	r0, [r7, #24]
 8009edc:	f7ff fe2c 	bl	8009b38 <mem_to_ptr>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	881a      	ldrh	r2, [r3, #0]
 8009ee8:	8afb      	ldrh	r3, [r7, #22]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	3b08      	subs	r3, #8
 8009ef0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009ef2:	8bfa      	ldrh	r2, [r7, #30]
 8009ef4:	8abb      	ldrh	r3, [r7, #20]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d906      	bls.n	8009f08 <mem_trim+0xa4>
 8009efa:	4b52      	ldr	r3, [pc, #328]	; (800a044 <mem_trim+0x1e0>)
 8009efc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009f00:	4953      	ldr	r1, [pc, #332]	; (800a050 <mem_trim+0x1ec>)
 8009f02:	4852      	ldr	r0, [pc, #328]	; (800a04c <mem_trim+0x1e8>)
 8009f04:	f00b fd0c 	bl	8015920 <iprintf>
  if (newsize > size) {
 8009f08:	8bfa      	ldrh	r2, [r7, #30]
 8009f0a:	8abb      	ldrh	r3, [r7, #20]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d901      	bls.n	8009f14 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009f10:	2300      	movs	r3, #0
 8009f12:	e08f      	b.n	800a034 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009f14:	8bfa      	ldrh	r2, [r7, #30]
 8009f16:	8abb      	ldrh	r3, [r7, #20]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d101      	bne.n	8009f20 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	e089      	b.n	800a034 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7ff fdf5 	bl	8009b14 <ptr_to_mem>
 8009f2a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	791b      	ldrb	r3, [r3, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d13f      	bne.n	8009fb4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009f3c:	d106      	bne.n	8009f4c <mem_trim+0xe8>
 8009f3e:	4b41      	ldr	r3, [pc, #260]	; (800a044 <mem_trim+0x1e0>)
 8009f40:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009f44:	4943      	ldr	r1, [pc, #268]	; (800a054 <mem_trim+0x1f0>)
 8009f46:	4841      	ldr	r0, [pc, #260]	; (800a04c <mem_trim+0x1e8>)
 8009f48:	f00b fcea 	bl	8015920 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	881b      	ldrh	r3, [r3, #0]
 8009f50:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009f52:	8afa      	ldrh	r2, [r7, #22]
 8009f54:	8bfb      	ldrh	r3, [r7, #30]
 8009f56:	4413      	add	r3, r2
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009f5e:	4b3e      	ldr	r3, [pc, #248]	; (800a058 <mem_trim+0x1f4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d106      	bne.n	8009f76 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009f68:	89fb      	ldrh	r3, [r7, #14]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff fdd2 	bl	8009b14 <ptr_to_mem>
 8009f70:	4603      	mov	r3, r0
 8009f72:	4a39      	ldr	r2, [pc, #228]	; (800a058 <mem_trim+0x1f4>)
 8009f74:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009f76:	89fb      	ldrh	r3, [r7, #14]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff fdcb 	bl	8009b14 <ptr_to_mem>
 8009f7e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	2200      	movs	r2, #0
 8009f84:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	89ba      	ldrh	r2, [r7, #12]
 8009f8a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	8afa      	ldrh	r2, [r7, #22]
 8009f90:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	89fa      	ldrh	r2, [r7, #14]
 8009f96:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009fa0:	d047      	beq.n	800a032 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff fdb4 	bl	8009b14 <ptr_to_mem>
 8009fac:	4602      	mov	r2, r0
 8009fae:	89fb      	ldrh	r3, [r7, #14]
 8009fb0:	8053      	strh	r3, [r2, #2]
 8009fb2:	e03e      	b.n	800a032 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009fb4:	8bfb      	ldrh	r3, [r7, #30]
 8009fb6:	f103 0214 	add.w	r2, r3, #20
 8009fba:	8abb      	ldrh	r3, [r7, #20]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d838      	bhi.n	800a032 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009fc0:	8afa      	ldrh	r2, [r7, #22]
 8009fc2:	8bfb      	ldrh	r3, [r7, #30]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	3308      	adds	r3, #8
 8009fca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009fd4:	d106      	bne.n	8009fe4 <mem_trim+0x180>
 8009fd6:	4b1b      	ldr	r3, [pc, #108]	; (800a044 <mem_trim+0x1e0>)
 8009fd8:	f240 3216 	movw	r2, #790	; 0x316
 8009fdc:	491d      	ldr	r1, [pc, #116]	; (800a054 <mem_trim+0x1f0>)
 8009fde:	481b      	ldr	r0, [pc, #108]	; (800a04c <mem_trim+0x1e8>)
 8009fe0:	f00b fc9e 	bl	8015920 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff fd94 	bl	8009b14 <ptr_to_mem>
 8009fec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009fee:	4b1a      	ldr	r3, [pc, #104]	; (800a058 <mem_trim+0x1f4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d202      	bcs.n	8009ffe <mem_trim+0x19a>
      lfree = mem2;
 8009ff8:	4a17      	ldr	r2, [pc, #92]	; (800a058 <mem_trim+0x1f4>)
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2200      	movs	r2, #0
 800a002:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	881a      	ldrh	r2, [r3, #0]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	8afa      	ldrh	r2, [r7, #22]
 800a010:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	89fa      	ldrh	r2, [r7, #14]
 800a016:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a020:	d007      	beq.n	800a032 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff fd74 	bl	8009b14 <ptr_to_mem>
 800a02c:	4602      	mov	r2, r0
 800a02e:	89fb      	ldrh	r3, [r7, #14]
 800a030:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a032:	687b      	ldr	r3, [r7, #4]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3720      	adds	r7, #32
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	2000810c 	.word	0x2000810c
 800a040:	20008110 	.word	0x20008110
 800a044:	08016f9c 	.word	0x08016f9c
 800a048:	0801710c 	.word	0x0801710c
 800a04c:	08016fe4 	.word	0x08016fe4
 800a050:	08017124 	.word	0x08017124
 800a054:	08017144 	.word	0x08017144
 800a058:	20008114 	.word	0x20008114

0800a05c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <mem_malloc+0x14>
    return NULL;
 800a06c:	2300      	movs	r3, #0
 800a06e:	e0d9      	b.n	800a224 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	3303      	adds	r3, #3
 800a074:	b29b      	uxth	r3, r3
 800a076:	f023 0303 	bic.w	r3, r3, #3
 800a07a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a07c:	8bbb      	ldrh	r3, [r7, #28]
 800a07e:	2b0b      	cmp	r3, #11
 800a080:	d801      	bhi.n	800a086 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a082:	230c      	movs	r3, #12
 800a084:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a086:	8bbb      	ldrh	r3, [r7, #28]
 800a088:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a08c:	d803      	bhi.n	800a096 <mem_malloc+0x3a>
 800a08e:	8bba      	ldrh	r2, [r7, #28]
 800a090:	88fb      	ldrh	r3, [r7, #6]
 800a092:	429a      	cmp	r2, r3
 800a094:	d201      	bcs.n	800a09a <mem_malloc+0x3e>
    return NULL;
 800a096:	2300      	movs	r3, #0
 800a098:	e0c4      	b.n	800a224 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a09a:	4b64      	ldr	r3, [pc, #400]	; (800a22c <mem_malloc+0x1d0>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff fd4a 	bl	8009b38 <mem_to_ptr>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	83fb      	strh	r3, [r7, #30]
 800a0a8:	e0b4      	b.n	800a214 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a0aa:	8bfb      	ldrh	r3, [r7, #30]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff fd31 	bl	8009b14 <ptr_to_mem>
 800a0b2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	791b      	ldrb	r3, [r3, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f040 80a4 	bne.w	800a206 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	8bfb      	ldrh	r3, [r7, #30]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	f1a3 0208 	sub.w	r2, r3, #8
 800a0cc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	f0c0 8099 	bcc.w	800a206 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	8bfb      	ldrh	r3, [r7, #30]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	f1a3 0208 	sub.w	r2, r3, #8
 800a0e2:	8bbb      	ldrh	r3, [r7, #28]
 800a0e4:	3314      	adds	r3, #20
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d333      	bcc.n	800a152 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a0ea:	8bfa      	ldrh	r2, [r7, #30]
 800a0ec:	8bbb      	ldrh	r3, [r7, #28]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a0f6:	8a7b      	ldrh	r3, [r7, #18]
 800a0f8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a0fc:	d106      	bne.n	800a10c <mem_malloc+0xb0>
 800a0fe:	4b4c      	ldr	r3, [pc, #304]	; (800a230 <mem_malloc+0x1d4>)
 800a100:	f240 3287 	movw	r2, #903	; 0x387
 800a104:	494b      	ldr	r1, [pc, #300]	; (800a234 <mem_malloc+0x1d8>)
 800a106:	484c      	ldr	r0, [pc, #304]	; (800a238 <mem_malloc+0x1dc>)
 800a108:	f00b fc0a 	bl	8015920 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a10c:	8a7b      	ldrh	r3, [r7, #18]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff fd00 	bl	8009b14 <ptr_to_mem>
 800a114:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	881a      	ldrh	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	8bfa      	ldrh	r2, [r7, #30]
 800a128:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	8a7a      	ldrh	r2, [r7, #18]
 800a12e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2201      	movs	r2, #1
 800a134:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a13e:	d00b      	beq.n	800a158 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff fce5 	bl	8009b14 <ptr_to_mem>
 800a14a:	4602      	mov	r2, r0
 800a14c:	8a7b      	ldrh	r3, [r7, #18]
 800a14e:	8053      	strh	r3, [r2, #2]
 800a150:	e002      	b.n	800a158 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2201      	movs	r2, #1
 800a156:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a158:	4b34      	ldr	r3, [pc, #208]	; (800a22c <mem_malloc+0x1d0>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d127      	bne.n	800a1b2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a162:	4b32      	ldr	r3, [pc, #200]	; (800a22c <mem_malloc+0x1d0>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a168:	e005      	b.n	800a176 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff fcd0 	bl	8009b14 <ptr_to_mem>
 800a174:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d004      	beq.n	800a188 <mem_malloc+0x12c>
 800a17e:	4b2f      	ldr	r3, [pc, #188]	; (800a23c <mem_malloc+0x1e0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	429a      	cmp	r2, r3
 800a186:	d1f0      	bne.n	800a16a <mem_malloc+0x10e>
          }
          lfree = cur;
 800a188:	4a28      	ldr	r2, [pc, #160]	; (800a22c <mem_malloc+0x1d0>)
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a18e:	4b27      	ldr	r3, [pc, #156]	; (800a22c <mem_malloc+0x1d0>)
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	4b2a      	ldr	r3, [pc, #168]	; (800a23c <mem_malloc+0x1e0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d00b      	beq.n	800a1b2 <mem_malloc+0x156>
 800a19a:	4b24      	ldr	r3, [pc, #144]	; (800a22c <mem_malloc+0x1d0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	791b      	ldrb	r3, [r3, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d006      	beq.n	800a1b2 <mem_malloc+0x156>
 800a1a4:	4b22      	ldr	r3, [pc, #136]	; (800a230 <mem_malloc+0x1d4>)
 800a1a6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a1aa:	4925      	ldr	r1, [pc, #148]	; (800a240 <mem_malloc+0x1e4>)
 800a1ac:	4822      	ldr	r0, [pc, #136]	; (800a238 <mem_malloc+0x1dc>)
 800a1ae:	f00b fbb7 	bl	8015920 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a1b2:	8bba      	ldrh	r2, [r7, #28]
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	4a20      	ldr	r2, [pc, #128]	; (800a23c <mem_malloc+0x1e0>)
 800a1bc:	6812      	ldr	r2, [r2, #0]
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d906      	bls.n	800a1d0 <mem_malloc+0x174>
 800a1c2:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <mem_malloc+0x1d4>)
 800a1c4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a1c8:	491e      	ldr	r1, [pc, #120]	; (800a244 <mem_malloc+0x1e8>)
 800a1ca:	481b      	ldr	r0, [pc, #108]	; (800a238 <mem_malloc+0x1dc>)
 800a1cc:	f00b fba8 	bl	8015920 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f003 0303 	and.w	r3, r3, #3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d006      	beq.n	800a1e8 <mem_malloc+0x18c>
 800a1da:	4b15      	ldr	r3, [pc, #84]	; (800a230 <mem_malloc+0x1d4>)
 800a1dc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a1e0:	4919      	ldr	r1, [pc, #100]	; (800a248 <mem_malloc+0x1ec>)
 800a1e2:	4815      	ldr	r0, [pc, #84]	; (800a238 <mem_malloc+0x1dc>)
 800a1e4:	f00b fb9c 	bl	8015920 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d006      	beq.n	800a200 <mem_malloc+0x1a4>
 800a1f2:	4b0f      	ldr	r3, [pc, #60]	; (800a230 <mem_malloc+0x1d4>)
 800a1f4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a1f8:	4914      	ldr	r1, [pc, #80]	; (800a24c <mem_malloc+0x1f0>)
 800a1fa:	480f      	ldr	r0, [pc, #60]	; (800a238 <mem_malloc+0x1dc>)
 800a1fc:	f00b fb90 	bl	8015920 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	3308      	adds	r3, #8
 800a204:	e00e      	b.n	800a224 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a206:	8bfb      	ldrh	r3, [r7, #30]
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff fc83 	bl	8009b14 <ptr_to_mem>
 800a20e:	4603      	mov	r3, r0
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a214:	8bfa      	ldrh	r2, [r7, #30]
 800a216:	8bbb      	ldrh	r3, [r7, #28]
 800a218:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800a21c:	429a      	cmp	r2, r3
 800a21e:	f4ff af44 	bcc.w	800a0aa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20008114 	.word	0x20008114
 800a230:	08016f9c 	.word	0x08016f9c
 800a234:	08017144 	.word	0x08017144
 800a238:	08016fe4 	.word	0x08016fe4
 800a23c:	20008110 	.word	0x20008110
 800a240:	08017158 	.word	0x08017158
 800a244:	08017174 	.word	0x08017174
 800a248:	080171a4 	.word	0x080171a4
 800a24c:	080171d4 	.word	0x080171d4

0800a250 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	3303      	adds	r3, #3
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e011      	b.n	800a296 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	4413      	add	r3, r2
 800a28e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3301      	adds	r3, #1
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	885b      	ldrh	r3, [r3, #2]
 800a29a:	461a      	mov	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	dbe7      	blt.n	800a272 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a2a2:	bf00      	nop
 800a2a4:	bf00      	nop
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	80fb      	strh	r3, [r7, #6]
 800a2ba:	e009      	b.n	800a2d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a2bc:	88fb      	ldrh	r3, [r7, #6]
 800a2be:	4a08      	ldr	r2, [pc, #32]	; (800a2e0 <memp_init+0x30>)
 800a2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7ff ffc3 	bl	800a250 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	80fb      	strh	r3, [r7, #6]
 800a2d0:	88fb      	ldrh	r3, [r7, #6]
 800a2d2:	2b08      	cmp	r3, #8
 800a2d4:	d9f2      	bls.n	800a2bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	0801c438 	.word	0x0801c438

0800a2e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d012      	beq.n	800a320 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	6812      	ldr	r2, [r2, #0]
 800a302:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d006      	beq.n	800a31c <do_memp_malloc_pool+0x38>
 800a30e:	4b07      	ldr	r3, [pc, #28]	; (800a32c <do_memp_malloc_pool+0x48>)
 800a310:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a314:	4906      	ldr	r1, [pc, #24]	; (800a330 <do_memp_malloc_pool+0x4c>)
 800a316:	4807      	ldr	r0, [pc, #28]	; (800a334 <do_memp_malloc_pool+0x50>)
 800a318:	f00b fb02 	bl	8015920 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	e000      	b.n	800a322 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	080171f8 	.word	0x080171f8
 800a330:	08017228 	.word	0x08017228
 800a334:	0801724c 	.word	0x0801724c

0800a338 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d106      	bne.n	800a354 <memp_malloc_pool+0x1c>
 800a346:	4b0a      	ldr	r3, [pc, #40]	; (800a370 <memp_malloc_pool+0x38>)
 800a348:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a34c:	4909      	ldr	r1, [pc, #36]	; (800a374 <memp_malloc_pool+0x3c>)
 800a34e:	480a      	ldr	r0, [pc, #40]	; (800a378 <memp_malloc_pool+0x40>)
 800a350:	f00b fae6 	bl	8015920 <iprintf>
  if (desc == NULL) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <memp_malloc_pool+0x26>
    return NULL;
 800a35a:	2300      	movs	r3, #0
 800a35c:	e003      	b.n	800a366 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff ffc0 	bl	800a2e4 <do_memp_malloc_pool>
 800a364:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	080171f8 	.word	0x080171f8
 800a374:	08017274 	.word	0x08017274
 800a378:	0801724c 	.word	0x0801724c

0800a37c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	2b08      	cmp	r3, #8
 800a38a:	d908      	bls.n	800a39e <memp_malloc+0x22>
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <memp_malloc+0x3c>)
 800a38e:	f240 1257 	movw	r2, #343	; 0x157
 800a392:	490a      	ldr	r1, [pc, #40]	; (800a3bc <memp_malloc+0x40>)
 800a394:	480a      	ldr	r0, [pc, #40]	; (800a3c0 <memp_malloc+0x44>)
 800a396:	f00b fac3 	bl	8015920 <iprintf>
 800a39a:	2300      	movs	r3, #0
 800a39c:	e008      	b.n	800a3b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	4a08      	ldr	r2, [pc, #32]	; (800a3c4 <memp_malloc+0x48>)
 800a3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff ff9c 	bl	800a2e4 <do_memp_malloc_pool>
 800a3ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	080171f8 	.word	0x080171f8
 800a3bc:	08017288 	.word	0x08017288
 800a3c0:	0801724c 	.word	0x0801724c
 800a3c4:	0801c438 	.word	0x0801c438

0800a3c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	f003 0303 	and.w	r3, r3, #3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d006      	beq.n	800a3ea <do_memp_free_pool+0x22>
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <do_memp_free_pool+0x40>)
 800a3de:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a3e2:	490a      	ldr	r1, [pc, #40]	; (800a40c <do_memp_free_pool+0x44>)
 800a3e4:	480a      	ldr	r0, [pc, #40]	; (800a410 <do_memp_free_pool+0x48>)
 800a3e6:	f00b fa9b 	bl	8015920 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a400:	bf00      	nop
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	080171f8 	.word	0x080171f8
 800a40c:	080172a8 	.word	0x080172a8
 800a410:	0801724c 	.word	0x0801724c

0800a414 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d106      	bne.n	800a432 <memp_free_pool+0x1e>
 800a424:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <memp_free_pool+0x3c>)
 800a426:	f240 1295 	movw	r2, #405	; 0x195
 800a42a:	490a      	ldr	r1, [pc, #40]	; (800a454 <memp_free_pool+0x40>)
 800a42c:	480a      	ldr	r0, [pc, #40]	; (800a458 <memp_free_pool+0x44>)
 800a42e:	f00b fa77 	bl	8015920 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <memp_free_pool+0x34>
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d004      	beq.n	800a448 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff ffc1 	bl	800a3c8 <do_memp_free_pool>
 800a446:	e000      	b.n	800a44a <memp_free_pool+0x36>
    return;
 800a448:	bf00      	nop
}
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	080171f8 	.word	0x080171f8
 800a454:	08017274 	.word	0x08017274
 800a458:	0801724c 	.word	0x0801724c

0800a45c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	6039      	str	r1, [r7, #0]
 800a466:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	2b08      	cmp	r3, #8
 800a46c:	d907      	bls.n	800a47e <memp_free+0x22>
 800a46e:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <memp_free+0x44>)
 800a470:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a474:	490b      	ldr	r1, [pc, #44]	; (800a4a4 <memp_free+0x48>)
 800a476:	480c      	ldr	r0, [pc, #48]	; (800a4a8 <memp_free+0x4c>)
 800a478:	f00b fa52 	bl	8015920 <iprintf>
 800a47c:	e00c      	b.n	800a498 <memp_free+0x3c>

  if (mem == NULL) {
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d008      	beq.n	800a496 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a484:	79fb      	ldrb	r3, [r7, #7]
 800a486:	4a09      	ldr	r2, [pc, #36]	; (800a4ac <memp_free+0x50>)
 800a488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	4618      	mov	r0, r3
 800a490:	f7ff ff9a 	bl	800a3c8 <do_memp_free_pool>
 800a494:	e000      	b.n	800a498 <memp_free+0x3c>
    return;
 800a496:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	080171f8 	.word	0x080171f8
 800a4a4:	080172c8 	.word	0x080172c8
 800a4a8:	0801724c 	.word	0x0801724c
 800a4ac:	0801c438 	.word	0x0801c438

0800a4b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a4b4:	bf00      	nop
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
	...

0800a4c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d108      	bne.n	800a4e6 <netif_add+0x26>
 800a4d4:	4b5b      	ldr	r3, [pc, #364]	; (800a644 <netif_add+0x184>)
 800a4d6:	f240 1227 	movw	r2, #295	; 0x127
 800a4da:	495b      	ldr	r1, [pc, #364]	; (800a648 <netif_add+0x188>)
 800a4dc:	485b      	ldr	r0, [pc, #364]	; (800a64c <netif_add+0x18c>)
 800a4de:	f00b fa1f 	bl	8015920 <iprintf>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e0a9      	b.n	800a63a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d108      	bne.n	800a4fe <netif_add+0x3e>
 800a4ec:	4b55      	ldr	r3, [pc, #340]	; (800a644 <netif_add+0x184>)
 800a4ee:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a4f2:	4957      	ldr	r1, [pc, #348]	; (800a650 <netif_add+0x190>)
 800a4f4:	4855      	ldr	r0, [pc, #340]	; (800a64c <netif_add+0x18c>)
 800a4f6:	f00b fa13 	bl	8015920 <iprintf>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e09d      	b.n	800a63a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a504:	4b53      	ldr	r3, [pc, #332]	; (800a654 <netif_add+0x194>)
 800a506:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a50e:	4b51      	ldr	r3, [pc, #324]	; (800a654 <netif_add+0x194>)
 800a510:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a518:	4b4e      	ldr	r3, [pc, #312]	; (800a654 <netif_add+0x194>)
 800a51a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	4a49      	ldr	r2, [pc, #292]	; (800a658 <netif_add+0x198>)
 800a532:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3324      	adds	r3, #36	; 0x24
 800a546:	2204      	movs	r2, #4
 800a548:	2100      	movs	r1, #0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f00b f9e0 	bl	8015910 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6a3a      	ldr	r2, [r7, #32]
 800a55a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a55c:	4b3f      	ldr	r3, [pc, #252]	; (800a65c <netif_add+0x19c>)
 800a55e:	781a      	ldrb	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a56a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	68b9      	ldr	r1, [r7, #8]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 f914 	bl	800a7a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	4798      	blx	r3
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <netif_add+0xc8>
    return NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	e058      	b.n	800a63a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a58e:	2bff      	cmp	r3, #255	; 0xff
 800a590:	d103      	bne.n	800a59a <netif_add+0xda>
        netif->num = 0;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a59e:	4b30      	ldr	r3, [pc, #192]	; (800a660 <netif_add+0x1a0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	e02b      	b.n	800a5fe <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d106      	bne.n	800a5bc <netif_add+0xfc>
 800a5ae:	4b25      	ldr	r3, [pc, #148]	; (800a644 <netif_add+0x184>)
 800a5b0:	f240 128b 	movw	r2, #395	; 0x18b
 800a5b4:	492b      	ldr	r1, [pc, #172]	; (800a664 <netif_add+0x1a4>)
 800a5b6:	4825      	ldr	r0, [pc, #148]	; (800a64c <netif_add+0x18c>)
 800a5b8:	f00b f9b2 	bl	8015920 <iprintf>
        num_netifs++;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2bff      	cmp	r3, #255	; 0xff
 800a5c6:	dd06      	ble.n	800a5d6 <netif_add+0x116>
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <netif_add+0x184>)
 800a5ca:	f240 128d 	movw	r2, #397	; 0x18d
 800a5ce:	4926      	ldr	r1, [pc, #152]	; (800a668 <netif_add+0x1a8>)
 800a5d0:	481e      	ldr	r0, [pc, #120]	; (800a64c <netif_add+0x18c>)
 800a5d2:	f00b f9a5 	bl	8015920 <iprintf>
        if (netif2->num == netif->num) {
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d108      	bne.n	800a5f8 <netif_add+0x138>
          netif->num++;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a5f6:	e005      	b.n	800a604 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1d0      	bne.n	800a5a6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1be      	bne.n	800a588 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a610:	2bfe      	cmp	r3, #254	; 0xfe
 800a612:	d103      	bne.n	800a61c <netif_add+0x15c>
    netif_num = 0;
 800a614:	4b11      	ldr	r3, [pc, #68]	; (800a65c <netif_add+0x19c>)
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
 800a61a:	e006      	b.n	800a62a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a622:	3301      	adds	r3, #1
 800a624:	b2da      	uxtb	r2, r3
 800a626:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <netif_add+0x19c>)
 800a628:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a62a:	4b0d      	ldr	r3, [pc, #52]	; (800a660 <netif_add+0x1a0>)
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a632:	4a0b      	ldr	r2, [pc, #44]	; (800a660 <netif_add+0x1a0>)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a638:	68fb      	ldr	r3, [r7, #12]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	080172e4 	.word	0x080172e4
 800a648:	08017378 	.word	0x08017378
 800a64c:	08017334 	.word	0x08017334
 800a650:	08017394 	.word	0x08017394
 800a654:	0801c4ac 	.word	0x0801c4ac
 800a658:	0800aa83 	.word	0x0800aa83
 800a65c:	2000b02c 	.word	0x2000b02c
 800a660:	2000b024 	.word	0x2000b024
 800a664:	080173b8 	.word	0x080173b8
 800a668:	080173cc 	.word	0x080173cc

0800a66c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f002 fb57 	bl	800cd2c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f006 ff3d 	bl	8011500 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a686:	bf00      	nop
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d106      	bne.n	800a6b0 <netif_do_set_ipaddr+0x20>
 800a6a2:	4b1d      	ldr	r3, [pc, #116]	; (800a718 <netif_do_set_ipaddr+0x88>)
 800a6a4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a6a8:	491c      	ldr	r1, [pc, #112]	; (800a71c <netif_do_set_ipaddr+0x8c>)
 800a6aa:	481d      	ldr	r0, [pc, #116]	; (800a720 <netif_do_set_ipaddr+0x90>)
 800a6ac:	f00b f938 	bl	8015920 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d106      	bne.n	800a6c4 <netif_do_set_ipaddr+0x34>
 800a6b6:	4b18      	ldr	r3, [pc, #96]	; (800a718 <netif_do_set_ipaddr+0x88>)
 800a6b8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a6bc:	4917      	ldr	r1, [pc, #92]	; (800a71c <netif_do_set_ipaddr+0x8c>)
 800a6be:	4818      	ldr	r0, [pc, #96]	; (800a720 <netif_do_set_ipaddr+0x90>)
 800a6c0:	f00b f92e 	bl	8015920 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d01c      	beq.n	800a70c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a6e2:	f107 0314 	add.w	r3, r7, #20
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff ffbf 	bl	800a66c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d002      	beq.n	800a6fa <netif_do_set_ipaddr+0x6a>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	e000      	b.n	800a6fc <netif_do_set_ipaddr+0x6c>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a700:	2101      	movs	r1, #1
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 f8d2 	bl	800a8ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a708:	2301      	movs	r3, #1
 800a70a:	e000      	b.n	800a70e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	080172e4 	.word	0x080172e4
 800a71c:	080173fc 	.word	0x080173fc
 800a720:	08017334 	.word	0x08017334

0800a724 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3308      	adds	r3, #8
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d00a      	beq.n	800a754 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <netif_do_set_netmask+0x26>
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	e000      	b.n	800a74c <netif_do_set_netmask+0x28>
 800a74a:	2300      	movs	r3, #0
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a750:	2301      	movs	r3, #1
 800a752:	e000      	b.n	800a756 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a762:	b480      	push	{r7}
 800a764:	b085      	sub	sp, #20
 800a766:	af00      	add	r7, sp, #0
 800a768:	60f8      	str	r0, [r7, #12]
 800a76a:	60b9      	str	r1, [r7, #8]
 800a76c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	330c      	adds	r3, #12
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d00a      	beq.n	800a792 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <netif_do_set_gw+0x26>
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	e000      	b.n	800a78a <netif_do_set_gw+0x28>
 800a788:	2300      	movs	r3, #0
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a78e:	2301      	movs	r3, #1
 800a790:	e000      	b.n	800a794 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b088      	sub	sp, #32
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	; (800a830 <netif_set_addr+0x90>)
 800a7be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a7c6:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <netif_set_addr+0x90>)
 800a7c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a7d0:	4b17      	ldr	r3, [pc, #92]	; (800a830 <netif_set_addr+0x90>)
 800a7d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <netif_set_addr+0x42>
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <netif_set_addr+0x46>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e000      	b.n	800a7e8 <netif_set_addr+0x48>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a7f0:	f107 0310 	add.w	r3, r7, #16
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	68b9      	ldr	r1, [r7, #8]
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f7ff ff49 	bl	800a690 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a7fe:	69fa      	ldr	r2, [r7, #28]
 800a800:	6879      	ldr	r1, [r7, #4]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff ff8e 	bl	800a724 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7ff ffa8 	bl	800a762 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d106      	bne.n	800a826 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a818:	f107 0310 	add.w	r3, r7, #16
 800a81c:	461a      	mov	r2, r3
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7ff ff35 	bl	800a690 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a826:	bf00      	nop
 800a828:	3720      	adds	r7, #32
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	0801c4ac 	.word	0x0801c4ac

0800a834 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a83c:	4a04      	ldr	r2, [pc, #16]	; (800a850 <netif_set_default+0x1c>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	2000b028 	.word	0x2000b028

0800a854 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d107      	bne.n	800a872 <netif_set_up+0x1e>
 800a862:	4b0f      	ldr	r3, [pc, #60]	; (800a8a0 <netif_set_up+0x4c>)
 800a864:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a868:	490e      	ldr	r1, [pc, #56]	; (800a8a4 <netif_set_up+0x50>)
 800a86a:	480f      	ldr	r0, [pc, #60]	; (800a8a8 <netif_set_up+0x54>)
 800a86c:	f00b f858 	bl	8015920 <iprintf>
 800a870:	e013      	b.n	800a89a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10c      	bne.n	800a89a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a886:	f043 0301 	orr.w	r3, r3, #1
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a892:	2103      	movs	r1, #3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f809 	bl	800a8ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	080172e4 	.word	0x080172e4
 800a8a4:	0801746c 	.word	0x0801746c
 800a8a8:	08017334 	.word	0x08017334

0800a8ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d106      	bne.n	800a8cc <netif_issue_reports+0x20>
 800a8be:	4b18      	ldr	r3, [pc, #96]	; (800a920 <netif_issue_reports+0x74>)
 800a8c0:	f240 326d 	movw	r2, #877	; 0x36d
 800a8c4:	4917      	ldr	r1, [pc, #92]	; (800a924 <netif_issue_reports+0x78>)
 800a8c6:	4818      	ldr	r0, [pc, #96]	; (800a928 <netif_issue_reports+0x7c>)
 800a8c8:	f00b f82a 	bl	8015920 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a8d2:	f003 0304 	and.w	r3, r3, #4
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d01e      	beq.n	800a918 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a8e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d017      	beq.n	800a918 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a8e8:	78fb      	ldrb	r3, [r7, #3]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d013      	beq.n	800a91a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00e      	beq.n	800a91a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a902:	f003 0308 	and.w	r3, r3, #8
 800a906:	2b00      	cmp	r3, #0
 800a908:	d007      	beq.n	800a91a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	3304      	adds	r3, #4
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f009 fbf7 	bl	8014104 <etharp_request>
 800a916:	e000      	b.n	800a91a <netif_issue_reports+0x6e>
    return;
 800a918:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	080172e4 	.word	0x080172e4
 800a924:	08017488 	.word	0x08017488
 800a928:	08017334 	.word	0x08017334

0800a92c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d107      	bne.n	800a94a <netif_set_down+0x1e>
 800a93a:	4b12      	ldr	r3, [pc, #72]	; (800a984 <netif_set_down+0x58>)
 800a93c:	f240 329b 	movw	r2, #923	; 0x39b
 800a940:	4911      	ldr	r1, [pc, #68]	; (800a988 <netif_set_down+0x5c>)
 800a942:	4812      	ldr	r0, [pc, #72]	; (800a98c <netif_set_down+0x60>)
 800a944:	f00a ffec 	bl	8015920 <iprintf>
 800a948:	e019      	b.n	800a97e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	2b00      	cmp	r3, #0
 800a956:	d012      	beq.n	800a97e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a95e:	f023 0301 	bic.w	r3, r3, #1
 800a962:	b2da      	uxtb	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a970:	f003 0308 	and.w	r3, r3, #8
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f008 ff7d 	bl	8013878 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	080172e4 	.word	0x080172e4
 800a988:	080174ac 	.word	0x080174ac
 800a98c:	08017334 	.word	0x08017334

0800a990 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d107      	bne.n	800a9ae <netif_set_link_up+0x1e>
 800a99e:	4b15      	ldr	r3, [pc, #84]	; (800a9f4 <netif_set_link_up+0x64>)
 800a9a0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a9a4:	4914      	ldr	r1, [pc, #80]	; (800a9f8 <netif_set_link_up+0x68>)
 800a9a6:	4815      	ldr	r0, [pc, #84]	; (800a9fc <netif_set_link_up+0x6c>)
 800a9a8:	f00a ffba 	bl	8015920 <iprintf>
 800a9ac:	e01e      	b.n	800a9ec <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d117      	bne.n	800a9ec <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9c2:	f043 0304 	orr.w	r3, r3, #4
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f007 f9c2 	bl	8011d58 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a9d4:	2103      	movs	r1, #3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff ff68 	bl	800a8ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <netif_set_link_up+0x5c>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	080172e4 	.word	0x080172e4
 800a9f8:	080174cc 	.word	0x080174cc
 800a9fc:	08017334 	.word	0x08017334

0800aa00 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d107      	bne.n	800aa1e <netif_set_link_down+0x1e>
 800aa0e:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <netif_set_link_down+0x54>)
 800aa10:	f240 4206 	movw	r2, #1030	; 0x406
 800aa14:	4910      	ldr	r1, [pc, #64]	; (800aa58 <netif_set_link_down+0x58>)
 800aa16:	4811      	ldr	r0, [pc, #68]	; (800aa5c <netif_set_link_down+0x5c>)
 800aa18:	f00a ff82 	bl	8015920 <iprintf>
 800aa1c:	e017      	b.n	800aa4e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d010      	beq.n	800aa4e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa32:	f023 0304 	bic.w	r3, r3, #4
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <netif_set_link_down+0x4e>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	080172e4 	.word	0x080172e4
 800aa58:	080174f0 	.word	0x080174f0
 800aa5c:	08017334 	.word	0x08017334

0800aa60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	61da      	str	r2, [r3, #28]
  }
}
 800aa76:	bf00      	nop
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b085      	sub	sp, #20
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	60f8      	str	r0, [r7, #12]
 800aa8a:	60b9      	str	r1, [r7, #8]
 800aa8c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800aa8e:	f06f 030b 	mvn.w	r3, #11
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
	...

0800aaa0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d013      	beq.n	800aad8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <netif_get_by_index+0x48>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	e00c      	b.n	800aad2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aabe:	3301      	adds	r3, #1
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	79fa      	ldrb	r2, [r7, #7]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d101      	bne.n	800aacc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	e006      	b.n	800aada <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60fb      	str	r3, [r7, #12]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1ef      	bne.n	800aab8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	2000b024 	.word	0x2000b024

0800aaec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <pbuf_free_ooseq+0x38>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aaf8:	4b0b      	ldr	r3, [pc, #44]	; (800ab28 <pbuf_free_ooseq+0x3c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	607b      	str	r3, [r7, #4]
 800aafe:	e00a      	b.n	800ab16 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f002 f94d 	bl	800cda8 <tcp_free_ooseq>
      return;
 800ab0e:	e005      	b.n	800ab1c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1f1      	bne.n	800ab00 <pbuf_free_ooseq+0x14>
    }
  }
}
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	2000b02d 	.word	0x2000b02d
 800ab28:	2000b03c 	.word	0x2000b03c

0800ab2c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ab30:	4b03      	ldr	r3, [pc, #12]	; (800ab40 <pbuf_pool_is_empty+0x14>)
 800ab32:	2201      	movs	r2, #1
 800ab34:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ab36:	bf00      	nop
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	2000b02d 	.word	0x2000b02d

0800ab44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4611      	mov	r1, r2
 800ab50:	461a      	mov	r2, r3
 800ab52:	460b      	mov	r3, r1
 800ab54:	80fb      	strh	r3, [r7, #6]
 800ab56:	4613      	mov	r3, r2
 800ab58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	88fa      	ldrh	r2, [r7, #6]
 800ab6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	88ba      	ldrh	r2, [r7, #4]
 800ab70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ab72:	8b3b      	ldrh	r3, [r7, #24]
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	7f3a      	ldrb	r2, [r7, #28]
 800ab7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2201      	movs	r2, #1
 800ab84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	73da      	strb	r2, [r3, #15]
}
 800ab8c:	bf00      	nop
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08c      	sub	sp, #48	; 0x30
 800ab9c:	af02      	add	r7, sp, #8
 800ab9e:	4603      	mov	r3, r0
 800aba0:	71fb      	strb	r3, [r7, #7]
 800aba2:	460b      	mov	r3, r1
 800aba4:	80bb      	strh	r3, [r7, #4]
 800aba6:	4613      	mov	r3, r2
 800aba8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800abaa:	79fb      	ldrb	r3, [r7, #7]
 800abac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800abae:	887b      	ldrh	r3, [r7, #2]
 800abb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800abb4:	d07f      	beq.n	800acb6 <pbuf_alloc+0x11e>
 800abb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800abba:	f300 80c8 	bgt.w	800ad4e <pbuf_alloc+0x1b6>
 800abbe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800abc2:	d010      	beq.n	800abe6 <pbuf_alloc+0x4e>
 800abc4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800abc8:	f300 80c1 	bgt.w	800ad4e <pbuf_alloc+0x1b6>
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d002      	beq.n	800abd6 <pbuf_alloc+0x3e>
 800abd0:	2b41      	cmp	r3, #65	; 0x41
 800abd2:	f040 80bc 	bne.w	800ad4e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800abd6:	887a      	ldrh	r2, [r7, #2]
 800abd8:	88bb      	ldrh	r3, [r7, #4]
 800abda:	4619      	mov	r1, r3
 800abdc:	2000      	movs	r0, #0
 800abde:	f000 f8d1 	bl	800ad84 <pbuf_alloc_reference>
 800abe2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800abe4:	e0bd      	b.n	800ad62 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800abea:	2300      	movs	r3, #0
 800abec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800abee:	88bb      	ldrh	r3, [r7, #4]
 800abf0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800abf2:	2008      	movs	r0, #8
 800abf4:	f7ff fbc2 	bl	800a37c <memp_malloc>
 800abf8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d109      	bne.n	800ac14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ac00:	f7ff ff94 	bl	800ab2c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ac0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac0c:	f000 faa8 	bl	800b160 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ac10:	2300      	movs	r3, #0
 800ac12:	e0a7      	b.n	800ad64 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ac14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac16:	3303      	adds	r3, #3
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	8b7a      	ldrh	r2, [r7, #26]
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	bf28      	it	cs
 800ac2c:	4613      	movcs	r3, r2
 800ac2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ac30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac32:	3310      	adds	r3, #16
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	4413      	add	r3, r2
 800ac38:	3303      	adds	r3, #3
 800ac3a:	f023 0303 	bic.w	r3, r3, #3
 800ac3e:	4618      	mov	r0, r3
 800ac40:	89f9      	ldrh	r1, [r7, #14]
 800ac42:	8b7a      	ldrh	r2, [r7, #26]
 800ac44:	2300      	movs	r3, #0
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	887b      	ldrh	r3, [r7, #2]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4601      	mov	r1, r0
 800ac50:	6938      	ldr	r0, [r7, #16]
 800ac52:	f7ff ff77 	bl	800ab44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f003 0303 	and.w	r3, r3, #3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d006      	beq.n	800ac70 <pbuf_alloc+0xd8>
 800ac62:	4b42      	ldr	r3, [pc, #264]	; (800ad6c <pbuf_alloc+0x1d4>)
 800ac64:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac68:	4941      	ldr	r1, [pc, #260]	; (800ad70 <pbuf_alloc+0x1d8>)
 800ac6a:	4842      	ldr	r0, [pc, #264]	; (800ad74 <pbuf_alloc+0x1dc>)
 800ac6c:	f00a fe58 	bl	8015920 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ac70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac72:	3303      	adds	r3, #3
 800ac74:	f023 0303 	bic.w	r3, r3, #3
 800ac78:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ac7c:	d106      	bne.n	800ac8c <pbuf_alloc+0xf4>
 800ac7e:	4b3b      	ldr	r3, [pc, #236]	; (800ad6c <pbuf_alloc+0x1d4>)
 800ac80:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ac84:	493c      	ldr	r1, [pc, #240]	; (800ad78 <pbuf_alloc+0x1e0>)
 800ac86:	483b      	ldr	r0, [pc, #236]	; (800ad74 <pbuf_alloc+0x1dc>)
 800ac88:	f00a fe4a 	bl	8015920 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d102      	bne.n	800ac98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	627b      	str	r3, [r7, #36]	; 0x24
 800ac96:	e002      	b.n	800ac9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800aca2:	8b7a      	ldrh	r2, [r7, #26]
 800aca4:	89fb      	ldrh	r3, [r7, #14]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800acae:	8b7b      	ldrh	r3, [r7, #26]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d19e      	bne.n	800abf2 <pbuf_alloc+0x5a>
      break;
 800acb4:	e055      	b.n	800ad62 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800acb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acb8:	3303      	adds	r3, #3
 800acba:	b29b      	uxth	r3, r3
 800acbc:	f023 0303 	bic.w	r3, r3, #3
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	88bb      	ldrh	r3, [r7, #4]
 800acc4:	3303      	adds	r3, #3
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	b29b      	uxth	r3, r3
 800acce:	4413      	add	r3, r2
 800acd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800acd2:	8b3b      	ldrh	r3, [r7, #24]
 800acd4:	3310      	adds	r3, #16
 800acd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800acd8:	8b3a      	ldrh	r2, [r7, #24]
 800acda:	88bb      	ldrh	r3, [r7, #4]
 800acdc:	3303      	adds	r3, #3
 800acde:	f023 0303 	bic.w	r3, r3, #3
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d306      	bcc.n	800acf4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ace6:	8afa      	ldrh	r2, [r7, #22]
 800ace8:	88bb      	ldrh	r3, [r7, #4]
 800acea:	3303      	adds	r3, #3
 800acec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d201      	bcs.n	800acf8 <pbuf_alloc+0x160>
        return NULL;
 800acf4:	2300      	movs	r3, #0
 800acf6:	e035      	b.n	800ad64 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800acf8:	8afb      	ldrh	r3, [r7, #22]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff f9ae 	bl	800a05c <mem_malloc>
 800ad00:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <pbuf_alloc+0x174>
        return NULL;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	e02b      	b.n	800ad64 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ad0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad0e:	3310      	adds	r3, #16
 800ad10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad12:	4413      	add	r3, r2
 800ad14:	3303      	adds	r3, #3
 800ad16:	f023 0303 	bic.w	r3, r3, #3
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	88b9      	ldrh	r1, [r7, #4]
 800ad1e:	88ba      	ldrh	r2, [r7, #4]
 800ad20:	2300      	movs	r3, #0
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	887b      	ldrh	r3, [r7, #2]
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad2e:	f7ff ff09 	bl	800ab44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d010      	beq.n	800ad60 <pbuf_alloc+0x1c8>
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <pbuf_alloc+0x1d4>)
 800ad40:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ad44:	490d      	ldr	r1, [pc, #52]	; (800ad7c <pbuf_alloc+0x1e4>)
 800ad46:	480b      	ldr	r0, [pc, #44]	; (800ad74 <pbuf_alloc+0x1dc>)
 800ad48:	f00a fdea 	bl	8015920 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ad4c:	e008      	b.n	800ad60 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ad4e:	4b07      	ldr	r3, [pc, #28]	; (800ad6c <pbuf_alloc+0x1d4>)
 800ad50:	f240 1227 	movw	r2, #295	; 0x127
 800ad54:	490a      	ldr	r1, [pc, #40]	; (800ad80 <pbuf_alloc+0x1e8>)
 800ad56:	4807      	ldr	r0, [pc, #28]	; (800ad74 <pbuf_alloc+0x1dc>)
 800ad58:	f00a fde2 	bl	8015920 <iprintf>
      return NULL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e001      	b.n	800ad64 <pbuf_alloc+0x1cc>
      break;
 800ad60:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3728      	adds	r7, #40	; 0x28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	08017514 	.word	0x08017514
 800ad70:	08017544 	.word	0x08017544
 800ad74:	08017574 	.word	0x08017574
 800ad78:	0801759c 	.word	0x0801759c
 800ad7c:	080175d0 	.word	0x080175d0
 800ad80:	080175fc 	.word	0x080175fc

0800ad84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af02      	add	r7, sp, #8
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	807b      	strh	r3, [r7, #2]
 800ad90:	4613      	mov	r3, r2
 800ad92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ad94:	883b      	ldrh	r3, [r7, #0]
 800ad96:	2b41      	cmp	r3, #65	; 0x41
 800ad98:	d009      	beq.n	800adae <pbuf_alloc_reference+0x2a>
 800ad9a:	883b      	ldrh	r3, [r7, #0]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d006      	beq.n	800adae <pbuf_alloc_reference+0x2a>
 800ada0:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <pbuf_alloc_reference+0x5c>)
 800ada2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ada6:	490f      	ldr	r1, [pc, #60]	; (800ade4 <pbuf_alloc_reference+0x60>)
 800ada8:	480f      	ldr	r0, [pc, #60]	; (800ade8 <pbuf_alloc_reference+0x64>)
 800adaa:	f00a fdb9 	bl	8015920 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800adae:	2007      	movs	r0, #7
 800adb0:	f7ff fae4 	bl	800a37c <memp_malloc>
 800adb4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800adbc:	2300      	movs	r3, #0
 800adbe:	e00b      	b.n	800add8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800adc0:	8879      	ldrh	r1, [r7, #2]
 800adc2:	887a      	ldrh	r2, [r7, #2]
 800adc4:	2300      	movs	r3, #0
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	883b      	ldrh	r3, [r7, #0]
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	460b      	mov	r3, r1
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f7ff feb7 	bl	800ab44 <pbuf_init_alloced_pbuf>
  return p;
 800add6:	68fb      	ldr	r3, [r7, #12]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	08017514 	.word	0x08017514
 800ade4:	08017618 	.word	0x08017618
 800ade8:	08017574 	.word	0x08017574

0800adec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af02      	add	r7, sp, #8
 800adf2:	607b      	str	r3, [r7, #4]
 800adf4:	4603      	mov	r3, r0
 800adf6:	73fb      	strb	r3, [r7, #15]
 800adf8:	460b      	mov	r3, r1
 800adfa:	81bb      	strh	r3, [r7, #12]
 800adfc:	4613      	mov	r3, r2
 800adfe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ae04:	8a7b      	ldrh	r3, [r7, #18]
 800ae06:	3303      	adds	r3, #3
 800ae08:	f023 0203 	bic.w	r2, r3, #3
 800ae0c:	89bb      	ldrh	r3, [r7, #12]
 800ae0e:	441a      	add	r2, r3
 800ae10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d901      	bls.n	800ae1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	e018      	b.n	800ae4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d007      	beq.n	800ae30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ae20:	8a7b      	ldrh	r3, [r7, #18]
 800ae22:	3303      	adds	r3, #3
 800ae24:	f023 0303 	bic.w	r3, r3, #3
 800ae28:	6a3a      	ldr	r2, [r7, #32]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e001      	b.n	800ae34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ae30:	2300      	movs	r3, #0
 800ae32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	89b9      	ldrh	r1, [r7, #12]
 800ae38:	89ba      	ldrh	r2, [r7, #12]
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	9301      	str	r3, [sp, #4]
 800ae3e:	897b      	ldrh	r3, [r7, #10]
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	460b      	mov	r3, r1
 800ae44:	6979      	ldr	r1, [r7, #20]
 800ae46:	f7ff fe7d 	bl	800ab44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ae4a:	687b      	ldr	r3, [r7, #4]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <pbuf_realloc+0x20>
 800ae66:	4b3a      	ldr	r3, [pc, #232]	; (800af50 <pbuf_realloc+0xfc>)
 800ae68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ae6c:	4939      	ldr	r1, [pc, #228]	; (800af54 <pbuf_realloc+0x100>)
 800ae6e:	483a      	ldr	r0, [pc, #232]	; (800af58 <pbuf_realloc+0x104>)
 800ae70:	f00a fd56 	bl	8015920 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	891b      	ldrh	r3, [r3, #8]
 800ae78:	887a      	ldrh	r2, [r7, #2]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d263      	bcs.n	800af46 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	891a      	ldrh	r2, [r3, #8]
 800ae82:	887b      	ldrh	r3, [r7, #2]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ae88:	887b      	ldrh	r3, [r7, #2]
 800ae8a:	817b      	strh	r3, [r7, #10]
  q = p;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ae90:	e018      	b.n	800aec4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	895b      	ldrh	r3, [r3, #10]
 800ae96:	897a      	ldrh	r2, [r7, #10]
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	891a      	ldrh	r2, [r3, #8]
 800aea0:	893b      	ldrh	r3, [r7, #8]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d106      	bne.n	800aec4 <pbuf_realloc+0x70>
 800aeb6:	4b26      	ldr	r3, [pc, #152]	; (800af50 <pbuf_realloc+0xfc>)
 800aeb8:	f240 12af 	movw	r2, #431	; 0x1af
 800aebc:	4927      	ldr	r1, [pc, #156]	; (800af5c <pbuf_realloc+0x108>)
 800aebe:	4826      	ldr	r0, [pc, #152]	; (800af58 <pbuf_realloc+0x104>)
 800aec0:	f00a fd2e 	bl	8015920 <iprintf>
  while (rem_len > q->len) {
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	895b      	ldrh	r3, [r3, #10]
 800aec8:	897a      	ldrh	r2, [r7, #10]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d8e1      	bhi.n	800ae92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	7b1b      	ldrb	r3, [r3, #12]
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d121      	bne.n	800af1e <pbuf_realloc+0xca>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	895b      	ldrh	r3, [r3, #10]
 800aede:	897a      	ldrh	r2, [r7, #10]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d01c      	beq.n	800af1e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	7b5b      	ldrb	r3, [r3, #13]
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d116      	bne.n	800af1e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	897b      	ldrh	r3, [r7, #10]
 800aefc:	4413      	add	r3, r2
 800aefe:	b29b      	uxth	r3, r3
 800af00:	4619      	mov	r1, r3
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7fe ffae 	bl	8009e64 <mem_trim>
 800af08:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d106      	bne.n	800af1e <pbuf_realloc+0xca>
 800af10:	4b0f      	ldr	r3, [pc, #60]	; (800af50 <pbuf_realloc+0xfc>)
 800af12:	f240 12bd 	movw	r2, #445	; 0x1bd
 800af16:	4912      	ldr	r1, [pc, #72]	; (800af60 <pbuf_realloc+0x10c>)
 800af18:	480f      	ldr	r0, [pc, #60]	; (800af58 <pbuf_realloc+0x104>)
 800af1a:	f00a fd01 	bl	8015920 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	897a      	ldrh	r2, [r7, #10]
 800af22:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	895a      	ldrh	r2, [r3, #10]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d004      	beq.n	800af3e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f911 	bl	800b160 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	e000      	b.n	800af48 <pbuf_realloc+0xf4>
    return;
 800af46:	bf00      	nop

}
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	08017514 	.word	0x08017514
 800af54:	0801762c 	.word	0x0801762c
 800af58:	08017574 	.word	0x08017574
 800af5c:	08017644 	.word	0x08017644
 800af60:	0801765c 	.word	0x0801765c

0800af64 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	4613      	mov	r3, r2
 800af70:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d106      	bne.n	800af86 <pbuf_add_header_impl+0x22>
 800af78:	4b2b      	ldr	r3, [pc, #172]	; (800b028 <pbuf_add_header_impl+0xc4>)
 800af7a:	f240 12df 	movw	r2, #479	; 0x1df
 800af7e:	492b      	ldr	r1, [pc, #172]	; (800b02c <pbuf_add_header_impl+0xc8>)
 800af80:	482b      	ldr	r0, [pc, #172]	; (800b030 <pbuf_add_header_impl+0xcc>)
 800af82:	f00a fccd 	bl	8015920 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d003      	beq.n	800af94 <pbuf_add_header_impl+0x30>
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af92:	d301      	bcc.n	800af98 <pbuf_add_header_impl+0x34>
    return 1;
 800af94:	2301      	movs	r3, #1
 800af96:	e043      	b.n	800b020 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <pbuf_add_header_impl+0x3e>
    return 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	e03e      	b.n	800b020 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	891a      	ldrh	r2, [r3, #8]
 800afaa:	8a7b      	ldrh	r3, [r7, #18]
 800afac:	4413      	add	r3, r2
 800afae:	b29b      	uxth	r3, r3
 800afb0:	8a7a      	ldrh	r2, [r7, #18]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d901      	bls.n	800afba <pbuf_add_header_impl+0x56>
    return 1;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e032      	b.n	800b020 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	7b1b      	ldrb	r3, [r3, #12]
 800afbe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800afc0:	8a3b      	ldrh	r3, [r7, #16]
 800afc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00c      	beq.n	800afe4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	425b      	negs	r3, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3310      	adds	r3, #16
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d20d      	bcs.n	800affc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e01d      	b.n	800b020 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d006      	beq.n	800aff8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	425b      	negs	r3, r3
 800aff2:	4413      	add	r3, r2
 800aff4:	617b      	str	r3, [r7, #20]
 800aff6:	e001      	b.n	800affc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800aff8:	2301      	movs	r3, #1
 800affa:	e011      	b.n	800b020 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	895a      	ldrh	r2, [r3, #10]
 800b006:	8a7b      	ldrh	r3, [r7, #18]
 800b008:	4413      	add	r3, r2
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	891a      	ldrh	r2, [r3, #8]
 800b014:	8a7b      	ldrh	r3, [r7, #18]
 800b016:	4413      	add	r3, r2
 800b018:	b29a      	uxth	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	08017514 	.word	0x08017514
 800b02c:	08017678 	.word	0x08017678
 800b030:	08017574 	.word	0x08017574

0800b034 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b03e:	2200      	movs	r2, #0
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff ff8e 	bl	800af64 <pbuf_add_header_impl>
 800b048:	4603      	mov	r3, r0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d106      	bne.n	800b072 <pbuf_remove_header+0x1e>
 800b064:	4b20      	ldr	r3, [pc, #128]	; (800b0e8 <pbuf_remove_header+0x94>)
 800b066:	f240 224b 	movw	r2, #587	; 0x24b
 800b06a:	4920      	ldr	r1, [pc, #128]	; (800b0ec <pbuf_remove_header+0x98>)
 800b06c:	4820      	ldr	r0, [pc, #128]	; (800b0f0 <pbuf_remove_header+0x9c>)
 800b06e:	f00a fc57 	bl	8015920 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d003      	beq.n	800b080 <pbuf_remove_header+0x2c>
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b07e:	d301      	bcc.n	800b084 <pbuf_remove_header+0x30>
    return 1;
 800b080:	2301      	movs	r3, #1
 800b082:	e02c      	b.n	800b0de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <pbuf_remove_header+0x3a>
    return 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	e027      	b.n	800b0de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	895b      	ldrh	r3, [r3, #10]
 800b096:	89fa      	ldrh	r2, [r7, #14]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d908      	bls.n	800b0ae <pbuf_remove_header+0x5a>
 800b09c:	4b12      	ldr	r3, [pc, #72]	; (800b0e8 <pbuf_remove_header+0x94>)
 800b09e:	f240 2255 	movw	r2, #597	; 0x255
 800b0a2:	4914      	ldr	r1, [pc, #80]	; (800b0f4 <pbuf_remove_header+0xa0>)
 800b0a4:	4812      	ldr	r0, [pc, #72]	; (800b0f0 <pbuf_remove_header+0x9c>)
 800b0a6:	f00a fc3b 	bl	8015920 <iprintf>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e017      	b.n	800b0de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	441a      	add	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	895a      	ldrh	r2, [r3, #10]
 800b0c4:	89fb      	ldrh	r3, [r7, #14]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	891a      	ldrh	r2, [r3, #8]
 800b0d2:	89fb      	ldrh	r3, [r7, #14]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	08017514 	.word	0x08017514
 800b0ec:	08017678 	.word	0x08017678
 800b0f0:	08017574 	.word	0x08017574
 800b0f4:	08017684 	.word	0x08017684

0800b0f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	807b      	strh	r3, [r7, #2]
 800b104:	4613      	mov	r3, r2
 800b106:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b108:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	da08      	bge.n	800b122 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b114:	425b      	negs	r3, r3
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff ff9b 	bl	800b054 <pbuf_remove_header>
 800b11e:	4603      	mov	r3, r0
 800b120:	e007      	b.n	800b132 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b122:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b126:	787a      	ldrb	r2, [r7, #1]
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff ff1a 	bl	800af64 <pbuf_add_header_impl>
 800b130:	4603      	mov	r3, r0
  }
}
 800b132:	4618      	mov	r0, r3
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b082      	sub	sp, #8
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	460b      	mov	r3, r1
 800b144:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b14a:	2201      	movs	r2, #1
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7ff ffd2 	bl	800b0f8 <pbuf_header_impl>
 800b154:	4603      	mov	r3, r0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10b      	bne.n	800b186 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d106      	bne.n	800b182 <pbuf_free+0x22>
 800b174:	4b38      	ldr	r3, [pc, #224]	; (800b258 <pbuf_free+0xf8>)
 800b176:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b17a:	4938      	ldr	r1, [pc, #224]	; (800b25c <pbuf_free+0xfc>)
 800b17c:	4838      	ldr	r0, [pc, #224]	; (800b260 <pbuf_free+0x100>)
 800b17e:	f00a fbcf 	bl	8015920 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b182:	2300      	movs	r3, #0
 800b184:	e063      	b.n	800b24e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b18a:	e05c      	b.n	800b246 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	7b9b      	ldrb	r3, [r3, #14]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d106      	bne.n	800b1a2 <pbuf_free+0x42>
 800b194:	4b30      	ldr	r3, [pc, #192]	; (800b258 <pbuf_free+0xf8>)
 800b196:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b19a:	4932      	ldr	r1, [pc, #200]	; (800b264 <pbuf_free+0x104>)
 800b19c:	4830      	ldr	r0, [pc, #192]	; (800b260 <pbuf_free+0x100>)
 800b19e:	f00a fbbf 	bl	8015920 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7b9b      	ldrb	r3, [r3, #14]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	739a      	strb	r2, [r3, #14]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	7b9b      	ldrb	r3, [r3, #14]
 800b1b2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b1b4:	7dbb      	ldrb	r3, [r7, #22]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d143      	bne.n	800b242 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7b1b      	ldrb	r3, [r3, #12]
 800b1c4:	f003 030f 	and.w	r3, r3, #15
 800b1c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	7b5b      	ldrb	r3, [r3, #13]
 800b1ce:	f003 0302 	and.w	r3, r3, #2
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d011      	beq.n	800b1fa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d106      	bne.n	800b1f0 <pbuf_free+0x90>
 800b1e2:	4b1d      	ldr	r3, [pc, #116]	; (800b258 <pbuf_free+0xf8>)
 800b1e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b1e8:	491f      	ldr	r1, [pc, #124]	; (800b268 <pbuf_free+0x108>)
 800b1ea:	481d      	ldr	r0, [pc, #116]	; (800b260 <pbuf_free+0x100>)
 800b1ec:	f00a fb98 	bl	8015920 <iprintf>
        pc->custom_free_function(p);
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	4798      	blx	r3
 800b1f8:	e01d      	b.n	800b236 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d104      	bne.n	800b20a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	2008      	movs	r0, #8
 800b204:	f7ff f92a 	bl	800a45c <memp_free>
 800b208:	e015      	b.n	800b236 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d104      	bne.n	800b21a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b210:	6879      	ldr	r1, [r7, #4]
 800b212:	2007      	movs	r0, #7
 800b214:	f7ff f922 	bl	800a45c <memp_free>
 800b218:	e00d      	b.n	800b236 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d103      	bne.n	800b228 <pbuf_free+0xc8>
          mem_free(p);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7fe fdb5 	bl	8009d90 <mem_free>
 800b226:	e006      	b.n	800b236 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b228:	4b0b      	ldr	r3, [pc, #44]	; (800b258 <pbuf_free+0xf8>)
 800b22a:	f240 320f 	movw	r2, #783	; 0x30f
 800b22e:	490f      	ldr	r1, [pc, #60]	; (800b26c <pbuf_free+0x10c>)
 800b230:	480b      	ldr	r0, [pc, #44]	; (800b260 <pbuf_free+0x100>)
 800b232:	f00a fb75 	bl	8015920 <iprintf>
        }
      }
      count++;
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	3301      	adds	r3, #1
 800b23a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	607b      	str	r3, [r7, #4]
 800b240:	e001      	b.n	800b246 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d19f      	bne.n	800b18c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	08017514 	.word	0x08017514
 800b25c:	08017678 	.word	0x08017678
 800b260:	08017574 	.word	0x08017574
 800b264:	080176a4 	.word	0x080176a4
 800b268:	080176bc 	.word	0x080176bc
 800b26c:	080176e0 	.word	0x080176e0

0800b270 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b27c:	e005      	b.n	800b28a <pbuf_clen+0x1a>
    ++len;
 800b27e:	89fb      	ldrh	r3, [r7, #14]
 800b280:	3301      	adds	r3, #1
 800b282:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1f6      	bne.n	800b27e <pbuf_clen+0xe>
  }
  return len;
 800b290:	89fb      	ldrh	r3, [r7, #14]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
	...

0800b2a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d010      	beq.n	800b2d0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	7b9b      	ldrb	r3, [r3, #14]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7b9b      	ldrb	r3, [r3, #14]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <pbuf_ref+0x30>
 800b2c2:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <pbuf_ref+0x38>)
 800b2c4:	f240 3242 	movw	r2, #834	; 0x342
 800b2c8:	4904      	ldr	r1, [pc, #16]	; (800b2dc <pbuf_ref+0x3c>)
 800b2ca:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <pbuf_ref+0x40>)
 800b2cc:	f00a fb28 	bl	8015920 <iprintf>
  }
}
 800b2d0:	bf00      	nop
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	08017514 	.word	0x08017514
 800b2dc:	080176f4 	.word	0x080176f4
 800b2e0:	08017574 	.word	0x08017574

0800b2e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <pbuf_cat+0x16>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d107      	bne.n	800b30a <pbuf_cat+0x26>
 800b2fa:	4b20      	ldr	r3, [pc, #128]	; (800b37c <pbuf_cat+0x98>)
 800b2fc:	f240 3259 	movw	r2, #857	; 0x359
 800b300:	491f      	ldr	r1, [pc, #124]	; (800b380 <pbuf_cat+0x9c>)
 800b302:	4820      	ldr	r0, [pc, #128]	; (800b384 <pbuf_cat+0xa0>)
 800b304:	f00a fb0c 	bl	8015920 <iprintf>
 800b308:	e034      	b.n	800b374 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	60fb      	str	r3, [r7, #12]
 800b30e:	e00a      	b.n	800b326 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	891a      	ldrh	r2, [r3, #8]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	891b      	ldrh	r3, [r3, #8]
 800b318:	4413      	add	r3, r2
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f0      	bne.n	800b310 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	891a      	ldrh	r2, [r3, #8]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	895b      	ldrh	r3, [r3, #10]
 800b336:	429a      	cmp	r2, r3
 800b338:	d006      	beq.n	800b348 <pbuf_cat+0x64>
 800b33a:	4b10      	ldr	r3, [pc, #64]	; (800b37c <pbuf_cat+0x98>)
 800b33c:	f240 3262 	movw	r2, #866	; 0x362
 800b340:	4911      	ldr	r1, [pc, #68]	; (800b388 <pbuf_cat+0xa4>)
 800b342:	4810      	ldr	r0, [pc, #64]	; (800b384 <pbuf_cat+0xa0>)
 800b344:	f00a faec 	bl	8015920 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d006      	beq.n	800b35e <pbuf_cat+0x7a>
 800b350:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <pbuf_cat+0x98>)
 800b352:	f240 3263 	movw	r2, #867	; 0x363
 800b356:	490d      	ldr	r1, [pc, #52]	; (800b38c <pbuf_cat+0xa8>)
 800b358:	480a      	ldr	r0, [pc, #40]	; (800b384 <pbuf_cat+0xa0>)
 800b35a:	f00a fae1 	bl	8015920 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	891a      	ldrh	r2, [r3, #8]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	891b      	ldrh	r3, [r3, #8]
 800b366:	4413      	add	r3, r2
 800b368:	b29a      	uxth	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	08017514 	.word	0x08017514
 800b380:	08017708 	.word	0x08017708
 800b384:	08017574 	.word	0x08017574
 800b388:	08017740 	.word	0x08017740
 800b38c:	08017770 	.word	0x08017770

0800b390 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7ff ffa1 	bl	800b2e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b3a2:	6838      	ldr	r0, [r7, #0]
 800b3a4:	f7ff ff7c 	bl	800b2a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b3a8:	bf00      	nop
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	617b      	str	r3, [r7, #20]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d008      	beq.n	800b3da <pbuf_copy+0x2a>
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d005      	beq.n	800b3da <pbuf_copy+0x2a>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	891a      	ldrh	r2, [r3, #8]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	891b      	ldrh	r3, [r3, #8]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d209      	bcs.n	800b3ee <pbuf_copy+0x3e>
 800b3da:	4b57      	ldr	r3, [pc, #348]	; (800b538 <pbuf_copy+0x188>)
 800b3dc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b3e0:	4956      	ldr	r1, [pc, #344]	; (800b53c <pbuf_copy+0x18c>)
 800b3e2:	4857      	ldr	r0, [pc, #348]	; (800b540 <pbuf_copy+0x190>)
 800b3e4:	f00a fa9c 	bl	8015920 <iprintf>
 800b3e8:	f06f 030f 	mvn.w	r3, #15
 800b3ec:	e09f      	b.n	800b52e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	895b      	ldrh	r3, [r3, #10]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	1ad2      	subs	r2, r2, r3
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	895b      	ldrh	r3, [r3, #10]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	1acb      	subs	r3, r1, r3
 800b402:	429a      	cmp	r2, r3
 800b404:	d306      	bcc.n	800b414 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	895b      	ldrh	r3, [r3, #10]
 800b40a:	461a      	mov	r2, r3
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	e005      	b.n	800b420 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	895b      	ldrh	r3, [r3, #10]
 800b418:	461a      	mov	r2, r3
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	18d0      	adds	r0, r2, r3
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	4413      	add	r3, r2
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4619      	mov	r1, r3
 800b434:	f00a fa44 	bl	80158c0 <memcpy>
    offset_to += len;
 800b438:	697a      	ldr	r2, [r7, #20]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	4413      	add	r3, r2
 800b43e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	4413      	add	r3, r2
 800b446:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	895b      	ldrh	r3, [r3, #10]
 800b44c:	461a      	mov	r2, r3
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	4293      	cmp	r3, r2
 800b452:	d906      	bls.n	800b462 <pbuf_copy+0xb2>
 800b454:	4b38      	ldr	r3, [pc, #224]	; (800b538 <pbuf_copy+0x188>)
 800b456:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b45a:	493a      	ldr	r1, [pc, #232]	; (800b544 <pbuf_copy+0x194>)
 800b45c:	4838      	ldr	r0, [pc, #224]	; (800b540 <pbuf_copy+0x190>)
 800b45e:	f00a fa5f 	bl	8015920 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	895b      	ldrh	r3, [r3, #10]
 800b466:	461a      	mov	r2, r3
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d906      	bls.n	800b47c <pbuf_copy+0xcc>
 800b46e:	4b32      	ldr	r3, [pc, #200]	; (800b538 <pbuf_copy+0x188>)
 800b470:	f240 32da 	movw	r2, #986	; 0x3da
 800b474:	4934      	ldr	r1, [pc, #208]	; (800b548 <pbuf_copy+0x198>)
 800b476:	4832      	ldr	r0, [pc, #200]	; (800b540 <pbuf_copy+0x190>)
 800b478:	f00a fa52 	bl	8015920 <iprintf>
    if (offset_from >= p_from->len) {
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	895b      	ldrh	r3, [r3, #10]
 800b480:	461a      	mov	r2, r3
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	4293      	cmp	r3, r2
 800b486:	d304      	bcc.n	800b492 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	895b      	ldrh	r3, [r3, #10]
 800b496:	461a      	mov	r2, r3
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d114      	bne.n	800b4c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10c      	bne.n	800b4c8 <pbuf_copy+0x118>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d009      	beq.n	800b4c8 <pbuf_copy+0x118>
 800b4b4:	4b20      	ldr	r3, [pc, #128]	; (800b538 <pbuf_copy+0x188>)
 800b4b6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b4ba:	4924      	ldr	r1, [pc, #144]	; (800b54c <pbuf_copy+0x19c>)
 800b4bc:	4820      	ldr	r0, [pc, #128]	; (800b540 <pbuf_copy+0x190>)
 800b4be:	f00a fa2f 	bl	8015920 <iprintf>
 800b4c2:	f06f 030f 	mvn.w	r3, #15
 800b4c6:	e032      	b.n	800b52e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d013      	beq.n	800b4f6 <pbuf_copy+0x146>
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	895a      	ldrh	r2, [r3, #10]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	891b      	ldrh	r3, [r3, #8]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d10d      	bne.n	800b4f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <pbuf_copy+0x146>
 800b4e2:	4b15      	ldr	r3, [pc, #84]	; (800b538 <pbuf_copy+0x188>)
 800b4e4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b4e8:	4919      	ldr	r1, [pc, #100]	; (800b550 <pbuf_copy+0x1a0>)
 800b4ea:	4815      	ldr	r0, [pc, #84]	; (800b540 <pbuf_copy+0x190>)
 800b4ec:	f00a fa18 	bl	8015920 <iprintf>
 800b4f0:	f06f 0305 	mvn.w	r3, #5
 800b4f4:	e01b      	b.n	800b52e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d013      	beq.n	800b524 <pbuf_copy+0x174>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	895a      	ldrh	r2, [r3, #10]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	891b      	ldrh	r3, [r3, #8]
 800b504:	429a      	cmp	r2, r3
 800b506:	d10d      	bne.n	800b524 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d009      	beq.n	800b524 <pbuf_copy+0x174>
 800b510:	4b09      	ldr	r3, [pc, #36]	; (800b538 <pbuf_copy+0x188>)
 800b512:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b516:	490e      	ldr	r1, [pc, #56]	; (800b550 <pbuf_copy+0x1a0>)
 800b518:	4809      	ldr	r0, [pc, #36]	; (800b540 <pbuf_copy+0x190>)
 800b51a:	f00a fa01 	bl	8015920 <iprintf>
 800b51e:	f06f 0305 	mvn.w	r3, #5
 800b522:	e004      	b.n	800b52e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f47f af61 	bne.w	800b3ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	08017514 	.word	0x08017514
 800b53c:	080177bc 	.word	0x080177bc
 800b540:	08017574 	.word	0x08017574
 800b544:	080177ec 	.word	0x080177ec
 800b548:	08017804 	.word	0x08017804
 800b54c:	08017820 	.word	0x08017820
 800b550:	08017830 	.word	0x08017830

0800b554 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4611      	mov	r1, r2
 800b560:	461a      	mov	r2, r3
 800b562:	460b      	mov	r3, r1
 800b564:	80fb      	strh	r3, [r7, #6]
 800b566:	4613      	mov	r3, r2
 800b568:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b56a:	2300      	movs	r3, #0
 800b56c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d108      	bne.n	800b58a <pbuf_copy_partial+0x36>
 800b578:	4b2b      	ldr	r3, [pc, #172]	; (800b628 <pbuf_copy_partial+0xd4>)
 800b57a:	f240 420a 	movw	r2, #1034	; 0x40a
 800b57e:	492b      	ldr	r1, [pc, #172]	; (800b62c <pbuf_copy_partial+0xd8>)
 800b580:	482b      	ldr	r0, [pc, #172]	; (800b630 <pbuf_copy_partial+0xdc>)
 800b582:	f00a f9cd 	bl	8015920 <iprintf>
 800b586:	2300      	movs	r3, #0
 800b588:	e04a      	b.n	800b620 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d108      	bne.n	800b5a2 <pbuf_copy_partial+0x4e>
 800b590:	4b25      	ldr	r3, [pc, #148]	; (800b628 <pbuf_copy_partial+0xd4>)
 800b592:	f240 420b 	movw	r2, #1035	; 0x40b
 800b596:	4927      	ldr	r1, [pc, #156]	; (800b634 <pbuf_copy_partial+0xe0>)
 800b598:	4825      	ldr	r0, [pc, #148]	; (800b630 <pbuf_copy_partial+0xdc>)
 800b59a:	f00a f9c1 	bl	8015920 <iprintf>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e03e      	b.n	800b620 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	61fb      	str	r3, [r7, #28]
 800b5a6:	e034      	b.n	800b612 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b5a8:	88bb      	ldrh	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <pbuf_copy_partial+0x70>
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	895b      	ldrh	r3, [r3, #10]
 800b5b2:	88ba      	ldrh	r2, [r7, #4]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d305      	bcc.n	800b5c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	895b      	ldrh	r3, [r3, #10]
 800b5bc:	88ba      	ldrh	r2, [r7, #4]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	80bb      	strh	r3, [r7, #4]
 800b5c2:	e023      	b.n	800b60c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	895a      	ldrh	r2, [r3, #10]
 800b5c8:	88bb      	ldrh	r3, [r7, #4]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b5ce:	8b3a      	ldrh	r2, [r7, #24]
 800b5d0:	88fb      	ldrh	r3, [r7, #6]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d901      	bls.n	800b5da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b5d6:	88fb      	ldrh	r3, [r7, #6]
 800b5d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b5da:	8b7b      	ldrh	r3, [r7, #26]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	18d0      	adds	r0, r2, r3
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	88bb      	ldrh	r3, [r7, #4]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	8b3a      	ldrh	r2, [r7, #24]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	f00a f968 	bl	80158c0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b5f0:	8afa      	ldrh	r2, [r7, #22]
 800b5f2:	8b3b      	ldrh	r3, [r7, #24]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b5f8:	8b7a      	ldrh	r2, [r7, #26]
 800b5fa:	8b3b      	ldrh	r3, [r7, #24]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b600:	88fa      	ldrh	r2, [r7, #6]
 800b602:	8b3b      	ldrh	r3, [r7, #24]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	61fb      	str	r3, [r7, #28]
 800b612:	88fb      	ldrh	r3, [r7, #6]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <pbuf_copy_partial+0xca>
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1c4      	bne.n	800b5a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b61e:	8afb      	ldrh	r3, [r7, #22]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3720      	adds	r7, #32
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	08017514 	.word	0x08017514
 800b62c:	0801785c 	.word	0x0801785c
 800b630:	08017574 	.word	0x08017574
 800b634:	0801787c 	.word	0x0801787c

0800b638 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	4603      	mov	r3, r0
 800b640:	603a      	str	r2, [r7, #0]
 800b642:	71fb      	strb	r3, [r7, #7]
 800b644:	460b      	mov	r3, r1
 800b646:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	8919      	ldrh	r1, [r3, #8]
 800b64c:	88ba      	ldrh	r2, [r7, #4]
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff faa1 	bl	800ab98 <pbuf_alloc>
 800b656:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <pbuf_clone+0x2a>
    return NULL;
 800b65e:	2300      	movs	r3, #0
 800b660:	e011      	b.n	800b686 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff fea3 	bl	800b3b0 <pbuf_copy>
 800b66a:	4603      	mov	r3, r0
 800b66c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b66e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d006      	beq.n	800b684 <pbuf_clone+0x4c>
 800b676:	4b06      	ldr	r3, [pc, #24]	; (800b690 <pbuf_clone+0x58>)
 800b678:	f240 5224 	movw	r2, #1316	; 0x524
 800b67c:	4905      	ldr	r1, [pc, #20]	; (800b694 <pbuf_clone+0x5c>)
 800b67e:	4806      	ldr	r0, [pc, #24]	; (800b698 <pbuf_clone+0x60>)
 800b680:	f00a f94e 	bl	8015920 <iprintf>
  return q;
 800b684:	68fb      	ldr	r3, [r7, #12]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	08017514 	.word	0x08017514
 800b694:	08017988 	.word	0x08017988
 800b698:	08017574 	.word	0x08017574

0800b69c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b6a0:	f00a f956 	bl	8015950 <rand>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	4b01      	ldr	r3, [pc, #4]	; (800b6bc <tcp_init+0x20>)
 800b6b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b6b8:	bf00      	nop
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20000058 	.word	0x20000058

0800b6c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7d1b      	ldrb	r3, [r3, #20]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d105      	bne.n	800b6dc <tcp_free+0x1c>
 800b6d0:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <tcp_free+0x2c>)
 800b6d2:	22d4      	movs	r2, #212	; 0xd4
 800b6d4:	4906      	ldr	r1, [pc, #24]	; (800b6f0 <tcp_free+0x30>)
 800b6d6:	4807      	ldr	r0, [pc, #28]	; (800b6f4 <tcp_free+0x34>)
 800b6d8:	f00a f922 	bl	8015920 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b6dc:	6879      	ldr	r1, [r7, #4]
 800b6de:	2001      	movs	r0, #1
 800b6e0:	f7fe febc 	bl	800a45c <memp_free>
}
 800b6e4:	bf00      	nop
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	08017a14 	.word	0x08017a14
 800b6f0:	08017a44 	.word	0x08017a44
 800b6f4:	08017a58 	.word	0x08017a58

0800b6f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	7d1b      	ldrb	r3, [r3, #20]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d105      	bne.n	800b714 <tcp_free_listen+0x1c>
 800b708:	4b06      	ldr	r3, [pc, #24]	; (800b724 <tcp_free_listen+0x2c>)
 800b70a:	22df      	movs	r2, #223	; 0xdf
 800b70c:	4906      	ldr	r1, [pc, #24]	; (800b728 <tcp_free_listen+0x30>)
 800b70e:	4807      	ldr	r0, [pc, #28]	; (800b72c <tcp_free_listen+0x34>)
 800b710:	f00a f906 	bl	8015920 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	2002      	movs	r0, #2
 800b718:	f7fe fea0 	bl	800a45c <memp_free>
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	08017a14 	.word	0x08017a14
 800b728:	08017a80 	.word	0x08017a80
 800b72c:	08017a58 	.word	0x08017a58

0800b730 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b734:	f000 fea2 	bl	800c47c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b738:	4b07      	ldr	r3, [pc, #28]	; (800b758 <tcp_tmr+0x28>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	3301      	adds	r3, #1
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	4b05      	ldr	r3, [pc, #20]	; (800b758 <tcp_tmr+0x28>)
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	4b04      	ldr	r3, [pc, #16]	; (800b758 <tcp_tmr+0x28>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b750:	f000 fb54 	bl	800bdfc <tcp_slowtmr>
  }
}
 800b754:	bf00      	nop
 800b756:	bd80      	pop	{r7, pc}
 800b758:	2000b045 	.word	0x2000b045

0800b75c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d105      	bne.n	800b778 <tcp_remove_listener+0x1c>
 800b76c:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <tcp_remove_listener+0x48>)
 800b76e:	22ff      	movs	r2, #255	; 0xff
 800b770:	490d      	ldr	r1, [pc, #52]	; (800b7a8 <tcp_remove_listener+0x4c>)
 800b772:	480e      	ldr	r0, [pc, #56]	; (800b7ac <tcp_remove_listener+0x50>)
 800b774:	f00a f8d4 	bl	8015920 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	e00a      	b.n	800b794 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d102      	bne.n	800b78e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1f1      	bne.n	800b77e <tcp_remove_listener+0x22>
    }
  }
}
 800b79a:	bf00      	nop
 800b79c:	bf00      	nop
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	08017a14 	.word	0x08017a14
 800b7a8:	08017a9c 	.word	0x08017a9c
 800b7ac:	08017a58 	.word	0x08017a58

0800b7b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <tcp_listen_closed+0x1c>
 800b7be:	4b14      	ldr	r3, [pc, #80]	; (800b810 <tcp_listen_closed+0x60>)
 800b7c0:	f240 1211 	movw	r2, #273	; 0x111
 800b7c4:	4913      	ldr	r1, [pc, #76]	; (800b814 <tcp_listen_closed+0x64>)
 800b7c6:	4814      	ldr	r0, [pc, #80]	; (800b818 <tcp_listen_closed+0x68>)
 800b7c8:	f00a f8aa 	bl	8015920 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	7d1b      	ldrb	r3, [r3, #20]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d006      	beq.n	800b7e2 <tcp_listen_closed+0x32>
 800b7d4:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <tcp_listen_closed+0x60>)
 800b7d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b7da:	4910      	ldr	r1, [pc, #64]	; (800b81c <tcp_listen_closed+0x6c>)
 800b7dc:	480e      	ldr	r0, [pc, #56]	; (800b818 <tcp_listen_closed+0x68>)
 800b7de:	f00a f89f 	bl	8015920 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	60fb      	str	r3, [r7, #12]
 800b7e6:	e00b      	b.n	800b800 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b7e8:	4a0d      	ldr	r2, [pc, #52]	; (800b820 <tcp_listen_closed+0x70>)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff ffb1 	bl	800b75c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b03      	cmp	r3, #3
 800b804:	d9f0      	bls.n	800b7e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b806:	bf00      	nop
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	08017a14 	.word	0x08017a14
 800b814:	08017ac4 	.word	0x08017ac4
 800b818:	08017a58 	.word	0x08017a58
 800b81c:	08017ad0 	.word	0x08017ad0
 800b820:	0801c474 	.word	0x0801c474

0800b824 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b824:	b5b0      	push	{r4, r5, r7, lr}
 800b826:	b088      	sub	sp, #32
 800b828:	af04      	add	r7, sp, #16
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <tcp_close_shutdown+0x20>
 800b836:	4b63      	ldr	r3, [pc, #396]	; (800b9c4 <tcp_close_shutdown+0x1a0>)
 800b838:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b83c:	4962      	ldr	r1, [pc, #392]	; (800b9c8 <tcp_close_shutdown+0x1a4>)
 800b83e:	4863      	ldr	r0, [pc, #396]	; (800b9cc <tcp_close_shutdown+0x1a8>)
 800b840:	f00a f86e 	bl	8015920 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b844:	78fb      	ldrb	r3, [r7, #3]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d066      	beq.n	800b918 <tcp_close_shutdown+0xf4>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	7d1b      	ldrb	r3, [r3, #20]
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d003      	beq.n	800b85a <tcp_close_shutdown+0x36>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	7d1b      	ldrb	r3, [r3, #20]
 800b856:	2b07      	cmp	r3, #7
 800b858:	d15e      	bne.n	800b918 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d104      	bne.n	800b86c <tcp_close_shutdown+0x48>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b866:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b86a:	d055      	beq.n	800b918 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	8b5b      	ldrh	r3, [r3, #26]
 800b870:	f003 0310 	and.w	r3, r3, #16
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <tcp_close_shutdown+0x62>
 800b878:	4b52      	ldr	r3, [pc, #328]	; (800b9c4 <tcp_close_shutdown+0x1a0>)
 800b87a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b87e:	4954      	ldr	r1, [pc, #336]	; (800b9d0 <tcp_close_shutdown+0x1ac>)
 800b880:	4852      	ldr	r0, [pc, #328]	; (800b9cc <tcp_close_shutdown+0x1a8>)
 800b882:	f00a f84d 	bl	8015920 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b88e:	687d      	ldr	r5, [r7, #4]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3304      	adds	r3, #4
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	8ad2      	ldrh	r2, [r2, #22]
 800b898:	6879      	ldr	r1, [r7, #4]
 800b89a:	8b09      	ldrh	r1, [r1, #24]
 800b89c:	9102      	str	r1, [sp, #8]
 800b89e:	9201      	str	r2, [sp, #4]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	462b      	mov	r3, r5
 800b8a4:	4622      	mov	r2, r4
 800b8a6:	4601      	mov	r1, r0
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f004 fe91 	bl	80105d0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f001 f8c6 	bl	800ca40 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b8b4:	4b47      	ldr	r3, [pc, #284]	; (800b9d4 <tcp_close_shutdown+0x1b0>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d105      	bne.n	800b8ca <tcp_close_shutdown+0xa6>
 800b8be:	4b45      	ldr	r3, [pc, #276]	; (800b9d4 <tcp_close_shutdown+0x1b0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	4a43      	ldr	r2, [pc, #268]	; (800b9d4 <tcp_close_shutdown+0x1b0>)
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	e013      	b.n	800b8f2 <tcp_close_shutdown+0xce>
 800b8ca:	4b42      	ldr	r3, [pc, #264]	; (800b9d4 <tcp_close_shutdown+0x1b0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	e00c      	b.n	800b8ec <tcp_close_shutdown+0xc8>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d104      	bne.n	800b8e6 <tcp_close_shutdown+0xc2>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	68da      	ldr	r2, [r3, #12]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	60da      	str	r2, [r3, #12]
 800b8e4:	e005      	b.n	800b8f2 <tcp_close_shutdown+0xce>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1ef      	bne.n	800b8d2 <tcp_close_shutdown+0xae>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	60da      	str	r2, [r3, #12]
 800b8f8:	4b37      	ldr	r3, [pc, #220]	; (800b9d8 <tcp_close_shutdown+0x1b4>)
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b8fe:	4b37      	ldr	r3, [pc, #220]	; (800b9dc <tcp_close_shutdown+0x1b8>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	429a      	cmp	r2, r3
 800b906:	d102      	bne.n	800b90e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b908:	f003 fd5e 	bl	800f3c8 <tcp_trigger_input_pcb_close>
 800b90c:	e002      	b.n	800b914 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff fed6 	bl	800b6c0 <tcp_free>
      }
      return ERR_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	e050      	b.n	800b9ba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	7d1b      	ldrb	r3, [r3, #20]
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d03b      	beq.n	800b998 <tcp_close_shutdown+0x174>
 800b920:	2b02      	cmp	r3, #2
 800b922:	dc44      	bgt.n	800b9ae <tcp_close_shutdown+0x18a>
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <tcp_close_shutdown+0x10a>
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d02a      	beq.n	800b982 <tcp_close_shutdown+0x15e>
 800b92c:	e03f      	b.n	800b9ae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	8adb      	ldrh	r3, [r3, #22]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d021      	beq.n	800b97a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b936:	4b2a      	ldr	r3, [pc, #168]	; (800b9e0 <tcp_close_shutdown+0x1bc>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d105      	bne.n	800b94c <tcp_close_shutdown+0x128>
 800b940:	4b27      	ldr	r3, [pc, #156]	; (800b9e0 <tcp_close_shutdown+0x1bc>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	4a26      	ldr	r2, [pc, #152]	; (800b9e0 <tcp_close_shutdown+0x1bc>)
 800b948:	6013      	str	r3, [r2, #0]
 800b94a:	e013      	b.n	800b974 <tcp_close_shutdown+0x150>
 800b94c:	4b24      	ldr	r3, [pc, #144]	; (800b9e0 <tcp_close_shutdown+0x1bc>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	60bb      	str	r3, [r7, #8]
 800b952:	e00c      	b.n	800b96e <tcp_close_shutdown+0x14a>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d104      	bne.n	800b968 <tcp_close_shutdown+0x144>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68da      	ldr	r2, [r3, #12]
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	60da      	str	r2, [r3, #12]
 800b966:	e005      	b.n	800b974 <tcp_close_shutdown+0x150>
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	60bb      	str	r3, [r7, #8]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1ef      	bne.n	800b954 <tcp_close_shutdown+0x130>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7ff fea0 	bl	800b6c0 <tcp_free>
      break;
 800b980:	e01a      	b.n	800b9b8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ff14 	bl	800b7b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b988:	6879      	ldr	r1, [r7, #4]
 800b98a:	4816      	ldr	r0, [pc, #88]	; (800b9e4 <tcp_close_shutdown+0x1c0>)
 800b98c:	f001 f8a8 	bl	800cae0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f7ff feb1 	bl	800b6f8 <tcp_free_listen>
      break;
 800b996:	e00f      	b.n	800b9b8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b998:	6879      	ldr	r1, [r7, #4]
 800b99a:	480e      	ldr	r0, [pc, #56]	; (800b9d4 <tcp_close_shutdown+0x1b0>)
 800b99c:	f001 f8a0 	bl	800cae0 <tcp_pcb_remove>
 800b9a0:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <tcp_close_shutdown+0x1b4>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7ff fe8a 	bl	800b6c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b9ac:	e004      	b.n	800b9b8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f81a 	bl	800b9e8 <tcp_close_shutdown_fin>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	e000      	b.n	800b9ba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	08017a14 	.word	0x08017a14
 800b9c8:	08017ae8 	.word	0x08017ae8
 800b9cc:	08017a58 	.word	0x08017a58
 800b9d0:	08017b08 	.word	0x08017b08
 800b9d4:	2000b03c 	.word	0x2000b03c
 800b9d8:	2000b044 	.word	0x2000b044
 800b9dc:	2000b07c 	.word	0x2000b07c
 800b9e0:	2000b034 	.word	0x2000b034
 800b9e4:	2000b038 	.word	0x2000b038

0800b9e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d106      	bne.n	800ba04 <tcp_close_shutdown_fin+0x1c>
 800b9f6:	4b2e      	ldr	r3, [pc, #184]	; (800bab0 <tcp_close_shutdown_fin+0xc8>)
 800b9f8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b9fc:	492d      	ldr	r1, [pc, #180]	; (800bab4 <tcp_close_shutdown_fin+0xcc>)
 800b9fe:	482e      	ldr	r0, [pc, #184]	; (800bab8 <tcp_close_shutdown_fin+0xd0>)
 800ba00:	f009 ff8e 	bl	8015920 <iprintf>

  switch (pcb->state) {
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	7d1b      	ldrb	r3, [r3, #20]
 800ba08:	2b07      	cmp	r3, #7
 800ba0a:	d020      	beq.n	800ba4e <tcp_close_shutdown_fin+0x66>
 800ba0c:	2b07      	cmp	r3, #7
 800ba0e:	dc2b      	bgt.n	800ba68 <tcp_close_shutdown_fin+0x80>
 800ba10:	2b03      	cmp	r3, #3
 800ba12:	d002      	beq.n	800ba1a <tcp_close_shutdown_fin+0x32>
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	d00d      	beq.n	800ba34 <tcp_close_shutdown_fin+0x4c>
 800ba18:	e026      	b.n	800ba68 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f003 fee6 	bl	800f7ec <tcp_send_fin>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ba24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d11f      	bne.n	800ba6c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2205      	movs	r2, #5
 800ba30:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ba32:	e01b      	b.n	800ba6c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f003 fed9 	bl	800f7ec <tcp_send_fin>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ba3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d114      	bne.n	800ba70 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2205      	movs	r2, #5
 800ba4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ba4c:	e010      	b.n	800ba70 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f003 fecc 	bl	800f7ec <tcp_send_fin>
 800ba54:	4603      	mov	r3, r0
 800ba56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ba58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d109      	bne.n	800ba74 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2209      	movs	r2, #9
 800ba64:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ba66:	e005      	b.n	800ba74 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	e01c      	b.n	800baa6 <tcp_close_shutdown_fin+0xbe>
      break;
 800ba6c:	bf00      	nop
 800ba6e:	e002      	b.n	800ba76 <tcp_close_shutdown_fin+0x8e>
      break;
 800ba70:	bf00      	nop
 800ba72:	e000      	b.n	800ba76 <tcp_close_shutdown_fin+0x8e>
      break;
 800ba74:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ba76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d103      	bne.n	800ba86 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f003 fff2 	bl	800fa68 <tcp_output>
 800ba84:	e00d      	b.n	800baa2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ba86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d108      	bne.n	800baa2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	8b5b      	ldrh	r3, [r3, #26]
 800ba94:	f043 0308 	orr.w	r3, r3, #8
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	e001      	b.n	800baa6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800baa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	08017a14 	.word	0x08017a14
 800bab4:	08017ac4 	.word	0x08017ac4
 800bab8:	08017a58 	.word	0x08017a58

0800babc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <tcp_close+0x22>
 800baca:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <tcp_close+0x4c>)
 800bacc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bad0:	490e      	ldr	r1, [pc, #56]	; (800bb0c <tcp_close+0x50>)
 800bad2:	480f      	ldr	r0, [pc, #60]	; (800bb10 <tcp_close+0x54>)
 800bad4:	f009 ff24 	bl	8015920 <iprintf>
 800bad8:	f06f 030f 	mvn.w	r3, #15
 800badc:	e00f      	b.n	800bafe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	7d1b      	ldrb	r3, [r3, #20]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d006      	beq.n	800baf4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	8b5b      	ldrh	r3, [r3, #26]
 800baea:	f043 0310 	orr.w	r3, r3, #16
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800baf4:	2101      	movs	r1, #1
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff fe94 	bl	800b824 <tcp_close_shutdown>
 800bafc:	4603      	mov	r3, r0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	08017a14 	.word	0x08017a14
 800bb0c:	08017b24 	.word	0x08017b24
 800bb10:	08017a58 	.word	0x08017a58

0800bb14 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08e      	sub	sp, #56	; 0x38
 800bb18:	af04      	add	r7, sp, #16
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d107      	bne.n	800bb34 <tcp_abandon+0x20>
 800bb24:	4b52      	ldr	r3, [pc, #328]	; (800bc70 <tcp_abandon+0x15c>)
 800bb26:	f240 223d 	movw	r2, #573	; 0x23d
 800bb2a:	4952      	ldr	r1, [pc, #328]	; (800bc74 <tcp_abandon+0x160>)
 800bb2c:	4852      	ldr	r0, [pc, #328]	; (800bc78 <tcp_abandon+0x164>)
 800bb2e:	f009 fef7 	bl	8015920 <iprintf>
 800bb32:	e099      	b.n	800bc68 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7d1b      	ldrb	r3, [r3, #20]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d106      	bne.n	800bb4a <tcp_abandon+0x36>
 800bb3c:	4b4c      	ldr	r3, [pc, #304]	; (800bc70 <tcp_abandon+0x15c>)
 800bb3e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bb42:	494e      	ldr	r1, [pc, #312]	; (800bc7c <tcp_abandon+0x168>)
 800bb44:	484c      	ldr	r0, [pc, #304]	; (800bc78 <tcp_abandon+0x164>)
 800bb46:	f009 feeb 	bl	8015920 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	7d1b      	ldrb	r3, [r3, #20]
 800bb4e:	2b0a      	cmp	r3, #10
 800bb50:	d107      	bne.n	800bb62 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	484a      	ldr	r0, [pc, #296]	; (800bc80 <tcp_abandon+0x16c>)
 800bb56:	f000 ffc3 	bl	800cae0 <tcp_pcb_remove>
    tcp_free(pcb);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff fdb0 	bl	800b6c0 <tcp_free>
 800bb60:	e082      	b.n	800bc68 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb7c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7d1b      	ldrb	r3, [r3, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d126      	bne.n	800bbda <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	8adb      	ldrh	r3, [r3, #22]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d02e      	beq.n	800bbf2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb94:	4b3b      	ldr	r3, [pc, #236]	; (800bc84 <tcp_abandon+0x170>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d105      	bne.n	800bbaa <tcp_abandon+0x96>
 800bb9e:	4b39      	ldr	r3, [pc, #228]	; (800bc84 <tcp_abandon+0x170>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	4a37      	ldr	r2, [pc, #220]	; (800bc84 <tcp_abandon+0x170>)
 800bba6:	6013      	str	r3, [r2, #0]
 800bba8:	e013      	b.n	800bbd2 <tcp_abandon+0xbe>
 800bbaa:	4b36      	ldr	r3, [pc, #216]	; (800bc84 <tcp_abandon+0x170>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	61fb      	str	r3, [r7, #28]
 800bbb0:	e00c      	b.n	800bbcc <tcp_abandon+0xb8>
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d104      	bne.n	800bbc6 <tcp_abandon+0xb2>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68da      	ldr	r2, [r3, #12]
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	60da      	str	r2, [r3, #12]
 800bbc4:	e005      	b.n	800bbd2 <tcp_abandon+0xbe>
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	61fb      	str	r3, [r7, #28]
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1ef      	bne.n	800bbb2 <tcp_abandon+0x9e>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	60da      	str	r2, [r3, #12]
 800bbd8:	e00b      	b.n	800bbf2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	8adb      	ldrh	r3, [r3, #22]
 800bbe2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bbe4:	6879      	ldr	r1, [r7, #4]
 800bbe6:	4828      	ldr	r0, [pc, #160]	; (800bc88 <tcp_abandon+0x174>)
 800bbe8:	f000 ff7a 	bl	800cae0 <tcp_pcb_remove>
 800bbec:	4b27      	ldr	r3, [pc, #156]	; (800bc8c <tcp_abandon+0x178>)
 800bbee:	2201      	movs	r2, #1
 800bbf0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d004      	beq.n	800bc04 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 fd1c 	bl	800c63c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d004      	beq.n	800bc16 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc10:	4618      	mov	r0, r3
 800bc12:	f000 fd13 	bl	800c63c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d004      	beq.n	800bc28 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 fd0a 	bl	800c63c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00e      	beq.n	800bc4c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	8b12      	ldrh	r2, [r2, #24]
 800bc38:	9202      	str	r2, [sp, #8]
 800bc3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc3c:	9201      	str	r2, [sp, #4]
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	460b      	mov	r3, r1
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	69b9      	ldr	r1, [r7, #24]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f004 fcc2 	bl	80105d0 <tcp_rst>
    }
    last_state = pcb->state;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7d1b      	ldrb	r3, [r3, #20]
 800bc50:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff fd34 	bl	800b6c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d004      	beq.n	800bc68 <tcp_abandon+0x154>
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	f06f 010c 	mvn.w	r1, #12
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	4798      	blx	r3
  }
}
 800bc68:	3728      	adds	r7, #40	; 0x28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	08017a14 	.word	0x08017a14
 800bc74:	08017b58 	.word	0x08017b58
 800bc78:	08017a58 	.word	0x08017a58
 800bc7c:	08017b74 	.word	0x08017b74
 800bc80:	2000b040 	.word	0x2000b040
 800bc84:	2000b034 	.word	0x2000b034
 800bc88:	2000b03c 	.word	0x2000b03c
 800bc8c:	2000b044 	.word	0x2000b044

0800bc90 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bc98:	2101      	movs	r1, #1
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7ff ff3a 	bl	800bb14 <tcp_abandon>
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d106      	bne.n	800bcc4 <tcp_update_rcv_ann_wnd+0x1c>
 800bcb6:	4b25      	ldr	r3, [pc, #148]	; (800bd4c <tcp_update_rcv_ann_wnd+0xa4>)
 800bcb8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bcbc:	4924      	ldr	r1, [pc, #144]	; (800bd50 <tcp_update_rcv_ann_wnd+0xa8>)
 800bcbe:	4825      	ldr	r0, [pc, #148]	; (800bd54 <tcp_update_rcv_ann_wnd+0xac>)
 800bcc0:	f009 fe2e 	bl	8015920 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bccc:	4413      	add	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bcd8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bcdc:	bf28      	it	cs
 800bcde:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bce2:	b292      	uxth	r2, r2
 800bce4:	4413      	add	r3, r2
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	db08      	blt.n	800bd00 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	e020      	b.n	800bd42 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	dd03      	ble.n	800bd16 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd14:	e014      	b.n	800bd40 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd28:	d306      	bcc.n	800bd38 <tcp_update_rcv_ann_wnd+0x90>
 800bd2a:	4b08      	ldr	r3, [pc, #32]	; (800bd4c <tcp_update_rcv_ann_wnd+0xa4>)
 800bd2c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bd30:	4909      	ldr	r1, [pc, #36]	; (800bd58 <tcp_update_rcv_ann_wnd+0xb0>)
 800bd32:	4808      	ldr	r0, [pc, #32]	; (800bd54 <tcp_update_rcv_ann_wnd+0xac>)
 800bd34:	f009 fdf4 	bl	8015920 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bd40:	2300      	movs	r3, #0
  }
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	08017a14 	.word	0x08017a14
 800bd50:	08017c70 	.word	0x08017c70
 800bd54:	08017a58 	.word	0x08017a58
 800bd58:	08017c94 	.word	0x08017c94

0800bd5c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d107      	bne.n	800bd7e <tcp_recved+0x22>
 800bd6e:	4b1f      	ldr	r3, [pc, #124]	; (800bdec <tcp_recved+0x90>)
 800bd70:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bd74:	491e      	ldr	r1, [pc, #120]	; (800bdf0 <tcp_recved+0x94>)
 800bd76:	481f      	ldr	r0, [pc, #124]	; (800bdf4 <tcp_recved+0x98>)
 800bd78:	f009 fdd2 	bl	8015920 <iprintf>
 800bd7c:	e032      	b.n	800bde4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	7d1b      	ldrb	r3, [r3, #20]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d106      	bne.n	800bd94 <tcp_recved+0x38>
 800bd86:	4b19      	ldr	r3, [pc, #100]	; (800bdec <tcp_recved+0x90>)
 800bd88:	f240 32d2 	movw	r2, #978	; 0x3d2
 800bd8c:	491a      	ldr	r1, [pc, #104]	; (800bdf8 <tcp_recved+0x9c>)
 800bd8e:	4819      	ldr	r0, [pc, #100]	; (800bdf4 <tcp_recved+0x98>)
 800bd90:	f009 fdc6 	bl	8015920 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd98:	887b      	ldrh	r3, [r7, #2]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bd9e:	89fb      	ldrh	r3, [r7, #14]
 800bda0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bda4:	d804      	bhi.n	800bdb0 <tcp_recved+0x54>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdaa:	89fa      	ldrh	r2, [r7, #14]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d204      	bcs.n	800bdba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bdb6:	851a      	strh	r2, [r3, #40]	; 0x28
 800bdb8:	e002      	b.n	800bdc0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	89fa      	ldrh	r2, [r7, #14]
 800bdbe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff ff71 	bl	800bca8 <tcp_update_rcv_ann_wnd>
 800bdc6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bdce:	d309      	bcc.n	800bde4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	8b5b      	ldrh	r3, [r3, #26]
 800bdd4:	f043 0302 	orr.w	r3, r3, #2
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f003 fe42 	bl	800fa68 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	08017a14 	.word	0x08017a14
 800bdf0:	08017cb0 	.word	0x08017cb0
 800bdf4:	08017a58 	.word	0x08017a58
 800bdf8:	08017cc8 	.word	0x08017cc8

0800bdfc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bdfc:	b5b0      	push	{r4, r5, r7, lr}
 800bdfe:	b090      	sub	sp, #64	; 0x40
 800be00:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800be08:	4b94      	ldr	r3, [pc, #592]	; (800c05c <tcp_slowtmr+0x260>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3301      	adds	r3, #1
 800be0e:	4a93      	ldr	r2, [pc, #588]	; (800c05c <tcp_slowtmr+0x260>)
 800be10:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800be12:	4b93      	ldr	r3, [pc, #588]	; (800c060 <tcp_slowtmr+0x264>)
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	3301      	adds	r3, #1
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	4b91      	ldr	r3, [pc, #580]	; (800c060 <tcp_slowtmr+0x264>)
 800be1c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800be1e:	2300      	movs	r3, #0
 800be20:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800be22:	4b90      	ldr	r3, [pc, #576]	; (800c064 <tcp_slowtmr+0x268>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800be28:	e29d      	b.n	800c366 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2c:	7d1b      	ldrb	r3, [r3, #20]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <tcp_slowtmr+0x44>
 800be32:	4b8d      	ldr	r3, [pc, #564]	; (800c068 <tcp_slowtmr+0x26c>)
 800be34:	f240 42be 	movw	r2, #1214	; 0x4be
 800be38:	498c      	ldr	r1, [pc, #560]	; (800c06c <tcp_slowtmr+0x270>)
 800be3a:	488d      	ldr	r0, [pc, #564]	; (800c070 <tcp_slowtmr+0x274>)
 800be3c:	f009 fd70 	bl	8015920 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	7d1b      	ldrb	r3, [r3, #20]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d106      	bne.n	800be56 <tcp_slowtmr+0x5a>
 800be48:	4b87      	ldr	r3, [pc, #540]	; (800c068 <tcp_slowtmr+0x26c>)
 800be4a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800be4e:	4989      	ldr	r1, [pc, #548]	; (800c074 <tcp_slowtmr+0x278>)
 800be50:	4887      	ldr	r0, [pc, #540]	; (800c070 <tcp_slowtmr+0x274>)
 800be52:	f009 fd65 	bl	8015920 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800be56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be58:	7d1b      	ldrb	r3, [r3, #20]
 800be5a:	2b0a      	cmp	r3, #10
 800be5c:	d106      	bne.n	800be6c <tcp_slowtmr+0x70>
 800be5e:	4b82      	ldr	r3, [pc, #520]	; (800c068 <tcp_slowtmr+0x26c>)
 800be60:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800be64:	4984      	ldr	r1, [pc, #528]	; (800c078 <tcp_slowtmr+0x27c>)
 800be66:	4882      	ldr	r0, [pc, #520]	; (800c070 <tcp_slowtmr+0x274>)
 800be68:	f009 fd5a 	bl	8015920 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800be6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6e:	7f9a      	ldrb	r2, [r3, #30]
 800be70:	4b7b      	ldr	r3, [pc, #492]	; (800c060 <tcp_slowtmr+0x264>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	429a      	cmp	r2, r3
 800be76:	d105      	bne.n	800be84 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800be7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800be82:	e270      	b.n	800c366 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800be84:	4b76      	ldr	r3, [pc, #472]	; (800c060 <tcp_slowtmr+0x264>)
 800be86:	781a      	ldrb	r2, [r3, #0]
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800be92:	2300      	movs	r3, #0
 800be94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800be98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9a:	7d1b      	ldrb	r3, [r3, #20]
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d10a      	bne.n	800beb6 <tcp_slowtmr+0xba>
 800bea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bea6:	2b05      	cmp	r3, #5
 800bea8:	d905      	bls.n	800beb6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800beaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beae:	3301      	adds	r3, #1
 800beb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800beb4:	e11e      	b.n	800c0f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800beb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bebc:	2b0b      	cmp	r3, #11
 800bebe:	d905      	bls.n	800becc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bec4:	3301      	adds	r3, #1
 800bec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800beca:	e113      	b.n	800c0f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bece:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d075      	beq.n	800bfc2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d006      	beq.n	800beec <tcp_slowtmr+0xf0>
 800bede:	4b62      	ldr	r3, [pc, #392]	; (800c068 <tcp_slowtmr+0x26c>)
 800bee0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bee4:	4965      	ldr	r1, [pc, #404]	; (800c07c <tcp_slowtmr+0x280>)
 800bee6:	4862      	ldr	r0, [pc, #392]	; (800c070 <tcp_slowtmr+0x274>)
 800bee8:	f009 fd1a 	bl	8015920 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d106      	bne.n	800bf02 <tcp_slowtmr+0x106>
 800bef4:	4b5c      	ldr	r3, [pc, #368]	; (800c068 <tcp_slowtmr+0x26c>)
 800bef6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800befa:	4961      	ldr	r1, [pc, #388]	; (800c080 <tcp_slowtmr+0x284>)
 800befc:	485c      	ldr	r0, [pc, #368]	; (800c070 <tcp_slowtmr+0x274>)
 800befe:	f009 fd0f 	bl	8015920 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bf08:	2b0b      	cmp	r3, #11
 800bf0a:	d905      	bls.n	800bf18 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bf0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf10:	3301      	adds	r3, #1
 800bf12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf16:	e0ed      	b.n	800c0f4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	4a58      	ldr	r2, [pc, #352]	; (800c084 <tcp_slowtmr+0x288>)
 800bf22:	5cd3      	ldrb	r3, [r2, r3]
 800bf24:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bf2c:	7c7a      	ldrb	r2, [r7, #17]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d907      	bls.n	800bf42 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bf38:	3301      	adds	r3, #1
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bf48:	7c7a      	ldrb	r2, [r7, #17]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	f200 80d2 	bhi.w	800c0f4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bf50:	2301      	movs	r3, #1
 800bf52:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d108      	bne.n	800bf70 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bf5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf60:	f004 fc2a 	bl	80107b8 <tcp_zero_window_probe>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d014      	beq.n	800bf94 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	623b      	str	r3, [r7, #32]
 800bf6e:	e011      	b.n	800bf94 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf76:	4619      	mov	r1, r3
 800bf78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf7a:	f003 faef 	bl	800f55c <tcp_split_unsent_seg>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d107      	bne.n	800bf94 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bf84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf86:	f003 fd6f 	bl	800fa68 <tcp_output>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f000 80ac 	beq.w	800c0f4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bfaa:	2b06      	cmp	r3, #6
 800bfac:	f200 80a2 	bhi.w	800c0f4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bfc0:	e098      	b.n	800c0f4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	db0f      	blt.n	800bfec <tcp_slowtmr+0x1f0>
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bfd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d008      	beq.n	800bfec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfdc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	b21a      	sxth	r2, r3
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bff8:	429a      	cmp	r2, r3
 800bffa:	db7b      	blt.n	800c0f4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffe:	f004 f825 	bl	801004c <tcp_rexmit_rto_prepare>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d007      	beq.n	800c018 <tcp_slowtmr+0x21c>
 800c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d171      	bne.n	800c0f4 <tcp_slowtmr+0x2f8>
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d06d      	beq.n	800c0f4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	7d1b      	ldrb	r3, [r3, #20]
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d03a      	beq.n	800c096 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c026:	2b0c      	cmp	r3, #12
 800c028:	bf28      	it	cs
 800c02a:	230c      	movcs	r3, #12
 800c02c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c034:	10db      	asrs	r3, r3, #3
 800c036:	b21b      	sxth	r3, r3
 800c038:	461a      	mov	r2, r3
 800c03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c040:	4413      	add	r3, r2
 800c042:	7efa      	ldrb	r2, [r7, #27]
 800c044:	4910      	ldr	r1, [pc, #64]	; (800c088 <tcp_slowtmr+0x28c>)
 800c046:	5c8a      	ldrb	r2, [r1, r2]
 800c048:	4093      	lsls	r3, r2
 800c04a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c052:	4293      	cmp	r3, r2
 800c054:	dc1a      	bgt.n	800c08c <tcp_slowtmr+0x290>
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	b21a      	sxth	r2, r3
 800c05a:	e019      	b.n	800c090 <tcp_slowtmr+0x294>
 800c05c:	2000b030 	.word	0x2000b030
 800c060:	2000b046 	.word	0x2000b046
 800c064:	2000b03c 	.word	0x2000b03c
 800c068:	08017a14 	.word	0x08017a14
 800c06c:	08017d58 	.word	0x08017d58
 800c070:	08017a58 	.word	0x08017a58
 800c074:	08017d84 	.word	0x08017d84
 800c078:	08017db0 	.word	0x08017db0
 800c07c:	08017de0 	.word	0x08017de0
 800c080:	08017e14 	.word	0x08017e14
 800c084:	0801c46c 	.word	0x0801c46c
 800c088:	0801c45c 	.word	0x0801c45c
 800c08c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c098:	2200      	movs	r2, #0
 800c09a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	bf28      	it	cs
 800c0ac:	4613      	movcs	r3, r2
 800c0ae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c0b0:	8a7b      	ldrh	r3, [r7, #18]
 800c0b2:	085b      	lsrs	r3, r3, #1
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d206      	bcs.n	800c0dc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c0ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0f0:	f004 f81c 	bl	801012c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	7d1b      	ldrb	r3, [r3, #20]
 800c0f8:	2b06      	cmp	r3, #6
 800c0fa:	d111      	bne.n	800c120 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fe:	8b5b      	ldrh	r3, [r3, #26]
 800c100:	f003 0310 	and.w	r3, r3, #16
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00b      	beq.n	800c120 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c108:	4b9c      	ldr	r3, [pc, #624]	; (800c37c <tcp_slowtmr+0x580>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10e:	6a1b      	ldr	r3, [r3, #32]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	2b28      	cmp	r3, #40	; 0x28
 800c114:	d904      	bls.n	800c120 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c11a:	3301      	adds	r3, #1
 800c11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	7a5b      	ldrb	r3, [r3, #9]
 800c124:	f003 0308 	and.w	r3, r3, #8
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d04a      	beq.n	800c1c2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c130:	2b04      	cmp	r3, #4
 800c132:	d003      	beq.n	800c13c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c136:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c138:	2b07      	cmp	r3, #7
 800c13a:	d142      	bne.n	800c1c2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c13c:	4b8f      	ldr	r3, [pc, #572]	; (800c37c <tcp_slowtmr+0x580>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c142:	6a1b      	ldr	r3, [r3, #32]
 800c144:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c14c:	4b8c      	ldr	r3, [pc, #560]	; (800c380 <tcp_slowtmr+0x584>)
 800c14e:	440b      	add	r3, r1
 800c150:	498c      	ldr	r1, [pc, #560]	; (800c384 <tcp_slowtmr+0x588>)
 800c152:	fba1 1303 	umull	r1, r3, r1, r3
 800c156:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c158:	429a      	cmp	r2, r3
 800c15a:	d90a      	bls.n	800c172 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c160:	3301      	adds	r3, #1
 800c162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c166:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c16a:	3301      	adds	r3, #1
 800c16c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c170:	e027      	b.n	800c1c2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c172:	4b82      	ldr	r3, [pc, #520]	; (800c37c <tcp_slowtmr+0x580>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	6a1b      	ldr	r3, [r3, #32]
 800c17a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c188:	4618      	mov	r0, r3
 800c18a:	4b7f      	ldr	r3, [pc, #508]	; (800c388 <tcp_slowtmr+0x58c>)
 800c18c:	fb00 f303 	mul.w	r3, r0, r3
 800c190:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c192:	497c      	ldr	r1, [pc, #496]	; (800c384 <tcp_slowtmr+0x588>)
 800c194:	fba1 1303 	umull	r1, r3, r1, r3
 800c198:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d911      	bls.n	800c1c2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c19e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1a0:	f004 faca 	bl	8010738 <tcp_keepalive>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c1aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d107      	bne.n	800c1c2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d011      	beq.n	800c1ee <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c1ca:	4b6c      	ldr	r3, [pc, #432]	; (800c37c <tcp_slowtmr+0x580>)
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	1ad2      	subs	r2, r2, r3
 800c1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c1da:	4619      	mov	r1, r3
 800c1dc:	460b      	mov	r3, r1
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	440b      	add	r3, r1
 800c1e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d302      	bcc.n	800c1ee <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c1e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1ea:	f000 fddd 	bl	800cda8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f0:	7d1b      	ldrb	r3, [r3, #20]
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	d10b      	bne.n	800c20e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c1f6:	4b61      	ldr	r3, [pc, #388]	; (800c37c <tcp_slowtmr+0x580>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	2b28      	cmp	r3, #40	; 0x28
 800c202:	d904      	bls.n	800c20e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c208:	3301      	adds	r3, #1
 800c20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	7d1b      	ldrb	r3, [r3, #20]
 800c212:	2b09      	cmp	r3, #9
 800c214:	d10b      	bne.n	800c22e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c216:	4b59      	ldr	r3, [pc, #356]	; (800c37c <tcp_slowtmr+0x580>)
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	6a1b      	ldr	r3, [r3, #32]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	2bf0      	cmp	r3, #240	; 0xf0
 800c222:	d904      	bls.n	800c22e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c228:	3301      	adds	r3, #1
 800c22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c232:	2b00      	cmp	r3, #0
 800c234:	d060      	beq.n	800c2f8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c23c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c23e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c240:	f000 fbfe 	bl	800ca40 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	2b00      	cmp	r3, #0
 800c248:	d010      	beq.n	800c26c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c24a:	4b50      	ldr	r3, [pc, #320]	; (800c38c <tcp_slowtmr+0x590>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c250:	429a      	cmp	r2, r3
 800c252:	d106      	bne.n	800c262 <tcp_slowtmr+0x466>
 800c254:	4b4e      	ldr	r3, [pc, #312]	; (800c390 <tcp_slowtmr+0x594>)
 800c256:	f240 526d 	movw	r2, #1389	; 0x56d
 800c25a:	494e      	ldr	r1, [pc, #312]	; (800c394 <tcp_slowtmr+0x598>)
 800c25c:	484e      	ldr	r0, [pc, #312]	; (800c398 <tcp_slowtmr+0x59c>)
 800c25e:	f009 fb5f 	bl	8015920 <iprintf>
        prev->next = pcb->next;
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	68da      	ldr	r2, [r3, #12]
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	60da      	str	r2, [r3, #12]
 800c26a:	e00f      	b.n	800c28c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c26c:	4b47      	ldr	r3, [pc, #284]	; (800c38c <tcp_slowtmr+0x590>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c272:	429a      	cmp	r2, r3
 800c274:	d006      	beq.n	800c284 <tcp_slowtmr+0x488>
 800c276:	4b46      	ldr	r3, [pc, #280]	; (800c390 <tcp_slowtmr+0x594>)
 800c278:	f240 5271 	movw	r2, #1393	; 0x571
 800c27c:	4947      	ldr	r1, [pc, #284]	; (800c39c <tcp_slowtmr+0x5a0>)
 800c27e:	4846      	ldr	r0, [pc, #280]	; (800c398 <tcp_slowtmr+0x59c>)
 800c280:	f009 fb4e 	bl	8015920 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	4a40      	ldr	r2, [pc, #256]	; (800c38c <tcp_slowtmr+0x590>)
 800c28a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c28c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c290:	2b00      	cmp	r3, #0
 800c292:	d013      	beq.n	800c2bc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c296:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c29c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2a4:	8ad2      	ldrh	r2, [r2, #22]
 800c2a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2a8:	8b09      	ldrh	r1, [r1, #24]
 800c2aa:	9102      	str	r1, [sp, #8]
 800c2ac:	9201      	str	r2, [sp, #4]
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	4601      	mov	r1, r0
 800c2b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2b8:	f004 f98a 	bl	80105d0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	7d1b      	ldrb	r3, [r3, #20]
 800c2c6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c2d2:	6838      	ldr	r0, [r7, #0]
 800c2d4:	f7ff f9f4 	bl	800b6c0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c2d8:	4b31      	ldr	r3, [pc, #196]	; (800c3a0 <tcp_slowtmr+0x5a4>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <tcp_slowtmr+0x4f2>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f06f 010c 	mvn.w	r1, #12
 800c2ea:	68b8      	ldr	r0, [r7, #8]
 800c2ec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c2ee:	4b2c      	ldr	r3, [pc, #176]	; (800c3a0 <tcp_slowtmr+0x5a4>)
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d037      	beq.n	800c366 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c2f6:	e592      	b.n	800be1e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	7f1b      	ldrb	r3, [r3, #28]
 800c306:	3301      	adds	r3, #1
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c310:	7f1a      	ldrb	r2, [r3, #28]
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	7f5b      	ldrb	r3, [r3, #29]
 800c316:	429a      	cmp	r2, r3
 800c318:	d325      	bcc.n	800c366 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	2200      	movs	r2, #0
 800c31e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c320:	4b1f      	ldr	r3, [pc, #124]	; (800c3a0 <tcp_slowtmr+0x5a4>)
 800c322:	2200      	movs	r2, #0
 800c324:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00b      	beq.n	800c348 <tcp_slowtmr+0x54c>
 800c330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c338:	6912      	ldr	r2, [r2, #16]
 800c33a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c33c:	4610      	mov	r0, r2
 800c33e:	4798      	blx	r3
 800c340:	4603      	mov	r3, r0
 800c342:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c346:	e002      	b.n	800c34e <tcp_slowtmr+0x552>
 800c348:	2300      	movs	r3, #0
 800c34a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c34e:	4b14      	ldr	r3, [pc, #80]	; (800c3a0 <tcp_slowtmr+0x5a4>)
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d000      	beq.n	800c358 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c356:	e562      	b.n	800be1e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c358:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d102      	bne.n	800c366 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c362:	f003 fb81 	bl	800fa68 <tcp_output>
  while (pcb != NULL) {
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f47f ad5e 	bne.w	800be2a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c36e:	2300      	movs	r3, #0
 800c370:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c372:	4b0c      	ldr	r3, [pc, #48]	; (800c3a4 <tcp_slowtmr+0x5a8>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c378:	e069      	b.n	800c44e <tcp_slowtmr+0x652>
 800c37a:	bf00      	nop
 800c37c:	2000b030 	.word	0x2000b030
 800c380:	000a4cb8 	.word	0x000a4cb8
 800c384:	10624dd3 	.word	0x10624dd3
 800c388:	000124f8 	.word	0x000124f8
 800c38c:	2000b03c 	.word	0x2000b03c
 800c390:	08017a14 	.word	0x08017a14
 800c394:	08017e4c 	.word	0x08017e4c
 800c398:	08017a58 	.word	0x08017a58
 800c39c:	08017e78 	.word	0x08017e78
 800c3a0:	2000b044 	.word	0x2000b044
 800c3a4:	2000b040 	.word	0x2000b040
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3aa:	7d1b      	ldrb	r3, [r3, #20]
 800c3ac:	2b0a      	cmp	r3, #10
 800c3ae:	d006      	beq.n	800c3be <tcp_slowtmr+0x5c2>
 800c3b0:	4b2b      	ldr	r3, [pc, #172]	; (800c460 <tcp_slowtmr+0x664>)
 800c3b2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c3b6:	492b      	ldr	r1, [pc, #172]	; (800c464 <tcp_slowtmr+0x668>)
 800c3b8:	482b      	ldr	r0, [pc, #172]	; (800c468 <tcp_slowtmr+0x66c>)
 800c3ba:	f009 fab1 	bl	8015920 <iprintf>
    pcb_remove = 0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c3c4:	4b29      	ldr	r3, [pc, #164]	; (800c46c <tcp_slowtmr+0x670>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	6a1b      	ldr	r3, [r3, #32]
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	2bf0      	cmp	r3, #240	; 0xf0
 800c3d0:	d904      	bls.n	800c3dc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c3d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d02f      	beq.n	800c444 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c3e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3e6:	f000 fb2b 	bl	800ca40 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d010      	beq.n	800c412 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c3f0:	4b1f      	ldr	r3, [pc, #124]	; (800c470 <tcp_slowtmr+0x674>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d106      	bne.n	800c408 <tcp_slowtmr+0x60c>
 800c3fa:	4b19      	ldr	r3, [pc, #100]	; (800c460 <tcp_slowtmr+0x664>)
 800c3fc:	f240 52af 	movw	r2, #1455	; 0x5af
 800c400:	491c      	ldr	r1, [pc, #112]	; (800c474 <tcp_slowtmr+0x678>)
 800c402:	4819      	ldr	r0, [pc, #100]	; (800c468 <tcp_slowtmr+0x66c>)
 800c404:	f009 fa8c 	bl	8015920 <iprintf>
        prev->next = pcb->next;
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	68da      	ldr	r2, [r3, #12]
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	60da      	str	r2, [r3, #12]
 800c410:	e00f      	b.n	800c432 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c412:	4b17      	ldr	r3, [pc, #92]	; (800c470 <tcp_slowtmr+0x674>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c418:	429a      	cmp	r2, r3
 800c41a:	d006      	beq.n	800c42a <tcp_slowtmr+0x62e>
 800c41c:	4b10      	ldr	r3, [pc, #64]	; (800c460 <tcp_slowtmr+0x664>)
 800c41e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c422:	4915      	ldr	r1, [pc, #84]	; (800c478 <tcp_slowtmr+0x67c>)
 800c424:	4810      	ldr	r0, [pc, #64]	; (800c468 <tcp_slowtmr+0x66c>)
 800c426:	f009 fa7b 	bl	8015920 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	4a10      	ldr	r2, [pc, #64]	; (800c470 <tcp_slowtmr+0x674>)
 800c430:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c43c:	69f8      	ldr	r0, [r7, #28]
 800c43e:	f7ff f93f 	bl	800b6c0 <tcp_free>
 800c442:	e004      	b.n	800c44e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1a9      	bne.n	800c3a8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	3730      	adds	r7, #48	; 0x30
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bdb0      	pop	{r4, r5, r7, pc}
 800c45e:	bf00      	nop
 800c460:	08017a14 	.word	0x08017a14
 800c464:	08017ea4 	.word	0x08017ea4
 800c468:	08017a58 	.word	0x08017a58
 800c46c:	2000b030 	.word	0x2000b030
 800c470:	2000b040 	.word	0x2000b040
 800c474:	08017ed4 	.word	0x08017ed4
 800c478:	08017efc 	.word	0x08017efc

0800c47c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c482:	4b2d      	ldr	r3, [pc, #180]	; (800c538 <tcp_fasttmr+0xbc>)
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	3301      	adds	r3, #1
 800c488:	b2da      	uxtb	r2, r3
 800c48a:	4b2b      	ldr	r3, [pc, #172]	; (800c538 <tcp_fasttmr+0xbc>)
 800c48c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c48e:	4b2b      	ldr	r3, [pc, #172]	; (800c53c <tcp_fasttmr+0xc0>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c494:	e048      	b.n	800c528 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	7f9a      	ldrb	r2, [r3, #30]
 800c49a:	4b27      	ldr	r3, [pc, #156]	; (800c538 <tcp_fasttmr+0xbc>)
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d03f      	beq.n	800c522 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c4a2:	4b25      	ldr	r3, [pc, #148]	; (800c538 <tcp_fasttmr+0xbc>)
 800c4a4:	781a      	ldrb	r2, [r3, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	8b5b      	ldrh	r3, [r3, #26]
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d010      	beq.n	800c4d8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	8b5b      	ldrh	r3, [r3, #26]
 800c4ba:	f043 0302 	orr.w	r3, r3, #2
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f003 facf 	bl	800fa68 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8b5b      	ldrh	r3, [r3, #26]
 800c4ce:	f023 0303 	bic.w	r3, r3, #3
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	8b5b      	ldrh	r3, [r3, #26]
 800c4dc:	f003 0308 	and.w	r3, r3, #8
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d009      	beq.n	800c4f8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	8b5b      	ldrh	r3, [r3, #26]
 800c4e8:	f023 0308 	bic.w	r3, r3, #8
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff fa78 	bl	800b9e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00a      	beq.n	800c51c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c506:	4b0e      	ldr	r3, [pc, #56]	; (800c540 <tcp_fasttmr+0xc4>)
 800c508:	2200      	movs	r2, #0
 800c50a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f819 	bl	800c544 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c512:	4b0b      	ldr	r3, [pc, #44]	; (800c540 <tcp_fasttmr+0xc4>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d000      	beq.n	800c51c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c51a:	e7b8      	b.n	800c48e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	607b      	str	r3, [r7, #4]
 800c520:	e002      	b.n	800c528 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1b3      	bne.n	800c496 <tcp_fasttmr+0x1a>
    }
  }
}
 800c52e:	bf00      	nop
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	2000b046 	.word	0x2000b046
 800c53c:	2000b03c 	.word	0x2000b03c
 800c540:	2000b044 	.word	0x2000b044

0800c544 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c544:	b590      	push	{r4, r7, lr}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d109      	bne.n	800c566 <tcp_process_refused_data+0x22>
 800c552:	4b37      	ldr	r3, [pc, #220]	; (800c630 <tcp_process_refused_data+0xec>)
 800c554:	f240 6209 	movw	r2, #1545	; 0x609
 800c558:	4936      	ldr	r1, [pc, #216]	; (800c634 <tcp_process_refused_data+0xf0>)
 800c55a:	4837      	ldr	r0, [pc, #220]	; (800c638 <tcp_process_refused_data+0xf4>)
 800c55c:	f009 f9e0 	bl	8015920 <iprintf>
 800c560:	f06f 030f 	mvn.w	r3, #15
 800c564:	e060      	b.n	800c628 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c56a:	7b5b      	ldrb	r3, [r3, #13]
 800c56c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c572:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00b      	beq.n	800c59c <tcp_process_refused_data+0x58>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6918      	ldr	r0, [r3, #16]
 800c58e:	2300      	movs	r3, #0
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	6879      	ldr	r1, [r7, #4]
 800c594:	47a0      	blx	r4
 800c596:	4603      	mov	r3, r0
 800c598:	73fb      	strb	r3, [r7, #15]
 800c59a:	e007      	b.n	800c5ac <tcp_process_refused_data+0x68>
 800c59c:	2300      	movs	r3, #0
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	f000 f8a4 	bl	800c6f0 <tcp_recv_null>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c5ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d12a      	bne.n	800c60a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c5b4:	7bbb      	ldrb	r3, [r7, #14]
 800c5b6:	f003 0320 	and.w	r3, r3, #32
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d033      	beq.n	800c626 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c5c6:	d005      	beq.n	800c5d4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00b      	beq.n	800c5f6 <tcp_process_refused_data+0xb2>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6918      	ldr	r0, [r3, #16]
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	6879      	ldr	r1, [r7, #4]
 800c5ee:	47a0      	blx	r4
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
 800c5f4:	e001      	b.n	800c5fa <tcp_process_refused_data+0xb6>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5fe:	f113 0f0d 	cmn.w	r3, #13
 800c602:	d110      	bne.n	800c626 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c604:	f06f 030c 	mvn.w	r3, #12
 800c608:	e00e      	b.n	800c628 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c60e:	f113 0f0d 	cmn.w	r3, #13
 800c612:	d102      	bne.n	800c61a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c614:	f06f 030c 	mvn.w	r3, #12
 800c618:	e006      	b.n	800c628 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c620:	f06f 0304 	mvn.w	r3, #4
 800c624:	e000      	b.n	800c628 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd90      	pop	{r4, r7, pc}
 800c630:	08017a14 	.word	0x08017a14
 800c634:	08017f24 	.word	0x08017f24
 800c638:	08017a58 	.word	0x08017a58

0800c63c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c644:	e007      	b.n	800c656 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f80a 	bl	800c666 <tcp_seg_free>
    seg = next;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1f4      	bne.n	800c646 <tcp_segs_free+0xa>
  }
}
 800c65c:	bf00      	nop
 800c65e:	bf00      	nop
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b082      	sub	sp, #8
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00c      	beq.n	800c68e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	4618      	mov	r0, r3
 800c682:	f7fe fd6d 	bl	800b160 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c686:	6879      	ldr	r1, [r7, #4]
 800c688:	2003      	movs	r0, #3
 800c68a:	f7fd fee7 	bl	800a45c <memp_free>
  }
}
 800c68e:	bf00      	nop
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
	...

0800c698 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d106      	bne.n	800c6b4 <tcp_seg_copy+0x1c>
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <tcp_seg_copy+0x4c>)
 800c6a8:	f240 6282 	movw	r2, #1666	; 0x682
 800c6ac:	490e      	ldr	r1, [pc, #56]	; (800c6e8 <tcp_seg_copy+0x50>)
 800c6ae:	480f      	ldr	r0, [pc, #60]	; (800c6ec <tcp_seg_copy+0x54>)
 800c6b0:	f009 f936 	bl	8015920 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c6b4:	2003      	movs	r0, #3
 800c6b6:	f7fd fe61 	bl	800a37c <memp_malloc>
 800c6ba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <tcp_seg_copy+0x2e>
    return NULL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e00a      	b.n	800c6dc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c6c6:	2210      	movs	r2, #16
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f009 f8f8 	bl	80158c0 <memcpy>
  pbuf_ref(cseg->p);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fe fde3 	bl	800b2a0 <pbuf_ref>
  return cseg;
 800c6da:	68fb      	ldr	r3, [r7, #12]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	08017a14 	.word	0x08017a14
 800c6e8:	08017f68 	.word	0x08017f68
 800c6ec:	08017a58 	.word	0x08017a58

0800c6f0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d109      	bne.n	800c718 <tcp_recv_null+0x28>
 800c704:	4b12      	ldr	r3, [pc, #72]	; (800c750 <tcp_recv_null+0x60>)
 800c706:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c70a:	4912      	ldr	r1, [pc, #72]	; (800c754 <tcp_recv_null+0x64>)
 800c70c:	4812      	ldr	r0, [pc, #72]	; (800c758 <tcp_recv_null+0x68>)
 800c70e:	f009 f907 	bl	8015920 <iprintf>
 800c712:	f06f 030f 	mvn.w	r3, #15
 800c716:	e016      	b.n	800c746 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d009      	beq.n	800c732 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	891b      	ldrh	r3, [r3, #8]
 800c722:	4619      	mov	r1, r3
 800c724:	68b8      	ldr	r0, [r7, #8]
 800c726:	f7ff fb19 	bl	800bd5c <tcp_recved>
    pbuf_free(p);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7fe fd18 	bl	800b160 <pbuf_free>
 800c730:	e008      	b.n	800c744 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d104      	bne.n	800c744 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c73a:	68b8      	ldr	r0, [r7, #8]
 800c73c:	f7ff f9be 	bl	800babc <tcp_close>
 800c740:	4603      	mov	r3, r0
 800c742:	e000      	b.n	800c746 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	08017a14 	.word	0x08017a14
 800c754:	08017f84 	.word	0x08017f84
 800c758:	08017a58 	.word	0x08017a58

0800c75c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	4603      	mov	r3, r0
 800c764:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	db01      	blt.n	800c772 <tcp_kill_prio+0x16>
 800c76e:	79fb      	ldrb	r3, [r7, #7]
 800c770:	e000      	b.n	800c774 <tcp_kill_prio+0x18>
 800c772:	237f      	movs	r3, #127	; 0x7f
 800c774:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c776:	7afb      	ldrb	r3, [r7, #11]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d034      	beq.n	800c7e6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c77c:	7afb      	ldrb	r3, [r7, #11]
 800c77e:	3b01      	subs	r3, #1
 800c780:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c786:	2300      	movs	r3, #0
 800c788:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c78a:	4b19      	ldr	r3, [pc, #100]	; (800c7f0 <tcp_kill_prio+0x94>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	617b      	str	r3, [r7, #20]
 800c790:	e01f      	b.n	800c7d2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	7d5b      	ldrb	r3, [r3, #21]
 800c796:	7afa      	ldrb	r2, [r7, #11]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d80c      	bhi.n	800c7b6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c7a0:	7afa      	ldrb	r2, [r7, #11]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d112      	bne.n	800c7cc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c7a6:	4b13      	ldr	r3, [pc, #76]	; (800c7f4 <tcp_kill_prio+0x98>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d80a      	bhi.n	800c7cc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c7b6:	4b0f      	ldr	r3, [pc, #60]	; (800c7f4 <tcp_kill_prio+0x98>)
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	7d5b      	ldrb	r3, [r3, #21]
 800c7ca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	617b      	str	r3, [r7, #20]
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1dc      	bne.n	800c792 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d004      	beq.n	800c7e8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c7de:	6938      	ldr	r0, [r7, #16]
 800c7e0:	f7ff fa56 	bl	800bc90 <tcp_abort>
 800c7e4:	e000      	b.n	800c7e8 <tcp_kill_prio+0x8c>
    return;
 800c7e6:	bf00      	nop
  }
}
 800c7e8:	3718      	adds	r7, #24
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	2000b03c 	.word	0x2000b03c
 800c7f4:	2000b030 	.word	0x2000b030

0800c7f8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	4603      	mov	r3, r0
 800c800:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c802:	79fb      	ldrb	r3, [r7, #7]
 800c804:	2b08      	cmp	r3, #8
 800c806:	d009      	beq.n	800c81c <tcp_kill_state+0x24>
 800c808:	79fb      	ldrb	r3, [r7, #7]
 800c80a:	2b09      	cmp	r3, #9
 800c80c:	d006      	beq.n	800c81c <tcp_kill_state+0x24>
 800c80e:	4b1a      	ldr	r3, [pc, #104]	; (800c878 <tcp_kill_state+0x80>)
 800c810:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c814:	4919      	ldr	r1, [pc, #100]	; (800c87c <tcp_kill_state+0x84>)
 800c816:	481a      	ldr	r0, [pc, #104]	; (800c880 <tcp_kill_state+0x88>)
 800c818:	f009 f882 	bl	8015920 <iprintf>

  inactivity = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c820:	2300      	movs	r3, #0
 800c822:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c824:	4b17      	ldr	r3, [pc, #92]	; (800c884 <tcp_kill_state+0x8c>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	617b      	str	r3, [r7, #20]
 800c82a:	e017      	b.n	800c85c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	7d1b      	ldrb	r3, [r3, #20]
 800c830:	79fa      	ldrb	r2, [r7, #7]
 800c832:	429a      	cmp	r2, r3
 800c834:	d10f      	bne.n	800c856 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c836:	4b14      	ldr	r3, [pc, #80]	; (800c888 <tcp_kill_state+0x90>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	429a      	cmp	r2, r3
 800c844:	d807      	bhi.n	800c856 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c846:	4b10      	ldr	r3, [pc, #64]	; (800c888 <tcp_kill_state+0x90>)
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	6a1b      	ldr	r3, [r3, #32]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	617b      	str	r3, [r7, #20]
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1e4      	bne.n	800c82c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d003      	beq.n	800c870 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c868:	2100      	movs	r1, #0
 800c86a:	6938      	ldr	r0, [r7, #16]
 800c86c:	f7ff f952 	bl	800bb14 <tcp_abandon>
  }
}
 800c870:	bf00      	nop
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	08017a14 	.word	0x08017a14
 800c87c:	08017fa0 	.word	0x08017fa0
 800c880:	08017a58 	.word	0x08017a58
 800c884:	2000b03c 	.word	0x2000b03c
 800c888:	2000b030 	.word	0x2000b030

0800c88c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c892:	2300      	movs	r3, #0
 800c894:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c896:	2300      	movs	r3, #0
 800c898:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c89a:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <tcp_kill_timewait+0x58>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	e012      	b.n	800c8c8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c8a2:	4b11      	ldr	r3, [pc, #68]	; (800c8e8 <tcp_kill_timewait+0x5c>)
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d807      	bhi.n	800c8c2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c8b2:	4b0d      	ldr	r3, [pc, #52]	; (800c8e8 <tcp_kill_timewait+0x5c>)
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1e9      	bne.n	800c8a2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c8d4:	68b8      	ldr	r0, [r7, #8]
 800c8d6:	f7ff f9db 	bl	800bc90 <tcp_abort>
  }
}
 800c8da:	bf00      	nop
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	2000b040 	.word	0x2000b040
 800c8e8:	2000b030 	.word	0x2000b030

0800c8ec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c8f2:	4b10      	ldr	r3, [pc, #64]	; (800c934 <tcp_handle_closepend+0x48>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c8f8:	e014      	b.n	800c924 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	8b5b      	ldrh	r3, [r3, #26]
 800c904:	f003 0308 	and.w	r3, r3, #8
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d009      	beq.n	800c920 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	8b5b      	ldrh	r3, [r3, #26]
 800c910:	f023 0308 	bic.w	r3, r3, #8
 800c914:	b29a      	uxth	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff f864 	bl	800b9e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1e7      	bne.n	800c8fa <tcp_handle_closepend+0xe>
  }
}
 800c92a:	bf00      	nop
 800c92c:	bf00      	nop
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	2000b03c 	.word	0x2000b03c

0800c938 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	4603      	mov	r3, r0
 800c940:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c942:	2001      	movs	r0, #1
 800c944:	f7fd fd1a 	bl	800a37c <memp_malloc>
 800c948:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d126      	bne.n	800c99e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c950:	f7ff ffcc 	bl	800c8ec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c954:	f7ff ff9a 	bl	800c88c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c958:	2001      	movs	r0, #1
 800c95a:	f7fd fd0f 	bl	800a37c <memp_malloc>
 800c95e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d11b      	bne.n	800c99e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c966:	2009      	movs	r0, #9
 800c968:	f7ff ff46 	bl	800c7f8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c96c:	2001      	movs	r0, #1
 800c96e:	f7fd fd05 	bl	800a37c <memp_malloc>
 800c972:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d111      	bne.n	800c99e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c97a:	2008      	movs	r0, #8
 800c97c:	f7ff ff3c 	bl	800c7f8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c980:	2001      	movs	r0, #1
 800c982:	f7fd fcfb 	bl	800a37c <memp_malloc>
 800c986:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d107      	bne.n	800c99e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff fee3 	bl	800c75c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c996:	2001      	movs	r0, #1
 800c998:	f7fd fcf0 	bl	800a37c <memp_malloc>
 800c99c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d03f      	beq.n	800ca24 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c9a4:	229c      	movs	r2, #156	; 0x9c
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f008 ffb1 	bl	8015910 <memset>
    pcb->prio = prio;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	79fa      	ldrb	r2, [r7, #7]
 800c9b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c9ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c9c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	22ff      	movs	r2, #255	; 0xff
 800c9d2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c9da:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2206      	movs	r2, #6
 800c9e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2206      	movs	r2, #6
 800c9e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9f0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c9fa:	4b0d      	ldr	r3, [pc, #52]	; (800ca30 <tcp_alloc+0xf8>)
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ca02:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <tcp_alloc+0xfc>)
 800ca04:	781a      	ldrb	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ca10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	4a08      	ldr	r2, [pc, #32]	; (800ca38 <tcp_alloc+0x100>)
 800ca18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4a07      	ldr	r2, [pc, #28]	; (800ca3c <tcp_alloc+0x104>)
 800ca20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ca24:	68fb      	ldr	r3, [r7, #12]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	2000b030 	.word	0x2000b030
 800ca34:	2000b046 	.word	0x2000b046
 800ca38:	0800c6f1 	.word	0x0800c6f1
 800ca3c:	006ddd00 	.word	0x006ddd00

0800ca40 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d107      	bne.n	800ca5e <tcp_pcb_purge+0x1e>
 800ca4e:	4b21      	ldr	r3, [pc, #132]	; (800cad4 <tcp_pcb_purge+0x94>)
 800ca50:	f640 0251 	movw	r2, #2129	; 0x851
 800ca54:	4920      	ldr	r1, [pc, #128]	; (800cad8 <tcp_pcb_purge+0x98>)
 800ca56:	4821      	ldr	r0, [pc, #132]	; (800cadc <tcp_pcb_purge+0x9c>)
 800ca58:	f008 ff62 	bl	8015920 <iprintf>
 800ca5c:	e037      	b.n	800cace <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	7d1b      	ldrb	r3, [r3, #20]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d033      	beq.n	800cace <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ca6a:	2b0a      	cmp	r3, #10
 800ca6c:	d02f      	beq.n	800cace <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d02b      	beq.n	800cace <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d007      	beq.n	800ca8e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe fb6c 	bl	800b160 <pbuf_free>
      pcb->refused_data = NULL;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d002      	beq.n	800ca9c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f986 	bl	800cda8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caa2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff fdc7 	bl	800c63c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7ff fdc2 	bl	800c63c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	66da      	str	r2, [r3, #108]	; 0x6c
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	08017a14 	.word	0x08017a14
 800cad8:	08018060 	.word	0x08018060
 800cadc:	08017a58 	.word	0x08017a58

0800cae0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d106      	bne.n	800cafe <tcp_pcb_remove+0x1e>
 800caf0:	4b3e      	ldr	r3, [pc, #248]	; (800cbec <tcp_pcb_remove+0x10c>)
 800caf2:	f640 0283 	movw	r2, #2179	; 0x883
 800caf6:	493e      	ldr	r1, [pc, #248]	; (800cbf0 <tcp_pcb_remove+0x110>)
 800caf8:	483e      	ldr	r0, [pc, #248]	; (800cbf4 <tcp_pcb_remove+0x114>)
 800cafa:	f008 ff11 	bl	8015920 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <tcp_pcb_remove+0x32>
 800cb04:	4b39      	ldr	r3, [pc, #228]	; (800cbec <tcp_pcb_remove+0x10c>)
 800cb06:	f640 0284 	movw	r2, #2180	; 0x884
 800cb0a:	493b      	ldr	r1, [pc, #236]	; (800cbf8 <tcp_pcb_remove+0x118>)
 800cb0c:	4839      	ldr	r0, [pc, #228]	; (800cbf4 <tcp_pcb_remove+0x114>)
 800cb0e:	f008 ff07 	bl	8015920 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	683a      	ldr	r2, [r7, #0]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d105      	bne.n	800cb28 <tcp_pcb_remove+0x48>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68da      	ldr	r2, [r3, #12]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	e013      	b.n	800cb50 <tcp_pcb_remove+0x70>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	e00c      	b.n	800cb4a <tcp_pcb_remove+0x6a>
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d104      	bne.n	800cb44 <tcp_pcb_remove+0x64>
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	68da      	ldr	r2, [r3, #12]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	60da      	str	r2, [r3, #12]
 800cb42:	e005      	b.n	800cb50 <tcp_pcb_remove+0x70>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	60fb      	str	r3, [r7, #12]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1ef      	bne.n	800cb30 <tcp_pcb_remove+0x50>
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	2200      	movs	r2, #0
 800cb54:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cb56:	6838      	ldr	r0, [r7, #0]
 800cb58:	f7ff ff72 	bl	800ca40 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	7d1b      	ldrb	r3, [r3, #20]
 800cb60:	2b0a      	cmp	r3, #10
 800cb62:	d013      	beq.n	800cb8c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d00f      	beq.n	800cb8c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	8b5b      	ldrh	r3, [r3, #26]
 800cb70:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d009      	beq.n	800cb8c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	8b5b      	ldrh	r3, [r3, #26]
 800cb7c:	f043 0302 	orr.w	r3, r3, #2
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb86:	6838      	ldr	r0, [r7, #0]
 800cb88:	f002 ff6e 	bl	800fa68 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	7d1b      	ldrb	r3, [r3, #20]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d020      	beq.n	800cbd6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <tcp_pcb_remove+0xca>
 800cb9c:	4b13      	ldr	r3, [pc, #76]	; (800cbec <tcp_pcb_remove+0x10c>)
 800cb9e:	f640 0293 	movw	r2, #2195	; 0x893
 800cba2:	4916      	ldr	r1, [pc, #88]	; (800cbfc <tcp_pcb_remove+0x11c>)
 800cba4:	4813      	ldr	r0, [pc, #76]	; (800cbf4 <tcp_pcb_remove+0x114>)
 800cba6:	f008 febb 	bl	8015920 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d006      	beq.n	800cbc0 <tcp_pcb_remove+0xe0>
 800cbb2:	4b0e      	ldr	r3, [pc, #56]	; (800cbec <tcp_pcb_remove+0x10c>)
 800cbb4:	f640 0294 	movw	r2, #2196	; 0x894
 800cbb8:	4911      	ldr	r1, [pc, #68]	; (800cc00 <tcp_pcb_remove+0x120>)
 800cbba:	480e      	ldr	r0, [pc, #56]	; (800cbf4 <tcp_pcb_remove+0x114>)
 800cbbc:	f008 feb0 	bl	8015920 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d006      	beq.n	800cbd6 <tcp_pcb_remove+0xf6>
 800cbc8:	4b08      	ldr	r3, [pc, #32]	; (800cbec <tcp_pcb_remove+0x10c>)
 800cbca:	f640 0296 	movw	r2, #2198	; 0x896
 800cbce:	490d      	ldr	r1, [pc, #52]	; (800cc04 <tcp_pcb_remove+0x124>)
 800cbd0:	4808      	ldr	r0, [pc, #32]	; (800cbf4 <tcp_pcb_remove+0x114>)
 800cbd2:	f008 fea5 	bl	8015920 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cbe2:	bf00      	nop
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	08017a14 	.word	0x08017a14
 800cbf0:	0801807c 	.word	0x0801807c
 800cbf4:	08017a58 	.word	0x08017a58
 800cbf8:	08018098 	.word	0x08018098
 800cbfc:	080180b8 	.word	0x080180b8
 800cc00:	080180d0 	.word	0x080180d0
 800cc04:	080180ec 	.word	0x080180ec

0800cc08 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d106      	bne.n	800cc24 <tcp_next_iss+0x1c>
 800cc16:	4b0a      	ldr	r3, [pc, #40]	; (800cc40 <tcp_next_iss+0x38>)
 800cc18:	f640 02af 	movw	r2, #2223	; 0x8af
 800cc1c:	4909      	ldr	r1, [pc, #36]	; (800cc44 <tcp_next_iss+0x3c>)
 800cc1e:	480a      	ldr	r0, [pc, #40]	; (800cc48 <tcp_next_iss+0x40>)
 800cc20:	f008 fe7e 	bl	8015920 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cc24:	4b09      	ldr	r3, [pc, #36]	; (800cc4c <tcp_next_iss+0x44>)
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	4b09      	ldr	r3, [pc, #36]	; (800cc50 <tcp_next_iss+0x48>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	4a07      	ldr	r2, [pc, #28]	; (800cc4c <tcp_next_iss+0x44>)
 800cc30:	6013      	str	r3, [r2, #0]
  return iss;
 800cc32:	4b06      	ldr	r3, [pc, #24]	; (800cc4c <tcp_next_iss+0x44>)
 800cc34:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	08017a14 	.word	0x08017a14
 800cc44:	08018104 	.word	0x08018104
 800cc48:	08017a58 	.word	0x08017a58
 800cc4c:	2000005c 	.word	0x2000005c
 800cc50:	2000b030 	.word	0x2000b030

0800cc54 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d106      	bne.n	800cc76 <tcp_eff_send_mss_netif+0x22>
 800cc68:	4b14      	ldr	r3, [pc, #80]	; (800ccbc <tcp_eff_send_mss_netif+0x68>)
 800cc6a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800cc6e:	4914      	ldr	r1, [pc, #80]	; (800ccc0 <tcp_eff_send_mss_netif+0x6c>)
 800cc70:	4814      	ldr	r0, [pc, #80]	; (800ccc4 <tcp_eff_send_mss_netif+0x70>)
 800cc72:	f008 fe55 	bl	8015920 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cc7c:	89fb      	ldrh	r3, [r7, #14]
 800cc7e:	e019      	b.n	800ccb4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cc86:	8afb      	ldrh	r3, [r7, #22]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d012      	beq.n	800ccb2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cc8c:	2328      	movs	r3, #40	; 0x28
 800cc8e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cc90:	8afa      	ldrh	r2, [r7, #22]
 800cc92:	8abb      	ldrh	r3, [r7, #20]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d904      	bls.n	800cca2 <tcp_eff_send_mss_netif+0x4e>
 800cc98:	8afa      	ldrh	r2, [r7, #22]
 800cc9a:	8abb      	ldrh	r3, [r7, #20]
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	e000      	b.n	800cca4 <tcp_eff_send_mss_netif+0x50>
 800cca2:	2300      	movs	r3, #0
 800cca4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cca6:	8a7a      	ldrh	r2, [r7, #18]
 800cca8:	89fb      	ldrh	r3, [r7, #14]
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	bf28      	it	cs
 800ccae:	4613      	movcs	r3, r2
 800ccb0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ccb2:	89fb      	ldrh	r3, [r7, #14]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3718      	adds	r7, #24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	08017a14 	.word	0x08017a14
 800ccc0:	08018120 	.word	0x08018120
 800ccc4:	08017a58 	.word	0x08017a58

0800ccc8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d119      	bne.n	800cd10 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ccdc:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ccde:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cce2:	4910      	ldr	r1, [pc, #64]	; (800cd24 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cce4:	4810      	ldr	r0, [pc, #64]	; (800cd28 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cce6:	f008 fe1b 	bl	8015920 <iprintf>

  while (pcb != NULL) {
 800ccea:	e011      	b.n	800cd10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d108      	bne.n	800cd0a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f7fe ffc6 	bl	800bc90 <tcp_abort>
      pcb = next;
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	e002      	b.n	800cd10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1ea      	bne.n	800ccec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cd16:	bf00      	nop
 800cd18:	bf00      	nop
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	08017a14 	.word	0x08017a14
 800cd24:	08018148 	.word	0x08018148
 800cd28:	08017a58 	.word	0x08017a58

0800cd2c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d02a      	beq.n	800cd92 <tcp_netif_ip_addr_changed+0x66>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d026      	beq.n	800cd92 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cd44:	4b15      	ldr	r3, [pc, #84]	; (800cd9c <tcp_netif_ip_addr_changed+0x70>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff ffbc 	bl	800ccc8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cd50:	4b13      	ldr	r3, [pc, #76]	; (800cda0 <tcp_netif_ip_addr_changed+0x74>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4619      	mov	r1, r3
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff ffb6 	bl	800ccc8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d017      	beq.n	800cd92 <tcp_netif_ip_addr_changed+0x66>
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d013      	beq.n	800cd92 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd6a:	4b0e      	ldr	r3, [pc, #56]	; (800cda4 <tcp_netif_ip_addr_changed+0x78>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	e00c      	b.n	800cd8c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d103      	bne.n	800cd86 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	60fb      	str	r3, [r7, #12]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1ef      	bne.n	800cd72 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cd92:	bf00      	nop
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	2000b03c 	.word	0x2000b03c
 800cda0:	2000b034 	.word	0x2000b034
 800cda4:	2000b038 	.word	0x2000b038

0800cda8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d007      	beq.n	800cdc8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7ff fc3d 	bl	800c63c <tcp_segs_free>
    pcb->ooseq = NULL;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cdc8:	bf00      	nop
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cdd0:	b590      	push	{r4, r7, lr}
 800cdd2:	b08d      	sub	sp, #52	; 0x34
 800cdd4:	af04      	add	r7, sp, #16
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d105      	bne.n	800cdec <tcp_input+0x1c>
 800cde0:	4b9b      	ldr	r3, [pc, #620]	; (800d050 <tcp_input+0x280>)
 800cde2:	2283      	movs	r2, #131	; 0x83
 800cde4:	499b      	ldr	r1, [pc, #620]	; (800d054 <tcp_input+0x284>)
 800cde6:	489c      	ldr	r0, [pc, #624]	; (800d058 <tcp_input+0x288>)
 800cde8:	f008 fd9a 	bl	8015920 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	4a9a      	ldr	r2, [pc, #616]	; (800d05c <tcp_input+0x28c>)
 800cdf2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	895b      	ldrh	r3, [r3, #10]
 800cdf8:	2b13      	cmp	r3, #19
 800cdfa:	f240 83d1 	bls.w	800d5a0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cdfe:	4b98      	ldr	r3, [pc, #608]	; (800d060 <tcp_input+0x290>)
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	4a97      	ldr	r2, [pc, #604]	; (800d060 <tcp_input+0x290>)
 800ce04:	6812      	ldr	r2, [r2, #0]
 800ce06:	4611      	mov	r1, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f007 fdcf 	bl	80149ac <ip4_addr_isbroadcast_u32>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f040 83c7 	bne.w	800d5a4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ce16:	4b92      	ldr	r3, [pc, #584]	; (800d060 <tcp_input+0x290>)
 800ce18:	695b      	ldr	r3, [r3, #20]
 800ce1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ce1e:	2be0      	cmp	r3, #224	; 0xe0
 800ce20:	f000 83c0 	beq.w	800d5a4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ce24:	4b8d      	ldr	r3, [pc, #564]	; (800d05c <tcp_input+0x28c>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	899b      	ldrh	r3, [r3, #12]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fc fe2d 	bl	8009a8c <lwip_htons>
 800ce32:	4603      	mov	r3, r0
 800ce34:	0b1b      	lsrs	r3, r3, #12
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ce3e:	7cbb      	ldrb	r3, [r7, #18]
 800ce40:	2b13      	cmp	r3, #19
 800ce42:	f240 83b1 	bls.w	800d5a8 <tcp_input+0x7d8>
 800ce46:	7cbb      	ldrb	r3, [r7, #18]
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	891b      	ldrh	r3, [r3, #8]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	f200 83aa 	bhi.w	800d5a8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ce54:	7cbb      	ldrb	r3, [r7, #18]
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	3b14      	subs	r3, #20
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	4b81      	ldr	r3, [pc, #516]	; (800d064 <tcp_input+0x294>)
 800ce5e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ce60:	4b81      	ldr	r3, [pc, #516]	; (800d068 <tcp_input+0x298>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	895a      	ldrh	r2, [r3, #10]
 800ce6a:	7cbb      	ldrb	r3, [r7, #18]
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d309      	bcc.n	800ce86 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ce72:	4b7c      	ldr	r3, [pc, #496]	; (800d064 <tcp_input+0x294>)
 800ce74:	881a      	ldrh	r2, [r3, #0]
 800ce76:	4b7d      	ldr	r3, [pc, #500]	; (800d06c <tcp_input+0x29c>)
 800ce78:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ce7a:	7cbb      	ldrb	r3, [r7, #18]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7fe f8e8 	bl	800b054 <pbuf_remove_header>
 800ce84:	e04e      	b.n	800cf24 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d105      	bne.n	800ce9a <tcp_input+0xca>
 800ce8e:	4b70      	ldr	r3, [pc, #448]	; (800d050 <tcp_input+0x280>)
 800ce90:	22c2      	movs	r2, #194	; 0xc2
 800ce92:	4977      	ldr	r1, [pc, #476]	; (800d070 <tcp_input+0x2a0>)
 800ce94:	4870      	ldr	r0, [pc, #448]	; (800d058 <tcp_input+0x288>)
 800ce96:	f008 fd43 	bl	8015920 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ce9a:	2114      	movs	r1, #20
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7fe f8d9 	bl	800b054 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	895a      	ldrh	r2, [r3, #10]
 800cea6:	4b71      	ldr	r3, [pc, #452]	; (800d06c <tcp_input+0x29c>)
 800cea8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ceaa:	4b6e      	ldr	r3, [pc, #440]	; (800d064 <tcp_input+0x294>)
 800ceac:	881a      	ldrh	r2, [r3, #0]
 800ceae:	4b6f      	ldr	r3, [pc, #444]	; (800d06c <tcp_input+0x29c>)
 800ceb0:	881b      	ldrh	r3, [r3, #0]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ceb6:	4b6d      	ldr	r3, [pc, #436]	; (800d06c <tcp_input+0x29c>)
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7fe f8c9 	bl	800b054 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	895b      	ldrh	r3, [r3, #10]
 800cec8:	8a3a      	ldrh	r2, [r7, #16]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	f200 836e 	bhi.w	800d5ac <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	4a64      	ldr	r2, [pc, #400]	; (800d068 <tcp_input+0x298>)
 800ced8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	8a3a      	ldrh	r2, [r7, #16]
 800cee0:	4611      	mov	r1, r2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fe f8b6 	bl	800b054 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	891a      	ldrh	r2, [r3, #8]
 800ceec:	8a3b      	ldrh	r3, [r7, #16]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	895b      	ldrh	r3, [r3, #10]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d005      	beq.n	800cf0a <tcp_input+0x13a>
 800cefe:	4b54      	ldr	r3, [pc, #336]	; (800d050 <tcp_input+0x280>)
 800cf00:	22df      	movs	r2, #223	; 0xdf
 800cf02:	495c      	ldr	r1, [pc, #368]	; (800d074 <tcp_input+0x2a4>)
 800cf04:	4854      	ldr	r0, [pc, #336]	; (800d058 <tcp_input+0x288>)
 800cf06:	f008 fd0b 	bl	8015920 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	891a      	ldrh	r2, [r3, #8]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	891b      	ldrh	r3, [r3, #8]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d005      	beq.n	800cf24 <tcp_input+0x154>
 800cf18:	4b4d      	ldr	r3, [pc, #308]	; (800d050 <tcp_input+0x280>)
 800cf1a:	22e0      	movs	r2, #224	; 0xe0
 800cf1c:	4956      	ldr	r1, [pc, #344]	; (800d078 <tcp_input+0x2a8>)
 800cf1e:	484e      	ldr	r0, [pc, #312]	; (800d058 <tcp_input+0x288>)
 800cf20:	f008 fcfe 	bl	8015920 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cf24:	4b4d      	ldr	r3, [pc, #308]	; (800d05c <tcp_input+0x28c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	4a4b      	ldr	r2, [pc, #300]	; (800d05c <tcp_input+0x28c>)
 800cf2e:	6814      	ldr	r4, [r2, #0]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fc fdab 	bl	8009a8c <lwip_htons>
 800cf36:	4603      	mov	r3, r0
 800cf38:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cf3a:	4b48      	ldr	r3, [pc, #288]	; (800d05c <tcp_input+0x28c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	885b      	ldrh	r3, [r3, #2]
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	4a46      	ldr	r2, [pc, #280]	; (800d05c <tcp_input+0x28c>)
 800cf44:	6814      	ldr	r4, [r2, #0]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7fc fda0 	bl	8009a8c <lwip_htons>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cf50:	4b42      	ldr	r3, [pc, #264]	; (800d05c <tcp_input+0x28c>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	4a41      	ldr	r2, [pc, #260]	; (800d05c <tcp_input+0x28c>)
 800cf58:	6814      	ldr	r4, [r2, #0]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fc fdab 	bl	8009ab6 <lwip_htonl>
 800cf60:	4603      	mov	r3, r0
 800cf62:	6063      	str	r3, [r4, #4]
 800cf64:	6863      	ldr	r3, [r4, #4]
 800cf66:	4a45      	ldr	r2, [pc, #276]	; (800d07c <tcp_input+0x2ac>)
 800cf68:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cf6a:	4b3c      	ldr	r3, [pc, #240]	; (800d05c <tcp_input+0x28c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	4a3a      	ldr	r2, [pc, #232]	; (800d05c <tcp_input+0x28c>)
 800cf72:	6814      	ldr	r4, [r2, #0]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fc fd9e 	bl	8009ab6 <lwip_htonl>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	60a3      	str	r3, [r4, #8]
 800cf7e:	68a3      	ldr	r3, [r4, #8]
 800cf80:	4a3f      	ldr	r2, [pc, #252]	; (800d080 <tcp_input+0x2b0>)
 800cf82:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cf84:	4b35      	ldr	r3, [pc, #212]	; (800d05c <tcp_input+0x28c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	89db      	ldrh	r3, [r3, #14]
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	4a33      	ldr	r2, [pc, #204]	; (800d05c <tcp_input+0x28c>)
 800cf8e:	6814      	ldr	r4, [r2, #0]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fc fd7b 	bl	8009a8c <lwip_htons>
 800cf96:	4603      	mov	r3, r0
 800cf98:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cf9a:	4b30      	ldr	r3, [pc, #192]	; (800d05c <tcp_input+0x28c>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	899b      	ldrh	r3, [r3, #12]
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fc fd72 	bl	8009a8c <lwip_htons>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	4b34      	ldr	r3, [pc, #208]	; (800d084 <tcp_input+0x2b4>)
 800cfb4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	891a      	ldrh	r2, [r3, #8]
 800cfba:	4b33      	ldr	r3, [pc, #204]	; (800d088 <tcp_input+0x2b8>)
 800cfbc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cfbe:	4b31      	ldr	r3, [pc, #196]	; (800d084 <tcp_input+0x2b4>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	f003 0303 	and.w	r3, r3, #3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00c      	beq.n	800cfe4 <tcp_input+0x214>
    tcplen++;
 800cfca:	4b2f      	ldr	r3, [pc, #188]	; (800d088 <tcp_input+0x2b8>)
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	4b2d      	ldr	r3, [pc, #180]	; (800d088 <tcp_input+0x2b8>)
 800cfd4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	891a      	ldrh	r2, [r3, #8]
 800cfda:	4b2b      	ldr	r3, [pc, #172]	; (800d088 <tcp_input+0x2b8>)
 800cfdc:	881b      	ldrh	r3, [r3, #0]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	f200 82e6 	bhi.w	800d5b0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfe8:	4b28      	ldr	r3, [pc, #160]	; (800d08c <tcp_input+0x2bc>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	61fb      	str	r3, [r7, #28]
 800cfee:	e09d      	b.n	800d12c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	7d1b      	ldrb	r3, [r3, #20]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d105      	bne.n	800d004 <tcp_input+0x234>
 800cff8:	4b15      	ldr	r3, [pc, #84]	; (800d050 <tcp_input+0x280>)
 800cffa:	22fb      	movs	r2, #251	; 0xfb
 800cffc:	4924      	ldr	r1, [pc, #144]	; (800d090 <tcp_input+0x2c0>)
 800cffe:	4816      	ldr	r0, [pc, #88]	; (800d058 <tcp_input+0x288>)
 800d000:	f008 fc8e 	bl	8015920 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	7d1b      	ldrb	r3, [r3, #20]
 800d008:	2b0a      	cmp	r3, #10
 800d00a:	d105      	bne.n	800d018 <tcp_input+0x248>
 800d00c:	4b10      	ldr	r3, [pc, #64]	; (800d050 <tcp_input+0x280>)
 800d00e:	22fc      	movs	r2, #252	; 0xfc
 800d010:	4920      	ldr	r1, [pc, #128]	; (800d094 <tcp_input+0x2c4>)
 800d012:	4811      	ldr	r0, [pc, #68]	; (800d058 <tcp_input+0x288>)
 800d014:	f008 fc84 	bl	8015920 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	7d1b      	ldrb	r3, [r3, #20]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d105      	bne.n	800d02c <tcp_input+0x25c>
 800d020:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <tcp_input+0x280>)
 800d022:	22fd      	movs	r2, #253	; 0xfd
 800d024:	491c      	ldr	r1, [pc, #112]	; (800d098 <tcp_input+0x2c8>)
 800d026:	480c      	ldr	r0, [pc, #48]	; (800d058 <tcp_input+0x288>)
 800d028:	f008 fc7a 	bl	8015920 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	7a1b      	ldrb	r3, [r3, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d033      	beq.n	800d09c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	7a1a      	ldrb	r2, [r3, #8]
 800d038:	4b09      	ldr	r3, [pc, #36]	; (800d060 <tcp_input+0x290>)
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d040:	3301      	adds	r3, #1
 800d042:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d044:	429a      	cmp	r2, r3
 800d046:	d029      	beq.n	800d09c <tcp_input+0x2cc>
      prev = pcb;
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	61bb      	str	r3, [r7, #24]
      continue;
 800d04c:	e06b      	b.n	800d126 <tcp_input+0x356>
 800d04e:	bf00      	nop
 800d050:	0801817c 	.word	0x0801817c
 800d054:	080181b0 	.word	0x080181b0
 800d058:	080181c8 	.word	0x080181c8
 800d05c:	2000b058 	.word	0x2000b058
 800d060:	200058e0 	.word	0x200058e0
 800d064:	2000b05c 	.word	0x2000b05c
 800d068:	2000b060 	.word	0x2000b060
 800d06c:	2000b05e 	.word	0x2000b05e
 800d070:	080181f0 	.word	0x080181f0
 800d074:	08018200 	.word	0x08018200
 800d078:	0801820c 	.word	0x0801820c
 800d07c:	2000b068 	.word	0x2000b068
 800d080:	2000b06c 	.word	0x2000b06c
 800d084:	2000b074 	.word	0x2000b074
 800d088:	2000b072 	.word	0x2000b072
 800d08c:	2000b03c 	.word	0x2000b03c
 800d090:	0801822c 	.word	0x0801822c
 800d094:	08018254 	.word	0x08018254
 800d098:	08018280 	.word	0x08018280
    }

    if (pcb->remote_port == tcphdr->src &&
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	8b1a      	ldrh	r2, [r3, #24]
 800d0a0:	4b72      	ldr	r3, [pc, #456]	; (800d26c <tcp_input+0x49c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	881b      	ldrh	r3, [r3, #0]
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d13a      	bne.n	800d122 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	8ada      	ldrh	r2, [r3, #22]
 800d0b0:	4b6e      	ldr	r3, [pc, #440]	; (800d26c <tcp_input+0x49c>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	885b      	ldrh	r3, [r3, #2]
 800d0b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d132      	bne.n	800d122 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	4b6b      	ldr	r3, [pc, #428]	; (800d270 <tcp_input+0x4a0>)
 800d0c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d12c      	bne.n	800d122 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	4b68      	ldr	r3, [pc, #416]	; (800d270 <tcp_input+0x4a0>)
 800d0ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d126      	bne.n	800d122 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	69fa      	ldr	r2, [r7, #28]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d106      	bne.n	800d0ec <tcp_input+0x31c>
 800d0de:	4b65      	ldr	r3, [pc, #404]	; (800d274 <tcp_input+0x4a4>)
 800d0e0:	f240 120d 	movw	r2, #269	; 0x10d
 800d0e4:	4964      	ldr	r1, [pc, #400]	; (800d278 <tcp_input+0x4a8>)
 800d0e6:	4865      	ldr	r0, [pc, #404]	; (800d27c <tcp_input+0x4ac>)
 800d0e8:	f008 fc1a 	bl	8015920 <iprintf>
      if (prev != NULL) {
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00a      	beq.n	800d108 <tcp_input+0x338>
        prev->next = pcb->next;
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	68da      	ldr	r2, [r3, #12]
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d0fa:	4b61      	ldr	r3, [pc, #388]	; (800d280 <tcp_input+0x4b0>)
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d102:	4a5f      	ldr	r2, [pc, #380]	; (800d280 <tcp_input+0x4b0>)
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	69fa      	ldr	r2, [r7, #28]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d111      	bne.n	800d136 <tcp_input+0x366>
 800d112:	4b58      	ldr	r3, [pc, #352]	; (800d274 <tcp_input+0x4a4>)
 800d114:	f240 1215 	movw	r2, #277	; 0x115
 800d118:	495a      	ldr	r1, [pc, #360]	; (800d284 <tcp_input+0x4b4>)
 800d11a:	4858      	ldr	r0, [pc, #352]	; (800d27c <tcp_input+0x4ac>)
 800d11c:	f008 fc00 	bl	8015920 <iprintf>
      break;
 800d120:	e009      	b.n	800d136 <tcp_input+0x366>
    }
    prev = pcb;
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	61fb      	str	r3, [r7, #28]
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f47f af5e 	bne.w	800cff0 <tcp_input+0x220>
 800d134:	e000      	b.n	800d138 <tcp_input+0x368>
      break;
 800d136:	bf00      	nop
  }

  if (pcb == NULL) {
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f040 80aa 	bne.w	800d294 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d140:	4b51      	ldr	r3, [pc, #324]	; (800d288 <tcp_input+0x4b8>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	61fb      	str	r3, [r7, #28]
 800d146:	e03f      	b.n	800d1c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	7d1b      	ldrb	r3, [r3, #20]
 800d14c:	2b0a      	cmp	r3, #10
 800d14e:	d006      	beq.n	800d15e <tcp_input+0x38e>
 800d150:	4b48      	ldr	r3, [pc, #288]	; (800d274 <tcp_input+0x4a4>)
 800d152:	f240 121f 	movw	r2, #287	; 0x11f
 800d156:	494d      	ldr	r1, [pc, #308]	; (800d28c <tcp_input+0x4bc>)
 800d158:	4848      	ldr	r0, [pc, #288]	; (800d27c <tcp_input+0x4ac>)
 800d15a:	f008 fbe1 	bl	8015920 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	7a1b      	ldrb	r3, [r3, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d009      	beq.n	800d17a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	7a1a      	ldrb	r2, [r3, #8]
 800d16a:	4b41      	ldr	r3, [pc, #260]	; (800d270 <tcp_input+0x4a0>)
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d172:	3301      	adds	r3, #1
 800d174:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d176:	429a      	cmp	r2, r3
 800d178:	d122      	bne.n	800d1c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	8b1a      	ldrh	r2, [r3, #24]
 800d17e:	4b3b      	ldr	r3, [pc, #236]	; (800d26c <tcp_input+0x49c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	b29b      	uxth	r3, r3
 800d186:	429a      	cmp	r2, r3
 800d188:	d11b      	bne.n	800d1c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	8ada      	ldrh	r2, [r3, #22]
 800d18e:	4b37      	ldr	r3, [pc, #220]	; (800d26c <tcp_input+0x49c>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	885b      	ldrh	r3, [r3, #2]
 800d194:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d196:	429a      	cmp	r2, r3
 800d198:	d113      	bne.n	800d1c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	4b34      	ldr	r3, [pc, #208]	; (800d270 <tcp_input+0x4a0>)
 800d1a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d10d      	bne.n	800d1c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	4b31      	ldr	r3, [pc, #196]	; (800d270 <tcp_input+0x4a0>)
 800d1ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d107      	bne.n	800d1c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d1b2:	69f8      	ldr	r0, [r7, #28]
 800d1b4:	f000 fb56 	bl	800d864 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7fd ffd1 	bl	800b160 <pbuf_free>
        return;
 800d1be:	e1fd      	b.n	800d5bc <tcp_input+0x7ec>
        continue;
 800d1c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	61fb      	str	r3, [r7, #28]
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1bc      	bne.n	800d148 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1d2:	4b2f      	ldr	r3, [pc, #188]	; (800d290 <tcp_input+0x4c0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	617b      	str	r3, [r7, #20]
 800d1d8:	e02a      	b.n	800d230 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	7a1b      	ldrb	r3, [r3, #8]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00c      	beq.n	800d1fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	7a1a      	ldrb	r2, [r3, #8]
 800d1e6:	4b22      	ldr	r3, [pc, #136]	; (800d270 <tcp_input+0x4a0>)
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d002      	beq.n	800d1fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	61bb      	str	r3, [r7, #24]
        continue;
 800d1fa:	e016      	b.n	800d22a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	8ada      	ldrh	r2, [r3, #22]
 800d200:	4b1a      	ldr	r3, [pc, #104]	; (800d26c <tcp_input+0x49c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	885b      	ldrh	r3, [r3, #2]
 800d206:	b29b      	uxth	r3, r3
 800d208:	429a      	cmp	r2, r3
 800d20a:	d10c      	bne.n	800d226 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	4b17      	ldr	r3, [pc, #92]	; (800d270 <tcp_input+0x4a0>)
 800d212:	695b      	ldr	r3, [r3, #20]
 800d214:	429a      	cmp	r2, r3
 800d216:	d00f      	beq.n	800d238 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00d      	beq.n	800d23a <tcp_input+0x46a>
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d009      	beq.n	800d23a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	617b      	str	r3, [r7, #20]
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1d1      	bne.n	800d1da <tcp_input+0x40a>
 800d236:	e000      	b.n	800d23a <tcp_input+0x46a>
            break;
 800d238:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d029      	beq.n	800d294 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	68da      	ldr	r2, [r3, #12]
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d24e:	4b10      	ldr	r3, [pc, #64]	; (800d290 <tcp_input+0x4c0>)
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d256:	4a0e      	ldr	r2, [pc, #56]	; (800d290 <tcp_input+0x4c0>)
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d25c:	6978      	ldr	r0, [r7, #20]
 800d25e:	f000 fa03 	bl	800d668 <tcp_listen_input>
      }
      pbuf_free(p);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7fd ff7c 	bl	800b160 <pbuf_free>
      return;
 800d268:	e1a8      	b.n	800d5bc <tcp_input+0x7ec>
 800d26a:	bf00      	nop
 800d26c:	2000b058 	.word	0x2000b058
 800d270:	200058e0 	.word	0x200058e0
 800d274:	0801817c 	.word	0x0801817c
 800d278:	080182a8 	.word	0x080182a8
 800d27c:	080181c8 	.word	0x080181c8
 800d280:	2000b03c 	.word	0x2000b03c
 800d284:	080182d4 	.word	0x080182d4
 800d288:	2000b040 	.word	0x2000b040
 800d28c:	08018300 	.word	0x08018300
 800d290:	2000b038 	.word	0x2000b038
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	2b00      	cmp	r3, #0
 800d298:	f000 8158 	beq.w	800d54c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d29c:	4b95      	ldr	r3, [pc, #596]	; (800d4f4 <tcp_input+0x724>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	891a      	ldrh	r2, [r3, #8]
 800d2a6:	4b93      	ldr	r3, [pc, #588]	; (800d4f4 <tcp_input+0x724>)
 800d2a8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d2aa:	4a92      	ldr	r2, [pc, #584]	; (800d4f4 <tcp_input+0x724>)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d2b0:	4b91      	ldr	r3, [pc, #580]	; (800d4f8 <tcp_input+0x728>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a8f      	ldr	r2, [pc, #572]	; (800d4f4 <tcp_input+0x724>)
 800d2b6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d2b8:	4b90      	ldr	r3, [pc, #576]	; (800d4fc <tcp_input+0x72c>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d2be:	4b90      	ldr	r3, [pc, #576]	; (800d500 <tcp_input+0x730>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d2c4:	4b8f      	ldr	r3, [pc, #572]	; (800d504 <tcp_input+0x734>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d2ca:	4b8f      	ldr	r3, [pc, #572]	; (800d508 <tcp_input+0x738>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	f003 0308 	and.w	r3, r3, #8
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d006      	beq.n	800d2e4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7b5b      	ldrb	r3, [r3, #13]
 800d2da:	f043 0301 	orr.w	r3, r3, #1
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d017      	beq.n	800d31c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d2ec:	69f8      	ldr	r0, [r7, #28]
 800d2ee:	f7ff f929 	bl	800c544 <tcp_process_refused_data>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	f113 0f0d 	cmn.w	r3, #13
 800d2f8:	d007      	beq.n	800d30a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00c      	beq.n	800d31c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d302:	4b82      	ldr	r3, [pc, #520]	; (800d50c <tcp_input+0x73c>)
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d008      	beq.n	800d31c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f040 80e3 	bne.w	800d4da <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d314:	69f8      	ldr	r0, [r7, #28]
 800d316:	f003 f9ad 	bl	8010674 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d31a:	e0de      	b.n	800d4da <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d31c:	4a7c      	ldr	r2, [pc, #496]	; (800d510 <tcp_input+0x740>)
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d322:	69f8      	ldr	r0, [r7, #28]
 800d324:	f000 fb18 	bl	800d958 <tcp_process>
 800d328:	4603      	mov	r3, r0
 800d32a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d32c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d330:	f113 0f0d 	cmn.w	r3, #13
 800d334:	f000 80d3 	beq.w	800d4de <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d338:	4b71      	ldr	r3, [pc, #452]	; (800d500 <tcp_input+0x730>)
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	f003 0308 	and.w	r3, r3, #8
 800d340:	2b00      	cmp	r3, #0
 800d342:	d015      	beq.n	800d370 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d008      	beq.n	800d360 <tcp_input+0x590>
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d354:	69fa      	ldr	r2, [r7, #28]
 800d356:	6912      	ldr	r2, [r2, #16]
 800d358:	f06f 010d 	mvn.w	r1, #13
 800d35c:	4610      	mov	r0, r2
 800d35e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d360:	69f9      	ldr	r1, [r7, #28]
 800d362:	486c      	ldr	r0, [pc, #432]	; (800d514 <tcp_input+0x744>)
 800d364:	f7ff fbbc 	bl	800cae0 <tcp_pcb_remove>
        tcp_free(pcb);
 800d368:	69f8      	ldr	r0, [r7, #28]
 800d36a:	f7fe f9a9 	bl	800b6c0 <tcp_free>
 800d36e:	e0da      	b.n	800d526 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d374:	4b63      	ldr	r3, [pc, #396]	; (800d504 <tcp_input+0x734>)
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d01d      	beq.n	800d3b8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d37c:	4b61      	ldr	r3, [pc, #388]	; (800d504 <tcp_input+0x734>)
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00a      	beq.n	800d3a2 <tcp_input+0x5d2>
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d392:	69fa      	ldr	r2, [r7, #28]
 800d394:	6910      	ldr	r0, [r2, #16]
 800d396:	89fa      	ldrh	r2, [r7, #14]
 800d398:	69f9      	ldr	r1, [r7, #28]
 800d39a:	4798      	blx	r3
 800d39c:	4603      	mov	r3, r0
 800d39e:	74fb      	strb	r3, [r7, #19]
 800d3a0:	e001      	b.n	800d3a6 <tcp_input+0x5d6>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d3a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3aa:	f113 0f0d 	cmn.w	r3, #13
 800d3ae:	f000 8098 	beq.w	800d4e2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d3b2:	4b54      	ldr	r3, [pc, #336]	; (800d504 <tcp_input+0x734>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d3b8:	69f8      	ldr	r0, [r7, #28]
 800d3ba:	f000 f915 	bl	800d5e8 <tcp_input_delayed_close>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f040 8090 	bne.w	800d4e6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d3c6:	4b4d      	ldr	r3, [pc, #308]	; (800d4fc <tcp_input+0x72c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d041      	beq.n	800d452 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d006      	beq.n	800d3e4 <tcp_input+0x614>
 800d3d6:	4b50      	ldr	r3, [pc, #320]	; (800d518 <tcp_input+0x748>)
 800d3d8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d3dc:	494f      	ldr	r1, [pc, #316]	; (800d51c <tcp_input+0x74c>)
 800d3de:	4850      	ldr	r0, [pc, #320]	; (800d520 <tcp_input+0x750>)
 800d3e0:	f008 fa9e 	bl	8015920 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	8b5b      	ldrh	r3, [r3, #26]
 800d3e8:	f003 0310 	and.w	r3, r3, #16
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d008      	beq.n	800d402 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d3f0:	4b42      	ldr	r3, [pc, #264]	; (800d4fc <tcp_input+0x72c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fd feb3 	bl	800b160 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d3fa:	69f8      	ldr	r0, [r7, #28]
 800d3fc:	f7fe fc48 	bl	800bc90 <tcp_abort>
            goto aborted;
 800d400:	e091      	b.n	800d526 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00c      	beq.n	800d426 <tcp_input+0x656>
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	6918      	ldr	r0, [r3, #16]
 800d416:	4b39      	ldr	r3, [pc, #228]	; (800d4fc <tcp_input+0x72c>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	2300      	movs	r3, #0
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	47a0      	blx	r4
 800d420:	4603      	mov	r3, r0
 800d422:	74fb      	strb	r3, [r7, #19]
 800d424:	e008      	b.n	800d438 <tcp_input+0x668>
 800d426:	4b35      	ldr	r3, [pc, #212]	; (800d4fc <tcp_input+0x72c>)
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	2300      	movs	r3, #0
 800d42c:	69f9      	ldr	r1, [r7, #28]
 800d42e:	2000      	movs	r0, #0
 800d430:	f7ff f95e 	bl	800c6f0 <tcp_recv_null>
 800d434:	4603      	mov	r3, r0
 800d436:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d438:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d43c:	f113 0f0d 	cmn.w	r3, #13
 800d440:	d053      	beq.n	800d4ea <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d442:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d44a:	4b2c      	ldr	r3, [pc, #176]	; (800d4fc <tcp_input+0x72c>)
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d452:	4b2b      	ldr	r3, [pc, #172]	; (800d500 <tcp_input+0x730>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	f003 0320 	and.w	r3, r3, #32
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d030      	beq.n	800d4c0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d462:	2b00      	cmp	r3, #0
 800d464:	d009      	beq.n	800d47a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d46a:	7b5a      	ldrb	r2, [r3, #13]
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d470:	f042 0220 	orr.w	r2, r2, #32
 800d474:	b2d2      	uxtb	r2, r2
 800d476:	735a      	strb	r2, [r3, #13]
 800d478:	e022      	b.n	800d4c0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d47e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d482:	d005      	beq.n	800d490 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d488:	3301      	adds	r3, #1
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00b      	beq.n	800d4b2 <tcp_input+0x6e2>
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	6918      	ldr	r0, [r3, #16]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	69f9      	ldr	r1, [r7, #28]
 800d4aa:	47a0      	blx	r4
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	74fb      	strb	r3, [r7, #19]
 800d4b0:	e001      	b.n	800d4b6 <tcp_input+0x6e6>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d4b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4ba:	f113 0f0d 	cmn.w	r3, #13
 800d4be:	d016      	beq.n	800d4ee <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d4c0:	4b13      	ldr	r3, [pc, #76]	; (800d510 <tcp_input+0x740>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d4c6:	69f8      	ldr	r0, [r7, #28]
 800d4c8:	f000 f88e 	bl	800d5e8 <tcp_input_delayed_close>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d128      	bne.n	800d524 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d4d2:	69f8      	ldr	r0, [r7, #28]
 800d4d4:	f002 fac8 	bl	800fa68 <tcp_output>
 800d4d8:	e025      	b.n	800d526 <tcp_input+0x756>
        goto aborted;
 800d4da:	bf00      	nop
 800d4dc:	e023      	b.n	800d526 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d4de:	bf00      	nop
 800d4e0:	e021      	b.n	800d526 <tcp_input+0x756>
              goto aborted;
 800d4e2:	bf00      	nop
 800d4e4:	e01f      	b.n	800d526 <tcp_input+0x756>
          goto aborted;
 800d4e6:	bf00      	nop
 800d4e8:	e01d      	b.n	800d526 <tcp_input+0x756>
            goto aborted;
 800d4ea:	bf00      	nop
 800d4ec:	e01b      	b.n	800d526 <tcp_input+0x756>
              goto aborted;
 800d4ee:	bf00      	nop
 800d4f0:	e019      	b.n	800d526 <tcp_input+0x756>
 800d4f2:	bf00      	nop
 800d4f4:	2000b048 	.word	0x2000b048
 800d4f8:	2000b058 	.word	0x2000b058
 800d4fc:	2000b078 	.word	0x2000b078
 800d500:	2000b075 	.word	0x2000b075
 800d504:	2000b070 	.word	0x2000b070
 800d508:	2000b074 	.word	0x2000b074
 800d50c:	2000b072 	.word	0x2000b072
 800d510:	2000b07c 	.word	0x2000b07c
 800d514:	2000b03c 	.word	0x2000b03c
 800d518:	0801817c 	.word	0x0801817c
 800d51c:	08018330 	.word	0x08018330
 800d520:	080181c8 	.word	0x080181c8
          goto aborted;
 800d524:	bf00      	nop
    tcp_input_pcb = NULL;
 800d526:	4b27      	ldr	r3, [pc, #156]	; (800d5c4 <tcp_input+0x7f4>)
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d52c:	4b26      	ldr	r3, [pc, #152]	; (800d5c8 <tcp_input+0x7f8>)
 800d52e:	2200      	movs	r2, #0
 800d530:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d532:	4b26      	ldr	r3, [pc, #152]	; (800d5cc <tcp_input+0x7fc>)
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d03f      	beq.n	800d5ba <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d53a:	4b24      	ldr	r3, [pc, #144]	; (800d5cc <tcp_input+0x7fc>)
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fd fe0e 	bl	800b160 <pbuf_free>
      inseg.p = NULL;
 800d544:	4b21      	ldr	r3, [pc, #132]	; (800d5cc <tcp_input+0x7fc>)
 800d546:	2200      	movs	r2, #0
 800d548:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d54a:	e036      	b.n	800d5ba <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d54c:	4b20      	ldr	r3, [pc, #128]	; (800d5d0 <tcp_input+0x800>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	899b      	ldrh	r3, [r3, #12]
 800d552:	b29b      	uxth	r3, r3
 800d554:	4618      	mov	r0, r3
 800d556:	f7fc fa99 	bl	8009a8c <lwip_htons>
 800d55a:	4603      	mov	r3, r0
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	f003 0304 	and.w	r3, r3, #4
 800d562:	2b00      	cmp	r3, #0
 800d564:	d118      	bne.n	800d598 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d566:	4b1b      	ldr	r3, [pc, #108]	; (800d5d4 <tcp_input+0x804>)
 800d568:	6819      	ldr	r1, [r3, #0]
 800d56a:	4b1b      	ldr	r3, [pc, #108]	; (800d5d8 <tcp_input+0x808>)
 800d56c:	881b      	ldrh	r3, [r3, #0]
 800d56e:	461a      	mov	r2, r3
 800d570:	4b1a      	ldr	r3, [pc, #104]	; (800d5dc <tcp_input+0x80c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d576:	4b16      	ldr	r3, [pc, #88]	; (800d5d0 <tcp_input+0x800>)
 800d578:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d57a:	885b      	ldrh	r3, [r3, #2]
 800d57c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d57e:	4a14      	ldr	r2, [pc, #80]	; (800d5d0 <tcp_input+0x800>)
 800d580:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d582:	8812      	ldrh	r2, [r2, #0]
 800d584:	b292      	uxth	r2, r2
 800d586:	9202      	str	r2, [sp, #8]
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	4b15      	ldr	r3, [pc, #84]	; (800d5e0 <tcp_input+0x810>)
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	4b15      	ldr	r3, [pc, #84]	; (800d5e4 <tcp_input+0x814>)
 800d590:	4602      	mov	r2, r0
 800d592:	2000      	movs	r0, #0
 800d594:	f003 f81c 	bl	80105d0 <tcp_rst>
    pbuf_free(p);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7fd fde1 	bl	800b160 <pbuf_free>
  return;
 800d59e:	e00c      	b.n	800d5ba <tcp_input+0x7ea>
    goto dropped;
 800d5a0:	bf00      	nop
 800d5a2:	e006      	b.n	800d5b2 <tcp_input+0x7e2>
    goto dropped;
 800d5a4:	bf00      	nop
 800d5a6:	e004      	b.n	800d5b2 <tcp_input+0x7e2>
    goto dropped;
 800d5a8:	bf00      	nop
 800d5aa:	e002      	b.n	800d5b2 <tcp_input+0x7e2>
      goto dropped;
 800d5ac:	bf00      	nop
 800d5ae:	e000      	b.n	800d5b2 <tcp_input+0x7e2>
      goto dropped;
 800d5b0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7fd fdd4 	bl	800b160 <pbuf_free>
 800d5b8:	e000      	b.n	800d5bc <tcp_input+0x7ec>
  return;
 800d5ba:	bf00      	nop
}
 800d5bc:	3724      	adds	r7, #36	; 0x24
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd90      	pop	{r4, r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	2000b07c 	.word	0x2000b07c
 800d5c8:	2000b078 	.word	0x2000b078
 800d5cc:	2000b048 	.word	0x2000b048
 800d5d0:	2000b058 	.word	0x2000b058
 800d5d4:	2000b06c 	.word	0x2000b06c
 800d5d8:	2000b072 	.word	0x2000b072
 800d5dc:	2000b068 	.word	0x2000b068
 800d5e0:	200058f0 	.word	0x200058f0
 800d5e4:	200058f4 	.word	0x200058f4

0800d5e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d106      	bne.n	800d604 <tcp_input_delayed_close+0x1c>
 800d5f6:	4b17      	ldr	r3, [pc, #92]	; (800d654 <tcp_input_delayed_close+0x6c>)
 800d5f8:	f240 225a 	movw	r2, #602	; 0x25a
 800d5fc:	4916      	ldr	r1, [pc, #88]	; (800d658 <tcp_input_delayed_close+0x70>)
 800d5fe:	4817      	ldr	r0, [pc, #92]	; (800d65c <tcp_input_delayed_close+0x74>)
 800d600:	f008 f98e 	bl	8015920 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d604:	4b16      	ldr	r3, [pc, #88]	; (800d660 <tcp_input_delayed_close+0x78>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	f003 0310 	and.w	r3, r3, #16
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d01c      	beq.n	800d64a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	8b5b      	ldrh	r3, [r3, #26]
 800d614:	f003 0310 	and.w	r3, r3, #16
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10d      	bne.n	800d638 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d622:	2b00      	cmp	r3, #0
 800d624:	d008      	beq.n	800d638 <tcp_input_delayed_close+0x50>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	6912      	ldr	r2, [r2, #16]
 800d630:	f06f 010e 	mvn.w	r1, #14
 800d634:	4610      	mov	r0, r2
 800d636:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d638:	6879      	ldr	r1, [r7, #4]
 800d63a:	480a      	ldr	r0, [pc, #40]	; (800d664 <tcp_input_delayed_close+0x7c>)
 800d63c:	f7ff fa50 	bl	800cae0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7fe f83d 	bl	800b6c0 <tcp_free>
    return 1;
 800d646:	2301      	movs	r3, #1
 800d648:	e000      	b.n	800d64c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d64a:	2300      	movs	r3, #0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	0801817c 	.word	0x0801817c
 800d658:	0801834c 	.word	0x0801834c
 800d65c:	080181c8 	.word	0x080181c8
 800d660:	2000b075 	.word	0x2000b075
 800d664:	2000b03c 	.word	0x2000b03c

0800d668 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d668:	b590      	push	{r4, r7, lr}
 800d66a:	b08b      	sub	sp, #44	; 0x2c
 800d66c:	af04      	add	r7, sp, #16
 800d66e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d670:	4b6f      	ldr	r3, [pc, #444]	; (800d830 <tcp_listen_input+0x1c8>)
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	f003 0304 	and.w	r3, r3, #4
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f040 80d2 	bne.w	800d822 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d106      	bne.n	800d692 <tcp_listen_input+0x2a>
 800d684:	4b6b      	ldr	r3, [pc, #428]	; (800d834 <tcp_listen_input+0x1cc>)
 800d686:	f240 2281 	movw	r2, #641	; 0x281
 800d68a:	496b      	ldr	r1, [pc, #428]	; (800d838 <tcp_listen_input+0x1d0>)
 800d68c:	486b      	ldr	r0, [pc, #428]	; (800d83c <tcp_listen_input+0x1d4>)
 800d68e:	f008 f947 	bl	8015920 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d692:	4b67      	ldr	r3, [pc, #412]	; (800d830 <tcp_listen_input+0x1c8>)
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	f003 0310 	and.w	r3, r3, #16
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d019      	beq.n	800d6d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d69e:	4b68      	ldr	r3, [pc, #416]	; (800d840 <tcp_listen_input+0x1d8>)
 800d6a0:	6819      	ldr	r1, [r3, #0]
 800d6a2:	4b68      	ldr	r3, [pc, #416]	; (800d844 <tcp_listen_input+0x1dc>)
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	4b67      	ldr	r3, [pc, #412]	; (800d848 <tcp_listen_input+0x1e0>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d6ae:	4b67      	ldr	r3, [pc, #412]	; (800d84c <tcp_listen_input+0x1e4>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6b2:	885b      	ldrh	r3, [r3, #2]
 800d6b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d6b6:	4a65      	ldr	r2, [pc, #404]	; (800d84c <tcp_listen_input+0x1e4>)
 800d6b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6ba:	8812      	ldrh	r2, [r2, #0]
 800d6bc:	b292      	uxth	r2, r2
 800d6be:	9202      	str	r2, [sp, #8]
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	4b63      	ldr	r3, [pc, #396]	; (800d850 <tcp_listen_input+0x1e8>)
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	4b63      	ldr	r3, [pc, #396]	; (800d854 <tcp_listen_input+0x1ec>)
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f002 ff80 	bl	80105d0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d6d0:	e0a9      	b.n	800d826 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d6d2:	4b57      	ldr	r3, [pc, #348]	; (800d830 <tcp_listen_input+0x1c8>)
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	f003 0302 	and.w	r3, r3, #2
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 80a3 	beq.w	800d826 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	7d5b      	ldrb	r3, [r3, #21]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7ff f927 	bl	800c938 <tcp_alloc>
 800d6ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d111      	bne.n	800d716 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00a      	beq.n	800d710 <tcp_listen_input+0xa8>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	699b      	ldr	r3, [r3, #24]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	6910      	ldr	r0, [r2, #16]
 800d702:	f04f 32ff 	mov.w	r2, #4294967295
 800d706:	2100      	movs	r1, #0
 800d708:	4798      	blx	r3
 800d70a:	4603      	mov	r3, r0
 800d70c:	73bb      	strb	r3, [r7, #14]
      return;
 800d70e:	e08b      	b.n	800d828 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d710:	23f0      	movs	r3, #240	; 0xf0
 800d712:	73bb      	strb	r3, [r7, #14]
      return;
 800d714:	e088      	b.n	800d828 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d716:	4b50      	ldr	r3, [pc, #320]	; (800d858 <tcp_listen_input+0x1f0>)
 800d718:	695a      	ldr	r2, [r3, #20]
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d71e:	4b4e      	ldr	r3, [pc, #312]	; (800d858 <tcp_listen_input+0x1f0>)
 800d720:	691a      	ldr	r2, [r3, #16]
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	8ada      	ldrh	r2, [r3, #22]
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d72e:	4b47      	ldr	r3, [pc, #284]	; (800d84c <tcp_listen_input+0x1e4>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	b29a      	uxth	r2, r3
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	2203      	movs	r2, #3
 800d73e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d740:	4b41      	ldr	r3, [pc, #260]	; (800d848 <tcp_listen_input+0x1e0>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	1c5a      	adds	r2, r3, #1
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d752:	6978      	ldr	r0, [r7, #20]
 800d754:	f7ff fa58 	bl	800cc08 <tcp_next_iss>
 800d758:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	693a      	ldr	r2, [r7, #16]
 800d764:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	693a      	ldr	r2, [r7, #16]
 800d76a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d772:	4b35      	ldr	r3, [pc, #212]	; (800d848 <tcp_listen_input+0x1e0>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	1e5a      	subs	r2, r3, #1
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	691a      	ldr	r2, [r3, #16]
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	7a5b      	ldrb	r3, [r3, #9]
 800d78e:	f003 030c 	and.w	r3, r3, #12
 800d792:	b2da      	uxtb	r2, r3
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	7a1a      	ldrb	r2, [r3, #8]
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d7a0:	4b2e      	ldr	r3, [pc, #184]	; (800d85c <tcp_listen_input+0x1f4>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	60da      	str	r2, [r3, #12]
 800d7a8:	4a2c      	ldr	r2, [pc, #176]	; (800d85c <tcp_listen_input+0x1f4>)
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	f003 f8d1 	bl	8010954 <tcp_timer_needed>
 800d7b2:	4b2b      	ldr	r3, [pc, #172]	; (800d860 <tcp_listen_input+0x1f8>)
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d7b8:	6978      	ldr	r0, [r7, #20]
 800d7ba:	f001 fd8f 	bl	800f2dc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d7be:	4b23      	ldr	r3, [pc, #140]	; (800d84c <tcp_listen_input+0x1e4>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	89db      	ldrh	r3, [r3, #14]
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	3304      	adds	r3, #4
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f006 fe2f 	bl	8014444 <ip4_route>
 800d7e6:	4601      	mov	r1, r0
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f7ff fa30 	bl	800cc54 <tcp_eff_send_mss_netif>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d7fc:	2112      	movs	r1, #18
 800d7fe:	6978      	ldr	r0, [r7, #20]
 800d800:	f002 f844 	bl	800f88c <tcp_enqueue_flags>
 800d804:	4603      	mov	r3, r0
 800d806:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d810:	2100      	movs	r1, #0
 800d812:	6978      	ldr	r0, [r7, #20]
 800d814:	f7fe f97e 	bl	800bb14 <tcp_abandon>
      return;
 800d818:	e006      	b.n	800d828 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d81a:	6978      	ldr	r0, [r7, #20]
 800d81c:	f002 f924 	bl	800fa68 <tcp_output>
  return;
 800d820:	e001      	b.n	800d826 <tcp_listen_input+0x1be>
    return;
 800d822:	bf00      	nop
 800d824:	e000      	b.n	800d828 <tcp_listen_input+0x1c0>
  return;
 800d826:	bf00      	nop
}
 800d828:	371c      	adds	r7, #28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd90      	pop	{r4, r7, pc}
 800d82e:	bf00      	nop
 800d830:	2000b074 	.word	0x2000b074
 800d834:	0801817c 	.word	0x0801817c
 800d838:	08018374 	.word	0x08018374
 800d83c:	080181c8 	.word	0x080181c8
 800d840:	2000b06c 	.word	0x2000b06c
 800d844:	2000b072 	.word	0x2000b072
 800d848:	2000b068 	.word	0x2000b068
 800d84c:	2000b058 	.word	0x2000b058
 800d850:	200058f0 	.word	0x200058f0
 800d854:	200058f4 	.word	0x200058f4
 800d858:	200058e0 	.word	0x200058e0
 800d85c:	2000b03c 	.word	0x2000b03c
 800d860:	2000b044 	.word	0x2000b044

0800d864 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af04      	add	r7, sp, #16
 800d86a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d86c:	4b2f      	ldr	r3, [pc, #188]	; (800d92c <tcp_timewait_input+0xc8>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	f003 0304 	and.w	r3, r3, #4
 800d874:	2b00      	cmp	r3, #0
 800d876:	d153      	bne.n	800d920 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d106      	bne.n	800d88c <tcp_timewait_input+0x28>
 800d87e:	4b2c      	ldr	r3, [pc, #176]	; (800d930 <tcp_timewait_input+0xcc>)
 800d880:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d884:	492b      	ldr	r1, [pc, #172]	; (800d934 <tcp_timewait_input+0xd0>)
 800d886:	482c      	ldr	r0, [pc, #176]	; (800d938 <tcp_timewait_input+0xd4>)
 800d888:	f008 f84a 	bl	8015920 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d88c:	4b27      	ldr	r3, [pc, #156]	; (800d92c <tcp_timewait_input+0xc8>)
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	f003 0302 	and.w	r3, r3, #2
 800d894:	2b00      	cmp	r3, #0
 800d896:	d02a      	beq.n	800d8ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d898:	4b28      	ldr	r3, [pc, #160]	; (800d93c <tcp_timewait_input+0xd8>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a0:	1ad3      	subs	r3, r2, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	db2d      	blt.n	800d902 <tcp_timewait_input+0x9e>
 800d8a6:	4b25      	ldr	r3, [pc, #148]	; (800d93c <tcp_timewait_input+0xd8>)
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ae:	6879      	ldr	r1, [r7, #4]
 800d8b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d8b2:	440b      	add	r3, r1
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	dc23      	bgt.n	800d902 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8ba:	4b21      	ldr	r3, [pc, #132]	; (800d940 <tcp_timewait_input+0xdc>)
 800d8bc:	6819      	ldr	r1, [r3, #0]
 800d8be:	4b21      	ldr	r3, [pc, #132]	; (800d944 <tcp_timewait_input+0xe0>)
 800d8c0:	881b      	ldrh	r3, [r3, #0]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	4b1d      	ldr	r3, [pc, #116]	; (800d93c <tcp_timewait_input+0xd8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8ca:	4b1f      	ldr	r3, [pc, #124]	; (800d948 <tcp_timewait_input+0xe4>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8ce:	885b      	ldrh	r3, [r3, #2]
 800d8d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8d2:	4a1d      	ldr	r2, [pc, #116]	; (800d948 <tcp_timewait_input+0xe4>)
 800d8d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8d6:	8812      	ldrh	r2, [r2, #0]
 800d8d8:	b292      	uxth	r2, r2
 800d8da:	9202      	str	r2, [sp, #8]
 800d8dc:	9301      	str	r3, [sp, #4]
 800d8de:	4b1b      	ldr	r3, [pc, #108]	; (800d94c <tcp_timewait_input+0xe8>)
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	4b1b      	ldr	r3, [pc, #108]	; (800d950 <tcp_timewait_input+0xec>)
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f002 fe72 	bl	80105d0 <tcp_rst>
      return;
 800d8ec:	e01b      	b.n	800d926 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d8ee:	4b0f      	ldr	r3, [pc, #60]	; (800d92c <tcp_timewait_input+0xc8>)
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	f003 0301 	and.w	r3, r3, #1
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d003      	beq.n	800d902 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d8fa:	4b16      	ldr	r3, [pc, #88]	; (800d954 <tcp_timewait_input+0xf0>)
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d902:	4b10      	ldr	r3, [pc, #64]	; (800d944 <tcp_timewait_input+0xe0>)
 800d904:	881b      	ldrh	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00c      	beq.n	800d924 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	8b5b      	ldrh	r3, [r3, #26]
 800d90e:	f043 0302 	orr.w	r3, r3, #2
 800d912:	b29a      	uxth	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f002 f8a5 	bl	800fa68 <tcp_output>
  }
  return;
 800d91e:	e001      	b.n	800d924 <tcp_timewait_input+0xc0>
    return;
 800d920:	bf00      	nop
 800d922:	e000      	b.n	800d926 <tcp_timewait_input+0xc2>
  return;
 800d924:	bf00      	nop
}
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	2000b074 	.word	0x2000b074
 800d930:	0801817c 	.word	0x0801817c
 800d934:	08018394 	.word	0x08018394
 800d938:	080181c8 	.word	0x080181c8
 800d93c:	2000b068 	.word	0x2000b068
 800d940:	2000b06c 	.word	0x2000b06c
 800d944:	2000b072 	.word	0x2000b072
 800d948:	2000b058 	.word	0x2000b058
 800d94c:	200058f0 	.word	0x200058f0
 800d950:	200058f4 	.word	0x200058f4
 800d954:	2000b030 	.word	0x2000b030

0800d958 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d958:	b590      	push	{r4, r7, lr}
 800d95a:	b08d      	sub	sp, #52	; 0x34
 800d95c:	af04      	add	r7, sp, #16
 800d95e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d106      	bne.n	800d97c <tcp_process+0x24>
 800d96e:	4b9d      	ldr	r3, [pc, #628]	; (800dbe4 <tcp_process+0x28c>)
 800d970:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d974:	499c      	ldr	r1, [pc, #624]	; (800dbe8 <tcp_process+0x290>)
 800d976:	489d      	ldr	r0, [pc, #628]	; (800dbec <tcp_process+0x294>)
 800d978:	f007 ffd2 	bl	8015920 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d97c:	4b9c      	ldr	r3, [pc, #624]	; (800dbf0 <tcp_process+0x298>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	f003 0304 	and.w	r3, r3, #4
 800d984:	2b00      	cmp	r3, #0
 800d986:	d04e      	beq.n	800da26 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	7d1b      	ldrb	r3, [r3, #20]
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d108      	bne.n	800d9a2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d994:	4b97      	ldr	r3, [pc, #604]	; (800dbf4 <tcp_process+0x29c>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d123      	bne.n	800d9e4 <tcp_process+0x8c>
        acceptable = 1;
 800d99c:	2301      	movs	r3, #1
 800d99e:	76fb      	strb	r3, [r7, #27]
 800d9a0:	e020      	b.n	800d9e4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9a6:	4b94      	ldr	r3, [pc, #592]	; (800dbf8 <tcp_process+0x2a0>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d102      	bne.n	800d9b4 <tcp_process+0x5c>
        acceptable = 1;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	76fb      	strb	r3, [r7, #27]
 800d9b2:	e017      	b.n	800d9e4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d9b4:	4b90      	ldr	r3, [pc, #576]	; (800dbf8 <tcp_process+0x2a0>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	db10      	blt.n	800d9e4 <tcp_process+0x8c>
 800d9c2:	4b8d      	ldr	r3, [pc, #564]	; (800dbf8 <tcp_process+0x2a0>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ca:	6879      	ldr	r1, [r7, #4]
 800d9cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d9ce:	440b      	add	r3, r1
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	dc06      	bgt.n	800d9e4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	8b5b      	ldrh	r3, [r3, #26]
 800d9da:	f043 0302 	orr.w	r3, r3, #2
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d9e4:	7efb      	ldrb	r3, [r7, #27]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d01b      	beq.n	800da22 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	7d1b      	ldrb	r3, [r3, #20]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d106      	bne.n	800da00 <tcp_process+0xa8>
 800d9f2:	4b7c      	ldr	r3, [pc, #496]	; (800dbe4 <tcp_process+0x28c>)
 800d9f4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d9f8:	4980      	ldr	r1, [pc, #512]	; (800dbfc <tcp_process+0x2a4>)
 800d9fa:	487c      	ldr	r0, [pc, #496]	; (800dbec <tcp_process+0x294>)
 800d9fc:	f007 ff90 	bl	8015920 <iprintf>
      recv_flags |= TF_RESET;
 800da00:	4b7f      	ldr	r3, [pc, #508]	; (800dc00 <tcp_process+0x2a8>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	f043 0308 	orr.w	r3, r3, #8
 800da08:	b2da      	uxtb	r2, r3
 800da0a:	4b7d      	ldr	r3, [pc, #500]	; (800dc00 <tcp_process+0x2a8>)
 800da0c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	8b5b      	ldrh	r3, [r3, #26]
 800da12:	f023 0301 	bic.w	r3, r3, #1
 800da16:	b29a      	uxth	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800da1c:	f06f 030d 	mvn.w	r3, #13
 800da20:	e37a      	b.n	800e118 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	e378      	b.n	800e118 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800da26:	4b72      	ldr	r3, [pc, #456]	; (800dbf0 <tcp_process+0x298>)
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	f003 0302 	and.w	r3, r3, #2
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d010      	beq.n	800da54 <tcp_process+0xfc>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	7d1b      	ldrb	r3, [r3, #20]
 800da36:	2b02      	cmp	r3, #2
 800da38:	d00c      	beq.n	800da54 <tcp_process+0xfc>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	7d1b      	ldrb	r3, [r3, #20]
 800da3e:	2b03      	cmp	r3, #3
 800da40:	d008      	beq.n	800da54 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	8b5b      	ldrh	r3, [r3, #26]
 800da46:	f043 0302 	orr.w	r3, r3, #2
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	e361      	b.n	800e118 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	8b5b      	ldrh	r3, [r3, #26]
 800da58:	f003 0310 	and.w	r3, r3, #16
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d103      	bne.n	800da68 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800da60:	4b68      	ldr	r3, [pc, #416]	; (800dc04 <tcp_process+0x2ac>)
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f001 fc2f 	bl	800f2dc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	7d1b      	ldrb	r3, [r3, #20]
 800da82:	3b02      	subs	r3, #2
 800da84:	2b07      	cmp	r3, #7
 800da86:	f200 8337 	bhi.w	800e0f8 <tcp_process+0x7a0>
 800da8a:	a201      	add	r2, pc, #4	; (adr r2, 800da90 <tcp_process+0x138>)
 800da8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da90:	0800dab1 	.word	0x0800dab1
 800da94:	0800dce1 	.word	0x0800dce1
 800da98:	0800de59 	.word	0x0800de59
 800da9c:	0800de83 	.word	0x0800de83
 800daa0:	0800dfa7 	.word	0x0800dfa7
 800daa4:	0800de59 	.word	0x0800de59
 800daa8:	0800e033 	.word	0x0800e033
 800daac:	0800e0c3 	.word	0x0800e0c3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dab0:	4b4f      	ldr	r3, [pc, #316]	; (800dbf0 <tcp_process+0x298>)
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	f003 0310 	and.w	r3, r3, #16
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f000 80e4 	beq.w	800dc86 <tcp_process+0x32e>
 800dabe:	4b4c      	ldr	r3, [pc, #304]	; (800dbf0 <tcp_process+0x298>)
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	f003 0302 	and.w	r3, r3, #2
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f000 80dd 	beq.w	800dc86 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	4b48      	ldr	r3, [pc, #288]	; (800dbf4 <tcp_process+0x29c>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	f040 80d5 	bne.w	800dc86 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dadc:	4b46      	ldr	r3, [pc, #280]	; (800dbf8 <tcp_process+0x2a0>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800daee:	4b41      	ldr	r3, [pc, #260]	; (800dbf4 <tcp_process+0x29c>)
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800daf6:	4b44      	ldr	r3, [pc, #272]	; (800dc08 <tcp_process+0x2b0>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	89db      	ldrh	r3, [r3, #14]
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800db10:	4b39      	ldr	r3, [pc, #228]	; (800dbf8 <tcp_process+0x2a0>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	1e5a      	subs	r2, r3, #1
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2204      	movs	r2, #4
 800db1e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	3304      	adds	r3, #4
 800db28:	4618      	mov	r0, r3
 800db2a:	f006 fc8b 	bl	8014444 <ip4_route>
 800db2e:	4601      	mov	r1, r0
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	3304      	adds	r3, #4
 800db34:	461a      	mov	r2, r3
 800db36:	4620      	mov	r0, r4
 800db38:	f7ff f88c 	bl	800cc54 <tcp_eff_send_mss_netif>
 800db3c:	4603      	mov	r3, r0
 800db3e:	461a      	mov	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db48:	009a      	lsls	r2, r3, #2
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	f241 111c 	movw	r1, #4380	; 0x111c
 800db54:	428b      	cmp	r3, r1
 800db56:	bf38      	it	cc
 800db58:	460b      	movcc	r3, r1
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d204      	bcs.n	800db68 <tcp_process+0x210>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	b29b      	uxth	r3, r3
 800db66:	e00d      	b.n	800db84 <tcp_process+0x22c>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db6c:	005b      	lsls	r3, r3, #1
 800db6e:	f241 121c 	movw	r2, #4380	; 0x111c
 800db72:	4293      	cmp	r3, r2
 800db74:	d904      	bls.n	800db80 <tcp_process+0x228>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	e001      	b.n	800db84 <tcp_process+0x22c>
 800db80:	f241 131c 	movw	r3, #4380	; 0x111c
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db90:	2b00      	cmp	r3, #0
 800db92:	d106      	bne.n	800dba2 <tcp_process+0x24a>
 800db94:	4b13      	ldr	r3, [pc, #76]	; (800dbe4 <tcp_process+0x28c>)
 800db96:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800db9a:	491c      	ldr	r1, [pc, #112]	; (800dc0c <tcp_process+0x2b4>)
 800db9c:	4813      	ldr	r0, [pc, #76]	; (800dbec <tcp_process+0x294>)
 800db9e:	f007 febf 	bl	8015920 <iprintf>
        --pcb->snd_queuelen;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d12a      	bne.n	800dc14 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d106      	bne.n	800dbd8 <tcp_process+0x280>
 800dbca:	4b06      	ldr	r3, [pc, #24]	; (800dbe4 <tcp_process+0x28c>)
 800dbcc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dbd0:	490f      	ldr	r1, [pc, #60]	; (800dc10 <tcp_process+0x2b8>)
 800dbd2:	4806      	ldr	r0, [pc, #24]	; (800dbec <tcp_process+0x294>)
 800dbd4:	f007 fea4 	bl	8015920 <iprintf>
          pcb->unsent = rseg->next;
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	66da      	str	r2, [r3, #108]	; 0x6c
 800dbe0:	e01c      	b.n	800dc1c <tcp_process+0x2c4>
 800dbe2:	bf00      	nop
 800dbe4:	0801817c 	.word	0x0801817c
 800dbe8:	080183b4 	.word	0x080183b4
 800dbec:	080181c8 	.word	0x080181c8
 800dbf0:	2000b074 	.word	0x2000b074
 800dbf4:	2000b06c 	.word	0x2000b06c
 800dbf8:	2000b068 	.word	0x2000b068
 800dbfc:	080183d0 	.word	0x080183d0
 800dc00:	2000b075 	.word	0x2000b075
 800dc04:	2000b030 	.word	0x2000b030
 800dc08:	2000b058 	.word	0x2000b058
 800dc0c:	080183f0 	.word	0x080183f0
 800dc10:	08018408 	.word	0x08018408
        } else {
          pcb->unacked = rseg->next;
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dc1c:	69f8      	ldr	r0, [r7, #28]
 800dc1e:	f7fe fd22 	bl	800c666 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d104      	bne.n	800dc34 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc30:	861a      	strh	r2, [r3, #48]	; 0x30
 800dc32:	e006      	b.n	800dc42 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00a      	beq.n	800dc62 <tcp_process+0x30a>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	6910      	ldr	r0, [r2, #16]
 800dc56:	2200      	movs	r2, #0
 800dc58:	6879      	ldr	r1, [r7, #4]
 800dc5a:	4798      	blx	r3
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	76bb      	strb	r3, [r7, #26]
 800dc60:	e001      	b.n	800dc66 <tcp_process+0x30e>
 800dc62:	2300      	movs	r3, #0
 800dc64:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dc66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dc6a:	f113 0f0d 	cmn.w	r3, #13
 800dc6e:	d102      	bne.n	800dc76 <tcp_process+0x31e>
          return ERR_ABRT;
 800dc70:	f06f 030c 	mvn.w	r3, #12
 800dc74:	e250      	b.n	800e118 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	8b5b      	ldrh	r3, [r3, #26]
 800dc7a:	f043 0302 	orr.w	r3, r3, #2
 800dc7e:	b29a      	uxth	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dc84:	e23a      	b.n	800e0fc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dc86:	4b98      	ldr	r3, [pc, #608]	; (800dee8 <tcp_process+0x590>)
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	f003 0310 	and.w	r3, r3, #16
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 8234 	beq.w	800e0fc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc94:	4b95      	ldr	r3, [pc, #596]	; (800deec <tcp_process+0x594>)
 800dc96:	6819      	ldr	r1, [r3, #0]
 800dc98:	4b95      	ldr	r3, [pc, #596]	; (800def0 <tcp_process+0x598>)
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4b95      	ldr	r3, [pc, #596]	; (800def4 <tcp_process+0x59c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dca4:	4b94      	ldr	r3, [pc, #592]	; (800def8 <tcp_process+0x5a0>)
 800dca6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dca8:	885b      	ldrh	r3, [r3, #2]
 800dcaa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcac:	4a92      	ldr	r2, [pc, #584]	; (800def8 <tcp_process+0x5a0>)
 800dcae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcb0:	8812      	ldrh	r2, [r2, #0]
 800dcb2:	b292      	uxth	r2, r2
 800dcb4:	9202      	str	r2, [sp, #8]
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	4b90      	ldr	r3, [pc, #576]	; (800defc <tcp_process+0x5a4>)
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	4b90      	ldr	r3, [pc, #576]	; (800df00 <tcp_process+0x5a8>)
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f002 fc85 	bl	80105d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dccc:	2b05      	cmp	r3, #5
 800dcce:	f200 8215 	bhi.w	800e0fc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f002 fa4f 	bl	801017c <tcp_rexmit_rto>
      break;
 800dcde:	e20d      	b.n	800e0fc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dce0:	4b81      	ldr	r3, [pc, #516]	; (800dee8 <tcp_process+0x590>)
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	f003 0310 	and.w	r3, r3, #16
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f000 80a1 	beq.w	800de30 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dcee:	4b7f      	ldr	r3, [pc, #508]	; (800deec <tcp_process+0x594>)
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcf6:	1ad3      	subs	r3, r2, r3
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	db7e      	blt.n	800ddfc <tcp_process+0x4a4>
 800dcfe:	4b7b      	ldr	r3, [pc, #492]	; (800deec <tcp_process+0x594>)
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	dc77      	bgt.n	800ddfc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2204      	movs	r2, #4
 800dd10:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d102      	bne.n	800dd20 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dd1a:	23fa      	movs	r3, #250	; 0xfa
 800dd1c:	76bb      	strb	r3, [r7, #26]
 800dd1e:	e01d      	b.n	800dd5c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d106      	bne.n	800dd38 <tcp_process+0x3e0>
 800dd2a:	4b76      	ldr	r3, [pc, #472]	; (800df04 <tcp_process+0x5ac>)
 800dd2c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800dd30:	4975      	ldr	r1, [pc, #468]	; (800df08 <tcp_process+0x5b0>)
 800dd32:	4876      	ldr	r0, [pc, #472]	; (800df0c <tcp_process+0x5b4>)
 800dd34:	f007 fdf4 	bl	8015920 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd3c:	699b      	ldr	r3, [r3, #24]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00a      	beq.n	800dd58 <tcp_process+0x400>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd46:	699b      	ldr	r3, [r3, #24]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	6910      	ldr	r0, [r2, #16]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	4798      	blx	r3
 800dd52:	4603      	mov	r3, r0
 800dd54:	76bb      	strb	r3, [r7, #26]
 800dd56:	e001      	b.n	800dd5c <tcp_process+0x404>
 800dd58:	23f0      	movs	r3, #240	; 0xf0
 800dd5a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800dd5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00a      	beq.n	800dd7a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800dd64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dd68:	f113 0f0d 	cmn.w	r3, #13
 800dd6c:	d002      	beq.n	800dd74 <tcp_process+0x41c>
              tcp_abort(pcb);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7fd ff8e 	bl	800bc90 <tcp_abort>
            }
            return ERR_ABRT;
 800dd74:	f06f 030c 	mvn.w	r3, #12
 800dd78:	e1ce      	b.n	800e118 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 fae0 	bl	800e340 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dd80:	4b63      	ldr	r3, [pc, #396]	; (800df10 <tcp_process+0x5b8>)
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d005      	beq.n	800dd94 <tcp_process+0x43c>
            recv_acked--;
 800dd88:	4b61      	ldr	r3, [pc, #388]	; (800df10 <tcp_process+0x5b8>)
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	4b5f      	ldr	r3, [pc, #380]	; (800df10 <tcp_process+0x5b8>)
 800dd92:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd98:	009a      	lsls	r2, r3, #2
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	f241 111c 	movw	r1, #4380	; 0x111c
 800dda4:	428b      	cmp	r3, r1
 800dda6:	bf38      	it	cc
 800dda8:	460b      	movcc	r3, r1
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d204      	bcs.n	800ddb8 <tcp_process+0x460>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	e00d      	b.n	800ddd4 <tcp_process+0x47c>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddbc:	005b      	lsls	r3, r3, #1
 800ddbe:	f241 121c 	movw	r2, #4380	; 0x111c
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d904      	bls.n	800ddd0 <tcp_process+0x478>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	e001      	b.n	800ddd4 <tcp_process+0x47c>
 800ddd0:	f241 131c 	movw	r3, #4380	; 0x111c
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ddda:	4b4e      	ldr	r3, [pc, #312]	; (800df14 <tcp_process+0x5bc>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	f003 0320 	and.w	r3, r3, #32
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d037      	beq.n	800de56 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	8b5b      	ldrh	r3, [r3, #26]
 800ddea:	f043 0302 	orr.w	r3, r3, #2
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2207      	movs	r2, #7
 800ddf8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ddfa:	e02c      	b.n	800de56 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddfc:	4b3b      	ldr	r3, [pc, #236]	; (800deec <tcp_process+0x594>)
 800ddfe:	6819      	ldr	r1, [r3, #0]
 800de00:	4b3b      	ldr	r3, [pc, #236]	; (800def0 <tcp_process+0x598>)
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	461a      	mov	r2, r3
 800de06:	4b3b      	ldr	r3, [pc, #236]	; (800def4 <tcp_process+0x59c>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de0c:	4b3a      	ldr	r3, [pc, #232]	; (800def8 <tcp_process+0x5a0>)
 800de0e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de10:	885b      	ldrh	r3, [r3, #2]
 800de12:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de14:	4a38      	ldr	r2, [pc, #224]	; (800def8 <tcp_process+0x5a0>)
 800de16:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de18:	8812      	ldrh	r2, [r2, #0]
 800de1a:	b292      	uxth	r2, r2
 800de1c:	9202      	str	r2, [sp, #8]
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	4b36      	ldr	r3, [pc, #216]	; (800defc <tcp_process+0x5a4>)
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	4b36      	ldr	r3, [pc, #216]	; (800df00 <tcp_process+0x5a8>)
 800de26:	4602      	mov	r2, r0
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f002 fbd1 	bl	80105d0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800de2e:	e167      	b.n	800e100 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800de30:	4b2d      	ldr	r3, [pc, #180]	; (800dee8 <tcp_process+0x590>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	f003 0302 	and.w	r3, r3, #2
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f000 8161 	beq.w	800e100 <tcp_process+0x7a8>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de42:	1e5a      	subs	r2, r3, #1
 800de44:	4b2b      	ldr	r3, [pc, #172]	; (800def4 <tcp_process+0x59c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	429a      	cmp	r2, r3
 800de4a:	f040 8159 	bne.w	800e100 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f002 f9b6 	bl	80101c0 <tcp_rexmit>
      break;
 800de54:	e154      	b.n	800e100 <tcp_process+0x7a8>
 800de56:	e153      	b.n	800e100 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 fa71 	bl	800e340 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800de5e:	4b2d      	ldr	r3, [pc, #180]	; (800df14 <tcp_process+0x5bc>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	f003 0320 	and.w	r3, r3, #32
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 814c 	beq.w	800e104 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	8b5b      	ldrh	r3, [r3, #26]
 800de70:	f043 0302 	orr.w	r3, r3, #2
 800de74:	b29a      	uxth	r2, r3
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2207      	movs	r2, #7
 800de7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de80:	e140      	b.n	800e104 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fa5c 	bl	800e340 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800de88:	4b22      	ldr	r3, [pc, #136]	; (800df14 <tcp_process+0x5bc>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	f003 0320 	and.w	r3, r3, #32
 800de90:	2b00      	cmp	r3, #0
 800de92:	d071      	beq.n	800df78 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800de94:	4b14      	ldr	r3, [pc, #80]	; (800dee8 <tcp_process+0x590>)
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	f003 0310 	and.w	r3, r3, #16
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d060      	beq.n	800df62 <tcp_process+0x60a>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dea4:	4b11      	ldr	r3, [pc, #68]	; (800deec <tcp_process+0x594>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d15a      	bne.n	800df62 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d156      	bne.n	800df62 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	8b5b      	ldrh	r3, [r3, #26]
 800deb8:	f043 0302 	orr.w	r3, r3, #2
 800debc:	b29a      	uxth	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7fe fdbc 	bl	800ca40 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dec8:	4b13      	ldr	r3, [pc, #76]	; (800df18 <tcp_process+0x5c0>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d105      	bne.n	800dede <tcp_process+0x586>
 800ded2:	4b11      	ldr	r3, [pc, #68]	; (800df18 <tcp_process+0x5c0>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	4a0f      	ldr	r2, [pc, #60]	; (800df18 <tcp_process+0x5c0>)
 800deda:	6013      	str	r3, [r2, #0]
 800dedc:	e02e      	b.n	800df3c <tcp_process+0x5e4>
 800dede:	4b0e      	ldr	r3, [pc, #56]	; (800df18 <tcp_process+0x5c0>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	617b      	str	r3, [r7, #20]
 800dee4:	e027      	b.n	800df36 <tcp_process+0x5de>
 800dee6:	bf00      	nop
 800dee8:	2000b074 	.word	0x2000b074
 800deec:	2000b06c 	.word	0x2000b06c
 800def0:	2000b072 	.word	0x2000b072
 800def4:	2000b068 	.word	0x2000b068
 800def8:	2000b058 	.word	0x2000b058
 800defc:	200058f0 	.word	0x200058f0
 800df00:	200058f4 	.word	0x200058f4
 800df04:	0801817c 	.word	0x0801817c
 800df08:	0801841c 	.word	0x0801841c
 800df0c:	080181c8 	.word	0x080181c8
 800df10:	2000b070 	.word	0x2000b070
 800df14:	2000b075 	.word	0x2000b075
 800df18:	2000b03c 	.word	0x2000b03c
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	429a      	cmp	r2, r3
 800df24:	d104      	bne.n	800df30 <tcp_process+0x5d8>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68da      	ldr	r2, [r3, #12]
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	60da      	str	r2, [r3, #12]
 800df2e:	e005      	b.n	800df3c <tcp_process+0x5e4>
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	617b      	str	r3, [r7, #20]
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1ef      	bne.n	800df1c <tcp_process+0x5c4>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	60da      	str	r2, [r3, #12]
 800df42:	4b77      	ldr	r3, [pc, #476]	; (800e120 <tcp_process+0x7c8>)
 800df44:	2201      	movs	r2, #1
 800df46:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	220a      	movs	r2, #10
 800df4c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800df4e:	4b75      	ldr	r3, [pc, #468]	; (800e124 <tcp_process+0x7cc>)
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	60da      	str	r2, [r3, #12]
 800df56:	4a73      	ldr	r2, [pc, #460]	; (800e124 <tcp_process+0x7cc>)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6013      	str	r3, [r2, #0]
 800df5c:	f002 fcfa 	bl	8010954 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800df60:	e0d2      	b.n	800e108 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	8b5b      	ldrh	r3, [r3, #26]
 800df66:	f043 0302 	orr.w	r3, r3, #2
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2208      	movs	r2, #8
 800df74:	751a      	strb	r2, [r3, #20]
      break;
 800df76:	e0c7      	b.n	800e108 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df78:	4b6b      	ldr	r3, [pc, #428]	; (800e128 <tcp_process+0x7d0>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 0310 	and.w	r3, r3, #16
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 80c1 	beq.w	800e108 <tcp_process+0x7b0>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df8a:	4b68      	ldr	r3, [pc, #416]	; (800e12c <tcp_process+0x7d4>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	429a      	cmp	r2, r3
 800df90:	f040 80ba 	bne.w	800e108 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f040 80b5 	bne.w	800e108 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2206      	movs	r2, #6
 800dfa2:	751a      	strb	r2, [r3, #20]
      break;
 800dfa4:	e0b0      	b.n	800e108 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 f9ca 	bl	800e340 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dfac:	4b60      	ldr	r3, [pc, #384]	; (800e130 <tcp_process+0x7d8>)
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	f003 0320 	and.w	r3, r3, #32
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 80a9 	beq.w	800e10c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	8b5b      	ldrh	r3, [r3, #26]
 800dfbe:	f043 0302 	orr.w	r3, r3, #2
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7fe fd39 	bl	800ca40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dfce:	4b59      	ldr	r3, [pc, #356]	; (800e134 <tcp_process+0x7dc>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d105      	bne.n	800dfe4 <tcp_process+0x68c>
 800dfd8:	4b56      	ldr	r3, [pc, #344]	; (800e134 <tcp_process+0x7dc>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	4a55      	ldr	r2, [pc, #340]	; (800e134 <tcp_process+0x7dc>)
 800dfe0:	6013      	str	r3, [r2, #0]
 800dfe2:	e013      	b.n	800e00c <tcp_process+0x6b4>
 800dfe4:	4b53      	ldr	r3, [pc, #332]	; (800e134 <tcp_process+0x7dc>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	613b      	str	r3, [r7, #16]
 800dfea:	e00c      	b.n	800e006 <tcp_process+0x6ae>
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d104      	bne.n	800e000 <tcp_process+0x6a8>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	68da      	ldr	r2, [r3, #12]
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	60da      	str	r2, [r3, #12]
 800dffe:	e005      	b.n	800e00c <tcp_process+0x6b4>
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	613b      	str	r3, [r7, #16]
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1ef      	bne.n	800dfec <tcp_process+0x694>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	60da      	str	r2, [r3, #12]
 800e012:	4b43      	ldr	r3, [pc, #268]	; (800e120 <tcp_process+0x7c8>)
 800e014:	2201      	movs	r2, #1
 800e016:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	220a      	movs	r2, #10
 800e01c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e01e:	4b41      	ldr	r3, [pc, #260]	; (800e124 <tcp_process+0x7cc>)
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	60da      	str	r2, [r3, #12]
 800e026:	4a3f      	ldr	r2, [pc, #252]	; (800e124 <tcp_process+0x7cc>)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6013      	str	r3, [r2, #0]
 800e02c:	f002 fc92 	bl	8010954 <tcp_timer_needed>
      }
      break;
 800e030:	e06c      	b.n	800e10c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f984 	bl	800e340 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e038:	4b3b      	ldr	r3, [pc, #236]	; (800e128 <tcp_process+0x7d0>)
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	f003 0310 	and.w	r3, r3, #16
 800e040:	2b00      	cmp	r3, #0
 800e042:	d065      	beq.n	800e110 <tcp_process+0x7b8>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e048:	4b38      	ldr	r3, [pc, #224]	; (800e12c <tcp_process+0x7d4>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d15f      	bne.n	800e110 <tcp_process+0x7b8>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d15b      	bne.n	800e110 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7fe fcf1 	bl	800ca40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e05e:	4b35      	ldr	r3, [pc, #212]	; (800e134 <tcp_process+0x7dc>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	429a      	cmp	r2, r3
 800e066:	d105      	bne.n	800e074 <tcp_process+0x71c>
 800e068:	4b32      	ldr	r3, [pc, #200]	; (800e134 <tcp_process+0x7dc>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	4a31      	ldr	r2, [pc, #196]	; (800e134 <tcp_process+0x7dc>)
 800e070:	6013      	str	r3, [r2, #0]
 800e072:	e013      	b.n	800e09c <tcp_process+0x744>
 800e074:	4b2f      	ldr	r3, [pc, #188]	; (800e134 <tcp_process+0x7dc>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	60fb      	str	r3, [r7, #12]
 800e07a:	e00c      	b.n	800e096 <tcp_process+0x73e>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	429a      	cmp	r2, r3
 800e084:	d104      	bne.n	800e090 <tcp_process+0x738>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68da      	ldr	r2, [r3, #12]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	60da      	str	r2, [r3, #12]
 800e08e:	e005      	b.n	800e09c <tcp_process+0x744>
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	60fb      	str	r3, [r7, #12]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d1ef      	bne.n	800e07c <tcp_process+0x724>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	60da      	str	r2, [r3, #12]
 800e0a2:	4b1f      	ldr	r3, [pc, #124]	; (800e120 <tcp_process+0x7c8>)
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	220a      	movs	r2, #10
 800e0ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e0ae:	4b1d      	ldr	r3, [pc, #116]	; (800e124 <tcp_process+0x7cc>)
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	60da      	str	r2, [r3, #12]
 800e0b6:	4a1b      	ldr	r2, [pc, #108]	; (800e124 <tcp_process+0x7cc>)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6013      	str	r3, [r2, #0]
 800e0bc:	f002 fc4a 	bl	8010954 <tcp_timer_needed>
      }
      break;
 800e0c0:	e026      	b.n	800e110 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f93c 	bl	800e340 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e0c8:	4b17      	ldr	r3, [pc, #92]	; (800e128 <tcp_process+0x7d0>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	f003 0310 	and.w	r3, r3, #16
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d01f      	beq.n	800e114 <tcp_process+0x7bc>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0d8:	4b14      	ldr	r3, [pc, #80]	; (800e12c <tcp_process+0x7d4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d119      	bne.n	800e114 <tcp_process+0x7bc>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d115      	bne.n	800e114 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e0e8:	4b11      	ldr	r3, [pc, #68]	; (800e130 <tcp_process+0x7d8>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	f043 0310 	orr.w	r3, r3, #16
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	4b0f      	ldr	r3, [pc, #60]	; (800e130 <tcp_process+0x7d8>)
 800e0f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e0f6:	e00d      	b.n	800e114 <tcp_process+0x7bc>
    default:
      break;
 800e0f8:	bf00      	nop
 800e0fa:	e00c      	b.n	800e116 <tcp_process+0x7be>
      break;
 800e0fc:	bf00      	nop
 800e0fe:	e00a      	b.n	800e116 <tcp_process+0x7be>
      break;
 800e100:	bf00      	nop
 800e102:	e008      	b.n	800e116 <tcp_process+0x7be>
      break;
 800e104:	bf00      	nop
 800e106:	e006      	b.n	800e116 <tcp_process+0x7be>
      break;
 800e108:	bf00      	nop
 800e10a:	e004      	b.n	800e116 <tcp_process+0x7be>
      break;
 800e10c:	bf00      	nop
 800e10e:	e002      	b.n	800e116 <tcp_process+0x7be>
      break;
 800e110:	bf00      	nop
 800e112:	e000      	b.n	800e116 <tcp_process+0x7be>
      break;
 800e114:	bf00      	nop
  }
  return ERR_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3724      	adds	r7, #36	; 0x24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd90      	pop	{r4, r7, pc}
 800e120:	2000b044 	.word	0x2000b044
 800e124:	2000b040 	.word	0x2000b040
 800e128:	2000b074 	.word	0x2000b074
 800e12c:	2000b06c 	.word	0x2000b06c
 800e130:	2000b075 	.word	0x2000b075
 800e134:	2000b03c 	.word	0x2000b03c

0800e138 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d106      	bne.n	800e156 <tcp_oos_insert_segment+0x1e>
 800e148:	4b3b      	ldr	r3, [pc, #236]	; (800e238 <tcp_oos_insert_segment+0x100>)
 800e14a:	f240 421f 	movw	r2, #1055	; 0x41f
 800e14e:	493b      	ldr	r1, [pc, #236]	; (800e23c <tcp_oos_insert_segment+0x104>)
 800e150:	483b      	ldr	r0, [pc, #236]	; (800e240 <tcp_oos_insert_segment+0x108>)
 800e152:	f007 fbe5 	bl	8015920 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	899b      	ldrh	r3, [r3, #12]
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fb fc94 	bl	8009a8c <lwip_htons>
 800e164:	4603      	mov	r3, r0
 800e166:	b2db      	uxtb	r3, r3
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d028      	beq.n	800e1c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e170:	6838      	ldr	r0, [r7, #0]
 800e172:	f7fe fa63 	bl	800c63c <tcp_segs_free>
    next = NULL;
 800e176:	2300      	movs	r3, #0
 800e178:	603b      	str	r3, [r7, #0]
 800e17a:	e056      	b.n	800e22a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	899b      	ldrh	r3, [r3, #12]
 800e182:	b29b      	uxth	r3, r3
 800e184:	4618      	mov	r0, r3
 800e186:	f7fb fc81 	bl	8009a8c <lwip_htons>
 800e18a:	4603      	mov	r3, r0
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	f003 0301 	and.w	r3, r3, #1
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00d      	beq.n	800e1b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	899b      	ldrh	r3, [r3, #12]
 800e19c:	b29c      	uxth	r4, r3
 800e19e:	2001      	movs	r0, #1
 800e1a0:	f7fb fc74 	bl	8009a8c <lwip_htons>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	4322      	orrs	r2, r4
 800e1ae:	b292      	uxth	r2, r2
 800e1b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f7fe fa52 	bl	800c666 <tcp_seg_free>
    while (next &&
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00e      	beq.n	800e1e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	891b      	ldrh	r3, [r3, #8]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4b1d      	ldr	r3, [pc, #116]	; (800e244 <tcp_oos_insert_segment+0x10c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	441a      	add	r2, r3
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	8909      	ldrh	r1, [r1, #8]
 800e1de:	440b      	add	r3, r1
 800e1e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	daca      	bge.n	800e17c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d01e      	beq.n	800e22a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	891b      	ldrh	r3, [r3, #8]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	4b14      	ldr	r3, [pc, #80]	; (800e244 <tcp_oos_insert_segment+0x10c>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	441a      	add	r2, r3
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e200:	2b00      	cmp	r3, #0
 800e202:	dd12      	ble.n	800e22a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	4b0d      	ldr	r3, [pc, #52]	; (800e244 <tcp_oos_insert_segment+0x10c>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	b29b      	uxth	r3, r3
 800e212:	1ad3      	subs	r3, r2, r3
 800e214:	b29a      	uxth	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	891b      	ldrh	r3, [r3, #8]
 800e222:	4619      	mov	r1, r3
 800e224:	4610      	mov	r0, r2
 800e226:	f7fc fe15 	bl	800ae54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	683a      	ldr	r2, [r7, #0]
 800e22e:	601a      	str	r2, [r3, #0]
}
 800e230:	bf00      	nop
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	bd90      	pop	{r4, r7, pc}
 800e238:	0801817c 	.word	0x0801817c
 800e23c:	0801843c 	.word	0x0801843c
 800e240:	080181c8 	.word	0x080181c8
 800e244:	2000b068 	.word	0x2000b068

0800e248 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e248:	b5b0      	push	{r4, r5, r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e256:	e03e      	b.n	800e2d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	4618      	mov	r0, r3
 800e268:	f7fd f802 	bl	800b270 <pbuf_clen>
 800e26c:	4603      	mov	r3, r0
 800e26e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e276:	8a7a      	ldrh	r2, [r7, #18]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d906      	bls.n	800e28a <tcp_free_acked_segments+0x42>
 800e27c:	4b2a      	ldr	r3, [pc, #168]	; (800e328 <tcp_free_acked_segments+0xe0>)
 800e27e:	f240 4257 	movw	r2, #1111	; 0x457
 800e282:	492a      	ldr	r1, [pc, #168]	; (800e32c <tcp_free_acked_segments+0xe4>)
 800e284:	482a      	ldr	r0, [pc, #168]	; (800e330 <tcp_free_acked_segments+0xe8>)
 800e286:	f007 fb4b 	bl	8015920 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e290:	8a7b      	ldrh	r3, [r7, #18]
 800e292:	1ad3      	subs	r3, r2, r3
 800e294:	b29a      	uxth	r2, r3
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	891a      	ldrh	r2, [r3, #8]
 800e2a0:	4b24      	ldr	r3, [pc, #144]	; (800e334 <tcp_free_acked_segments+0xec>)
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	4b22      	ldr	r3, [pc, #136]	; (800e334 <tcp_free_acked_segments+0xec>)
 800e2aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e2ac:	6978      	ldr	r0, [r7, #20]
 800e2ae:	f7fe f9da 	bl	800c666 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00c      	beq.n	800e2d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d109      	bne.n	800e2d6 <tcp_free_acked_segments+0x8e>
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d106      	bne.n	800e2d6 <tcp_free_acked_segments+0x8e>
 800e2c8:	4b17      	ldr	r3, [pc, #92]	; (800e328 <tcp_free_acked_segments+0xe0>)
 800e2ca:	f240 4261 	movw	r2, #1121	; 0x461
 800e2ce:	491a      	ldr	r1, [pc, #104]	; (800e338 <tcp_free_acked_segments+0xf0>)
 800e2d0:	4817      	ldr	r0, [pc, #92]	; (800e330 <tcp_free_acked_segments+0xe8>)
 800e2d2:	f007 fb25 	bl	8015920 <iprintf>
  while (seg_list != NULL &&
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d020      	beq.n	800e31e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fb fbe7 	bl	8009ab6 <lwip_htonl>
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	891b      	ldrh	r3, [r3, #8]
 800e2ee:	461d      	mov	r5, r3
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	899b      	ldrh	r3, [r3, #12]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7fb fbc7 	bl	8009a8c <lwip_htons>
 800e2fe:	4603      	mov	r3, r0
 800e300:	b2db      	uxtb	r3, r3
 800e302:	f003 0303 	and.w	r3, r3, #3
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <tcp_free_acked_segments+0xc6>
 800e30a:	2301      	movs	r3, #1
 800e30c:	e000      	b.n	800e310 <tcp_free_acked_segments+0xc8>
 800e30e:	2300      	movs	r3, #0
 800e310:	442b      	add	r3, r5
 800e312:	18e2      	adds	r2, r4, r3
 800e314:	4b09      	ldr	r3, [pc, #36]	; (800e33c <tcp_free_acked_segments+0xf4>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	dd9c      	ble.n	800e258 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e31e:	68bb      	ldr	r3, [r7, #8]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3718      	adds	r7, #24
 800e324:	46bd      	mov	sp, r7
 800e326:	bdb0      	pop	{r4, r5, r7, pc}
 800e328:	0801817c 	.word	0x0801817c
 800e32c:	08018464 	.word	0x08018464
 800e330:	080181c8 	.word	0x080181c8
 800e334:	2000b070 	.word	0x2000b070
 800e338:	0801848c 	.word	0x0801848c
 800e33c:	2000b06c 	.word	0x2000b06c

0800e340 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e340:	b5b0      	push	{r4, r5, r7, lr}
 800e342:	b094      	sub	sp, #80	; 0x50
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e348:	2300      	movs	r3, #0
 800e34a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d106      	bne.n	800e360 <tcp_receive+0x20>
 800e352:	4b91      	ldr	r3, [pc, #580]	; (800e598 <tcp_receive+0x258>)
 800e354:	f240 427b 	movw	r2, #1147	; 0x47b
 800e358:	4990      	ldr	r1, [pc, #576]	; (800e59c <tcp_receive+0x25c>)
 800e35a:	4891      	ldr	r0, [pc, #580]	; (800e5a0 <tcp_receive+0x260>)
 800e35c:	f007 fae0 	bl	8015920 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	7d1b      	ldrb	r3, [r3, #20]
 800e364:	2b03      	cmp	r3, #3
 800e366:	d806      	bhi.n	800e376 <tcp_receive+0x36>
 800e368:	4b8b      	ldr	r3, [pc, #556]	; (800e598 <tcp_receive+0x258>)
 800e36a:	f240 427c 	movw	r2, #1148	; 0x47c
 800e36e:	498d      	ldr	r1, [pc, #564]	; (800e5a4 <tcp_receive+0x264>)
 800e370:	488b      	ldr	r0, [pc, #556]	; (800e5a0 <tcp_receive+0x260>)
 800e372:	f007 fad5 	bl	8015920 <iprintf>

  if (flags & TCP_ACK) {
 800e376:	4b8c      	ldr	r3, [pc, #560]	; (800e5a8 <tcp_receive+0x268>)
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	f003 0310 	and.w	r3, r3, #16
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 8264 	beq.w	800e84c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e38a:	461a      	mov	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e390:	4413      	add	r3, r2
 800e392:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e398:	4b84      	ldr	r3, [pc, #528]	; (800e5ac <tcp_receive+0x26c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	db1b      	blt.n	800e3da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3a6:	4b81      	ldr	r3, [pc, #516]	; (800e5ac <tcp_receive+0x26c>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d106      	bne.n	800e3bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e3b2:	4b7f      	ldr	r3, [pc, #508]	; (800e5b0 <tcp_receive+0x270>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	db0e      	blt.n	800e3da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e3c0:	4b7b      	ldr	r3, [pc, #492]	; (800e5b0 <tcp_receive+0x270>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d125      	bne.n	800e414 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e3c8:	4b7a      	ldr	r3, [pc, #488]	; (800e5b4 <tcp_receive+0x274>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	89db      	ldrh	r3, [r3, #14]
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d91c      	bls.n	800e414 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e3da:	4b76      	ldr	r3, [pc, #472]	; (800e5b4 <tcp_receive+0x274>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	89db      	ldrh	r3, [r3, #14]
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d205      	bcs.n	800e404 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e404:	4b69      	ldr	r3, [pc, #420]	; (800e5ac <tcp_receive+0x26c>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e40c:	4b68      	ldr	r3, [pc, #416]	; (800e5b0 <tcp_receive+0x270>)
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e414:	4b66      	ldr	r3, [pc, #408]	; (800e5b0 <tcp_receive+0x270>)
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e41c:	1ad3      	subs	r3, r2, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dc58      	bgt.n	800e4d4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e422:	4b65      	ldr	r3, [pc, #404]	; (800e5b8 <tcp_receive+0x278>)
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d14b      	bne.n	800e4c2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e434:	4413      	add	r3, r2
 800e436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e438:	429a      	cmp	r2, r3
 800e43a:	d142      	bne.n	800e4c2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e442:	2b00      	cmp	r3, #0
 800e444:	db3d      	blt.n	800e4c2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e44a:	4b59      	ldr	r3, [pc, #356]	; (800e5b0 <tcp_receive+0x270>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d137      	bne.n	800e4c2 <tcp_receive+0x182>
              found_dupack = 1;
 800e452:	2301      	movs	r3, #1
 800e454:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e45c:	2bff      	cmp	r3, #255	; 0xff
 800e45e:	d007      	beq.n	800e470 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e466:	3301      	adds	r3, #1
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e476:	2b03      	cmp	r3, #3
 800e478:	d91b      	bls.n	800e4b2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e484:	4413      	add	r3, r2
 800e486:	b29a      	uxth	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e48e:	429a      	cmp	r2, r3
 800e490:	d30a      	bcc.n	800e4a8 <tcp_receive+0x168>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e49c:	4413      	add	r3, r2
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e4a6:	e004      	b.n	800e4b2 <tcp_receive+0x172>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4b8:	2b02      	cmp	r3, #2
 800e4ba:	d902      	bls.n	800e4c2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f001 feeb 	bl	8010298 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e4c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f040 8161 	bne.w	800e78c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4d2:	e15b      	b.n	800e78c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4d4:	4b36      	ldr	r3, [pc, #216]	; (800e5b0 <tcp_receive+0x270>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f2c0 814e 	blt.w	800e782 <tcp_receive+0x442>
 800e4e6:	4b32      	ldr	r3, [pc, #200]	; (800e5b0 <tcp_receive+0x270>)
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f300 8146 	bgt.w	800e782 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	8b5b      	ldrh	r3, [r3, #26]
 800e4fa:	f003 0304 	and.w	r3, r3, #4
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d010      	beq.n	800e524 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	8b5b      	ldrh	r3, [r3, #26]
 800e506:	f023 0304 	bic.w	r3, r3, #4
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e532:	10db      	asrs	r3, r3, #3
 800e534:	b21b      	sxth	r3, r3
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e53e:	b29b      	uxth	r3, r3
 800e540:	4413      	add	r3, r2
 800e542:	b29b      	uxth	r3, r3
 800e544:	b21a      	sxth	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e54c:	4b18      	ldr	r3, [pc, #96]	; (800e5b0 <tcp_receive+0x270>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	b29a      	uxth	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e556:	b29b      	uxth	r3, r3
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e564:	4b12      	ldr	r3, [pc, #72]	; (800e5b0 <tcp_receive+0x270>)
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	7d1b      	ldrb	r3, [r3, #20]
 800e570:	2b03      	cmp	r3, #3
 800e572:	f240 8097 	bls.w	800e6a4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e582:	429a      	cmp	r2, r3
 800e584:	d245      	bcs.n	800e612 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	8b5b      	ldrh	r3, [r3, #26]
 800e58a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d014      	beq.n	800e5bc <tcp_receive+0x27c>
 800e592:	2301      	movs	r3, #1
 800e594:	e013      	b.n	800e5be <tcp_receive+0x27e>
 800e596:	bf00      	nop
 800e598:	0801817c 	.word	0x0801817c
 800e59c:	080184ac 	.word	0x080184ac
 800e5a0:	080181c8 	.word	0x080181c8
 800e5a4:	080184c8 	.word	0x080184c8
 800e5a8:	2000b074 	.word	0x2000b074
 800e5ac:	2000b068 	.word	0x2000b068
 800e5b0:	2000b06c 	.word	0x2000b06c
 800e5b4:	2000b058 	.word	0x2000b058
 800e5b8:	2000b072 	.word	0x2000b072
 800e5bc:	2302      	movs	r3, #2
 800e5be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e5c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5cc:	fb12 f303 	smulbb	r3, r2, r3
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	bf28      	it	cs
 800e5d8:	4613      	movcs	r3, r2
 800e5da:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e5e4:	4413      	add	r3, r2
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d309      	bcc.n	800e606 <tcp_receive+0x2c6>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e5fa:	4413      	add	r3, r2
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e604:	e04e      	b.n	800e6a4 <tcp_receive+0x364>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e60c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e610:	e048      	b.n	800e6a4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e618:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e61a:	4413      	add	r3, r2
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e624:	429a      	cmp	r2, r3
 800e626:	d309      	bcc.n	800e63c <tcp_receive+0x2fc>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e62e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e630:	4413      	add	r3, r2
 800e632:	b29a      	uxth	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e63a:	e004      	b.n	800e646 <tcp_receive+0x306>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e642:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e652:	429a      	cmp	r2, r3
 800e654:	d326      	bcc.n	800e6a4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	b29a      	uxth	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e676:	4413      	add	r3, r2
 800e678:	b29a      	uxth	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e680:	429a      	cmp	r2, r3
 800e682:	d30a      	bcc.n	800e69a <tcp_receive+0x35a>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e68e:	4413      	add	r3, r2
 800e690:	b29a      	uxth	r2, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e698:	e004      	b.n	800e6a4 <tcp_receive+0x364>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6ac:	4a98      	ldr	r2, [pc, #608]	; (800e910 <tcp_receive+0x5d0>)
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7ff fdca 	bl	800e248 <tcp_free_acked_segments>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6c2:	4a94      	ldr	r2, [pc, #592]	; (800e914 <tcp_receive+0x5d4>)
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff fdbf 	bl	800e248 <tcp_free_acked_segments>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d104      	bne.n	800e6e2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6de:	861a      	strh	r2, [r3, #48]	; 0x30
 800e6e0:	e002      	b.n	800e6e8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d103      	bne.n	800e6fe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e704:	4b84      	ldr	r3, [pc, #528]	; (800e918 <tcp_receive+0x5d8>)
 800e706:	881b      	ldrh	r3, [r3, #0]
 800e708:	4413      	add	r3, r2
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	8b5b      	ldrh	r3, [r3, #26]
 800e716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d035      	beq.n	800e78a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e722:	2b00      	cmp	r3, #0
 800e724:	d118      	bne.n	800e758 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00c      	beq.n	800e748 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fb f9bb 	bl	8009ab6 <lwip_htonl>
 800e740:	4603      	mov	r3, r0
 800e742:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e744:	2b00      	cmp	r3, #0
 800e746:	dc20      	bgt.n	800e78a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	8b5b      	ldrh	r3, [r3, #26]
 800e74c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e750:	b29a      	uxth	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e756:	e018      	b.n	800e78a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e760:	68db      	ldr	r3, [r3, #12]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	4618      	mov	r0, r3
 800e766:	f7fb f9a6 	bl	8009ab6 <lwip_htonl>
 800e76a:	4603      	mov	r3, r0
 800e76c:	1ae3      	subs	r3, r4, r3
 800e76e:	2b00      	cmp	r3, #0
 800e770:	dc0b      	bgt.n	800e78a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	8b5b      	ldrh	r3, [r3, #26]
 800e776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e780:	e003      	b.n	800e78a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f001 ff76 	bl	8010674 <tcp_send_empty_ack>
 800e788:	e000      	b.n	800e78c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e78a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e790:	2b00      	cmp	r3, #0
 800e792:	d05b      	beq.n	800e84c <tcp_receive+0x50c>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e798:	4b60      	ldr	r3, [pc, #384]	; (800e91c <tcp_receive+0x5dc>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	da54      	bge.n	800e84c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e7a2:	4b5f      	ldr	r3, [pc, #380]	; (800e920 <tcp_receive+0x5e0>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e7b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e7c0:	10db      	asrs	r3, r3, #3
 800e7c2:	b21b      	sxth	r3, r3
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	1ad3      	subs	r3, r2, r3
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e7da:	4413      	add	r3, r2
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	b21a      	sxth	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e7e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	da05      	bge.n	800e7f8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e7ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e7f0:	425b      	negs	r3, r3
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e7f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e802:	109b      	asrs	r3, r3, #2
 800e804:	b21b      	sxth	r3, r3
 800e806:	b29b      	uxth	r3, r3
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e816:	b29a      	uxth	r2, r3
 800e818:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e81c:	4413      	add	r3, r2
 800e81e:	b29b      	uxth	r3, r3
 800e820:	b21a      	sxth	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e82c:	10db      	asrs	r3, r3, #3
 800e82e:	b21b      	sxth	r3, r3
 800e830:	b29a      	uxth	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e838:	b29b      	uxth	r3, r3
 800e83a:	4413      	add	r3, r2
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	b21a      	sxth	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2200      	movs	r2, #0
 800e84a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e84c:	4b35      	ldr	r3, [pc, #212]	; (800e924 <tcp_receive+0x5e4>)
 800e84e:	881b      	ldrh	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	f000 84e2 	beq.w	800f21a <tcp_receive+0xeda>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	7d1b      	ldrb	r3, [r3, #20]
 800e85a:	2b06      	cmp	r3, #6
 800e85c:	f200 84dd 	bhi.w	800f21a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e864:	4b30      	ldr	r3, [pc, #192]	; (800e928 <tcp_receive+0x5e8>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	3b01      	subs	r3, #1
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	f2c0 808f 	blt.w	800e990 <tcp_receive+0x650>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e876:	4b2b      	ldr	r3, [pc, #172]	; (800e924 <tcp_receive+0x5e4>)
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	4619      	mov	r1, r3
 800e87c:	4b2a      	ldr	r3, [pc, #168]	; (800e928 <tcp_receive+0x5e8>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	440b      	add	r3, r1
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	3301      	adds	r3, #1
 800e886:	2b00      	cmp	r3, #0
 800e888:	f300 8082 	bgt.w	800e990 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e88c:	4b27      	ldr	r3, [pc, #156]	; (800e92c <tcp_receive+0x5ec>)
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e896:	4b24      	ldr	r3, [pc, #144]	; (800e928 <tcp_receive+0x5e8>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e89e:	4b23      	ldr	r3, [pc, #140]	; (800e92c <tcp_receive+0x5ec>)
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <tcp_receive+0x574>
 800e8a6:	4b22      	ldr	r3, [pc, #136]	; (800e930 <tcp_receive+0x5f0>)
 800e8a8:	f240 5294 	movw	r2, #1428	; 0x594
 800e8ac:	4921      	ldr	r1, [pc, #132]	; (800e934 <tcp_receive+0x5f4>)
 800e8ae:	4822      	ldr	r0, [pc, #136]	; (800e938 <tcp_receive+0x5f8>)
 800e8b0:	f007 f836 	bl	8015920 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d906      	bls.n	800e8cc <tcp_receive+0x58c>
 800e8be:	4b1c      	ldr	r3, [pc, #112]	; (800e930 <tcp_receive+0x5f0>)
 800e8c0:	f240 5295 	movw	r2, #1429	; 0x595
 800e8c4:	491d      	ldr	r1, [pc, #116]	; (800e93c <tcp_receive+0x5fc>)
 800e8c6:	481c      	ldr	r0, [pc, #112]	; (800e938 <tcp_receive+0x5f8>)
 800e8c8:	f007 f82a 	bl	8015920 <iprintf>
      off = (u16_t)off32;
 800e8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e8d2:	4b16      	ldr	r3, [pc, #88]	; (800e92c <tcp_receive+0x5ec>)
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	891b      	ldrh	r3, [r3, #8]
 800e8d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d906      	bls.n	800e8ee <tcp_receive+0x5ae>
 800e8e0:	4b13      	ldr	r3, [pc, #76]	; (800e930 <tcp_receive+0x5f0>)
 800e8e2:	f240 5297 	movw	r2, #1431	; 0x597
 800e8e6:	4916      	ldr	r1, [pc, #88]	; (800e940 <tcp_receive+0x600>)
 800e8e8:	4813      	ldr	r0, [pc, #76]	; (800e938 <tcp_receive+0x5f8>)
 800e8ea:	f007 f819 	bl	8015920 <iprintf>
      inseg.len -= off;
 800e8ee:	4b0f      	ldr	r3, [pc, #60]	; (800e92c <tcp_receive+0x5ec>)
 800e8f0:	891a      	ldrh	r2, [r3, #8]
 800e8f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	4b0c      	ldr	r3, [pc, #48]	; (800e92c <tcp_receive+0x5ec>)
 800e8fc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e8fe:	4b0b      	ldr	r3, [pc, #44]	; (800e92c <tcp_receive+0x5ec>)
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	891a      	ldrh	r2, [r3, #8]
 800e904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e90c:	e02a      	b.n	800e964 <tcp_receive+0x624>
 800e90e:	bf00      	nop
 800e910:	080184e4 	.word	0x080184e4
 800e914:	080184ec 	.word	0x080184ec
 800e918:	2000b070 	.word	0x2000b070
 800e91c:	2000b06c 	.word	0x2000b06c
 800e920:	2000b030 	.word	0x2000b030
 800e924:	2000b072 	.word	0x2000b072
 800e928:	2000b068 	.word	0x2000b068
 800e92c:	2000b048 	.word	0x2000b048
 800e930:	0801817c 	.word	0x0801817c
 800e934:	080184f4 	.word	0x080184f4
 800e938:	080181c8 	.word	0x080181c8
 800e93c:	08018504 	.word	0x08018504
 800e940:	08018514 	.word	0x08018514
        off -= p->len;
 800e944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e946:	895b      	ldrh	r3, [r3, #10]
 800e948:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e954:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e956:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e95a:	2200      	movs	r2, #0
 800e95c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e966:	895b      	ldrh	r3, [r3, #10]
 800e968:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d8e9      	bhi.n	800e944 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e974:	4619      	mov	r1, r3
 800e976:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e978:	f7fc fb6c 	bl	800b054 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e980:	4a91      	ldr	r2, [pc, #580]	; (800ebc8 <tcp_receive+0x888>)
 800e982:	6013      	str	r3, [r2, #0]
 800e984:	4b91      	ldr	r3, [pc, #580]	; (800ebcc <tcp_receive+0x88c>)
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	4a8f      	ldr	r2, [pc, #572]	; (800ebc8 <tcp_receive+0x888>)
 800e98a:	6812      	ldr	r2, [r2, #0]
 800e98c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e98e:	e00d      	b.n	800e9ac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e990:	4b8d      	ldr	r3, [pc, #564]	; (800ebc8 <tcp_receive+0x888>)
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	da06      	bge.n	800e9ac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	8b5b      	ldrh	r3, [r3, #26]
 800e9a2:	f043 0302 	orr.w	r3, r3, #2
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e9ac:	4b86      	ldr	r3, [pc, #536]	; (800ebc8 <tcp_receive+0x888>)
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f2c0 842a 	blt.w	800f210 <tcp_receive+0xed0>
 800e9bc:	4b82      	ldr	r3, [pc, #520]	; (800ebc8 <tcp_receive+0x888>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c4:	6879      	ldr	r1, [r7, #4]
 800e9c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e9c8:	440b      	add	r3, r1
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f300 841e 	bgt.w	800f210 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9d8:	4b7b      	ldr	r3, [pc, #492]	; (800ebc8 <tcp_receive+0x888>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	f040 829a 	bne.w	800ef16 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e9e2:	4b7a      	ldr	r3, [pc, #488]	; (800ebcc <tcp_receive+0x88c>)
 800e9e4:	891c      	ldrh	r4, [r3, #8]
 800e9e6:	4b79      	ldr	r3, [pc, #484]	; (800ebcc <tcp_receive+0x88c>)
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	899b      	ldrh	r3, [r3, #12]
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fb f84c 	bl	8009a8c <lwip_htons>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	f003 0303 	and.w	r3, r3, #3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d001      	beq.n	800ea04 <tcp_receive+0x6c4>
 800ea00:	2301      	movs	r3, #1
 800ea02:	e000      	b.n	800ea06 <tcp_receive+0x6c6>
 800ea04:	2300      	movs	r3, #0
 800ea06:	4423      	add	r3, r4
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	4b71      	ldr	r3, [pc, #452]	; (800ebd0 <tcp_receive+0x890>)
 800ea0c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea12:	4b6f      	ldr	r3, [pc, #444]	; (800ebd0 <tcp_receive+0x890>)
 800ea14:	881b      	ldrh	r3, [r3, #0]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d275      	bcs.n	800eb06 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ea1a:	4b6c      	ldr	r3, [pc, #432]	; (800ebcc <tcp_receive+0x88c>)
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	899b      	ldrh	r3, [r3, #12]
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fb f832 	bl	8009a8c <lwip_htons>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d01f      	beq.n	800ea74 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ea34:	4b65      	ldr	r3, [pc, #404]	; (800ebcc <tcp_receive+0x88c>)
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	899b      	ldrh	r3, [r3, #12]
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	b21b      	sxth	r3, r3
 800ea3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea42:	b21c      	sxth	r4, r3
 800ea44:	4b61      	ldr	r3, [pc, #388]	; (800ebcc <tcp_receive+0x88c>)
 800ea46:	68db      	ldr	r3, [r3, #12]
 800ea48:	899b      	ldrh	r3, [r3, #12]
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fb f81d 	bl	8009a8c <lwip_htons>
 800ea52:	4603      	mov	r3, r0
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fb f814 	bl	8009a8c <lwip_htons>
 800ea64:	4603      	mov	r3, r0
 800ea66:	b21b      	sxth	r3, r3
 800ea68:	4323      	orrs	r3, r4
 800ea6a:	b21a      	sxth	r2, r3
 800ea6c:	4b57      	ldr	r3, [pc, #348]	; (800ebcc <tcp_receive+0x88c>)
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	b292      	uxth	r2, r2
 800ea72:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea78:	4b54      	ldr	r3, [pc, #336]	; (800ebcc <tcp_receive+0x88c>)
 800ea7a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ea7c:	4b53      	ldr	r3, [pc, #332]	; (800ebcc <tcp_receive+0x88c>)
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	899b      	ldrh	r3, [r3, #12]
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fb f801 	bl	8009a8c <lwip_htons>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	f003 0302 	and.w	r3, r3, #2
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d005      	beq.n	800eaa2 <tcp_receive+0x762>
            inseg.len -= 1;
 800ea96:	4b4d      	ldr	r3, [pc, #308]	; (800ebcc <tcp_receive+0x88c>)
 800ea98:	891b      	ldrh	r3, [r3, #8]
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	4b4b      	ldr	r3, [pc, #300]	; (800ebcc <tcp_receive+0x88c>)
 800eaa0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800eaa2:	4b4a      	ldr	r3, [pc, #296]	; (800ebcc <tcp_receive+0x88c>)
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	4a49      	ldr	r2, [pc, #292]	; (800ebcc <tcp_receive+0x88c>)
 800eaa8:	8912      	ldrh	r2, [r2, #8]
 800eaaa:	4611      	mov	r1, r2
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7fc f9d1 	bl	800ae54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800eab2:	4b46      	ldr	r3, [pc, #280]	; (800ebcc <tcp_receive+0x88c>)
 800eab4:	891c      	ldrh	r4, [r3, #8]
 800eab6:	4b45      	ldr	r3, [pc, #276]	; (800ebcc <tcp_receive+0x88c>)
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	899b      	ldrh	r3, [r3, #12]
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fa ffe4 	bl	8009a8c <lwip_htons>
 800eac4:	4603      	mov	r3, r0
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	f003 0303 	and.w	r3, r3, #3
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d001      	beq.n	800ead4 <tcp_receive+0x794>
 800ead0:	2301      	movs	r3, #1
 800ead2:	e000      	b.n	800ead6 <tcp_receive+0x796>
 800ead4:	2300      	movs	r3, #0
 800ead6:	4423      	add	r3, r4
 800ead8:	b29a      	uxth	r2, r3
 800eada:	4b3d      	ldr	r3, [pc, #244]	; (800ebd0 <tcp_receive+0x890>)
 800eadc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eade:	4b3c      	ldr	r3, [pc, #240]	; (800ebd0 <tcp_receive+0x890>)
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	461a      	mov	r2, r3
 800eae4:	4b38      	ldr	r3, [pc, #224]	; (800ebc8 <tcp_receive+0x888>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	441a      	add	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	6879      	ldr	r1, [r7, #4]
 800eaf0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eaf2:	440b      	add	r3, r1
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d006      	beq.n	800eb06 <tcp_receive+0x7c6>
 800eaf8:	4b36      	ldr	r3, [pc, #216]	; (800ebd4 <tcp_receive+0x894>)
 800eafa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800eafe:	4936      	ldr	r1, [pc, #216]	; (800ebd8 <tcp_receive+0x898>)
 800eb00:	4836      	ldr	r0, [pc, #216]	; (800ebdc <tcp_receive+0x89c>)
 800eb02:	f006 ff0d 	bl	8015920 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f000 80e7 	beq.w	800ecde <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eb10:	4b2e      	ldr	r3, [pc, #184]	; (800ebcc <tcp_receive+0x88c>)
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	899b      	ldrh	r3, [r3, #12]
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fa ffb7 	bl	8009a8c <lwip_htons>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	f003 0301 	and.w	r3, r3, #1
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d010      	beq.n	800eb4c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800eb2a:	e00a      	b.n	800eb42 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb30:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f7fd fd92 	bl	800c666 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1f0      	bne.n	800eb2c <tcp_receive+0x7ec>
 800eb4a:	e0c8      	b.n	800ecde <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb50:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800eb52:	e052      	b.n	800ebfa <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fa ff95 	bl	8009a8c <lwip_htons>
 800eb62:	4603      	mov	r3, r0
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d03d      	beq.n	800ebea <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800eb6e:	4b17      	ldr	r3, [pc, #92]	; (800ebcc <tcp_receive+0x88c>)
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	899b      	ldrh	r3, [r3, #12]
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fa ff88 	bl	8009a8c <lwip_htons>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d130      	bne.n	800ebea <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800eb88:	4b10      	ldr	r3, [pc, #64]	; (800ebcc <tcp_receive+0x88c>)
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	899b      	ldrh	r3, [r3, #12]
 800eb8e:	b29c      	uxth	r4, r3
 800eb90:	2001      	movs	r0, #1
 800eb92:	f7fa ff7b 	bl	8009a8c <lwip_htons>
 800eb96:	4603      	mov	r3, r0
 800eb98:	461a      	mov	r2, r3
 800eb9a:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <tcp_receive+0x88c>)
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	4322      	orrs	r2, r4
 800eba0:	b292      	uxth	r2, r2
 800eba2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800eba4:	4b09      	ldr	r3, [pc, #36]	; (800ebcc <tcp_receive+0x88c>)
 800eba6:	891c      	ldrh	r4, [r3, #8]
 800eba8:	4b08      	ldr	r3, [pc, #32]	; (800ebcc <tcp_receive+0x88c>)
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	899b      	ldrh	r3, [r3, #12]
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fa ff6b 	bl	8009a8c <lwip_htons>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	f003 0303 	and.w	r3, r3, #3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00e      	beq.n	800ebe0 <tcp_receive+0x8a0>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e00d      	b.n	800ebe2 <tcp_receive+0x8a2>
 800ebc6:	bf00      	nop
 800ebc8:	2000b068 	.word	0x2000b068
 800ebcc:	2000b048 	.word	0x2000b048
 800ebd0:	2000b072 	.word	0x2000b072
 800ebd4:	0801817c 	.word	0x0801817c
 800ebd8:	08018524 	.word	0x08018524
 800ebdc:	080181c8 	.word	0x080181c8
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	4423      	add	r3, r4
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	4b98      	ldr	r3, [pc, #608]	; (800ee48 <tcp_receive+0xb08>)
 800ebe8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ebea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebec:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ebee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ebf4:	6938      	ldr	r0, [r7, #16]
 800ebf6:	f7fd fd36 	bl	800c666 <tcp_seg_free>
            while (next &&
 800ebfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00e      	beq.n	800ec1e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ec00:	4b91      	ldr	r3, [pc, #580]	; (800ee48 <tcp_receive+0xb08>)
 800ec02:	881b      	ldrh	r3, [r3, #0]
 800ec04:	461a      	mov	r2, r3
 800ec06:	4b91      	ldr	r3, [pc, #580]	; (800ee4c <tcp_receive+0xb0c>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	441a      	add	r2, r3
 800ec0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec14:	8909      	ldrh	r1, [r1, #8]
 800ec16:	440b      	add	r3, r1
 800ec18:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	da9a      	bge.n	800eb54 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ec1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d059      	beq.n	800ecd8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ec24:	4b88      	ldr	r3, [pc, #544]	; (800ee48 <tcp_receive+0xb08>)
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4b88      	ldr	r3, [pc, #544]	; (800ee4c <tcp_receive+0xb0c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	441a      	add	r2, r3
 800ec30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	dd4d      	ble.n	800ecd8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ec3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	4b81      	ldr	r3, [pc, #516]	; (800ee4c <tcp_receive+0xb0c>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	4b80      	ldr	r3, [pc, #512]	; (800ee50 <tcp_receive+0xb10>)
 800ec50:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ec52:	4b7f      	ldr	r3, [pc, #508]	; (800ee50 <tcp_receive+0xb10>)
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	899b      	ldrh	r3, [r3, #12]
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fa ff16 	bl	8009a8c <lwip_htons>
 800ec60:	4603      	mov	r3, r0
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	f003 0302 	and.w	r3, r3, #2
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d005      	beq.n	800ec78 <tcp_receive+0x938>
                inseg.len -= 1;
 800ec6c:	4b78      	ldr	r3, [pc, #480]	; (800ee50 <tcp_receive+0xb10>)
 800ec6e:	891b      	ldrh	r3, [r3, #8]
 800ec70:	3b01      	subs	r3, #1
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	4b76      	ldr	r3, [pc, #472]	; (800ee50 <tcp_receive+0xb10>)
 800ec76:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ec78:	4b75      	ldr	r3, [pc, #468]	; (800ee50 <tcp_receive+0xb10>)
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	4a74      	ldr	r2, [pc, #464]	; (800ee50 <tcp_receive+0xb10>)
 800ec7e:	8912      	ldrh	r2, [r2, #8]
 800ec80:	4611      	mov	r1, r2
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fc f8e6 	bl	800ae54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ec88:	4b71      	ldr	r3, [pc, #452]	; (800ee50 <tcp_receive+0xb10>)
 800ec8a:	891c      	ldrh	r4, [r3, #8]
 800ec8c:	4b70      	ldr	r3, [pc, #448]	; (800ee50 <tcp_receive+0xb10>)
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	899b      	ldrh	r3, [r3, #12]
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fa fef9 	bl	8009a8c <lwip_htons>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	f003 0303 	and.w	r3, r3, #3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <tcp_receive+0x96a>
 800eca6:	2301      	movs	r3, #1
 800eca8:	e000      	b.n	800ecac <tcp_receive+0x96c>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	4423      	add	r3, r4
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	4b65      	ldr	r3, [pc, #404]	; (800ee48 <tcp_receive+0xb08>)
 800ecb2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ecb4:	4b64      	ldr	r3, [pc, #400]	; (800ee48 <tcp_receive+0xb08>)
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	4b64      	ldr	r3, [pc, #400]	; (800ee4c <tcp_receive+0xb0c>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	441a      	add	r2, r3
 800ecc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d006      	beq.n	800ecd8 <tcp_receive+0x998>
 800ecca:	4b62      	ldr	r3, [pc, #392]	; (800ee54 <tcp_receive+0xb14>)
 800eccc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ecd0:	4961      	ldr	r1, [pc, #388]	; (800ee58 <tcp_receive+0xb18>)
 800ecd2:	4862      	ldr	r0, [pc, #392]	; (800ee5c <tcp_receive+0xb1c>)
 800ecd4:	f006 fe24 	bl	8015920 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecdc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ecde:	4b5a      	ldr	r3, [pc, #360]	; (800ee48 <tcp_receive+0xb08>)
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	461a      	mov	r2, r3
 800ece4:	4b59      	ldr	r3, [pc, #356]	; (800ee4c <tcp_receive+0xb0c>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	441a      	add	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecf2:	4b55      	ldr	r3, [pc, #340]	; (800ee48 <tcp_receive+0xb08>)
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d206      	bcs.n	800ed08 <tcp_receive+0x9c8>
 800ecfa:	4b56      	ldr	r3, [pc, #344]	; (800ee54 <tcp_receive+0xb14>)
 800ecfc:	f240 6207 	movw	r2, #1543	; 0x607
 800ed00:	4957      	ldr	r1, [pc, #348]	; (800ee60 <tcp_receive+0xb20>)
 800ed02:	4856      	ldr	r0, [pc, #344]	; (800ee5c <tcp_receive+0xb1c>)
 800ed04:	f006 fe0c 	bl	8015920 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed0c:	4b4e      	ldr	r3, [pc, #312]	; (800ee48 <tcp_receive+0xb08>)
 800ed0e:	881b      	ldrh	r3, [r3, #0]
 800ed10:	1ad3      	subs	r3, r2, r3
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f7fc ffc5 	bl	800bca8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ed1e:	4b4c      	ldr	r3, [pc, #304]	; (800ee50 <tcp_receive+0xb10>)
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	891b      	ldrh	r3, [r3, #8]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d006      	beq.n	800ed36 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ed28:	4b49      	ldr	r3, [pc, #292]	; (800ee50 <tcp_receive+0xb10>)
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	4a4d      	ldr	r2, [pc, #308]	; (800ee64 <tcp_receive+0xb24>)
 800ed2e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ed30:	4b47      	ldr	r3, [pc, #284]	; (800ee50 <tcp_receive+0xb10>)
 800ed32:	2200      	movs	r2, #0
 800ed34:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed36:	4b46      	ldr	r3, [pc, #280]	; (800ee50 <tcp_receive+0xb10>)
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	899b      	ldrh	r3, [r3, #12]
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fa fea4 	bl	8009a8c <lwip_htons>
 800ed44:	4603      	mov	r3, r0
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	f003 0301 	and.w	r3, r3, #1
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f000 80b8 	beq.w	800eec2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ed52:	4b45      	ldr	r3, [pc, #276]	; (800ee68 <tcp_receive+0xb28>)
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	f043 0320 	orr.w	r3, r3, #32
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	4b42      	ldr	r3, [pc, #264]	; (800ee68 <tcp_receive+0xb28>)
 800ed5e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ed60:	e0af      	b.n	800eec2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed66:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	4a36      	ldr	r2, [pc, #216]	; (800ee4c <tcp_receive+0xb0c>)
 800ed72:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	891b      	ldrh	r3, [r3, #8]
 800ed78:	461c      	mov	r4, r3
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	899b      	ldrh	r3, [r3, #12]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fa fe82 	bl	8009a8c <lwip_htons>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	f003 0303 	and.w	r3, r3, #3
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <tcp_receive+0xa58>
 800ed94:	2301      	movs	r3, #1
 800ed96:	e000      	b.n	800ed9a <tcp_receive+0xa5a>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	191a      	adds	r2, r3, r4
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda0:	441a      	add	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edaa:	461c      	mov	r4, r3
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	891b      	ldrh	r3, [r3, #8]
 800edb0:	461d      	mov	r5, r3
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	899b      	ldrh	r3, [r3, #12]
 800edb8:	b29b      	uxth	r3, r3
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fa fe66 	bl	8009a8c <lwip_htons>
 800edc0:	4603      	mov	r3, r0
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	f003 0303 	and.w	r3, r3, #3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d001      	beq.n	800edd0 <tcp_receive+0xa90>
 800edcc:	2301      	movs	r3, #1
 800edce:	e000      	b.n	800edd2 <tcp_receive+0xa92>
 800edd0:	2300      	movs	r3, #0
 800edd2:	442b      	add	r3, r5
 800edd4:	429c      	cmp	r4, r3
 800edd6:	d206      	bcs.n	800ede6 <tcp_receive+0xaa6>
 800edd8:	4b1e      	ldr	r3, [pc, #120]	; (800ee54 <tcp_receive+0xb14>)
 800edda:	f240 622b 	movw	r2, #1579	; 0x62b
 800edde:	4923      	ldr	r1, [pc, #140]	; (800ee6c <tcp_receive+0xb2c>)
 800ede0:	481e      	ldr	r0, [pc, #120]	; (800ee5c <tcp_receive+0xb1c>)
 800ede2:	f006 fd9d 	bl	8015920 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	891b      	ldrh	r3, [r3, #8]
 800edea:	461c      	mov	r4, r3
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	899b      	ldrh	r3, [r3, #12]
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fa fe49 	bl	8009a8c <lwip_htons>
 800edfa:	4603      	mov	r3, r0
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	f003 0303 	and.w	r3, r3, #3
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d001      	beq.n	800ee0a <tcp_receive+0xaca>
 800ee06:	2301      	movs	r3, #1
 800ee08:	e000      	b.n	800ee0c <tcp_receive+0xacc>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	1919      	adds	r1, r3, r4
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ee12:	b28b      	uxth	r3, r1
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7fc ff43 	bl	800bca8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	891b      	ldrh	r3, [r3, #8]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d028      	beq.n	800ee7e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ee2c:	4b0d      	ldr	r3, [pc, #52]	; (800ee64 <tcp_receive+0xb24>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d01d      	beq.n	800ee70 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ee34:	4b0b      	ldr	r3, [pc, #44]	; (800ee64 <tcp_receive+0xb24>)
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	4610      	mov	r0, r2
 800ee40:	f7fc fa50 	bl	800b2e4 <pbuf_cat>
 800ee44:	e018      	b.n	800ee78 <tcp_receive+0xb38>
 800ee46:	bf00      	nop
 800ee48:	2000b072 	.word	0x2000b072
 800ee4c:	2000b068 	.word	0x2000b068
 800ee50:	2000b048 	.word	0x2000b048
 800ee54:	0801817c 	.word	0x0801817c
 800ee58:	0801855c 	.word	0x0801855c
 800ee5c:	080181c8 	.word	0x080181c8
 800ee60:	08018598 	.word	0x08018598
 800ee64:	2000b078 	.word	0x2000b078
 800ee68:	2000b075 	.word	0x2000b075
 800ee6c:	080185b8 	.word	0x080185b8
            } else {
              recv_data = cseg->p;
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	4a70      	ldr	r2, [pc, #448]	; (800f038 <tcp_receive+0xcf8>)
 800ee76:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	899b      	ldrh	r3, [r3, #12]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fa fe00 	bl	8009a8c <lwip_htons>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	f003 0301 	and.w	r3, r3, #1
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00d      	beq.n	800eeb4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ee98:	4b68      	ldr	r3, [pc, #416]	; (800f03c <tcp_receive+0xcfc>)
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	f043 0320 	orr.w	r3, r3, #32
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	4b66      	ldr	r3, [pc, #408]	; (800f03c <tcp_receive+0xcfc>)
 800eea4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	7d1b      	ldrb	r3, [r3, #20]
 800eeaa:	2b04      	cmp	r3, #4
 800eeac:	d102      	bne.n	800eeb4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2207      	movs	r2, #7
 800eeb2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800eebc:	68b8      	ldr	r0, [r7, #8]
 800eebe:	f7fd fbd2 	bl	800c666 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d008      	beq.n	800eedc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	685a      	ldr	r2, [r3, #4]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800eed6:	429a      	cmp	r2, r3
 800eed8:	f43f af43 	beq.w	800ed62 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	8b5b      	ldrh	r3, [r3, #26]
 800eee0:	f003 0301 	and.w	r3, r3, #1
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d00e      	beq.n	800ef06 <tcp_receive+0xbc6>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	8b5b      	ldrh	r3, [r3, #26]
 800eeec:	f023 0301 	bic.w	r3, r3, #1
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	835a      	strh	r2, [r3, #26]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	8b5b      	ldrh	r3, [r3, #26]
 800eefa:	f043 0302 	orr.w	r3, r3, #2
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ef04:	e188      	b.n	800f218 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	8b5b      	ldrh	r3, [r3, #26]
 800ef0a:	f043 0301 	orr.w	r3, r3, #1
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ef14:	e180      	b.n	800f218 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d106      	bne.n	800ef2c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ef1e:	4848      	ldr	r0, [pc, #288]	; (800f040 <tcp_receive+0xd00>)
 800ef20:	f7fd fbba 	bl	800c698 <tcp_seg_copy>
 800ef24:	4602      	mov	r2, r0
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	675a      	str	r2, [r3, #116]	; 0x74
 800ef2a:	e16d      	b.n	800f208 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef34:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef36:	e157      	b.n	800f1e8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ef38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	685a      	ldr	r2, [r3, #4]
 800ef3e:	4b41      	ldr	r3, [pc, #260]	; (800f044 <tcp_receive+0xd04>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d11d      	bne.n	800ef82 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ef46:	4b3e      	ldr	r3, [pc, #248]	; (800f040 <tcp_receive+0xd00>)
 800ef48:	891a      	ldrh	r2, [r3, #8]
 800ef4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4c:	891b      	ldrh	r3, [r3, #8]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	f240 814f 	bls.w	800f1f2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ef54:	483a      	ldr	r0, [pc, #232]	; (800f040 <tcp_receive+0xd00>)
 800ef56:	f7fd fb9f 	bl	800c698 <tcp_seg_copy>
 800ef5a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	f000 8149 	beq.w	800f1f6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ef64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d003      	beq.n	800ef72 <tcp_receive+0xc32>
                    prev->next = cseg;
 800ef6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef6c:	697a      	ldr	r2, [r7, #20]
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	e002      	b.n	800ef78 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	697a      	ldr	r2, [r7, #20]
 800ef76:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ef78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef7a:	6978      	ldr	r0, [r7, #20]
 800ef7c:	f7ff f8dc 	bl	800e138 <tcp_oos_insert_segment>
                }
                break;
 800ef80:	e139      	b.n	800f1f6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ef82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d117      	bne.n	800efb8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ef88:	4b2e      	ldr	r3, [pc, #184]	; (800f044 <tcp_receive+0xd04>)
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	da57      	bge.n	800f048 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ef98:	4829      	ldr	r0, [pc, #164]	; (800f040 <tcp_receive+0xd00>)
 800ef9a:	f7fd fb7d 	bl	800c698 <tcp_seg_copy>
 800ef9e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 8129 	beq.w	800f1fa <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	69ba      	ldr	r2, [r7, #24]
 800efac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800efae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efb0:	69b8      	ldr	r0, [r7, #24]
 800efb2:	f7ff f8c1 	bl	800e138 <tcp_oos_insert_segment>
                  }
                  break;
 800efb6:	e120      	b.n	800f1fa <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800efb8:	4b22      	ldr	r3, [pc, #136]	; (800f044 <tcp_receive+0xd04>)
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	3b01      	subs	r3, #1
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	db3e      	blt.n	800f048 <tcp_receive+0xd08>
 800efca:	4b1e      	ldr	r3, [pc, #120]	; (800f044 <tcp_receive+0xd04>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	3301      	adds	r3, #1
 800efd8:	2b00      	cmp	r3, #0
 800efda:	dc35      	bgt.n	800f048 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800efdc:	4818      	ldr	r0, [pc, #96]	; (800f040 <tcp_receive+0xd00>)
 800efde:	f7fd fb5b 	bl	800c698 <tcp_seg_copy>
 800efe2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f000 8109 	beq.w	800f1fe <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800efec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eff4:	8912      	ldrh	r2, [r2, #8]
 800eff6:	441a      	add	r2, r3
 800eff8:	4b12      	ldr	r3, [pc, #72]	; (800f044 <tcp_receive+0xd04>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	1ad3      	subs	r3, r2, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	dd12      	ble.n	800f028 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f002:	4b10      	ldr	r3, [pc, #64]	; (800f044 <tcp_receive+0xd04>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	b29a      	uxth	r2, r3
 800f008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	b29a      	uxth	r2, r3
 800f014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f016:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01a:	685a      	ldr	r2, [r3, #4]
 800f01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01e:	891b      	ldrh	r3, [r3, #8]
 800f020:	4619      	mov	r1, r3
 800f022:	4610      	mov	r0, r2
 800f024:	f7fb ff16 	bl	800ae54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f02a:	69fa      	ldr	r2, [r7, #28]
 800f02c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f02e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f030:	69f8      	ldr	r0, [r7, #28]
 800f032:	f7ff f881 	bl	800e138 <tcp_oos_insert_segment>
                  }
                  break;
 800f036:	e0e2      	b.n	800f1fe <tcp_receive+0xebe>
 800f038:	2000b078 	.word	0x2000b078
 800f03c:	2000b075 	.word	0x2000b075
 800f040:	2000b048 	.word	0x2000b048
 800f044:	2000b068 	.word	0x2000b068
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	f040 80c6 	bne.w	800f1e2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f056:	4b80      	ldr	r3, [pc, #512]	; (800f258 <tcp_receive+0xf18>)
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f062:	2b00      	cmp	r3, #0
 800f064:	f340 80bd 	ble.w	800f1e2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	899b      	ldrh	r3, [r3, #12]
 800f06e:	b29b      	uxth	r3, r3
 800f070:	4618      	mov	r0, r3
 800f072:	f7fa fd0b 	bl	8009a8c <lwip_htons>
 800f076:	4603      	mov	r3, r0
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	f003 0301 	and.w	r3, r3, #1
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f040 80bf 	bne.w	800f202 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f084:	4875      	ldr	r0, [pc, #468]	; (800f25c <tcp_receive+0xf1c>)
 800f086:	f7fd fb07 	bl	800c698 <tcp_seg_copy>
 800f08a:	4602      	mov	r2, r0
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	f000 80b6 	beq.w	800f206 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0a2:	8912      	ldrh	r2, [r2, #8]
 800f0a4:	441a      	add	r2, r3
 800f0a6:	4b6c      	ldr	r3, [pc, #432]	; (800f258 <tcp_receive+0xf18>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	dd12      	ble.n	800f0d6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f0b0:	4b69      	ldr	r3, [pc, #420]	; (800f258 <tcp_receive+0xf18>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c8:	685a      	ldr	r2, [r3, #4]
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	891b      	ldrh	r3, [r3, #8]
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	f7fb febf 	bl	800ae54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f0d6:	4b62      	ldr	r3, [pc, #392]	; (800f260 <tcp_receive+0xf20>)
 800f0d8:	881b      	ldrh	r3, [r3, #0]
 800f0da:	461a      	mov	r2, r3
 800f0dc:	4b5e      	ldr	r3, [pc, #376]	; (800f258 <tcp_receive+0xf18>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	441a      	add	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f0ea:	440b      	add	r3, r1
 800f0ec:	1ad3      	subs	r3, r2, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f340 8089 	ble.w	800f206 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	899b      	ldrh	r3, [r3, #12]
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fa fcc4 	bl	8009a8c <lwip_htons>
 800f104:	4603      	mov	r3, r0
 800f106:	b2db      	uxtb	r3, r3
 800f108:	f003 0301 	and.w	r3, r3, #1
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d022      	beq.n	800f156 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	899b      	ldrh	r3, [r3, #12]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	b21b      	sxth	r3, r3
 800f11c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f120:	b21c      	sxth	r4, r3
 800f122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	899b      	ldrh	r3, [r3, #12]
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fa fcad 	bl	8009a8c <lwip_htons>
 800f132:	4603      	mov	r3, r0
 800f134:	b2db      	uxtb	r3, r3
 800f136:	b29b      	uxth	r3, r3
 800f138:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	4618      	mov	r0, r3
 800f140:	f7fa fca4 	bl	8009a8c <lwip_htons>
 800f144:	4603      	mov	r3, r0
 800f146:	b21b      	sxth	r3, r3
 800f148:	4323      	orrs	r3, r4
 800f14a:	b21a      	sxth	r2, r3
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	b292      	uxth	r2, r2
 800f154:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f160:	4413      	add	r3, r2
 800f162:	b299      	uxth	r1, r3
 800f164:	4b3c      	ldr	r3, [pc, #240]	; (800f258 <tcp_receive+0xf18>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	b29a      	uxth	r2, r3
 800f16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	1a8a      	subs	r2, r1, r2
 800f170:	b292      	uxth	r2, r2
 800f172:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	685a      	ldr	r2, [r3, #4]
 800f17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	891b      	ldrh	r3, [r3, #8]
 800f180:	4619      	mov	r1, r3
 800f182:	4610      	mov	r0, r2
 800f184:	f7fb fe66 	bl	800ae54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	891c      	ldrh	r4, [r3, #8]
 800f18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	899b      	ldrh	r3, [r3, #12]
 800f196:	b29b      	uxth	r3, r3
 800f198:	4618      	mov	r0, r3
 800f19a:	f7fa fc77 	bl	8009a8c <lwip_htons>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	f003 0303 	and.w	r3, r3, #3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d001      	beq.n	800f1ae <tcp_receive+0xe6e>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e000      	b.n	800f1b0 <tcp_receive+0xe70>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	4423      	add	r3, r4
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	4b2a      	ldr	r3, [pc, #168]	; (800f260 <tcp_receive+0xf20>)
 800f1b6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f1b8:	4b29      	ldr	r3, [pc, #164]	; (800f260 <tcp_receive+0xf20>)
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4b26      	ldr	r3, [pc, #152]	; (800f258 <tcp_receive+0xf18>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	441a      	add	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c8:	6879      	ldr	r1, [r7, #4]
 800f1ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f1cc:	440b      	add	r3, r1
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d019      	beq.n	800f206 <tcp_receive+0xec6>
 800f1d2:	4b24      	ldr	r3, [pc, #144]	; (800f264 <tcp_receive+0xf24>)
 800f1d4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f1d8:	4923      	ldr	r1, [pc, #140]	; (800f268 <tcp_receive+0xf28>)
 800f1da:	4824      	ldr	r0, [pc, #144]	; (800f26c <tcp_receive+0xf2c>)
 800f1dc:	f006 fba0 	bl	8015920 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f1e0:	e011      	b.n	800f206 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f47f aea4 	bne.w	800ef38 <tcp_receive+0xbf8>
 800f1f0:	e00a      	b.n	800f208 <tcp_receive+0xec8>
                break;
 800f1f2:	bf00      	nop
 800f1f4:	e008      	b.n	800f208 <tcp_receive+0xec8>
                break;
 800f1f6:	bf00      	nop
 800f1f8:	e006      	b.n	800f208 <tcp_receive+0xec8>
                  break;
 800f1fa:	bf00      	nop
 800f1fc:	e004      	b.n	800f208 <tcp_receive+0xec8>
                  break;
 800f1fe:	bf00      	nop
 800f200:	e002      	b.n	800f208 <tcp_receive+0xec8>
                  break;
 800f202:	bf00      	nop
 800f204:	e000      	b.n	800f208 <tcp_receive+0xec8>
                break;
 800f206:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f001 fa33 	bl	8010674 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f20e:	e003      	b.n	800f218 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f001 fa2f 	bl	8010674 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f216:	e01a      	b.n	800f24e <tcp_receive+0xf0e>
 800f218:	e019      	b.n	800f24e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f21a:	4b0f      	ldr	r3, [pc, #60]	; (800f258 <tcp_receive+0xf18>)
 800f21c:	681a      	ldr	r2, [r3, #0]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	2b00      	cmp	r3, #0
 800f226:	db0a      	blt.n	800f23e <tcp_receive+0xefe>
 800f228:	4b0b      	ldr	r3, [pc, #44]	; (800f258 <tcp_receive+0xf18>)
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f230:	6879      	ldr	r1, [r7, #4]
 800f232:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f234:	440b      	add	r3, r1
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	3301      	adds	r3, #1
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	dd07      	ble.n	800f24e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	8b5b      	ldrh	r3, [r3, #26]
 800f242:	f043 0302 	orr.w	r3, r3, #2
 800f246:	b29a      	uxth	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f24c:	e7ff      	b.n	800f24e <tcp_receive+0xf0e>
 800f24e:	bf00      	nop
 800f250:	3750      	adds	r7, #80	; 0x50
 800f252:	46bd      	mov	sp, r7
 800f254:	bdb0      	pop	{r4, r5, r7, pc}
 800f256:	bf00      	nop
 800f258:	2000b068 	.word	0x2000b068
 800f25c:	2000b048 	.word	0x2000b048
 800f260:	2000b072 	.word	0x2000b072
 800f264:	0801817c 	.word	0x0801817c
 800f268:	08018524 	.word	0x08018524
 800f26c:	080181c8 	.word	0x080181c8

0800f270 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f276:	4b15      	ldr	r3, [pc, #84]	; (800f2cc <tcp_get_next_optbyte+0x5c>)
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	1c5a      	adds	r2, r3, #1
 800f27c:	b291      	uxth	r1, r2
 800f27e:	4a13      	ldr	r2, [pc, #76]	; (800f2cc <tcp_get_next_optbyte+0x5c>)
 800f280:	8011      	strh	r1, [r2, #0]
 800f282:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f284:	4b12      	ldr	r3, [pc, #72]	; (800f2d0 <tcp_get_next_optbyte+0x60>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d004      	beq.n	800f296 <tcp_get_next_optbyte+0x26>
 800f28c:	4b11      	ldr	r3, [pc, #68]	; (800f2d4 <tcp_get_next_optbyte+0x64>)
 800f28e:	881b      	ldrh	r3, [r3, #0]
 800f290:	88fa      	ldrh	r2, [r7, #6]
 800f292:	429a      	cmp	r2, r3
 800f294:	d208      	bcs.n	800f2a8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f296:	4b10      	ldr	r3, [pc, #64]	; (800f2d8 <tcp_get_next_optbyte+0x68>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	3314      	adds	r3, #20
 800f29c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f29e:	88fb      	ldrh	r3, [r7, #6]
 800f2a0:	683a      	ldr	r2, [r7, #0]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	e00b      	b.n	800f2c0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f2a8:	88fb      	ldrh	r3, [r7, #6]
 800f2aa:	b2da      	uxtb	r2, r3
 800f2ac:	4b09      	ldr	r3, [pc, #36]	; (800f2d4 <tcp_get_next_optbyte+0x64>)
 800f2ae:	881b      	ldrh	r3, [r3, #0]
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f2b6:	4b06      	ldr	r3, [pc, #24]	; (800f2d0 <tcp_get_next_optbyte+0x60>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	797b      	ldrb	r3, [r7, #5]
 800f2bc:	4413      	add	r3, r2
 800f2be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr
 800f2cc:	2000b064 	.word	0x2000b064
 800f2d0:	2000b060 	.word	0x2000b060
 800f2d4:	2000b05e 	.word	0x2000b05e
 800f2d8:	2000b058 	.word	0x2000b058

0800f2dc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d106      	bne.n	800f2f8 <tcp_parseopt+0x1c>
 800f2ea:	4b32      	ldr	r3, [pc, #200]	; (800f3b4 <tcp_parseopt+0xd8>)
 800f2ec:	f240 727d 	movw	r2, #1917	; 0x77d
 800f2f0:	4931      	ldr	r1, [pc, #196]	; (800f3b8 <tcp_parseopt+0xdc>)
 800f2f2:	4832      	ldr	r0, [pc, #200]	; (800f3bc <tcp_parseopt+0xe0>)
 800f2f4:	f006 fb14 	bl	8015920 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f2f8:	4b31      	ldr	r3, [pc, #196]	; (800f3c0 <tcp_parseopt+0xe4>)
 800f2fa:	881b      	ldrh	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d055      	beq.n	800f3ac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f300:	4b30      	ldr	r3, [pc, #192]	; (800f3c4 <tcp_parseopt+0xe8>)
 800f302:	2200      	movs	r2, #0
 800f304:	801a      	strh	r2, [r3, #0]
 800f306:	e045      	b.n	800f394 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f308:	f7ff ffb2 	bl	800f270 <tcp_get_next_optbyte>
 800f30c:	4603      	mov	r3, r0
 800f30e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f310:	7bfb      	ldrb	r3, [r7, #15]
 800f312:	2b02      	cmp	r3, #2
 800f314:	d006      	beq.n	800f324 <tcp_parseopt+0x48>
 800f316:	2b02      	cmp	r3, #2
 800f318:	dc2b      	bgt.n	800f372 <tcp_parseopt+0x96>
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d041      	beq.n	800f3a2 <tcp_parseopt+0xc6>
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d127      	bne.n	800f372 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f322:	e037      	b.n	800f394 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f324:	f7ff ffa4 	bl	800f270 <tcp_get_next_optbyte>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b04      	cmp	r3, #4
 800f32c:	d13b      	bne.n	800f3a6 <tcp_parseopt+0xca>
 800f32e:	4b25      	ldr	r3, [pc, #148]	; (800f3c4 <tcp_parseopt+0xe8>)
 800f330:	881b      	ldrh	r3, [r3, #0]
 800f332:	3301      	adds	r3, #1
 800f334:	4a22      	ldr	r2, [pc, #136]	; (800f3c0 <tcp_parseopt+0xe4>)
 800f336:	8812      	ldrh	r2, [r2, #0]
 800f338:	4293      	cmp	r3, r2
 800f33a:	da34      	bge.n	800f3a6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f33c:	f7ff ff98 	bl	800f270 <tcp_get_next_optbyte>
 800f340:	4603      	mov	r3, r0
 800f342:	b29b      	uxth	r3, r3
 800f344:	021b      	lsls	r3, r3, #8
 800f346:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f348:	f7ff ff92 	bl	800f270 <tcp_get_next_optbyte>
 800f34c:	4603      	mov	r3, r0
 800f34e:	b29a      	uxth	r2, r3
 800f350:	89bb      	ldrh	r3, [r7, #12]
 800f352:	4313      	orrs	r3, r2
 800f354:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f356:	89bb      	ldrh	r3, [r7, #12]
 800f358:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f35c:	d804      	bhi.n	800f368 <tcp_parseopt+0x8c>
 800f35e:	89bb      	ldrh	r3, [r7, #12]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <tcp_parseopt+0x8c>
 800f364:	89ba      	ldrh	r2, [r7, #12]
 800f366:	e001      	b.n	800f36c <tcp_parseopt+0x90>
 800f368:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f370:	e010      	b.n	800f394 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f372:	f7ff ff7d 	bl	800f270 <tcp_get_next_optbyte>
 800f376:	4603      	mov	r3, r0
 800f378:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f37a:	7afb      	ldrb	r3, [r7, #11]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d914      	bls.n	800f3aa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f380:	7afb      	ldrb	r3, [r7, #11]
 800f382:	b29a      	uxth	r2, r3
 800f384:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <tcp_parseopt+0xe8>)
 800f386:	881b      	ldrh	r3, [r3, #0]
 800f388:	4413      	add	r3, r2
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	3b02      	subs	r3, #2
 800f38e:	b29a      	uxth	r2, r3
 800f390:	4b0c      	ldr	r3, [pc, #48]	; (800f3c4 <tcp_parseopt+0xe8>)
 800f392:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f394:	4b0b      	ldr	r3, [pc, #44]	; (800f3c4 <tcp_parseopt+0xe8>)
 800f396:	881a      	ldrh	r2, [r3, #0]
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <tcp_parseopt+0xe4>)
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d3b3      	bcc.n	800f308 <tcp_parseopt+0x2c>
 800f3a0:	e004      	b.n	800f3ac <tcp_parseopt+0xd0>
          return;
 800f3a2:	bf00      	nop
 800f3a4:	e002      	b.n	800f3ac <tcp_parseopt+0xd0>
            return;
 800f3a6:	bf00      	nop
 800f3a8:	e000      	b.n	800f3ac <tcp_parseopt+0xd0>
            return;
 800f3aa:	bf00      	nop
      }
    }
  }
}
 800f3ac:	3710      	adds	r7, #16
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	0801817c 	.word	0x0801817c
 800f3b8:	080185e0 	.word	0x080185e0
 800f3bc:	080181c8 	.word	0x080181c8
 800f3c0:	2000b05c 	.word	0x2000b05c
 800f3c4:	2000b064 	.word	0x2000b064

0800f3c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f3cc:	4b05      	ldr	r3, [pc, #20]	; (800f3e4 <tcp_trigger_input_pcb_close+0x1c>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	f043 0310 	orr.w	r3, r3, #16
 800f3d4:	b2da      	uxtb	r2, r3
 800f3d6:	4b03      	ldr	r3, [pc, #12]	; (800f3e4 <tcp_trigger_input_pcb_close+0x1c>)
 800f3d8:	701a      	strb	r2, [r3, #0]
}
 800f3da:	bf00      	nop
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr
 800f3e4:	2000b075 	.word	0x2000b075

0800f3e8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00a      	beq.n	800f410 <tcp_route+0x28>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	7a1b      	ldrb	r3, [r3, #8]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d006      	beq.n	800f410 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	7a1b      	ldrb	r3, [r3, #8]
 800f406:	4618      	mov	r0, r3
 800f408:	f7fb fb4a 	bl	800aaa0 <netif_get_by_index>
 800f40c:	4603      	mov	r3, r0
 800f40e:	e003      	b.n	800f418 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f005 f817 	bl	8014444 <ip4_route>
 800f416:	4603      	mov	r3, r0
  }
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3710      	adds	r7, #16
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f420:	b590      	push	{r4, r7, lr}
 800f422:	b087      	sub	sp, #28
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	603b      	str	r3, [r7, #0]
 800f42c:	4613      	mov	r3, r2
 800f42e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d105      	bne.n	800f442 <tcp_create_segment+0x22>
 800f436:	4b44      	ldr	r3, [pc, #272]	; (800f548 <tcp_create_segment+0x128>)
 800f438:	22a3      	movs	r2, #163	; 0xa3
 800f43a:	4944      	ldr	r1, [pc, #272]	; (800f54c <tcp_create_segment+0x12c>)
 800f43c:	4844      	ldr	r0, [pc, #272]	; (800f550 <tcp_create_segment+0x130>)
 800f43e:	f006 fa6f 	bl	8015920 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d105      	bne.n	800f454 <tcp_create_segment+0x34>
 800f448:	4b3f      	ldr	r3, [pc, #252]	; (800f548 <tcp_create_segment+0x128>)
 800f44a:	22a4      	movs	r2, #164	; 0xa4
 800f44c:	4941      	ldr	r1, [pc, #260]	; (800f554 <tcp_create_segment+0x134>)
 800f44e:	4840      	ldr	r0, [pc, #256]	; (800f550 <tcp_create_segment+0x130>)
 800f450:	f006 fa66 	bl	8015920 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f454:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	f003 0304 	and.w	r3, r3, #4
 800f460:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f462:	2003      	movs	r0, #3
 800f464:	f7fa ff8a 	bl	800a37c <memp_malloc>
 800f468:	6138      	str	r0, [r7, #16]
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d104      	bne.n	800f47a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f470:	68b8      	ldr	r0, [r7, #8]
 800f472:	f7fb fe75 	bl	800b160 <pbuf_free>
    return NULL;
 800f476:	2300      	movs	r3, #0
 800f478:	e061      	b.n	800f53e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f480:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	2200      	movs	r2, #0
 800f486:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	68ba      	ldr	r2, [r7, #8]
 800f48c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	891a      	ldrh	r2, [r3, #8]
 800f492:	7dfb      	ldrb	r3, [r7, #23]
 800f494:	b29b      	uxth	r3, r3
 800f496:	429a      	cmp	r2, r3
 800f498:	d205      	bcs.n	800f4a6 <tcp_create_segment+0x86>
 800f49a:	4b2b      	ldr	r3, [pc, #172]	; (800f548 <tcp_create_segment+0x128>)
 800f49c:	22b0      	movs	r2, #176	; 0xb0
 800f49e:	492e      	ldr	r1, [pc, #184]	; (800f558 <tcp_create_segment+0x138>)
 800f4a0:	482b      	ldr	r0, [pc, #172]	; (800f550 <tcp_create_segment+0x130>)
 800f4a2:	f006 fa3d 	bl	8015920 <iprintf>
  seg->len = p->tot_len - optlen;
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	891a      	ldrh	r2, [r3, #8]
 800f4aa:	7dfb      	ldrb	r3, [r7, #23]
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f4b6:	2114      	movs	r1, #20
 800f4b8:	68b8      	ldr	r0, [r7, #8]
 800f4ba:	f7fb fdbb 	bl	800b034 <pbuf_add_header>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d004      	beq.n	800f4ce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f4c4:	6938      	ldr	r0, [r7, #16]
 800f4c6:	f7fd f8ce 	bl	800c666 <tcp_seg_free>
    return NULL;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	e037      	b.n	800f53e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	685a      	ldr	r2, [r3, #4]
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	8ada      	ldrh	r2, [r3, #22]
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	68dc      	ldr	r4, [r3, #12]
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	f7fa fad3 	bl	8009a8c <lwip_htons>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	8b1a      	ldrh	r2, [r3, #24]
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	68dc      	ldr	r4, [r3, #12]
 800f4f2:	4610      	mov	r0, r2
 800f4f4:	f7fa faca 	bl	8009a8c <lwip_htons>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	68dc      	ldr	r4, [r3, #12]
 800f500:	6838      	ldr	r0, [r7, #0]
 800f502:	f7fa fad8 	bl	8009ab6 <lwip_htonl>
 800f506:	4603      	mov	r3, r0
 800f508:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	089b      	lsrs	r3, r3, #2
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	b29b      	uxth	r3, r3
 800f512:	3305      	adds	r3, #5
 800f514:	b29b      	uxth	r3, r3
 800f516:	031b      	lsls	r3, r3, #12
 800f518:	b29a      	uxth	r2, r3
 800f51a:	79fb      	ldrb	r3, [r7, #7]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	4313      	orrs	r3, r2
 800f520:	b29a      	uxth	r2, r3
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	68dc      	ldr	r4, [r3, #12]
 800f526:	4610      	mov	r0, r2
 800f528:	f7fa fab0 	bl	8009a8c <lwip_htons>
 800f52c:	4603      	mov	r3, r0
 800f52e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	749a      	strb	r2, [r3, #18]
 800f538:	2200      	movs	r2, #0
 800f53a:	74da      	strb	r2, [r3, #19]
  return seg;
 800f53c:	693b      	ldr	r3, [r7, #16]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	371c      	adds	r7, #28
 800f542:	46bd      	mov	sp, r7
 800f544:	bd90      	pop	{r4, r7, pc}
 800f546:	bf00      	nop
 800f548:	080185fc 	.word	0x080185fc
 800f54c:	08018630 	.word	0x08018630
 800f550:	08018650 	.word	0x08018650
 800f554:	08018678 	.word	0x08018678
 800f558:	0801869c 	.word	0x0801869c

0800f55c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f55c:	b590      	push	{r4, r7, lr}
 800f55e:	b08b      	sub	sp, #44	; 0x2c
 800f560:	af02      	add	r7, sp, #8
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	460b      	mov	r3, r1
 800f566:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f568:	2300      	movs	r3, #0
 800f56a:	61fb      	str	r3, [r7, #28]
 800f56c:	2300      	movs	r3, #0
 800f56e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f570:	2300      	movs	r3, #0
 800f572:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d106      	bne.n	800f588 <tcp_split_unsent_seg+0x2c>
 800f57a:	4b95      	ldr	r3, [pc, #596]	; (800f7d0 <tcp_split_unsent_seg+0x274>)
 800f57c:	f240 324b 	movw	r2, #843	; 0x34b
 800f580:	4994      	ldr	r1, [pc, #592]	; (800f7d4 <tcp_split_unsent_seg+0x278>)
 800f582:	4895      	ldr	r0, [pc, #596]	; (800f7d8 <tcp_split_unsent_seg+0x27c>)
 800f584:	f006 f9cc 	bl	8015920 <iprintf>

  useg = pcb->unsent;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f58c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d102      	bne.n	800f59a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f594:	f04f 33ff 	mov.w	r3, #4294967295
 800f598:	e116      	b.n	800f7c8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f59a:	887b      	ldrh	r3, [r7, #2]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d109      	bne.n	800f5b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f5a0:	4b8b      	ldr	r3, [pc, #556]	; (800f7d0 <tcp_split_unsent_seg+0x274>)
 800f5a2:	f240 3253 	movw	r2, #851	; 0x353
 800f5a6:	498d      	ldr	r1, [pc, #564]	; (800f7dc <tcp_split_unsent_seg+0x280>)
 800f5a8:	488b      	ldr	r0, [pc, #556]	; (800f7d8 <tcp_split_unsent_seg+0x27c>)
 800f5aa:	f006 f9b9 	bl	8015920 <iprintf>
    return ERR_VAL;
 800f5ae:	f06f 0305 	mvn.w	r3, #5
 800f5b2:	e109      	b.n	800f7c8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	891b      	ldrh	r3, [r3, #8]
 800f5b8:	887a      	ldrh	r2, [r7, #2]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d301      	bcc.n	800f5c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	e102      	b.n	800f7c8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5c6:	887a      	ldrh	r2, [r7, #2]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d906      	bls.n	800f5da <tcp_split_unsent_seg+0x7e>
 800f5cc:	4b80      	ldr	r3, [pc, #512]	; (800f7d0 <tcp_split_unsent_seg+0x274>)
 800f5ce:	f240 325b 	movw	r2, #859	; 0x35b
 800f5d2:	4983      	ldr	r1, [pc, #524]	; (800f7e0 <tcp_split_unsent_seg+0x284>)
 800f5d4:	4880      	ldr	r0, [pc, #512]	; (800f7d8 <tcp_split_unsent_seg+0x27c>)
 800f5d6:	f006 f9a3 	bl	8015920 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	891b      	ldrh	r3, [r3, #8]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d106      	bne.n	800f5f0 <tcp_split_unsent_seg+0x94>
 800f5e2:	4b7b      	ldr	r3, [pc, #492]	; (800f7d0 <tcp_split_unsent_seg+0x274>)
 800f5e4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f5e8:	497e      	ldr	r1, [pc, #504]	; (800f7e4 <tcp_split_unsent_seg+0x288>)
 800f5ea:	487b      	ldr	r0, [pc, #492]	; (800f7d8 <tcp_split_unsent_seg+0x27c>)
 800f5ec:	f006 f998 	bl	8015920 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	7a9b      	ldrb	r3, [r3, #10]
 800f5f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f5f6:	7bfb      	ldrb	r3, [r7, #15]
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	f003 0304 	and.w	r3, r3, #4
 800f600:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	891a      	ldrh	r2, [r3, #8]
 800f606:	887b      	ldrh	r3, [r7, #2]
 800f608:	1ad3      	subs	r3, r2, r3
 800f60a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f60c:	7bbb      	ldrb	r3, [r7, #14]
 800f60e:	b29a      	uxth	r2, r3
 800f610:	89bb      	ldrh	r3, [r7, #12]
 800f612:	4413      	add	r3, r2
 800f614:	b29b      	uxth	r3, r3
 800f616:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f61a:	4619      	mov	r1, r3
 800f61c:	2036      	movs	r0, #54	; 0x36
 800f61e:	f7fb fabb 	bl	800ab98 <pbuf_alloc>
 800f622:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	f000 80b7 	beq.w	800f79a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	891a      	ldrh	r2, [r3, #8]
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	891b      	ldrh	r3, [r3, #8]
 800f636:	1ad3      	subs	r3, r2, r3
 800f638:	b29a      	uxth	r2, r3
 800f63a:	887b      	ldrh	r3, [r7, #2]
 800f63c:	4413      	add	r3, r2
 800f63e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	6858      	ldr	r0, [r3, #4]
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	685a      	ldr	r2, [r3, #4]
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	18d1      	adds	r1, r2, r3
 800f64c:	897b      	ldrh	r3, [r7, #10]
 800f64e:	89ba      	ldrh	r2, [r7, #12]
 800f650:	f7fb ff80 	bl	800b554 <pbuf_copy_partial>
 800f654:	4603      	mov	r3, r0
 800f656:	461a      	mov	r2, r3
 800f658:	89bb      	ldrh	r3, [r7, #12]
 800f65a:	4293      	cmp	r3, r2
 800f65c:	f040 809f 	bne.w	800f79e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	899b      	ldrh	r3, [r3, #12]
 800f666:	b29b      	uxth	r3, r3
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fa fa0f 	bl	8009a8c <lwip_htons>
 800f66e:	4603      	mov	r3, r0
 800f670:	b2db      	uxtb	r3, r3
 800f672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f676:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f678:	2300      	movs	r3, #0
 800f67a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f67c:	7efb      	ldrb	r3, [r7, #27]
 800f67e:	f003 0308 	and.w	r3, r3, #8
 800f682:	2b00      	cmp	r3, #0
 800f684:	d007      	beq.n	800f696 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f686:	7efb      	ldrb	r3, [r7, #27]
 800f688:	f023 0308 	bic.w	r3, r3, #8
 800f68c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f68e:	7ebb      	ldrb	r3, [r7, #26]
 800f690:	f043 0308 	orr.w	r3, r3, #8
 800f694:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f696:	7efb      	ldrb	r3, [r7, #27]
 800f698:	f003 0301 	and.w	r3, r3, #1
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d007      	beq.n	800f6b0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f6a0:	7efb      	ldrb	r3, [r7, #27]
 800f6a2:	f023 0301 	bic.w	r3, r3, #1
 800f6a6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f6a8:	7ebb      	ldrb	r3, [r7, #26]
 800f6aa:	f043 0301 	orr.w	r3, r3, #1
 800f6ae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fa f9fd 	bl	8009ab6 <lwip_htonl>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	887b      	ldrh	r3, [r7, #2]
 800f6c0:	18d1      	adds	r1, r2, r3
 800f6c2:	7eba      	ldrb	r2, [r7, #26]
 800f6c4:	7bfb      	ldrb	r3, [r7, #15]
 800f6c6:	9300      	str	r3, [sp, #0]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	6939      	ldr	r1, [r7, #16]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7ff fea7 	bl	800f420 <tcp_create_segment>
 800f6d2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d063      	beq.n	800f7a2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fb fdc6 	bl	800b270 <pbuf_clen>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f6ee:	1a9b      	subs	r3, r3, r2
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	6858      	ldr	r0, [r3, #4]
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	891a      	ldrh	r2, [r3, #8]
 800f702:	89bb      	ldrh	r3, [r7, #12]
 800f704:	1ad3      	subs	r3, r2, r3
 800f706:	b29b      	uxth	r3, r3
 800f708:	4619      	mov	r1, r3
 800f70a:	f7fb fba3 	bl	800ae54 <pbuf_realloc>
  useg->len -= remainder;
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	891a      	ldrh	r2, [r3, #8]
 800f712:	89bb      	ldrh	r3, [r7, #12]
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	b29a      	uxth	r2, r3
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	899b      	ldrh	r3, [r3, #12]
 800f722:	b29c      	uxth	r4, r3
 800f724:	7efb      	ldrb	r3, [r7, #27]
 800f726:	b29b      	uxth	r3, r3
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fa f9af 	bl	8009a8c <lwip_htons>
 800f72e:	4603      	mov	r3, r0
 800f730:	461a      	mov	r2, r3
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	4322      	orrs	r2, r4
 800f738:	b292      	uxth	r2, r2
 800f73a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	f7fb fd95 	bl	800b270 <pbuf_clen>
 800f746:	4603      	mov	r3, r0
 800f748:	461a      	mov	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f750:	4413      	add	r3, r2
 800f752:	b29a      	uxth	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fb fd86 	bl	800b270 <pbuf_clen>
 800f764:	4603      	mov	r3, r0
 800f766:	461a      	mov	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f76e:	4413      	add	r3, r2
 800f770:	b29a      	uxth	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	69fa      	ldr	r2, [r7, #28]
 800f784:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d103      	bne.n	800f796 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f796:	2300      	movs	r3, #0
 800f798:	e016      	b.n	800f7c8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f79a:	bf00      	nop
 800f79c:	e002      	b.n	800f7a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f79e:	bf00      	nop
 800f7a0:	e000      	b.n	800f7a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f7a2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d006      	beq.n	800f7b8 <tcp_split_unsent_seg+0x25c>
 800f7aa:	4b09      	ldr	r3, [pc, #36]	; (800f7d0 <tcp_split_unsent_seg+0x274>)
 800f7ac:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f7b0:	490d      	ldr	r1, [pc, #52]	; (800f7e8 <tcp_split_unsent_seg+0x28c>)
 800f7b2:	4809      	ldr	r0, [pc, #36]	; (800f7d8 <tcp_split_unsent_seg+0x27c>)
 800f7b4:	f006 f8b4 	bl	8015920 <iprintf>
  if (p != NULL) {
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f7be:	6938      	ldr	r0, [r7, #16]
 800f7c0:	f7fb fcce 	bl	800b160 <pbuf_free>
  }

  return ERR_MEM;
 800f7c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3724      	adds	r7, #36	; 0x24
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd90      	pop	{r4, r7, pc}
 800f7d0:	080185fc 	.word	0x080185fc
 800f7d4:	08018990 	.word	0x08018990
 800f7d8:	08018650 	.word	0x08018650
 800f7dc:	080189b4 	.word	0x080189b4
 800f7e0:	080189d8 	.word	0x080189d8
 800f7e4:	080189e8 	.word	0x080189e8
 800f7e8:	080189f8 	.word	0x080189f8

0800f7ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f7ec:	b590      	push	{r4, r7, lr}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d106      	bne.n	800f808 <tcp_send_fin+0x1c>
 800f7fa:	4b21      	ldr	r3, [pc, #132]	; (800f880 <tcp_send_fin+0x94>)
 800f7fc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f800:	4920      	ldr	r1, [pc, #128]	; (800f884 <tcp_send_fin+0x98>)
 800f802:	4821      	ldr	r0, [pc, #132]	; (800f888 <tcp_send_fin+0x9c>)
 800f804:	f006 f88c 	bl	8015920 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d02e      	beq.n	800f86e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f814:	60fb      	str	r3, [r7, #12]
 800f816:	e002      	b.n	800f81e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1f8      	bne.n	800f818 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	899b      	ldrh	r3, [r3, #12]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fa f92c 	bl	8009a8c <lwip_htons>
 800f834:	4603      	mov	r3, r0
 800f836:	b2db      	uxtb	r3, r3
 800f838:	f003 0307 	and.w	r3, r3, #7
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d116      	bne.n	800f86e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	899b      	ldrh	r3, [r3, #12]
 800f846:	b29c      	uxth	r4, r3
 800f848:	2001      	movs	r0, #1
 800f84a:	f7fa f91f 	bl	8009a8c <lwip_htons>
 800f84e:	4603      	mov	r3, r0
 800f850:	461a      	mov	r2, r3
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	4322      	orrs	r2, r4
 800f858:	b292      	uxth	r2, r2
 800f85a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	8b5b      	ldrh	r3, [r3, #26]
 800f860:	f043 0320 	orr.w	r3, r3, #32
 800f864:	b29a      	uxth	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f86a:	2300      	movs	r3, #0
 800f86c:	e004      	b.n	800f878 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f86e:	2101      	movs	r1, #1
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 f80b 	bl	800f88c <tcp_enqueue_flags>
 800f876:	4603      	mov	r3, r0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3714      	adds	r7, #20
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd90      	pop	{r4, r7, pc}
 800f880:	080185fc 	.word	0x080185fc
 800f884:	08018a04 	.word	0x08018a04
 800f888:	08018650 	.word	0x08018650

0800f88c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b08a      	sub	sp, #40	; 0x28
 800f890:	af02      	add	r7, sp, #8
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	460b      	mov	r3, r1
 800f896:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f898:	2300      	movs	r3, #0
 800f89a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f8a0:	78fb      	ldrb	r3, [r7, #3]
 800f8a2:	f003 0303 	and.w	r3, r3, #3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d106      	bne.n	800f8b8 <tcp_enqueue_flags+0x2c>
 800f8aa:	4b67      	ldr	r3, [pc, #412]	; (800fa48 <tcp_enqueue_flags+0x1bc>)
 800f8ac:	f240 4211 	movw	r2, #1041	; 0x411
 800f8b0:	4966      	ldr	r1, [pc, #408]	; (800fa4c <tcp_enqueue_flags+0x1c0>)
 800f8b2:	4867      	ldr	r0, [pc, #412]	; (800fa50 <tcp_enqueue_flags+0x1c4>)
 800f8b4:	f006 f834 	bl	8015920 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d106      	bne.n	800f8cc <tcp_enqueue_flags+0x40>
 800f8be:	4b62      	ldr	r3, [pc, #392]	; (800fa48 <tcp_enqueue_flags+0x1bc>)
 800f8c0:	f240 4213 	movw	r2, #1043	; 0x413
 800f8c4:	4963      	ldr	r1, [pc, #396]	; (800fa54 <tcp_enqueue_flags+0x1c8>)
 800f8c6:	4862      	ldr	r0, [pc, #392]	; (800fa50 <tcp_enqueue_flags+0x1c4>)
 800f8c8:	f006 f82a 	bl	8015920 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f8cc:	78fb      	ldrb	r3, [r7, #3]
 800f8ce:	f003 0302 	and.w	r3, r3, #2
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d001      	beq.n	800f8da <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8da:	7ffb      	ldrb	r3, [r7, #31]
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	f003 0304 	and.w	r3, r3, #4
 800f8e4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f8e6:	7dfb      	ldrb	r3, [r7, #23]
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	2036      	movs	r0, #54	; 0x36
 800f8f2:	f7fb f951 	bl	800ab98 <pbuf_alloc>
 800f8f6:	6138      	str	r0, [r7, #16]
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d109      	bne.n	800f912 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	8b5b      	ldrh	r3, [r3, #26]
 800f902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f906:	b29a      	uxth	r2, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f90c:	f04f 33ff 	mov.w	r3, #4294967295
 800f910:	e095      	b.n	800fa3e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	895a      	ldrh	r2, [r3, #10]
 800f916:	7dfb      	ldrb	r3, [r7, #23]
 800f918:	b29b      	uxth	r3, r3
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d206      	bcs.n	800f92c <tcp_enqueue_flags+0xa0>
 800f91e:	4b4a      	ldr	r3, [pc, #296]	; (800fa48 <tcp_enqueue_flags+0x1bc>)
 800f920:	f240 4239 	movw	r2, #1081	; 0x439
 800f924:	494c      	ldr	r1, [pc, #304]	; (800fa58 <tcp_enqueue_flags+0x1cc>)
 800f926:	484a      	ldr	r0, [pc, #296]	; (800fa50 <tcp_enqueue_flags+0x1c4>)
 800f928:	f005 fffa 	bl	8015920 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f930:	78fa      	ldrb	r2, [r7, #3]
 800f932:	7ffb      	ldrb	r3, [r7, #31]
 800f934:	9300      	str	r3, [sp, #0]
 800f936:	460b      	mov	r3, r1
 800f938:	6939      	ldr	r1, [r7, #16]
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7ff fd70 	bl	800f420 <tcp_create_segment>
 800f940:	60f8      	str	r0, [r7, #12]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d109      	bne.n	800f95c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	8b5b      	ldrh	r3, [r3, #26]
 800f94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f950:	b29a      	uxth	r2, r3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f956:	f04f 33ff 	mov.w	r3, #4294967295
 800f95a:	e070      	b.n	800fa3e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	f003 0303 	and.w	r3, r3, #3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d006      	beq.n	800f976 <tcp_enqueue_flags+0xea>
 800f968:	4b37      	ldr	r3, [pc, #220]	; (800fa48 <tcp_enqueue_flags+0x1bc>)
 800f96a:	f240 4242 	movw	r2, #1090	; 0x442
 800f96e:	493b      	ldr	r1, [pc, #236]	; (800fa5c <tcp_enqueue_flags+0x1d0>)
 800f970:	4837      	ldr	r0, [pc, #220]	; (800fa50 <tcp_enqueue_flags+0x1c4>)
 800f972:	f005 ffd5 	bl	8015920 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	891b      	ldrh	r3, [r3, #8]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d006      	beq.n	800f98c <tcp_enqueue_flags+0x100>
 800f97e:	4b32      	ldr	r3, [pc, #200]	; (800fa48 <tcp_enqueue_flags+0x1bc>)
 800f980:	f240 4243 	movw	r2, #1091	; 0x443
 800f984:	4936      	ldr	r1, [pc, #216]	; (800fa60 <tcp_enqueue_flags+0x1d4>)
 800f986:	4832      	ldr	r0, [pc, #200]	; (800fa50 <tcp_enqueue_flags+0x1c4>)
 800f988:	f005 ffca 	bl	8015920 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f990:	2b00      	cmp	r3, #0
 800f992:	d103      	bne.n	800f99c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	66da      	str	r2, [r3, #108]	; 0x6c
 800f99a:	e00d      	b.n	800f9b8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a0:	61bb      	str	r3, [r7, #24]
 800f9a2:	e002      	b.n	800f9aa <tcp_enqueue_flags+0x11e>
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	61bb      	str	r3, [r7, #24]
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d1f8      	bne.n	800f9a4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f9c0:	78fb      	ldrb	r3, [r7, #3]
 800f9c2:	f003 0302 	and.w	r3, r3, #2
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d104      	bne.n	800f9d4 <tcp_enqueue_flags+0x148>
 800f9ca:	78fb      	ldrb	r3, [r7, #3]
 800f9cc:	f003 0301 	and.w	r3, r3, #1
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d004      	beq.n	800f9de <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f9de:	78fb      	ldrb	r3, [r7, #3]
 800f9e0:	f003 0301 	and.w	r3, r3, #1
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d006      	beq.n	800f9f6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	8b5b      	ldrh	r3, [r3, #26]
 800f9ec:	f043 0320 	orr.w	r3, r3, #32
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fb fc38 	bl	800b270 <pbuf_clen>
 800fa00:	4603      	mov	r3, r0
 800fa02:	461a      	mov	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa0a:	4413      	add	r3, r2
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00e      	beq.n	800fa3c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d10a      	bne.n	800fa3c <tcp_enqueue_flags+0x1b0>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d106      	bne.n	800fa3c <tcp_enqueue_flags+0x1b0>
 800fa2e:	4b06      	ldr	r3, [pc, #24]	; (800fa48 <tcp_enqueue_flags+0x1bc>)
 800fa30:	f240 4265 	movw	r2, #1125	; 0x465
 800fa34:	490b      	ldr	r1, [pc, #44]	; (800fa64 <tcp_enqueue_flags+0x1d8>)
 800fa36:	4806      	ldr	r0, [pc, #24]	; (800fa50 <tcp_enqueue_flags+0x1c4>)
 800fa38:	f005 ff72 	bl	8015920 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3720      	adds	r7, #32
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	080185fc 	.word	0x080185fc
 800fa4c:	08018a20 	.word	0x08018a20
 800fa50:	08018650 	.word	0x08018650
 800fa54:	08018a78 	.word	0x08018a78
 800fa58:	08018a98 	.word	0x08018a98
 800fa5c:	08018ad4 	.word	0x08018ad4
 800fa60:	08018aec 	.word	0x08018aec
 800fa64:	08018b18 	.word	0x08018b18

0800fa68 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fa68:	b5b0      	push	{r4, r5, r7, lr}
 800fa6a:	b08a      	sub	sp, #40	; 0x28
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d106      	bne.n	800fa84 <tcp_output+0x1c>
 800fa76:	4b8a      	ldr	r3, [pc, #552]	; (800fca0 <tcp_output+0x238>)
 800fa78:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fa7c:	4989      	ldr	r1, [pc, #548]	; (800fca4 <tcp_output+0x23c>)
 800fa7e:	488a      	ldr	r0, [pc, #552]	; (800fca8 <tcp_output+0x240>)
 800fa80:	f005 ff4e 	bl	8015920 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	7d1b      	ldrb	r3, [r3, #20]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d106      	bne.n	800fa9a <tcp_output+0x32>
 800fa8c:	4b84      	ldr	r3, [pc, #528]	; (800fca0 <tcp_output+0x238>)
 800fa8e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fa92:	4986      	ldr	r1, [pc, #536]	; (800fcac <tcp_output+0x244>)
 800fa94:	4884      	ldr	r0, [pc, #528]	; (800fca8 <tcp_output+0x240>)
 800fa96:	f005 ff43 	bl	8015920 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fa9a:	4b85      	ldr	r3, [pc, #532]	; (800fcb0 <tcp_output+0x248>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d101      	bne.n	800faa8 <tcp_output+0x40>
    return ERR_OK;
 800faa4:	2300      	movs	r3, #0
 800faa6:	e1ce      	b.n	800fe46 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fab4:	4293      	cmp	r3, r2
 800fab6:	bf28      	it	cs
 800fab8:	4613      	movcs	r3, r2
 800faba:	b29b      	uxth	r3, r3
 800fabc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fac2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d10b      	bne.n	800fae2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	8b5b      	ldrh	r3, [r3, #26]
 800face:	f003 0302 	and.w	r3, r3, #2
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	f000 81aa 	beq.w	800fe2c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 fdcb 	bl	8010674 <tcp_send_empty_ack>
 800fade:	4603      	mov	r3, r0
 800fae0:	e1b1      	b.n	800fe46 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fae2:	6879      	ldr	r1, [r7, #4]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	3304      	adds	r3, #4
 800fae8:	461a      	mov	r2, r3
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f7ff fc7c 	bl	800f3e8 <tcp_route>
 800faf0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d102      	bne.n	800fafe <tcp_output+0x96>
    return ERR_RTE;
 800faf8:	f06f 0303 	mvn.w	r3, #3
 800fafc:	e1a3      	b.n	800fe46 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d003      	beq.n	800fb0c <tcp_output+0xa4>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d111      	bne.n	800fb30 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d002      	beq.n	800fb18 <tcp_output+0xb0>
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	3304      	adds	r3, #4
 800fb16:	e000      	b.n	800fb1a <tcp_output+0xb2>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d102      	bne.n	800fb28 <tcp_output+0xc0>
      return ERR_RTE;
 800fb22:	f06f 0303 	mvn.w	r3, #3
 800fb26:	e18e      	b.n	800fe46 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7f9 ffbd 	bl	8009ab6 <lwip_htonl>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb46:	8912      	ldrh	r2, [r2, #8]
 800fb48:	4413      	add	r3, r2
 800fb4a:	69ba      	ldr	r2, [r7, #24]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d227      	bcs.n	800fba0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb56:	461a      	mov	r2, r3
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d114      	bne.n	800fb88 <tcp_output+0x120>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d110      	bne.n	800fb88 <tcp_output+0x120>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d10b      	bne.n	800fb88 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2200      	movs	r2, #0
 800fb84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	8b5b      	ldrh	r3, [r3, #26]
 800fb8c:	f003 0302 	and.w	r3, r3, #2
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f000 814d 	beq.w	800fe30 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fd6c 	bl	8010674 <tcp_send_empty_ack>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	e152      	b.n	800fe46 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 811c 	beq.w	800fdee <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fbb6:	e002      	b.n	800fbbe <tcp_output+0x156>
 800fbb8:	6a3b      	ldr	r3, [r7, #32]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	623b      	str	r3, [r7, #32]
 800fbbe:	6a3b      	ldr	r3, [r7, #32]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d1f8      	bne.n	800fbb8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fbc6:	e112      	b.n	800fdee <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	899b      	ldrh	r3, [r3, #12]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7f9 ff5b 	bl	8009a8c <lwip_htons>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	f003 0304 	and.w	r3, r3, #4
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d006      	beq.n	800fbf0 <tcp_output+0x188>
 800fbe2:	4b2f      	ldr	r3, [pc, #188]	; (800fca0 <tcp_output+0x238>)
 800fbe4:	f240 5236 	movw	r2, #1334	; 0x536
 800fbe8:	4932      	ldr	r1, [pc, #200]	; (800fcb4 <tcp_output+0x24c>)
 800fbea:	482f      	ldr	r0, [pc, #188]	; (800fca8 <tcp_output+0x240>)
 800fbec:	f005 fe98 	bl	8015920 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d01f      	beq.n	800fc38 <tcp_output+0x1d0>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	8b5b      	ldrh	r3, [r3, #26]
 800fbfc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d119      	bne.n	800fc38 <tcp_output+0x1d0>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00b      	beq.n	800fc24 <tcp_output+0x1bc>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d110      	bne.n	800fc38 <tcp_output+0x1d0>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc1a:	891a      	ldrh	r2, [r3, #8]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d209      	bcs.n	800fc38 <tcp_output+0x1d0>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d004      	beq.n	800fc38 <tcp_output+0x1d0>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc34:	2b08      	cmp	r3, #8
 800fc36:	d901      	bls.n	800fc3c <tcp_output+0x1d4>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	e000      	b.n	800fc3e <tcp_output+0x1d6>
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d106      	bne.n	800fc50 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	8b5b      	ldrh	r3, [r3, #26]
 800fc46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f000 80e4 	beq.w	800fe18 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	7d1b      	ldrb	r3, [r3, #20]
 800fc54:	2b02      	cmp	r3, #2
 800fc56:	d00d      	beq.n	800fc74 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	899b      	ldrh	r3, [r3, #12]
 800fc5e:	b29c      	uxth	r4, r3
 800fc60:	2010      	movs	r0, #16
 800fc62:	f7f9 ff13 	bl	8009a8c <lwip_htons>
 800fc66:	4603      	mov	r3, r0
 800fc68:	461a      	mov	r2, r3
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	4322      	orrs	r2, r4
 800fc70:	b292      	uxth	r2, r2
 800fc72:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fc74:	697a      	ldr	r2, [r7, #20]
 800fc76:	6879      	ldr	r1, [r7, #4]
 800fc78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc7a:	f000 f909 	bl	800fe90 <tcp_output_segment>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fc82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d016      	beq.n	800fcb8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	8b5b      	ldrh	r3, [r3, #26]
 800fc8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	835a      	strh	r2, [r3, #26]
      return err;
 800fc98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc9c:	e0d3      	b.n	800fe46 <tcp_output+0x3de>
 800fc9e:	bf00      	nop
 800fca0:	080185fc 	.word	0x080185fc
 800fca4:	08018b40 	.word	0x08018b40
 800fca8:	08018650 	.word	0x08018650
 800fcac:	08018b58 	.word	0x08018b58
 800fcb0:	2000b07c 	.word	0x2000b07c
 800fcb4:	08018b80 	.word	0x08018b80
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	7d1b      	ldrb	r3, [r3, #20]
 800fcc4:	2b02      	cmp	r3, #2
 800fcc6:	d006      	beq.n	800fcd6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	8b5b      	ldrh	r3, [r3, #26]
 800fccc:	f023 0303 	bic.w	r3, r3, #3
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7f9 feea 	bl	8009ab6 <lwip_htonl>
 800fce2:	4604      	mov	r4, r0
 800fce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce6:	891b      	ldrh	r3, [r3, #8]
 800fce8:	461d      	mov	r5, r3
 800fcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	899b      	ldrh	r3, [r3, #12]
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7f9 feca 	bl	8009a8c <lwip_htons>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	f003 0303 	and.w	r3, r3, #3
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <tcp_output+0x2a0>
 800fd04:	2301      	movs	r3, #1
 800fd06:	e000      	b.n	800fd0a <tcp_output+0x2a2>
 800fd08:	2300      	movs	r3, #0
 800fd0a:	442b      	add	r3, r5
 800fd0c:	4423      	add	r3, r4
 800fd0e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	da02      	bge.n	800fd22 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd24:	891b      	ldrh	r3, [r3, #8]
 800fd26:	461c      	mov	r4, r3
 800fd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	899b      	ldrh	r3, [r3, #12]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7f9 feab 	bl	8009a8c <lwip_htons>
 800fd36:	4603      	mov	r3, r0
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	f003 0303 	and.w	r3, r3, #3
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <tcp_output+0x2de>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e000      	b.n	800fd48 <tcp_output+0x2e0>
 800fd46:	2300      	movs	r3, #0
 800fd48:	4423      	add	r3, r4
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d049      	beq.n	800fde2 <tcp_output+0x37a>
      seg->next = NULL;
 800fd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d105      	bne.n	800fd68 <tcp_output+0x300>
        pcb->unacked = seg;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd60:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd64:	623b      	str	r3, [r7, #32]
 800fd66:	e03f      	b.n	800fde8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f9 fea1 	bl	8009ab6 <lwip_htonl>
 800fd74:	4604      	mov	r4, r0
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	68db      	ldr	r3, [r3, #12]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7f9 fe9a 	bl	8009ab6 <lwip_htonl>
 800fd82:	4603      	mov	r3, r0
 800fd84:	1ae3      	subs	r3, r4, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	da24      	bge.n	800fdd4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	3370      	adds	r3, #112	; 0x70
 800fd8e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fd90:	e002      	b.n	800fd98 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d011      	beq.n	800fdc4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7f9 fe84 	bl	8009ab6 <lwip_htonl>
 800fdae:	4604      	mov	r4, r0
 800fdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7f9 fe7d 	bl	8009ab6 <lwip_htonl>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	dbe6      	blt.n	800fd92 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	e009      	b.n	800fde8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fdd4:	6a3b      	ldr	r3, [r7, #32]
 800fdd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdd8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fdda:	6a3b      	ldr	r3, [r7, #32]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	623b      	str	r3, [r7, #32]
 800fde0:	e002      	b.n	800fde8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fde2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fde4:	f7fc fc3f 	bl	800c666 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdec:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d012      	beq.n	800fe1a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7f9 fe5b 	bl	8009ab6 <lwip_htonl>
 800fe00:	4602      	mov	r2, r0
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe0a:	8912      	ldrh	r2, [r2, #8]
 800fe0c:	4413      	add	r3, r2
  while (seg != NULL &&
 800fe0e:	69ba      	ldr	r2, [r7, #24]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	f4bf aed9 	bcs.w	800fbc8 <tcp_output+0x160>
 800fe16:	e000      	b.n	800fe1a <tcp_output+0x3b2>
      break;
 800fe18:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d108      	bne.n	800fe34 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fe2a:	e004      	b.n	800fe36 <tcp_output+0x3ce>
    goto output_done;
 800fe2c:	bf00      	nop
 800fe2e:	e002      	b.n	800fe36 <tcp_output+0x3ce>
    goto output_done;
 800fe30:	bf00      	nop
 800fe32:	e000      	b.n	800fe36 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fe34:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	8b5b      	ldrh	r3, [r3, #26]
 800fe3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3728      	adds	r7, #40	; 0x28
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bdb0      	pop	{r4, r5, r7, pc}
 800fe4e:	bf00      	nop

0800fe50 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d106      	bne.n	800fe6c <tcp_output_segment_busy+0x1c>
 800fe5e:	4b09      	ldr	r3, [pc, #36]	; (800fe84 <tcp_output_segment_busy+0x34>)
 800fe60:	f240 529a 	movw	r2, #1434	; 0x59a
 800fe64:	4908      	ldr	r1, [pc, #32]	; (800fe88 <tcp_output_segment_busy+0x38>)
 800fe66:	4809      	ldr	r0, [pc, #36]	; (800fe8c <tcp_output_segment_busy+0x3c>)
 800fe68:	f005 fd5a 	bl	8015920 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	7b9b      	ldrb	r3, [r3, #14]
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d001      	beq.n	800fe7a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fe76:	2301      	movs	r3, #1
 800fe78:	e000      	b.n	800fe7c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fe7a:	2300      	movs	r3, #0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	080185fc 	.word	0x080185fc
 800fe88:	08018b98 	.word	0x08018b98
 800fe8c:	08018650 	.word	0x08018650

0800fe90 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fe90:	b5b0      	push	{r4, r5, r7, lr}
 800fe92:	b08c      	sub	sp, #48	; 0x30
 800fe94:	af04      	add	r7, sp, #16
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d106      	bne.n	800feb0 <tcp_output_segment+0x20>
 800fea2:	4b63      	ldr	r3, [pc, #396]	; (8010030 <tcp_output_segment+0x1a0>)
 800fea4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800fea8:	4962      	ldr	r1, [pc, #392]	; (8010034 <tcp_output_segment+0x1a4>)
 800feaa:	4863      	ldr	r0, [pc, #396]	; (8010038 <tcp_output_segment+0x1a8>)
 800feac:	f005 fd38 	bl	8015920 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d106      	bne.n	800fec4 <tcp_output_segment+0x34>
 800feb6:	4b5e      	ldr	r3, [pc, #376]	; (8010030 <tcp_output_segment+0x1a0>)
 800feb8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800febc:	495f      	ldr	r1, [pc, #380]	; (801003c <tcp_output_segment+0x1ac>)
 800febe:	485e      	ldr	r0, [pc, #376]	; (8010038 <tcp_output_segment+0x1a8>)
 800fec0:	f005 fd2e 	bl	8015920 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d106      	bne.n	800fed8 <tcp_output_segment+0x48>
 800feca:	4b59      	ldr	r3, [pc, #356]	; (8010030 <tcp_output_segment+0x1a0>)
 800fecc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800fed0:	495b      	ldr	r1, [pc, #364]	; (8010040 <tcp_output_segment+0x1b0>)
 800fed2:	4859      	ldr	r0, [pc, #356]	; (8010038 <tcp_output_segment+0x1a8>)
 800fed4:	f005 fd24 	bl	8015920 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7ff ffb9 	bl	800fe50 <tcp_output_segment_busy>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d001      	beq.n	800fee8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	e09f      	b.n	8010028 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	68dc      	ldr	r4, [r3, #12]
 800fef0:	4610      	mov	r0, r2
 800fef2:	f7f9 fde0 	bl	8009ab6 <lwip_htonl>
 800fef6:	4603      	mov	r3, r0
 800fef8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	68dc      	ldr	r4, [r3, #12]
 800ff02:	4610      	mov	r0, r2
 800ff04:	f7f9 fdc2 	bl	8009a8c <lwip_htons>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff10:	68ba      	ldr	r2, [r7, #8]
 800ff12:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ff14:	441a      	add	r2, r3
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	3314      	adds	r3, #20
 800ff20:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	7a9b      	ldrb	r3, [r3, #10]
 800ff26:	f003 0301 	and.w	r3, r3, #1
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d015      	beq.n	800ff5a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	3304      	adds	r3, #4
 800ff32:	461a      	mov	r2, r3
 800ff34:	6879      	ldr	r1, [r7, #4]
 800ff36:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ff3a:	f7fc fe8b 	bl	800cc54 <tcp_eff_send_mss_netif>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ff42:	8b7b      	ldrh	r3, [r7, #26]
 800ff44:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7f9 fdb4 	bl	8009ab6 <lwip_htonl>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	3304      	adds	r3, #4
 800ff58:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	da02      	bge.n	800ff6a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	2200      	movs	r2, #0
 800ff68:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d10c      	bne.n	800ff8c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ff72:	4b34      	ldr	r3, [pc, #208]	; (8010044 <tcp_output_segment+0x1b4>)
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7f9 fd98 	bl	8009ab6 <lwip_htonl>
 800ff86:	4602      	mov	r2, r0
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	68da      	ldr	r2, [r3, #12]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	8959      	ldrh	r1, [r3, #10]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	8b3a      	ldrh	r2, [r7, #24]
 800ffa6:	1a8a      	subs	r2, r1, r2
 800ffa8:	b292      	uxth	r2, r2
 800ffaa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	8919      	ldrh	r1, [r3, #8]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	8b3a      	ldrh	r2, [r7, #24]
 800ffb8:	1a8a      	subs	r2, r1, r2
 800ffba:	b292      	uxth	r2, r2
 800ffbc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	68d2      	ldr	r2, [r2, #12]
 800ffc6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	741a      	strb	r2, [r3, #16]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	f103 0214 	add.w	r2, r3, #20
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	7a9b      	ldrb	r3, [r3, #10]
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	f003 0304 	and.w	r3, r3, #4
 800ffe6:	4413      	add	r3, r2
 800ffe8:	69fa      	ldr	r2, [r7, #28]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d006      	beq.n	800fffc <tcp_output_segment+0x16c>
 800ffee:	4b10      	ldr	r3, [pc, #64]	; (8010030 <tcp_output_segment+0x1a0>)
 800fff0:	f240 621c 	movw	r2, #1564	; 0x61c
 800fff4:	4914      	ldr	r1, [pc, #80]	; (8010048 <tcp_output_segment+0x1b8>)
 800fff6:	4810      	ldr	r0, [pc, #64]	; (8010038 <tcp_output_segment+0x1a8>)
 800fff8:	f005 fc92 	bl	8015920 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6858      	ldr	r0, [r3, #4]
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	1d1c      	adds	r4, r3, #4
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	7add      	ldrb	r5, [r3, #11]
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	7a9b      	ldrb	r3, [r3, #10]
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	9202      	str	r2, [sp, #8]
 8010012:	2206      	movs	r2, #6
 8010014:	9201      	str	r2, [sp, #4]
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	462b      	mov	r3, r5
 801001a:	4622      	mov	r2, r4
 801001c:	f004 fbee 	bl	80147fc <ip4_output_if>
 8010020:	4603      	mov	r3, r0
 8010022:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010024:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3720      	adds	r7, #32
 801002c:	46bd      	mov	sp, r7
 801002e:	bdb0      	pop	{r4, r5, r7, pc}
 8010030:	080185fc 	.word	0x080185fc
 8010034:	08018bc0 	.word	0x08018bc0
 8010038:	08018650 	.word	0x08018650
 801003c:	08018be0 	.word	0x08018be0
 8010040:	08018c00 	.word	0x08018c00
 8010044:	2000b030 	.word	0x2000b030
 8010048:	08018c24 	.word	0x08018c24

0801004c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801004c:	b5b0      	push	{r4, r5, r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d106      	bne.n	8010068 <tcp_rexmit_rto_prepare+0x1c>
 801005a:	4b31      	ldr	r3, [pc, #196]	; (8010120 <tcp_rexmit_rto_prepare+0xd4>)
 801005c:	f240 6263 	movw	r2, #1635	; 0x663
 8010060:	4930      	ldr	r1, [pc, #192]	; (8010124 <tcp_rexmit_rto_prepare+0xd8>)
 8010062:	4831      	ldr	r0, [pc, #196]	; (8010128 <tcp_rexmit_rto_prepare+0xdc>)
 8010064:	f005 fc5c 	bl	8015920 <iprintf>

  if (pcb->unacked == NULL) {
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801006c:	2b00      	cmp	r3, #0
 801006e:	d102      	bne.n	8010076 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010070:	f06f 0305 	mvn.w	r3, #5
 8010074:	e050      	b.n	8010118 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801007a:	60fb      	str	r3, [r7, #12]
 801007c:	e00b      	b.n	8010096 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f7ff fee6 	bl	800fe50 <tcp_output_segment_busy>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d002      	beq.n	8010090 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801008a:	f06f 0305 	mvn.w	r3, #5
 801008e:	e043      	b.n	8010118 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	60fb      	str	r3, [r7, #12]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1ef      	bne.n	801007e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f7ff fed6 	bl	800fe50 <tcp_output_segment_busy>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d002      	beq.n	80100b0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80100aa:	f06f 0305 	mvn.w	r3, #5
 80100ae:	e033      	b.n	8010118 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	8b5b      	ldrh	r3, [r3, #26]
 80100ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	4618      	mov	r0, r3
 80100dc:	f7f9 fceb 	bl	8009ab6 <lwip_htonl>
 80100e0:	4604      	mov	r4, r0
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	891b      	ldrh	r3, [r3, #8]
 80100e6:	461d      	mov	r5, r3
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	899b      	ldrh	r3, [r3, #12]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7f9 fccb 	bl	8009a8c <lwip_htons>
 80100f6:	4603      	mov	r3, r0
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	f003 0303 	and.w	r3, r3, #3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d001      	beq.n	8010106 <tcp_rexmit_rto_prepare+0xba>
 8010102:	2301      	movs	r3, #1
 8010104:	e000      	b.n	8010108 <tcp_rexmit_rto_prepare+0xbc>
 8010106:	2300      	movs	r3, #0
 8010108:	442b      	add	r3, r5
 801010a:	18e2      	adds	r2, r4, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bdb0      	pop	{r4, r5, r7, pc}
 8010120:	080185fc 	.word	0x080185fc
 8010124:	08018c38 	.word	0x08018c38
 8010128:	08018650 	.word	0x08018650

0801012c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d106      	bne.n	8010148 <tcp_rexmit_rto_commit+0x1c>
 801013a:	4b0d      	ldr	r3, [pc, #52]	; (8010170 <tcp_rexmit_rto_commit+0x44>)
 801013c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010140:	490c      	ldr	r1, [pc, #48]	; (8010174 <tcp_rexmit_rto_commit+0x48>)
 8010142:	480d      	ldr	r0, [pc, #52]	; (8010178 <tcp_rexmit_rto_commit+0x4c>)
 8010144:	f005 fbec 	bl	8015920 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801014e:	2bff      	cmp	r3, #255	; 0xff
 8010150:	d007      	beq.n	8010162 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010158:	3301      	adds	r3, #1
 801015a:	b2da      	uxtb	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f7ff fc80 	bl	800fa68 <tcp_output>
}
 8010168:	bf00      	nop
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	080185fc 	.word	0x080185fc
 8010174:	08018c5c 	.word	0x08018c5c
 8010178:	08018650 	.word	0x08018650

0801017c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d106      	bne.n	8010198 <tcp_rexmit_rto+0x1c>
 801018a:	4b0a      	ldr	r3, [pc, #40]	; (80101b4 <tcp_rexmit_rto+0x38>)
 801018c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010190:	4909      	ldr	r1, [pc, #36]	; (80101b8 <tcp_rexmit_rto+0x3c>)
 8010192:	480a      	ldr	r0, [pc, #40]	; (80101bc <tcp_rexmit_rto+0x40>)
 8010194:	f005 fbc4 	bl	8015920 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7ff ff57 	bl	801004c <tcp_rexmit_rto_prepare>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d102      	bne.n	80101aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7ff ffc1 	bl	801012c <tcp_rexmit_rto_commit>
  }
}
 80101aa:	bf00      	nop
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	080185fc 	.word	0x080185fc
 80101b8:	08018c80 	.word	0x08018c80
 80101bc:	08018650 	.word	0x08018650

080101c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80101c0:	b590      	push	{r4, r7, lr}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d106      	bne.n	80101dc <tcp_rexmit+0x1c>
 80101ce:	4b2f      	ldr	r3, [pc, #188]	; (801028c <tcp_rexmit+0xcc>)
 80101d0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80101d4:	492e      	ldr	r1, [pc, #184]	; (8010290 <tcp_rexmit+0xd0>)
 80101d6:	482f      	ldr	r0, [pc, #188]	; (8010294 <tcp_rexmit+0xd4>)
 80101d8:	f005 fba2 	bl	8015920 <iprintf>

  if (pcb->unacked == NULL) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d102      	bne.n	80101ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 80101e4:	f06f 0305 	mvn.w	r3, #5
 80101e8:	e04c      	b.n	8010284 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80101f0:	68b8      	ldr	r0, [r7, #8]
 80101f2:	f7ff fe2d 	bl	800fe50 <tcp_output_segment_busy>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d002      	beq.n	8010202 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80101fc:	f06f 0305 	mvn.w	r3, #5
 8010200:	e040      	b.n	8010284 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	336c      	adds	r3, #108	; 0x6c
 801020e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010210:	e002      	b.n	8010218 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d011      	beq.n	8010244 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	4618      	mov	r0, r3
 801022a:	f7f9 fc44 	bl	8009ab6 <lwip_htonl>
 801022e:	4604      	mov	r4, r0
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	4618      	mov	r0, r3
 8010238:	f7f9 fc3d 	bl	8009ab6 <lwip_htonl>
 801023c:	4603      	mov	r3, r0
 801023e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010240:	2b00      	cmp	r3, #0
 8010242:	dbe6      	blt.n	8010212 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	68ba      	ldr	r2, [r7, #8]
 8010250:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d103      	bne.n	8010262 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2200      	movs	r2, #0
 801025e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010268:	2bff      	cmp	r3, #255	; 0xff
 801026a:	d007      	beq.n	801027c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010272:	3301      	adds	r3, #1
 8010274:	b2da      	uxtb	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010282:	2300      	movs	r3, #0
}
 8010284:	4618      	mov	r0, r3
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	bd90      	pop	{r4, r7, pc}
 801028c:	080185fc 	.word	0x080185fc
 8010290:	08018c9c 	.word	0x08018c9c
 8010294:	08018650 	.word	0x08018650

08010298 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <tcp_rexmit_fast+0x1c>
 80102a6:	4b2a      	ldr	r3, [pc, #168]	; (8010350 <tcp_rexmit_fast+0xb8>)
 80102a8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80102ac:	4929      	ldr	r1, [pc, #164]	; (8010354 <tcp_rexmit_fast+0xbc>)
 80102ae:	482a      	ldr	r0, [pc, #168]	; (8010358 <tcp_rexmit_fast+0xc0>)
 80102b0:	f005 fb36 	bl	8015920 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d045      	beq.n	8010348 <tcp_rexmit_fast+0xb0>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	8b5b      	ldrh	r3, [r3, #26]
 80102c0:	f003 0304 	and.w	r3, r3, #4
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d13f      	bne.n	8010348 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff ff79 	bl	80101c0 <tcp_rexmit>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d139      	bne.n	8010348 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80102e0:	4293      	cmp	r3, r2
 80102e2:	bf28      	it	cs
 80102e4:	4613      	movcs	r3, r2
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	da00      	bge.n	80102ee <tcp_rexmit_fast+0x56>
 80102ec:	3301      	adds	r3, #1
 80102ee:	105b      	asrs	r3, r3, #1
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80102fe:	461a      	mov	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010304:	005b      	lsls	r3, r3, #1
 8010306:	429a      	cmp	r2, r3
 8010308:	d206      	bcs.n	8010318 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801030e:	005b      	lsls	r3, r3, #1
 8010310:	b29a      	uxth	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010322:	4619      	mov	r1, r3
 8010324:	0049      	lsls	r1, r1, #1
 8010326:	440b      	add	r3, r1
 8010328:	b29b      	uxth	r3, r3
 801032a:	4413      	add	r3, r2
 801032c:	b29a      	uxth	r2, r3
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	8b5b      	ldrh	r3, [r3, #26]
 8010338:	f043 0304 	orr.w	r3, r3, #4
 801033c:	b29a      	uxth	r2, r3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010348:	bf00      	nop
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	080185fc 	.word	0x080185fc
 8010354:	08018cb4 	.word	0x08018cb4
 8010358:	08018650 	.word	0x08018650

0801035c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	607b      	str	r3, [r7, #4]
 8010366:	460b      	mov	r3, r1
 8010368:	817b      	strh	r3, [r7, #10]
 801036a:	4613      	mov	r3, r2
 801036c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801036e:	897a      	ldrh	r2, [r7, #10]
 8010370:	893b      	ldrh	r3, [r7, #8]
 8010372:	4413      	add	r3, r2
 8010374:	b29b      	uxth	r3, r3
 8010376:	3314      	adds	r3, #20
 8010378:	b29b      	uxth	r3, r3
 801037a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801037e:	4619      	mov	r1, r3
 8010380:	2022      	movs	r0, #34	; 0x22
 8010382:	f7fa fc09 	bl	800ab98 <pbuf_alloc>
 8010386:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d04d      	beq.n	801042a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801038e:	897b      	ldrh	r3, [r7, #10]
 8010390:	3313      	adds	r3, #19
 8010392:	697a      	ldr	r2, [r7, #20]
 8010394:	8952      	ldrh	r2, [r2, #10]
 8010396:	4293      	cmp	r3, r2
 8010398:	db06      	blt.n	80103a8 <tcp_output_alloc_header_common+0x4c>
 801039a:	4b26      	ldr	r3, [pc, #152]	; (8010434 <tcp_output_alloc_header_common+0xd8>)
 801039c:	f240 7223 	movw	r2, #1827	; 0x723
 80103a0:	4925      	ldr	r1, [pc, #148]	; (8010438 <tcp_output_alloc_header_common+0xdc>)
 80103a2:	4826      	ldr	r0, [pc, #152]	; (801043c <tcp_output_alloc_header_common+0xe0>)
 80103a4:	f005 fabc 	bl	8015920 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80103ae:	8c3b      	ldrh	r3, [r7, #32]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7f9 fb6b 	bl	8009a8c <lwip_htons>
 80103b6:	4603      	mov	r3, r0
 80103b8:	461a      	mov	r2, r3
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80103be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7f9 fb63 	bl	8009a8c <lwip_htons>
 80103c6:	4603      	mov	r3, r0
 80103c8:	461a      	mov	r2, r3
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80103d4:	68f8      	ldr	r0, [r7, #12]
 80103d6:	f7f9 fb6e 	bl	8009ab6 <lwip_htonl>
 80103da:	4602      	mov	r2, r0
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80103e0:	897b      	ldrh	r3, [r7, #10]
 80103e2:	089b      	lsrs	r3, r3, #2
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	3305      	adds	r3, #5
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	031b      	lsls	r3, r3, #12
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	4313      	orrs	r3, r2
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7f9 fb47 	bl	8009a8c <lwip_htons>
 80103fe:	4603      	mov	r3, r0
 8010400:	461a      	mov	r2, r3
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010406:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010408:	4618      	mov	r0, r3
 801040a:	f7f9 fb3f 	bl	8009a8c <lwip_htons>
 801040e:	4603      	mov	r3, r0
 8010410:	461a      	mov	r2, r3
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	2200      	movs	r2, #0
 801041a:	741a      	strb	r2, [r3, #16]
 801041c:	2200      	movs	r2, #0
 801041e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	2200      	movs	r2, #0
 8010424:	749a      	strb	r2, [r3, #18]
 8010426:	2200      	movs	r2, #0
 8010428:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801042a:	697b      	ldr	r3, [r7, #20]
}
 801042c:	4618      	mov	r0, r3
 801042e:	3718      	adds	r7, #24
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	080185fc 	.word	0x080185fc
 8010438:	08018cd4 	.word	0x08018cd4
 801043c:	08018650 	.word	0x08018650

08010440 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010440:	b5b0      	push	{r4, r5, r7, lr}
 8010442:	b08a      	sub	sp, #40	; 0x28
 8010444:	af04      	add	r7, sp, #16
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	607b      	str	r3, [r7, #4]
 801044a:	460b      	mov	r3, r1
 801044c:	817b      	strh	r3, [r7, #10]
 801044e:	4613      	mov	r3, r2
 8010450:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d106      	bne.n	8010466 <tcp_output_alloc_header+0x26>
 8010458:	4b15      	ldr	r3, [pc, #84]	; (80104b0 <tcp_output_alloc_header+0x70>)
 801045a:	f240 7242 	movw	r2, #1858	; 0x742
 801045e:	4915      	ldr	r1, [pc, #84]	; (80104b4 <tcp_output_alloc_header+0x74>)
 8010460:	4815      	ldr	r0, [pc, #84]	; (80104b8 <tcp_output_alloc_header+0x78>)
 8010462:	f005 fa5d 	bl	8015920 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	8adb      	ldrh	r3, [r3, #22]
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	8b12      	ldrh	r2, [r2, #24]
 8010472:	68f9      	ldr	r1, [r7, #12]
 8010474:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010476:	893d      	ldrh	r5, [r7, #8]
 8010478:	897c      	ldrh	r4, [r7, #10]
 801047a:	9103      	str	r1, [sp, #12]
 801047c:	2110      	movs	r1, #16
 801047e:	9102      	str	r1, [sp, #8]
 8010480:	9201      	str	r2, [sp, #4]
 8010482:	9300      	str	r3, [sp, #0]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	462a      	mov	r2, r5
 8010488:	4621      	mov	r1, r4
 801048a:	f7ff ff67 	bl	801035c <tcp_output_alloc_header_common>
 801048e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d006      	beq.n	80104a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049a:	68fa      	ldr	r2, [r7, #12]
 801049c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801049e:	441a      	add	r2, r3
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80104a4:	697b      	ldr	r3, [r7, #20]
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3718      	adds	r7, #24
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bdb0      	pop	{r4, r5, r7, pc}
 80104ae:	bf00      	nop
 80104b0:	080185fc 	.word	0x080185fc
 80104b4:	08018d04 	.word	0x08018d04
 80104b8:	08018650 	.word	0x08018650

080104bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b088      	sub	sp, #32
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	4611      	mov	r1, r2
 80104c8:	461a      	mov	r2, r3
 80104ca:	460b      	mov	r3, r1
 80104cc:	71fb      	strb	r3, [r7, #7]
 80104ce:	4613      	mov	r3, r2
 80104d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d106      	bne.n	80104ea <tcp_output_fill_options+0x2e>
 80104dc:	4b13      	ldr	r3, [pc, #76]	; (801052c <tcp_output_fill_options+0x70>)
 80104de:	f240 7256 	movw	r2, #1878	; 0x756
 80104e2:	4913      	ldr	r1, [pc, #76]	; (8010530 <tcp_output_fill_options+0x74>)
 80104e4:	4813      	ldr	r0, [pc, #76]	; (8010534 <tcp_output_fill_options+0x78>)
 80104e6:	f005 fa1b 	bl	8015920 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	3314      	adds	r3, #20
 80104f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	f103 0214 	add.w	r2, r3, #20
 80104fc:	8bfb      	ldrh	r3, [r7, #30]
 80104fe:	009b      	lsls	r3, r3, #2
 8010500:	4619      	mov	r1, r3
 8010502:	79fb      	ldrb	r3, [r7, #7]
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	f003 0304 	and.w	r3, r3, #4
 801050a:	440b      	add	r3, r1
 801050c:	4413      	add	r3, r2
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	429a      	cmp	r2, r3
 8010512:	d006      	beq.n	8010522 <tcp_output_fill_options+0x66>
 8010514:	4b05      	ldr	r3, [pc, #20]	; (801052c <tcp_output_fill_options+0x70>)
 8010516:	f240 7275 	movw	r2, #1909	; 0x775
 801051a:	4907      	ldr	r1, [pc, #28]	; (8010538 <tcp_output_fill_options+0x7c>)
 801051c:	4805      	ldr	r0, [pc, #20]	; (8010534 <tcp_output_fill_options+0x78>)
 801051e:	f005 f9ff 	bl	8015920 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010522:	bf00      	nop
 8010524:	3720      	adds	r7, #32
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	080185fc 	.word	0x080185fc
 8010530:	08018d2c 	.word	0x08018d2c
 8010534:	08018650 	.word	0x08018650
 8010538:	08018c24 	.word	0x08018c24

0801053c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b08a      	sub	sp, #40	; 0x28
 8010540:	af04      	add	r7, sp, #16
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d106      	bne.n	801055e <tcp_output_control_segment+0x22>
 8010550:	4b1c      	ldr	r3, [pc, #112]	; (80105c4 <tcp_output_control_segment+0x88>)
 8010552:	f240 7287 	movw	r2, #1927	; 0x787
 8010556:	491c      	ldr	r1, [pc, #112]	; (80105c8 <tcp_output_control_segment+0x8c>)
 8010558:	481c      	ldr	r0, [pc, #112]	; (80105cc <tcp_output_control_segment+0x90>)
 801055a:	f005 f9e1 	bl	8015920 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801055e:	683a      	ldr	r2, [r7, #0]
 8010560:	6879      	ldr	r1, [r7, #4]
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f7fe ff40 	bl	800f3e8 <tcp_route>
 8010568:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d102      	bne.n	8010576 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010570:	23fc      	movs	r3, #252	; 0xfc
 8010572:	75fb      	strb	r3, [r7, #23]
 8010574:	e01c      	b.n	80105b0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d006      	beq.n	801058a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	7adb      	ldrb	r3, [r3, #11]
 8010580:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	7a9b      	ldrb	r3, [r3, #10]
 8010586:	757b      	strb	r3, [r7, #21]
 8010588:	e003      	b.n	8010592 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801058a:	23ff      	movs	r3, #255	; 0xff
 801058c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801058e:	2300      	movs	r3, #0
 8010590:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010592:	7dba      	ldrb	r2, [r7, #22]
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	9302      	str	r3, [sp, #8]
 8010598:	2306      	movs	r3, #6
 801059a:	9301      	str	r3, [sp, #4]
 801059c:	7d7b      	ldrb	r3, [r7, #21]
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	4613      	mov	r3, r2
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	6879      	ldr	r1, [r7, #4]
 80105a6:	68b8      	ldr	r0, [r7, #8]
 80105a8:	f004 f928 	bl	80147fc <ip4_output_if>
 80105ac:	4603      	mov	r3, r0
 80105ae:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80105b0:	68b8      	ldr	r0, [r7, #8]
 80105b2:	f7fa fdd5 	bl	800b160 <pbuf_free>
  return err;
 80105b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3718      	adds	r7, #24
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	080185fc 	.word	0x080185fc
 80105c8:	08018d54 	.word	0x08018d54
 80105cc:	08018650 	.word	0x08018650

080105d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80105d0:	b590      	push	{r4, r7, lr}
 80105d2:	b08b      	sub	sp, #44	; 0x2c
 80105d4:	af04      	add	r7, sp, #16
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
 80105dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d106      	bne.n	80105f2 <tcp_rst+0x22>
 80105e4:	4b1f      	ldr	r3, [pc, #124]	; (8010664 <tcp_rst+0x94>)
 80105e6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80105ea:	491f      	ldr	r1, [pc, #124]	; (8010668 <tcp_rst+0x98>)
 80105ec:	481f      	ldr	r0, [pc, #124]	; (801066c <tcp_rst+0x9c>)
 80105ee:	f005 f997 	bl	8015920 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80105f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d106      	bne.n	8010606 <tcp_rst+0x36>
 80105f8:	4b1a      	ldr	r3, [pc, #104]	; (8010664 <tcp_rst+0x94>)
 80105fa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80105fe:	491c      	ldr	r1, [pc, #112]	; (8010670 <tcp_rst+0xa0>)
 8010600:	481a      	ldr	r0, [pc, #104]	; (801066c <tcp_rst+0x9c>)
 8010602:	f005 f98d 	bl	8015920 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010606:	2300      	movs	r3, #0
 8010608:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801060a:	f246 0308 	movw	r3, #24584	; 0x6008
 801060e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010610:	7dfb      	ldrb	r3, [r7, #23]
 8010612:	b29c      	uxth	r4, r3
 8010614:	68b8      	ldr	r0, [r7, #8]
 8010616:	f7f9 fa4e 	bl	8009ab6 <lwip_htonl>
 801061a:	4602      	mov	r2, r0
 801061c:	8abb      	ldrh	r3, [r7, #20]
 801061e:	9303      	str	r3, [sp, #12]
 8010620:	2314      	movs	r3, #20
 8010622:	9302      	str	r3, [sp, #8]
 8010624:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010626:	9301      	str	r3, [sp, #4]
 8010628:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	4613      	mov	r3, r2
 801062e:	2200      	movs	r2, #0
 8010630:	4621      	mov	r1, r4
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7ff fe92 	bl	801035c <tcp_output_alloc_header_common>
 8010638:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00c      	beq.n	801065a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010640:	7dfb      	ldrb	r3, [r7, #23]
 8010642:	2200      	movs	r2, #0
 8010644:	6939      	ldr	r1, [r7, #16]
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7ff ff38 	bl	80104bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	683a      	ldr	r2, [r7, #0]
 8010650:	6939      	ldr	r1, [r7, #16]
 8010652:	68f8      	ldr	r0, [r7, #12]
 8010654:	f7ff ff72 	bl	801053c <tcp_output_control_segment>
 8010658:	e000      	b.n	801065c <tcp_rst+0x8c>
    return;
 801065a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801065c:	371c      	adds	r7, #28
 801065e:	46bd      	mov	sp, r7
 8010660:	bd90      	pop	{r4, r7, pc}
 8010662:	bf00      	nop
 8010664:	080185fc 	.word	0x080185fc
 8010668:	08018d80 	.word	0x08018d80
 801066c:	08018650 	.word	0x08018650
 8010670:	08018d9c 	.word	0x08018d9c

08010674 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010674:	b590      	push	{r4, r7, lr}
 8010676:	b087      	sub	sp, #28
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801067c:	2300      	movs	r3, #0
 801067e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010680:	2300      	movs	r3, #0
 8010682:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d106      	bne.n	8010698 <tcp_send_empty_ack+0x24>
 801068a:	4b28      	ldr	r3, [pc, #160]	; (801072c <tcp_send_empty_ack+0xb8>)
 801068c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010690:	4927      	ldr	r1, [pc, #156]	; (8010730 <tcp_send_empty_ack+0xbc>)
 8010692:	4828      	ldr	r0, [pc, #160]	; (8010734 <tcp_send_empty_ack+0xc0>)
 8010694:	f005 f944 	bl	8015920 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010698:	7dfb      	ldrb	r3, [r7, #23]
 801069a:	009b      	lsls	r3, r3, #2
 801069c:	b2db      	uxtb	r3, r3
 801069e:	f003 0304 	and.w	r3, r3, #4
 80106a2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80106a4:	7d7b      	ldrb	r3, [r7, #21]
 80106a6:	b29c      	uxth	r4, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7f9 fa02 	bl	8009ab6 <lwip_htonl>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2200      	movs	r2, #0
 80106b6:	4621      	mov	r1, r4
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff fec1 	bl	8010440 <tcp_output_alloc_header>
 80106be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d109      	bne.n	80106da <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	8b5b      	ldrh	r3, [r3, #26]
 80106ca:	f043 0303 	orr.w	r3, r3, #3
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80106d4:	f06f 0301 	mvn.w	r3, #1
 80106d8:	e023      	b.n	8010722 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80106da:	7dbb      	ldrb	r3, [r7, #22]
 80106dc:	7dfa      	ldrb	r2, [r7, #23]
 80106de:	6939      	ldr	r1, [r7, #16]
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7ff feeb 	bl	80104bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80106e6:	687a      	ldr	r2, [r7, #4]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3304      	adds	r3, #4
 80106ec:	6939      	ldr	r1, [r7, #16]
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7ff ff24 	bl	801053c <tcp_output_control_segment>
 80106f4:	4603      	mov	r3, r0
 80106f6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80106f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d007      	beq.n	8010710 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	8b5b      	ldrh	r3, [r3, #26]
 8010704:	f043 0303 	orr.w	r3, r3, #3
 8010708:	b29a      	uxth	r2, r3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	835a      	strh	r2, [r3, #26]
 801070e:	e006      	b.n	801071e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	8b5b      	ldrh	r3, [r3, #26]
 8010714:	f023 0303 	bic.w	r3, r3, #3
 8010718:	b29a      	uxth	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010722:	4618      	mov	r0, r3
 8010724:	371c      	adds	r7, #28
 8010726:	46bd      	mov	sp, r7
 8010728:	bd90      	pop	{r4, r7, pc}
 801072a:	bf00      	nop
 801072c:	080185fc 	.word	0x080185fc
 8010730:	08018db8 	.word	0x08018db8
 8010734:	08018650 	.word	0x08018650

08010738 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010738:	b590      	push	{r4, r7, lr}
 801073a:	b087      	sub	sp, #28
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010740:	2300      	movs	r3, #0
 8010742:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d106      	bne.n	8010758 <tcp_keepalive+0x20>
 801074a:	4b18      	ldr	r3, [pc, #96]	; (80107ac <tcp_keepalive+0x74>)
 801074c:	f640 0224 	movw	r2, #2084	; 0x824
 8010750:	4917      	ldr	r1, [pc, #92]	; (80107b0 <tcp_keepalive+0x78>)
 8010752:	4818      	ldr	r0, [pc, #96]	; (80107b4 <tcp_keepalive+0x7c>)
 8010754:	f005 f8e4 	bl	8015920 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010758:	7dfb      	ldrb	r3, [r7, #23]
 801075a:	b29c      	uxth	r4, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010760:	3b01      	subs	r3, #1
 8010762:	4618      	mov	r0, r3
 8010764:	f7f9 f9a7 	bl	8009ab6 <lwip_htonl>
 8010768:	4603      	mov	r3, r0
 801076a:	2200      	movs	r2, #0
 801076c:	4621      	mov	r1, r4
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f7ff fe66 	bl	8010440 <tcp_output_alloc_header>
 8010774:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d102      	bne.n	8010782 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801077c:	f04f 33ff 	mov.w	r3, #4294967295
 8010780:	e010      	b.n	80107a4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010782:	7dfb      	ldrb	r3, [r7, #23]
 8010784:	2200      	movs	r2, #0
 8010786:	6939      	ldr	r1, [r7, #16]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff fe97 	bl	80104bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	3304      	adds	r3, #4
 8010794:	6939      	ldr	r1, [r7, #16]
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff fed0 	bl	801053c <tcp_output_control_segment>
 801079c:	4603      	mov	r3, r0
 801079e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80107a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	371c      	adds	r7, #28
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd90      	pop	{r4, r7, pc}
 80107ac:	080185fc 	.word	0x080185fc
 80107b0:	08018dd8 	.word	0x08018dd8
 80107b4:	08018650 	.word	0x08018650

080107b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80107b8:	b590      	push	{r4, r7, lr}
 80107ba:	b08b      	sub	sp, #44	; 0x2c
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80107c0:	2300      	movs	r3, #0
 80107c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d106      	bne.n	80107da <tcp_zero_window_probe+0x22>
 80107cc:	4b4c      	ldr	r3, [pc, #304]	; (8010900 <tcp_zero_window_probe+0x148>)
 80107ce:	f640 024f 	movw	r2, #2127	; 0x84f
 80107d2:	494c      	ldr	r1, [pc, #304]	; (8010904 <tcp_zero_window_probe+0x14c>)
 80107d4:	484c      	ldr	r0, [pc, #304]	; (8010908 <tcp_zero_window_probe+0x150>)
 80107d6:	f005 f8a3 	bl	8015920 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107de:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80107e0:	6a3b      	ldr	r3, [r7, #32]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d101      	bne.n	80107ea <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80107e6:	2300      	movs	r3, #0
 80107e8:	e086      	b.n	80108f8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80107f0:	2bff      	cmp	r3, #255	; 0xff
 80107f2:	d007      	beq.n	8010804 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80107fa:	3301      	adds	r3, #1
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010804:	6a3b      	ldr	r3, [r7, #32]
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	899b      	ldrh	r3, [r3, #12]
 801080a:	b29b      	uxth	r3, r3
 801080c:	4618      	mov	r0, r3
 801080e:	f7f9 f93d 	bl	8009a8c <lwip_htons>
 8010812:	4603      	mov	r3, r0
 8010814:	b2db      	uxtb	r3, r3
 8010816:	f003 0301 	and.w	r3, r3, #1
 801081a:	2b00      	cmp	r3, #0
 801081c:	d005      	beq.n	801082a <tcp_zero_window_probe+0x72>
 801081e:	6a3b      	ldr	r3, [r7, #32]
 8010820:	891b      	ldrh	r3, [r3, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <tcp_zero_window_probe+0x72>
 8010826:	2301      	movs	r3, #1
 8010828:	e000      	b.n	801082c <tcp_zero_window_probe+0x74>
 801082a:	2300      	movs	r3, #0
 801082c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801082e:	7ffb      	ldrb	r3, [r7, #31]
 8010830:	2b00      	cmp	r3, #0
 8010832:	bf0c      	ite	eq
 8010834:	2301      	moveq	r3, #1
 8010836:	2300      	movne	r3, #0
 8010838:	b2db      	uxtb	r3, r3
 801083a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801083c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010840:	b299      	uxth	r1, r3
 8010842:	6a3b      	ldr	r3, [r7, #32]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	8bba      	ldrh	r2, [r7, #28]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff fdf8 	bl	8010440 <tcp_output_alloc_header>
 8010850:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d102      	bne.n	801085e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010858:	f04f 33ff 	mov.w	r3, #4294967295
 801085c:	e04c      	b.n	80108f8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010864:	7ffb      	ldrb	r3, [r7, #31]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d011      	beq.n	801088e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	899b      	ldrh	r3, [r3, #12]
 801086e:	b29b      	uxth	r3, r3
 8010870:	b21b      	sxth	r3, r3
 8010872:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010876:	b21c      	sxth	r4, r3
 8010878:	2011      	movs	r0, #17
 801087a:	f7f9 f907 	bl	8009a8c <lwip_htons>
 801087e:	4603      	mov	r3, r0
 8010880:	b21b      	sxth	r3, r3
 8010882:	4323      	orrs	r3, r4
 8010884:	b21b      	sxth	r3, r3
 8010886:	b29a      	uxth	r2, r3
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	819a      	strh	r2, [r3, #12]
 801088c:	e010      	b.n	80108b0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	3314      	adds	r3, #20
 8010894:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010896:	6a3b      	ldr	r3, [r7, #32]
 8010898:	6858      	ldr	r0, [r3, #4]
 801089a:	6a3b      	ldr	r3, [r7, #32]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	891a      	ldrh	r2, [r3, #8]
 80108a0:	6a3b      	ldr	r3, [r7, #32]
 80108a2:	891b      	ldrh	r3, [r3, #8]
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	2201      	movs	r2, #1
 80108aa:	6939      	ldr	r1, [r7, #16]
 80108ac:	f7fa fe52 	bl	800b554 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80108b0:	6a3b      	ldr	r3, [r7, #32]
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7f9 f8fd 	bl	8009ab6 <lwip_htonl>
 80108bc:	4603      	mov	r3, r0
 80108be:	3301      	adds	r3, #1
 80108c0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	1ad3      	subs	r3, r2, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	da02      	bge.n	80108d4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80108d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108d8:	2200      	movs	r2, #0
 80108da:	69b9      	ldr	r1, [r7, #24]
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f7ff fded 	bl	80104bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	3304      	adds	r3, #4
 80108e8:	69b9      	ldr	r1, [r7, #24]
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7ff fe26 	bl	801053c <tcp_output_control_segment>
 80108f0:	4603      	mov	r3, r0
 80108f2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80108f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	372c      	adds	r7, #44	; 0x2c
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd90      	pop	{r4, r7, pc}
 8010900:	080185fc 	.word	0x080185fc
 8010904:	08018df4 	.word	0x08018df4
 8010908:	08018650 	.word	0x08018650

0801090c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010914:	f7fa ff0c 	bl	800b730 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010918:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <tcpip_tcp_timer+0x38>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d103      	bne.n	8010928 <tcpip_tcp_timer+0x1c>
 8010920:	4b09      	ldr	r3, [pc, #36]	; (8010948 <tcpip_tcp_timer+0x3c>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d005      	beq.n	8010934 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010928:	2200      	movs	r2, #0
 801092a:	4908      	ldr	r1, [pc, #32]	; (801094c <tcpip_tcp_timer+0x40>)
 801092c:	20fa      	movs	r0, #250	; 0xfa
 801092e:	f000 f8f3 	bl	8010b18 <sys_timeout>
 8010932:	e003      	b.n	801093c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010934:	4b06      	ldr	r3, [pc, #24]	; (8010950 <tcpip_tcp_timer+0x44>)
 8010936:	2200      	movs	r2, #0
 8010938:	601a      	str	r2, [r3, #0]
  }
}
 801093a:	bf00      	nop
 801093c:	bf00      	nop
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	2000b03c 	.word	0x2000b03c
 8010948:	2000b040 	.word	0x2000b040
 801094c:	0801090d 	.word	0x0801090d
 8010950:	2000b088 	.word	0x2000b088

08010954 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010958:	4b0a      	ldr	r3, [pc, #40]	; (8010984 <tcp_timer_needed+0x30>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10f      	bne.n	8010980 <tcp_timer_needed+0x2c>
 8010960:	4b09      	ldr	r3, [pc, #36]	; (8010988 <tcp_timer_needed+0x34>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d103      	bne.n	8010970 <tcp_timer_needed+0x1c>
 8010968:	4b08      	ldr	r3, [pc, #32]	; (801098c <tcp_timer_needed+0x38>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d007      	beq.n	8010980 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010970:	4b04      	ldr	r3, [pc, #16]	; (8010984 <tcp_timer_needed+0x30>)
 8010972:	2201      	movs	r2, #1
 8010974:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010976:	2200      	movs	r2, #0
 8010978:	4905      	ldr	r1, [pc, #20]	; (8010990 <tcp_timer_needed+0x3c>)
 801097a:	20fa      	movs	r0, #250	; 0xfa
 801097c:	f000 f8cc 	bl	8010b18 <sys_timeout>
  }
}
 8010980:	bf00      	nop
 8010982:	bd80      	pop	{r7, pc}
 8010984:	2000b088 	.word	0x2000b088
 8010988:	2000b03c 	.word	0x2000b03c
 801098c:	2000b040 	.word	0x2000b040
 8010990:	0801090d 	.word	0x0801090d

08010994 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b086      	sub	sp, #24
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80109a0:	2006      	movs	r0, #6
 80109a2:	f7f9 fceb 	bl	800a37c <memp_malloc>
 80109a6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d109      	bne.n	80109c2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d151      	bne.n	8010a58 <sys_timeout_abs+0xc4>
 80109b4:	4b2a      	ldr	r3, [pc, #168]	; (8010a60 <sys_timeout_abs+0xcc>)
 80109b6:	22be      	movs	r2, #190	; 0xbe
 80109b8:	492a      	ldr	r1, [pc, #168]	; (8010a64 <sys_timeout_abs+0xd0>)
 80109ba:	482b      	ldr	r0, [pc, #172]	; (8010a68 <sys_timeout_abs+0xd4>)
 80109bc:	f004 ffb0 	bl	8015920 <iprintf>
    return;
 80109c0:	e04a      	b.n	8010a58 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	2200      	movs	r2, #0
 80109c6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	68ba      	ldr	r2, [r7, #8]
 80109cc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	68fa      	ldr	r2, [r7, #12]
 80109d8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80109da:	4b24      	ldr	r3, [pc, #144]	; (8010a6c <sys_timeout_abs+0xd8>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d103      	bne.n	80109ea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80109e2:	4a22      	ldr	r2, [pc, #136]	; (8010a6c <sys_timeout_abs+0xd8>)
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	6013      	str	r3, [r2, #0]
    return;
 80109e8:	e037      	b.n	8010a5a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	685a      	ldr	r2, [r3, #4]
 80109ee:	4b1f      	ldr	r3, [pc, #124]	; (8010a6c <sys_timeout_abs+0xd8>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	0fdb      	lsrs	r3, r3, #31
 80109f8:	f003 0301 	and.w	r3, r3, #1
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d007      	beq.n	8010a12 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010a02:	4b1a      	ldr	r3, [pc, #104]	; (8010a6c <sys_timeout_abs+0xd8>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010a0a:	4a18      	ldr	r2, [pc, #96]	; (8010a6c <sys_timeout_abs+0xd8>)
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	6013      	str	r3, [r2, #0]
 8010a10:	e023      	b.n	8010a5a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010a12:	4b16      	ldr	r3, [pc, #88]	; (8010a6c <sys_timeout_abs+0xd8>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	617b      	str	r3, [r7, #20]
 8010a18:	e01a      	b.n	8010a50 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00b      	beq.n	8010a3a <sys_timeout_abs+0xa6>
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	685a      	ldr	r2, [r3, #4]
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	0fdb      	lsrs	r3, r3, #31
 8010a30:	f003 0301 	and.w	r3, r3, #1
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d007      	beq.n	8010a4a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	693a      	ldr	r2, [r7, #16]
 8010a46:	601a      	str	r2, [r3, #0]
        break;
 8010a48:	e007      	b.n	8010a5a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	617b      	str	r3, [r7, #20]
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d1e1      	bne.n	8010a1a <sys_timeout_abs+0x86>
 8010a56:	e000      	b.n	8010a5a <sys_timeout_abs+0xc6>
    return;
 8010a58:	bf00      	nop
      }
    }
  }
}
 8010a5a:	3718      	adds	r7, #24
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	08018e18 	.word	0x08018e18
 8010a64:	08018e4c 	.word	0x08018e4c
 8010a68:	08018e8c 	.word	0x08018e8c
 8010a6c:	2000b080 	.word	0x2000b080

08010a70 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	4798      	blx	r3

  now = sys_now();
 8010a82:	f7f8 fdef 	bl	8009664 <sys_now>
 8010a86:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	4b0f      	ldr	r3, [pc, #60]	; (8010acc <lwip_cyclic_timer+0x5c>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4413      	add	r3, r2
 8010a92:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010a94:	68fa      	ldr	r2, [r7, #12]
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	0fdb      	lsrs	r3, r3, #31
 8010a9c:	f003 0301 	and.w	r3, r3, #1
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d009      	beq.n	8010aba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	4413      	add	r3, r2
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	4907      	ldr	r1, [pc, #28]	; (8010ad0 <lwip_cyclic_timer+0x60>)
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7ff ff6e 	bl	8010994 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010ab8:	e004      	b.n	8010ac4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	4904      	ldr	r1, [pc, #16]	; (8010ad0 <lwip_cyclic_timer+0x60>)
 8010abe:	68f8      	ldr	r0, [r7, #12]
 8010ac0:	f7ff ff68 	bl	8010994 <sys_timeout_abs>
}
 8010ac4:	bf00      	nop
 8010ac6:	3718      	adds	r7, #24
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	2000b084 	.word	0x2000b084
 8010ad0:	08010a71 	.word	0x08010a71

08010ad4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010ada:	2301      	movs	r3, #1
 8010adc:	607b      	str	r3, [r7, #4]
 8010ade:	e00e      	b.n	8010afe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010ae0:	4a0b      	ldr	r2, [pc, #44]	; (8010b10 <sys_timeouts_init+0x3c>)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	4a08      	ldr	r2, [pc, #32]	; (8010b10 <sys_timeouts_init+0x3c>)
 8010aee:	4413      	add	r3, r2
 8010af0:	461a      	mov	r2, r3
 8010af2:	4908      	ldr	r1, [pc, #32]	; (8010b14 <sys_timeouts_init+0x40>)
 8010af4:	f000 f810 	bl	8010b18 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3301      	adds	r3, #1
 8010afc:	607b      	str	r3, [r7, #4]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2b04      	cmp	r3, #4
 8010b02:	d9ed      	bls.n	8010ae0 <sys_timeouts_init+0xc>
  }
}
 8010b04:	bf00      	nop
 8010b06:	bf00      	nop
 8010b08:	3708      	adds	r7, #8
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	0801c484 	.word	0x0801c484
 8010b14:	08010a71 	.word	0x08010a71

08010b18 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b2a:	d306      	bcc.n	8010b3a <sys_timeout+0x22>
 8010b2c:	4b0a      	ldr	r3, [pc, #40]	; (8010b58 <sys_timeout+0x40>)
 8010b2e:	f240 1229 	movw	r2, #297	; 0x129
 8010b32:	490a      	ldr	r1, [pc, #40]	; (8010b5c <sys_timeout+0x44>)
 8010b34:	480a      	ldr	r0, [pc, #40]	; (8010b60 <sys_timeout+0x48>)
 8010b36:	f004 fef3 	bl	8015920 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010b3a:	f7f8 fd93 	bl	8009664 <sys_now>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	4413      	add	r3, r2
 8010b44:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	68b9      	ldr	r1, [r7, #8]
 8010b4a:	6978      	ldr	r0, [r7, #20]
 8010b4c:	f7ff ff22 	bl	8010994 <sys_timeout_abs>
#endif
}
 8010b50:	bf00      	nop
 8010b52:	3718      	adds	r7, #24
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	08018e18 	.word	0x08018e18
 8010b5c:	08018eb4 	.word	0x08018eb4
 8010b60:	08018e8c 	.word	0x08018e8c

08010b64 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010b6a:	f7f8 fd7b 	bl	8009664 <sys_now>
 8010b6e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010b70:	4b1a      	ldr	r3, [pc, #104]	; (8010bdc <sys_check_timeouts+0x78>)
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <sys_check_timeouts+0x1a>
 8010b7a:	f7f9 ffb7 	bl	800aaec <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010b7e:	4b18      	ldr	r3, [pc, #96]	; (8010be0 <sys_check_timeouts+0x7c>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d022      	beq.n	8010bd0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	68fa      	ldr	r2, [r7, #12]
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	0fdb      	lsrs	r3, r3, #31
 8010b94:	f003 0301 	and.w	r3, r3, #1
 8010b98:	b2db      	uxtb	r3, r3
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d11a      	bne.n	8010bd4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	4a0f      	ldr	r2, [pc, #60]	; (8010be0 <sys_check_timeouts+0x7c>)
 8010ba4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	689b      	ldr	r3, [r3, #8]
 8010baa:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	4a0b      	ldr	r2, [pc, #44]	; (8010be4 <sys_check_timeouts+0x80>)
 8010bb8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010bba:	68b9      	ldr	r1, [r7, #8]
 8010bbc:	2006      	movs	r0, #6
 8010bbe:	f7f9 fc4d 	bl	800a45c <memp_free>
    if (handler != NULL) {
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d0d3      	beq.n	8010b70 <sys_check_timeouts+0xc>
      handler(arg);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6838      	ldr	r0, [r7, #0]
 8010bcc:	4798      	blx	r3
  do {
 8010bce:	e7cf      	b.n	8010b70 <sys_check_timeouts+0xc>
      return;
 8010bd0:	bf00      	nop
 8010bd2:	e000      	b.n	8010bd6 <sys_check_timeouts+0x72>
      return;
 8010bd4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010bd6:	3710      	adds	r7, #16
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	2000b02d 	.word	0x2000b02d
 8010be0:	2000b080 	.word	0x2000b080
 8010be4:	2000b084 	.word	0x2000b084

08010be8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010bec:	f004 feb0 	bl	8015950 <rand>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010bfe:	b29a      	uxth	r2, r3
 8010c00:	4b01      	ldr	r3, [pc, #4]	; (8010c08 <udp_init+0x20>)
 8010c02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010c04:	bf00      	nop
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	20000060 	.word	0x20000060

08010c0c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010c16:	4b17      	ldr	r3, [pc, #92]	; (8010c74 <udp_new_port+0x68>)
 8010c18:	881b      	ldrh	r3, [r3, #0]
 8010c1a:	1c5a      	adds	r2, r3, #1
 8010c1c:	b291      	uxth	r1, r2
 8010c1e:	4a15      	ldr	r2, [pc, #84]	; (8010c74 <udp_new_port+0x68>)
 8010c20:	8011      	strh	r1, [r2, #0]
 8010c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d103      	bne.n	8010c32 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010c2a:	4b12      	ldr	r3, [pc, #72]	; (8010c74 <udp_new_port+0x68>)
 8010c2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010c30:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c32:	4b11      	ldr	r3, [pc, #68]	; (8010c78 <udp_new_port+0x6c>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	603b      	str	r3, [r7, #0]
 8010c38:	e011      	b.n	8010c5e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	8a5a      	ldrh	r2, [r3, #18]
 8010c3e:	4b0d      	ldr	r3, [pc, #52]	; (8010c74 <udp_new_port+0x68>)
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d108      	bne.n	8010c58 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010c46:	88fb      	ldrh	r3, [r7, #6]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	80fb      	strh	r3, [r7, #6]
 8010c4c:	88fb      	ldrh	r3, [r7, #6]
 8010c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c52:	d3e0      	bcc.n	8010c16 <udp_new_port+0xa>
        return 0;
 8010c54:	2300      	movs	r3, #0
 8010c56:	e007      	b.n	8010c68 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	603b      	str	r3, [r7, #0]
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1ea      	bne.n	8010c3a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010c64:	4b03      	ldr	r3, [pc, #12]	; (8010c74 <udp_new_port+0x68>)
 8010c66:	881b      	ldrh	r3, [r3, #0]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr
 8010c74:	20000060 	.word	0x20000060
 8010c78:	2000b08c 	.word	0x2000b08c

08010c7c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	4613      	mov	r3, r2
 8010c88:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d105      	bne.n	8010c9c <udp_input_local_match+0x20>
 8010c90:	4b27      	ldr	r3, [pc, #156]	; (8010d30 <udp_input_local_match+0xb4>)
 8010c92:	2287      	movs	r2, #135	; 0x87
 8010c94:	4927      	ldr	r1, [pc, #156]	; (8010d34 <udp_input_local_match+0xb8>)
 8010c96:	4828      	ldr	r0, [pc, #160]	; (8010d38 <udp_input_local_match+0xbc>)
 8010c98:	f004 fe42 	bl	8015920 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d105      	bne.n	8010cae <udp_input_local_match+0x32>
 8010ca2:	4b23      	ldr	r3, [pc, #140]	; (8010d30 <udp_input_local_match+0xb4>)
 8010ca4:	2288      	movs	r2, #136	; 0x88
 8010ca6:	4925      	ldr	r1, [pc, #148]	; (8010d3c <udp_input_local_match+0xc0>)
 8010ca8:	4823      	ldr	r0, [pc, #140]	; (8010d38 <udp_input_local_match+0xbc>)
 8010caa:	f004 fe39 	bl	8015920 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	7a1b      	ldrb	r3, [r3, #8]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00b      	beq.n	8010cce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	7a1a      	ldrb	r2, [r3, #8]
 8010cba:	4b21      	ldr	r3, [pc, #132]	; (8010d40 <udp_input_local_match+0xc4>)
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d001      	beq.n	8010cce <udp_input_local_match+0x52>
    return 0;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	e02b      	b.n	8010d26 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d018      	beq.n	8010d06 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d013      	beq.n	8010d02 <udp_input_local_match+0x86>
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d00f      	beq.n	8010d02 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ce2:	4b17      	ldr	r3, [pc, #92]	; (8010d40 <udp_input_local_match+0xc4>)
 8010ce4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cea:	d00a      	beq.n	8010d02 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	4b13      	ldr	r3, [pc, #76]	; (8010d40 <udp_input_local_match+0xc4>)
 8010cf2:	695b      	ldr	r3, [r3, #20]
 8010cf4:	405a      	eors	r2, r3
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	3308      	adds	r3, #8
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d110      	bne.n	8010d24 <udp_input_local_match+0xa8>
          return 1;
 8010d02:	2301      	movs	r3, #1
 8010d04:	e00f      	b.n	8010d26 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d009      	beq.n	8010d20 <udp_input_local_match+0xa4>
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d005      	beq.n	8010d20 <udp_input_local_match+0xa4>
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	4b09      	ldr	r3, [pc, #36]	; (8010d40 <udp_input_local_match+0xc4>)
 8010d1a:	695b      	ldr	r3, [r3, #20]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d101      	bne.n	8010d24 <udp_input_local_match+0xa8>
        return 1;
 8010d20:	2301      	movs	r3, #1
 8010d22:	e000      	b.n	8010d26 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	08018f00 	.word	0x08018f00
 8010d34:	08018f30 	.word	0x08018f30
 8010d38:	08018f54 	.word	0x08018f54
 8010d3c:	08018f7c 	.word	0x08018f7c
 8010d40:	200058e0 	.word	0x200058e0

08010d44 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b08d      	sub	sp, #52	; 0x34
 8010d48:	af02      	add	r7, sp, #8
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d105      	bne.n	8010d64 <udp_input+0x20>
 8010d58:	4b7c      	ldr	r3, [pc, #496]	; (8010f4c <udp_input+0x208>)
 8010d5a:	22cf      	movs	r2, #207	; 0xcf
 8010d5c:	497c      	ldr	r1, [pc, #496]	; (8010f50 <udp_input+0x20c>)
 8010d5e:	487d      	ldr	r0, [pc, #500]	; (8010f54 <udp_input+0x210>)
 8010d60:	f004 fdde 	bl	8015920 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d105      	bne.n	8010d76 <udp_input+0x32>
 8010d6a:	4b78      	ldr	r3, [pc, #480]	; (8010f4c <udp_input+0x208>)
 8010d6c:	22d0      	movs	r2, #208	; 0xd0
 8010d6e:	497a      	ldr	r1, [pc, #488]	; (8010f58 <udp_input+0x214>)
 8010d70:	4878      	ldr	r0, [pc, #480]	; (8010f54 <udp_input+0x210>)
 8010d72:	f004 fdd5 	bl	8015920 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	895b      	ldrh	r3, [r3, #10]
 8010d7a:	2b07      	cmp	r3, #7
 8010d7c:	d803      	bhi.n	8010d86 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7fa f9ee 	bl	800b160 <pbuf_free>
    goto end;
 8010d84:	e0de      	b.n	8010f44 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	685b      	ldr	r3, [r3, #4]
 8010d8a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010d8c:	4b73      	ldr	r3, [pc, #460]	; (8010f5c <udp_input+0x218>)
 8010d8e:	695b      	ldr	r3, [r3, #20]
 8010d90:	4a72      	ldr	r2, [pc, #456]	; (8010f5c <udp_input+0x218>)
 8010d92:	6812      	ldr	r2, [r2, #0]
 8010d94:	4611      	mov	r1, r2
 8010d96:	4618      	mov	r0, r3
 8010d98:	f003 fe08 	bl	80149ac <ip4_addr_isbroadcast_u32>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	881b      	ldrh	r3, [r3, #0]
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7f8 fe70 	bl	8009a8c <lwip_htons>
 8010dac:	4603      	mov	r3, r0
 8010dae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	885b      	ldrh	r3, [r3, #2]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7f8 fe68 	bl	8009a8c <lwip_htons>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dcc:	4b64      	ldr	r3, [pc, #400]	; (8010f60 <udp_input+0x21c>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8010dd2:	e054      	b.n	8010e7e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	8a5b      	ldrh	r3, [r3, #18]
 8010dd8:	89fa      	ldrh	r2, [r7, #14]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d14a      	bne.n	8010e74 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010dde:	7cfb      	ldrb	r3, [r7, #19]
 8010de0:	461a      	mov	r2, r3
 8010de2:	6839      	ldr	r1, [r7, #0]
 8010de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010de6:	f7ff ff49 	bl	8010c7c <udp_input_local_match>
 8010dea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d041      	beq.n	8010e74 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	7c1b      	ldrb	r3, [r3, #16]
 8010df4:	f003 0304 	and.w	r3, r3, #4
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d11d      	bne.n	8010e38 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d102      	bne.n	8010e08 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e04:	61fb      	str	r3, [r7, #28]
 8010e06:	e017      	b.n	8010e38 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010e08:	7cfb      	ldrb	r3, [r7, #19]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d014      	beq.n	8010e38 <udp_input+0xf4>
 8010e0e:	4b53      	ldr	r3, [pc, #332]	; (8010f5c <udp_input+0x218>)
 8010e10:	695b      	ldr	r3, [r3, #20]
 8010e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e16:	d10f      	bne.n	8010e38 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010e18:	69fb      	ldr	r3, [r7, #28]
 8010e1a:	681a      	ldr	r2, [r3, #0]
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	3304      	adds	r3, #4
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d008      	beq.n	8010e38 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	3304      	adds	r3, #4
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d101      	bne.n	8010e38 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e36:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3a:	8a9b      	ldrh	r3, [r3, #20]
 8010e3c:	8a3a      	ldrh	r2, [r7, #16]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d118      	bne.n	8010e74 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e44:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d005      	beq.n	8010e56 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4c:	685a      	ldr	r2, [r3, #4]
 8010e4e:	4b43      	ldr	r3, [pc, #268]	; (8010f5c <udp_input+0x218>)
 8010e50:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d10e      	bne.n	8010e74 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010e56:	6a3b      	ldr	r3, [r7, #32]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d014      	beq.n	8010e86 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5e:	68da      	ldr	r2, [r3, #12]
 8010e60:	6a3b      	ldr	r3, [r7, #32]
 8010e62:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010e64:	4b3e      	ldr	r3, [pc, #248]	; (8010f60 <udp_input+0x21c>)
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010e6c:	4a3c      	ldr	r2, [pc, #240]	; (8010f60 <udp_input+0x21c>)
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010e72:	e008      	b.n	8010e86 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d1a7      	bne.n	8010dd4 <udp_input+0x90>
 8010e84:	e000      	b.n	8010e88 <udp_input+0x144>
        break;
 8010e86:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d101      	bne.n	8010e92 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d002      	beq.n	8010e9e <udp_input+0x15a>
    for_us = 1;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	76fb      	strb	r3, [r7, #27]
 8010e9c:	e00a      	b.n	8010eb4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	3304      	adds	r3, #4
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	4b2d      	ldr	r3, [pc, #180]	; (8010f5c <udp_input+0x218>)
 8010ea6:	695b      	ldr	r3, [r3, #20]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	bf0c      	ite	eq
 8010eac:	2301      	moveq	r3, #1
 8010eae:	2300      	movne	r3, #0
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010eb4:	7efb      	ldrb	r3, [r7, #27]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d041      	beq.n	8010f3e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010eba:	2108      	movs	r1, #8
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7fa f8c9 	bl	800b054 <pbuf_remove_header>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00a      	beq.n	8010ede <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010ec8:	4b20      	ldr	r3, [pc, #128]	; (8010f4c <udp_input+0x208>)
 8010eca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010ece:	4925      	ldr	r1, [pc, #148]	; (8010f64 <udp_input+0x220>)
 8010ed0:	4820      	ldr	r0, [pc, #128]	; (8010f54 <udp_input+0x210>)
 8010ed2:	f004 fd25 	bl	8015920 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7fa f942 	bl	800b160 <pbuf_free>
      goto end;
 8010edc:	e032      	b.n	8010f44 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d012      	beq.n	8010f0a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee6:	699b      	ldr	r3, [r3, #24]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d00a      	beq.n	8010f02 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eee:	699c      	ldr	r4, [r3, #24]
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef2:	69d8      	ldr	r0, [r3, #28]
 8010ef4:	8a3b      	ldrh	r3, [r7, #16]
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	4b1b      	ldr	r3, [pc, #108]	; (8010f68 <udp_input+0x224>)
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010efe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010f00:	e021      	b.n	8010f46 <udp_input+0x202>
        pbuf_free(p);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f7fa f92c 	bl	800b160 <pbuf_free>
        goto end;
 8010f08:	e01c      	b.n	8010f44 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010f0a:	7cfb      	ldrb	r3, [r7, #19]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d112      	bne.n	8010f36 <udp_input+0x1f2>
 8010f10:	4b12      	ldr	r3, [pc, #72]	; (8010f5c <udp_input+0x218>)
 8010f12:	695b      	ldr	r3, [r3, #20]
 8010f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f18:	2be0      	cmp	r3, #224	; 0xe0
 8010f1a:	d00c      	beq.n	8010f36 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010f1c:	4b0f      	ldr	r3, [pc, #60]	; (8010f5c <udp_input+0x218>)
 8010f1e:	899b      	ldrh	r3, [r3, #12]
 8010f20:	3308      	adds	r3, #8
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	b21b      	sxth	r3, r3
 8010f26:	4619      	mov	r1, r3
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f7fa f906 	bl	800b13a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010f2e:	2103      	movs	r1, #3
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f003 f9fd 	bl	8014330 <icmp_dest_unreach>
      pbuf_free(p);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7fa f912 	bl	800b160 <pbuf_free>
  return;
 8010f3c:	e003      	b.n	8010f46 <udp_input+0x202>
    pbuf_free(p);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7fa f90e 	bl	800b160 <pbuf_free>
  return;
 8010f44:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010f46:	372c      	adds	r7, #44	; 0x2c
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd90      	pop	{r4, r7, pc}
 8010f4c:	08018f00 	.word	0x08018f00
 8010f50:	08018fa4 	.word	0x08018fa4
 8010f54:	08018f54 	.word	0x08018f54
 8010f58:	08018fbc 	.word	0x08018fbc
 8010f5c:	200058e0 	.word	0x200058e0
 8010f60:	2000b08c 	.word	0x2000b08c
 8010f64:	08018fd8 	.word	0x08018fd8
 8010f68:	200058f0 	.word	0x200058f0

08010f6c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b088      	sub	sp, #32
 8010f70:	af02      	add	r7, sp, #8
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
 8010f78:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d109      	bne.n	8010f94 <udp_sendto_if+0x28>
 8010f80:	4b2e      	ldr	r3, [pc, #184]	; (801103c <udp_sendto_if+0xd0>)
 8010f82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f86:	492e      	ldr	r1, [pc, #184]	; (8011040 <udp_sendto_if+0xd4>)
 8010f88:	482e      	ldr	r0, [pc, #184]	; (8011044 <udp_sendto_if+0xd8>)
 8010f8a:	f004 fcc9 	bl	8015920 <iprintf>
 8010f8e:	f06f 030f 	mvn.w	r3, #15
 8010f92:	e04f      	b.n	8011034 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d109      	bne.n	8010fae <udp_sendto_if+0x42>
 8010f9a:	4b28      	ldr	r3, [pc, #160]	; (801103c <udp_sendto_if+0xd0>)
 8010f9c:	f240 2281 	movw	r2, #641	; 0x281
 8010fa0:	4929      	ldr	r1, [pc, #164]	; (8011048 <udp_sendto_if+0xdc>)
 8010fa2:	4828      	ldr	r0, [pc, #160]	; (8011044 <udp_sendto_if+0xd8>)
 8010fa4:	f004 fcbc 	bl	8015920 <iprintf>
 8010fa8:	f06f 030f 	mvn.w	r3, #15
 8010fac:	e042      	b.n	8011034 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d109      	bne.n	8010fc8 <udp_sendto_if+0x5c>
 8010fb4:	4b21      	ldr	r3, [pc, #132]	; (801103c <udp_sendto_if+0xd0>)
 8010fb6:	f240 2282 	movw	r2, #642	; 0x282
 8010fba:	4924      	ldr	r1, [pc, #144]	; (801104c <udp_sendto_if+0xe0>)
 8010fbc:	4821      	ldr	r0, [pc, #132]	; (8011044 <udp_sendto_if+0xd8>)
 8010fbe:	f004 fcaf 	bl	8015920 <iprintf>
 8010fc2:	f06f 030f 	mvn.w	r3, #15
 8010fc6:	e035      	b.n	8011034 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010fc8:	6a3b      	ldr	r3, [r7, #32]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d109      	bne.n	8010fe2 <udp_sendto_if+0x76>
 8010fce:	4b1b      	ldr	r3, [pc, #108]	; (801103c <udp_sendto_if+0xd0>)
 8010fd0:	f240 2283 	movw	r2, #643	; 0x283
 8010fd4:	491e      	ldr	r1, [pc, #120]	; (8011050 <udp_sendto_if+0xe4>)
 8010fd6:	481b      	ldr	r0, [pc, #108]	; (8011044 <udp_sendto_if+0xd8>)
 8010fd8:	f004 fca2 	bl	8015920 <iprintf>
 8010fdc:	f06f 030f 	mvn.w	r3, #15
 8010fe0:	e028      	b.n	8011034 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d009      	beq.n	8010ffc <udp_sendto_if+0x90>
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d005      	beq.n	8010ffc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ff8:	2be0      	cmp	r3, #224	; 0xe0
 8010ffa:	d103      	bne.n	8011004 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010ffc:	6a3b      	ldr	r3, [r7, #32]
 8010ffe:	3304      	adds	r3, #4
 8011000:	617b      	str	r3, [r7, #20]
 8011002:	e00b      	b.n	801101c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	6a3b      	ldr	r3, [r7, #32]
 801100a:	3304      	adds	r3, #4
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	429a      	cmp	r2, r3
 8011010:	d002      	beq.n	8011018 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011012:	f06f 0303 	mvn.w	r3, #3
 8011016:	e00d      	b.n	8011034 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801101c:	887a      	ldrh	r2, [r7, #2]
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	9301      	str	r3, [sp, #4]
 8011022:	6a3b      	ldr	r3, [r7, #32]
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	4613      	mov	r3, r2
 8011028:	687a      	ldr	r2, [r7, #4]
 801102a:	68b9      	ldr	r1, [r7, #8]
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f000 f811 	bl	8011054 <udp_sendto_if_src>
 8011032:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011034:	4618      	mov	r0, r3
 8011036:	3718      	adds	r7, #24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	08018f00 	.word	0x08018f00
 8011040:	08019074 	.word	0x08019074
 8011044:	08018f54 	.word	0x08018f54
 8011048:	08019090 	.word	0x08019090
 801104c:	080190ac 	.word	0x080190ac
 8011050:	080190cc 	.word	0x080190cc

08011054 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b08c      	sub	sp, #48	; 0x30
 8011058:	af04      	add	r7, sp, #16
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]
 8011060:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d109      	bne.n	801107c <udp_sendto_if_src+0x28>
 8011068:	4b65      	ldr	r3, [pc, #404]	; (8011200 <udp_sendto_if_src+0x1ac>)
 801106a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801106e:	4965      	ldr	r1, [pc, #404]	; (8011204 <udp_sendto_if_src+0x1b0>)
 8011070:	4865      	ldr	r0, [pc, #404]	; (8011208 <udp_sendto_if_src+0x1b4>)
 8011072:	f004 fc55 	bl	8015920 <iprintf>
 8011076:	f06f 030f 	mvn.w	r3, #15
 801107a:	e0bc      	b.n	80111f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d109      	bne.n	8011096 <udp_sendto_if_src+0x42>
 8011082:	4b5f      	ldr	r3, [pc, #380]	; (8011200 <udp_sendto_if_src+0x1ac>)
 8011084:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011088:	4960      	ldr	r1, [pc, #384]	; (801120c <udp_sendto_if_src+0x1b8>)
 801108a:	485f      	ldr	r0, [pc, #380]	; (8011208 <udp_sendto_if_src+0x1b4>)
 801108c:	f004 fc48 	bl	8015920 <iprintf>
 8011090:	f06f 030f 	mvn.w	r3, #15
 8011094:	e0af      	b.n	80111f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d109      	bne.n	80110b0 <udp_sendto_if_src+0x5c>
 801109c:	4b58      	ldr	r3, [pc, #352]	; (8011200 <udp_sendto_if_src+0x1ac>)
 801109e:	f240 22d3 	movw	r2, #723	; 0x2d3
 80110a2:	495b      	ldr	r1, [pc, #364]	; (8011210 <udp_sendto_if_src+0x1bc>)
 80110a4:	4858      	ldr	r0, [pc, #352]	; (8011208 <udp_sendto_if_src+0x1b4>)
 80110a6:	f004 fc3b 	bl	8015920 <iprintf>
 80110aa:	f06f 030f 	mvn.w	r3, #15
 80110ae:	e0a2      	b.n	80111f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d109      	bne.n	80110ca <udp_sendto_if_src+0x76>
 80110b6:	4b52      	ldr	r3, [pc, #328]	; (8011200 <udp_sendto_if_src+0x1ac>)
 80110b8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80110bc:	4955      	ldr	r1, [pc, #340]	; (8011214 <udp_sendto_if_src+0x1c0>)
 80110be:	4852      	ldr	r0, [pc, #328]	; (8011208 <udp_sendto_if_src+0x1b4>)
 80110c0:	f004 fc2e 	bl	8015920 <iprintf>
 80110c4:	f06f 030f 	mvn.w	r3, #15
 80110c8:	e095      	b.n	80111f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80110ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d109      	bne.n	80110e4 <udp_sendto_if_src+0x90>
 80110d0:	4b4b      	ldr	r3, [pc, #300]	; (8011200 <udp_sendto_if_src+0x1ac>)
 80110d2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80110d6:	4950      	ldr	r1, [pc, #320]	; (8011218 <udp_sendto_if_src+0x1c4>)
 80110d8:	484b      	ldr	r0, [pc, #300]	; (8011208 <udp_sendto_if_src+0x1b4>)
 80110da:	f004 fc21 	bl	8015920 <iprintf>
 80110de:	f06f 030f 	mvn.w	r3, #15
 80110e2:	e088      	b.n	80111f6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	8a5b      	ldrh	r3, [r3, #18]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d10f      	bne.n	801110c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80110ec:	68f9      	ldr	r1, [r7, #12]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	8a5b      	ldrh	r3, [r3, #18]
 80110f2:	461a      	mov	r2, r3
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f000 f893 	bl	8011220 <udp_bind>
 80110fa:	4603      	mov	r3, r0
 80110fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80110fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d002      	beq.n	801110c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011106:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801110a:	e074      	b.n	80111f6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	891b      	ldrh	r3, [r3, #8]
 8011110:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011114:	4293      	cmp	r3, r2
 8011116:	d902      	bls.n	801111e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011118:	f04f 33ff 	mov.w	r3, #4294967295
 801111c:	e06b      	b.n	80111f6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801111e:	2108      	movs	r1, #8
 8011120:	68b8      	ldr	r0, [r7, #8]
 8011122:	f7f9 ff87 	bl	800b034 <pbuf_add_header>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	d015      	beq.n	8011158 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801112c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011130:	2108      	movs	r1, #8
 8011132:	2022      	movs	r0, #34	; 0x22
 8011134:	f7f9 fd30 	bl	800ab98 <pbuf_alloc>
 8011138:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d102      	bne.n	8011146 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011140:	f04f 33ff 	mov.w	r3, #4294967295
 8011144:	e057      	b.n	80111f6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	891b      	ldrh	r3, [r3, #8]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d006      	beq.n	801115c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801114e:	68b9      	ldr	r1, [r7, #8]
 8011150:	69f8      	ldr	r0, [r7, #28]
 8011152:	f7fa f91d 	bl	800b390 <pbuf_chain>
 8011156:	e001      	b.n	801115c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	895b      	ldrh	r3, [r3, #10]
 8011160:	2b07      	cmp	r3, #7
 8011162:	d806      	bhi.n	8011172 <udp_sendto_if_src+0x11e>
 8011164:	4b26      	ldr	r3, [pc, #152]	; (8011200 <udp_sendto_if_src+0x1ac>)
 8011166:	f240 320d 	movw	r2, #781	; 0x30d
 801116a:	492c      	ldr	r1, [pc, #176]	; (801121c <udp_sendto_if_src+0x1c8>)
 801116c:	4826      	ldr	r0, [pc, #152]	; (8011208 <udp_sendto_if_src+0x1b4>)
 801116e:	f004 fbd7 	bl	8015920 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	8a5b      	ldrh	r3, [r3, #18]
 801117c:	4618      	mov	r0, r3
 801117e:	f7f8 fc85 	bl	8009a8c <lwip_htons>
 8011182:	4603      	mov	r3, r0
 8011184:	461a      	mov	r2, r3
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801118a:	887b      	ldrh	r3, [r7, #2]
 801118c:	4618      	mov	r0, r3
 801118e:	f7f8 fc7d 	bl	8009a8c <lwip_htons>
 8011192:	4603      	mov	r3, r0
 8011194:	461a      	mov	r2, r3
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	2200      	movs	r2, #0
 801119e:	719a      	strb	r2, [r3, #6]
 80111a0:	2200      	movs	r2, #0
 80111a2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	891b      	ldrh	r3, [r3, #8]
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7f8 fc6f 	bl	8009a8c <lwip_htons>
 80111ae:	4603      	mov	r3, r0
 80111b0:	461a      	mov	r2, r3
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80111b6:	2311      	movs	r3, #17
 80111b8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	7adb      	ldrb	r3, [r3, #11]
 80111be:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	7a9b      	ldrb	r3, [r3, #10]
 80111c4:	7cb9      	ldrb	r1, [r7, #18]
 80111c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111c8:	9202      	str	r2, [sp, #8]
 80111ca:	7cfa      	ldrb	r2, [r7, #19]
 80111cc:	9201      	str	r2, [sp, #4]
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	460b      	mov	r3, r1
 80111d2:	687a      	ldr	r2, [r7, #4]
 80111d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111d6:	69f8      	ldr	r0, [r7, #28]
 80111d8:	f003 fb3a 	bl	8014850 <ip4_output_if_src>
 80111dc:	4603      	mov	r3, r0
 80111de:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80111e0:	69fa      	ldr	r2, [r7, #28]
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d004      	beq.n	80111f2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80111e8:	69f8      	ldr	r0, [r7, #28]
 80111ea:	f7f9 ffb9 	bl	800b160 <pbuf_free>
    q = NULL;
 80111ee:	2300      	movs	r3, #0
 80111f0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80111f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3720      	adds	r7, #32
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	08018f00 	.word	0x08018f00
 8011204:	080190ec 	.word	0x080190ec
 8011208:	08018f54 	.word	0x08018f54
 801120c:	0801910c 	.word	0x0801910c
 8011210:	0801912c 	.word	0x0801912c
 8011214:	08019150 	.word	0x08019150
 8011218:	08019174 	.word	0x08019174
 801121c:	08019198 	.word	0x08019198

08011220 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b086      	sub	sp, #24
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	4613      	mov	r3, r2
 801122c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d101      	bne.n	8011238 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011234:	4b39      	ldr	r3, [pc, #228]	; (801131c <udp_bind+0xfc>)
 8011236:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d109      	bne.n	8011252 <udp_bind+0x32>
 801123e:	4b38      	ldr	r3, [pc, #224]	; (8011320 <udp_bind+0x100>)
 8011240:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011244:	4937      	ldr	r1, [pc, #220]	; (8011324 <udp_bind+0x104>)
 8011246:	4838      	ldr	r0, [pc, #224]	; (8011328 <udp_bind+0x108>)
 8011248:	f004 fb6a 	bl	8015920 <iprintf>
 801124c:	f06f 030f 	mvn.w	r3, #15
 8011250:	e060      	b.n	8011314 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011252:	2300      	movs	r3, #0
 8011254:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011256:	4b35      	ldr	r3, [pc, #212]	; (801132c <udp_bind+0x10c>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	617b      	str	r3, [r7, #20]
 801125c:	e009      	b.n	8011272 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	429a      	cmp	r2, r3
 8011264:	d102      	bne.n	801126c <udp_bind+0x4c>
      rebind = 1;
 8011266:	2301      	movs	r3, #1
 8011268:	74fb      	strb	r3, [r7, #19]
      break;
 801126a:	e005      	b.n	8011278 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	617b      	str	r3, [r7, #20]
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1f2      	bne.n	801125e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011278:	88fb      	ldrh	r3, [r7, #6]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d109      	bne.n	8011292 <udp_bind+0x72>
    port = udp_new_port();
 801127e:	f7ff fcc5 	bl	8010c0c <udp_new_port>
 8011282:	4603      	mov	r3, r0
 8011284:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011286:	88fb      	ldrh	r3, [r7, #6]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d12c      	bne.n	80112e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801128c:	f06f 0307 	mvn.w	r3, #7
 8011290:	e040      	b.n	8011314 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011292:	4b26      	ldr	r3, [pc, #152]	; (801132c <udp_bind+0x10c>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	617b      	str	r3, [r7, #20]
 8011298:	e022      	b.n	80112e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d01b      	beq.n	80112da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	8a5b      	ldrh	r3, [r3, #18]
 80112a6:	88fa      	ldrh	r2, [r7, #6]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d116      	bne.n	80112da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d00d      	beq.n	80112d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00a      	beq.n	80112d4 <udp_bind+0xb4>
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d006      	beq.n	80112d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80112c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d003      	beq.n	80112d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d102      	bne.n	80112da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80112d4:	f06f 0307 	mvn.w	r3, #7
 80112d8:	e01c      	b.n	8011314 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	617b      	str	r3, [r7, #20]
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d1d9      	bne.n	801129a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d002      	beq.n	80112f2 <udp_bind+0xd2>
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	e000      	b.n	80112f4 <udp_bind+0xd4>
 80112f2:	2300      	movs	r3, #0
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	88fa      	ldrh	r2, [r7, #6]
 80112fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80112fe:	7cfb      	ldrb	r3, [r7, #19]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d106      	bne.n	8011312 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011304:	4b09      	ldr	r3, [pc, #36]	; (801132c <udp_bind+0x10c>)
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801130c:	4a07      	ldr	r2, [pc, #28]	; (801132c <udp_bind+0x10c>)
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011312:	2300      	movs	r3, #0
}
 8011314:	4618      	mov	r0, r3
 8011316:	3718      	adds	r7, #24
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	0801c4ac 	.word	0x0801c4ac
 8011320:	08018f00 	.word	0x08018f00
 8011324:	080191c8 	.word	0x080191c8
 8011328:	08018f54 	.word	0x08018f54
 801132c:	2000b08c 	.word	0x2000b08c

08011330 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	4613      	mov	r3, r2
 801133c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d109      	bne.n	8011358 <udp_connect+0x28>
 8011344:	4b2c      	ldr	r3, [pc, #176]	; (80113f8 <udp_connect+0xc8>)
 8011346:	f240 4235 	movw	r2, #1077	; 0x435
 801134a:	492c      	ldr	r1, [pc, #176]	; (80113fc <udp_connect+0xcc>)
 801134c:	482c      	ldr	r0, [pc, #176]	; (8011400 <udp_connect+0xd0>)
 801134e:	f004 fae7 	bl	8015920 <iprintf>
 8011352:	f06f 030f 	mvn.w	r3, #15
 8011356:	e04b      	b.n	80113f0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d109      	bne.n	8011372 <udp_connect+0x42>
 801135e:	4b26      	ldr	r3, [pc, #152]	; (80113f8 <udp_connect+0xc8>)
 8011360:	f240 4236 	movw	r2, #1078	; 0x436
 8011364:	4927      	ldr	r1, [pc, #156]	; (8011404 <udp_connect+0xd4>)
 8011366:	4826      	ldr	r0, [pc, #152]	; (8011400 <udp_connect+0xd0>)
 8011368:	f004 fada 	bl	8015920 <iprintf>
 801136c:	f06f 030f 	mvn.w	r3, #15
 8011370:	e03e      	b.n	80113f0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	8a5b      	ldrh	r3, [r3, #18]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d10f      	bne.n	801139a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801137a:	68f9      	ldr	r1, [r7, #12]
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	8a5b      	ldrh	r3, [r3, #18]
 8011380:	461a      	mov	r2, r3
 8011382:	68f8      	ldr	r0, [r7, #12]
 8011384:	f7ff ff4c 	bl	8011220 <udp_bind>
 8011388:	4603      	mov	r3, r0
 801138a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801138c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d002      	beq.n	801139a <udp_connect+0x6a>
      return err;
 8011394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011398:	e02a      	b.n	80113f0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <udp_connect+0x76>
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	e000      	b.n	80113a8 <udp_connect+0x78>
 80113a6:	2300      	movs	r3, #0
 80113a8:	68fa      	ldr	r2, [r7, #12]
 80113aa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	88fa      	ldrh	r2, [r7, #6]
 80113b0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	7c1b      	ldrb	r3, [r3, #16]
 80113b6:	f043 0304 	orr.w	r3, r3, #4
 80113ba:	b2da      	uxtb	r2, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80113c0:	4b11      	ldr	r3, [pc, #68]	; (8011408 <udp_connect+0xd8>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	617b      	str	r3, [r7, #20]
 80113c6:	e008      	b.n	80113da <udp_connect+0xaa>
    if (pcb == ipcb) {
 80113c8:	68fa      	ldr	r2, [r7, #12]
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d101      	bne.n	80113d4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	e00d      	b.n	80113f0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	617b      	str	r3, [r7, #20]
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d1f3      	bne.n	80113c8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80113e0:	4b09      	ldr	r3, [pc, #36]	; (8011408 <udp_connect+0xd8>)
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80113e8:	4a07      	ldr	r2, [pc, #28]	; (8011408 <udp_connect+0xd8>)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3718      	adds	r7, #24
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	08018f00 	.word	0x08018f00
 80113fc:	080191e0 	.word	0x080191e0
 8011400:	08018f54 	.word	0x08018f54
 8011404:	080191fc 	.word	0x080191fc
 8011408:	2000b08c 	.word	0x2000b08c

0801140c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d107      	bne.n	801142e <udp_recv+0x22>
 801141e:	4b08      	ldr	r3, [pc, #32]	; (8011440 <udp_recv+0x34>)
 8011420:	f240 428a 	movw	r2, #1162	; 0x48a
 8011424:	4907      	ldr	r1, [pc, #28]	; (8011444 <udp_recv+0x38>)
 8011426:	4808      	ldr	r0, [pc, #32]	; (8011448 <udp_recv+0x3c>)
 8011428:	f004 fa7a 	bl	8015920 <iprintf>
 801142c:	e005      	b.n	801143a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	68ba      	ldr	r2, [r7, #8]
 8011432:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	61da      	str	r2, [r3, #28]
}
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	08018f00 	.word	0x08018f00
 8011444:	08019234 	.word	0x08019234
 8011448:	08018f54 	.word	0x08018f54

0801144c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d107      	bne.n	801146a <udp_remove+0x1e>
 801145a:	4b19      	ldr	r3, [pc, #100]	; (80114c0 <udp_remove+0x74>)
 801145c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011460:	4918      	ldr	r1, [pc, #96]	; (80114c4 <udp_remove+0x78>)
 8011462:	4819      	ldr	r0, [pc, #100]	; (80114c8 <udp_remove+0x7c>)
 8011464:	f004 fa5c 	bl	8015920 <iprintf>
 8011468:	e026      	b.n	80114b8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801146a:	4b18      	ldr	r3, [pc, #96]	; (80114cc <udp_remove+0x80>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	687a      	ldr	r2, [r7, #4]
 8011470:	429a      	cmp	r2, r3
 8011472:	d105      	bne.n	8011480 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011474:	4b15      	ldr	r3, [pc, #84]	; (80114cc <udp_remove+0x80>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	4a14      	ldr	r2, [pc, #80]	; (80114cc <udp_remove+0x80>)
 801147c:	6013      	str	r3, [r2, #0]
 801147e:	e017      	b.n	80114b0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011480:	4b12      	ldr	r3, [pc, #72]	; (80114cc <udp_remove+0x80>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	60fb      	str	r3, [r7, #12]
 8011486:	e010      	b.n	80114aa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d009      	beq.n	80114a4 <udp_remove+0x58>
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	429a      	cmp	r2, r3
 8011498:	d104      	bne.n	80114a4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	68da      	ldr	r2, [r3, #12]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	60da      	str	r2, [r3, #12]
        break;
 80114a2:	e005      	b.n	80114b0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	60fb      	str	r3, [r7, #12]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d1eb      	bne.n	8011488 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80114b0:	6879      	ldr	r1, [r7, #4]
 80114b2:	2000      	movs	r0, #0
 80114b4:	f7f8 ffd2 	bl	800a45c <memp_free>
}
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	08018f00 	.word	0x08018f00
 80114c4:	0801924c 	.word	0x0801924c
 80114c8:	08018f54 	.word	0x08018f54
 80114cc:	2000b08c 	.word	0x2000b08c

080114d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80114d6:	2000      	movs	r0, #0
 80114d8:	f7f8 ff50 	bl	800a37c <memp_malloc>
 80114dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d007      	beq.n	80114f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80114e4:	2220      	movs	r2, #32
 80114e6:	2100      	movs	r1, #0
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f004 fa11 	bl	8015910 <memset>
    pcb->ttl = UDP_TTL;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	22ff      	movs	r2, #255	; 0xff
 80114f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80114f4:	687b      	ldr	r3, [r7, #4]
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
	...

08011500 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011500:	b480      	push	{r7}
 8011502:	b085      	sub	sp, #20
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d01e      	beq.n	801154e <udp_netif_ip_addr_changed+0x4e>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d01a      	beq.n	801154e <udp_netif_ip_addr_changed+0x4e>
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d017      	beq.n	801154e <udp_netif_ip_addr_changed+0x4e>
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d013      	beq.n	801154e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011526:	4b0d      	ldr	r3, [pc, #52]	; (801155c <udp_netif_ip_addr_changed+0x5c>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	60fb      	str	r3, [r7, #12]
 801152c:	e00c      	b.n	8011548 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	429a      	cmp	r2, r3
 8011538:	d103      	bne.n	8011542 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d1ef      	bne.n	801152e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801154e:	bf00      	nop
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	2000b08c 	.word	0x2000b08c

08011560 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011564:	4b20      	ldr	r3, [pc, #128]	; (80115e8 <dhcp_inc_pcb_refcount+0x88>)
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d133      	bne.n	80115d4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801156c:	4b1f      	ldr	r3, [pc, #124]	; (80115ec <dhcp_inc_pcb_refcount+0x8c>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d005      	beq.n	8011580 <dhcp_inc_pcb_refcount+0x20>
 8011574:	4b1e      	ldr	r3, [pc, #120]	; (80115f0 <dhcp_inc_pcb_refcount+0x90>)
 8011576:	22e5      	movs	r2, #229	; 0xe5
 8011578:	491e      	ldr	r1, [pc, #120]	; (80115f4 <dhcp_inc_pcb_refcount+0x94>)
 801157a:	481f      	ldr	r0, [pc, #124]	; (80115f8 <dhcp_inc_pcb_refcount+0x98>)
 801157c:	f004 f9d0 	bl	8015920 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011580:	f7ff ffa6 	bl	80114d0 <udp_new>
 8011584:	4603      	mov	r3, r0
 8011586:	4a19      	ldr	r2, [pc, #100]	; (80115ec <dhcp_inc_pcb_refcount+0x8c>)
 8011588:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801158a:	4b18      	ldr	r3, [pc, #96]	; (80115ec <dhcp_inc_pcb_refcount+0x8c>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d102      	bne.n	8011598 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011592:	f04f 33ff 	mov.w	r3, #4294967295
 8011596:	e024      	b.n	80115e2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011598:	4b14      	ldr	r3, [pc, #80]	; (80115ec <dhcp_inc_pcb_refcount+0x8c>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	7a5a      	ldrb	r2, [r3, #9]
 801159e:	4b13      	ldr	r3, [pc, #76]	; (80115ec <dhcp_inc_pcb_refcount+0x8c>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f042 0220 	orr.w	r2, r2, #32
 80115a6:	b2d2      	uxtb	r2, r2
 80115a8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80115aa:	4b10      	ldr	r3, [pc, #64]	; (80115ec <dhcp_inc_pcb_refcount+0x8c>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	2244      	movs	r2, #68	; 0x44
 80115b0:	4912      	ldr	r1, [pc, #72]	; (80115fc <dhcp_inc_pcb_refcount+0x9c>)
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff fe34 	bl	8011220 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80115b8:	4b0c      	ldr	r3, [pc, #48]	; (80115ec <dhcp_inc_pcb_refcount+0x8c>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2243      	movs	r2, #67	; 0x43
 80115be:	490f      	ldr	r1, [pc, #60]	; (80115fc <dhcp_inc_pcb_refcount+0x9c>)
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7ff feb5 	bl	8011330 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80115c6:	4b09      	ldr	r3, [pc, #36]	; (80115ec <dhcp_inc_pcb_refcount+0x8c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	2200      	movs	r2, #0
 80115cc:	490c      	ldr	r1, [pc, #48]	; (8011600 <dhcp_inc_pcb_refcount+0xa0>)
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff ff1c 	bl	801140c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80115d4:	4b04      	ldr	r3, [pc, #16]	; (80115e8 <dhcp_inc_pcb_refcount+0x88>)
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	3301      	adds	r3, #1
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	4b02      	ldr	r3, [pc, #8]	; (80115e8 <dhcp_inc_pcb_refcount+0x88>)
 80115de:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80115e0:	2300      	movs	r3, #0
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	2000b0bc 	.word	0x2000b0bc
 80115ec:	2000b0b8 	.word	0x2000b0b8
 80115f0:	08019264 	.word	0x08019264
 80115f4:	0801929c 	.word	0x0801929c
 80115f8:	080192c4 	.word	0x080192c4
 80115fc:	0801c4ac 	.word	0x0801c4ac
 8011600:	08012e99 	.word	0x08012e99

08011604 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011608:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <dhcp_dec_pcb_refcount+0x40>)
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d105      	bne.n	801161c <dhcp_dec_pcb_refcount+0x18>
 8011610:	4b0d      	ldr	r3, [pc, #52]	; (8011648 <dhcp_dec_pcb_refcount+0x44>)
 8011612:	22ff      	movs	r2, #255	; 0xff
 8011614:	490d      	ldr	r1, [pc, #52]	; (801164c <dhcp_dec_pcb_refcount+0x48>)
 8011616:	480e      	ldr	r0, [pc, #56]	; (8011650 <dhcp_dec_pcb_refcount+0x4c>)
 8011618:	f004 f982 	bl	8015920 <iprintf>
  dhcp_pcb_refcount--;
 801161c:	4b09      	ldr	r3, [pc, #36]	; (8011644 <dhcp_dec_pcb_refcount+0x40>)
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	3b01      	subs	r3, #1
 8011622:	b2da      	uxtb	r2, r3
 8011624:	4b07      	ldr	r3, [pc, #28]	; (8011644 <dhcp_dec_pcb_refcount+0x40>)
 8011626:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011628:	4b06      	ldr	r3, [pc, #24]	; (8011644 <dhcp_dec_pcb_refcount+0x40>)
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d107      	bne.n	8011640 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011630:	4b08      	ldr	r3, [pc, #32]	; (8011654 <dhcp_dec_pcb_refcount+0x50>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	4618      	mov	r0, r3
 8011636:	f7ff ff09 	bl	801144c <udp_remove>
    dhcp_pcb = NULL;
 801163a:	4b06      	ldr	r3, [pc, #24]	; (8011654 <dhcp_dec_pcb_refcount+0x50>)
 801163c:	2200      	movs	r2, #0
 801163e:	601a      	str	r2, [r3, #0]
  }
}
 8011640:	bf00      	nop
 8011642:	bd80      	pop	{r7, pc}
 8011644:	2000b0bc 	.word	0x2000b0bc
 8011648:	08019264 	.word	0x08019264
 801164c:	080192ec 	.word	0x080192ec
 8011650:	080192c4 	.word	0x080192c4
 8011654:	2000b0b8 	.word	0x2000b0b8

08011658 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011664:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011666:	210c      	movs	r1, #12
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	f001 f857 	bl	801271c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801166e:	4b06      	ldr	r3, [pc, #24]	; (8011688 <dhcp_handle_nak+0x30>)
 8011670:	4a05      	ldr	r2, [pc, #20]	; (8011688 <dhcp_handle_nak+0x30>)
 8011672:	4905      	ldr	r1, [pc, #20]	; (8011688 <dhcp_handle_nak+0x30>)
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f7f9 f893 	bl	800a7a0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 fc4a 	bl	8011f14 <dhcp_discover>
}
 8011680:	bf00      	nop
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	0801c4ac 	.word	0x0801c4ac

0801168c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011698:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801169a:	2108      	movs	r1, #8
 801169c:	68f8      	ldr	r0, [r7, #12]
 801169e:	f001 f83d 	bl	801271c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	331c      	adds	r3, #28
 80116a6:	2200      	movs	r2, #0
 80116a8:	4619      	mov	r1, r3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f002 fb3e 	bl	8013d2c <etharp_query>
 80116b0:	4603      	mov	r3, r0
 80116b2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	799b      	ldrb	r3, [r3, #6]
 80116b8:	2bff      	cmp	r3, #255	; 0xff
 80116ba:	d005      	beq.n	80116c8 <dhcp_check+0x3c>
    dhcp->tries++;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	799b      	ldrb	r3, [r3, #6]
 80116c0:	3301      	adds	r3, #1
 80116c2:	b2da      	uxtb	r2, r3
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80116c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80116cc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80116ce:	893b      	ldrh	r3, [r7, #8]
 80116d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80116d4:	4a06      	ldr	r2, [pc, #24]	; (80116f0 <dhcp_check+0x64>)
 80116d6:	fb82 1203 	smull	r1, r2, r2, r3
 80116da:	1152      	asrs	r2, r2, #5
 80116dc:	17db      	asrs	r3, r3, #31
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80116e6:	bf00      	nop
 80116e8:	3710      	adds	r7, #16
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	10624dd3 	.word	0x10624dd3

080116f4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011702:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8011704:	4b0c      	ldr	r3, [pc, #48]	; (8011738 <dhcp_handle_offer+0x44>)
 8011706:	789b      	ldrb	r3, [r3, #2]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d011      	beq.n	8011730 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2200      	movs	r2, #0
 8011710:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8011712:	4b0a      	ldr	r3, [pc, #40]	; (801173c <dhcp_handle_offer+0x48>)
 8011714:	689b      	ldr	r3, [r3, #8]
 8011716:	4618      	mov	r0, r3
 8011718:	f7f8 f9cd 	bl	8009ab6 <lwip_htonl>
 801171c:	4602      	mov	r2, r0
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	691a      	ldr	r2, [r3, #16]
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f808 	bl	8011740 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8011730:	bf00      	nop
 8011732:	3710      	adds	r7, #16
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	2000b0b0 	.word	0x2000b0b0
 801173c:	2000b090 	.word	0x2000b090

08011740 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8011740:	b5b0      	push	{r4, r5, r7, lr}
 8011742:	b08a      	sub	sp, #40	; 0x28
 8011744:	af02      	add	r7, sp, #8
 8011746:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d109      	bne.n	8011762 <dhcp_select+0x22>
 801174e:	4b71      	ldr	r3, [pc, #452]	; (8011914 <dhcp_select+0x1d4>)
 8011750:	f240 1277 	movw	r2, #375	; 0x177
 8011754:	4970      	ldr	r1, [pc, #448]	; (8011918 <dhcp_select+0x1d8>)
 8011756:	4871      	ldr	r0, [pc, #452]	; (801191c <dhcp_select+0x1dc>)
 8011758:	f004 f8e2 	bl	8015920 <iprintf>
 801175c:	f06f 030f 	mvn.w	r3, #15
 8011760:	e0d3      	b.n	801190a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011766:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d109      	bne.n	8011782 <dhcp_select+0x42>
 801176e:	4b69      	ldr	r3, [pc, #420]	; (8011914 <dhcp_select+0x1d4>)
 8011770:	f240 1279 	movw	r2, #377	; 0x179
 8011774:	496a      	ldr	r1, [pc, #424]	; (8011920 <dhcp_select+0x1e0>)
 8011776:	4869      	ldr	r0, [pc, #420]	; (801191c <dhcp_select+0x1dc>)
 8011778:	f004 f8d2 	bl	8015920 <iprintf>
 801177c:	f06f 0305 	mvn.w	r3, #5
 8011780:	e0c3      	b.n	801190a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8011782:	2101      	movs	r1, #1
 8011784:	69b8      	ldr	r0, [r7, #24]
 8011786:	f000 ffc9 	bl	801271c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801178a:	f107 030c 	add.w	r3, r7, #12
 801178e:	2203      	movs	r2, #3
 8011790:	69b9      	ldr	r1, [r7, #24]
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f001 fc4e 	bl	8013034 <dhcp_create_msg>
 8011798:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 8085 	beq.w	80118ac <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80117a8:	89b8      	ldrh	r0, [r7, #12]
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80117b0:	2302      	movs	r3, #2
 80117b2:	2239      	movs	r2, #57	; 0x39
 80117b4:	f000 ffcc 	bl	8012750 <dhcp_option>
 80117b8:	4603      	mov	r3, r0
 80117ba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80117bc:	89b8      	ldrh	r0, [r7, #12]
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117c8:	461a      	mov	r2, r3
 80117ca:	f001 f81b 	bl	8012804 <dhcp_option_short>
 80117ce:	4603      	mov	r3, r0
 80117d0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80117d2:	89b8      	ldrh	r0, [r7, #12]
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80117da:	2304      	movs	r3, #4
 80117dc:	2232      	movs	r2, #50	; 0x32
 80117de:	f000 ffb7 	bl	8012750 <dhcp_option>
 80117e2:	4603      	mov	r3, r0
 80117e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80117e6:	89bc      	ldrh	r4, [r7, #12]
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80117ee:	69bb      	ldr	r3, [r7, #24]
 80117f0:	69db      	ldr	r3, [r3, #28]
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7f8 f95f 	bl	8009ab6 <lwip_htonl>
 80117f8:	4603      	mov	r3, r0
 80117fa:	461a      	mov	r2, r3
 80117fc:	4629      	mov	r1, r5
 80117fe:	4620      	mov	r0, r4
 8011800:	f001 f832 	bl	8012868 <dhcp_option_long>
 8011804:	4603      	mov	r3, r0
 8011806:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011808:	89b8      	ldrh	r0, [r7, #12]
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011810:	2304      	movs	r3, #4
 8011812:	2236      	movs	r2, #54	; 0x36
 8011814:	f000 ff9c 	bl	8012750 <dhcp_option>
 8011818:	4603      	mov	r3, r0
 801181a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801181c:	89bc      	ldrh	r4, [r7, #12]
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011824:	69bb      	ldr	r3, [r7, #24]
 8011826:	699b      	ldr	r3, [r3, #24]
 8011828:	4618      	mov	r0, r3
 801182a:	f7f8 f944 	bl	8009ab6 <lwip_htonl>
 801182e:	4603      	mov	r3, r0
 8011830:	461a      	mov	r2, r3
 8011832:	4629      	mov	r1, r5
 8011834:	4620      	mov	r0, r4
 8011836:	f001 f817 	bl	8012868 <dhcp_option_long>
 801183a:	4603      	mov	r3, r0
 801183c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801183e:	89b8      	ldrh	r0, [r7, #12]
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011846:	2303      	movs	r3, #3
 8011848:	2237      	movs	r2, #55	; 0x37
 801184a:	f000 ff81 	bl	8012750 <dhcp_option>
 801184e:	4603      	mov	r3, r0
 8011850:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011852:	2300      	movs	r3, #0
 8011854:	77bb      	strb	r3, [r7, #30]
 8011856:	e00e      	b.n	8011876 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011858:	89b8      	ldrh	r0, [r7, #12]
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011860:	7fbb      	ldrb	r3, [r7, #30]
 8011862:	4a30      	ldr	r2, [pc, #192]	; (8011924 <dhcp_select+0x1e4>)
 8011864:	5cd3      	ldrb	r3, [r2, r3]
 8011866:	461a      	mov	r2, r3
 8011868:	f000 ffa6 	bl	80127b8 <dhcp_option_byte>
 801186c:	4603      	mov	r3, r0
 801186e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011870:	7fbb      	ldrb	r3, [r7, #30]
 8011872:	3301      	adds	r3, #1
 8011874:	77bb      	strb	r3, [r7, #30]
 8011876:	7fbb      	ldrb	r3, [r7, #30]
 8011878:	2b02      	cmp	r3, #2
 801187a:	d9ed      	bls.n	8011858 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801187c:	89b8      	ldrh	r0, [r7, #12]
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	33f0      	adds	r3, #240	; 0xf0
 8011882:	697a      	ldr	r2, [r7, #20]
 8011884:	4619      	mov	r1, r3
 8011886:	f001 fcab 	bl	80131e0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801188a:	4b27      	ldr	r3, [pc, #156]	; (8011928 <dhcp_select+0x1e8>)
 801188c:	6818      	ldr	r0, [r3, #0]
 801188e:	4b27      	ldr	r3, [pc, #156]	; (801192c <dhcp_select+0x1ec>)
 8011890:	9301      	str	r3, [sp, #4]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	9300      	str	r3, [sp, #0]
 8011896:	2343      	movs	r3, #67	; 0x43
 8011898:	4a25      	ldr	r2, [pc, #148]	; (8011930 <dhcp_select+0x1f0>)
 801189a:	6979      	ldr	r1, [r7, #20]
 801189c:	f7ff fbda 	bl	8011054 <udp_sendto_if_src>
 80118a0:	4603      	mov	r3, r0
 80118a2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80118a4:	6978      	ldr	r0, [r7, #20]
 80118a6:	f7f9 fc5b 	bl	800b160 <pbuf_free>
 80118aa:	e001      	b.n	80118b0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80118ac:	23ff      	movs	r3, #255	; 0xff
 80118ae:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80118b0:	69bb      	ldr	r3, [r7, #24]
 80118b2:	799b      	ldrb	r3, [r3, #6]
 80118b4:	2bff      	cmp	r3, #255	; 0xff
 80118b6:	d005      	beq.n	80118c4 <dhcp_select+0x184>
    dhcp->tries++;
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	799b      	ldrb	r3, [r3, #6]
 80118bc:	3301      	adds	r3, #1
 80118be:	b2da      	uxtb	r2, r3
 80118c0:	69bb      	ldr	r3, [r7, #24]
 80118c2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	799b      	ldrb	r3, [r3, #6]
 80118c8:	2b05      	cmp	r3, #5
 80118ca:	d80d      	bhi.n	80118e8 <dhcp_select+0x1a8>
 80118cc:	69bb      	ldr	r3, [r7, #24]
 80118ce:	799b      	ldrb	r3, [r3, #6]
 80118d0:	461a      	mov	r2, r3
 80118d2:	2301      	movs	r3, #1
 80118d4:	4093      	lsls	r3, r2
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	461a      	mov	r2, r3
 80118da:	0152      	lsls	r2, r2, #5
 80118dc:	1ad2      	subs	r2, r2, r3
 80118de:	0092      	lsls	r2, r2, #2
 80118e0:	4413      	add	r3, r2
 80118e2:	00db      	lsls	r3, r3, #3
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	e001      	b.n	80118ec <dhcp_select+0x1ac>
 80118e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80118ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80118ee:	89fb      	ldrh	r3, [r7, #14]
 80118f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80118f4:	4a0f      	ldr	r2, [pc, #60]	; (8011934 <dhcp_select+0x1f4>)
 80118f6:	fb82 1203 	smull	r1, r2, r2, r3
 80118fa:	1152      	asrs	r2, r2, #5
 80118fc:	17db      	asrs	r3, r3, #31
 80118fe:	1ad3      	subs	r3, r2, r3
 8011900:	b29a      	uxth	r2, r3
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011906:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3720      	adds	r7, #32
 801190e:	46bd      	mov	sp, r7
 8011910:	bdb0      	pop	{r4, r5, r7, pc}
 8011912:	bf00      	nop
 8011914:	08019264 	.word	0x08019264
 8011918:	08019310 	.word	0x08019310
 801191c:	080192c4 	.word	0x080192c4
 8011920:	0801932c 	.word	0x0801932c
 8011924:	20000064 	.word	0x20000064
 8011928:	2000b0b8 	.word	0x2000b0b8
 801192c:	0801c4ac 	.word	0x0801c4ac
 8011930:	0801c4b0 	.word	0x0801c4b0
 8011934:	10624dd3 	.word	0x10624dd3

08011938 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801193e:	4b27      	ldr	r3, [pc, #156]	; (80119dc <dhcp_coarse_tmr+0xa4>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	607b      	str	r3, [r7, #4]
 8011944:	e042      	b.n	80119cc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801194a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d039      	beq.n	80119c6 <dhcp_coarse_tmr+0x8e>
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	795b      	ldrb	r3, [r3, #5]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d035      	beq.n	80119c6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	8a9b      	ldrh	r3, [r3, #20]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d012      	beq.n	8011988 <dhcp_coarse_tmr+0x50>
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	8a5b      	ldrh	r3, [r3, #18]
 8011966:	3301      	adds	r3, #1
 8011968:	b29a      	uxth	r2, r3
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	825a      	strh	r2, [r3, #18]
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	8a5a      	ldrh	r2, [r3, #18]
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	8a9b      	ldrh	r3, [r3, #20]
 8011976:	429a      	cmp	r2, r3
 8011978:	d106      	bne.n	8011988 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f000 fe34 	bl	80125e8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f000 f96b 	bl	8011c5c <dhcp_start>
 8011986:	e01e      	b.n	80119c6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	8a1b      	ldrh	r3, [r3, #16]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d00b      	beq.n	80119a8 <dhcp_coarse_tmr+0x70>
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	8a1b      	ldrh	r3, [r3, #16]
 8011994:	1e5a      	subs	r2, r3, #1
 8011996:	b291      	uxth	r1, r2
 8011998:	683a      	ldr	r2, [r7, #0]
 801199a:	8211      	strh	r1, [r2, #16]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d103      	bne.n	80119a8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 f8c7 	bl	8011b34 <dhcp_t2_timeout>
 80119a6:	e00e      	b.n	80119c6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	89db      	ldrh	r3, [r3, #14]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d00a      	beq.n	80119c6 <dhcp_coarse_tmr+0x8e>
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	89db      	ldrh	r3, [r3, #14]
 80119b4:	1e5a      	subs	r2, r3, #1
 80119b6:	b291      	uxth	r1, r2
 80119b8:	683a      	ldr	r2, [r7, #0]
 80119ba:	81d1      	strh	r1, [r2, #14]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d102      	bne.n	80119c6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f000 f888 	bl	8011ad6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	607b      	str	r3, [r7, #4]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d1b9      	bne.n	8011946 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80119d2:	bf00      	nop
 80119d4:	bf00      	nop
 80119d6:	3708      	adds	r7, #8
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	2000b024 	.word	0x2000b024

080119e0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80119e6:	4b16      	ldr	r3, [pc, #88]	; (8011a40 <dhcp_fine_tmr+0x60>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	607b      	str	r3, [r7, #4]
 80119ec:	e020      	b.n	8011a30 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d017      	beq.n	8011a2a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	891b      	ldrh	r3, [r3, #8]
 80119fe:	2b01      	cmp	r3, #1
 8011a00:	d906      	bls.n	8011a10 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	891b      	ldrh	r3, [r3, #8]
 8011a06:	3b01      	subs	r3, #1
 8011a08:	b29a      	uxth	r2, r3
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	811a      	strh	r2, [r3, #8]
 8011a0e:	e00c      	b.n	8011a2a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	891b      	ldrh	r3, [r3, #8]
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d108      	bne.n	8011a2a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	891b      	ldrh	r3, [r3, #8]
 8011a1c:	3b01      	subs	r3, #1
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f000 f80d 	bl	8011a44 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	607b      	str	r3, [r7, #4]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d1db      	bne.n	80119ee <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8011a36:	bf00      	nop
 8011a38:	bf00      	nop
 8011a3a:	3708      	adds	r7, #8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	2000b024 	.word	0x2000b024

08011a44 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a50:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	795b      	ldrb	r3, [r3, #5]
 8011a56:	2b0c      	cmp	r3, #12
 8011a58:	d003      	beq.n	8011a62 <dhcp_timeout+0x1e>
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	795b      	ldrb	r3, [r3, #5]
 8011a5e:	2b06      	cmp	r3, #6
 8011a60:	d103      	bne.n	8011a6a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f000 fa56 	bl	8011f14 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011a68:	e031      	b.n	8011ace <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	795b      	ldrb	r3, [r3, #5]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d10e      	bne.n	8011a90 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	799b      	ldrb	r3, [r3, #6]
 8011a76:	2b05      	cmp	r3, #5
 8011a78:	d803      	bhi.n	8011a82 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f7ff fe60 	bl	8011740 <dhcp_select>
}
 8011a80:	e025      	b.n	8011ace <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f000 fdb0 	bl	80125e8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 f8e7 	bl	8011c5c <dhcp_start>
}
 8011a8e:	e01e      	b.n	8011ace <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	795b      	ldrb	r3, [r3, #5]
 8011a94:	2b08      	cmp	r3, #8
 8011a96:	d10b      	bne.n	8011ab0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	799b      	ldrb	r3, [r3, #6]
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	d803      	bhi.n	8011aa8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f7ff fdf3 	bl	801168c <dhcp_check>
}
 8011aa6:	e012      	b.n	8011ace <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f000 fad5 	bl	8012058 <dhcp_bind>
}
 8011aae:	e00e      	b.n	8011ace <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	795b      	ldrb	r3, [r3, #5]
 8011ab4:	2b03      	cmp	r3, #3
 8011ab6:	d10a      	bne.n	8011ace <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	799b      	ldrb	r3, [r3, #6]
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d803      	bhi.n	8011ac8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f000 fcdb 	bl	801247c <dhcp_reboot>
}
 8011ac6:	e002      	b.n	8011ace <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fa23 	bl	8011f14 <dhcp_discover>
}
 8011ace:	bf00      	nop
 8011ad0:	3710      	adds	r7, #16
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}

08011ad6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8011ad6:	b580      	push	{r7, lr}
 8011ad8:	b084      	sub	sp, #16
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	795b      	ldrb	r3, [r3, #5]
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	d007      	beq.n	8011afc <dhcp_t1_timeout+0x26>
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	795b      	ldrb	r3, [r3, #5]
 8011af0:	2b0a      	cmp	r3, #10
 8011af2:	d003      	beq.n	8011afc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011af8:	2b05      	cmp	r3, #5
 8011afa:	d117      	bne.n	8011b2c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f000 fb85 	bl	801220c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	899b      	ldrh	r3, [r3, #12]
 8011b06:	461a      	mov	r2, r3
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	8a5b      	ldrh	r3, [r3, #18]
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	dd0c      	ble.n	8011b2c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	899b      	ldrh	r3, [r3, #12]
 8011b16:	461a      	mov	r2, r3
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	8a5b      	ldrh	r3, [r3, #18]
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	da00      	bge.n	8011b24 <dhcp_t1_timeout+0x4e>
 8011b22:	3301      	adds	r3, #1
 8011b24:	105b      	asrs	r3, r3, #1
 8011b26:	b29a      	uxth	r2, r3
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8011b2c:	bf00      	nop
 8011b2e:	3710      	adds	r7, #16
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b40:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	795b      	ldrb	r3, [r3, #5]
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d00b      	beq.n	8011b62 <dhcp_t2_timeout+0x2e>
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	795b      	ldrb	r3, [r3, #5]
 8011b4e:	2b0a      	cmp	r3, #10
 8011b50:	d007      	beq.n	8011b62 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011b56:	2b05      	cmp	r3, #5
 8011b58:	d003      	beq.n	8011b62 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	795b      	ldrb	r3, [r3, #5]
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	d117      	bne.n	8011b92 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 fbee 	bl	8012344 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	8a9b      	ldrh	r3, [r3, #20]
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	8a5b      	ldrh	r3, [r3, #18]
 8011b72:	1ad3      	subs	r3, r2, r3
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	dd0c      	ble.n	8011b92 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	8a9b      	ldrh	r3, [r3, #20]
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	8a5b      	ldrh	r3, [r3, #18]
 8011b82:	1ad3      	subs	r3, r2, r3
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	da00      	bge.n	8011b8a <dhcp_t2_timeout+0x56>
 8011b88:	3301      	adds	r3, #1
 8011b8a:	105b      	asrs	r3, r3, #1
 8011b8c:	b29a      	uxth	r2, r3
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8011b92:	bf00      	nop
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
	...

08011b9c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011baa:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011bb8:	4b26      	ldr	r3, [pc, #152]	; (8011c54 <dhcp_handle_ack+0xb8>)
 8011bba:	78db      	ldrb	r3, [r3, #3]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d003      	beq.n	8011bc8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011bc0:	4b25      	ldr	r3, [pc, #148]	; (8011c58 <dhcp_handle_ack+0xbc>)
 8011bc2:	68da      	ldr	r2, [r3, #12]
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011bc8:	4b22      	ldr	r3, [pc, #136]	; (8011c54 <dhcp_handle_ack+0xb8>)
 8011bca:	791b      	ldrb	r3, [r3, #4]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d004      	beq.n	8011bda <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011bd0:	4b21      	ldr	r3, [pc, #132]	; (8011c58 <dhcp_handle_ack+0xbc>)
 8011bd2:	691a      	ldr	r2, [r3, #16]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8011bd8:	e004      	b.n	8011be4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bde:	085a      	lsrs	r2, r3, #1
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011be4:	4b1b      	ldr	r3, [pc, #108]	; (8011c54 <dhcp_handle_ack+0xb8>)
 8011be6:	795b      	ldrb	r3, [r3, #5]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d004      	beq.n	8011bf6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011bec:	4b1a      	ldr	r3, [pc, #104]	; (8011c58 <dhcp_handle_ack+0xbc>)
 8011bee:	695a      	ldr	r2, [r3, #20]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8011bf4:	e007      	b.n	8011c06 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	00db      	lsls	r3, r3, #3
 8011bfe:	1a9b      	subs	r3, r3, r2
 8011c00:	08da      	lsrs	r2, r3, #3
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	691a      	ldr	r2, [r3, #16]
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8011c0e:	4b11      	ldr	r3, [pc, #68]	; (8011c54 <dhcp_handle_ack+0xb8>)
 8011c10:	799b      	ldrb	r3, [r3, #6]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00b      	beq.n	8011c2e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8011c16:	4b10      	ldr	r3, [pc, #64]	; (8011c58 <dhcp_handle_ack+0xbc>)
 8011c18:	699b      	ldr	r3, [r3, #24]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7f7 ff4b 	bl	8009ab6 <lwip_htonl>
 8011c20:	4602      	mov	r2, r0
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2201      	movs	r2, #1
 8011c2a:	71da      	strb	r2, [r3, #7]
 8011c2c:	e002      	b.n	8011c34 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2200      	movs	r2, #0
 8011c32:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011c34:	4b07      	ldr	r3, [pc, #28]	; (8011c54 <dhcp_handle_ack+0xb8>)
 8011c36:	79db      	ldrb	r3, [r3, #7]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d007      	beq.n	8011c4c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8011c3c:	4b06      	ldr	r3, [pc, #24]	; (8011c58 <dhcp_handle_ack+0xbc>)
 8011c3e:	69db      	ldr	r3, [r3, #28]
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7f7 ff38 	bl	8009ab6 <lwip_htonl>
 8011c46:	4602      	mov	r2, r0
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011c4c:	bf00      	nop
 8011c4e:	3710      	adds	r7, #16
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}
 8011c54:	2000b0b0 	.word	0x2000b0b0
 8011c58:	2000b090 	.word	0x2000b090

08011c5c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d109      	bne.n	8011c7e <dhcp_start+0x22>
 8011c6a:	4b37      	ldr	r3, [pc, #220]	; (8011d48 <dhcp_start+0xec>)
 8011c6c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011c70:	4936      	ldr	r1, [pc, #216]	; (8011d4c <dhcp_start+0xf0>)
 8011c72:	4837      	ldr	r0, [pc, #220]	; (8011d50 <dhcp_start+0xf4>)
 8011c74:	f003 fe54 	bl	8015920 <iprintf>
 8011c78:	f06f 030f 	mvn.w	r3, #15
 8011c7c:	e060      	b.n	8011d40 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011c84:	f003 0301 	and.w	r3, r3, #1
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d109      	bne.n	8011ca0 <dhcp_start+0x44>
 8011c8c:	4b2e      	ldr	r3, [pc, #184]	; (8011d48 <dhcp_start+0xec>)
 8011c8e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011c92:	4930      	ldr	r1, [pc, #192]	; (8011d54 <dhcp_start+0xf8>)
 8011c94:	482e      	ldr	r0, [pc, #184]	; (8011d50 <dhcp_start+0xf4>)
 8011c96:	f003 fe43 	bl	8015920 <iprintf>
 8011c9a:	f06f 030f 	mvn.w	r3, #15
 8011c9e:	e04f      	b.n	8011d40 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011caa:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8011cae:	d202      	bcs.n	8011cb6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb4:	e044      	b.n	8011d40 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d10d      	bne.n	8011cd8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011cbc:	2034      	movs	r0, #52	; 0x34
 8011cbe:	f7f8 f9cd 	bl	800a05c <mem_malloc>
 8011cc2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d102      	bne.n	8011cd0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8011cca:	f04f 33ff 	mov.w	r3, #4294967295
 8011cce:	e037      	b.n	8011d40 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	68fa      	ldr	r2, [r7, #12]
 8011cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8011cd6:	e005      	b.n	8011ce4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	791b      	ldrb	r3, [r3, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d001      	beq.n	8011ce4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011ce0:	f7ff fc90 	bl	8011604 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011ce4:	2234      	movs	r2, #52	; 0x34
 8011ce6:	2100      	movs	r1, #0
 8011ce8:	68f8      	ldr	r0, [r7, #12]
 8011cea:	f003 fe11 	bl	8015910 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011cee:	f7ff fc37 	bl	8011560 <dhcp_inc_pcb_refcount>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d002      	beq.n	8011cfe <dhcp_start+0xa2>
    return ERR_MEM;
 8011cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cfc:	e020      	b.n	8011d40 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2201      	movs	r2, #1
 8011d02:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d0a:	f003 0304 	and.w	r3, r3, #4
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d105      	bne.n	8011d1e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8011d12:	2102      	movs	r1, #2
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f000 fd01 	bl	801271c <dhcp_set_state>
    return ERR_OK;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	e010      	b.n	8011d40 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 f8f8 	bl	8011f14 <dhcp_discover>
 8011d24:	4603      	mov	r3, r0
 8011d26:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011d28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d005      	beq.n	8011d3c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f000 fc59 	bl	80125e8 <dhcp_release_and_stop>
    return ERR_MEM;
 8011d36:	f04f 33ff 	mov.w	r3, #4294967295
 8011d3a:	e001      	b.n	8011d40 <dhcp_start+0xe4>
  }
  return result;
 8011d3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3710      	adds	r7, #16
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	08019264 	.word	0x08019264
 8011d4c:	08019348 	.word	0x08019348
 8011d50:	080192c4 	.word	0x080192c4
 8011d54:	0801938c 	.word	0x0801938c

08011d58 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d64:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d025      	beq.n	8011db8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	795b      	ldrb	r3, [r3, #5]
 8011d70:	2b0a      	cmp	r3, #10
 8011d72:	d008      	beq.n	8011d86 <dhcp_network_changed+0x2e>
 8011d74:	2b0a      	cmp	r3, #10
 8011d76:	dc0d      	bgt.n	8011d94 <dhcp_network_changed+0x3c>
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d01f      	beq.n	8011dbc <dhcp_network_changed+0x64>
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	db09      	blt.n	8011d94 <dhcp_network_changed+0x3c>
 8011d80:	3b03      	subs	r3, #3
 8011d82:	2b02      	cmp	r3, #2
 8011d84:	d806      	bhi.n	8011d94 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 fb75 	bl	801247c <dhcp_reboot>
      break;
 8011d92:	e014      	b.n	8011dbe <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	795b      	ldrb	r3, [r3, #5]
 8011d98:	2b0c      	cmp	r3, #12
 8011d9a:	d906      	bls.n	8011daa <dhcp_network_changed+0x52>
 8011d9c:	4b09      	ldr	r3, [pc, #36]	; (8011dc4 <dhcp_network_changed+0x6c>)
 8011d9e:	f240 326d 	movw	r2, #877	; 0x36d
 8011da2:	4909      	ldr	r1, [pc, #36]	; (8011dc8 <dhcp_network_changed+0x70>)
 8011da4:	4809      	ldr	r0, [pc, #36]	; (8011dcc <dhcp_network_changed+0x74>)
 8011da6:	f003 fdbb 	bl	8015920 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	2200      	movs	r2, #0
 8011dae:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 f8af 	bl	8011f14 <dhcp_discover>
      break;
 8011db6:	e002      	b.n	8011dbe <dhcp_network_changed+0x66>
    return;
 8011db8:	bf00      	nop
 8011dba:	e000      	b.n	8011dbe <dhcp_network_changed+0x66>
      break;
 8011dbc:	bf00      	nop
  }
}
 8011dbe:	3710      	adds	r7, #16
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	08019264 	.word	0x08019264
 8011dc8:	080193b0 	.word	0x080193b0
 8011dcc:	080192c4 	.word	0x080192c4

08011dd0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d107      	bne.n	8011df0 <dhcp_arp_reply+0x20>
 8011de0:	4b0e      	ldr	r3, [pc, #56]	; (8011e1c <dhcp_arp_reply+0x4c>)
 8011de2:	f240 328b 	movw	r2, #907	; 0x38b
 8011de6:	490e      	ldr	r1, [pc, #56]	; (8011e20 <dhcp_arp_reply+0x50>)
 8011de8:	480e      	ldr	r0, [pc, #56]	; (8011e24 <dhcp_arp_reply+0x54>)
 8011dea:	f003 fd99 	bl	8015920 <iprintf>
 8011dee:	e012      	b.n	8011e16 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d00c      	beq.n	8011e16 <dhcp_arp_reply+0x46>
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	795b      	ldrb	r3, [r3, #5]
 8011e00:	2b08      	cmp	r3, #8
 8011e02:	d108      	bne.n	8011e16 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	681a      	ldr	r2, [r3, #0]
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	69db      	ldr	r3, [r3, #28]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d102      	bne.n	8011e16 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f000 f809 	bl	8011e28 <dhcp_decline>
    }
  }
}
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	08019264 	.word	0x08019264
 8011e20:	08019348 	.word	0x08019348
 8011e24:	080192c4 	.word	0x080192c4

08011e28 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011e28:	b5b0      	push	{r4, r5, r7, lr}
 8011e2a:	b08a      	sub	sp, #40	; 0x28
 8011e2c:	af02      	add	r7, sp, #8
 8011e2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e34:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011e36:	210c      	movs	r1, #12
 8011e38:	69b8      	ldr	r0, [r7, #24]
 8011e3a:	f000 fc6f 	bl	801271c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8011e3e:	f107 030c 	add.w	r3, r7, #12
 8011e42:	2204      	movs	r2, #4
 8011e44:	69b9      	ldr	r1, [r7, #24]
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f001 f8f4 	bl	8013034 <dhcp_create_msg>
 8011e4c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d035      	beq.n	8011ec0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011e5a:	89b8      	ldrh	r0, [r7, #12]
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e62:	2304      	movs	r3, #4
 8011e64:	2232      	movs	r2, #50	; 0x32
 8011e66:	f000 fc73 	bl	8012750 <dhcp_option>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011e6e:	89bc      	ldrh	r4, [r7, #12]
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	69db      	ldr	r3, [r3, #28]
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7f7 fe1b 	bl	8009ab6 <lwip_htonl>
 8011e80:	4603      	mov	r3, r0
 8011e82:	461a      	mov	r2, r3
 8011e84:	4629      	mov	r1, r5
 8011e86:	4620      	mov	r0, r4
 8011e88:	f000 fcee 	bl	8012868 <dhcp_option_long>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011e90:	89b8      	ldrh	r0, [r7, #12]
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	33f0      	adds	r3, #240	; 0xf0
 8011e96:	697a      	ldr	r2, [r7, #20]
 8011e98:	4619      	mov	r1, r3
 8011e9a:	f001 f9a1 	bl	80131e0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011e9e:	4b19      	ldr	r3, [pc, #100]	; (8011f04 <dhcp_decline+0xdc>)
 8011ea0:	6818      	ldr	r0, [r3, #0]
 8011ea2:	4b19      	ldr	r3, [pc, #100]	; (8011f08 <dhcp_decline+0xe0>)
 8011ea4:	9301      	str	r3, [sp, #4]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	2343      	movs	r3, #67	; 0x43
 8011eac:	4a17      	ldr	r2, [pc, #92]	; (8011f0c <dhcp_decline+0xe4>)
 8011eae:	6979      	ldr	r1, [r7, #20]
 8011eb0:	f7ff f8d0 	bl	8011054 <udp_sendto_if_src>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011eb8:	6978      	ldr	r0, [r7, #20]
 8011eba:	f7f9 f951 	bl	800b160 <pbuf_free>
 8011ebe:	e001      	b.n	8011ec4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011ec0:	23ff      	movs	r3, #255	; 0xff
 8011ec2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011ec4:	69bb      	ldr	r3, [r7, #24]
 8011ec6:	799b      	ldrb	r3, [r3, #6]
 8011ec8:	2bff      	cmp	r3, #255	; 0xff
 8011eca:	d005      	beq.n	8011ed8 <dhcp_decline+0xb0>
    dhcp->tries++;
 8011ecc:	69bb      	ldr	r3, [r7, #24]
 8011ece:	799b      	ldrb	r3, [r3, #6]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	b2da      	uxtb	r2, r3
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8011ed8:	f242 7310 	movw	r3, #10000	; 0x2710
 8011edc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011ede:	89fb      	ldrh	r3, [r7, #14]
 8011ee0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011ee4:	4a0a      	ldr	r2, [pc, #40]	; (8011f10 <dhcp_decline+0xe8>)
 8011ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8011eea:	1152      	asrs	r2, r2, #5
 8011eec:	17db      	asrs	r3, r3, #31
 8011eee:	1ad3      	subs	r3, r2, r3
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	69bb      	ldr	r3, [r7, #24]
 8011ef4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011ef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3720      	adds	r7, #32
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bdb0      	pop	{r4, r5, r7, pc}
 8011f02:	bf00      	nop
 8011f04:	2000b0b8 	.word	0x2000b0b8
 8011f08:	0801c4ac 	.word	0x0801c4ac
 8011f0c:	0801c4b0 	.word	0x0801c4b0
 8011f10:	10624dd3 	.word	0x10624dd3

08011f14 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b08a      	sub	sp, #40	; 0x28
 8011f18:	af02      	add	r7, sp, #8
 8011f1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f20:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8011f22:	2300      	movs	r3, #0
 8011f24:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011f2c:	2106      	movs	r1, #6
 8011f2e:	69b8      	ldr	r0, [r7, #24]
 8011f30:	f000 fbf4 	bl	801271c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011f34:	f107 0308 	add.w	r3, r7, #8
 8011f38:	2201      	movs	r2, #1
 8011f3a:	69b9      	ldr	r1, [r7, #24]
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f001 f879 	bl	8013034 <dhcp_create_msg>
 8011f42:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d04b      	beq.n	8011fe2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011f50:	8938      	ldrh	r0, [r7, #8]
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f58:	2302      	movs	r3, #2
 8011f5a:	2239      	movs	r2, #57	; 0x39
 8011f5c:	f000 fbf8 	bl	8012750 <dhcp_option>
 8011f60:	4603      	mov	r3, r0
 8011f62:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011f64:	8938      	ldrh	r0, [r7, #8]
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f70:	461a      	mov	r2, r3
 8011f72:	f000 fc47 	bl	8012804 <dhcp_option_short>
 8011f76:	4603      	mov	r3, r0
 8011f78:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011f7a:	8938      	ldrh	r0, [r7, #8]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f82:	2303      	movs	r3, #3
 8011f84:	2237      	movs	r2, #55	; 0x37
 8011f86:	f000 fbe3 	bl	8012750 <dhcp_option>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011f8e:	2300      	movs	r3, #0
 8011f90:	77fb      	strb	r3, [r7, #31]
 8011f92:	e00e      	b.n	8011fb2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011f94:	8938      	ldrh	r0, [r7, #8]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f9c:	7ffb      	ldrb	r3, [r7, #31]
 8011f9e:	4a29      	ldr	r2, [pc, #164]	; (8012044 <dhcp_discover+0x130>)
 8011fa0:	5cd3      	ldrb	r3, [r2, r3]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	f000 fc08 	bl	80127b8 <dhcp_option_byte>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011fac:	7ffb      	ldrb	r3, [r7, #31]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	77fb      	strb	r3, [r7, #31]
 8011fb2:	7ffb      	ldrb	r3, [r7, #31]
 8011fb4:	2b02      	cmp	r3, #2
 8011fb6:	d9ed      	bls.n	8011f94 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011fb8:	8938      	ldrh	r0, [r7, #8]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	33f0      	adds	r3, #240	; 0xf0
 8011fbe:	693a      	ldr	r2, [r7, #16]
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	f001 f90d 	bl	80131e0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011fc6:	4b20      	ldr	r3, [pc, #128]	; (8012048 <dhcp_discover+0x134>)
 8011fc8:	6818      	ldr	r0, [r3, #0]
 8011fca:	4b20      	ldr	r3, [pc, #128]	; (801204c <dhcp_discover+0x138>)
 8011fcc:	9301      	str	r3, [sp, #4]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	9300      	str	r3, [sp, #0]
 8011fd2:	2343      	movs	r3, #67	; 0x43
 8011fd4:	4a1e      	ldr	r2, [pc, #120]	; (8012050 <dhcp_discover+0x13c>)
 8011fd6:	6939      	ldr	r1, [r7, #16]
 8011fd8:	f7ff f83c 	bl	8011054 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8011fdc:	6938      	ldr	r0, [r7, #16]
 8011fde:	f7f9 f8bf 	bl	800b160 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	799b      	ldrb	r3, [r3, #6]
 8011fe6:	2bff      	cmp	r3, #255	; 0xff
 8011fe8:	d005      	beq.n	8011ff6 <dhcp_discover+0xe2>
    dhcp->tries++;
 8011fea:	69bb      	ldr	r3, [r7, #24]
 8011fec:	799b      	ldrb	r3, [r3, #6]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	b2da      	uxtb	r2, r3
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011ff6:	69bb      	ldr	r3, [r7, #24]
 8011ff8:	799b      	ldrb	r3, [r3, #6]
 8011ffa:	2b05      	cmp	r3, #5
 8011ffc:	d80d      	bhi.n	801201a <dhcp_discover+0x106>
 8011ffe:	69bb      	ldr	r3, [r7, #24]
 8012000:	799b      	ldrb	r3, [r3, #6]
 8012002:	461a      	mov	r2, r3
 8012004:	2301      	movs	r3, #1
 8012006:	4093      	lsls	r3, r2
 8012008:	b29b      	uxth	r3, r3
 801200a:	461a      	mov	r2, r3
 801200c:	0152      	lsls	r2, r2, #5
 801200e:	1ad2      	subs	r2, r2, r3
 8012010:	0092      	lsls	r2, r2, #2
 8012012:	4413      	add	r3, r2
 8012014:	00db      	lsls	r3, r3, #3
 8012016:	b29b      	uxth	r3, r3
 8012018:	e001      	b.n	801201e <dhcp_discover+0x10a>
 801201a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801201e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012020:	897b      	ldrh	r3, [r7, #10]
 8012022:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012026:	4a0b      	ldr	r2, [pc, #44]	; (8012054 <dhcp_discover+0x140>)
 8012028:	fb82 1203 	smull	r1, r2, r2, r3
 801202c:	1152      	asrs	r2, r2, #5
 801202e:	17db      	asrs	r3, r3, #31
 8012030:	1ad3      	subs	r3, r2, r3
 8012032:	b29a      	uxth	r2, r3
 8012034:	69bb      	ldr	r3, [r7, #24]
 8012036:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012038:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801203c:	4618      	mov	r0, r3
 801203e:	3720      	adds	r7, #32
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	20000064 	.word	0x20000064
 8012048:	2000b0b8 	.word	0x2000b0b8
 801204c:	0801c4ac 	.word	0x0801c4ac
 8012050:	0801c4b0 	.word	0x0801c4b0
 8012054:	10624dd3 	.word	0x10624dd3

08012058 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b088      	sub	sp, #32
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d107      	bne.n	8012076 <dhcp_bind+0x1e>
 8012066:	4b64      	ldr	r3, [pc, #400]	; (80121f8 <dhcp_bind+0x1a0>)
 8012068:	f240 4215 	movw	r2, #1045	; 0x415
 801206c:	4963      	ldr	r1, [pc, #396]	; (80121fc <dhcp_bind+0x1a4>)
 801206e:	4864      	ldr	r0, [pc, #400]	; (8012200 <dhcp_bind+0x1a8>)
 8012070:	f003 fc56 	bl	8015920 <iprintf>
 8012074:	e0bc      	b.n	80121f0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801207a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801207c:	69bb      	ldr	r3, [r7, #24]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d107      	bne.n	8012092 <dhcp_bind+0x3a>
 8012082:	4b5d      	ldr	r3, [pc, #372]	; (80121f8 <dhcp_bind+0x1a0>)
 8012084:	f240 4217 	movw	r2, #1047	; 0x417
 8012088:	495e      	ldr	r1, [pc, #376]	; (8012204 <dhcp_bind+0x1ac>)
 801208a:	485d      	ldr	r0, [pc, #372]	; (8012200 <dhcp_bind+0x1a8>)
 801208c:	f003 fc48 	bl	8015920 <iprintf>
 8012090:	e0ae      	b.n	80121f0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	2200      	movs	r2, #0
 8012096:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012098:	69bb      	ldr	r3, [r7, #24]
 801209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120a0:	d019      	beq.n	80120d6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80120a2:	69bb      	ldr	r3, [r7, #24]
 80120a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120a6:	331e      	adds	r3, #30
 80120a8:	4a57      	ldr	r2, [pc, #348]	; (8012208 <dhcp_bind+0x1b0>)
 80120aa:	fba2 2303 	umull	r2, r3, r2, r3
 80120ae:	095b      	lsrs	r3, r3, #5
 80120b0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120b8:	d302      	bcc.n	80120c0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80120ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120be:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80120c8:	69bb      	ldr	r3, [r7, #24]
 80120ca:	8a9b      	ldrh	r3, [r3, #20]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d102      	bne.n	80120d6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80120d0:	69bb      	ldr	r3, [r7, #24]
 80120d2:	2201      	movs	r2, #1
 80120d4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120de:	d01d      	beq.n	801211c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e4:	331e      	adds	r3, #30
 80120e6:	4a48      	ldr	r2, [pc, #288]	; (8012208 <dhcp_bind+0x1b0>)
 80120e8:	fba2 2303 	umull	r2, r3, r2, r3
 80120ec:	095b      	lsrs	r3, r3, #5
 80120ee:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120f6:	d302      	bcc.n	80120fe <dhcp_bind+0xa6>
      timeout = 0xffff;
 80120f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120fc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	b29a      	uxth	r2, r3
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	895b      	ldrh	r3, [r3, #10]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d102      	bne.n	8012114 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	2201      	movs	r2, #1
 8012112:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	895a      	ldrh	r2, [r3, #10]
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012124:	d01d      	beq.n	8012162 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801212a:	331e      	adds	r3, #30
 801212c:	4a36      	ldr	r2, [pc, #216]	; (8012208 <dhcp_bind+0x1b0>)
 801212e:	fba2 2303 	umull	r2, r3, r2, r3
 8012132:	095b      	lsrs	r3, r3, #5
 8012134:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801213c:	d302      	bcc.n	8012144 <dhcp_bind+0xec>
      timeout = 0xffff;
 801213e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012142:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	b29a      	uxth	r2, r3
 8012148:	69bb      	ldr	r3, [r7, #24]
 801214a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801214c:	69bb      	ldr	r3, [r7, #24]
 801214e:	899b      	ldrh	r3, [r3, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d102      	bne.n	801215a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	2201      	movs	r2, #1
 8012158:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801215a:	69bb      	ldr	r3, [r7, #24]
 801215c:	899a      	ldrh	r2, [r3, #12]
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012162:	69bb      	ldr	r3, [r7, #24]
 8012164:	895a      	ldrh	r2, [r3, #10]
 8012166:	69bb      	ldr	r3, [r7, #24]
 8012168:	899b      	ldrh	r3, [r3, #12]
 801216a:	429a      	cmp	r2, r3
 801216c:	d306      	bcc.n	801217c <dhcp_bind+0x124>
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	899b      	ldrh	r3, [r3, #12]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d002      	beq.n	801217c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012176:	69bb      	ldr	r3, [r7, #24]
 8012178:	2200      	movs	r2, #0
 801217a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801217c:	69bb      	ldr	r3, [r7, #24]
 801217e:	79db      	ldrb	r3, [r3, #7]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d003      	beq.n	801218c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012184:	69bb      	ldr	r3, [r7, #24]
 8012186:	6a1b      	ldr	r3, [r3, #32]
 8012188:	613b      	str	r3, [r7, #16]
 801218a:	e014      	b.n	80121b6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	331c      	adds	r3, #28
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012198:	2b00      	cmp	r3, #0
 801219a:	db02      	blt.n	80121a2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801219c:	23ff      	movs	r3, #255	; 0xff
 801219e:	613b      	str	r3, [r7, #16]
 80121a0:	e009      	b.n	80121b6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	2bbf      	cmp	r3, #191	; 0xbf
 80121a6:	d903      	bls.n	80121b0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80121a8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80121ac:	613b      	str	r3, [r7, #16]
 80121ae:	e002      	b.n	80121b6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80121b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80121b4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ba:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d108      	bne.n	80121d4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80121c2:	69bb      	ldr	r3, [r7, #24]
 80121c4:	69da      	ldr	r2, [r3, #28]
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	4013      	ands	r3, r2
 80121ca:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80121d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80121d4:	210a      	movs	r1, #10
 80121d6:	69b8      	ldr	r0, [r7, #24]
 80121d8:	f000 faa0 	bl	801271c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	f103 011c 	add.w	r1, r3, #28
 80121e2:	f107 030c 	add.w	r3, r7, #12
 80121e6:	f107 0210 	add.w	r2, r7, #16
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7f8 fad8 	bl	800a7a0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80121f0:	3720      	adds	r7, #32
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	08019264 	.word	0x08019264
 80121fc:	080193c4 	.word	0x080193c4
 8012200:	080192c4 	.word	0x080192c4
 8012204:	080193e0 	.word	0x080193e0
 8012208:	88888889 	.word	0x88888889

0801220c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b08a      	sub	sp, #40	; 0x28
 8012210:	af02      	add	r7, sp, #8
 8012212:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012218:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801221a:	2105      	movs	r1, #5
 801221c:	69b8      	ldr	r0, [r7, #24]
 801221e:	f000 fa7d 	bl	801271c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012222:	f107 030c 	add.w	r3, r7, #12
 8012226:	2203      	movs	r2, #3
 8012228:	69b9      	ldr	r1, [r7, #24]
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f000 ff02 	bl	8013034 <dhcp_create_msg>
 8012230:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d04e      	beq.n	80122d6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801223e:	89b8      	ldrh	r0, [r7, #12]
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012246:	2302      	movs	r3, #2
 8012248:	2239      	movs	r2, #57	; 0x39
 801224a:	f000 fa81 	bl	8012750 <dhcp_option>
 801224e:	4603      	mov	r3, r0
 8012250:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012252:	89b8      	ldrh	r0, [r7, #12]
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801225e:	461a      	mov	r2, r3
 8012260:	f000 fad0 	bl	8012804 <dhcp_option_short>
 8012264:	4603      	mov	r3, r0
 8012266:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012268:	89b8      	ldrh	r0, [r7, #12]
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012270:	2303      	movs	r3, #3
 8012272:	2237      	movs	r2, #55	; 0x37
 8012274:	f000 fa6c 	bl	8012750 <dhcp_option>
 8012278:	4603      	mov	r3, r0
 801227a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801227c:	2300      	movs	r3, #0
 801227e:	77bb      	strb	r3, [r7, #30]
 8012280:	e00e      	b.n	80122a0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012282:	89b8      	ldrh	r0, [r7, #12]
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801228a:	7fbb      	ldrb	r3, [r7, #30]
 801228c:	4a2a      	ldr	r2, [pc, #168]	; (8012338 <dhcp_renew+0x12c>)
 801228e:	5cd3      	ldrb	r3, [r2, r3]
 8012290:	461a      	mov	r2, r3
 8012292:	f000 fa91 	bl	80127b8 <dhcp_option_byte>
 8012296:	4603      	mov	r3, r0
 8012298:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801229a:	7fbb      	ldrb	r3, [r7, #30]
 801229c:	3301      	adds	r3, #1
 801229e:	77bb      	strb	r3, [r7, #30]
 80122a0:	7fbb      	ldrb	r3, [r7, #30]
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	d9ed      	bls.n	8012282 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80122a6:	89b8      	ldrh	r0, [r7, #12]
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	33f0      	adds	r3, #240	; 0xf0
 80122ac:	697a      	ldr	r2, [r7, #20]
 80122ae:	4619      	mov	r1, r3
 80122b0:	f000 ff96 	bl	80131e0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80122b4:	4b21      	ldr	r3, [pc, #132]	; (801233c <dhcp_renew+0x130>)
 80122b6:	6818      	ldr	r0, [r3, #0]
 80122b8:	69bb      	ldr	r3, [r7, #24]
 80122ba:	f103 0218 	add.w	r2, r3, #24
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	2343      	movs	r3, #67	; 0x43
 80122c4:	6979      	ldr	r1, [r7, #20]
 80122c6:	f7fe fe51 	bl	8010f6c <udp_sendto_if>
 80122ca:	4603      	mov	r3, r0
 80122cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80122ce:	6978      	ldr	r0, [r7, #20]
 80122d0:	f7f8 ff46 	bl	800b160 <pbuf_free>
 80122d4:	e001      	b.n	80122da <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80122d6:	23ff      	movs	r3, #255	; 0xff
 80122d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	799b      	ldrb	r3, [r3, #6]
 80122de:	2bff      	cmp	r3, #255	; 0xff
 80122e0:	d005      	beq.n	80122ee <dhcp_renew+0xe2>
    dhcp->tries++;
 80122e2:	69bb      	ldr	r3, [r7, #24]
 80122e4:	799b      	ldrb	r3, [r3, #6]
 80122e6:	3301      	adds	r3, #1
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	69bb      	ldr	r3, [r7, #24]
 80122ec:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80122ee:	69bb      	ldr	r3, [r7, #24]
 80122f0:	799b      	ldrb	r3, [r3, #6]
 80122f2:	2b09      	cmp	r3, #9
 80122f4:	d80a      	bhi.n	801230c <dhcp_renew+0x100>
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	799b      	ldrb	r3, [r3, #6]
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	461a      	mov	r2, r3
 80122fe:	0152      	lsls	r2, r2, #5
 8012300:	1ad2      	subs	r2, r2, r3
 8012302:	0092      	lsls	r2, r2, #2
 8012304:	4413      	add	r3, r2
 8012306:	011b      	lsls	r3, r3, #4
 8012308:	b29b      	uxth	r3, r3
 801230a:	e001      	b.n	8012310 <dhcp_renew+0x104>
 801230c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012310:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012312:	89fb      	ldrh	r3, [r7, #14]
 8012314:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012318:	4a09      	ldr	r2, [pc, #36]	; (8012340 <dhcp_renew+0x134>)
 801231a:	fb82 1203 	smull	r1, r2, r2, r3
 801231e:	1152      	asrs	r2, r2, #5
 8012320:	17db      	asrs	r3, r3, #31
 8012322:	1ad3      	subs	r3, r2, r3
 8012324:	b29a      	uxth	r2, r3
 8012326:	69bb      	ldr	r3, [r7, #24]
 8012328:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801232a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801232e:	4618      	mov	r0, r3
 8012330:	3720      	adds	r7, #32
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	20000064 	.word	0x20000064
 801233c:	2000b0b8 	.word	0x2000b0b8
 8012340:	10624dd3 	.word	0x10624dd3

08012344 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b08a      	sub	sp, #40	; 0x28
 8012348:	af02      	add	r7, sp, #8
 801234a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012350:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012352:	2104      	movs	r1, #4
 8012354:	69b8      	ldr	r0, [r7, #24]
 8012356:	f000 f9e1 	bl	801271c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801235a:	f107 030c 	add.w	r3, r7, #12
 801235e:	2203      	movs	r2, #3
 8012360:	69b9      	ldr	r1, [r7, #24]
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 fe66 	bl	8013034 <dhcp_create_msg>
 8012368:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d04c      	beq.n	801240a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012376:	89b8      	ldrh	r0, [r7, #12]
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801237e:	2302      	movs	r3, #2
 8012380:	2239      	movs	r2, #57	; 0x39
 8012382:	f000 f9e5 	bl	8012750 <dhcp_option>
 8012386:	4603      	mov	r3, r0
 8012388:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801238a:	89b8      	ldrh	r0, [r7, #12]
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012396:	461a      	mov	r2, r3
 8012398:	f000 fa34 	bl	8012804 <dhcp_option_short>
 801239c:	4603      	mov	r3, r0
 801239e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80123a0:	89b8      	ldrh	r0, [r7, #12]
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123a8:	2303      	movs	r3, #3
 80123aa:	2237      	movs	r2, #55	; 0x37
 80123ac:	f000 f9d0 	bl	8012750 <dhcp_option>
 80123b0:	4603      	mov	r3, r0
 80123b2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80123b4:	2300      	movs	r3, #0
 80123b6:	77bb      	strb	r3, [r7, #30]
 80123b8:	e00e      	b.n	80123d8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80123ba:	89b8      	ldrh	r0, [r7, #12]
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123c2:	7fbb      	ldrb	r3, [r7, #30]
 80123c4:	4a29      	ldr	r2, [pc, #164]	; (801246c <dhcp_rebind+0x128>)
 80123c6:	5cd3      	ldrb	r3, [r2, r3]
 80123c8:	461a      	mov	r2, r3
 80123ca:	f000 f9f5 	bl	80127b8 <dhcp_option_byte>
 80123ce:	4603      	mov	r3, r0
 80123d0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80123d2:	7fbb      	ldrb	r3, [r7, #30]
 80123d4:	3301      	adds	r3, #1
 80123d6:	77bb      	strb	r3, [r7, #30]
 80123d8:	7fbb      	ldrb	r3, [r7, #30]
 80123da:	2b02      	cmp	r3, #2
 80123dc:	d9ed      	bls.n	80123ba <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80123de:	89b8      	ldrh	r0, [r7, #12]
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	33f0      	adds	r3, #240	; 0xf0
 80123e4:	697a      	ldr	r2, [r7, #20]
 80123e6:	4619      	mov	r1, r3
 80123e8:	f000 fefa 	bl	80131e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80123ec:	4b20      	ldr	r3, [pc, #128]	; (8012470 <dhcp_rebind+0x12c>)
 80123ee:	6818      	ldr	r0, [r3, #0]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	2343      	movs	r3, #67	; 0x43
 80123f6:	4a1f      	ldr	r2, [pc, #124]	; (8012474 <dhcp_rebind+0x130>)
 80123f8:	6979      	ldr	r1, [r7, #20]
 80123fa:	f7fe fdb7 	bl	8010f6c <udp_sendto_if>
 80123fe:	4603      	mov	r3, r0
 8012400:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012402:	6978      	ldr	r0, [r7, #20]
 8012404:	f7f8 feac 	bl	800b160 <pbuf_free>
 8012408:	e001      	b.n	801240e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801240a:	23ff      	movs	r3, #255	; 0xff
 801240c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801240e:	69bb      	ldr	r3, [r7, #24]
 8012410:	799b      	ldrb	r3, [r3, #6]
 8012412:	2bff      	cmp	r3, #255	; 0xff
 8012414:	d005      	beq.n	8012422 <dhcp_rebind+0xde>
    dhcp->tries++;
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	799b      	ldrb	r3, [r3, #6]
 801241a:	3301      	adds	r3, #1
 801241c:	b2da      	uxtb	r2, r3
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012422:	69bb      	ldr	r3, [r7, #24]
 8012424:	799b      	ldrb	r3, [r3, #6]
 8012426:	2b09      	cmp	r3, #9
 8012428:	d80a      	bhi.n	8012440 <dhcp_rebind+0xfc>
 801242a:	69bb      	ldr	r3, [r7, #24]
 801242c:	799b      	ldrb	r3, [r3, #6]
 801242e:	b29b      	uxth	r3, r3
 8012430:	461a      	mov	r2, r3
 8012432:	0152      	lsls	r2, r2, #5
 8012434:	1ad2      	subs	r2, r2, r3
 8012436:	0092      	lsls	r2, r2, #2
 8012438:	4413      	add	r3, r2
 801243a:	00db      	lsls	r3, r3, #3
 801243c:	b29b      	uxth	r3, r3
 801243e:	e001      	b.n	8012444 <dhcp_rebind+0x100>
 8012440:	f242 7310 	movw	r3, #10000	; 0x2710
 8012444:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012446:	89fb      	ldrh	r3, [r7, #14]
 8012448:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801244c:	4a0a      	ldr	r2, [pc, #40]	; (8012478 <dhcp_rebind+0x134>)
 801244e:	fb82 1203 	smull	r1, r2, r2, r3
 8012452:	1152      	asrs	r2, r2, #5
 8012454:	17db      	asrs	r3, r3, #31
 8012456:	1ad3      	subs	r3, r2, r3
 8012458:	b29a      	uxth	r2, r3
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801245e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012462:	4618      	mov	r0, r3
 8012464:	3720      	adds	r7, #32
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	20000064 	.word	0x20000064
 8012470:	2000b0b8 	.word	0x2000b0b8
 8012474:	0801c4b0 	.word	0x0801c4b0
 8012478:	10624dd3 	.word	0x10624dd3

0801247c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801247c:	b5b0      	push	{r4, r5, r7, lr}
 801247e:	b08a      	sub	sp, #40	; 0x28
 8012480:	af02      	add	r7, sp, #8
 8012482:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012488:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801248a:	2103      	movs	r1, #3
 801248c:	69b8      	ldr	r0, [r7, #24]
 801248e:	f000 f945 	bl	801271c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012492:	f107 030c 	add.w	r3, r7, #12
 8012496:	2203      	movs	r2, #3
 8012498:	69b9      	ldr	r1, [r7, #24]
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fdca 	bl	8013034 <dhcp_create_msg>
 80124a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d066      	beq.n	8012576 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80124ae:	89b8      	ldrh	r0, [r7, #12]
 80124b0:	693b      	ldr	r3, [r7, #16]
 80124b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80124b6:	2302      	movs	r3, #2
 80124b8:	2239      	movs	r2, #57	; 0x39
 80124ba:	f000 f949 	bl	8012750 <dhcp_option>
 80124be:	4603      	mov	r3, r0
 80124c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80124c2:	89b8      	ldrh	r0, [r7, #12]
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	33f0      	adds	r3, #240	; 0xf0
 80124c8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80124cc:	4619      	mov	r1, r3
 80124ce:	f000 f999 	bl	8012804 <dhcp_option_short>
 80124d2:	4603      	mov	r3, r0
 80124d4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80124d6:	89b8      	ldrh	r0, [r7, #12]
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80124de:	2304      	movs	r3, #4
 80124e0:	2232      	movs	r2, #50	; 0x32
 80124e2:	f000 f935 	bl	8012750 <dhcp_option>
 80124e6:	4603      	mov	r3, r0
 80124e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80124ea:	89bc      	ldrh	r4, [r7, #12]
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	69db      	ldr	r3, [r3, #28]
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7f7 fadd 	bl	8009ab6 <lwip_htonl>
 80124fc:	4603      	mov	r3, r0
 80124fe:	461a      	mov	r2, r3
 8012500:	4629      	mov	r1, r5
 8012502:	4620      	mov	r0, r4
 8012504:	f000 f9b0 	bl	8012868 <dhcp_option_long>
 8012508:	4603      	mov	r3, r0
 801250a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801250c:	89b8      	ldrh	r0, [r7, #12]
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012514:	2303      	movs	r3, #3
 8012516:	2237      	movs	r2, #55	; 0x37
 8012518:	f000 f91a 	bl	8012750 <dhcp_option>
 801251c:	4603      	mov	r3, r0
 801251e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012520:	2300      	movs	r3, #0
 8012522:	77bb      	strb	r3, [r7, #30]
 8012524:	e00e      	b.n	8012544 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012526:	89b8      	ldrh	r0, [r7, #12]
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801252e:	7fbb      	ldrb	r3, [r7, #30]
 8012530:	4a29      	ldr	r2, [pc, #164]	; (80125d8 <dhcp_reboot+0x15c>)
 8012532:	5cd3      	ldrb	r3, [r2, r3]
 8012534:	461a      	mov	r2, r3
 8012536:	f000 f93f 	bl	80127b8 <dhcp_option_byte>
 801253a:	4603      	mov	r3, r0
 801253c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801253e:	7fbb      	ldrb	r3, [r7, #30]
 8012540:	3301      	adds	r3, #1
 8012542:	77bb      	strb	r3, [r7, #30]
 8012544:	7fbb      	ldrb	r3, [r7, #30]
 8012546:	2b02      	cmp	r3, #2
 8012548:	d9ed      	bls.n	8012526 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801254a:	89b8      	ldrh	r0, [r7, #12]
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	33f0      	adds	r3, #240	; 0xf0
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	4619      	mov	r1, r3
 8012554:	f000 fe44 	bl	80131e0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012558:	4b20      	ldr	r3, [pc, #128]	; (80125dc <dhcp_reboot+0x160>)
 801255a:	6818      	ldr	r0, [r3, #0]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	9300      	str	r3, [sp, #0]
 8012560:	2343      	movs	r3, #67	; 0x43
 8012562:	4a1f      	ldr	r2, [pc, #124]	; (80125e0 <dhcp_reboot+0x164>)
 8012564:	6979      	ldr	r1, [r7, #20]
 8012566:	f7fe fd01 	bl	8010f6c <udp_sendto_if>
 801256a:	4603      	mov	r3, r0
 801256c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801256e:	6978      	ldr	r0, [r7, #20]
 8012570:	f7f8 fdf6 	bl	800b160 <pbuf_free>
 8012574:	e001      	b.n	801257a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012576:	23ff      	movs	r3, #255	; 0xff
 8012578:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	799b      	ldrb	r3, [r3, #6]
 801257e:	2bff      	cmp	r3, #255	; 0xff
 8012580:	d005      	beq.n	801258e <dhcp_reboot+0x112>
    dhcp->tries++;
 8012582:	69bb      	ldr	r3, [r7, #24]
 8012584:	799b      	ldrb	r3, [r3, #6]
 8012586:	3301      	adds	r3, #1
 8012588:	b2da      	uxtb	r2, r3
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	799b      	ldrb	r3, [r3, #6]
 8012592:	2b09      	cmp	r3, #9
 8012594:	d80a      	bhi.n	80125ac <dhcp_reboot+0x130>
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	799b      	ldrb	r3, [r3, #6]
 801259a:	b29b      	uxth	r3, r3
 801259c:	461a      	mov	r2, r3
 801259e:	0152      	lsls	r2, r2, #5
 80125a0:	1ad2      	subs	r2, r2, r3
 80125a2:	0092      	lsls	r2, r2, #2
 80125a4:	4413      	add	r3, r2
 80125a6:	00db      	lsls	r3, r3, #3
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	e001      	b.n	80125b0 <dhcp_reboot+0x134>
 80125ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80125b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80125b2:	89fb      	ldrh	r3, [r7, #14]
 80125b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80125b8:	4a0a      	ldr	r2, [pc, #40]	; (80125e4 <dhcp_reboot+0x168>)
 80125ba:	fb82 1203 	smull	r1, r2, r2, r3
 80125be:	1152      	asrs	r2, r2, #5
 80125c0:	17db      	asrs	r3, r3, #31
 80125c2:	1ad3      	subs	r3, r2, r3
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80125ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3720      	adds	r7, #32
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bdb0      	pop	{r4, r5, r7, pc}
 80125d6:	bf00      	nop
 80125d8:	20000064 	.word	0x20000064
 80125dc:	2000b0b8 	.word	0x2000b0b8
 80125e0:	0801c4b0 	.word	0x0801c4b0
 80125e4:	10624dd3 	.word	0x10624dd3

080125e8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80125e8:	b5b0      	push	{r4, r5, r7, lr}
 80125ea:	b08a      	sub	sp, #40	; 0x28
 80125ec:	af02      	add	r7, sp, #8
 80125ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f000 8084 	beq.w	8012706 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	795b      	ldrb	r3, [r3, #5]
 8012602:	2b00      	cmp	r3, #0
 8012604:	f000 8081 	beq.w	801270a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	699b      	ldr	r3, [r3, #24]
 801260c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	2200      	movs	r2, #0
 8012612:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	2200      	movs	r2, #0
 8012618:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801261a:	69fb      	ldr	r3, [r7, #28]
 801261c:	2200      	movs	r2, #0
 801261e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012620:	69fb      	ldr	r3, [r7, #28]
 8012622:	2200      	movs	r2, #0
 8012624:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	2200      	movs	r2, #0
 801262a:	631a      	str	r2, [r3, #48]	; 0x30
 801262c:	69fb      	ldr	r3, [r7, #28]
 801262e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012630:	69fb      	ldr	r3, [r7, #28]
 8012632:	62da      	str	r2, [r3, #44]	; 0x2c
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	2200      	movs	r2, #0
 8012640:	829a      	strh	r2, [r3, #20]
 8012642:	69fb      	ldr	r3, [r7, #28]
 8012644:	8a9a      	ldrh	r2, [r3, #20]
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	825a      	strh	r2, [r3, #18]
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	8a5a      	ldrh	r2, [r3, #18]
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	821a      	strh	r2, [r3, #16]
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	8a1a      	ldrh	r2, [r3, #16]
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 fdee 	bl	801323c <dhcp_supplied_address>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d03b      	beq.n	80126de <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012666:	f107 030e 	add.w	r3, r7, #14
 801266a:	2207      	movs	r2, #7
 801266c:	69f9      	ldr	r1, [r7, #28]
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f000 fce0 	bl	8013034 <dhcp_create_msg>
 8012674:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012676:	69bb      	ldr	r3, [r7, #24]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d030      	beq.n	80126de <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801267c:	69bb      	ldr	r3, [r7, #24]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012682:	89f8      	ldrh	r0, [r7, #14]
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801268a:	2304      	movs	r3, #4
 801268c:	2236      	movs	r2, #54	; 0x36
 801268e:	f000 f85f 	bl	8012750 <dhcp_option>
 8012692:	4603      	mov	r3, r0
 8012694:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012696:	89fc      	ldrh	r4, [r7, #14]
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7f7 fa08 	bl	8009ab6 <lwip_htonl>
 80126a6:	4603      	mov	r3, r0
 80126a8:	461a      	mov	r2, r3
 80126aa:	4629      	mov	r1, r5
 80126ac:	4620      	mov	r0, r4
 80126ae:	f000 f8db 	bl	8012868 <dhcp_option_long>
 80126b2:	4603      	mov	r3, r0
 80126b4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80126b6:	89f8      	ldrh	r0, [r7, #14]
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	33f0      	adds	r3, #240	; 0xf0
 80126bc:	69ba      	ldr	r2, [r7, #24]
 80126be:	4619      	mov	r1, r3
 80126c0:	f000 fd8e 	bl	80131e0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80126c4:	4b13      	ldr	r3, [pc, #76]	; (8012714 <dhcp_release_and_stop+0x12c>)
 80126c6:	6818      	ldr	r0, [r3, #0]
 80126c8:	f107 0210 	add.w	r2, r7, #16
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	9300      	str	r3, [sp, #0]
 80126d0:	2343      	movs	r3, #67	; 0x43
 80126d2:	69b9      	ldr	r1, [r7, #24]
 80126d4:	f7fe fc4a 	bl	8010f6c <udp_sendto_if>
      pbuf_free(p_out);
 80126d8:	69b8      	ldr	r0, [r7, #24]
 80126da:	f7f8 fd41 	bl	800b160 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80126de:	4b0e      	ldr	r3, [pc, #56]	; (8012718 <dhcp_release_and_stop+0x130>)
 80126e0:	4a0d      	ldr	r2, [pc, #52]	; (8012718 <dhcp_release_and_stop+0x130>)
 80126e2:	490d      	ldr	r1, [pc, #52]	; (8012718 <dhcp_release_and_stop+0x130>)
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7f8 f85b 	bl	800a7a0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80126ea:	2100      	movs	r1, #0
 80126ec:	69f8      	ldr	r0, [r7, #28]
 80126ee:	f000 f815 	bl	801271c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	791b      	ldrb	r3, [r3, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d008      	beq.n	801270c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80126fa:	f7fe ff83 	bl	8011604 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	2200      	movs	r2, #0
 8012702:	711a      	strb	r2, [r3, #4]
 8012704:	e002      	b.n	801270c <dhcp_release_and_stop+0x124>
    return;
 8012706:	bf00      	nop
 8012708:	e000      	b.n	801270c <dhcp_release_and_stop+0x124>
    return;
 801270a:	bf00      	nop
  }
}
 801270c:	3720      	adds	r7, #32
 801270e:	46bd      	mov	sp, r7
 8012710:	bdb0      	pop	{r4, r5, r7, pc}
 8012712:	bf00      	nop
 8012714:	2000b0b8 	.word	0x2000b0b8
 8012718:	0801c4ac 	.word	0x0801c4ac

0801271c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	460b      	mov	r3, r1
 8012726:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	795b      	ldrb	r3, [r3, #5]
 801272c:	78fa      	ldrb	r2, [r7, #3]
 801272e:	429a      	cmp	r2, r3
 8012730:	d008      	beq.n	8012744 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	78fa      	ldrb	r2, [r7, #3]
 8012736:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2200      	movs	r2, #0
 8012742:	811a      	strh	r2, [r3, #8]
  }
}
 8012744:	bf00      	nop
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6039      	str	r1, [r7, #0]
 8012758:	4611      	mov	r1, r2
 801275a:	461a      	mov	r2, r3
 801275c:	4603      	mov	r3, r0
 801275e:	80fb      	strh	r3, [r7, #6]
 8012760:	460b      	mov	r3, r1
 8012762:	717b      	strb	r3, [r7, #5]
 8012764:	4613      	mov	r3, r2
 8012766:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012768:	88fa      	ldrh	r2, [r7, #6]
 801276a:	793b      	ldrb	r3, [r7, #4]
 801276c:	4413      	add	r3, r2
 801276e:	3302      	adds	r3, #2
 8012770:	2b44      	cmp	r3, #68	; 0x44
 8012772:	d906      	bls.n	8012782 <dhcp_option+0x32>
 8012774:	4b0d      	ldr	r3, [pc, #52]	; (80127ac <dhcp_option+0x5c>)
 8012776:	f240 529a 	movw	r2, #1434	; 0x59a
 801277a:	490d      	ldr	r1, [pc, #52]	; (80127b0 <dhcp_option+0x60>)
 801277c:	480d      	ldr	r0, [pc, #52]	; (80127b4 <dhcp_option+0x64>)
 801277e:	f003 f8cf 	bl	8015920 <iprintf>
  options[options_out_len++] = option_type;
 8012782:	88fb      	ldrh	r3, [r7, #6]
 8012784:	1c5a      	adds	r2, r3, #1
 8012786:	80fa      	strh	r2, [r7, #6]
 8012788:	461a      	mov	r2, r3
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	4413      	add	r3, r2
 801278e:	797a      	ldrb	r2, [r7, #5]
 8012790:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8012792:	88fb      	ldrh	r3, [r7, #6]
 8012794:	1c5a      	adds	r2, r3, #1
 8012796:	80fa      	strh	r2, [r7, #6]
 8012798:	461a      	mov	r2, r3
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	4413      	add	r3, r2
 801279e:	793a      	ldrb	r2, [r7, #4]
 80127a0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80127a2:	88fb      	ldrh	r3, [r7, #6]
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	08019264 	.word	0x08019264
 80127b0:	080193f8 	.word	0x080193f8
 80127b4:	080192c4 	.word	0x080192c4

080127b8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	4603      	mov	r3, r0
 80127c0:	6039      	str	r1, [r7, #0]
 80127c2:	80fb      	strh	r3, [r7, #6]
 80127c4:	4613      	mov	r3, r2
 80127c6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80127c8:	88fb      	ldrh	r3, [r7, #6]
 80127ca:	2b43      	cmp	r3, #67	; 0x43
 80127cc:	d906      	bls.n	80127dc <dhcp_option_byte+0x24>
 80127ce:	4b0a      	ldr	r3, [pc, #40]	; (80127f8 <dhcp_option_byte+0x40>)
 80127d0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80127d4:	4909      	ldr	r1, [pc, #36]	; (80127fc <dhcp_option_byte+0x44>)
 80127d6:	480a      	ldr	r0, [pc, #40]	; (8012800 <dhcp_option_byte+0x48>)
 80127d8:	f003 f8a2 	bl	8015920 <iprintf>
  options[options_out_len++] = value;
 80127dc:	88fb      	ldrh	r3, [r7, #6]
 80127de:	1c5a      	adds	r2, r3, #1
 80127e0:	80fa      	strh	r2, [r7, #6]
 80127e2:	461a      	mov	r2, r3
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	4413      	add	r3, r2
 80127e8:	797a      	ldrb	r2, [r7, #5]
 80127ea:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80127ec:	88fb      	ldrh	r3, [r7, #6]
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3708      	adds	r7, #8
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	08019264 	.word	0x08019264
 80127fc:	0801943c 	.word	0x0801943c
 8012800:	080192c4 	.word	0x080192c4

08012804 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	4603      	mov	r3, r0
 801280c:	6039      	str	r1, [r7, #0]
 801280e:	80fb      	strh	r3, [r7, #6]
 8012810:	4613      	mov	r3, r2
 8012812:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012814:	88fb      	ldrh	r3, [r7, #6]
 8012816:	3302      	adds	r3, #2
 8012818:	2b44      	cmp	r3, #68	; 0x44
 801281a:	d906      	bls.n	801282a <dhcp_option_short+0x26>
 801281c:	4b0f      	ldr	r3, [pc, #60]	; (801285c <dhcp_option_short+0x58>)
 801281e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8012822:	490f      	ldr	r1, [pc, #60]	; (8012860 <dhcp_option_short+0x5c>)
 8012824:	480f      	ldr	r0, [pc, #60]	; (8012864 <dhcp_option_short+0x60>)
 8012826:	f003 f87b 	bl	8015920 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801282a:	88bb      	ldrh	r3, [r7, #4]
 801282c:	0a1b      	lsrs	r3, r3, #8
 801282e:	b29a      	uxth	r2, r3
 8012830:	88fb      	ldrh	r3, [r7, #6]
 8012832:	1c59      	adds	r1, r3, #1
 8012834:	80f9      	strh	r1, [r7, #6]
 8012836:	4619      	mov	r1, r3
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	440b      	add	r3, r1
 801283c:	b2d2      	uxtb	r2, r2
 801283e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012840:	88fb      	ldrh	r3, [r7, #6]
 8012842:	1c5a      	adds	r2, r3, #1
 8012844:	80fa      	strh	r2, [r7, #6]
 8012846:	461a      	mov	r2, r3
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	4413      	add	r3, r2
 801284c:	88ba      	ldrh	r2, [r7, #4]
 801284e:	b2d2      	uxtb	r2, r2
 8012850:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012852:	88fb      	ldrh	r3, [r7, #6]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3708      	adds	r7, #8
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	08019264 	.word	0x08019264
 8012860:	08019474 	.word	0x08019474
 8012864:	080192c4 	.word	0x080192c4

08012868 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	4603      	mov	r3, r0
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	607a      	str	r2, [r7, #4]
 8012874:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8012876:	89fb      	ldrh	r3, [r7, #14]
 8012878:	3304      	adds	r3, #4
 801287a:	2b44      	cmp	r3, #68	; 0x44
 801287c:	d906      	bls.n	801288c <dhcp_option_long+0x24>
 801287e:	4b19      	ldr	r3, [pc, #100]	; (80128e4 <dhcp_option_long+0x7c>)
 8012880:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8012884:	4918      	ldr	r1, [pc, #96]	; (80128e8 <dhcp_option_long+0x80>)
 8012886:	4819      	ldr	r0, [pc, #100]	; (80128ec <dhcp_option_long+0x84>)
 8012888:	f003 f84a 	bl	8015920 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	0e1a      	lsrs	r2, r3, #24
 8012890:	89fb      	ldrh	r3, [r7, #14]
 8012892:	1c59      	adds	r1, r3, #1
 8012894:	81f9      	strh	r1, [r7, #14]
 8012896:	4619      	mov	r1, r3
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	440b      	add	r3, r1
 801289c:	b2d2      	uxtb	r2, r2
 801289e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	0c1a      	lsrs	r2, r3, #16
 80128a4:	89fb      	ldrh	r3, [r7, #14]
 80128a6:	1c59      	adds	r1, r3, #1
 80128a8:	81f9      	strh	r1, [r7, #14]
 80128aa:	4619      	mov	r1, r3
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	440b      	add	r3, r1
 80128b0:	b2d2      	uxtb	r2, r2
 80128b2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	0a1a      	lsrs	r2, r3, #8
 80128b8:	89fb      	ldrh	r3, [r7, #14]
 80128ba:	1c59      	adds	r1, r3, #1
 80128bc:	81f9      	strh	r1, [r7, #14]
 80128be:	4619      	mov	r1, r3
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	440b      	add	r3, r1
 80128c4:	b2d2      	uxtb	r2, r2
 80128c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80128c8:	89fb      	ldrh	r3, [r7, #14]
 80128ca:	1c5a      	adds	r2, r3, #1
 80128cc:	81fa      	strh	r2, [r7, #14]
 80128ce:	461a      	mov	r2, r3
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	4413      	add	r3, r2
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	b2d2      	uxtb	r2, r2
 80128d8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80128da:	89fb      	ldrh	r3, [r7, #14]
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3710      	adds	r7, #16
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	08019264 	.word	0x08019264
 80128e8:	080194b0 	.word	0x080194b0
 80128ec:	080192c4 	.word	0x080192c4

080128f0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b090      	sub	sp, #64	; 0x40
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80128fa:	2300      	movs	r3, #0
 80128fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80128fe:	2300      	movs	r3, #0
 8012900:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8012902:	2208      	movs	r2, #8
 8012904:	2100      	movs	r1, #0
 8012906:	48b5      	ldr	r0, [pc, #724]	; (8012bdc <dhcp_parse_reply+0x2ec>)
 8012908:	f003 f802 	bl	8015910 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	895b      	ldrh	r3, [r3, #10]
 8012910:	2b2b      	cmp	r3, #43	; 0x2b
 8012912:	d802      	bhi.n	801291a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8012914:	f06f 0301 	mvn.w	r3, #1
 8012918:	e2a7      	b.n	8012e6a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8012920:	23f0      	movs	r3, #240	; 0xf0
 8012922:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	891b      	ldrh	r3, [r3, #8]
 8012928:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801292e:	e00c      	b.n	801294a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8012930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012932:	895b      	ldrh	r3, [r3, #10]
 8012934:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293c:	895b      	ldrh	r3, [r3, #10]
 801293e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012940:	1ad3      	subs	r3, r2, r3
 8012942:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8012944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801294c:	2b00      	cmp	r3, #0
 801294e:	d004      	beq.n	801295a <dhcp_parse_reply+0x6a>
 8012950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012952:	895b      	ldrh	r3, [r3, #10]
 8012954:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012956:	429a      	cmp	r2, r3
 8012958:	d2ea      	bcs.n	8012930 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801295c:	2b00      	cmp	r3, #0
 801295e:	d102      	bne.n	8012966 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012960:	f06f 0301 	mvn.w	r3, #1
 8012964:	e281      	b.n	8012e6a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8012966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012968:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801296a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801296c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012974:	e239      	b.n	8012dea <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8012976:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801297a:	4413      	add	r3, r2
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012980:	2300      	movs	r3, #0
 8012982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8012986:	f04f 33ff 	mov.w	r3, #4294967295
 801298a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801298c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801298e:	3302      	adds	r3, #2
 8012990:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8012992:	8bfa      	ldrh	r2, [r7, #30]
 8012994:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012996:	429a      	cmp	r2, r3
 8012998:	d202      	bcs.n	80129a0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801299a:	f06f 0301 	mvn.w	r3, #1
 801299e:	e264      	b.n	8012e6a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80129a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129a2:	3301      	adds	r3, #1
 80129a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129a6:	8952      	ldrh	r2, [r2, #10]
 80129a8:	4293      	cmp	r3, r2
 80129aa:	da07      	bge.n	80129bc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80129ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129ae:	3301      	adds	r3, #1
 80129b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129b2:	4413      	add	r3, r2
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80129ba:	e00b      	b.n	80129d4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80129bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d004      	beq.n	80129ce <dhcp_parse_reply+0xde>
 80129c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	e000      	b.n	80129d0 <dhcp_parse_reply+0xe0>
 80129ce:	2300      	movs	r3, #0
 80129d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80129d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80129dc:	7dfb      	ldrb	r3, [r7, #23]
 80129de:	2b3b      	cmp	r3, #59	; 0x3b
 80129e0:	f200 812c 	bhi.w	8012c3c <dhcp_parse_reply+0x34c>
 80129e4:	a201      	add	r2, pc, #4	; (adr r2, 80129ec <dhcp_parse_reply+0xfc>)
 80129e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129ea:	bf00      	nop
 80129ec:	08012add 	.word	0x08012add
 80129f0:	08012aed 	.word	0x08012aed
 80129f4:	08012c3d 	.word	0x08012c3d
 80129f8:	08012b0f 	.word	0x08012b0f
 80129fc:	08012c3d 	.word	0x08012c3d
 8012a00:	08012c3d 	.word	0x08012c3d
 8012a04:	08012c3d 	.word	0x08012c3d
 8012a08:	08012c3d 	.word	0x08012c3d
 8012a0c:	08012c3d 	.word	0x08012c3d
 8012a10:	08012c3d 	.word	0x08012c3d
 8012a14:	08012c3d 	.word	0x08012c3d
 8012a18:	08012c3d 	.word	0x08012c3d
 8012a1c:	08012c3d 	.word	0x08012c3d
 8012a20:	08012c3d 	.word	0x08012c3d
 8012a24:	08012c3d 	.word	0x08012c3d
 8012a28:	08012c3d 	.word	0x08012c3d
 8012a2c:	08012c3d 	.word	0x08012c3d
 8012a30:	08012c3d 	.word	0x08012c3d
 8012a34:	08012c3d 	.word	0x08012c3d
 8012a38:	08012c3d 	.word	0x08012c3d
 8012a3c:	08012c3d 	.word	0x08012c3d
 8012a40:	08012c3d 	.word	0x08012c3d
 8012a44:	08012c3d 	.word	0x08012c3d
 8012a48:	08012c3d 	.word	0x08012c3d
 8012a4c:	08012c3d 	.word	0x08012c3d
 8012a50:	08012c3d 	.word	0x08012c3d
 8012a54:	08012c3d 	.word	0x08012c3d
 8012a58:	08012c3d 	.word	0x08012c3d
 8012a5c:	08012c3d 	.word	0x08012c3d
 8012a60:	08012c3d 	.word	0x08012c3d
 8012a64:	08012c3d 	.word	0x08012c3d
 8012a68:	08012c3d 	.word	0x08012c3d
 8012a6c:	08012c3d 	.word	0x08012c3d
 8012a70:	08012c3d 	.word	0x08012c3d
 8012a74:	08012c3d 	.word	0x08012c3d
 8012a78:	08012c3d 	.word	0x08012c3d
 8012a7c:	08012c3d 	.word	0x08012c3d
 8012a80:	08012c3d 	.word	0x08012c3d
 8012a84:	08012c3d 	.word	0x08012c3d
 8012a88:	08012c3d 	.word	0x08012c3d
 8012a8c:	08012c3d 	.word	0x08012c3d
 8012a90:	08012c3d 	.word	0x08012c3d
 8012a94:	08012c3d 	.word	0x08012c3d
 8012a98:	08012c3d 	.word	0x08012c3d
 8012a9c:	08012c3d 	.word	0x08012c3d
 8012aa0:	08012c3d 	.word	0x08012c3d
 8012aa4:	08012c3d 	.word	0x08012c3d
 8012aa8:	08012c3d 	.word	0x08012c3d
 8012aac:	08012c3d 	.word	0x08012c3d
 8012ab0:	08012c3d 	.word	0x08012c3d
 8012ab4:	08012c3d 	.word	0x08012c3d
 8012ab8:	08012b3b 	.word	0x08012b3b
 8012abc:	08012b5d 	.word	0x08012b5d
 8012ac0:	08012b99 	.word	0x08012b99
 8012ac4:	08012bbb 	.word	0x08012bbb
 8012ac8:	08012c3d 	.word	0x08012c3d
 8012acc:	08012c3d 	.word	0x08012c3d
 8012ad0:	08012c3d 	.word	0x08012c3d
 8012ad4:	08012bf9 	.word	0x08012bf9
 8012ad8:	08012c1b 	.word	0x08012c1b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8012adc:	2300      	movs	r3, #0
 8012ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8012aea:	e0ab      	b.n	8012c44 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012af0:	2b04      	cmp	r3, #4
 8012af2:	d009      	beq.n	8012b08 <dhcp_parse_reply+0x218>
 8012af4:	4b3a      	ldr	r3, [pc, #232]	; (8012be0 <dhcp_parse_reply+0x2f0>)
 8012af6:	f240 622e 	movw	r2, #1582	; 0x62e
 8012afa:	493a      	ldr	r1, [pc, #232]	; (8012be4 <dhcp_parse_reply+0x2f4>)
 8012afc:	483a      	ldr	r0, [pc, #232]	; (8012be8 <dhcp_parse_reply+0x2f8>)
 8012afe:	f002 ff0f 	bl	8015920 <iprintf>
 8012b02:	f06f 0305 	mvn.w	r3, #5
 8012b06:	e1b0      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012b08:	2306      	movs	r3, #6
 8012b0a:	623b      	str	r3, [r7, #32]
        break;
 8012b0c:	e09a      	b.n	8012c44 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8012b0e:	2304      	movs	r3, #4
 8012b10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012b14:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012b18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d209      	bcs.n	8012b34 <dhcp_parse_reply+0x244>
 8012b20:	4b2f      	ldr	r3, [pc, #188]	; (8012be0 <dhcp_parse_reply+0x2f0>)
 8012b22:	f240 6233 	movw	r2, #1587	; 0x633
 8012b26:	4931      	ldr	r1, [pc, #196]	; (8012bec <dhcp_parse_reply+0x2fc>)
 8012b28:	482f      	ldr	r0, [pc, #188]	; (8012be8 <dhcp_parse_reply+0x2f8>)
 8012b2a:	f002 fef9 	bl	8015920 <iprintf>
 8012b2e:	f06f 0305 	mvn.w	r3, #5
 8012b32:	e19a      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012b34:	2307      	movs	r3, #7
 8012b36:	623b      	str	r3, [r7, #32]
        break;
 8012b38:	e084      	b.n	8012c44 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b3e:	2b04      	cmp	r3, #4
 8012b40:	d009      	beq.n	8012b56 <dhcp_parse_reply+0x266>
 8012b42:	4b27      	ldr	r3, [pc, #156]	; (8012be0 <dhcp_parse_reply+0x2f0>)
 8012b44:	f240 6241 	movw	r2, #1601	; 0x641
 8012b48:	4926      	ldr	r1, [pc, #152]	; (8012be4 <dhcp_parse_reply+0x2f4>)
 8012b4a:	4827      	ldr	r0, [pc, #156]	; (8012be8 <dhcp_parse_reply+0x2f8>)
 8012b4c:	f002 fee8 	bl	8015920 <iprintf>
 8012b50:	f06f 0305 	mvn.w	r3, #5
 8012b54:	e189      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8012b56:	2303      	movs	r3, #3
 8012b58:	623b      	str	r3, [r7, #32]
        break;
 8012b5a:	e073      	b.n	8012c44 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	d009      	beq.n	8012b78 <dhcp_parse_reply+0x288>
 8012b64:	4b1e      	ldr	r3, [pc, #120]	; (8012be0 <dhcp_parse_reply+0x2f0>)
 8012b66:	f240 624f 	movw	r2, #1615	; 0x64f
 8012b6a:	4921      	ldr	r1, [pc, #132]	; (8012bf0 <dhcp_parse_reply+0x300>)
 8012b6c:	481e      	ldr	r0, [pc, #120]	; (8012be8 <dhcp_parse_reply+0x2f8>)
 8012b6e:	f002 fed7 	bl	8015920 <iprintf>
 8012b72:	f06f 0305 	mvn.w	r3, #5
 8012b76:	e178      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012b78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012b7a:	2bf0      	cmp	r3, #240	; 0xf0
 8012b7c:	d009      	beq.n	8012b92 <dhcp_parse_reply+0x2a2>
 8012b7e:	4b18      	ldr	r3, [pc, #96]	; (8012be0 <dhcp_parse_reply+0x2f0>)
 8012b80:	f240 6251 	movw	r2, #1617	; 0x651
 8012b84:	491b      	ldr	r1, [pc, #108]	; (8012bf4 <dhcp_parse_reply+0x304>)
 8012b86:	4818      	ldr	r0, [pc, #96]	; (8012be8 <dhcp_parse_reply+0x2f8>)
 8012b88:	f002 feca 	bl	8015920 <iprintf>
 8012b8c:	f06f 0305 	mvn.w	r3, #5
 8012b90:	e16b      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8012b92:	2300      	movs	r3, #0
 8012b94:	623b      	str	r3, [r7, #32]
        break;
 8012b96:	e055      	b.n	8012c44 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d009      	beq.n	8012bb4 <dhcp_parse_reply+0x2c4>
 8012ba0:	4b0f      	ldr	r3, [pc, #60]	; (8012be0 <dhcp_parse_reply+0x2f0>)
 8012ba2:	f240 6255 	movw	r2, #1621	; 0x655
 8012ba6:	4912      	ldr	r1, [pc, #72]	; (8012bf0 <dhcp_parse_reply+0x300>)
 8012ba8:	480f      	ldr	r0, [pc, #60]	; (8012be8 <dhcp_parse_reply+0x2f8>)
 8012baa:	f002 feb9 	bl	8015920 <iprintf>
 8012bae:	f06f 0305 	mvn.w	r3, #5
 8012bb2:	e15a      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	623b      	str	r3, [r7, #32]
        break;
 8012bb8:	e044      	b.n	8012c44 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bbe:	2b04      	cmp	r3, #4
 8012bc0:	d009      	beq.n	8012bd6 <dhcp_parse_reply+0x2e6>
 8012bc2:	4b07      	ldr	r3, [pc, #28]	; (8012be0 <dhcp_parse_reply+0x2f0>)
 8012bc4:	f240 6259 	movw	r2, #1625	; 0x659
 8012bc8:	4906      	ldr	r1, [pc, #24]	; (8012be4 <dhcp_parse_reply+0x2f4>)
 8012bca:	4807      	ldr	r0, [pc, #28]	; (8012be8 <dhcp_parse_reply+0x2f8>)
 8012bcc:	f002 fea8 	bl	8015920 <iprintf>
 8012bd0:	f06f 0305 	mvn.w	r3, #5
 8012bd4:	e149      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8012bd6:	2302      	movs	r3, #2
 8012bd8:	623b      	str	r3, [r7, #32]
        break;
 8012bda:	e033      	b.n	8012c44 <dhcp_parse_reply+0x354>
 8012bdc:	2000b0b0 	.word	0x2000b0b0
 8012be0:	08019264 	.word	0x08019264
 8012be4:	080194ec 	.word	0x080194ec
 8012be8:	080192c4 	.word	0x080192c4
 8012bec:	080194f8 	.word	0x080194f8
 8012bf0:	0801950c 	.word	0x0801950c
 8012bf4:	08019518 	.word	0x08019518
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bfc:	2b04      	cmp	r3, #4
 8012bfe:	d009      	beq.n	8012c14 <dhcp_parse_reply+0x324>
 8012c00:	4b9c      	ldr	r3, [pc, #624]	; (8012e74 <dhcp_parse_reply+0x584>)
 8012c02:	f240 625d 	movw	r2, #1629	; 0x65d
 8012c06:	499c      	ldr	r1, [pc, #624]	; (8012e78 <dhcp_parse_reply+0x588>)
 8012c08:	489c      	ldr	r0, [pc, #624]	; (8012e7c <dhcp_parse_reply+0x58c>)
 8012c0a:	f002 fe89 	bl	8015920 <iprintf>
 8012c0e:	f06f 0305 	mvn.w	r3, #5
 8012c12:	e12a      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8012c14:	2304      	movs	r3, #4
 8012c16:	623b      	str	r3, [r7, #32]
        break;
 8012c18:	e014      	b.n	8012c44 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c1e:	2b04      	cmp	r3, #4
 8012c20:	d009      	beq.n	8012c36 <dhcp_parse_reply+0x346>
 8012c22:	4b94      	ldr	r3, [pc, #592]	; (8012e74 <dhcp_parse_reply+0x584>)
 8012c24:	f240 6261 	movw	r2, #1633	; 0x661
 8012c28:	4993      	ldr	r1, [pc, #588]	; (8012e78 <dhcp_parse_reply+0x588>)
 8012c2a:	4894      	ldr	r0, [pc, #592]	; (8012e7c <dhcp_parse_reply+0x58c>)
 8012c2c:	f002 fe78 	bl	8015920 <iprintf>
 8012c30:	f06f 0305 	mvn.w	r3, #5
 8012c34:	e119      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8012c36:	2305      	movs	r3, #5
 8012c38:	623b      	str	r3, [r7, #32]
        break;
 8012c3a:	e003      	b.n	8012c44 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8012c42:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8012c44:	7dfb      	ldrb	r3, [r7, #23]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d103      	bne.n	8012c52 <dhcp_parse_reply+0x362>
      offset++;
 8012c4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012c50:	e0a1      	b.n	8012d96 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012c52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c58:	4413      	add	r3, r2
 8012c5a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	dd02      	ble.n	8012c68 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8012c62:	f06f 0301 	mvn.w	r3, #1
 8012c66:	e100      	b.n	8012e6a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8012c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c6c:	b29a      	uxth	r2, r3
 8012c6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c70:	4413      	add	r3, r2
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	3302      	adds	r3, #2
 8012c76:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012c78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f000 808a 	beq.w	8012d96 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8012c82:	2300      	movs	r3, #0
 8012c84:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012c86:	6a3b      	ldr	r3, [r7, #32]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	db02      	blt.n	8012c92 <dhcp_parse_reply+0x3a2>
 8012c8c:	6a3b      	ldr	r3, [r7, #32]
 8012c8e:	2b07      	cmp	r3, #7
 8012c90:	dd06      	ble.n	8012ca0 <dhcp_parse_reply+0x3b0>
 8012c92:	4b78      	ldr	r3, [pc, #480]	; (8012e74 <dhcp_parse_reply+0x584>)
 8012c94:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012c98:	4979      	ldr	r1, [pc, #484]	; (8012e80 <dhcp_parse_reply+0x590>)
 8012c9a:	4878      	ldr	r0, [pc, #480]	; (8012e7c <dhcp_parse_reply+0x58c>)
 8012c9c:	f002 fe40 	bl	8015920 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012ca0:	4a78      	ldr	r2, [pc, #480]	; (8012e84 <dhcp_parse_reply+0x594>)
 8012ca2:	6a3b      	ldr	r3, [r7, #32]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d174      	bne.n	8012d96 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8012cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012cb0:	2b04      	cmp	r3, #4
 8012cb2:	bf28      	it	cs
 8012cb4:	2304      	movcs	r3, #4
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8012cba:	8bfb      	ldrh	r3, [r7, #30]
 8012cbc:	8aba      	ldrh	r2, [r7, #20]
 8012cbe:	f107 0108 	add.w	r1, r7, #8
 8012cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cc4:	f7f8 fc46 	bl	800b554 <pbuf_copy_partial>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	461a      	mov	r2, r3
 8012ccc:	8abb      	ldrh	r3, [r7, #20]
 8012cce:	4293      	cmp	r3, r2
 8012cd0:	d002      	beq.n	8012cd8 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8012cd2:	f06f 0301 	mvn.w	r3, #1
 8012cd6:	e0c8      	b.n	8012e6a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8012cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012cdc:	2b04      	cmp	r3, #4
 8012cde:	d933      	bls.n	8012d48 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ce4:	f003 0303 	and.w	r3, r3, #3
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d009      	beq.n	8012d02 <dhcp_parse_reply+0x412>
 8012cee:	4b61      	ldr	r3, [pc, #388]	; (8012e74 <dhcp_parse_reply+0x584>)
 8012cf0:	f240 6281 	movw	r2, #1665	; 0x681
 8012cf4:	4964      	ldr	r1, [pc, #400]	; (8012e88 <dhcp_parse_reply+0x598>)
 8012cf6:	4861      	ldr	r0, [pc, #388]	; (8012e7c <dhcp_parse_reply+0x58c>)
 8012cf8:	f002 fe12 	bl	8015920 <iprintf>
 8012cfc:	f06f 0305 	mvn.w	r3, #5
 8012d00:	e0b3      	b.n	8012e6a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8012d02:	4a60      	ldr	r2, [pc, #384]	; (8012e84 <dhcp_parse_reply+0x594>)
 8012d04:	6a3b      	ldr	r3, [r7, #32]
 8012d06:	4413      	add	r3, r2
 8012d08:	2201      	movs	r2, #1
 8012d0a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7f6 fed1 	bl	8009ab6 <lwip_htonl>
 8012d14:	4602      	mov	r2, r0
 8012d16:	495d      	ldr	r1, [pc, #372]	; (8012e8c <dhcp_parse_reply+0x59c>)
 8012d18:	6a3b      	ldr	r3, [r7, #32]
 8012d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d22:	3b04      	subs	r3, #4
 8012d24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8012d28:	8bfb      	ldrh	r3, [r7, #30]
 8012d2a:	3304      	adds	r3, #4
 8012d2c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012d2e:	8a7a      	ldrh	r2, [r7, #18]
 8012d30:	8bfb      	ldrh	r3, [r7, #30]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d202      	bcs.n	8012d3c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8012d36:	f06f 0301 	mvn.w	r3, #1
 8012d3a:	e096      	b.n	8012e6a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8012d3c:	8a7b      	ldrh	r3, [r7, #18]
 8012d3e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8012d40:	6a3b      	ldr	r3, [r7, #32]
 8012d42:	3301      	adds	r3, #1
 8012d44:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012d46:	e79e      	b.n	8012c86 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8012d48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d4c:	2b04      	cmp	r3, #4
 8012d4e:	d106      	bne.n	8012d5e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7f6 feaf 	bl	8009ab6 <lwip_htonl>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	60bb      	str	r3, [r7, #8]
 8012d5c:	e011      	b.n	8012d82 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d009      	beq.n	8012d7a <dhcp_parse_reply+0x48a>
 8012d66:	4b43      	ldr	r3, [pc, #268]	; (8012e74 <dhcp_parse_reply+0x584>)
 8012d68:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012d6c:	4948      	ldr	r1, [pc, #288]	; (8012e90 <dhcp_parse_reply+0x5a0>)
 8012d6e:	4843      	ldr	r0, [pc, #268]	; (8012e7c <dhcp_parse_reply+0x58c>)
 8012d70:	f002 fdd6 	bl	8015920 <iprintf>
 8012d74:	f06f 0305 	mvn.w	r3, #5
 8012d78:	e077      	b.n	8012e6a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8012d7a:	f107 0308 	add.w	r3, r7, #8
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012d82:	4a40      	ldr	r2, [pc, #256]	; (8012e84 <dhcp_parse_reply+0x594>)
 8012d84:	6a3b      	ldr	r3, [r7, #32]
 8012d86:	4413      	add	r3, r2
 8012d88:	2201      	movs	r2, #1
 8012d8a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012d8c:	68ba      	ldr	r2, [r7, #8]
 8012d8e:	493f      	ldr	r1, [pc, #252]	; (8012e8c <dhcp_parse_reply+0x59c>)
 8012d90:	6a3b      	ldr	r3, [r7, #32]
 8012d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d98:	895b      	ldrh	r3, [r3, #10]
 8012d9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d324      	bcc.n	8012dea <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8012da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da2:	895b      	ldrh	r3, [r3, #10]
 8012da4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012da6:	1ad3      	subs	r3, r2, r3
 8012da8:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	895b      	ldrh	r3, [r3, #10]
 8012dae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8012db4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012db6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d213      	bcs.n	8012de4 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8012dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d109      	bne.n	8012ddc <dhcp_parse_reply+0x4ec>
 8012dc8:	4b2a      	ldr	r3, [pc, #168]	; (8012e74 <dhcp_parse_reply+0x584>)
 8012dca:	f240 629d 	movw	r2, #1693	; 0x69d
 8012dce:	4931      	ldr	r1, [pc, #196]	; (8012e94 <dhcp_parse_reply+0x5a4>)
 8012dd0:	482a      	ldr	r0, [pc, #168]	; (8012e7c <dhcp_parse_reply+0x58c>)
 8012dd2:	f002 fda5 	bl	8015920 <iprintf>
 8012dd6:	f06f 0305 	mvn.w	r3, #5
 8012dda:	e046      	b.n	8012e6a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8012ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012de2:	e002      	b.n	8012dea <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012de4:	f06f 0301 	mvn.w	r3, #1
 8012de8:	e03f      	b.n	8012e6a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d00a      	beq.n	8012e06 <dhcp_parse_reply+0x516>
 8012df0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012df2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d206      	bcs.n	8012e06 <dhcp_parse_reply+0x516>
 8012df8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012dfc:	4413      	add	r3, r2
 8012dfe:	781b      	ldrb	r3, [r3, #0]
 8012e00:	2bff      	cmp	r3, #255	; 0xff
 8012e02:	f47f adb8 	bne.w	8012976 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012e06:	4b1f      	ldr	r3, [pc, #124]	; (8012e84 <dhcp_parse_reply+0x594>)
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d018      	beq.n	8012e40 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012e0e:	4b1f      	ldr	r3, [pc, #124]	; (8012e8c <dhcp_parse_reply+0x59c>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012e14:	4b1b      	ldr	r3, [pc, #108]	; (8012e84 <dhcp_parse_reply+0x594>)
 8012e16:	2200      	movs	r2, #0
 8012e18:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d102      	bne.n	8012e26 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8012e20:	2301      	movs	r3, #1
 8012e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e24:	e00c      	b.n	8012e40 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2b02      	cmp	r3, #2
 8012e2a:	d102      	bne.n	8012e32 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e30:	e006      	b.n	8012e40 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2b03      	cmp	r3, #3
 8012e36:	d103      	bne.n	8012e40 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8012e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d006      	beq.n	8012e54 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012e46:	2300      	movs	r3, #0
 8012e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012e4a:	236c      	movs	r3, #108	; 0x6c
 8012e4c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012e4e:	23ec      	movs	r3, #236	; 0xec
 8012e50:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012e52:	e56a      	b.n	801292a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8012e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d006      	beq.n	8012e68 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8012e5e:	232c      	movs	r3, #44	; 0x2c
 8012e60:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012e62:	236c      	movs	r3, #108	; 0x6c
 8012e64:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8012e66:	e560      	b.n	801292a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3740      	adds	r7, #64	; 0x40
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	08019264 	.word	0x08019264
 8012e78:	080194ec 	.word	0x080194ec
 8012e7c:	080192c4 	.word	0x080192c4
 8012e80:	08019530 	.word	0x08019530
 8012e84:	2000b0b0 	.word	0x2000b0b0
 8012e88:	08019544 	.word	0x08019544
 8012e8c:	2000b090 	.word	0x2000b090
 8012e90:	0801955c 	.word	0x0801955c
 8012e94:	08019570 	.word	0x08019570

08012e98 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b08a      	sub	sp, #40	; 0x28
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	607a      	str	r2, [r7, #4]
 8012ea4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8012ea6:	4b60      	ldr	r3, [pc, #384]	; (8013028 <dhcp_recv+0x190>)
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012eac:	6a3b      	ldr	r3, [r7, #32]
 8012eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012eb8:	69fb      	ldr	r3, [r7, #28]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f000 809d 	beq.w	8012ffa <dhcp_recv+0x162>
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	791b      	ldrb	r3, [r3, #4]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f000 8098 	beq.w	8012ffa <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	895b      	ldrh	r3, [r3, #10]
 8012ece:	2b2b      	cmp	r3, #43	; 0x2b
 8012ed0:	f240 8095 	bls.w	8012ffe <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	2b02      	cmp	r3, #2
 8012eda:	f040 8092 	bne.w	8013002 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012ede:	2300      	movs	r3, #0
 8012ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ee4:	e012      	b.n	8012f0c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012eea:	6a3a      	ldr	r2, [r7, #32]
 8012eec:	4413      	add	r3, r2
 8012eee:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ef6:	69b9      	ldr	r1, [r7, #24]
 8012ef8:	440b      	add	r3, r1
 8012efa:	7f1b      	ldrb	r3, [r3, #28]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	f040 8082 	bne.w	8013006 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f06:	3301      	adds	r3, #1
 8012f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f0c:	6a3b      	ldr	r3, [r7, #32]
 8012f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d203      	bcs.n	8012f22 <dhcp_recv+0x8a>
 8012f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f1e:	2b05      	cmp	r3, #5
 8012f20:	d9e1      	bls.n	8012ee6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7f6 fdc5 	bl	8009ab6 <lwip_htonl>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d169      	bne.n	801300a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012f36:	69f9      	ldr	r1, [r7, #28]
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f7ff fcd9 	bl	80128f0 <dhcp_parse_reply>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d164      	bne.n	801300e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012f44:	4b39      	ldr	r3, [pc, #228]	; (801302c <dhcp_recv+0x194>)
 8012f46:	785b      	ldrb	r3, [r3, #1]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d062      	beq.n	8013012 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8012f52:	4b37      	ldr	r3, [pc, #220]	; (8013030 <dhcp_recv+0x198>)
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012f58:	7cfb      	ldrb	r3, [r7, #19]
 8012f5a:	2b05      	cmp	r3, #5
 8012f5c:	d12a      	bne.n	8012fb4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012f5e:	69fb      	ldr	r3, [r7, #28]
 8012f60:	795b      	ldrb	r3, [r3, #5]
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d112      	bne.n	8012f8c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8012f66:	6979      	ldr	r1, [r7, #20]
 8012f68:	6a38      	ldr	r0, [r7, #32]
 8012f6a:	f7fe fe17 	bl	8011b9c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8012f6e:	6a3b      	ldr	r3, [r7, #32]
 8012f70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012f74:	f003 0308 	and.w	r3, r3, #8
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d003      	beq.n	8012f84 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012f7c:	6a38      	ldr	r0, [r7, #32]
 8012f7e:	f7fe fb85 	bl	801168c <dhcp_check>
 8012f82:	e049      	b.n	8013018 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012f84:	6a38      	ldr	r0, [r7, #32]
 8012f86:	f7ff f867 	bl	8012058 <dhcp_bind>
 8012f8a:	e045      	b.n	8013018 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	795b      	ldrb	r3, [r3, #5]
 8012f90:	2b03      	cmp	r3, #3
 8012f92:	d007      	beq.n	8012fa4 <dhcp_recv+0x10c>
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	795b      	ldrb	r3, [r3, #5]
 8012f98:	2b04      	cmp	r3, #4
 8012f9a:	d003      	beq.n	8012fa4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012fa0:	2b05      	cmp	r3, #5
 8012fa2:	d139      	bne.n	8013018 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8012fa4:	6979      	ldr	r1, [r7, #20]
 8012fa6:	6a38      	ldr	r0, [r7, #32]
 8012fa8:	f7fe fdf8 	bl	8011b9c <dhcp_handle_ack>
      dhcp_bind(netif);
 8012fac:	6a38      	ldr	r0, [r7, #32]
 8012fae:	f7ff f853 	bl	8012058 <dhcp_bind>
 8012fb2:	e031      	b.n	8013018 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012fb4:	7cfb      	ldrb	r3, [r7, #19]
 8012fb6:	2b06      	cmp	r3, #6
 8012fb8:	d113      	bne.n	8012fe2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8012fbe:	2b03      	cmp	r3, #3
 8012fc0:	d00b      	beq.n	8012fda <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012fc2:	69fb      	ldr	r3, [r7, #28]
 8012fc4:	795b      	ldrb	r3, [r3, #5]
 8012fc6:	2b01      	cmp	r3, #1
 8012fc8:	d007      	beq.n	8012fda <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012fce:	2b04      	cmp	r3, #4
 8012fd0:	d003      	beq.n	8012fda <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012fd2:	69fb      	ldr	r3, [r7, #28]
 8012fd4:	795b      	ldrb	r3, [r3, #5]
 8012fd6:	2b05      	cmp	r3, #5
 8012fd8:	d103      	bne.n	8012fe2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8012fda:	6a38      	ldr	r0, [r7, #32]
 8012fdc:	f7fe fb3c 	bl	8011658 <dhcp_handle_nak>
 8012fe0:	e01a      	b.n	8013018 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8012fe2:	7cfb      	ldrb	r3, [r7, #19]
 8012fe4:	2b02      	cmp	r3, #2
 8012fe6:	d116      	bne.n	8013016 <dhcp_recv+0x17e>
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	795b      	ldrb	r3, [r3, #5]
 8012fec:	2b06      	cmp	r3, #6
 8012fee:	d112      	bne.n	8013016 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8012ff0:	6979      	ldr	r1, [r7, #20]
 8012ff2:	6a38      	ldr	r0, [r7, #32]
 8012ff4:	f7fe fb7e 	bl	80116f4 <dhcp_handle_offer>
 8012ff8:	e00e      	b.n	8013018 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012ffa:	bf00      	nop
 8012ffc:	e00c      	b.n	8013018 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012ffe:	bf00      	nop
 8013000:	e00a      	b.n	8013018 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013002:	bf00      	nop
 8013004:	e008      	b.n	8013018 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8013006:	bf00      	nop
 8013008:	e006      	b.n	8013018 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801300a:	bf00      	nop
 801300c:	e004      	b.n	8013018 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801300e:	bf00      	nop
 8013010:	e002      	b.n	8013018 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013012:	bf00      	nop
 8013014:	e000      	b.n	8013018 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013016:	bf00      	nop
  pbuf_free(p);
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7f8 f8a1 	bl	800b160 <pbuf_free>
}
 801301e:	bf00      	nop
 8013020:	3728      	adds	r7, #40	; 0x28
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	200058e0 	.word	0x200058e0
 801302c:	2000b0b0 	.word	0x2000b0b0
 8013030:	2000b090 	.word	0x2000b090

08013034 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b088      	sub	sp, #32
 8013038:	af00      	add	r7, sp, #0
 801303a:	60f8      	str	r0, [r7, #12]
 801303c:	60b9      	str	r1, [r7, #8]
 801303e:	603b      	str	r3, [r7, #0]
 8013040:	4613      	mov	r3, r2
 8013042:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d108      	bne.n	801305c <dhcp_create_msg+0x28>
 801304a:	4b5f      	ldr	r3, [pc, #380]	; (80131c8 <dhcp_create_msg+0x194>)
 801304c:	f240 7269 	movw	r2, #1897	; 0x769
 8013050:	495e      	ldr	r1, [pc, #376]	; (80131cc <dhcp_create_msg+0x198>)
 8013052:	485f      	ldr	r0, [pc, #380]	; (80131d0 <dhcp_create_msg+0x19c>)
 8013054:	f002 fc64 	bl	8015920 <iprintf>
 8013058:	2300      	movs	r3, #0
 801305a:	e0b1      	b.n	80131c0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d108      	bne.n	8013074 <dhcp_create_msg+0x40>
 8013062:	4b59      	ldr	r3, [pc, #356]	; (80131c8 <dhcp_create_msg+0x194>)
 8013064:	f240 726a 	movw	r2, #1898	; 0x76a
 8013068:	495a      	ldr	r1, [pc, #360]	; (80131d4 <dhcp_create_msg+0x1a0>)
 801306a:	4859      	ldr	r0, [pc, #356]	; (80131d0 <dhcp_create_msg+0x19c>)
 801306c:	f002 fc58 	bl	8015920 <iprintf>
 8013070:	2300      	movs	r3, #0
 8013072:	e0a5      	b.n	80131c0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013074:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013078:	f44f 719a 	mov.w	r1, #308	; 0x134
 801307c:	2036      	movs	r0, #54	; 0x36
 801307e:	f7f7 fd8b 	bl	800ab98 <pbuf_alloc>
 8013082:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d101      	bne.n	801308e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801308a:	2300      	movs	r3, #0
 801308c:	e098      	b.n	80131c0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	895b      	ldrh	r3, [r3, #10]
 8013092:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013096:	d206      	bcs.n	80130a6 <dhcp_create_msg+0x72>
 8013098:	4b4b      	ldr	r3, [pc, #300]	; (80131c8 <dhcp_create_msg+0x194>)
 801309a:	f240 7271 	movw	r2, #1905	; 0x771
 801309e:	494e      	ldr	r1, [pc, #312]	; (80131d8 <dhcp_create_msg+0x1a4>)
 80130a0:	484b      	ldr	r0, [pc, #300]	; (80131d0 <dhcp_create_msg+0x19c>)
 80130a2:	f002 fc3d 	bl	8015920 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80130a6:	79fb      	ldrb	r3, [r7, #7]
 80130a8:	2b03      	cmp	r3, #3
 80130aa:	d103      	bne.n	80130b4 <dhcp_create_msg+0x80>
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	795b      	ldrb	r3, [r3, #5]
 80130b0:	2b03      	cmp	r3, #3
 80130b2:	d10d      	bne.n	80130d0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	799b      	ldrb	r3, [r3, #6]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d105      	bne.n	80130c8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80130bc:	f002 fc48 	bl	8015950 <rand>
 80130c0:	4603      	mov	r3, r0
 80130c2:	461a      	mov	r2, r3
 80130c4:	4b45      	ldr	r3, [pc, #276]	; (80131dc <dhcp_create_msg+0x1a8>)
 80130c6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80130c8:	4b44      	ldr	r3, [pc, #272]	; (80131dc <dhcp_create_msg+0x1a8>)
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80130d0:	69bb      	ldr	r3, [r7, #24]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80130d6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80130da:	2100      	movs	r1, #0
 80130dc:	6978      	ldr	r0, [r7, #20]
 80130de:	f002 fc17 	bl	8015910 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	2201      	movs	r2, #1
 80130e6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	2201      	movs	r2, #1
 80130ec:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7f6 fcda 	bl	8009ab6 <lwip_htonl>
 8013102:	4602      	mov	r2, r0
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013108:	79fb      	ldrb	r3, [r7, #7]
 801310a:	2b08      	cmp	r3, #8
 801310c:	d010      	beq.n	8013130 <dhcp_create_msg+0xfc>
 801310e:	79fb      	ldrb	r3, [r7, #7]
 8013110:	2b04      	cmp	r3, #4
 8013112:	d00d      	beq.n	8013130 <dhcp_create_msg+0xfc>
 8013114:	79fb      	ldrb	r3, [r7, #7]
 8013116:	2b07      	cmp	r3, #7
 8013118:	d00a      	beq.n	8013130 <dhcp_create_msg+0xfc>
 801311a:	79fb      	ldrb	r3, [r7, #7]
 801311c:	2b03      	cmp	r3, #3
 801311e:	d10c      	bne.n	801313a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013124:	2b05      	cmp	r3, #5
 8013126:	d003      	beq.n	8013130 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	795b      	ldrb	r3, [r3, #5]
 801312c:	2b04      	cmp	r3, #4
 801312e:	d104      	bne.n	801313a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	3304      	adds	r3, #4
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801313a:	2300      	movs	r3, #0
 801313c:	83fb      	strh	r3, [r7, #30]
 801313e:	e00c      	b.n	801315a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013140:	8bfa      	ldrh	r2, [r7, #30]
 8013142:	8bfb      	ldrh	r3, [r7, #30]
 8013144:	68f9      	ldr	r1, [r7, #12]
 8013146:	440a      	add	r2, r1
 8013148:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801314c:	697a      	ldr	r2, [r7, #20]
 801314e:	4413      	add	r3, r2
 8013150:	460a      	mov	r2, r1
 8013152:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013154:	8bfb      	ldrh	r3, [r7, #30]
 8013156:	3301      	adds	r3, #1
 8013158:	83fb      	strh	r3, [r7, #30]
 801315a:	8bfb      	ldrh	r3, [r7, #30]
 801315c:	2b05      	cmp	r3, #5
 801315e:	d9ef      	bls.n	8013140 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	2200      	movs	r2, #0
 8013164:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013168:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801316c:	2200      	movs	r2, #0
 801316e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013172:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013176:	2200      	movs	r2, #0
 8013178:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801317c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013180:	2200      	movs	r2, #0
 8013182:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013186:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013190:	2301      	movs	r3, #1
 8013192:	2235      	movs	r2, #53	; 0x35
 8013194:	2000      	movs	r0, #0
 8013196:	f7ff fadb 	bl	8012750 <dhcp_option>
 801319a:	4603      	mov	r3, r0
 801319c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131a4:	79fa      	ldrb	r2, [r7, #7]
 80131a6:	8a7b      	ldrh	r3, [r7, #18]
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7ff fb05 	bl	80127b8 <dhcp_option_byte>
 80131ae:	4603      	mov	r3, r0
 80131b0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d002      	beq.n	80131be <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	8a7a      	ldrh	r2, [r7, #18]
 80131bc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80131be:	69bb      	ldr	r3, [r7, #24]
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3720      	adds	r7, #32
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	08019264 	.word	0x08019264
 80131cc:	08019584 	.word	0x08019584
 80131d0:	080192c4 	.word	0x080192c4
 80131d4:	080195a4 	.word	0x080195a4
 80131d8:	080195c4 	.word	0x080195c4
 80131dc:	2000b0c0 	.word	0x2000b0c0

080131e0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	4603      	mov	r3, r0
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	607a      	str	r2, [r7, #4]
 80131ec:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80131ee:	89fb      	ldrh	r3, [r7, #14]
 80131f0:	1c5a      	adds	r2, r3, #1
 80131f2:	81fa      	strh	r2, [r7, #14]
 80131f4:	461a      	mov	r2, r3
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	4413      	add	r3, r2
 80131fa:	22ff      	movs	r2, #255	; 0xff
 80131fc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80131fe:	e007      	b.n	8013210 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013200:	89fb      	ldrh	r3, [r7, #14]
 8013202:	1c5a      	adds	r2, r3, #1
 8013204:	81fa      	strh	r2, [r7, #14]
 8013206:	461a      	mov	r2, r3
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	4413      	add	r3, r2
 801320c:	2200      	movs	r2, #0
 801320e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013210:	89fb      	ldrh	r3, [r7, #14]
 8013212:	2b43      	cmp	r3, #67	; 0x43
 8013214:	d904      	bls.n	8013220 <dhcp_option_trailer+0x40>
 8013216:	89fb      	ldrh	r3, [r7, #14]
 8013218:	f003 0303 	and.w	r3, r3, #3
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <dhcp_option_trailer+0x46>
 8013220:	89fb      	ldrh	r3, [r7, #14]
 8013222:	2b43      	cmp	r3, #67	; 0x43
 8013224:	d9ec      	bls.n	8013200 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013226:	89fb      	ldrh	r3, [r7, #14]
 8013228:	33f0      	adds	r3, #240	; 0xf0
 801322a:	b29b      	uxth	r3, r3
 801322c:	4619      	mov	r1, r3
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7f7 fe10 	bl	800ae54 <pbuf_realloc>
}
 8013234:	bf00      	nop
 8013236:	3710      	adds	r7, #16
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}

0801323c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801323c:	b480      	push	{r7}
 801323e:	b085      	sub	sp, #20
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d017      	beq.n	801327a <dhcp_supplied_address+0x3e>
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801324e:	2b00      	cmp	r3, #0
 8013250:	d013      	beq.n	801327a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013256:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	795b      	ldrb	r3, [r3, #5]
 801325c:	2b0a      	cmp	r3, #10
 801325e:	d007      	beq.n	8013270 <dhcp_supplied_address+0x34>
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	795b      	ldrb	r3, [r3, #5]
 8013264:	2b05      	cmp	r3, #5
 8013266:	d003      	beq.n	8013270 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801326c:	2b04      	cmp	r3, #4
 801326e:	d101      	bne.n	8013274 <dhcp_supplied_address+0x38>
 8013270:	2301      	movs	r3, #1
 8013272:	e000      	b.n	8013276 <dhcp_supplied_address+0x3a>
 8013274:	2300      	movs	r3, #0
 8013276:	b2db      	uxtb	r3, r3
 8013278:	e000      	b.n	801327c <dhcp_supplied_address+0x40>
  }
  return 0;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3714      	adds	r7, #20
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr

08013288 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013290:	4915      	ldr	r1, [pc, #84]	; (80132e8 <etharp_free_entry+0x60>)
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	4613      	mov	r3, r2
 8013296:	005b      	lsls	r3, r3, #1
 8013298:	4413      	add	r3, r2
 801329a:	00db      	lsls	r3, r3, #3
 801329c:	440b      	add	r3, r1
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d013      	beq.n	80132cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80132a4:	4910      	ldr	r1, [pc, #64]	; (80132e8 <etharp_free_entry+0x60>)
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	4613      	mov	r3, r2
 80132aa:	005b      	lsls	r3, r3, #1
 80132ac:	4413      	add	r3, r2
 80132ae:	00db      	lsls	r3, r3, #3
 80132b0:	440b      	add	r3, r1
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7f7 ff53 	bl	800b160 <pbuf_free>
    arp_table[i].q = NULL;
 80132ba:	490b      	ldr	r1, [pc, #44]	; (80132e8 <etharp_free_entry+0x60>)
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	4613      	mov	r3, r2
 80132c0:	005b      	lsls	r3, r3, #1
 80132c2:	4413      	add	r3, r2
 80132c4:	00db      	lsls	r3, r3, #3
 80132c6:	440b      	add	r3, r1
 80132c8:	2200      	movs	r2, #0
 80132ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80132cc:	4906      	ldr	r1, [pc, #24]	; (80132e8 <etharp_free_entry+0x60>)
 80132ce:	687a      	ldr	r2, [r7, #4]
 80132d0:	4613      	mov	r3, r2
 80132d2:	005b      	lsls	r3, r3, #1
 80132d4:	4413      	add	r3, r2
 80132d6:	00db      	lsls	r3, r3, #3
 80132d8:	440b      	add	r3, r1
 80132da:	3314      	adds	r3, #20
 80132dc:	2200      	movs	r2, #0
 80132de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80132e0:	bf00      	nop
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	2000b0c4 	.word	0x2000b0c4

080132ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80132f2:	2300      	movs	r3, #0
 80132f4:	607b      	str	r3, [r7, #4]
 80132f6:	e096      	b.n	8013426 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80132f8:	494f      	ldr	r1, [pc, #316]	; (8013438 <etharp_tmr+0x14c>)
 80132fa:	687a      	ldr	r2, [r7, #4]
 80132fc:	4613      	mov	r3, r2
 80132fe:	005b      	lsls	r3, r3, #1
 8013300:	4413      	add	r3, r2
 8013302:	00db      	lsls	r3, r3, #3
 8013304:	440b      	add	r3, r1
 8013306:	3314      	adds	r3, #20
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801330c:	78fb      	ldrb	r3, [r7, #3]
 801330e:	2b00      	cmp	r3, #0
 8013310:	f000 8086 	beq.w	8013420 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013314:	4948      	ldr	r1, [pc, #288]	; (8013438 <etharp_tmr+0x14c>)
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	4613      	mov	r3, r2
 801331a:	005b      	lsls	r3, r3, #1
 801331c:	4413      	add	r3, r2
 801331e:	00db      	lsls	r3, r3, #3
 8013320:	440b      	add	r3, r1
 8013322:	3312      	adds	r3, #18
 8013324:	881b      	ldrh	r3, [r3, #0]
 8013326:	3301      	adds	r3, #1
 8013328:	b298      	uxth	r0, r3
 801332a:	4943      	ldr	r1, [pc, #268]	; (8013438 <etharp_tmr+0x14c>)
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	4613      	mov	r3, r2
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	4413      	add	r3, r2
 8013334:	00db      	lsls	r3, r3, #3
 8013336:	440b      	add	r3, r1
 8013338:	3312      	adds	r3, #18
 801333a:	4602      	mov	r2, r0
 801333c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801333e:	493e      	ldr	r1, [pc, #248]	; (8013438 <etharp_tmr+0x14c>)
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	4613      	mov	r3, r2
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	4413      	add	r3, r2
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	440b      	add	r3, r1
 801334c:	3312      	adds	r3, #18
 801334e:	881b      	ldrh	r3, [r3, #0]
 8013350:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013354:	d215      	bcs.n	8013382 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013356:	4938      	ldr	r1, [pc, #224]	; (8013438 <etharp_tmr+0x14c>)
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	4613      	mov	r3, r2
 801335c:	005b      	lsls	r3, r3, #1
 801335e:	4413      	add	r3, r2
 8013360:	00db      	lsls	r3, r3, #3
 8013362:	440b      	add	r3, r1
 8013364:	3314      	adds	r3, #20
 8013366:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013368:	2b01      	cmp	r3, #1
 801336a:	d10e      	bne.n	801338a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801336c:	4932      	ldr	r1, [pc, #200]	; (8013438 <etharp_tmr+0x14c>)
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	4613      	mov	r3, r2
 8013372:	005b      	lsls	r3, r3, #1
 8013374:	4413      	add	r3, r2
 8013376:	00db      	lsls	r3, r3, #3
 8013378:	440b      	add	r3, r1
 801337a:	3312      	adds	r3, #18
 801337c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801337e:	2b04      	cmp	r3, #4
 8013380:	d903      	bls.n	801338a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7ff ff80 	bl	8013288 <etharp_free_entry>
 8013388:	e04a      	b.n	8013420 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801338a:	492b      	ldr	r1, [pc, #172]	; (8013438 <etharp_tmr+0x14c>)
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	4613      	mov	r3, r2
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	4413      	add	r3, r2
 8013394:	00db      	lsls	r3, r3, #3
 8013396:	440b      	add	r3, r1
 8013398:	3314      	adds	r3, #20
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	2b03      	cmp	r3, #3
 801339e:	d10a      	bne.n	80133b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80133a0:	4925      	ldr	r1, [pc, #148]	; (8013438 <etharp_tmr+0x14c>)
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	4613      	mov	r3, r2
 80133a6:	005b      	lsls	r3, r3, #1
 80133a8:	4413      	add	r3, r2
 80133aa:	00db      	lsls	r3, r3, #3
 80133ac:	440b      	add	r3, r1
 80133ae:	3314      	adds	r3, #20
 80133b0:	2204      	movs	r2, #4
 80133b2:	701a      	strb	r2, [r3, #0]
 80133b4:	e034      	b.n	8013420 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80133b6:	4920      	ldr	r1, [pc, #128]	; (8013438 <etharp_tmr+0x14c>)
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	4613      	mov	r3, r2
 80133bc:	005b      	lsls	r3, r3, #1
 80133be:	4413      	add	r3, r2
 80133c0:	00db      	lsls	r3, r3, #3
 80133c2:	440b      	add	r3, r1
 80133c4:	3314      	adds	r3, #20
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	2b04      	cmp	r3, #4
 80133ca:	d10a      	bne.n	80133e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80133cc:	491a      	ldr	r1, [pc, #104]	; (8013438 <etharp_tmr+0x14c>)
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	4613      	mov	r3, r2
 80133d2:	005b      	lsls	r3, r3, #1
 80133d4:	4413      	add	r3, r2
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	440b      	add	r3, r1
 80133da:	3314      	adds	r3, #20
 80133dc:	2202      	movs	r2, #2
 80133de:	701a      	strb	r2, [r3, #0]
 80133e0:	e01e      	b.n	8013420 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80133e2:	4915      	ldr	r1, [pc, #84]	; (8013438 <etharp_tmr+0x14c>)
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	4613      	mov	r3, r2
 80133e8:	005b      	lsls	r3, r3, #1
 80133ea:	4413      	add	r3, r2
 80133ec:	00db      	lsls	r3, r3, #3
 80133ee:	440b      	add	r3, r1
 80133f0:	3314      	adds	r3, #20
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d113      	bne.n	8013420 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80133f8:	490f      	ldr	r1, [pc, #60]	; (8013438 <etharp_tmr+0x14c>)
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	4613      	mov	r3, r2
 80133fe:	005b      	lsls	r3, r3, #1
 8013400:	4413      	add	r3, r2
 8013402:	00db      	lsls	r3, r3, #3
 8013404:	440b      	add	r3, r1
 8013406:	3308      	adds	r3, #8
 8013408:	6818      	ldr	r0, [r3, #0]
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	4613      	mov	r3, r2
 801340e:	005b      	lsls	r3, r3, #1
 8013410:	4413      	add	r3, r2
 8013412:	00db      	lsls	r3, r3, #3
 8013414:	4a08      	ldr	r2, [pc, #32]	; (8013438 <etharp_tmr+0x14c>)
 8013416:	4413      	add	r3, r2
 8013418:	3304      	adds	r3, #4
 801341a:	4619      	mov	r1, r3
 801341c:	f000 fe72 	bl	8014104 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	3301      	adds	r3, #1
 8013424:	607b      	str	r3, [r7, #4]
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2b09      	cmp	r3, #9
 801342a:	f77f af65 	ble.w	80132f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801342e:	bf00      	nop
 8013430:	bf00      	nop
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	2000b0c4 	.word	0x2000b0c4

0801343c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b08a      	sub	sp, #40	; 0x28
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	460b      	mov	r3, r1
 8013446:	607a      	str	r2, [r7, #4]
 8013448:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801344a:	230a      	movs	r3, #10
 801344c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801344e:	230a      	movs	r3, #10
 8013450:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013452:	230a      	movs	r3, #10
 8013454:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013456:	2300      	movs	r3, #0
 8013458:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801345a:	230a      	movs	r3, #10
 801345c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801345e:	2300      	movs	r3, #0
 8013460:	83bb      	strh	r3, [r7, #28]
 8013462:	2300      	movs	r3, #0
 8013464:	837b      	strh	r3, [r7, #26]
 8013466:	2300      	movs	r3, #0
 8013468:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801346a:	2300      	movs	r3, #0
 801346c:	843b      	strh	r3, [r7, #32]
 801346e:	e0ae      	b.n	80135ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013470:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013474:	49a6      	ldr	r1, [pc, #664]	; (8013710 <etharp_find_entry+0x2d4>)
 8013476:	4613      	mov	r3, r2
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	4413      	add	r3, r2
 801347c:	00db      	lsls	r3, r3, #3
 801347e:	440b      	add	r3, r1
 8013480:	3314      	adds	r3, #20
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013486:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801348a:	2b0a      	cmp	r3, #10
 801348c:	d105      	bne.n	801349a <etharp_find_entry+0x5e>
 801348e:	7dfb      	ldrb	r3, [r7, #23]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d102      	bne.n	801349a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013494:	8c3b      	ldrh	r3, [r7, #32]
 8013496:	847b      	strh	r3, [r7, #34]	; 0x22
 8013498:	e095      	b.n	80135c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801349a:	7dfb      	ldrb	r3, [r7, #23]
 801349c:	2b00      	cmp	r3, #0
 801349e:	f000 8092 	beq.w	80135c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80134a2:	7dfb      	ldrb	r3, [r7, #23]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d009      	beq.n	80134bc <etharp_find_entry+0x80>
 80134a8:	7dfb      	ldrb	r3, [r7, #23]
 80134aa:	2b01      	cmp	r3, #1
 80134ac:	d806      	bhi.n	80134bc <etharp_find_entry+0x80>
 80134ae:	4b99      	ldr	r3, [pc, #612]	; (8013714 <etharp_find_entry+0x2d8>)
 80134b0:	f240 1223 	movw	r2, #291	; 0x123
 80134b4:	4998      	ldr	r1, [pc, #608]	; (8013718 <etharp_find_entry+0x2dc>)
 80134b6:	4899      	ldr	r0, [pc, #612]	; (801371c <etharp_find_entry+0x2e0>)
 80134b8:	f002 fa32 	bl	8015920 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d020      	beq.n	8013504 <etharp_find_entry+0xc8>
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	6819      	ldr	r1, [r3, #0]
 80134c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134ca:	4891      	ldr	r0, [pc, #580]	; (8013710 <etharp_find_entry+0x2d4>)
 80134cc:	4613      	mov	r3, r2
 80134ce:	005b      	lsls	r3, r3, #1
 80134d0:	4413      	add	r3, r2
 80134d2:	00db      	lsls	r3, r3, #3
 80134d4:	4403      	add	r3, r0
 80134d6:	3304      	adds	r3, #4
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4299      	cmp	r1, r3
 80134dc:	d112      	bne.n	8013504 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d00c      	beq.n	80134fe <etharp_find_entry+0xc2>
 80134e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134e8:	4989      	ldr	r1, [pc, #548]	; (8013710 <etharp_find_entry+0x2d4>)
 80134ea:	4613      	mov	r3, r2
 80134ec:	005b      	lsls	r3, r3, #1
 80134ee:	4413      	add	r3, r2
 80134f0:	00db      	lsls	r3, r3, #3
 80134f2:	440b      	add	r3, r1
 80134f4:	3308      	adds	r3, #8
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	687a      	ldr	r2, [r7, #4]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d102      	bne.n	8013504 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80134fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013502:	e100      	b.n	8013706 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013504:	7dfb      	ldrb	r3, [r7, #23]
 8013506:	2b01      	cmp	r3, #1
 8013508:	d140      	bne.n	801358c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801350a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801350e:	4980      	ldr	r1, [pc, #512]	; (8013710 <etharp_find_entry+0x2d4>)
 8013510:	4613      	mov	r3, r2
 8013512:	005b      	lsls	r3, r3, #1
 8013514:	4413      	add	r3, r2
 8013516:	00db      	lsls	r3, r3, #3
 8013518:	440b      	add	r3, r1
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d01a      	beq.n	8013556 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013520:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013524:	497a      	ldr	r1, [pc, #488]	; (8013710 <etharp_find_entry+0x2d4>)
 8013526:	4613      	mov	r3, r2
 8013528:	005b      	lsls	r3, r3, #1
 801352a:	4413      	add	r3, r2
 801352c:	00db      	lsls	r3, r3, #3
 801352e:	440b      	add	r3, r1
 8013530:	3312      	adds	r3, #18
 8013532:	881b      	ldrh	r3, [r3, #0]
 8013534:	8bba      	ldrh	r2, [r7, #28]
 8013536:	429a      	cmp	r2, r3
 8013538:	d845      	bhi.n	80135c6 <etharp_find_entry+0x18a>
            old_queue = i;
 801353a:	8c3b      	ldrh	r3, [r7, #32]
 801353c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801353e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013542:	4973      	ldr	r1, [pc, #460]	; (8013710 <etharp_find_entry+0x2d4>)
 8013544:	4613      	mov	r3, r2
 8013546:	005b      	lsls	r3, r3, #1
 8013548:	4413      	add	r3, r2
 801354a:	00db      	lsls	r3, r3, #3
 801354c:	440b      	add	r3, r1
 801354e:	3312      	adds	r3, #18
 8013550:	881b      	ldrh	r3, [r3, #0]
 8013552:	83bb      	strh	r3, [r7, #28]
 8013554:	e037      	b.n	80135c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013556:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801355a:	496d      	ldr	r1, [pc, #436]	; (8013710 <etharp_find_entry+0x2d4>)
 801355c:	4613      	mov	r3, r2
 801355e:	005b      	lsls	r3, r3, #1
 8013560:	4413      	add	r3, r2
 8013562:	00db      	lsls	r3, r3, #3
 8013564:	440b      	add	r3, r1
 8013566:	3312      	adds	r3, #18
 8013568:	881b      	ldrh	r3, [r3, #0]
 801356a:	8b7a      	ldrh	r2, [r7, #26]
 801356c:	429a      	cmp	r2, r3
 801356e:	d82a      	bhi.n	80135c6 <etharp_find_entry+0x18a>
            old_pending = i;
 8013570:	8c3b      	ldrh	r3, [r7, #32]
 8013572:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013574:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013578:	4965      	ldr	r1, [pc, #404]	; (8013710 <etharp_find_entry+0x2d4>)
 801357a:	4613      	mov	r3, r2
 801357c:	005b      	lsls	r3, r3, #1
 801357e:	4413      	add	r3, r2
 8013580:	00db      	lsls	r3, r3, #3
 8013582:	440b      	add	r3, r1
 8013584:	3312      	adds	r3, #18
 8013586:	881b      	ldrh	r3, [r3, #0]
 8013588:	837b      	strh	r3, [r7, #26]
 801358a:	e01c      	b.n	80135c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801358c:	7dfb      	ldrb	r3, [r7, #23]
 801358e:	2b01      	cmp	r3, #1
 8013590:	d919      	bls.n	80135c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013596:	495e      	ldr	r1, [pc, #376]	; (8013710 <etharp_find_entry+0x2d4>)
 8013598:	4613      	mov	r3, r2
 801359a:	005b      	lsls	r3, r3, #1
 801359c:	4413      	add	r3, r2
 801359e:	00db      	lsls	r3, r3, #3
 80135a0:	440b      	add	r3, r1
 80135a2:	3312      	adds	r3, #18
 80135a4:	881b      	ldrh	r3, [r3, #0]
 80135a6:	8b3a      	ldrh	r2, [r7, #24]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d80c      	bhi.n	80135c6 <etharp_find_entry+0x18a>
            old_stable = i;
 80135ac:	8c3b      	ldrh	r3, [r7, #32]
 80135ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80135b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80135b4:	4956      	ldr	r1, [pc, #344]	; (8013710 <etharp_find_entry+0x2d4>)
 80135b6:	4613      	mov	r3, r2
 80135b8:	005b      	lsls	r3, r3, #1
 80135ba:	4413      	add	r3, r2
 80135bc:	00db      	lsls	r3, r3, #3
 80135be:	440b      	add	r3, r1
 80135c0:	3312      	adds	r3, #18
 80135c2:	881b      	ldrh	r3, [r3, #0]
 80135c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80135c6:	8c3b      	ldrh	r3, [r7, #32]
 80135c8:	3301      	adds	r3, #1
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	843b      	strh	r3, [r7, #32]
 80135ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80135d2:	2b09      	cmp	r3, #9
 80135d4:	f77f af4c 	ble.w	8013470 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80135d8:	7afb      	ldrb	r3, [r7, #11]
 80135da:	f003 0302 	and.w	r3, r3, #2
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d108      	bne.n	80135f4 <etharp_find_entry+0x1b8>
 80135e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80135e6:	2b0a      	cmp	r3, #10
 80135e8:	d107      	bne.n	80135fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80135ea:	7afb      	ldrb	r3, [r7, #11]
 80135ec:	f003 0301 	and.w	r3, r3, #1
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d102      	bne.n	80135fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80135f4:	f04f 33ff 	mov.w	r3, #4294967295
 80135f8:	e085      	b.n	8013706 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80135fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80135fe:	2b09      	cmp	r3, #9
 8013600:	dc02      	bgt.n	8013608 <etharp_find_entry+0x1cc>
    i = empty;
 8013602:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013604:	843b      	strh	r3, [r7, #32]
 8013606:	e039      	b.n	801367c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013608:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801360c:	2b09      	cmp	r3, #9
 801360e:	dc14      	bgt.n	801363a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013612:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013614:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013618:	493d      	ldr	r1, [pc, #244]	; (8013710 <etharp_find_entry+0x2d4>)
 801361a:	4613      	mov	r3, r2
 801361c:	005b      	lsls	r3, r3, #1
 801361e:	4413      	add	r3, r2
 8013620:	00db      	lsls	r3, r3, #3
 8013622:	440b      	add	r3, r1
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d018      	beq.n	801365c <etharp_find_entry+0x220>
 801362a:	4b3a      	ldr	r3, [pc, #232]	; (8013714 <etharp_find_entry+0x2d8>)
 801362c:	f240 126d 	movw	r2, #365	; 0x16d
 8013630:	493b      	ldr	r1, [pc, #236]	; (8013720 <etharp_find_entry+0x2e4>)
 8013632:	483a      	ldr	r0, [pc, #232]	; (801371c <etharp_find_entry+0x2e0>)
 8013634:	f002 f974 	bl	8015920 <iprintf>
 8013638:	e010      	b.n	801365c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801363a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801363e:	2b09      	cmp	r3, #9
 8013640:	dc02      	bgt.n	8013648 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013644:	843b      	strh	r3, [r7, #32]
 8013646:	e009      	b.n	801365c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013648:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801364c:	2b09      	cmp	r3, #9
 801364e:	dc02      	bgt.n	8013656 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013650:	8bfb      	ldrh	r3, [r7, #30]
 8013652:	843b      	strh	r3, [r7, #32]
 8013654:	e002      	b.n	801365c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013656:	f04f 33ff 	mov.w	r3, #4294967295
 801365a:	e054      	b.n	8013706 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801365c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013660:	2b09      	cmp	r3, #9
 8013662:	dd06      	ble.n	8013672 <etharp_find_entry+0x236>
 8013664:	4b2b      	ldr	r3, [pc, #172]	; (8013714 <etharp_find_entry+0x2d8>)
 8013666:	f240 127f 	movw	r2, #383	; 0x17f
 801366a:	492e      	ldr	r1, [pc, #184]	; (8013724 <etharp_find_entry+0x2e8>)
 801366c:	482b      	ldr	r0, [pc, #172]	; (801371c <etharp_find_entry+0x2e0>)
 801366e:	f002 f957 	bl	8015920 <iprintf>
    etharp_free_entry(i);
 8013672:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013676:	4618      	mov	r0, r3
 8013678:	f7ff fe06 	bl	8013288 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801367c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013680:	2b09      	cmp	r3, #9
 8013682:	dd06      	ble.n	8013692 <etharp_find_entry+0x256>
 8013684:	4b23      	ldr	r3, [pc, #140]	; (8013714 <etharp_find_entry+0x2d8>)
 8013686:	f240 1283 	movw	r2, #387	; 0x183
 801368a:	4926      	ldr	r1, [pc, #152]	; (8013724 <etharp_find_entry+0x2e8>)
 801368c:	4823      	ldr	r0, [pc, #140]	; (801371c <etharp_find_entry+0x2e0>)
 801368e:	f002 f947 	bl	8015920 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013692:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013696:	491e      	ldr	r1, [pc, #120]	; (8013710 <etharp_find_entry+0x2d4>)
 8013698:	4613      	mov	r3, r2
 801369a:	005b      	lsls	r3, r3, #1
 801369c:	4413      	add	r3, r2
 801369e:	00db      	lsls	r3, r3, #3
 80136a0:	440b      	add	r3, r1
 80136a2:	3314      	adds	r3, #20
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d006      	beq.n	80136b8 <etharp_find_entry+0x27c>
 80136aa:	4b1a      	ldr	r3, [pc, #104]	; (8013714 <etharp_find_entry+0x2d8>)
 80136ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80136b0:	491d      	ldr	r1, [pc, #116]	; (8013728 <etharp_find_entry+0x2ec>)
 80136b2:	481a      	ldr	r0, [pc, #104]	; (801371c <etharp_find_entry+0x2e0>)
 80136b4:	f002 f934 	bl	8015920 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d00b      	beq.n	80136d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80136be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	6819      	ldr	r1, [r3, #0]
 80136c6:	4812      	ldr	r0, [pc, #72]	; (8013710 <etharp_find_entry+0x2d4>)
 80136c8:	4613      	mov	r3, r2
 80136ca:	005b      	lsls	r3, r3, #1
 80136cc:	4413      	add	r3, r2
 80136ce:	00db      	lsls	r3, r3, #3
 80136d0:	4403      	add	r3, r0
 80136d2:	3304      	adds	r3, #4
 80136d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80136d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136da:	490d      	ldr	r1, [pc, #52]	; (8013710 <etharp_find_entry+0x2d4>)
 80136dc:	4613      	mov	r3, r2
 80136de:	005b      	lsls	r3, r3, #1
 80136e0:	4413      	add	r3, r2
 80136e2:	00db      	lsls	r3, r3, #3
 80136e4:	440b      	add	r3, r1
 80136e6:	3312      	adds	r3, #18
 80136e8:	2200      	movs	r2, #0
 80136ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80136ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136f0:	4907      	ldr	r1, [pc, #28]	; (8013710 <etharp_find_entry+0x2d4>)
 80136f2:	4613      	mov	r3, r2
 80136f4:	005b      	lsls	r3, r3, #1
 80136f6:	4413      	add	r3, r2
 80136f8:	00db      	lsls	r3, r3, #3
 80136fa:	440b      	add	r3, r1
 80136fc:	3308      	adds	r3, #8
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013702:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013706:	4618      	mov	r0, r3
 8013708:	3728      	adds	r7, #40	; 0x28
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
 801370e:	bf00      	nop
 8013710:	2000b0c4 	.word	0x2000b0c4
 8013714:	08019604 	.word	0x08019604
 8013718:	0801963c 	.word	0x0801963c
 801371c:	0801967c 	.word	0x0801967c
 8013720:	080196a4 	.word	0x080196a4
 8013724:	080196bc 	.word	0x080196bc
 8013728:	080196d0 	.word	0x080196d0

0801372c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b088      	sub	sp, #32
 8013730:	af02      	add	r7, sp, #8
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	60b9      	str	r1, [r7, #8]
 8013736:	607a      	str	r2, [r7, #4]
 8013738:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013740:	2b06      	cmp	r3, #6
 8013742:	d006      	beq.n	8013752 <etharp_update_arp_entry+0x26>
 8013744:	4b48      	ldr	r3, [pc, #288]	; (8013868 <etharp_update_arp_entry+0x13c>)
 8013746:	f240 12a9 	movw	r2, #425	; 0x1a9
 801374a:	4948      	ldr	r1, [pc, #288]	; (801386c <etharp_update_arp_entry+0x140>)
 801374c:	4848      	ldr	r0, [pc, #288]	; (8013870 <etharp_update_arp_entry+0x144>)
 801374e:	f002 f8e7 	bl	8015920 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d012      	beq.n	801377e <etharp_update_arp_entry+0x52>
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d00e      	beq.n	801377e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	68f9      	ldr	r1, [r7, #12]
 8013766:	4618      	mov	r0, r3
 8013768:	f001 f920 	bl	80149ac <ip4_addr_isbroadcast_u32>
 801376c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801376e:	2b00      	cmp	r3, #0
 8013770:	d105      	bne.n	801377e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801377a:	2be0      	cmp	r3, #224	; 0xe0
 801377c:	d102      	bne.n	8013784 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801377e:	f06f 030f 	mvn.w	r3, #15
 8013782:	e06c      	b.n	801385e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013784:	78fb      	ldrb	r3, [r7, #3]
 8013786:	68fa      	ldr	r2, [r7, #12]
 8013788:	4619      	mov	r1, r3
 801378a:	68b8      	ldr	r0, [r7, #8]
 801378c:	f7ff fe56 	bl	801343c <etharp_find_entry>
 8013790:	4603      	mov	r3, r0
 8013792:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013794:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013798:	2b00      	cmp	r3, #0
 801379a:	da02      	bge.n	80137a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801379c:	8afb      	ldrh	r3, [r7, #22]
 801379e:	b25b      	sxtb	r3, r3
 80137a0:	e05d      	b.n	801385e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80137a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80137a6:	4933      	ldr	r1, [pc, #204]	; (8013874 <etharp_update_arp_entry+0x148>)
 80137a8:	4613      	mov	r3, r2
 80137aa:	005b      	lsls	r3, r3, #1
 80137ac:	4413      	add	r3, r2
 80137ae:	00db      	lsls	r3, r3, #3
 80137b0:	440b      	add	r3, r1
 80137b2:	3314      	adds	r3, #20
 80137b4:	2202      	movs	r2, #2
 80137b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80137b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80137bc:	492d      	ldr	r1, [pc, #180]	; (8013874 <etharp_update_arp_entry+0x148>)
 80137be:	4613      	mov	r3, r2
 80137c0:	005b      	lsls	r3, r3, #1
 80137c2:	4413      	add	r3, r2
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	440b      	add	r3, r1
 80137c8:	3308      	adds	r3, #8
 80137ca:	68fa      	ldr	r2, [r7, #12]
 80137cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80137ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80137d2:	4613      	mov	r3, r2
 80137d4:	005b      	lsls	r3, r3, #1
 80137d6:	4413      	add	r3, r2
 80137d8:	00db      	lsls	r3, r3, #3
 80137da:	3308      	adds	r3, #8
 80137dc:	4a25      	ldr	r2, [pc, #148]	; (8013874 <etharp_update_arp_entry+0x148>)
 80137de:	4413      	add	r3, r2
 80137e0:	3304      	adds	r3, #4
 80137e2:	2206      	movs	r2, #6
 80137e4:	6879      	ldr	r1, [r7, #4]
 80137e6:	4618      	mov	r0, r3
 80137e8:	f002 f86a 	bl	80158c0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80137ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80137f0:	4920      	ldr	r1, [pc, #128]	; (8013874 <etharp_update_arp_entry+0x148>)
 80137f2:	4613      	mov	r3, r2
 80137f4:	005b      	lsls	r3, r3, #1
 80137f6:	4413      	add	r3, r2
 80137f8:	00db      	lsls	r3, r3, #3
 80137fa:	440b      	add	r3, r1
 80137fc:	3312      	adds	r3, #18
 80137fe:	2200      	movs	r2, #0
 8013800:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013802:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013806:	491b      	ldr	r1, [pc, #108]	; (8013874 <etharp_update_arp_entry+0x148>)
 8013808:	4613      	mov	r3, r2
 801380a:	005b      	lsls	r3, r3, #1
 801380c:	4413      	add	r3, r2
 801380e:	00db      	lsls	r3, r3, #3
 8013810:	440b      	add	r3, r1
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d021      	beq.n	801385c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013818:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801381c:	4915      	ldr	r1, [pc, #84]	; (8013874 <etharp_update_arp_entry+0x148>)
 801381e:	4613      	mov	r3, r2
 8013820:	005b      	lsls	r3, r3, #1
 8013822:	4413      	add	r3, r2
 8013824:	00db      	lsls	r3, r3, #3
 8013826:	440b      	add	r3, r1
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801382c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013830:	4910      	ldr	r1, [pc, #64]	; (8013874 <etharp_update_arp_entry+0x148>)
 8013832:	4613      	mov	r3, r2
 8013834:	005b      	lsls	r3, r3, #1
 8013836:	4413      	add	r3, r2
 8013838:	00db      	lsls	r3, r3, #3
 801383a:	440b      	add	r3, r1
 801383c:	2200      	movs	r2, #0
 801383e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6939      	ldr	r1, [r7, #16]
 8013850:	68f8      	ldr	r0, [r7, #12]
 8013852:	f001 ffb9 	bl	80157c8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013856:	6938      	ldr	r0, [r7, #16]
 8013858:	f7f7 fc82 	bl	800b160 <pbuf_free>
  }
  return ERR_OK;
 801385c:	2300      	movs	r3, #0
}
 801385e:	4618      	mov	r0, r3
 8013860:	3718      	adds	r7, #24
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	08019604 	.word	0x08019604
 801386c:	080196fc 	.word	0x080196fc
 8013870:	0801967c 	.word	0x0801967c
 8013874:	2000b0c4 	.word	0x2000b0c4

08013878 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013880:	2300      	movs	r3, #0
 8013882:	60fb      	str	r3, [r7, #12]
 8013884:	e01e      	b.n	80138c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013886:	4913      	ldr	r1, [pc, #76]	; (80138d4 <etharp_cleanup_netif+0x5c>)
 8013888:	68fa      	ldr	r2, [r7, #12]
 801388a:	4613      	mov	r3, r2
 801388c:	005b      	lsls	r3, r3, #1
 801388e:	4413      	add	r3, r2
 8013890:	00db      	lsls	r3, r3, #3
 8013892:	440b      	add	r3, r1
 8013894:	3314      	adds	r3, #20
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801389a:	7afb      	ldrb	r3, [r7, #11]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d00e      	beq.n	80138be <etharp_cleanup_netif+0x46>
 80138a0:	490c      	ldr	r1, [pc, #48]	; (80138d4 <etharp_cleanup_netif+0x5c>)
 80138a2:	68fa      	ldr	r2, [r7, #12]
 80138a4:	4613      	mov	r3, r2
 80138a6:	005b      	lsls	r3, r3, #1
 80138a8:	4413      	add	r3, r2
 80138aa:	00db      	lsls	r3, r3, #3
 80138ac:	440b      	add	r3, r1
 80138ae:	3308      	adds	r3, #8
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	687a      	ldr	r2, [r7, #4]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d102      	bne.n	80138be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f7ff fce5 	bl	8013288 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	3301      	adds	r3, #1
 80138c2:	60fb      	str	r3, [r7, #12]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2b09      	cmp	r3, #9
 80138c8:	dddd      	ble.n	8013886 <etharp_cleanup_netif+0xe>
    }
  }
}
 80138ca:	bf00      	nop
 80138cc:	bf00      	nop
 80138ce:	3710      	adds	r7, #16
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}
 80138d4:	2000b0c4 	.word	0x2000b0c4

080138d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80138d8:	b5b0      	push	{r4, r5, r7, lr}
 80138da:	b08a      	sub	sp, #40	; 0x28
 80138dc:	af04      	add	r7, sp, #16
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d107      	bne.n	80138f8 <etharp_input+0x20>
 80138e8:	4b3f      	ldr	r3, [pc, #252]	; (80139e8 <etharp_input+0x110>)
 80138ea:	f240 228a 	movw	r2, #650	; 0x28a
 80138ee:	493f      	ldr	r1, [pc, #252]	; (80139ec <etharp_input+0x114>)
 80138f0:	483f      	ldr	r0, [pc, #252]	; (80139f0 <etharp_input+0x118>)
 80138f2:	f002 f815 	bl	8015920 <iprintf>
 80138f6:	e074      	b.n	80139e2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	881b      	ldrh	r3, [r3, #0]
 8013902:	b29b      	uxth	r3, r3
 8013904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013908:	d10c      	bne.n	8013924 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801390e:	2b06      	cmp	r3, #6
 8013910:	d108      	bne.n	8013924 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013916:	2b04      	cmp	r3, #4
 8013918:	d104      	bne.n	8013924 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	885b      	ldrh	r3, [r3, #2]
 801391e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013920:	2b08      	cmp	r3, #8
 8013922:	d003      	beq.n	801392c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7f7 fc1b 	bl	800b160 <pbuf_free>
    return;
 801392a:	e05a      	b.n	80139e2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	330e      	adds	r3, #14
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	3318      	adds	r3, #24
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	3304      	adds	r3, #4
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d102      	bne.n	801394c <etharp_input+0x74>
    for_us = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	75fb      	strb	r3, [r7, #23]
 801394a:	e009      	b.n	8013960 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801394c:	68ba      	ldr	r2, [r7, #8]
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	3304      	adds	r3, #4
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	429a      	cmp	r2, r3
 8013956:	bf0c      	ite	eq
 8013958:	2301      	moveq	r3, #1
 801395a:	2300      	movne	r3, #0
 801395c:	b2db      	uxtb	r3, r3
 801395e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	f103 0208 	add.w	r2, r3, #8
 8013966:	7dfb      	ldrb	r3, [r7, #23]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d001      	beq.n	8013970 <etharp_input+0x98>
 801396c:	2301      	movs	r3, #1
 801396e:	e000      	b.n	8013972 <etharp_input+0x9a>
 8013970:	2302      	movs	r3, #2
 8013972:	f107 010c 	add.w	r1, r7, #12
 8013976:	6838      	ldr	r0, [r7, #0]
 8013978:	f7ff fed8 	bl	801372c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	88db      	ldrh	r3, [r3, #6]
 8013980:	b29b      	uxth	r3, r3
 8013982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013986:	d003      	beq.n	8013990 <etharp_input+0xb8>
 8013988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801398c:	d01e      	beq.n	80139cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801398e:	e025      	b.n	80139dc <etharp_input+0x104>
      if (for_us) {
 8013990:	7dfb      	ldrb	r3, [r7, #23]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d021      	beq.n	80139da <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80139ac:	693a      	ldr	r2, [r7, #16]
 80139ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 80139b0:	2102      	movs	r1, #2
 80139b2:	9103      	str	r1, [sp, #12]
 80139b4:	f107 010c 	add.w	r1, r7, #12
 80139b8:	9102      	str	r1, [sp, #8]
 80139ba:	9201      	str	r2, [sp, #4]
 80139bc:	9300      	str	r3, [sp, #0]
 80139be:	462b      	mov	r3, r5
 80139c0:	4622      	mov	r2, r4
 80139c2:	4601      	mov	r1, r0
 80139c4:	6838      	ldr	r0, [r7, #0]
 80139c6:	f000 faef 	bl	8013fa8 <etharp_raw>
      break;
 80139ca:	e006      	b.n	80139da <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80139cc:	f107 030c 	add.w	r3, r7, #12
 80139d0:	4619      	mov	r1, r3
 80139d2:	6838      	ldr	r0, [r7, #0]
 80139d4:	f7fe f9fc 	bl	8011dd0 <dhcp_arp_reply>
      break;
 80139d8:	e000      	b.n	80139dc <etharp_input+0x104>
      break;
 80139da:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f7f7 fbbf 	bl	800b160 <pbuf_free>
}
 80139e2:	3718      	adds	r7, #24
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bdb0      	pop	{r4, r5, r7, pc}
 80139e8:	08019604 	.word	0x08019604
 80139ec:	08019754 	.word	0x08019754
 80139f0:	0801967c 	.word	0x0801967c

080139f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	af02      	add	r7, sp, #8
 80139fa:	60f8      	str	r0, [r7, #12]
 80139fc:	60b9      	str	r1, [r7, #8]
 80139fe:	4613      	mov	r3, r2
 8013a00:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013a02:	79fa      	ldrb	r2, [r7, #7]
 8013a04:	4944      	ldr	r1, [pc, #272]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013a06:	4613      	mov	r3, r2
 8013a08:	005b      	lsls	r3, r3, #1
 8013a0a:	4413      	add	r3, r2
 8013a0c:	00db      	lsls	r3, r3, #3
 8013a0e:	440b      	add	r3, r1
 8013a10:	3314      	adds	r3, #20
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	2b01      	cmp	r3, #1
 8013a16:	d806      	bhi.n	8013a26 <etharp_output_to_arp_index+0x32>
 8013a18:	4b40      	ldr	r3, [pc, #256]	; (8013b1c <etharp_output_to_arp_index+0x128>)
 8013a1a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013a1e:	4940      	ldr	r1, [pc, #256]	; (8013b20 <etharp_output_to_arp_index+0x12c>)
 8013a20:	4840      	ldr	r0, [pc, #256]	; (8013b24 <etharp_output_to_arp_index+0x130>)
 8013a22:	f001 ff7d 	bl	8015920 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013a26:	79fa      	ldrb	r2, [r7, #7]
 8013a28:	493b      	ldr	r1, [pc, #236]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013a2a:	4613      	mov	r3, r2
 8013a2c:	005b      	lsls	r3, r3, #1
 8013a2e:	4413      	add	r3, r2
 8013a30:	00db      	lsls	r3, r3, #3
 8013a32:	440b      	add	r3, r1
 8013a34:	3314      	adds	r3, #20
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	2b02      	cmp	r3, #2
 8013a3a:	d153      	bne.n	8013ae4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013a3c:	79fa      	ldrb	r2, [r7, #7]
 8013a3e:	4936      	ldr	r1, [pc, #216]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013a40:	4613      	mov	r3, r2
 8013a42:	005b      	lsls	r3, r3, #1
 8013a44:	4413      	add	r3, r2
 8013a46:	00db      	lsls	r3, r3, #3
 8013a48:	440b      	add	r3, r1
 8013a4a:	3312      	adds	r3, #18
 8013a4c:	881b      	ldrh	r3, [r3, #0]
 8013a4e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013a52:	d919      	bls.n	8013a88 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013a54:	79fa      	ldrb	r2, [r7, #7]
 8013a56:	4613      	mov	r3, r2
 8013a58:	005b      	lsls	r3, r3, #1
 8013a5a:	4413      	add	r3, r2
 8013a5c:	00db      	lsls	r3, r3, #3
 8013a5e:	4a2e      	ldr	r2, [pc, #184]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013a60:	4413      	add	r3, r2
 8013a62:	3304      	adds	r3, #4
 8013a64:	4619      	mov	r1, r3
 8013a66:	68f8      	ldr	r0, [r7, #12]
 8013a68:	f000 fb4c 	bl	8014104 <etharp_request>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d138      	bne.n	8013ae4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013a72:	79fa      	ldrb	r2, [r7, #7]
 8013a74:	4928      	ldr	r1, [pc, #160]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013a76:	4613      	mov	r3, r2
 8013a78:	005b      	lsls	r3, r3, #1
 8013a7a:	4413      	add	r3, r2
 8013a7c:	00db      	lsls	r3, r3, #3
 8013a7e:	440b      	add	r3, r1
 8013a80:	3314      	adds	r3, #20
 8013a82:	2203      	movs	r2, #3
 8013a84:	701a      	strb	r2, [r3, #0]
 8013a86:	e02d      	b.n	8013ae4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013a88:	79fa      	ldrb	r2, [r7, #7]
 8013a8a:	4923      	ldr	r1, [pc, #140]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013a8c:	4613      	mov	r3, r2
 8013a8e:	005b      	lsls	r3, r3, #1
 8013a90:	4413      	add	r3, r2
 8013a92:	00db      	lsls	r3, r3, #3
 8013a94:	440b      	add	r3, r1
 8013a96:	3312      	adds	r3, #18
 8013a98:	881b      	ldrh	r3, [r3, #0]
 8013a9a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013a9e:	d321      	bcc.n	8013ae4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013aa0:	79fa      	ldrb	r2, [r7, #7]
 8013aa2:	4613      	mov	r3, r2
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	4413      	add	r3, r2
 8013aa8:	00db      	lsls	r3, r3, #3
 8013aaa:	4a1b      	ldr	r2, [pc, #108]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013aac:	4413      	add	r3, r2
 8013aae:	1d19      	adds	r1, r3, #4
 8013ab0:	79fa      	ldrb	r2, [r7, #7]
 8013ab2:	4613      	mov	r3, r2
 8013ab4:	005b      	lsls	r3, r3, #1
 8013ab6:	4413      	add	r3, r2
 8013ab8:	00db      	lsls	r3, r3, #3
 8013aba:	3308      	adds	r3, #8
 8013abc:	4a16      	ldr	r2, [pc, #88]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013abe:	4413      	add	r3, r2
 8013ac0:	3304      	adds	r3, #4
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	f000 fafb 	bl	80140c0 <etharp_request_dst>
 8013aca:	4603      	mov	r3, r0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d109      	bne.n	8013ae4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013ad0:	79fa      	ldrb	r2, [r7, #7]
 8013ad2:	4911      	ldr	r1, [pc, #68]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013ad4:	4613      	mov	r3, r2
 8013ad6:	005b      	lsls	r3, r3, #1
 8013ad8:	4413      	add	r3, r2
 8013ada:	00db      	lsls	r3, r3, #3
 8013adc:	440b      	add	r3, r1
 8013ade:	3314      	adds	r3, #20
 8013ae0:	2203      	movs	r2, #3
 8013ae2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8013aea:	79fa      	ldrb	r2, [r7, #7]
 8013aec:	4613      	mov	r3, r2
 8013aee:	005b      	lsls	r3, r3, #1
 8013af0:	4413      	add	r3, r2
 8013af2:	00db      	lsls	r3, r3, #3
 8013af4:	3308      	adds	r3, #8
 8013af6:	4a08      	ldr	r2, [pc, #32]	; (8013b18 <etharp_output_to_arp_index+0x124>)
 8013af8:	4413      	add	r3, r2
 8013afa:	3304      	adds	r3, #4
 8013afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013b00:	9200      	str	r2, [sp, #0]
 8013b02:	460a      	mov	r2, r1
 8013b04:	68b9      	ldr	r1, [r7, #8]
 8013b06:	68f8      	ldr	r0, [r7, #12]
 8013b08:	f001 fe5e 	bl	80157c8 <ethernet_output>
 8013b0c:	4603      	mov	r3, r0
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3710      	adds	r7, #16
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop
 8013b18:	2000b0c4 	.word	0x2000b0c4
 8013b1c:	08019604 	.word	0x08019604
 8013b20:	08019774 	.word	0x08019774
 8013b24:	0801967c 	.word	0x0801967c

08013b28 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b08a      	sub	sp, #40	; 0x28
 8013b2c:	af02      	add	r7, sp, #8
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d106      	bne.n	8013b4c <etharp_output+0x24>
 8013b3e:	4b73      	ldr	r3, [pc, #460]	; (8013d0c <etharp_output+0x1e4>)
 8013b40:	f240 321e 	movw	r2, #798	; 0x31e
 8013b44:	4972      	ldr	r1, [pc, #456]	; (8013d10 <etharp_output+0x1e8>)
 8013b46:	4873      	ldr	r0, [pc, #460]	; (8013d14 <etharp_output+0x1ec>)
 8013b48:	f001 feea 	bl	8015920 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d106      	bne.n	8013b60 <etharp_output+0x38>
 8013b52:	4b6e      	ldr	r3, [pc, #440]	; (8013d0c <etharp_output+0x1e4>)
 8013b54:	f240 321f 	movw	r2, #799	; 0x31f
 8013b58:	496f      	ldr	r1, [pc, #444]	; (8013d18 <etharp_output+0x1f0>)
 8013b5a:	486e      	ldr	r0, [pc, #440]	; (8013d14 <etharp_output+0x1ec>)
 8013b5c:	f001 fee0 	bl	8015920 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d106      	bne.n	8013b74 <etharp_output+0x4c>
 8013b66:	4b69      	ldr	r3, [pc, #420]	; (8013d0c <etharp_output+0x1e4>)
 8013b68:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013b6c:	496b      	ldr	r1, [pc, #428]	; (8013d1c <etharp_output+0x1f4>)
 8013b6e:	4869      	ldr	r0, [pc, #420]	; (8013d14 <etharp_output+0x1ec>)
 8013b70:	f001 fed6 	bl	8015920 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	68f9      	ldr	r1, [r7, #12]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 ff16 	bl	80149ac <ip4_addr_isbroadcast_u32>
 8013b80:	4603      	mov	r3, r0
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d002      	beq.n	8013b8c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013b86:	4b66      	ldr	r3, [pc, #408]	; (8013d20 <etharp_output+0x1f8>)
 8013b88:	61fb      	str	r3, [r7, #28]
 8013b8a:	e0af      	b.n	8013cec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b94:	2be0      	cmp	r3, #224	; 0xe0
 8013b96:	d118      	bne.n	8013bca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013b98:	2301      	movs	r3, #1
 8013b9a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013ba0:	235e      	movs	r3, #94	; 0x5e
 8013ba2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	3302      	adds	r3, #2
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	3303      	adds	r3, #3
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013bc2:	f107 0310 	add.w	r3, r7, #16
 8013bc6:	61fb      	str	r3, [r7, #28]
 8013bc8:	e090      	b.n	8013cec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681a      	ldr	r2, [r3, #0]
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	3304      	adds	r3, #4
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	405a      	eors	r2, r3
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	3308      	adds	r3, #8
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	4013      	ands	r3, r2
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d012      	beq.n	8013c08 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013be8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013bec:	4293      	cmp	r3, r2
 8013bee:	d00b      	beq.n	8013c08 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	330c      	adds	r3, #12
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d003      	beq.n	8013c02 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	330c      	adds	r3, #12
 8013bfe:	61bb      	str	r3, [r7, #24]
 8013c00:	e002      	b.n	8013c08 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013c02:	f06f 0303 	mvn.w	r3, #3
 8013c06:	e07d      	b.n	8013d04 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013c08:	4b46      	ldr	r3, [pc, #280]	; (8013d24 <etharp_output+0x1fc>)
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	4a46      	ldr	r2, [pc, #280]	; (8013d28 <etharp_output+0x200>)
 8013c10:	460b      	mov	r3, r1
 8013c12:	005b      	lsls	r3, r3, #1
 8013c14:	440b      	add	r3, r1
 8013c16:	00db      	lsls	r3, r3, #3
 8013c18:	4413      	add	r3, r2
 8013c1a:	3314      	adds	r3, #20
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d925      	bls.n	8013c6e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013c22:	4b40      	ldr	r3, [pc, #256]	; (8013d24 <etharp_output+0x1fc>)
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	4619      	mov	r1, r3
 8013c28:	4a3f      	ldr	r2, [pc, #252]	; (8013d28 <etharp_output+0x200>)
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	005b      	lsls	r3, r3, #1
 8013c2e:	440b      	add	r3, r1
 8013c30:	00db      	lsls	r3, r3, #3
 8013c32:	4413      	add	r3, r2
 8013c34:	3308      	adds	r3, #8
 8013c36:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013c38:	68fa      	ldr	r2, [r7, #12]
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d117      	bne.n	8013c6e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013c3e:	69bb      	ldr	r3, [r7, #24]
 8013c40:	681a      	ldr	r2, [r3, #0]
 8013c42:	4b38      	ldr	r3, [pc, #224]	; (8013d24 <etharp_output+0x1fc>)
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	4618      	mov	r0, r3
 8013c48:	4937      	ldr	r1, [pc, #220]	; (8013d28 <etharp_output+0x200>)
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	4403      	add	r3, r0
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	440b      	add	r3, r1
 8013c54:	3304      	adds	r3, #4
 8013c56:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d108      	bne.n	8013c6e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013c5c:	4b31      	ldr	r3, [pc, #196]	; (8013d24 <etharp_output+0x1fc>)
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	461a      	mov	r2, r3
 8013c62:	68b9      	ldr	r1, [r7, #8]
 8013c64:	68f8      	ldr	r0, [r7, #12]
 8013c66:	f7ff fec5 	bl	80139f4 <etharp_output_to_arp_index>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	e04a      	b.n	8013d04 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013c6e:	2300      	movs	r3, #0
 8013c70:	75fb      	strb	r3, [r7, #23]
 8013c72:	e031      	b.n	8013cd8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013c74:	7dfa      	ldrb	r2, [r7, #23]
 8013c76:	492c      	ldr	r1, [pc, #176]	; (8013d28 <etharp_output+0x200>)
 8013c78:	4613      	mov	r3, r2
 8013c7a:	005b      	lsls	r3, r3, #1
 8013c7c:	4413      	add	r3, r2
 8013c7e:	00db      	lsls	r3, r3, #3
 8013c80:	440b      	add	r3, r1
 8013c82:	3314      	adds	r3, #20
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d923      	bls.n	8013cd2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013c8a:	7dfa      	ldrb	r2, [r7, #23]
 8013c8c:	4926      	ldr	r1, [pc, #152]	; (8013d28 <etharp_output+0x200>)
 8013c8e:	4613      	mov	r3, r2
 8013c90:	005b      	lsls	r3, r3, #1
 8013c92:	4413      	add	r3, r2
 8013c94:	00db      	lsls	r3, r3, #3
 8013c96:	440b      	add	r3, r1
 8013c98:	3308      	adds	r3, #8
 8013c9a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013c9c:	68fa      	ldr	r2, [r7, #12]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d117      	bne.n	8013cd2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013ca2:	69bb      	ldr	r3, [r7, #24]
 8013ca4:	6819      	ldr	r1, [r3, #0]
 8013ca6:	7dfa      	ldrb	r2, [r7, #23]
 8013ca8:	481f      	ldr	r0, [pc, #124]	; (8013d28 <etharp_output+0x200>)
 8013caa:	4613      	mov	r3, r2
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	4413      	add	r3, r2
 8013cb0:	00db      	lsls	r3, r3, #3
 8013cb2:	4403      	add	r3, r0
 8013cb4:	3304      	adds	r3, #4
 8013cb6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013cb8:	4299      	cmp	r1, r3
 8013cba:	d10a      	bne.n	8013cd2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013cbc:	4a19      	ldr	r2, [pc, #100]	; (8013d24 <etharp_output+0x1fc>)
 8013cbe:	7dfb      	ldrb	r3, [r7, #23]
 8013cc0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013cc2:	7dfb      	ldrb	r3, [r7, #23]
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	68b9      	ldr	r1, [r7, #8]
 8013cc8:	68f8      	ldr	r0, [r7, #12]
 8013cca:	f7ff fe93 	bl	80139f4 <etharp_output_to_arp_index>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	e018      	b.n	8013d04 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013cd2:	7dfb      	ldrb	r3, [r7, #23]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	75fb      	strb	r3, [r7, #23]
 8013cd8:	7dfb      	ldrb	r3, [r7, #23]
 8013cda:	2b09      	cmp	r3, #9
 8013cdc:	d9ca      	bls.n	8013c74 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013cde:	68ba      	ldr	r2, [r7, #8]
 8013ce0:	69b9      	ldr	r1, [r7, #24]
 8013ce2:	68f8      	ldr	r0, [r7, #12]
 8013ce4:	f000 f822 	bl	8013d2c <etharp_query>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	e00b      	b.n	8013d04 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	68b9      	ldr	r1, [r7, #8]
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f001 fd63 	bl	80157c8 <ethernet_output>
 8013d02:	4603      	mov	r3, r0
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3720      	adds	r7, #32
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	08019604 	.word	0x08019604
 8013d10:	08019754 	.word	0x08019754
 8013d14:	0801967c 	.word	0x0801967c
 8013d18:	080197a4 	.word	0x080197a4
 8013d1c:	08019744 	.word	0x08019744
 8013d20:	0801c4b4 	.word	0x0801c4b4
 8013d24:	2000b1b4 	.word	0x2000b1b4
 8013d28:	2000b0c4 	.word	0x2000b0c4

08013d2c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b08c      	sub	sp, #48	; 0x30
 8013d30:	af02      	add	r7, sp, #8
 8013d32:	60f8      	str	r0, [r7, #12]
 8013d34:	60b9      	str	r1, [r7, #8]
 8013d36:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	332a      	adds	r3, #42	; 0x2a
 8013d3c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013d3e:	23ff      	movs	r3, #255	; 0xff
 8013d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013d44:	2300      	movs	r3, #0
 8013d46:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	68f9      	ldr	r1, [r7, #12]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f000 fe2c 	bl	80149ac <ip4_addr_isbroadcast_u32>
 8013d54:	4603      	mov	r3, r0
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d10c      	bne.n	8013d74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013d62:	2be0      	cmp	r3, #224	; 0xe0
 8013d64:	d006      	beq.n	8013d74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d003      	beq.n	8013d74 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d102      	bne.n	8013d7a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013d74:	f06f 030f 	mvn.w	r3, #15
 8013d78:	e101      	b.n	8013f7e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	2101      	movs	r1, #1
 8013d7e:	68b8      	ldr	r0, [r7, #8]
 8013d80:	f7ff fb5c 	bl	801343c <etharp_find_entry>
 8013d84:	4603      	mov	r3, r0
 8013d86:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013d88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	da02      	bge.n	8013d96 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013d90:	8a7b      	ldrh	r3, [r7, #18]
 8013d92:	b25b      	sxtb	r3, r3
 8013d94:	e0f3      	b.n	8013f7e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013d96:	8a7b      	ldrh	r3, [r7, #18]
 8013d98:	2b7e      	cmp	r3, #126	; 0x7e
 8013d9a:	d906      	bls.n	8013daa <etharp_query+0x7e>
 8013d9c:	4b7a      	ldr	r3, [pc, #488]	; (8013f88 <etharp_query+0x25c>)
 8013d9e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013da2:	497a      	ldr	r1, [pc, #488]	; (8013f8c <etharp_query+0x260>)
 8013da4:	487a      	ldr	r0, [pc, #488]	; (8013f90 <etharp_query+0x264>)
 8013da6:	f001 fdbb 	bl	8015920 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013daa:	8a7b      	ldrh	r3, [r7, #18]
 8013dac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013dae:	7c7a      	ldrb	r2, [r7, #17]
 8013db0:	4978      	ldr	r1, [pc, #480]	; (8013f94 <etharp_query+0x268>)
 8013db2:	4613      	mov	r3, r2
 8013db4:	005b      	lsls	r3, r3, #1
 8013db6:	4413      	add	r3, r2
 8013db8:	00db      	lsls	r3, r3, #3
 8013dba:	440b      	add	r3, r1
 8013dbc:	3314      	adds	r3, #20
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d115      	bne.n	8013df0 <etharp_query+0xc4>
    is_new_entry = 1;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013dc8:	7c7a      	ldrb	r2, [r7, #17]
 8013dca:	4972      	ldr	r1, [pc, #456]	; (8013f94 <etharp_query+0x268>)
 8013dcc:	4613      	mov	r3, r2
 8013dce:	005b      	lsls	r3, r3, #1
 8013dd0:	4413      	add	r3, r2
 8013dd2:	00db      	lsls	r3, r3, #3
 8013dd4:	440b      	add	r3, r1
 8013dd6:	3314      	adds	r3, #20
 8013dd8:	2201      	movs	r2, #1
 8013dda:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013ddc:	7c7a      	ldrb	r2, [r7, #17]
 8013dde:	496d      	ldr	r1, [pc, #436]	; (8013f94 <etharp_query+0x268>)
 8013de0:	4613      	mov	r3, r2
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	4413      	add	r3, r2
 8013de6:	00db      	lsls	r3, r3, #3
 8013de8:	440b      	add	r3, r1
 8013dea:	3308      	adds	r3, #8
 8013dec:	68fa      	ldr	r2, [r7, #12]
 8013dee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013df0:	7c7a      	ldrb	r2, [r7, #17]
 8013df2:	4968      	ldr	r1, [pc, #416]	; (8013f94 <etharp_query+0x268>)
 8013df4:	4613      	mov	r3, r2
 8013df6:	005b      	lsls	r3, r3, #1
 8013df8:	4413      	add	r3, r2
 8013dfa:	00db      	lsls	r3, r3, #3
 8013dfc:	440b      	add	r3, r1
 8013dfe:	3314      	adds	r3, #20
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d011      	beq.n	8013e2a <etharp_query+0xfe>
 8013e06:	7c7a      	ldrb	r2, [r7, #17]
 8013e08:	4962      	ldr	r1, [pc, #392]	; (8013f94 <etharp_query+0x268>)
 8013e0a:	4613      	mov	r3, r2
 8013e0c:	005b      	lsls	r3, r3, #1
 8013e0e:	4413      	add	r3, r2
 8013e10:	00db      	lsls	r3, r3, #3
 8013e12:	440b      	add	r3, r1
 8013e14:	3314      	adds	r3, #20
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d806      	bhi.n	8013e2a <etharp_query+0xfe>
 8013e1c:	4b5a      	ldr	r3, [pc, #360]	; (8013f88 <etharp_query+0x25c>)
 8013e1e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013e22:	495d      	ldr	r1, [pc, #372]	; (8013f98 <etharp_query+0x26c>)
 8013e24:	485a      	ldr	r0, [pc, #360]	; (8013f90 <etharp_query+0x264>)
 8013e26:	f001 fd7b 	bl	8015920 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013e2a:	6a3b      	ldr	r3, [r7, #32]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d102      	bne.n	8013e36 <etharp_query+0x10a>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d10c      	bne.n	8013e50 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013e36:	68b9      	ldr	r1, [r7, #8]
 8013e38:	68f8      	ldr	r0, [r7, #12]
 8013e3a:	f000 f963 	bl	8014104 <etharp_request>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d102      	bne.n	8013e50 <etharp_query+0x124>
      return result;
 8013e4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013e4e:	e096      	b.n	8013f7e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d106      	bne.n	8013e64 <etharp_query+0x138>
 8013e56:	4b4c      	ldr	r3, [pc, #304]	; (8013f88 <etharp_query+0x25c>)
 8013e58:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013e5c:	494f      	ldr	r1, [pc, #316]	; (8013f9c <etharp_query+0x270>)
 8013e5e:	484c      	ldr	r0, [pc, #304]	; (8013f90 <etharp_query+0x264>)
 8013e60:	f001 fd5e 	bl	8015920 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013e64:	7c7a      	ldrb	r2, [r7, #17]
 8013e66:	494b      	ldr	r1, [pc, #300]	; (8013f94 <etharp_query+0x268>)
 8013e68:	4613      	mov	r3, r2
 8013e6a:	005b      	lsls	r3, r3, #1
 8013e6c:	4413      	add	r3, r2
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	440b      	add	r3, r1
 8013e72:	3314      	adds	r3, #20
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	d917      	bls.n	8013eaa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013e7a:	4a49      	ldr	r2, [pc, #292]	; (8013fa0 <etharp_query+0x274>)
 8013e7c:	7c7b      	ldrb	r3, [r7, #17]
 8013e7e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013e80:	7c7a      	ldrb	r2, [r7, #17]
 8013e82:	4613      	mov	r3, r2
 8013e84:	005b      	lsls	r3, r3, #1
 8013e86:	4413      	add	r3, r2
 8013e88:	00db      	lsls	r3, r3, #3
 8013e8a:	3308      	adds	r3, #8
 8013e8c:	4a41      	ldr	r2, [pc, #260]	; (8013f94 <etharp_query+0x268>)
 8013e8e:	4413      	add	r3, r2
 8013e90:	3304      	adds	r3, #4
 8013e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e96:	9200      	str	r2, [sp, #0]
 8013e98:	697a      	ldr	r2, [r7, #20]
 8013e9a:	6879      	ldr	r1, [r7, #4]
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	f001 fc93 	bl	80157c8 <ethernet_output>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013ea8:	e067      	b.n	8013f7a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013eaa:	7c7a      	ldrb	r2, [r7, #17]
 8013eac:	4939      	ldr	r1, [pc, #228]	; (8013f94 <etharp_query+0x268>)
 8013eae:	4613      	mov	r3, r2
 8013eb0:	005b      	lsls	r3, r3, #1
 8013eb2:	4413      	add	r3, r2
 8013eb4:	00db      	lsls	r3, r3, #3
 8013eb6:	440b      	add	r3, r1
 8013eb8:	3314      	adds	r3, #20
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	2b01      	cmp	r3, #1
 8013ebe:	d15c      	bne.n	8013f7a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013ec8:	e01c      	b.n	8013f04 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	895a      	ldrh	r2, [r3, #10]
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	891b      	ldrh	r3, [r3, #8]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d10a      	bne.n	8013eec <etharp_query+0x1c0>
 8013ed6:	69fb      	ldr	r3, [r7, #28]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d006      	beq.n	8013eec <etharp_query+0x1c0>
 8013ede:	4b2a      	ldr	r3, [pc, #168]	; (8013f88 <etharp_query+0x25c>)
 8013ee0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013ee4:	492f      	ldr	r1, [pc, #188]	; (8013fa4 <etharp_query+0x278>)
 8013ee6:	482a      	ldr	r0, [pc, #168]	; (8013f90 <etharp_query+0x264>)
 8013ee8:	f001 fd1a 	bl	8015920 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013eec:	69fb      	ldr	r3, [r7, #28]
 8013eee:	7b1b      	ldrb	r3, [r3, #12]
 8013ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d002      	beq.n	8013efe <etharp_query+0x1d2>
        copy_needed = 1;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	61bb      	str	r3, [r7, #24]
        break;
 8013efc:	e005      	b.n	8013f0a <etharp_query+0x1de>
      }
      p = p->next;
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013f04:	69fb      	ldr	r3, [r7, #28]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d1df      	bne.n	8013eca <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d007      	beq.n	8013f20 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013f10:	687a      	ldr	r2, [r7, #4]
 8013f12:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013f16:	200e      	movs	r0, #14
 8013f18:	f7f7 fb8e 	bl	800b638 <pbuf_clone>
 8013f1c:	61f8      	str	r0, [r7, #28]
 8013f1e:	e004      	b.n	8013f2a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013f24:	69f8      	ldr	r0, [r7, #28]
 8013f26:	f7f7 f9bb 	bl	800b2a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d021      	beq.n	8013f74 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013f30:	7c7a      	ldrb	r2, [r7, #17]
 8013f32:	4918      	ldr	r1, [pc, #96]	; (8013f94 <etharp_query+0x268>)
 8013f34:	4613      	mov	r3, r2
 8013f36:	005b      	lsls	r3, r3, #1
 8013f38:	4413      	add	r3, r2
 8013f3a:	00db      	lsls	r3, r3, #3
 8013f3c:	440b      	add	r3, r1
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d00a      	beq.n	8013f5a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013f44:	7c7a      	ldrb	r2, [r7, #17]
 8013f46:	4913      	ldr	r1, [pc, #76]	; (8013f94 <etharp_query+0x268>)
 8013f48:	4613      	mov	r3, r2
 8013f4a:	005b      	lsls	r3, r3, #1
 8013f4c:	4413      	add	r3, r2
 8013f4e:	00db      	lsls	r3, r3, #3
 8013f50:	440b      	add	r3, r1
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7f7 f903 	bl	800b160 <pbuf_free>
      }
      arp_table[i].q = p;
 8013f5a:	7c7a      	ldrb	r2, [r7, #17]
 8013f5c:	490d      	ldr	r1, [pc, #52]	; (8013f94 <etharp_query+0x268>)
 8013f5e:	4613      	mov	r3, r2
 8013f60:	005b      	lsls	r3, r3, #1
 8013f62:	4413      	add	r3, r2
 8013f64:	00db      	lsls	r3, r3, #3
 8013f66:	440b      	add	r3, r1
 8013f68:	69fa      	ldr	r2, [r7, #28]
 8013f6a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f72:	e002      	b.n	8013f7a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013f74:	23ff      	movs	r3, #255	; 0xff
 8013f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013f7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3728      	adds	r7, #40	; 0x28
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
 8013f86:	bf00      	nop
 8013f88:	08019604 	.word	0x08019604
 8013f8c:	080197b0 	.word	0x080197b0
 8013f90:	0801967c 	.word	0x0801967c
 8013f94:	2000b0c4 	.word	0x2000b0c4
 8013f98:	080197c0 	.word	0x080197c0
 8013f9c:	080197a4 	.word	0x080197a4
 8013fa0:	2000b1b4 	.word	0x2000b1b4
 8013fa4:	080197e8 	.word	0x080197e8

08013fa8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b08a      	sub	sp, #40	; 0x28
 8013fac:	af02      	add	r7, sp, #8
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	607a      	str	r2, [r7, #4]
 8013fb4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d106      	bne.n	8013fce <etharp_raw+0x26>
 8013fc0:	4b3a      	ldr	r3, [pc, #232]	; (80140ac <etharp_raw+0x104>)
 8013fc2:	f240 4257 	movw	r2, #1111	; 0x457
 8013fc6:	493a      	ldr	r1, [pc, #232]	; (80140b0 <etharp_raw+0x108>)
 8013fc8:	483a      	ldr	r0, [pc, #232]	; (80140b4 <etharp_raw+0x10c>)
 8013fca:	f001 fca9 	bl	8015920 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013fce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013fd2:	211c      	movs	r1, #28
 8013fd4:	200e      	movs	r0, #14
 8013fd6:	f7f6 fddf 	bl	800ab98 <pbuf_alloc>
 8013fda:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013fdc:	69bb      	ldr	r3, [r7, #24]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d102      	bne.n	8013fe8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8013fe6:	e05d      	b.n	80140a4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	895b      	ldrh	r3, [r3, #10]
 8013fec:	2b1b      	cmp	r3, #27
 8013fee:	d806      	bhi.n	8013ffe <etharp_raw+0x56>
 8013ff0:	4b2e      	ldr	r3, [pc, #184]	; (80140ac <etharp_raw+0x104>)
 8013ff2:	f240 4262 	movw	r2, #1122	; 0x462
 8013ff6:	4930      	ldr	r1, [pc, #192]	; (80140b8 <etharp_raw+0x110>)
 8013ff8:	482e      	ldr	r0, [pc, #184]	; (80140b4 <etharp_raw+0x10c>)
 8013ffa:	f001 fc91 	bl	8015920 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014004:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014006:	4618      	mov	r0, r3
 8014008:	f7f5 fd40 	bl	8009a8c <lwip_htons>
 801400c:	4603      	mov	r3, r0
 801400e:	461a      	mov	r2, r3
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801401a:	2b06      	cmp	r3, #6
 801401c:	d006      	beq.n	801402c <etharp_raw+0x84>
 801401e:	4b23      	ldr	r3, [pc, #140]	; (80140ac <etharp_raw+0x104>)
 8014020:	f240 4269 	movw	r2, #1129	; 0x469
 8014024:	4925      	ldr	r1, [pc, #148]	; (80140bc <etharp_raw+0x114>)
 8014026:	4823      	ldr	r0, [pc, #140]	; (80140b4 <etharp_raw+0x10c>)
 8014028:	f001 fc7a 	bl	8015920 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	3308      	adds	r3, #8
 8014030:	2206      	movs	r2, #6
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	4618      	mov	r0, r3
 8014036:	f001 fc43 	bl	80158c0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	3312      	adds	r3, #18
 801403e:	2206      	movs	r2, #6
 8014040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014042:	4618      	mov	r0, r3
 8014044:	f001 fc3c 	bl	80158c0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	330e      	adds	r3, #14
 801404c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801404e:	6812      	ldr	r2, [r2, #0]
 8014050:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	3318      	adds	r3, #24
 8014056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014058:	6812      	ldr	r2, [r2, #0]
 801405a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	2200      	movs	r2, #0
 8014060:	701a      	strb	r2, [r3, #0]
 8014062:	2200      	movs	r2, #0
 8014064:	f042 0201 	orr.w	r2, r2, #1
 8014068:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	2200      	movs	r2, #0
 801406e:	f042 0208 	orr.w	r2, r2, #8
 8014072:	709a      	strb	r2, [r3, #2]
 8014074:	2200      	movs	r2, #0
 8014076:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	2206      	movs	r2, #6
 801407c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	2204      	movs	r2, #4
 8014082:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014084:	f640 0306 	movw	r3, #2054	; 0x806
 8014088:	9300      	str	r3, [sp, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	68ba      	ldr	r2, [r7, #8]
 801408e:	69b9      	ldr	r1, [r7, #24]
 8014090:	68f8      	ldr	r0, [r7, #12]
 8014092:	f001 fb99 	bl	80157c8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014096:	69b8      	ldr	r0, [r7, #24]
 8014098:	f7f7 f862 	bl	800b160 <pbuf_free>
  p = NULL;
 801409c:	2300      	movs	r3, #0
 801409e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80140a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3720      	adds	r7, #32
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	08019604 	.word	0x08019604
 80140b0:	08019754 	.word	0x08019754
 80140b4:	0801967c 	.word	0x0801967c
 80140b8:	08019804 	.word	0x08019804
 80140bc:	08019838 	.word	0x08019838

080140c0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b088      	sub	sp, #32
 80140c4:	af04      	add	r7, sp, #16
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80140dc:	2201      	movs	r2, #1
 80140de:	9203      	str	r2, [sp, #12]
 80140e0:	68ba      	ldr	r2, [r7, #8]
 80140e2:	9202      	str	r2, [sp, #8]
 80140e4:	4a06      	ldr	r2, [pc, #24]	; (8014100 <etharp_request_dst+0x40>)
 80140e6:	9201      	str	r2, [sp, #4]
 80140e8:	9300      	str	r3, [sp, #0]
 80140ea:	4603      	mov	r3, r0
 80140ec:	687a      	ldr	r2, [r7, #4]
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	f7ff ff5a 	bl	8013fa8 <etharp_raw>
 80140f4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3710      	adds	r7, #16
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	0801c4bc 	.word	0x0801c4bc

08014104 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801410e:	4a05      	ldr	r2, [pc, #20]	; (8014124 <etharp_request+0x20>)
 8014110:	6839      	ldr	r1, [r7, #0]
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7ff ffd4 	bl	80140c0 <etharp_request_dst>
 8014118:	4603      	mov	r3, r0
}
 801411a:	4618      	mov	r0, r3
 801411c:	3708      	adds	r7, #8
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	0801c4b4 	.word	0x0801c4b4

08014128 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08e      	sub	sp, #56	; 0x38
 801412c:	af04      	add	r7, sp, #16
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014132:	4b79      	ldr	r3, [pc, #484]	; (8014318 <icmp_input+0x1f0>)
 8014134:	689b      	ldr	r3, [r3, #8]
 8014136:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	f003 030f 	and.w	r3, r3, #15
 8014140:	b2db      	uxtb	r3, r3
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	b2db      	uxtb	r3, r3
 8014146:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801414a:	2b13      	cmp	r3, #19
 801414c:	f240 80cd 	bls.w	80142ea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	895b      	ldrh	r3, [r3, #10]
 8014154:	2b03      	cmp	r3, #3
 8014156:	f240 80ca 	bls.w	80142ee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014164:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014168:	2b00      	cmp	r3, #0
 801416a:	f000 80b7 	beq.w	80142dc <icmp_input+0x1b4>
 801416e:	2b08      	cmp	r3, #8
 8014170:	f040 80b7 	bne.w	80142e2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014174:	4b69      	ldr	r3, [pc, #420]	; (801431c <icmp_input+0x1f4>)
 8014176:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014178:	4b67      	ldr	r3, [pc, #412]	; (8014318 <icmp_input+0x1f0>)
 801417a:	695b      	ldr	r3, [r3, #20]
 801417c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014180:	2be0      	cmp	r3, #224	; 0xe0
 8014182:	f000 80bb 	beq.w	80142fc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014186:	4b64      	ldr	r3, [pc, #400]	; (8014318 <icmp_input+0x1f0>)
 8014188:	695b      	ldr	r3, [r3, #20]
 801418a:	4a63      	ldr	r2, [pc, #396]	; (8014318 <icmp_input+0x1f0>)
 801418c:	6812      	ldr	r2, [r2, #0]
 801418e:	4611      	mov	r1, r2
 8014190:	4618      	mov	r0, r3
 8014192:	f000 fc0b 	bl	80149ac <ip4_addr_isbroadcast_u32>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	f040 80b1 	bne.w	8014300 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	891b      	ldrh	r3, [r3, #8]
 80141a2:	2b07      	cmp	r3, #7
 80141a4:	f240 80a5 	bls.w	80142f2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80141a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141aa:	330e      	adds	r3, #14
 80141ac:	4619      	mov	r1, r3
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f7f6 ff40 	bl	800b034 <pbuf_add_header>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d04b      	beq.n	8014252 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	891a      	ldrh	r2, [r3, #8]
 80141be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141c0:	4413      	add	r3, r2
 80141c2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	891b      	ldrh	r3, [r3, #8]
 80141c8:	8b7a      	ldrh	r2, [r7, #26]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	f0c0 809a 	bcc.w	8014304 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80141d0:	8b7b      	ldrh	r3, [r7, #26]
 80141d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141d6:	4619      	mov	r1, r3
 80141d8:	200e      	movs	r0, #14
 80141da:	f7f6 fcdd 	bl	800ab98 <pbuf_alloc>
 80141de:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80141e0:	697b      	ldr	r3, [r7, #20]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f000 8090 	beq.w	8014308 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80141e8:	697b      	ldr	r3, [r7, #20]
 80141ea:	895b      	ldrh	r3, [r3, #10]
 80141ec:	461a      	mov	r2, r3
 80141ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141f0:	3308      	adds	r3, #8
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d203      	bcs.n	80141fe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80141f6:	6978      	ldr	r0, [r7, #20]
 80141f8:	f7f6 ffb2 	bl	800b160 <pbuf_free>
          goto icmperr;
 80141fc:	e085      	b.n	801430a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	685b      	ldr	r3, [r3, #4]
 8014202:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014206:	4618      	mov	r0, r3
 8014208:	f001 fb5a 	bl	80158c0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801420c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801420e:	4619      	mov	r1, r3
 8014210:	6978      	ldr	r0, [r7, #20]
 8014212:	f7f6 ff1f 	bl	800b054 <pbuf_remove_header>
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d009      	beq.n	8014230 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801421c:	4b40      	ldr	r3, [pc, #256]	; (8014320 <icmp_input+0x1f8>)
 801421e:	22b6      	movs	r2, #182	; 0xb6
 8014220:	4940      	ldr	r1, [pc, #256]	; (8014324 <icmp_input+0x1fc>)
 8014222:	4841      	ldr	r0, [pc, #260]	; (8014328 <icmp_input+0x200>)
 8014224:	f001 fb7c 	bl	8015920 <iprintf>
          pbuf_free(r);
 8014228:	6978      	ldr	r0, [r7, #20]
 801422a:	f7f6 ff99 	bl	800b160 <pbuf_free>
          goto icmperr;
 801422e:	e06c      	b.n	801430a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014230:	6879      	ldr	r1, [r7, #4]
 8014232:	6978      	ldr	r0, [r7, #20]
 8014234:	f7f7 f8bc 	bl	800b3b0 <pbuf_copy>
 8014238:	4603      	mov	r3, r0
 801423a:	2b00      	cmp	r3, #0
 801423c:	d003      	beq.n	8014246 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801423e:	6978      	ldr	r0, [r7, #20]
 8014240:	f7f6 ff8e 	bl	800b160 <pbuf_free>
          goto icmperr;
 8014244:	e061      	b.n	801430a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f7f6 ff8a 	bl	800b160 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	607b      	str	r3, [r7, #4]
 8014250:	e00f      	b.n	8014272 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014254:	330e      	adds	r3, #14
 8014256:	4619      	mov	r1, r3
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f7f6 fefb 	bl	800b054 <pbuf_remove_header>
 801425e:	4603      	mov	r3, r0
 8014260:	2b00      	cmp	r3, #0
 8014262:	d006      	beq.n	8014272 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014264:	4b2e      	ldr	r3, [pc, #184]	; (8014320 <icmp_input+0x1f8>)
 8014266:	22c7      	movs	r2, #199	; 0xc7
 8014268:	4930      	ldr	r1, [pc, #192]	; (801432c <icmp_input+0x204>)
 801426a:	482f      	ldr	r0, [pc, #188]	; (8014328 <icmp_input+0x200>)
 801426c:	f001 fb58 	bl	8015920 <iprintf>
          goto icmperr;
 8014270:	e04b      	b.n	801430a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801427a:	4619      	mov	r1, r3
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7f6 fed9 	bl	800b034 <pbuf_add_header>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d12b      	bne.n	80142e0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	685b      	ldr	r3, [r3, #4]
 801428c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	681a      	ldr	r2, [r3, #0]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014296:	4b20      	ldr	r3, [pc, #128]	; (8014318 <icmp_input+0x1f0>)
 8014298:	691a      	ldr	r2, [r3, #16]
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	2200      	movs	r2, #0
 80142a2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	2200      	movs	r2, #0
 80142a8:	709a      	strb	r2, [r3, #2]
 80142aa:	2200      	movs	r2, #0
 80142ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	22ff      	movs	r2, #255	; 0xff
 80142b2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2200      	movs	r2, #0
 80142b8:	729a      	strb	r2, [r3, #10]
 80142ba:	2200      	movs	r2, #0
 80142bc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	9302      	str	r3, [sp, #8]
 80142c2:	2301      	movs	r3, #1
 80142c4:	9301      	str	r3, [sp, #4]
 80142c6:	2300      	movs	r3, #0
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	23ff      	movs	r3, #255	; 0xff
 80142cc:	2200      	movs	r2, #0
 80142ce:	69f9      	ldr	r1, [r7, #28]
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f000 fa93 	bl	80147fc <ip4_output_if>
 80142d6:	4603      	mov	r3, r0
 80142d8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80142da:	e001      	b.n	80142e0 <icmp_input+0x1b8>
      break;
 80142dc:	bf00      	nop
 80142de:	e000      	b.n	80142e2 <icmp_input+0x1ba>
      break;
 80142e0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7f6 ff3c 	bl	800b160 <pbuf_free>
  return;
 80142e8:	e013      	b.n	8014312 <icmp_input+0x1ea>
    goto lenerr;
 80142ea:	bf00      	nop
 80142ec:	e002      	b.n	80142f4 <icmp_input+0x1cc>
    goto lenerr;
 80142ee:	bf00      	nop
 80142f0:	e000      	b.n	80142f4 <icmp_input+0x1cc>
        goto lenerr;
 80142f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7f6 ff33 	bl	800b160 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80142fa:	e00a      	b.n	8014312 <icmp_input+0x1ea>
        goto icmperr;
 80142fc:	bf00      	nop
 80142fe:	e004      	b.n	801430a <icmp_input+0x1e2>
        goto icmperr;
 8014300:	bf00      	nop
 8014302:	e002      	b.n	801430a <icmp_input+0x1e2>
          goto icmperr;
 8014304:	bf00      	nop
 8014306:	e000      	b.n	801430a <icmp_input+0x1e2>
          goto icmperr;
 8014308:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f7f6 ff28 	bl	800b160 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014310:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014312:	3728      	adds	r7, #40	; 0x28
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	200058e0 	.word	0x200058e0
 801431c:	200058f4 	.word	0x200058f4
 8014320:	0801987c 	.word	0x0801987c
 8014324:	080198b4 	.word	0x080198b4
 8014328:	080198ec 	.word	0x080198ec
 801432c:	08019914 	.word	0x08019914

08014330 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b082      	sub	sp, #8
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	460b      	mov	r3, r1
 801433a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801433c:	78fb      	ldrb	r3, [r7, #3]
 801433e:	461a      	mov	r2, r3
 8014340:	2103      	movs	r1, #3
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f000 f814 	bl	8014370 <icmp_send_response>
}
 8014348:	bf00      	nop
 801434a:	3708      	adds	r7, #8
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	460b      	mov	r3, r1
 801435a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801435c:	78fb      	ldrb	r3, [r7, #3]
 801435e:	461a      	mov	r2, r3
 8014360:	210b      	movs	r1, #11
 8014362:	6878      	ldr	r0, [r7, #4]
 8014364:	f000 f804 	bl	8014370 <icmp_send_response>
}
 8014368:	bf00      	nop
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b08c      	sub	sp, #48	; 0x30
 8014374:	af04      	add	r7, sp, #16
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	460b      	mov	r3, r1
 801437a:	70fb      	strb	r3, [r7, #3]
 801437c:	4613      	mov	r3, r2
 801437e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014380:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014384:	2124      	movs	r1, #36	; 0x24
 8014386:	2022      	movs	r0, #34	; 0x22
 8014388:	f7f6 fc06 	bl	800ab98 <pbuf_alloc>
 801438c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801438e:	69fb      	ldr	r3, [r7, #28]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d04c      	beq.n	801442e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014394:	69fb      	ldr	r3, [r7, #28]
 8014396:	895b      	ldrh	r3, [r3, #10]
 8014398:	2b23      	cmp	r3, #35	; 0x23
 801439a:	d806      	bhi.n	80143aa <icmp_send_response+0x3a>
 801439c:	4b26      	ldr	r3, [pc, #152]	; (8014438 <icmp_send_response+0xc8>)
 801439e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80143a2:	4926      	ldr	r1, [pc, #152]	; (801443c <icmp_send_response+0xcc>)
 80143a4:	4826      	ldr	r0, [pc, #152]	; (8014440 <icmp_send_response+0xd0>)
 80143a6:	f001 fabb 	bl	8015920 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	78fa      	ldrb	r2, [r7, #3]
 80143ba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	78ba      	ldrb	r2, [r7, #2]
 80143c0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	2200      	movs	r2, #0
 80143c6:	711a      	strb	r2, [r3, #4]
 80143c8:	2200      	movs	r2, #0
 80143ca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	2200      	movs	r2, #0
 80143d0:	719a      	strb	r2, [r3, #6]
 80143d2:	2200      	movs	r2, #0
 80143d4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80143d6:	69fb      	ldr	r3, [r7, #28]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	f103 0008 	add.w	r0, r3, #8
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	221c      	movs	r2, #28
 80143e4:	4619      	mov	r1, r3
 80143e6:	f001 fa6b 	bl	80158c0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80143ea:	69bb      	ldr	r3, [r7, #24]
 80143ec:	68db      	ldr	r3, [r3, #12]
 80143ee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80143f0:	f107 030c 	add.w	r3, r7, #12
 80143f4:	4618      	mov	r0, r3
 80143f6:	f000 f825 	bl	8014444 <ip4_route>
 80143fa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d011      	beq.n	8014426 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	2200      	movs	r2, #0
 8014406:	709a      	strb	r2, [r3, #2]
 8014408:	2200      	movs	r2, #0
 801440a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801440c:	f107 020c 	add.w	r2, r7, #12
 8014410:	693b      	ldr	r3, [r7, #16]
 8014412:	9302      	str	r3, [sp, #8]
 8014414:	2301      	movs	r3, #1
 8014416:	9301      	str	r3, [sp, #4]
 8014418:	2300      	movs	r3, #0
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	23ff      	movs	r3, #255	; 0xff
 801441e:	2100      	movs	r1, #0
 8014420:	69f8      	ldr	r0, [r7, #28]
 8014422:	f000 f9eb 	bl	80147fc <ip4_output_if>
  }
  pbuf_free(q);
 8014426:	69f8      	ldr	r0, [r7, #28]
 8014428:	f7f6 fe9a 	bl	800b160 <pbuf_free>
 801442c:	e000      	b.n	8014430 <icmp_send_response+0xc0>
    return;
 801442e:	bf00      	nop
}
 8014430:	3720      	adds	r7, #32
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	0801987c 	.word	0x0801987c
 801443c:	08019948 	.word	0x08019948
 8014440:	080198ec 	.word	0x080198ec

08014444 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014444:	b480      	push	{r7}
 8014446:	b085      	sub	sp, #20
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801444c:	4b33      	ldr	r3, [pc, #204]	; (801451c <ip4_route+0xd8>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	60fb      	str	r3, [r7, #12]
 8014452:	e036      	b.n	80144c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801445a:	f003 0301 	and.w	r3, r3, #1
 801445e:	b2db      	uxtb	r3, r3
 8014460:	2b00      	cmp	r3, #0
 8014462:	d02b      	beq.n	80144bc <ip4_route+0x78>
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801446a:	089b      	lsrs	r3, r3, #2
 801446c:	f003 0301 	and.w	r3, r3, #1
 8014470:	b2db      	uxtb	r3, r3
 8014472:	2b00      	cmp	r3, #0
 8014474:	d022      	beq.n	80144bc <ip4_route+0x78>
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	3304      	adds	r3, #4
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d01d      	beq.n	80144bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	3304      	adds	r3, #4
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	405a      	eors	r2, r3
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	3308      	adds	r3, #8
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	4013      	ands	r3, r2
 8014494:	2b00      	cmp	r3, #0
 8014496:	d101      	bne.n	801449c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	e038      	b.n	801450e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144a2:	f003 0302 	and.w	r3, r3, #2
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d108      	bne.n	80144bc <ip4_route+0x78>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681a      	ldr	r2, [r3, #0]
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	330c      	adds	r3, #12
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d101      	bne.n	80144bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	e028      	b.n	801450e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	60fb      	str	r3, [r7, #12]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1c5      	bne.n	8014454 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80144c8:	4b15      	ldr	r3, [pc, #84]	; (8014520 <ip4_route+0xdc>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d01a      	beq.n	8014506 <ip4_route+0xc2>
 80144d0:	4b13      	ldr	r3, [pc, #76]	; (8014520 <ip4_route+0xdc>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144d8:	f003 0301 	and.w	r3, r3, #1
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d012      	beq.n	8014506 <ip4_route+0xc2>
 80144e0:	4b0f      	ldr	r3, [pc, #60]	; (8014520 <ip4_route+0xdc>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144e8:	f003 0304 	and.w	r3, r3, #4
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d00a      	beq.n	8014506 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80144f0:	4b0b      	ldr	r3, [pc, #44]	; (8014520 <ip4_route+0xdc>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	3304      	adds	r3, #4
 80144f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d004      	beq.n	8014506 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	b2db      	uxtb	r3, r3
 8014502:	2b7f      	cmp	r3, #127	; 0x7f
 8014504:	d101      	bne.n	801450a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014506:	2300      	movs	r3, #0
 8014508:	e001      	b.n	801450e <ip4_route+0xca>
  }

  return netif_default;
 801450a:	4b05      	ldr	r3, [pc, #20]	; (8014520 <ip4_route+0xdc>)
 801450c:	681b      	ldr	r3, [r3, #0]
}
 801450e:	4618      	mov	r0, r3
 8014510:	3714      	adds	r7, #20
 8014512:	46bd      	mov	sp, r7
 8014514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	2000b024 	.word	0x2000b024
 8014520:	2000b028 	.word	0x2000b028

08014524 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014532:	f003 0301 	and.w	r3, r3, #1
 8014536:	b2db      	uxtb	r3, r3
 8014538:	2b00      	cmp	r3, #0
 801453a:	d016      	beq.n	801456a <ip4_input_accept+0x46>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	3304      	adds	r3, #4
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d011      	beq.n	801456a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014546:	4b0b      	ldr	r3, [pc, #44]	; (8014574 <ip4_input_accept+0x50>)
 8014548:	695a      	ldr	r2, [r3, #20]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	3304      	adds	r3, #4
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	429a      	cmp	r2, r3
 8014552:	d008      	beq.n	8014566 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014554:	4b07      	ldr	r3, [pc, #28]	; (8014574 <ip4_input_accept+0x50>)
 8014556:	695b      	ldr	r3, [r3, #20]
 8014558:	6879      	ldr	r1, [r7, #4]
 801455a:	4618      	mov	r0, r3
 801455c:	f000 fa26 	bl	80149ac <ip4_addr_isbroadcast_u32>
 8014560:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014562:	2b00      	cmp	r3, #0
 8014564:	d001      	beq.n	801456a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014566:	2301      	movs	r3, #1
 8014568:	e000      	b.n	801456c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801456a:	2300      	movs	r3, #0
}
 801456c:	4618      	mov	r0, r3
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}
 8014574:	200058e0 	.word	0x200058e0

08014578 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b088      	sub	sp, #32
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014582:	2301      	movs	r3, #1
 8014584:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	685b      	ldr	r3, [r3, #4]
 801458a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801458c:	69fb      	ldr	r3, [r7, #28]
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	091b      	lsrs	r3, r3, #4
 8014592:	b2db      	uxtb	r3, r3
 8014594:	2b04      	cmp	r3, #4
 8014596:	d004      	beq.n	80145a2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f7f6 fde1 	bl	800b160 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801459e:	2300      	movs	r3, #0
 80145a0:	e123      	b.n	80147ea <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	f003 030f 	and.w	r3, r3, #15
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	b2db      	uxtb	r3, r3
 80145b0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	885b      	ldrh	r3, [r3, #2]
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7f5 fa67 	bl	8009a8c <lwip_htons>
 80145be:	4603      	mov	r3, r0
 80145c0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	891b      	ldrh	r3, [r3, #8]
 80145c6:	8a3a      	ldrh	r2, [r7, #16]
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d204      	bcs.n	80145d6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80145cc:	8a3b      	ldrh	r3, [r7, #16]
 80145ce:	4619      	mov	r1, r3
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f7f6 fc3f 	bl	800ae54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	895b      	ldrh	r3, [r3, #10]
 80145da:	8a7a      	ldrh	r2, [r7, #18]
 80145dc:	429a      	cmp	r2, r3
 80145de:	d807      	bhi.n	80145f0 <ip4_input+0x78>
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	891b      	ldrh	r3, [r3, #8]
 80145e4:	8a3a      	ldrh	r2, [r7, #16]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d802      	bhi.n	80145f0 <ip4_input+0x78>
 80145ea:	8a7b      	ldrh	r3, [r7, #18]
 80145ec:	2b13      	cmp	r3, #19
 80145ee:	d804      	bhi.n	80145fa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f7f6 fdb5 	bl	800b160 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80145f6:	2300      	movs	r3, #0
 80145f8:	e0f7      	b.n	80147ea <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	691b      	ldr	r3, [r3, #16]
 80145fe:	4a7d      	ldr	r2, [pc, #500]	; (80147f4 <ip4_input+0x27c>)
 8014600:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	68db      	ldr	r3, [r3, #12]
 8014606:	4a7b      	ldr	r2, [pc, #492]	; (80147f4 <ip4_input+0x27c>)
 8014608:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801460a:	4b7a      	ldr	r3, [pc, #488]	; (80147f4 <ip4_input+0x27c>)
 801460c:	695b      	ldr	r3, [r3, #20]
 801460e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014612:	2be0      	cmp	r3, #224	; 0xe0
 8014614:	d112      	bne.n	801463c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801461c:	f003 0301 	and.w	r3, r3, #1
 8014620:	b2db      	uxtb	r3, r3
 8014622:	2b00      	cmp	r3, #0
 8014624:	d007      	beq.n	8014636 <ip4_input+0xbe>
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	3304      	adds	r3, #4
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d002      	beq.n	8014636 <ip4_input+0xbe>
      netif = inp;
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	61bb      	str	r3, [r7, #24]
 8014634:	e02a      	b.n	801468c <ip4_input+0x114>
    } else {
      netif = NULL;
 8014636:	2300      	movs	r3, #0
 8014638:	61bb      	str	r3, [r7, #24]
 801463a:	e027      	b.n	801468c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801463c:	6838      	ldr	r0, [r7, #0]
 801463e:	f7ff ff71 	bl	8014524 <ip4_input_accept>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	d002      	beq.n	801464e <ip4_input+0xd6>
      netif = inp;
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	61bb      	str	r3, [r7, #24]
 801464c:	e01e      	b.n	801468c <ip4_input+0x114>
    } else {
      netif = NULL;
 801464e:	2300      	movs	r3, #0
 8014650:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014652:	4b68      	ldr	r3, [pc, #416]	; (80147f4 <ip4_input+0x27c>)
 8014654:	695b      	ldr	r3, [r3, #20]
 8014656:	b2db      	uxtb	r3, r3
 8014658:	2b7f      	cmp	r3, #127	; 0x7f
 801465a:	d017      	beq.n	801468c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801465c:	4b66      	ldr	r3, [pc, #408]	; (80147f8 <ip4_input+0x280>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	61bb      	str	r3, [r7, #24]
 8014662:	e00e      	b.n	8014682 <ip4_input+0x10a>
          if (netif == inp) {
 8014664:	69ba      	ldr	r2, [r7, #24]
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	429a      	cmp	r2, r3
 801466a:	d006      	beq.n	801467a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801466c:	69b8      	ldr	r0, [r7, #24]
 801466e:	f7ff ff59 	bl	8014524 <ip4_input_accept>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d108      	bne.n	801468a <ip4_input+0x112>
 8014678:	e000      	b.n	801467c <ip4_input+0x104>
            continue;
 801467a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801467c:	69bb      	ldr	r3, [r7, #24]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	61bb      	str	r3, [r7, #24]
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d1ed      	bne.n	8014664 <ip4_input+0xec>
 8014688:	e000      	b.n	801468c <ip4_input+0x114>
            break;
 801468a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d111      	bne.n	80146b6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	7a5b      	ldrb	r3, [r3, #9]
 8014696:	2b11      	cmp	r3, #17
 8014698:	d10d      	bne.n	80146b6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801469a:	8a7b      	ldrh	r3, [r7, #18]
 801469c:	69fa      	ldr	r2, [r7, #28]
 801469e:	4413      	add	r3, r2
 80146a0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	885b      	ldrh	r3, [r3, #2]
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80146ac:	d103      	bne.n	80146b6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80146b2:	2300      	movs	r3, #0
 80146b4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d017      	beq.n	80146ec <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80146bc:	4b4d      	ldr	r3, [pc, #308]	; (80147f4 <ip4_input+0x27c>)
 80146be:	691b      	ldr	r3, [r3, #16]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d013      	beq.n	80146ec <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80146c4:	4b4b      	ldr	r3, [pc, #300]	; (80147f4 <ip4_input+0x27c>)
 80146c6:	691b      	ldr	r3, [r3, #16]
 80146c8:	6839      	ldr	r1, [r7, #0]
 80146ca:	4618      	mov	r0, r3
 80146cc:	f000 f96e 	bl	80149ac <ip4_addr_isbroadcast_u32>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d105      	bne.n	80146e2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80146d6:	4b47      	ldr	r3, [pc, #284]	; (80147f4 <ip4_input+0x27c>)
 80146d8:	691b      	ldr	r3, [r3, #16]
 80146da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80146de:	2be0      	cmp	r3, #224	; 0xe0
 80146e0:	d104      	bne.n	80146ec <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f7f6 fd3c 	bl	800b160 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80146e8:	2300      	movs	r3, #0
 80146ea:	e07e      	b.n	80147ea <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80146ec:	69bb      	ldr	r3, [r7, #24]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d104      	bne.n	80146fc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7f6 fd34 	bl	800b160 <pbuf_free>
    return ERR_OK;
 80146f8:	2300      	movs	r3, #0
 80146fa:	e076      	b.n	80147ea <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80146fc:	69fb      	ldr	r3, [r7, #28]
 80146fe:	88db      	ldrh	r3, [r3, #6]
 8014700:	b29b      	uxth	r3, r3
 8014702:	461a      	mov	r2, r3
 8014704:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014708:	4013      	ands	r3, r2
 801470a:	2b00      	cmp	r3, #0
 801470c:	d00b      	beq.n	8014726 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f000 fc92 	bl	8015038 <ip4_reass>
 8014714:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d101      	bne.n	8014720 <ip4_input+0x1a8>
      return ERR_OK;
 801471c:	2300      	movs	r3, #0
 801471e:	e064      	b.n	80147ea <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014726:	4a33      	ldr	r2, [pc, #204]	; (80147f4 <ip4_input+0x27c>)
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801472c:	4a31      	ldr	r2, [pc, #196]	; (80147f4 <ip4_input+0x27c>)
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014732:	4a30      	ldr	r2, [pc, #192]	; (80147f4 <ip4_input+0x27c>)
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014738:	69fb      	ldr	r3, [r7, #28]
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	f003 030f 	and.w	r3, r3, #15
 8014740:	b2db      	uxtb	r3, r3
 8014742:	009b      	lsls	r3, r3, #2
 8014744:	b2db      	uxtb	r3, r3
 8014746:	b29a      	uxth	r2, r3
 8014748:	4b2a      	ldr	r3, [pc, #168]	; (80147f4 <ip4_input+0x27c>)
 801474a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801474c:	8a7b      	ldrh	r3, [r7, #18]
 801474e:	4619      	mov	r1, r3
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f7f6 fc7f 	bl	800b054 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014756:	69fb      	ldr	r3, [r7, #28]
 8014758:	7a5b      	ldrb	r3, [r3, #9]
 801475a:	2b11      	cmp	r3, #17
 801475c:	d006      	beq.n	801476c <ip4_input+0x1f4>
 801475e:	2b11      	cmp	r3, #17
 8014760:	dc13      	bgt.n	801478a <ip4_input+0x212>
 8014762:	2b01      	cmp	r3, #1
 8014764:	d00c      	beq.n	8014780 <ip4_input+0x208>
 8014766:	2b06      	cmp	r3, #6
 8014768:	d005      	beq.n	8014776 <ip4_input+0x1fe>
 801476a:	e00e      	b.n	801478a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801476c:	6839      	ldr	r1, [r7, #0]
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f7fc fae8 	bl	8010d44 <udp_input>
        break;
 8014774:	e026      	b.n	80147c4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014776:	6839      	ldr	r1, [r7, #0]
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f7f8 fb29 	bl	800cdd0 <tcp_input>
        break;
 801477e:	e021      	b.n	80147c4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014780:	6839      	ldr	r1, [r7, #0]
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f7ff fcd0 	bl	8014128 <icmp_input>
        break;
 8014788:	e01c      	b.n	80147c4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801478a:	4b1a      	ldr	r3, [pc, #104]	; (80147f4 <ip4_input+0x27c>)
 801478c:	695b      	ldr	r3, [r3, #20]
 801478e:	69b9      	ldr	r1, [r7, #24]
 8014790:	4618      	mov	r0, r3
 8014792:	f000 f90b 	bl	80149ac <ip4_addr_isbroadcast_u32>
 8014796:	4603      	mov	r3, r0
 8014798:	2b00      	cmp	r3, #0
 801479a:	d10f      	bne.n	80147bc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801479c:	4b15      	ldr	r3, [pc, #84]	; (80147f4 <ip4_input+0x27c>)
 801479e:	695b      	ldr	r3, [r3, #20]
 80147a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80147a4:	2be0      	cmp	r3, #224	; 0xe0
 80147a6:	d009      	beq.n	80147bc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80147a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147ac:	4619      	mov	r1, r3
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f7f6 fcc3 	bl	800b13a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80147b4:	2102      	movs	r1, #2
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7ff fdba 	bl	8014330 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f7f6 fccf 	bl	800b160 <pbuf_free>
        break;
 80147c2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80147c4:	4b0b      	ldr	r3, [pc, #44]	; (80147f4 <ip4_input+0x27c>)
 80147c6:	2200      	movs	r2, #0
 80147c8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80147ca:	4b0a      	ldr	r3, [pc, #40]	; (80147f4 <ip4_input+0x27c>)
 80147cc:	2200      	movs	r2, #0
 80147ce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80147d0:	4b08      	ldr	r3, [pc, #32]	; (80147f4 <ip4_input+0x27c>)
 80147d2:	2200      	movs	r2, #0
 80147d4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80147d6:	4b07      	ldr	r3, [pc, #28]	; (80147f4 <ip4_input+0x27c>)
 80147d8:	2200      	movs	r2, #0
 80147da:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80147dc:	4b05      	ldr	r3, [pc, #20]	; (80147f4 <ip4_input+0x27c>)
 80147de:	2200      	movs	r2, #0
 80147e0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80147e2:	4b04      	ldr	r3, [pc, #16]	; (80147f4 <ip4_input+0x27c>)
 80147e4:	2200      	movs	r2, #0
 80147e6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80147e8:	2300      	movs	r3, #0
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3720      	adds	r7, #32
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	200058e0 	.word	0x200058e0
 80147f8:	2000b024 	.word	0x2000b024

080147fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b08a      	sub	sp, #40	; 0x28
 8014800:	af04      	add	r7, sp, #16
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
 8014808:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d009      	beq.n	8014828 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d003      	beq.n	8014822 <ip4_output_if+0x26>
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d102      	bne.n	8014828 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014824:	3304      	adds	r3, #4
 8014826:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014828:	78fa      	ldrb	r2, [r7, #3]
 801482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801482c:	9302      	str	r3, [sp, #8]
 801482e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014832:	9301      	str	r3, [sp, #4]
 8014834:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014838:	9300      	str	r3, [sp, #0]
 801483a:	4613      	mov	r3, r2
 801483c:	687a      	ldr	r2, [r7, #4]
 801483e:	6979      	ldr	r1, [r7, #20]
 8014840:	68f8      	ldr	r0, [r7, #12]
 8014842:	f000 f805 	bl	8014850 <ip4_output_if_src>
 8014846:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014848:	4618      	mov	r0, r3
 801484a:	3718      	adds	r7, #24
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}

08014850 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b088      	sub	sp, #32
 8014854:	af00      	add	r7, sp, #0
 8014856:	60f8      	str	r0, [r7, #12]
 8014858:	60b9      	str	r1, [r7, #8]
 801485a:	607a      	str	r2, [r7, #4]
 801485c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	7b9b      	ldrb	r3, [r3, #14]
 8014862:	2b01      	cmp	r3, #1
 8014864:	d006      	beq.n	8014874 <ip4_output_if_src+0x24>
 8014866:	4b4b      	ldr	r3, [pc, #300]	; (8014994 <ip4_output_if_src+0x144>)
 8014868:	f44f 7255 	mov.w	r2, #852	; 0x354
 801486c:	494a      	ldr	r1, [pc, #296]	; (8014998 <ip4_output_if_src+0x148>)
 801486e:	484b      	ldr	r0, [pc, #300]	; (801499c <ip4_output_if_src+0x14c>)
 8014870:	f001 f856 	bl	8015920 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d060      	beq.n	801493c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801487a:	2314      	movs	r3, #20
 801487c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801487e:	2114      	movs	r1, #20
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f7f6 fbd7 	bl	800b034 <pbuf_add_header>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d002      	beq.n	8014892 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801488c:	f06f 0301 	mvn.w	r3, #1
 8014890:	e07c      	b.n	801498c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	895b      	ldrh	r3, [r3, #10]
 801489c:	2b13      	cmp	r3, #19
 801489e:	d806      	bhi.n	80148ae <ip4_output_if_src+0x5e>
 80148a0:	4b3c      	ldr	r3, [pc, #240]	; (8014994 <ip4_output_if_src+0x144>)
 80148a2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80148a6:	493e      	ldr	r1, [pc, #248]	; (80149a0 <ip4_output_if_src+0x150>)
 80148a8:	483c      	ldr	r0, [pc, #240]	; (801499c <ip4_output_if_src+0x14c>)
 80148aa:	f001 f839 	bl	8015920 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80148ae:	69fb      	ldr	r3, [r7, #28]
 80148b0:	78fa      	ldrb	r2, [r7, #3]
 80148b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80148ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681a      	ldr	r2, [r3, #0]
 80148c0:	69fb      	ldr	r3, [r7, #28]
 80148c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80148c4:	8b7b      	ldrh	r3, [r7, #26]
 80148c6:	089b      	lsrs	r3, r3, #2
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	b2db      	uxtb	r3, r3
 80148cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148d0:	b2da      	uxtb	r2, r3
 80148d2:	69fb      	ldr	r3, [r7, #28]
 80148d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80148d6:	69fb      	ldr	r3, [r7, #28]
 80148d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80148dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	891b      	ldrh	r3, [r3, #8]
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7f5 f8d2 	bl	8009a8c <lwip_htons>
 80148e8:	4603      	mov	r3, r0
 80148ea:	461a      	mov	r2, r3
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80148f0:	69fb      	ldr	r3, [r7, #28]
 80148f2:	2200      	movs	r2, #0
 80148f4:	719a      	strb	r2, [r3, #6]
 80148f6:	2200      	movs	r2, #0
 80148f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80148fa:	4b2a      	ldr	r3, [pc, #168]	; (80149a4 <ip4_output_if_src+0x154>)
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	4618      	mov	r0, r3
 8014900:	f7f5 f8c4 	bl	8009a8c <lwip_htons>
 8014904:	4603      	mov	r3, r0
 8014906:	461a      	mov	r2, r3
 8014908:	69fb      	ldr	r3, [r7, #28]
 801490a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801490c:	4b25      	ldr	r3, [pc, #148]	; (80149a4 <ip4_output_if_src+0x154>)
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	3301      	adds	r3, #1
 8014912:	b29a      	uxth	r2, r3
 8014914:	4b23      	ldr	r3, [pc, #140]	; (80149a4 <ip4_output_if_src+0x154>)
 8014916:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d104      	bne.n	8014928 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801491e:	4b22      	ldr	r3, [pc, #136]	; (80149a8 <ip4_output_if_src+0x158>)
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	60da      	str	r2, [r3, #12]
 8014926:	e003      	b.n	8014930 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	2200      	movs	r2, #0
 8014934:	729a      	strb	r2, [r3, #10]
 8014936:	2200      	movs	r2, #0
 8014938:	72da      	strb	r2, [r3, #11]
 801493a:	e00f      	b.n	801495c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	895b      	ldrh	r3, [r3, #10]
 8014940:	2b13      	cmp	r3, #19
 8014942:	d802      	bhi.n	801494a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014944:	f06f 0301 	mvn.w	r3, #1
 8014948:	e020      	b.n	801498c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	691b      	ldr	r3, [r3, #16]
 8014954:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014956:	f107 0314 	add.w	r3, r7, #20
 801495a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014960:	2b00      	cmp	r3, #0
 8014962:	d00c      	beq.n	801497e <ip4_output_if_src+0x12e>
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	891a      	ldrh	r2, [r3, #8]
 8014968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801496c:	429a      	cmp	r2, r3
 801496e:	d906      	bls.n	801497e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014970:	687a      	ldr	r2, [r7, #4]
 8014972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014974:	68f8      	ldr	r0, [r7, #12]
 8014976:	f000 fd53 	bl	8015420 <ip4_frag>
 801497a:	4603      	mov	r3, r0
 801497c:	e006      	b.n	801498c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014980:	695b      	ldr	r3, [r3, #20]
 8014982:	687a      	ldr	r2, [r7, #4]
 8014984:	68f9      	ldr	r1, [r7, #12]
 8014986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014988:	4798      	blx	r3
 801498a:	4603      	mov	r3, r0
}
 801498c:	4618      	mov	r0, r3
 801498e:	3720      	adds	r7, #32
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	08019974 	.word	0x08019974
 8014998:	080199a8 	.word	0x080199a8
 801499c:	080199b4 	.word	0x080199b4
 80149a0:	080199dc 	.word	0x080199dc
 80149a4:	2000b1b6 	.word	0x2000b1b6
 80149a8:	0801c4ac 	.word	0x0801c4ac

080149ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80149ac:	b480      	push	{r7}
 80149ae:	b085      	sub	sp, #20
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149c0:	d002      	beq.n	80149c8 <ip4_addr_isbroadcast_u32+0x1c>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d101      	bne.n	80149cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80149c8:	2301      	movs	r3, #1
 80149ca:	e02a      	b.n	8014a22 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80149d2:	f003 0302 	and.w	r3, r3, #2
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d101      	bne.n	80149de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80149da:	2300      	movs	r3, #0
 80149dc:	e021      	b.n	8014a22 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	3304      	adds	r3, #4
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d101      	bne.n	80149ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80149ea:	2300      	movs	r3, #0
 80149ec:	e019      	b.n	8014a22 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80149ee:	68fa      	ldr	r2, [r7, #12]
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	3304      	adds	r3, #4
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	405a      	eors	r2, r3
 80149f8:	683b      	ldr	r3, [r7, #0]
 80149fa:	3308      	adds	r3, #8
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	4013      	ands	r3, r2
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d10d      	bne.n	8014a20 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	3308      	adds	r3, #8
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	43da      	mvns	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	3308      	adds	r3, #8
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d101      	bne.n	8014a20 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	e000      	b.n	8014a22 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014a20:	2300      	movs	r3, #0
  }
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3714      	adds	r7, #20
 8014a26:	46bd      	mov	sp, r7
 8014a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2c:	4770      	bx	lr
	...

08014a30 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b084      	sub	sp, #16
 8014a34:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014a36:	2300      	movs	r3, #0
 8014a38:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014a3a:	4b12      	ldr	r3, [pc, #72]	; (8014a84 <ip_reass_tmr+0x54>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014a40:	e018      	b.n	8014a74 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	7fdb      	ldrb	r3, [r3, #31]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d00b      	beq.n	8014a62 <ip_reass_tmr+0x32>
      r->timer--;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	7fdb      	ldrb	r3, [r3, #31]
 8014a4e:	3b01      	subs	r3, #1
 8014a50:	b2da      	uxtb	r2, r3
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	60fb      	str	r3, [r7, #12]
 8014a60:	e008      	b.n	8014a74 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014a6c:	68b9      	ldr	r1, [r7, #8]
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f000 f80a 	bl	8014a88 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d1e3      	bne.n	8014a42 <ip_reass_tmr+0x12>
    }
  }
}
 8014a7a:	bf00      	nop
 8014a7c:	bf00      	nop
 8014a7e:	3710      	adds	r7, #16
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}
 8014a84:	2000b1b8 	.word	0x2000b1b8

08014a88 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b088      	sub	sp, #32
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014a96:	683a      	ldr	r2, [r7, #0]
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d105      	bne.n	8014aaa <ip_reass_free_complete_datagram+0x22>
 8014a9e:	4b45      	ldr	r3, [pc, #276]	; (8014bb4 <ip_reass_free_complete_datagram+0x12c>)
 8014aa0:	22ab      	movs	r2, #171	; 0xab
 8014aa2:	4945      	ldr	r1, [pc, #276]	; (8014bb8 <ip_reass_free_complete_datagram+0x130>)
 8014aa4:	4845      	ldr	r0, [pc, #276]	; (8014bbc <ip_reass_free_complete_datagram+0x134>)
 8014aa6:	f000 ff3b 	bl	8015920 <iprintf>
  if (prev != NULL) {
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d00a      	beq.n	8014ac6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d005      	beq.n	8014ac6 <ip_reass_free_complete_datagram+0x3e>
 8014aba:	4b3e      	ldr	r3, [pc, #248]	; (8014bb4 <ip_reass_free_complete_datagram+0x12c>)
 8014abc:	22ad      	movs	r2, #173	; 0xad
 8014abe:	4940      	ldr	r1, [pc, #256]	; (8014bc0 <ip_reass_free_complete_datagram+0x138>)
 8014ac0:	483e      	ldr	r0, [pc, #248]	; (8014bbc <ip_reass_free_complete_datagram+0x134>)
 8014ac2:	f000 ff2d 	bl	8015920 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	889b      	ldrh	r3, [r3, #4]
 8014ad2:	b29b      	uxth	r3, r3
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d12a      	bne.n	8014b2e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	6858      	ldr	r0, [r3, #4]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	3308      	adds	r3, #8
 8014aee:	2214      	movs	r2, #20
 8014af0:	4619      	mov	r1, r3
 8014af2:	f000 fee5 	bl	80158c0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014af6:	2101      	movs	r1, #1
 8014af8:	69b8      	ldr	r0, [r7, #24]
 8014afa:	f7ff fc29 	bl	8014350 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014afe:	69b8      	ldr	r0, [r7, #24]
 8014b00:	f7f6 fbb6 	bl	800b270 <pbuf_clen>
 8014b04:	4603      	mov	r3, r0
 8014b06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014b08:	8bfa      	ldrh	r2, [r7, #30]
 8014b0a:	8a7b      	ldrh	r3, [r7, #18]
 8014b0c:	4413      	add	r3, r2
 8014b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b12:	db05      	blt.n	8014b20 <ip_reass_free_complete_datagram+0x98>
 8014b14:	4b27      	ldr	r3, [pc, #156]	; (8014bb4 <ip_reass_free_complete_datagram+0x12c>)
 8014b16:	22bc      	movs	r2, #188	; 0xbc
 8014b18:	492a      	ldr	r1, [pc, #168]	; (8014bc4 <ip_reass_free_complete_datagram+0x13c>)
 8014b1a:	4828      	ldr	r0, [pc, #160]	; (8014bbc <ip_reass_free_complete_datagram+0x134>)
 8014b1c:	f000 ff00 	bl	8015920 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014b20:	8bfa      	ldrh	r2, [r7, #30]
 8014b22:	8a7b      	ldrh	r3, [r7, #18]
 8014b24:	4413      	add	r3, r2
 8014b26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014b28:	69b8      	ldr	r0, [r7, #24]
 8014b2a:	f7f6 fb19 	bl	800b160 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014b34:	e01f      	b.n	8014b76 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	685b      	ldr	r3, [r3, #4]
 8014b3a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014b3c:	69bb      	ldr	r3, [r7, #24]
 8014b3e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014b46:	68f8      	ldr	r0, [r7, #12]
 8014b48:	f7f6 fb92 	bl	800b270 <pbuf_clen>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014b50:	8bfa      	ldrh	r2, [r7, #30]
 8014b52:	8a7b      	ldrh	r3, [r7, #18]
 8014b54:	4413      	add	r3, r2
 8014b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b5a:	db05      	blt.n	8014b68 <ip_reass_free_complete_datagram+0xe0>
 8014b5c:	4b15      	ldr	r3, [pc, #84]	; (8014bb4 <ip_reass_free_complete_datagram+0x12c>)
 8014b5e:	22cc      	movs	r2, #204	; 0xcc
 8014b60:	4918      	ldr	r1, [pc, #96]	; (8014bc4 <ip_reass_free_complete_datagram+0x13c>)
 8014b62:	4816      	ldr	r0, [pc, #88]	; (8014bbc <ip_reass_free_complete_datagram+0x134>)
 8014b64:	f000 fedc 	bl	8015920 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014b68:	8bfa      	ldrh	r2, [r7, #30]
 8014b6a:	8a7b      	ldrh	r3, [r7, #18]
 8014b6c:	4413      	add	r3, r2
 8014b6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014b70:	68f8      	ldr	r0, [r7, #12]
 8014b72:	f7f6 faf5 	bl	800b160 <pbuf_free>
  while (p != NULL) {
 8014b76:	69bb      	ldr	r3, [r7, #24]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d1dc      	bne.n	8014b36 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014b7c:	6839      	ldr	r1, [r7, #0]
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 f8c2 	bl	8014d08 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014b84:	4b10      	ldr	r3, [pc, #64]	; (8014bc8 <ip_reass_free_complete_datagram+0x140>)
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	8bfa      	ldrh	r2, [r7, #30]
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d905      	bls.n	8014b9a <ip_reass_free_complete_datagram+0x112>
 8014b8e:	4b09      	ldr	r3, [pc, #36]	; (8014bb4 <ip_reass_free_complete_datagram+0x12c>)
 8014b90:	22d2      	movs	r2, #210	; 0xd2
 8014b92:	490e      	ldr	r1, [pc, #56]	; (8014bcc <ip_reass_free_complete_datagram+0x144>)
 8014b94:	4809      	ldr	r0, [pc, #36]	; (8014bbc <ip_reass_free_complete_datagram+0x134>)
 8014b96:	f000 fec3 	bl	8015920 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014b9a:	4b0b      	ldr	r3, [pc, #44]	; (8014bc8 <ip_reass_free_complete_datagram+0x140>)
 8014b9c:	881a      	ldrh	r2, [r3, #0]
 8014b9e:	8bfb      	ldrh	r3, [r7, #30]
 8014ba0:	1ad3      	subs	r3, r2, r3
 8014ba2:	b29a      	uxth	r2, r3
 8014ba4:	4b08      	ldr	r3, [pc, #32]	; (8014bc8 <ip_reass_free_complete_datagram+0x140>)
 8014ba6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014ba8:	8bfb      	ldrh	r3, [r7, #30]
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3720      	adds	r7, #32
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	08019a0c 	.word	0x08019a0c
 8014bb8:	08019a48 	.word	0x08019a48
 8014bbc:	08019a54 	.word	0x08019a54
 8014bc0:	08019a7c 	.word	0x08019a7c
 8014bc4:	08019a90 	.word	0x08019a90
 8014bc8:	2000b1bc 	.word	0x2000b1bc
 8014bcc:	08019ab0 	.word	0x08019ab0

08014bd0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b08a      	sub	sp, #40	; 0x28
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014bde:	2300      	movs	r3, #0
 8014be0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014be2:	2300      	movs	r3, #0
 8014be4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014be6:	2300      	movs	r3, #0
 8014be8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014bea:	2300      	movs	r3, #0
 8014bec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014bee:	4b28      	ldr	r3, [pc, #160]	; (8014c90 <ip_reass_remove_oldest_datagram+0xc0>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014bf4:	e030      	b.n	8014c58 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf8:	695a      	ldr	r2, [r3, #20]
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	429a      	cmp	r2, r3
 8014c00:	d10c      	bne.n	8014c1c <ip_reass_remove_oldest_datagram+0x4c>
 8014c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c04:	699a      	ldr	r2, [r3, #24]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	691b      	ldr	r3, [r3, #16]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d106      	bne.n	8014c1c <ip_reass_remove_oldest_datagram+0x4c>
 8014c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c10:	899a      	ldrh	r2, [r3, #12]
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	889b      	ldrh	r3, [r3, #4]
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	d014      	beq.n	8014c46 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	3301      	adds	r3, #1
 8014c20:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014c22:	6a3b      	ldr	r3, [r7, #32]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d104      	bne.n	8014c32 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	61bb      	str	r3, [r7, #24]
 8014c30:	e009      	b.n	8014c46 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c34:	7fda      	ldrb	r2, [r3, #31]
 8014c36:	6a3b      	ldr	r3, [r7, #32]
 8014c38:	7fdb      	ldrb	r3, [r3, #31]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d803      	bhi.n	8014c46 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c40:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d001      	beq.n	8014c52 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c50:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d1cb      	bne.n	8014bf6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014c5e:	6a3b      	ldr	r3, [r7, #32]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d008      	beq.n	8014c76 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014c64:	69b9      	ldr	r1, [r7, #24]
 8014c66:	6a38      	ldr	r0, [r7, #32]
 8014c68:	f7ff ff0e 	bl	8014a88 <ip_reass_free_complete_datagram>
 8014c6c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014c6e:	697a      	ldr	r2, [r7, #20]
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	4413      	add	r3, r2
 8014c74:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014c76:	697a      	ldr	r2, [r7, #20]
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	da02      	bge.n	8014c84 <ip_reass_remove_oldest_datagram+0xb4>
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	dcac      	bgt.n	8014bde <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014c84:	697b      	ldr	r3, [r7, #20]
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3728      	adds	r7, #40	; 0x28
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	2000b1b8 	.word	0x2000b1b8

08014c94 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b084      	sub	sp, #16
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014c9e:	2004      	movs	r0, #4
 8014ca0:	f7f5 fb6c 	bl	800a37c <memp_malloc>
 8014ca4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d110      	bne.n	8014cce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014cac:	6839      	ldr	r1, [r7, #0]
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f7ff ff8e 	bl	8014bd0 <ip_reass_remove_oldest_datagram>
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	4293      	cmp	r3, r2
 8014cba:	dc03      	bgt.n	8014cc4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014cbc:	2004      	movs	r0, #4
 8014cbe:	f7f5 fb5d 	bl	800a37c <memp_malloc>
 8014cc2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d101      	bne.n	8014cce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014cca:	2300      	movs	r3, #0
 8014ccc:	e016      	b.n	8014cfc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014cce:	2220      	movs	r2, #32
 8014cd0:	2100      	movs	r1, #0
 8014cd2:	68f8      	ldr	r0, [r7, #12]
 8014cd4:	f000 fe1c 	bl	8015910 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	220f      	movs	r2, #15
 8014cdc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014cde:	4b09      	ldr	r3, [pc, #36]	; (8014d04 <ip_reass_enqueue_new_datagram+0x70>)
 8014ce0:	681a      	ldr	r2, [r3, #0]
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014ce6:	4a07      	ldr	r2, [pc, #28]	; (8014d04 <ip_reass_enqueue_new_datagram+0x70>)
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	3308      	adds	r3, #8
 8014cf0:	2214      	movs	r2, #20
 8014cf2:	6879      	ldr	r1, [r7, #4]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f000 fde3 	bl	80158c0 <memcpy>
  return ipr;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3710      	adds	r7, #16
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}
 8014d04:	2000b1b8 	.word	0x2000b1b8

08014d08 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014d12:	4b10      	ldr	r3, [pc, #64]	; (8014d54 <ip_reass_dequeue_datagram+0x4c>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d104      	bne.n	8014d26 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	4a0c      	ldr	r2, [pc, #48]	; (8014d54 <ip_reass_dequeue_datagram+0x4c>)
 8014d22:	6013      	str	r3, [r2, #0]
 8014d24:	e00d      	b.n	8014d42 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d106      	bne.n	8014d3a <ip_reass_dequeue_datagram+0x32>
 8014d2c:	4b0a      	ldr	r3, [pc, #40]	; (8014d58 <ip_reass_dequeue_datagram+0x50>)
 8014d2e:	f240 1245 	movw	r2, #325	; 0x145
 8014d32:	490a      	ldr	r1, [pc, #40]	; (8014d5c <ip_reass_dequeue_datagram+0x54>)
 8014d34:	480a      	ldr	r0, [pc, #40]	; (8014d60 <ip_reass_dequeue_datagram+0x58>)
 8014d36:	f000 fdf3 	bl	8015920 <iprintf>
    prev->next = ipr->next;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681a      	ldr	r2, [r3, #0]
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014d42:	6879      	ldr	r1, [r7, #4]
 8014d44:	2004      	movs	r0, #4
 8014d46:	f7f5 fb89 	bl	800a45c <memp_free>
}
 8014d4a:	bf00      	nop
 8014d4c:	3708      	adds	r7, #8
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	2000b1b8 	.word	0x2000b1b8
 8014d58:	08019a0c 	.word	0x08019a0c
 8014d5c:	08019ad4 	.word	0x08019ad4
 8014d60:	08019a54 	.word	0x08019a54

08014d64 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b08c      	sub	sp, #48	; 0x30
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014d70:	2300      	movs	r3, #0
 8014d72:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014d74:	2301      	movs	r3, #1
 8014d76:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014d7e:	69fb      	ldr	r3, [r7, #28]
 8014d80:	885b      	ldrh	r3, [r3, #2]
 8014d82:	b29b      	uxth	r3, r3
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7f4 fe81 	bl	8009a8c <lwip_htons>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	781b      	ldrb	r3, [r3, #0]
 8014d92:	f003 030f 	and.w	r3, r3, #15
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	009b      	lsls	r3, r3, #2
 8014d9a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014d9c:	7e7b      	ldrb	r3, [r7, #25]
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	8b7a      	ldrh	r2, [r7, #26]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d202      	bcs.n	8014dac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014da6:	f04f 33ff 	mov.w	r3, #4294967295
 8014daa:	e135      	b.n	8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014dac:	7e7b      	ldrb	r3, [r7, #25]
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	8b7a      	ldrh	r2, [r7, #26]
 8014db2:	1ad3      	subs	r3, r2, r3
 8014db4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	88db      	ldrh	r3, [r3, #6]
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7f4 fe65 	bl	8009a8c <lwip_htons>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	00db      	lsls	r3, r3, #3
 8014dcc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	701a      	strb	r2, [r3, #0]
 8014dda:	2200      	movs	r2, #0
 8014ddc:	705a      	strb	r2, [r3, #1]
 8014dde:	2200      	movs	r2, #0
 8014de0:	709a      	strb	r2, [r3, #2]
 8014de2:	2200      	movs	r2, #0
 8014de4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de8:	8afa      	ldrh	r2, [r7, #22]
 8014dea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014dec:	8afa      	ldrh	r2, [r7, #22]
 8014dee:	8b7b      	ldrh	r3, [r7, #26]
 8014df0:	4413      	add	r3, r2
 8014df2:	b29a      	uxth	r2, r3
 8014df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dfa:	88db      	ldrh	r3, [r3, #6]
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	8afa      	ldrh	r2, [r7, #22]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d902      	bls.n	8014e0a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e04:	f04f 33ff 	mov.w	r3, #4294967295
 8014e08:	e106      	b.n	8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8014e10:	e068      	b.n	8014ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e1a:	889b      	ldrh	r3, [r3, #4]
 8014e1c:	b29a      	uxth	r2, r3
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	889b      	ldrh	r3, [r3, #4]
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d235      	bcs.n	8014e94 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e2c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d020      	beq.n	8014e76 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e36:	889b      	ldrh	r3, [r3, #4]
 8014e38:	b29a      	uxth	r2, r3
 8014e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3c:	88db      	ldrh	r3, [r3, #6]
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d307      	bcc.n	8014e54 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e46:	88db      	ldrh	r3, [r3, #6]
 8014e48:	b29a      	uxth	r2, r3
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	889b      	ldrh	r3, [r3, #4]
 8014e4e:	b29b      	uxth	r3, r3
 8014e50:	429a      	cmp	r2, r3
 8014e52:	d902      	bls.n	8014e5a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e54:	f04f 33ff 	mov.w	r3, #4294967295
 8014e58:	e0de      	b.n	8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e5c:	68ba      	ldr	r2, [r7, #8]
 8014e5e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e62:	88db      	ldrh	r3, [r3, #6]
 8014e64:	b29a      	uxth	r2, r3
 8014e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e68:	889b      	ldrh	r3, [r3, #4]
 8014e6a:	b29b      	uxth	r3, r3
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d03d      	beq.n	8014eec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014e70:	2300      	movs	r3, #0
 8014e72:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014e74:	e03a      	b.n	8014eec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e78:	88db      	ldrh	r3, [r3, #6]
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	693b      	ldr	r3, [r7, #16]
 8014e7e:	889b      	ldrh	r3, [r3, #4]
 8014e80:	b29b      	uxth	r3, r3
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d902      	bls.n	8014e8c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014e86:	f04f 33ff 	mov.w	r3, #4294967295
 8014e8a:	e0c5      	b.n	8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	68ba      	ldr	r2, [r7, #8]
 8014e90:	605a      	str	r2, [r3, #4]
      break;
 8014e92:	e02b      	b.n	8014eec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e96:	889b      	ldrh	r3, [r3, #4]
 8014e98:	b29a      	uxth	r2, r3
 8014e9a:	693b      	ldr	r3, [r7, #16]
 8014e9c:	889b      	ldrh	r3, [r3, #4]
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d102      	bne.n	8014eaa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ea8:	e0b6      	b.n	8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eac:	889b      	ldrh	r3, [r3, #4]
 8014eae:	b29a      	uxth	r2, r3
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	88db      	ldrh	r3, [r3, #6]
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d202      	bcs.n	8014ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014eba:	f04f 33ff 	mov.w	r3, #4294967295
 8014ebe:	e0ab      	b.n	8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d009      	beq.n	8014eda <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec8:	88db      	ldrh	r3, [r3, #6]
 8014eca:	b29a      	uxth	r2, r3
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	889b      	ldrh	r3, [r3, #4]
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d001      	beq.n	8014eda <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d193      	bne.n	8014e12 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014eea:	e000      	b.n	8014eee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014eec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d12d      	bne.n	8014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d01c      	beq.n	8014f34 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014efc:	88db      	ldrh	r3, [r3, #6]
 8014efe:	b29a      	uxth	r2, r3
 8014f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f02:	889b      	ldrh	r3, [r3, #4]
 8014f04:	b29b      	uxth	r3, r3
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d906      	bls.n	8014f18 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014f0a:	4b45      	ldr	r3, [pc, #276]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f0c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014f10:	4944      	ldr	r1, [pc, #272]	; (8015024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014f12:	4845      	ldr	r0, [pc, #276]	; (8015028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f14:	f000 fd04 	bl	8015920 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f1a:	68ba      	ldr	r2, [r7, #8]
 8014f1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f20:	88db      	ldrh	r3, [r3, #6]
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f26:	889b      	ldrh	r3, [r3, #4]
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d010      	beq.n	8014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	623b      	str	r3, [r7, #32]
 8014f32:	e00d      	b.n	8014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	685b      	ldr	r3, [r3, #4]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d006      	beq.n	8014f4a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014f3c:	4b38      	ldr	r3, [pc, #224]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f3e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014f42:	493a      	ldr	r1, [pc, #232]	; (801502c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014f44:	4838      	ldr	r0, [pc, #224]	; (8015028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f46:	f000 fceb 	bl	8015920 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	68ba      	ldr	r2, [r7, #8]
 8014f4e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d105      	bne.n	8014f62 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	7f9b      	ldrb	r3, [r3, #30]
 8014f5a:	f003 0301 	and.w	r3, r3, #1
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d059      	beq.n	8015016 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014f62:	6a3b      	ldr	r3, [r7, #32]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d04f      	beq.n	8015008 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	685b      	ldr	r3, [r3, #4]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d006      	beq.n	8014f7e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	685b      	ldr	r3, [r3, #4]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	889b      	ldrh	r3, [r3, #4]
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d002      	beq.n	8014f84 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	623b      	str	r3, [r7, #32]
 8014f82:	e041      	b.n	8015008 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f86:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014f8e:	e012      	b.n	8014fb6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f98:	88db      	ldrh	r3, [r3, #6]
 8014f9a:	b29a      	uxth	r2, r3
 8014f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f9e:	889b      	ldrh	r3, [r3, #4]
 8014fa0:	b29b      	uxth	r3, r3
 8014fa2:	429a      	cmp	r2, r3
 8014fa4:	d002      	beq.n	8014fac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	623b      	str	r3, [r7, #32]
            break;
 8014faa:	e007      	b.n	8014fbc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d1e9      	bne.n	8014f90 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014fbc:	6a3b      	ldr	r3, [r7, #32]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d022      	beq.n	8015008 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	685b      	ldr	r3, [r3, #4]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d106      	bne.n	8014fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014fca:	4b15      	ldr	r3, [pc, #84]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014fcc:	f240 12df 	movw	r2, #479	; 0x1df
 8014fd0:	4917      	ldr	r1, [pc, #92]	; (8015030 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014fd2:	4815      	ldr	r0, [pc, #84]	; (8015028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014fd4:	f000 fca4 	bl	8015920 <iprintf>
          LWIP_ASSERT("sanity check",
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	685b      	ldr	r3, [r3, #4]
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d106      	bne.n	8014ff2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014fe4:	4b0e      	ldr	r3, [pc, #56]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014fe6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014fea:	4911      	ldr	r1, [pc, #68]	; (8015030 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014fec:	480e      	ldr	r0, [pc, #56]	; (8015028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014fee:	f000 fc97 	bl	8015920 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d006      	beq.n	8015008 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014ffa:	4b09      	ldr	r3, [pc, #36]	; (8015020 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ffc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015000:	490c      	ldr	r1, [pc, #48]	; (8015034 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015002:	4809      	ldr	r0, [pc, #36]	; (8015028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015004:	f000 fc8c 	bl	8015920 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015008:	6a3b      	ldr	r3, [r7, #32]
 801500a:	2b00      	cmp	r3, #0
 801500c:	bf14      	ite	ne
 801500e:	2301      	movne	r3, #1
 8015010:	2300      	moveq	r3, #0
 8015012:	b2db      	uxtb	r3, r3
 8015014:	e000      	b.n	8015018 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015016:	2300      	movs	r3, #0
}
 8015018:	4618      	mov	r0, r3
 801501a:	3730      	adds	r7, #48	; 0x30
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}
 8015020:	08019a0c 	.word	0x08019a0c
 8015024:	08019af0 	.word	0x08019af0
 8015028:	08019a54 	.word	0x08019a54
 801502c:	08019b10 	.word	0x08019b10
 8015030:	08019b48 	.word	0x08019b48
 8015034:	08019b58 	.word	0x08019b58

08015038 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b08e      	sub	sp, #56	; 0x38
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	f003 030f 	and.w	r3, r3, #15
 801504e:	b2db      	uxtb	r3, r3
 8015050:	009b      	lsls	r3, r3, #2
 8015052:	b2db      	uxtb	r3, r3
 8015054:	2b14      	cmp	r3, #20
 8015056:	f040 8171 	bne.w	801533c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801505c:	88db      	ldrh	r3, [r3, #6]
 801505e:	b29b      	uxth	r3, r3
 8015060:	4618      	mov	r0, r3
 8015062:	f7f4 fd13 	bl	8009a8c <lwip_htons>
 8015066:	4603      	mov	r3, r0
 8015068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801506c:	b29b      	uxth	r3, r3
 801506e:	00db      	lsls	r3, r3, #3
 8015070:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015074:	885b      	ldrh	r3, [r3, #2]
 8015076:	b29b      	uxth	r3, r3
 8015078:	4618      	mov	r0, r3
 801507a:	f7f4 fd07 	bl	8009a8c <lwip_htons>
 801507e:	4603      	mov	r3, r0
 8015080:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	f003 030f 	and.w	r3, r3, #15
 801508a:	b2db      	uxtb	r3, r3
 801508c:	009b      	lsls	r3, r3, #2
 801508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015096:	b29b      	uxth	r3, r3
 8015098:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801509a:	429a      	cmp	r2, r3
 801509c:	f0c0 8150 	bcc.w	8015340 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80150a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80150a4:	b29b      	uxth	r3, r3
 80150a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80150a8:	1ad3      	subs	r3, r2, r3
 80150aa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f7f6 f8df 	bl	800b270 <pbuf_clen>
 80150b2:	4603      	mov	r3, r0
 80150b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80150b6:	4b8c      	ldr	r3, [pc, #560]	; (80152e8 <ip4_reass+0x2b0>)
 80150b8:	881b      	ldrh	r3, [r3, #0]
 80150ba:	461a      	mov	r2, r3
 80150bc:	8c3b      	ldrh	r3, [r7, #32]
 80150be:	4413      	add	r3, r2
 80150c0:	2b0a      	cmp	r3, #10
 80150c2:	dd10      	ble.n	80150e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80150c4:	8c3b      	ldrh	r3, [r7, #32]
 80150c6:	4619      	mov	r1, r3
 80150c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150ca:	f7ff fd81 	bl	8014bd0 <ip_reass_remove_oldest_datagram>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	f000 8137 	beq.w	8015344 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80150d6:	4b84      	ldr	r3, [pc, #528]	; (80152e8 <ip4_reass+0x2b0>)
 80150d8:	881b      	ldrh	r3, [r3, #0]
 80150da:	461a      	mov	r2, r3
 80150dc:	8c3b      	ldrh	r3, [r7, #32]
 80150de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80150e0:	2b0a      	cmp	r3, #10
 80150e2:	f300 812f 	bgt.w	8015344 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80150e6:	4b81      	ldr	r3, [pc, #516]	; (80152ec <ip4_reass+0x2b4>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	633b      	str	r3, [r7, #48]	; 0x30
 80150ec:	e015      	b.n	801511a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80150ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f0:	695a      	ldr	r2, [r3, #20]
 80150f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d10c      	bne.n	8015114 <ip4_reass+0xdc>
 80150fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fc:	699a      	ldr	r2, [r3, #24]
 80150fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015100:	691b      	ldr	r3, [r3, #16]
 8015102:	429a      	cmp	r2, r3
 8015104:	d106      	bne.n	8015114 <ip4_reass+0xdc>
 8015106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015108:	899a      	ldrh	r2, [r3, #12]
 801510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510c:	889b      	ldrh	r3, [r3, #4]
 801510e:	b29b      	uxth	r3, r3
 8015110:	429a      	cmp	r2, r3
 8015112:	d006      	beq.n	8015122 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	633b      	str	r3, [r7, #48]	; 0x30
 801511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511c:	2b00      	cmp	r3, #0
 801511e:	d1e6      	bne.n	80150ee <ip4_reass+0xb6>
 8015120:	e000      	b.n	8015124 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015122:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015126:	2b00      	cmp	r3, #0
 8015128:	d109      	bne.n	801513e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801512a:	8c3b      	ldrh	r3, [r7, #32]
 801512c:	4619      	mov	r1, r3
 801512e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015130:	f7ff fdb0 	bl	8014c94 <ip_reass_enqueue_new_datagram>
 8015134:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015138:	2b00      	cmp	r3, #0
 801513a:	d11c      	bne.n	8015176 <ip4_reass+0x13e>
      goto nullreturn;
 801513c:	e105      	b.n	801534a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015140:	88db      	ldrh	r3, [r3, #6]
 8015142:	b29b      	uxth	r3, r3
 8015144:	4618      	mov	r0, r3
 8015146:	f7f4 fca1 	bl	8009a8c <lwip_htons>
 801514a:	4603      	mov	r3, r0
 801514c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015150:	2b00      	cmp	r3, #0
 8015152:	d110      	bne.n	8015176 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015156:	89db      	ldrh	r3, [r3, #14]
 8015158:	4618      	mov	r0, r3
 801515a:	f7f4 fc97 	bl	8009a8c <lwip_htons>
 801515e:	4603      	mov	r3, r0
 8015160:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015164:	2b00      	cmp	r3, #0
 8015166:	d006      	beq.n	8015176 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801516a:	3308      	adds	r3, #8
 801516c:	2214      	movs	r2, #20
 801516e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015170:	4618      	mov	r0, r3
 8015172:	f000 fba5 	bl	80158c0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015178:	88db      	ldrh	r3, [r3, #6]
 801517a:	b29b      	uxth	r3, r3
 801517c:	f003 0320 	and.w	r3, r3, #32
 8015180:	2b00      	cmp	r3, #0
 8015182:	bf0c      	ite	eq
 8015184:	2301      	moveq	r3, #1
 8015186:	2300      	movne	r3, #0
 8015188:	b2db      	uxtb	r3, r3
 801518a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801518c:	69fb      	ldr	r3, [r7, #28]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d00e      	beq.n	80151b0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015192:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015196:	4413      	add	r3, r2
 8015198:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801519a:	8b7a      	ldrh	r2, [r7, #26]
 801519c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801519e:	429a      	cmp	r2, r3
 80151a0:	f0c0 80a0 	bcc.w	80152e4 <ip4_reass+0x2ac>
 80151a4:	8b7b      	ldrh	r3, [r7, #26]
 80151a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80151aa:	4293      	cmp	r3, r2
 80151ac:	f200 809a 	bhi.w	80152e4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80151b0:	69fa      	ldr	r2, [r7, #28]
 80151b2:	6879      	ldr	r1, [r7, #4]
 80151b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151b6:	f7ff fdd5 	bl	8014d64 <ip_reass_chain_frag_into_datagram_and_validate>
 80151ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151c2:	f000 809b 	beq.w	80152fc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80151c6:	4b48      	ldr	r3, [pc, #288]	; (80152e8 <ip4_reass+0x2b0>)
 80151c8:	881a      	ldrh	r2, [r3, #0]
 80151ca:	8c3b      	ldrh	r3, [r7, #32]
 80151cc:	4413      	add	r3, r2
 80151ce:	b29a      	uxth	r2, r3
 80151d0:	4b45      	ldr	r3, [pc, #276]	; (80152e8 <ip4_reass+0x2b0>)
 80151d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80151d4:	69fb      	ldr	r3, [r7, #28]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00d      	beq.n	80151f6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80151da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80151dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80151de:	4413      	add	r3, r2
 80151e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80151e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e4:	8a7a      	ldrh	r2, [r7, #18]
 80151e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80151e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ea:	7f9b      	ldrb	r3, [r3, #30]
 80151ec:	f043 0301 	orr.w	r3, r3, #1
 80151f0:	b2da      	uxtb	r2, r3
 80151f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d171      	bne.n	80152e0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80151fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fe:	8b9b      	ldrh	r3, [r3, #28]
 8015200:	3314      	adds	r3, #20
 8015202:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015206:	685b      	ldr	r3, [r3, #4]
 8015208:	685b      	ldr	r3, [r3, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015218:	3308      	adds	r3, #8
 801521a:	2214      	movs	r2, #20
 801521c:	4619      	mov	r1, r3
 801521e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015220:	f000 fb4e 	bl	80158c0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015224:	8a3b      	ldrh	r3, [r7, #16]
 8015226:	4618      	mov	r0, r3
 8015228:	f7f4 fc30 	bl	8009a8c <lwip_htons>
 801522c:	4603      	mov	r3, r0
 801522e:	461a      	mov	r2, r3
 8015230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015232:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015236:	2200      	movs	r2, #0
 8015238:	719a      	strb	r2, [r3, #6]
 801523a:	2200      	movs	r2, #0
 801523c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015240:	2200      	movs	r2, #0
 8015242:	729a      	strb	r2, [r3, #10]
 8015244:	2200      	movs	r2, #0
 8015246:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801524e:	e00d      	b.n	801526c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015256:	2114      	movs	r1, #20
 8015258:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801525a:	f7f5 fefb 	bl	800b054 <pbuf_remove_header>
      pbuf_cat(p, r);
 801525e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	f7f6 f83f 	bl	800b2e4 <pbuf_cat>
      r = iprh->next_pbuf;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801526c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801526e:	2b00      	cmp	r3, #0
 8015270:	d1ee      	bne.n	8015250 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015272:	4b1e      	ldr	r3, [pc, #120]	; (80152ec <ip4_reass+0x2b4>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015278:	429a      	cmp	r2, r3
 801527a:	d102      	bne.n	8015282 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801527c:	2300      	movs	r3, #0
 801527e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015280:	e010      	b.n	80152a4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015282:	4b1a      	ldr	r3, [pc, #104]	; (80152ec <ip4_reass+0x2b4>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015288:	e007      	b.n	801529a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015290:	429a      	cmp	r2, r3
 8015292:	d006      	beq.n	80152a2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	62fb      	str	r3, [r7, #44]	; 0x2c
 801529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801529c:	2b00      	cmp	r3, #0
 801529e:	d1f4      	bne.n	801528a <ip4_reass+0x252>
 80152a0:	e000      	b.n	80152a4 <ip4_reass+0x26c>
          break;
 80152a2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80152a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80152a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152a8:	f7ff fd2e 	bl	8014d08 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f7f5 ffdf 	bl	800b270 <pbuf_clen>
 80152b2:	4603      	mov	r3, r0
 80152b4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80152b6:	4b0c      	ldr	r3, [pc, #48]	; (80152e8 <ip4_reass+0x2b0>)
 80152b8:	881b      	ldrh	r3, [r3, #0]
 80152ba:	8c3a      	ldrh	r2, [r7, #32]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d906      	bls.n	80152ce <ip4_reass+0x296>
 80152c0:	4b0b      	ldr	r3, [pc, #44]	; (80152f0 <ip4_reass+0x2b8>)
 80152c2:	f240 229b 	movw	r2, #667	; 0x29b
 80152c6:	490b      	ldr	r1, [pc, #44]	; (80152f4 <ip4_reass+0x2bc>)
 80152c8:	480b      	ldr	r0, [pc, #44]	; (80152f8 <ip4_reass+0x2c0>)
 80152ca:	f000 fb29 	bl	8015920 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80152ce:	4b06      	ldr	r3, [pc, #24]	; (80152e8 <ip4_reass+0x2b0>)
 80152d0:	881a      	ldrh	r2, [r3, #0]
 80152d2:	8c3b      	ldrh	r3, [r7, #32]
 80152d4:	1ad3      	subs	r3, r2, r3
 80152d6:	b29a      	uxth	r2, r3
 80152d8:	4b03      	ldr	r3, [pc, #12]	; (80152e8 <ip4_reass+0x2b0>)
 80152da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	e038      	b.n	8015352 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80152e0:	2300      	movs	r3, #0
 80152e2:	e036      	b.n	8015352 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80152e4:	bf00      	nop
 80152e6:	e00a      	b.n	80152fe <ip4_reass+0x2c6>
 80152e8:	2000b1bc 	.word	0x2000b1bc
 80152ec:	2000b1b8 	.word	0x2000b1b8
 80152f0:	08019a0c 	.word	0x08019a0c
 80152f4:	08019b7c 	.word	0x08019b7c
 80152f8:	08019a54 	.word	0x08019a54
    goto nullreturn_ipr;
 80152fc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80152fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015300:	2b00      	cmp	r3, #0
 8015302:	d106      	bne.n	8015312 <ip4_reass+0x2da>
 8015304:	4b15      	ldr	r3, [pc, #84]	; (801535c <ip4_reass+0x324>)
 8015306:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801530a:	4915      	ldr	r1, [pc, #84]	; (8015360 <ip4_reass+0x328>)
 801530c:	4815      	ldr	r0, [pc, #84]	; (8015364 <ip4_reass+0x32c>)
 801530e:	f000 fb07 	bl	8015920 <iprintf>
  if (ipr->p == NULL) {
 8015312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d116      	bne.n	8015348 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801531a:	4b13      	ldr	r3, [pc, #76]	; (8015368 <ip4_reass+0x330>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015320:	429a      	cmp	r2, r3
 8015322:	d006      	beq.n	8015332 <ip4_reass+0x2fa>
 8015324:	4b0d      	ldr	r3, [pc, #52]	; (801535c <ip4_reass+0x324>)
 8015326:	f240 22ab 	movw	r2, #683	; 0x2ab
 801532a:	4910      	ldr	r1, [pc, #64]	; (801536c <ip4_reass+0x334>)
 801532c:	480d      	ldr	r0, [pc, #52]	; (8015364 <ip4_reass+0x32c>)
 801532e:	f000 faf7 	bl	8015920 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015332:	2100      	movs	r1, #0
 8015334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015336:	f7ff fce7 	bl	8014d08 <ip_reass_dequeue_datagram>
 801533a:	e006      	b.n	801534a <ip4_reass+0x312>
    goto nullreturn;
 801533c:	bf00      	nop
 801533e:	e004      	b.n	801534a <ip4_reass+0x312>
    goto nullreturn;
 8015340:	bf00      	nop
 8015342:	e002      	b.n	801534a <ip4_reass+0x312>
      goto nullreturn;
 8015344:	bf00      	nop
 8015346:	e000      	b.n	801534a <ip4_reass+0x312>
  }

nullreturn:
 8015348:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f7f5 ff08 	bl	800b160 <pbuf_free>
  return NULL;
 8015350:	2300      	movs	r3, #0
}
 8015352:	4618      	mov	r0, r3
 8015354:	3738      	adds	r7, #56	; 0x38
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
 801535a:	bf00      	nop
 801535c:	08019a0c 	.word	0x08019a0c
 8015360:	08019b98 	.word	0x08019b98
 8015364:	08019a54 	.word	0x08019a54
 8015368:	2000b1b8 	.word	0x2000b1b8
 801536c:	08019ba4 	.word	0x08019ba4

08015370 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015374:	2005      	movs	r0, #5
 8015376:	f7f5 f801 	bl	800a37c <memp_malloc>
 801537a:	4603      	mov	r3, r0
}
 801537c:	4618      	mov	r0, r3
 801537e:	bd80      	pop	{r7, pc}

08015380 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d106      	bne.n	801539c <ip_frag_free_pbuf_custom_ref+0x1c>
 801538e:	4b07      	ldr	r3, [pc, #28]	; (80153ac <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015390:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015394:	4906      	ldr	r1, [pc, #24]	; (80153b0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015396:	4807      	ldr	r0, [pc, #28]	; (80153b4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015398:	f000 fac2 	bl	8015920 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801539c:	6879      	ldr	r1, [r7, #4]
 801539e:	2005      	movs	r0, #5
 80153a0:	f7f5 f85c 	bl	800a45c <memp_free>
}
 80153a4:	bf00      	nop
 80153a6:	3708      	adds	r7, #8
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	08019a0c 	.word	0x08019a0c
 80153b0:	08019bc4 	.word	0x08019bc4
 80153b4:	08019a54 	.word	0x08019a54

080153b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d106      	bne.n	80153d8 <ipfrag_free_pbuf_custom+0x20>
 80153ca:	4b11      	ldr	r3, [pc, #68]	; (8015410 <ipfrag_free_pbuf_custom+0x58>)
 80153cc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80153d0:	4910      	ldr	r1, [pc, #64]	; (8015414 <ipfrag_free_pbuf_custom+0x5c>)
 80153d2:	4811      	ldr	r0, [pc, #68]	; (8015418 <ipfrag_free_pbuf_custom+0x60>)
 80153d4:	f000 faa4 	bl	8015920 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80153d8:	68fa      	ldr	r2, [r7, #12]
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	429a      	cmp	r2, r3
 80153de:	d006      	beq.n	80153ee <ipfrag_free_pbuf_custom+0x36>
 80153e0:	4b0b      	ldr	r3, [pc, #44]	; (8015410 <ipfrag_free_pbuf_custom+0x58>)
 80153e2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80153e6:	490d      	ldr	r1, [pc, #52]	; (801541c <ipfrag_free_pbuf_custom+0x64>)
 80153e8:	480b      	ldr	r0, [pc, #44]	; (8015418 <ipfrag_free_pbuf_custom+0x60>)
 80153ea:	f000 fa99 	bl	8015920 <iprintf>
  if (pcr->original != NULL) {
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	695b      	ldr	r3, [r3, #20]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d004      	beq.n	8015400 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	695b      	ldr	r3, [r3, #20]
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7f5 feb0 	bl	800b160 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015400:	68f8      	ldr	r0, [r7, #12]
 8015402:	f7ff ffbd 	bl	8015380 <ip_frag_free_pbuf_custom_ref>
}
 8015406:	bf00      	nop
 8015408:	3710      	adds	r7, #16
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	08019a0c 	.word	0x08019a0c
 8015414:	08019bd0 	.word	0x08019bd0
 8015418:	08019a54 	.word	0x08019a54
 801541c:	08019bdc 	.word	0x08019bdc

08015420 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b094      	sub	sp, #80	; 0x50
 8015424:	af02      	add	r7, sp, #8
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801542c:	2300      	movs	r3, #0
 801542e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015436:	3b14      	subs	r3, #20
 8015438:	2b00      	cmp	r3, #0
 801543a:	da00      	bge.n	801543e <ip4_frag+0x1e>
 801543c:	3307      	adds	r3, #7
 801543e:	10db      	asrs	r3, r3, #3
 8015440:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015442:	2314      	movs	r3, #20
 8015444:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	685b      	ldr	r3, [r3, #4]
 801544a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801544e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	f003 030f 	and.w	r3, r3, #15
 8015458:	b2db      	uxtb	r3, r3
 801545a:	009b      	lsls	r3, r3, #2
 801545c:	b2db      	uxtb	r3, r3
 801545e:	2b14      	cmp	r3, #20
 8015460:	d002      	beq.n	8015468 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015462:	f06f 0305 	mvn.w	r3, #5
 8015466:	e110      	b.n	801568a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	895b      	ldrh	r3, [r3, #10]
 801546c:	2b13      	cmp	r3, #19
 801546e:	d809      	bhi.n	8015484 <ip4_frag+0x64>
 8015470:	4b88      	ldr	r3, [pc, #544]	; (8015694 <ip4_frag+0x274>)
 8015472:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015476:	4988      	ldr	r1, [pc, #544]	; (8015698 <ip4_frag+0x278>)
 8015478:	4888      	ldr	r0, [pc, #544]	; (801569c <ip4_frag+0x27c>)
 801547a:	f000 fa51 	bl	8015920 <iprintf>
 801547e:	f06f 0305 	mvn.w	r3, #5
 8015482:	e102      	b.n	801568a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015486:	88db      	ldrh	r3, [r3, #6]
 8015488:	b29b      	uxth	r3, r3
 801548a:	4618      	mov	r0, r3
 801548c:	f7f4 fafe 	bl	8009a8c <lwip_htons>
 8015490:	4603      	mov	r3, r0
 8015492:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015494:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015496:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801549a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801549e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80154a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80154a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	891b      	ldrh	r3, [r3, #8]
 80154aa:	3b14      	subs	r3, #20
 80154ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80154b0:	e0e1      	b.n	8015676 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80154b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80154b4:	00db      	lsls	r3, r3, #3
 80154b6:	b29b      	uxth	r3, r3
 80154b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154bc:	4293      	cmp	r3, r2
 80154be:	bf28      	it	cs
 80154c0:	4613      	movcs	r3, r2
 80154c2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80154c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154c8:	2114      	movs	r1, #20
 80154ca:	200e      	movs	r0, #14
 80154cc:	f7f5 fb64 	bl	800ab98 <pbuf_alloc>
 80154d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80154d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	f000 80d5 	beq.w	8015684 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80154da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154dc:	895b      	ldrh	r3, [r3, #10]
 80154de:	2b13      	cmp	r3, #19
 80154e0:	d806      	bhi.n	80154f0 <ip4_frag+0xd0>
 80154e2:	4b6c      	ldr	r3, [pc, #432]	; (8015694 <ip4_frag+0x274>)
 80154e4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80154e8:	496d      	ldr	r1, [pc, #436]	; (80156a0 <ip4_frag+0x280>)
 80154ea:	486c      	ldr	r0, [pc, #432]	; (801569c <ip4_frag+0x27c>)
 80154ec:	f000 fa18 	bl	8015920 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80154f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	2214      	movs	r2, #20
 80154f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80154f8:	4618      	mov	r0, r3
 80154fa:	f000 f9e1 	bl	80158c0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80154fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015504:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015506:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801550a:	e064      	b.n	80155d6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	895a      	ldrh	r2, [r3, #10]
 8015510:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015512:	1ad3      	subs	r3, r2, r3
 8015514:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	895b      	ldrh	r3, [r3, #10]
 801551a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801551c:	429a      	cmp	r2, r3
 801551e:	d906      	bls.n	801552e <ip4_frag+0x10e>
 8015520:	4b5c      	ldr	r3, [pc, #368]	; (8015694 <ip4_frag+0x274>)
 8015522:	f240 322d 	movw	r2, #813	; 0x32d
 8015526:	495f      	ldr	r1, [pc, #380]	; (80156a4 <ip4_frag+0x284>)
 8015528:	485c      	ldr	r0, [pc, #368]	; (801569c <ip4_frag+0x27c>)
 801552a:	f000 f9f9 	bl	8015920 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801552e:	8bfa      	ldrh	r2, [r7, #30]
 8015530:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015534:	4293      	cmp	r3, r2
 8015536:	bf28      	it	cs
 8015538:	4613      	movcs	r3, r2
 801553a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801553e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015542:	2b00      	cmp	r3, #0
 8015544:	d105      	bne.n	8015552 <ip4_frag+0x132>
        poff = 0;
 8015546:	2300      	movs	r3, #0
 8015548:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	60fb      	str	r3, [r7, #12]
        continue;
 8015550:	e041      	b.n	80155d6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015552:	f7ff ff0d 	bl	8015370 <ip_frag_alloc_pbuf_custom_ref>
 8015556:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d103      	bne.n	8015566 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801555e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015560:	f7f5 fdfe 	bl	800b160 <pbuf_free>
        goto memerr;
 8015564:	e08f      	b.n	8015686 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015566:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801556c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801556e:	4413      	add	r3, r2
 8015570:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015574:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015578:	9201      	str	r2, [sp, #4]
 801557a:	9300      	str	r3, [sp, #0]
 801557c:	4603      	mov	r3, r0
 801557e:	2241      	movs	r2, #65	; 0x41
 8015580:	2000      	movs	r0, #0
 8015582:	f7f5 fc33 	bl	800adec <pbuf_alloced_custom>
 8015586:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d106      	bne.n	801559c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801558e:	69b8      	ldr	r0, [r7, #24]
 8015590:	f7ff fef6 	bl	8015380 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015596:	f7f5 fde3 	bl	800b160 <pbuf_free>
        goto memerr;
 801559a:	e074      	b.n	8015686 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f7f5 fe7f 	bl	800b2a0 <pbuf_ref>
      pcr->original = p;
 80155a2:	69bb      	ldr	r3, [r7, #24]
 80155a4:	68fa      	ldr	r2, [r7, #12]
 80155a6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	4a3f      	ldr	r2, [pc, #252]	; (80156a8 <ip4_frag+0x288>)
 80155ac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80155ae:	6979      	ldr	r1, [r7, #20]
 80155b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155b2:	f7f5 fe97 	bl	800b2e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80155b6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80155ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80155be:	1ad3      	subs	r3, r2, r3
 80155c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80155c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d004      	beq.n	80155d6 <ip4_frag+0x1b6>
        poff = 0;
 80155cc:	2300      	movs	r3, #0
 80155ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80155d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d196      	bne.n	801550c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80155de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80155e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80155e4:	4413      	add	r3, r2
 80155e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80155ec:	f1a3 0213 	sub.w	r2, r3, #19
 80155f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155f4:	429a      	cmp	r2, r3
 80155f6:	bfcc      	ite	gt
 80155f8:	2301      	movgt	r3, #1
 80155fa:	2300      	movle	r3, #0
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015600:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015608:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801560a:	6a3b      	ldr	r3, [r7, #32]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d002      	beq.n	8015616 <ip4_frag+0x1f6>
 8015610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015612:	2b00      	cmp	r3, #0
 8015614:	d003      	beq.n	801561e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015616:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015618:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801561c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801561e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015620:	4618      	mov	r0, r3
 8015622:	f7f4 fa33 	bl	8009a8c <lwip_htons>
 8015626:	4603      	mov	r3, r0
 8015628:	461a      	mov	r2, r3
 801562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801562c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801562e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015630:	3314      	adds	r3, #20
 8015632:	b29b      	uxth	r3, r3
 8015634:	4618      	mov	r0, r3
 8015636:	f7f4 fa29 	bl	8009a8c <lwip_htons>
 801563a:	4603      	mov	r3, r0
 801563c:	461a      	mov	r2, r3
 801563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015640:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015644:	2200      	movs	r2, #0
 8015646:	729a      	strb	r2, [r3, #10]
 8015648:	2200      	movs	r2, #0
 801564a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	695b      	ldr	r3, [r3, #20]
 8015650:	687a      	ldr	r2, [r7, #4]
 8015652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015654:	68b8      	ldr	r0, [r7, #8]
 8015656:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801565a:	f7f5 fd81 	bl	800b160 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801565e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015662:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015664:	1ad3      	subs	r3, r2, r3
 8015666:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801566a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801566e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015670:	4413      	add	r3, r2
 8015672:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015676:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801567a:	2b00      	cmp	r3, #0
 801567c:	f47f af19 	bne.w	80154b2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015680:	2300      	movs	r3, #0
 8015682:	e002      	b.n	801568a <ip4_frag+0x26a>
      goto memerr;
 8015684:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015686:	f04f 33ff 	mov.w	r3, #4294967295
}
 801568a:	4618      	mov	r0, r3
 801568c:	3748      	adds	r7, #72	; 0x48
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	08019a0c 	.word	0x08019a0c
 8015698:	08019be8 	.word	0x08019be8
 801569c:	08019a54 	.word	0x08019a54
 80156a0:	08019c04 	.word	0x08019c04
 80156a4:	08019c24 	.word	0x08019c24
 80156a8:	080153b9 	.word	0x080153b9

080156ac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b086      	sub	sp, #24
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
 80156b4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80156b6:	230e      	movs	r3, #14
 80156b8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	895b      	ldrh	r3, [r3, #10]
 80156be:	2b0e      	cmp	r3, #14
 80156c0:	d96e      	bls.n	80157a0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	7bdb      	ldrb	r3, [r3, #15]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d106      	bne.n	80156d8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80156d0:	3301      	adds	r3, #1
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	7b1a      	ldrb	r2, [r3, #12]
 80156e2:	7b5b      	ldrb	r3, [r3, #13]
 80156e4:	021b      	lsls	r3, r3, #8
 80156e6:	4313      	orrs	r3, r2
 80156e8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	f003 0301 	and.w	r3, r3, #1
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d023      	beq.n	801573e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	2b01      	cmp	r3, #1
 80156fc:	d10f      	bne.n	801571e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80156fe:	693b      	ldr	r3, [r7, #16]
 8015700:	785b      	ldrb	r3, [r3, #1]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d11b      	bne.n	801573e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015706:	693b      	ldr	r3, [r7, #16]
 8015708:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801570a:	2b5e      	cmp	r3, #94	; 0x5e
 801570c:	d117      	bne.n	801573e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	7b5b      	ldrb	r3, [r3, #13]
 8015712:	f043 0310 	orr.w	r3, r3, #16
 8015716:	b2da      	uxtb	r2, r3
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	735a      	strb	r2, [r3, #13]
 801571c:	e00f      	b.n	801573e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801571e:	693b      	ldr	r3, [r7, #16]
 8015720:	2206      	movs	r2, #6
 8015722:	4928      	ldr	r1, [pc, #160]	; (80157c4 <ethernet_input+0x118>)
 8015724:	4618      	mov	r0, r3
 8015726:	f000 f8bb 	bl	80158a0 <memcmp>
 801572a:	4603      	mov	r3, r0
 801572c:	2b00      	cmp	r3, #0
 801572e:	d106      	bne.n	801573e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	7b5b      	ldrb	r3, [r3, #13]
 8015734:	f043 0308 	orr.w	r3, r3, #8
 8015738:	b2da      	uxtb	r2, r3
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801573e:	89fb      	ldrh	r3, [r7, #14]
 8015740:	2b08      	cmp	r3, #8
 8015742:	d003      	beq.n	801574c <ethernet_input+0xa0>
 8015744:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015748:	d014      	beq.n	8015774 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801574a:	e032      	b.n	80157b2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015752:	f003 0308 	and.w	r3, r3, #8
 8015756:	2b00      	cmp	r3, #0
 8015758:	d024      	beq.n	80157a4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801575a:	8afb      	ldrh	r3, [r7, #22]
 801575c:	4619      	mov	r1, r3
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7f5 fc78 	bl	800b054 <pbuf_remove_header>
 8015764:	4603      	mov	r3, r0
 8015766:	2b00      	cmp	r3, #0
 8015768:	d11e      	bne.n	80157a8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801576a:	6839      	ldr	r1, [r7, #0]
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7fe ff03 	bl	8014578 <ip4_input>
      break;
 8015772:	e013      	b.n	801579c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801577a:	f003 0308 	and.w	r3, r3, #8
 801577e:	2b00      	cmp	r3, #0
 8015780:	d014      	beq.n	80157ac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015782:	8afb      	ldrh	r3, [r7, #22]
 8015784:	4619      	mov	r1, r3
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f7f5 fc64 	bl	800b054 <pbuf_remove_header>
 801578c:	4603      	mov	r3, r0
 801578e:	2b00      	cmp	r3, #0
 8015790:	d10e      	bne.n	80157b0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015792:	6839      	ldr	r1, [r7, #0]
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f7fe f89f 	bl	80138d8 <etharp_input>
      break;
 801579a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801579c:	2300      	movs	r3, #0
 801579e:	e00c      	b.n	80157ba <ethernet_input+0x10e>
    goto free_and_return;
 80157a0:	bf00      	nop
 80157a2:	e006      	b.n	80157b2 <ethernet_input+0x106>
        goto free_and_return;
 80157a4:	bf00      	nop
 80157a6:	e004      	b.n	80157b2 <ethernet_input+0x106>
        goto free_and_return;
 80157a8:	bf00      	nop
 80157aa:	e002      	b.n	80157b2 <ethernet_input+0x106>
        goto free_and_return;
 80157ac:	bf00      	nop
 80157ae:	e000      	b.n	80157b2 <ethernet_input+0x106>
        goto free_and_return;
 80157b0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7f5 fcd4 	bl	800b160 <pbuf_free>
  return ERR_OK;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3718      	adds	r7, #24
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	0801c4b4 	.word	0x0801c4b4

080157c8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b086      	sub	sp, #24
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	60f8      	str	r0, [r7, #12]
 80157d0:	60b9      	str	r1, [r7, #8]
 80157d2:	607a      	str	r2, [r7, #4]
 80157d4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80157d6:	8c3b      	ldrh	r3, [r7, #32]
 80157d8:	4618      	mov	r0, r3
 80157da:	f7f4 f957 	bl	8009a8c <lwip_htons>
 80157de:	4603      	mov	r3, r0
 80157e0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80157e2:	210e      	movs	r1, #14
 80157e4:	68b8      	ldr	r0, [r7, #8]
 80157e6:	f7f5 fc25 	bl	800b034 <pbuf_add_header>
 80157ea:	4603      	mov	r3, r0
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d125      	bne.n	801583c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	685b      	ldr	r3, [r3, #4]
 80157f4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	8afa      	ldrh	r2, [r7, #22]
 80157fa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80157fc:	693b      	ldr	r3, [r7, #16]
 80157fe:	2206      	movs	r2, #6
 8015800:	6839      	ldr	r1, [r7, #0]
 8015802:	4618      	mov	r0, r3
 8015804:	f000 f85c 	bl	80158c0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015808:	693b      	ldr	r3, [r7, #16]
 801580a:	3306      	adds	r3, #6
 801580c:	2206      	movs	r2, #6
 801580e:	6879      	ldr	r1, [r7, #4]
 8015810:	4618      	mov	r0, r3
 8015812:	f000 f855 	bl	80158c0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801581c:	2b06      	cmp	r3, #6
 801581e:	d006      	beq.n	801582e <ethernet_output+0x66>
 8015820:	4b0a      	ldr	r3, [pc, #40]	; (801584c <ethernet_output+0x84>)
 8015822:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015826:	490a      	ldr	r1, [pc, #40]	; (8015850 <ethernet_output+0x88>)
 8015828:	480a      	ldr	r0, [pc, #40]	; (8015854 <ethernet_output+0x8c>)
 801582a:	f000 f879 	bl	8015920 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	699b      	ldr	r3, [r3, #24]
 8015832:	68b9      	ldr	r1, [r7, #8]
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	4798      	blx	r3
 8015838:	4603      	mov	r3, r0
 801583a:	e002      	b.n	8015842 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801583c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801583e:	f06f 0301 	mvn.w	r3, #1
}
 8015842:	4618      	mov	r0, r3
 8015844:	3718      	adds	r7, #24
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}
 801584a:	bf00      	nop
 801584c:	08019c34 	.word	0x08019c34
 8015850:	08019c6c 	.word	0x08019c6c
 8015854:	08019ca0 	.word	0x08019ca0

08015858 <__libc_init_array>:
 8015858:	b570      	push	{r4, r5, r6, lr}
 801585a:	4d0d      	ldr	r5, [pc, #52]	; (8015890 <__libc_init_array+0x38>)
 801585c:	4c0d      	ldr	r4, [pc, #52]	; (8015894 <__libc_init_array+0x3c>)
 801585e:	1b64      	subs	r4, r4, r5
 8015860:	10a4      	asrs	r4, r4, #2
 8015862:	2600      	movs	r6, #0
 8015864:	42a6      	cmp	r6, r4
 8015866:	d109      	bne.n	801587c <__libc_init_array+0x24>
 8015868:	4d0b      	ldr	r5, [pc, #44]	; (8015898 <__libc_init_array+0x40>)
 801586a:	4c0c      	ldr	r4, [pc, #48]	; (801589c <__libc_init_array+0x44>)
 801586c:	f001 fa5c 	bl	8016d28 <_init>
 8015870:	1b64      	subs	r4, r4, r5
 8015872:	10a4      	asrs	r4, r4, #2
 8015874:	2600      	movs	r6, #0
 8015876:	42a6      	cmp	r6, r4
 8015878:	d105      	bne.n	8015886 <__libc_init_array+0x2e>
 801587a:	bd70      	pop	{r4, r5, r6, pc}
 801587c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015880:	4798      	blx	r3
 8015882:	3601      	adds	r6, #1
 8015884:	e7ee      	b.n	8015864 <__libc_init_array+0xc>
 8015886:	f855 3b04 	ldr.w	r3, [r5], #4
 801588a:	4798      	blx	r3
 801588c:	3601      	adds	r6, #1
 801588e:	e7f2      	b.n	8015876 <__libc_init_array+0x1e>
 8015890:	0801c614 	.word	0x0801c614
 8015894:	0801c614 	.word	0x0801c614
 8015898:	0801c614 	.word	0x0801c614
 801589c:	0801c618 	.word	0x0801c618

080158a0 <memcmp>:
 80158a0:	b510      	push	{r4, lr}
 80158a2:	3901      	subs	r1, #1
 80158a4:	4402      	add	r2, r0
 80158a6:	4290      	cmp	r0, r2
 80158a8:	d101      	bne.n	80158ae <memcmp+0xe>
 80158aa:	2000      	movs	r0, #0
 80158ac:	e005      	b.n	80158ba <memcmp+0x1a>
 80158ae:	7803      	ldrb	r3, [r0, #0]
 80158b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80158b4:	42a3      	cmp	r3, r4
 80158b6:	d001      	beq.n	80158bc <memcmp+0x1c>
 80158b8:	1b18      	subs	r0, r3, r4
 80158ba:	bd10      	pop	{r4, pc}
 80158bc:	3001      	adds	r0, #1
 80158be:	e7f2      	b.n	80158a6 <memcmp+0x6>

080158c0 <memcpy>:
 80158c0:	440a      	add	r2, r1
 80158c2:	4291      	cmp	r1, r2
 80158c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80158c8:	d100      	bne.n	80158cc <memcpy+0xc>
 80158ca:	4770      	bx	lr
 80158cc:	b510      	push	{r4, lr}
 80158ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80158d6:	4291      	cmp	r1, r2
 80158d8:	d1f9      	bne.n	80158ce <memcpy+0xe>
 80158da:	bd10      	pop	{r4, pc}

080158dc <memmove>:
 80158dc:	4288      	cmp	r0, r1
 80158de:	b510      	push	{r4, lr}
 80158e0:	eb01 0402 	add.w	r4, r1, r2
 80158e4:	d902      	bls.n	80158ec <memmove+0x10>
 80158e6:	4284      	cmp	r4, r0
 80158e8:	4623      	mov	r3, r4
 80158ea:	d807      	bhi.n	80158fc <memmove+0x20>
 80158ec:	1e43      	subs	r3, r0, #1
 80158ee:	42a1      	cmp	r1, r4
 80158f0:	d008      	beq.n	8015904 <memmove+0x28>
 80158f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80158f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80158fa:	e7f8      	b.n	80158ee <memmove+0x12>
 80158fc:	4402      	add	r2, r0
 80158fe:	4601      	mov	r1, r0
 8015900:	428a      	cmp	r2, r1
 8015902:	d100      	bne.n	8015906 <memmove+0x2a>
 8015904:	bd10      	pop	{r4, pc}
 8015906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801590a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801590e:	e7f7      	b.n	8015900 <memmove+0x24>

08015910 <memset>:
 8015910:	4402      	add	r2, r0
 8015912:	4603      	mov	r3, r0
 8015914:	4293      	cmp	r3, r2
 8015916:	d100      	bne.n	801591a <memset+0xa>
 8015918:	4770      	bx	lr
 801591a:	f803 1b01 	strb.w	r1, [r3], #1
 801591e:	e7f9      	b.n	8015914 <memset+0x4>

08015920 <iprintf>:
 8015920:	b40f      	push	{r0, r1, r2, r3}
 8015922:	4b0a      	ldr	r3, [pc, #40]	; (801594c <iprintf+0x2c>)
 8015924:	b513      	push	{r0, r1, r4, lr}
 8015926:	681c      	ldr	r4, [r3, #0]
 8015928:	b124      	cbz	r4, 8015934 <iprintf+0x14>
 801592a:	69a3      	ldr	r3, [r4, #24]
 801592c:	b913      	cbnz	r3, 8015934 <iprintf+0x14>
 801592e:	4620      	mov	r0, r4
 8015930:	f000 f8e2 	bl	8015af8 <__sinit>
 8015934:	ab05      	add	r3, sp, #20
 8015936:	9a04      	ldr	r2, [sp, #16]
 8015938:	68a1      	ldr	r1, [r4, #8]
 801593a:	9301      	str	r3, [sp, #4]
 801593c:	4620      	mov	r0, r4
 801593e:	f000 fbfb 	bl	8016138 <_vfiprintf_r>
 8015942:	b002      	add	sp, #8
 8015944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015948:	b004      	add	sp, #16
 801594a:	4770      	bx	lr
 801594c:	20000068 	.word	0x20000068

08015950 <rand>:
 8015950:	4b16      	ldr	r3, [pc, #88]	; (80159ac <rand+0x5c>)
 8015952:	b510      	push	{r4, lr}
 8015954:	681c      	ldr	r4, [r3, #0]
 8015956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015958:	b9b3      	cbnz	r3, 8015988 <rand+0x38>
 801595a:	2018      	movs	r0, #24
 801595c:	f000 f97e 	bl	8015c5c <malloc>
 8015960:	63a0      	str	r0, [r4, #56]	; 0x38
 8015962:	b928      	cbnz	r0, 8015970 <rand+0x20>
 8015964:	4602      	mov	r2, r0
 8015966:	4b12      	ldr	r3, [pc, #72]	; (80159b0 <rand+0x60>)
 8015968:	4812      	ldr	r0, [pc, #72]	; (80159b4 <rand+0x64>)
 801596a:	214e      	movs	r1, #78	; 0x4e
 801596c:	f000 f84e 	bl	8015a0c <__assert_func>
 8015970:	4a11      	ldr	r2, [pc, #68]	; (80159b8 <rand+0x68>)
 8015972:	4b12      	ldr	r3, [pc, #72]	; (80159bc <rand+0x6c>)
 8015974:	e9c0 2300 	strd	r2, r3, [r0]
 8015978:	4b11      	ldr	r3, [pc, #68]	; (80159c0 <rand+0x70>)
 801597a:	6083      	str	r3, [r0, #8]
 801597c:	230b      	movs	r3, #11
 801597e:	8183      	strh	r3, [r0, #12]
 8015980:	2201      	movs	r2, #1
 8015982:	2300      	movs	r3, #0
 8015984:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015988:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801598a:	4a0e      	ldr	r2, [pc, #56]	; (80159c4 <rand+0x74>)
 801598c:	6920      	ldr	r0, [r4, #16]
 801598e:	6963      	ldr	r3, [r4, #20]
 8015990:	490d      	ldr	r1, [pc, #52]	; (80159c8 <rand+0x78>)
 8015992:	4342      	muls	r2, r0
 8015994:	fb01 2203 	mla	r2, r1, r3, r2
 8015998:	fba0 0101 	umull	r0, r1, r0, r1
 801599c:	1c43      	adds	r3, r0, #1
 801599e:	eb42 0001 	adc.w	r0, r2, r1
 80159a2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80159a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80159aa:	bd10      	pop	{r4, pc}
 80159ac:	20000068 	.word	0x20000068
 80159b0:	0801c4c8 	.word	0x0801c4c8
 80159b4:	0801c4df 	.word	0x0801c4df
 80159b8:	abcd330e 	.word	0xabcd330e
 80159bc:	e66d1234 	.word	0xe66d1234
 80159c0:	0005deec 	.word	0x0005deec
 80159c4:	5851f42d 	.word	0x5851f42d
 80159c8:	4c957f2d 	.word	0x4c957f2d

080159cc <siprintf>:
 80159cc:	b40e      	push	{r1, r2, r3}
 80159ce:	b500      	push	{lr}
 80159d0:	b09c      	sub	sp, #112	; 0x70
 80159d2:	ab1d      	add	r3, sp, #116	; 0x74
 80159d4:	9002      	str	r0, [sp, #8]
 80159d6:	9006      	str	r0, [sp, #24]
 80159d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80159dc:	4809      	ldr	r0, [pc, #36]	; (8015a04 <siprintf+0x38>)
 80159de:	9107      	str	r1, [sp, #28]
 80159e0:	9104      	str	r1, [sp, #16]
 80159e2:	4909      	ldr	r1, [pc, #36]	; (8015a08 <siprintf+0x3c>)
 80159e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80159e8:	9105      	str	r1, [sp, #20]
 80159ea:	6800      	ldr	r0, [r0, #0]
 80159ec:	9301      	str	r3, [sp, #4]
 80159ee:	a902      	add	r1, sp, #8
 80159f0:	f000 fa78 	bl	8015ee4 <_svfiprintf_r>
 80159f4:	9b02      	ldr	r3, [sp, #8]
 80159f6:	2200      	movs	r2, #0
 80159f8:	701a      	strb	r2, [r3, #0]
 80159fa:	b01c      	add	sp, #112	; 0x70
 80159fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a00:	b003      	add	sp, #12
 8015a02:	4770      	bx	lr
 8015a04:	20000068 	.word	0x20000068
 8015a08:	ffff0208 	.word	0xffff0208

08015a0c <__assert_func>:
 8015a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a0e:	4614      	mov	r4, r2
 8015a10:	461a      	mov	r2, r3
 8015a12:	4b09      	ldr	r3, [pc, #36]	; (8015a38 <__assert_func+0x2c>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	4605      	mov	r5, r0
 8015a18:	68d8      	ldr	r0, [r3, #12]
 8015a1a:	b14c      	cbz	r4, 8015a30 <__assert_func+0x24>
 8015a1c:	4b07      	ldr	r3, [pc, #28]	; (8015a3c <__assert_func+0x30>)
 8015a1e:	9100      	str	r1, [sp, #0]
 8015a20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a24:	4906      	ldr	r1, [pc, #24]	; (8015a40 <__assert_func+0x34>)
 8015a26:	462b      	mov	r3, r5
 8015a28:	f000 f8e4 	bl	8015bf4 <fiprintf>
 8015a2c:	f000 ff6e 	bl	801690c <abort>
 8015a30:	4b04      	ldr	r3, [pc, #16]	; (8015a44 <__assert_func+0x38>)
 8015a32:	461c      	mov	r4, r3
 8015a34:	e7f3      	b.n	8015a1e <__assert_func+0x12>
 8015a36:	bf00      	nop
 8015a38:	20000068 	.word	0x20000068
 8015a3c:	0801c53a 	.word	0x0801c53a
 8015a40:	0801c547 	.word	0x0801c547
 8015a44:	0801c575 	.word	0x0801c575

08015a48 <std>:
 8015a48:	2300      	movs	r3, #0
 8015a4a:	b510      	push	{r4, lr}
 8015a4c:	4604      	mov	r4, r0
 8015a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8015a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015a56:	6083      	str	r3, [r0, #8]
 8015a58:	8181      	strh	r1, [r0, #12]
 8015a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8015a5c:	81c2      	strh	r2, [r0, #14]
 8015a5e:	6183      	str	r3, [r0, #24]
 8015a60:	4619      	mov	r1, r3
 8015a62:	2208      	movs	r2, #8
 8015a64:	305c      	adds	r0, #92	; 0x5c
 8015a66:	f7ff ff53 	bl	8015910 <memset>
 8015a6a:	4b05      	ldr	r3, [pc, #20]	; (8015a80 <std+0x38>)
 8015a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8015a6e:	4b05      	ldr	r3, [pc, #20]	; (8015a84 <std+0x3c>)
 8015a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8015a72:	4b05      	ldr	r3, [pc, #20]	; (8015a88 <std+0x40>)
 8015a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015a76:	4b05      	ldr	r3, [pc, #20]	; (8015a8c <std+0x44>)
 8015a78:	6224      	str	r4, [r4, #32]
 8015a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8015a7c:	bd10      	pop	{r4, pc}
 8015a7e:	bf00      	nop
 8015a80:	080166e1 	.word	0x080166e1
 8015a84:	08016703 	.word	0x08016703
 8015a88:	0801673b 	.word	0x0801673b
 8015a8c:	0801675f 	.word	0x0801675f

08015a90 <_cleanup_r>:
 8015a90:	4901      	ldr	r1, [pc, #4]	; (8015a98 <_cleanup_r+0x8>)
 8015a92:	f000 b8c1 	b.w	8015c18 <_fwalk_reent>
 8015a96:	bf00      	nop
 8015a98:	08016a49 	.word	0x08016a49

08015a9c <__sfmoreglue>:
 8015a9c:	b570      	push	{r4, r5, r6, lr}
 8015a9e:	2268      	movs	r2, #104	; 0x68
 8015aa0:	1e4d      	subs	r5, r1, #1
 8015aa2:	4355      	muls	r5, r2
 8015aa4:	460e      	mov	r6, r1
 8015aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015aaa:	f000 f94b 	bl	8015d44 <_malloc_r>
 8015aae:	4604      	mov	r4, r0
 8015ab0:	b140      	cbz	r0, 8015ac4 <__sfmoreglue+0x28>
 8015ab2:	2100      	movs	r1, #0
 8015ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8015ab8:	300c      	adds	r0, #12
 8015aba:	60a0      	str	r0, [r4, #8]
 8015abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ac0:	f7ff ff26 	bl	8015910 <memset>
 8015ac4:	4620      	mov	r0, r4
 8015ac6:	bd70      	pop	{r4, r5, r6, pc}

08015ac8 <__sfp_lock_acquire>:
 8015ac8:	4801      	ldr	r0, [pc, #4]	; (8015ad0 <__sfp_lock_acquire+0x8>)
 8015aca:	f000 b8c5 	b.w	8015c58 <__retarget_lock_acquire_recursive>
 8015ace:	bf00      	nop
 8015ad0:	2000b1c5 	.word	0x2000b1c5

08015ad4 <__sfp_lock_release>:
 8015ad4:	4801      	ldr	r0, [pc, #4]	; (8015adc <__sfp_lock_release+0x8>)
 8015ad6:	f000 b8c0 	b.w	8015c5a <__retarget_lock_release_recursive>
 8015ada:	bf00      	nop
 8015adc:	2000b1c5 	.word	0x2000b1c5

08015ae0 <__sinit_lock_acquire>:
 8015ae0:	4801      	ldr	r0, [pc, #4]	; (8015ae8 <__sinit_lock_acquire+0x8>)
 8015ae2:	f000 b8b9 	b.w	8015c58 <__retarget_lock_acquire_recursive>
 8015ae6:	bf00      	nop
 8015ae8:	2000b1c6 	.word	0x2000b1c6

08015aec <__sinit_lock_release>:
 8015aec:	4801      	ldr	r0, [pc, #4]	; (8015af4 <__sinit_lock_release+0x8>)
 8015aee:	f000 b8b4 	b.w	8015c5a <__retarget_lock_release_recursive>
 8015af2:	bf00      	nop
 8015af4:	2000b1c6 	.word	0x2000b1c6

08015af8 <__sinit>:
 8015af8:	b510      	push	{r4, lr}
 8015afa:	4604      	mov	r4, r0
 8015afc:	f7ff fff0 	bl	8015ae0 <__sinit_lock_acquire>
 8015b00:	69a3      	ldr	r3, [r4, #24]
 8015b02:	b11b      	cbz	r3, 8015b0c <__sinit+0x14>
 8015b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b08:	f7ff bff0 	b.w	8015aec <__sinit_lock_release>
 8015b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015b10:	6523      	str	r3, [r4, #80]	; 0x50
 8015b12:	4b13      	ldr	r3, [pc, #76]	; (8015b60 <__sinit+0x68>)
 8015b14:	4a13      	ldr	r2, [pc, #76]	; (8015b64 <__sinit+0x6c>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8015b1a:	42a3      	cmp	r3, r4
 8015b1c:	bf04      	itt	eq
 8015b1e:	2301      	moveq	r3, #1
 8015b20:	61a3      	streq	r3, [r4, #24]
 8015b22:	4620      	mov	r0, r4
 8015b24:	f000 f820 	bl	8015b68 <__sfp>
 8015b28:	6060      	str	r0, [r4, #4]
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	f000 f81c 	bl	8015b68 <__sfp>
 8015b30:	60a0      	str	r0, [r4, #8]
 8015b32:	4620      	mov	r0, r4
 8015b34:	f000 f818 	bl	8015b68 <__sfp>
 8015b38:	2200      	movs	r2, #0
 8015b3a:	60e0      	str	r0, [r4, #12]
 8015b3c:	2104      	movs	r1, #4
 8015b3e:	6860      	ldr	r0, [r4, #4]
 8015b40:	f7ff ff82 	bl	8015a48 <std>
 8015b44:	68a0      	ldr	r0, [r4, #8]
 8015b46:	2201      	movs	r2, #1
 8015b48:	2109      	movs	r1, #9
 8015b4a:	f7ff ff7d 	bl	8015a48 <std>
 8015b4e:	68e0      	ldr	r0, [r4, #12]
 8015b50:	2202      	movs	r2, #2
 8015b52:	2112      	movs	r1, #18
 8015b54:	f7ff ff78 	bl	8015a48 <std>
 8015b58:	2301      	movs	r3, #1
 8015b5a:	61a3      	str	r3, [r4, #24]
 8015b5c:	e7d2      	b.n	8015b04 <__sinit+0xc>
 8015b5e:	bf00      	nop
 8015b60:	0801c4c4 	.word	0x0801c4c4
 8015b64:	08015a91 	.word	0x08015a91

08015b68 <__sfp>:
 8015b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b6a:	4607      	mov	r7, r0
 8015b6c:	f7ff ffac 	bl	8015ac8 <__sfp_lock_acquire>
 8015b70:	4b1e      	ldr	r3, [pc, #120]	; (8015bec <__sfp+0x84>)
 8015b72:	681e      	ldr	r6, [r3, #0]
 8015b74:	69b3      	ldr	r3, [r6, #24]
 8015b76:	b913      	cbnz	r3, 8015b7e <__sfp+0x16>
 8015b78:	4630      	mov	r0, r6
 8015b7a:	f7ff ffbd 	bl	8015af8 <__sinit>
 8015b7e:	3648      	adds	r6, #72	; 0x48
 8015b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015b84:	3b01      	subs	r3, #1
 8015b86:	d503      	bpl.n	8015b90 <__sfp+0x28>
 8015b88:	6833      	ldr	r3, [r6, #0]
 8015b8a:	b30b      	cbz	r3, 8015bd0 <__sfp+0x68>
 8015b8c:	6836      	ldr	r6, [r6, #0]
 8015b8e:	e7f7      	b.n	8015b80 <__sfp+0x18>
 8015b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015b94:	b9d5      	cbnz	r5, 8015bcc <__sfp+0x64>
 8015b96:	4b16      	ldr	r3, [pc, #88]	; (8015bf0 <__sfp+0x88>)
 8015b98:	60e3      	str	r3, [r4, #12]
 8015b9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8015ba0:	f000 f859 	bl	8015c56 <__retarget_lock_init_recursive>
 8015ba4:	f7ff ff96 	bl	8015ad4 <__sfp_lock_release>
 8015ba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015bac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015bb0:	6025      	str	r5, [r4, #0]
 8015bb2:	61a5      	str	r5, [r4, #24]
 8015bb4:	2208      	movs	r2, #8
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015bbc:	f7ff fea8 	bl	8015910 <memset>
 8015bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015bc8:	4620      	mov	r0, r4
 8015bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bcc:	3468      	adds	r4, #104	; 0x68
 8015bce:	e7d9      	b.n	8015b84 <__sfp+0x1c>
 8015bd0:	2104      	movs	r1, #4
 8015bd2:	4638      	mov	r0, r7
 8015bd4:	f7ff ff62 	bl	8015a9c <__sfmoreglue>
 8015bd8:	4604      	mov	r4, r0
 8015bda:	6030      	str	r0, [r6, #0]
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	d1d5      	bne.n	8015b8c <__sfp+0x24>
 8015be0:	f7ff ff78 	bl	8015ad4 <__sfp_lock_release>
 8015be4:	230c      	movs	r3, #12
 8015be6:	603b      	str	r3, [r7, #0]
 8015be8:	e7ee      	b.n	8015bc8 <__sfp+0x60>
 8015bea:	bf00      	nop
 8015bec:	0801c4c4 	.word	0x0801c4c4
 8015bf0:	ffff0001 	.word	0xffff0001

08015bf4 <fiprintf>:
 8015bf4:	b40e      	push	{r1, r2, r3}
 8015bf6:	b503      	push	{r0, r1, lr}
 8015bf8:	4601      	mov	r1, r0
 8015bfa:	ab03      	add	r3, sp, #12
 8015bfc:	4805      	ldr	r0, [pc, #20]	; (8015c14 <fiprintf+0x20>)
 8015bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c02:	6800      	ldr	r0, [r0, #0]
 8015c04:	9301      	str	r3, [sp, #4]
 8015c06:	f000 fa97 	bl	8016138 <_vfiprintf_r>
 8015c0a:	b002      	add	sp, #8
 8015c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c10:	b003      	add	sp, #12
 8015c12:	4770      	bx	lr
 8015c14:	20000068 	.word	0x20000068

08015c18 <_fwalk_reent>:
 8015c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c1c:	4606      	mov	r6, r0
 8015c1e:	4688      	mov	r8, r1
 8015c20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015c24:	2700      	movs	r7, #0
 8015c26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015c2a:	f1b9 0901 	subs.w	r9, r9, #1
 8015c2e:	d505      	bpl.n	8015c3c <_fwalk_reent+0x24>
 8015c30:	6824      	ldr	r4, [r4, #0]
 8015c32:	2c00      	cmp	r4, #0
 8015c34:	d1f7      	bne.n	8015c26 <_fwalk_reent+0xe>
 8015c36:	4638      	mov	r0, r7
 8015c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c3c:	89ab      	ldrh	r3, [r5, #12]
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d907      	bls.n	8015c52 <_fwalk_reent+0x3a>
 8015c42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c46:	3301      	adds	r3, #1
 8015c48:	d003      	beq.n	8015c52 <_fwalk_reent+0x3a>
 8015c4a:	4629      	mov	r1, r5
 8015c4c:	4630      	mov	r0, r6
 8015c4e:	47c0      	blx	r8
 8015c50:	4307      	orrs	r7, r0
 8015c52:	3568      	adds	r5, #104	; 0x68
 8015c54:	e7e9      	b.n	8015c2a <_fwalk_reent+0x12>

08015c56 <__retarget_lock_init_recursive>:
 8015c56:	4770      	bx	lr

08015c58 <__retarget_lock_acquire_recursive>:
 8015c58:	4770      	bx	lr

08015c5a <__retarget_lock_release_recursive>:
 8015c5a:	4770      	bx	lr

08015c5c <malloc>:
 8015c5c:	4b02      	ldr	r3, [pc, #8]	; (8015c68 <malloc+0xc>)
 8015c5e:	4601      	mov	r1, r0
 8015c60:	6818      	ldr	r0, [r3, #0]
 8015c62:	f000 b86f 	b.w	8015d44 <_malloc_r>
 8015c66:	bf00      	nop
 8015c68:	20000068 	.word	0x20000068

08015c6c <_free_r>:
 8015c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c6e:	2900      	cmp	r1, #0
 8015c70:	d044      	beq.n	8015cfc <_free_r+0x90>
 8015c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c76:	9001      	str	r0, [sp, #4]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	f1a1 0404 	sub.w	r4, r1, #4
 8015c7e:	bfb8      	it	lt
 8015c80:	18e4      	addlt	r4, r4, r3
 8015c82:	f000 ff95 	bl	8016bb0 <__malloc_lock>
 8015c86:	4a1e      	ldr	r2, [pc, #120]	; (8015d00 <_free_r+0x94>)
 8015c88:	9801      	ldr	r0, [sp, #4]
 8015c8a:	6813      	ldr	r3, [r2, #0]
 8015c8c:	b933      	cbnz	r3, 8015c9c <_free_r+0x30>
 8015c8e:	6063      	str	r3, [r4, #4]
 8015c90:	6014      	str	r4, [r2, #0]
 8015c92:	b003      	add	sp, #12
 8015c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c98:	f000 bf90 	b.w	8016bbc <__malloc_unlock>
 8015c9c:	42a3      	cmp	r3, r4
 8015c9e:	d908      	bls.n	8015cb2 <_free_r+0x46>
 8015ca0:	6825      	ldr	r5, [r4, #0]
 8015ca2:	1961      	adds	r1, r4, r5
 8015ca4:	428b      	cmp	r3, r1
 8015ca6:	bf01      	itttt	eq
 8015ca8:	6819      	ldreq	r1, [r3, #0]
 8015caa:	685b      	ldreq	r3, [r3, #4]
 8015cac:	1949      	addeq	r1, r1, r5
 8015cae:	6021      	streq	r1, [r4, #0]
 8015cb0:	e7ed      	b.n	8015c8e <_free_r+0x22>
 8015cb2:	461a      	mov	r2, r3
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	b10b      	cbz	r3, 8015cbc <_free_r+0x50>
 8015cb8:	42a3      	cmp	r3, r4
 8015cba:	d9fa      	bls.n	8015cb2 <_free_r+0x46>
 8015cbc:	6811      	ldr	r1, [r2, #0]
 8015cbe:	1855      	adds	r5, r2, r1
 8015cc0:	42a5      	cmp	r5, r4
 8015cc2:	d10b      	bne.n	8015cdc <_free_r+0x70>
 8015cc4:	6824      	ldr	r4, [r4, #0]
 8015cc6:	4421      	add	r1, r4
 8015cc8:	1854      	adds	r4, r2, r1
 8015cca:	42a3      	cmp	r3, r4
 8015ccc:	6011      	str	r1, [r2, #0]
 8015cce:	d1e0      	bne.n	8015c92 <_free_r+0x26>
 8015cd0:	681c      	ldr	r4, [r3, #0]
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	6053      	str	r3, [r2, #4]
 8015cd6:	4421      	add	r1, r4
 8015cd8:	6011      	str	r1, [r2, #0]
 8015cda:	e7da      	b.n	8015c92 <_free_r+0x26>
 8015cdc:	d902      	bls.n	8015ce4 <_free_r+0x78>
 8015cde:	230c      	movs	r3, #12
 8015ce0:	6003      	str	r3, [r0, #0]
 8015ce2:	e7d6      	b.n	8015c92 <_free_r+0x26>
 8015ce4:	6825      	ldr	r5, [r4, #0]
 8015ce6:	1961      	adds	r1, r4, r5
 8015ce8:	428b      	cmp	r3, r1
 8015cea:	bf04      	itt	eq
 8015cec:	6819      	ldreq	r1, [r3, #0]
 8015cee:	685b      	ldreq	r3, [r3, #4]
 8015cf0:	6063      	str	r3, [r4, #4]
 8015cf2:	bf04      	itt	eq
 8015cf4:	1949      	addeq	r1, r1, r5
 8015cf6:	6021      	streq	r1, [r4, #0]
 8015cf8:	6054      	str	r4, [r2, #4]
 8015cfa:	e7ca      	b.n	8015c92 <_free_r+0x26>
 8015cfc:	b003      	add	sp, #12
 8015cfe:	bd30      	pop	{r4, r5, pc}
 8015d00:	2000b1c8 	.word	0x2000b1c8

08015d04 <sbrk_aligned>:
 8015d04:	b570      	push	{r4, r5, r6, lr}
 8015d06:	4e0e      	ldr	r6, [pc, #56]	; (8015d40 <sbrk_aligned+0x3c>)
 8015d08:	460c      	mov	r4, r1
 8015d0a:	6831      	ldr	r1, [r6, #0]
 8015d0c:	4605      	mov	r5, r0
 8015d0e:	b911      	cbnz	r1, 8015d16 <sbrk_aligned+0x12>
 8015d10:	f000 fcd6 	bl	80166c0 <_sbrk_r>
 8015d14:	6030      	str	r0, [r6, #0]
 8015d16:	4621      	mov	r1, r4
 8015d18:	4628      	mov	r0, r5
 8015d1a:	f000 fcd1 	bl	80166c0 <_sbrk_r>
 8015d1e:	1c43      	adds	r3, r0, #1
 8015d20:	d00a      	beq.n	8015d38 <sbrk_aligned+0x34>
 8015d22:	1cc4      	adds	r4, r0, #3
 8015d24:	f024 0403 	bic.w	r4, r4, #3
 8015d28:	42a0      	cmp	r0, r4
 8015d2a:	d007      	beq.n	8015d3c <sbrk_aligned+0x38>
 8015d2c:	1a21      	subs	r1, r4, r0
 8015d2e:	4628      	mov	r0, r5
 8015d30:	f000 fcc6 	bl	80166c0 <_sbrk_r>
 8015d34:	3001      	adds	r0, #1
 8015d36:	d101      	bne.n	8015d3c <sbrk_aligned+0x38>
 8015d38:	f04f 34ff 	mov.w	r4, #4294967295
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	bd70      	pop	{r4, r5, r6, pc}
 8015d40:	2000b1cc 	.word	0x2000b1cc

08015d44 <_malloc_r>:
 8015d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d48:	1ccd      	adds	r5, r1, #3
 8015d4a:	f025 0503 	bic.w	r5, r5, #3
 8015d4e:	3508      	adds	r5, #8
 8015d50:	2d0c      	cmp	r5, #12
 8015d52:	bf38      	it	cc
 8015d54:	250c      	movcc	r5, #12
 8015d56:	2d00      	cmp	r5, #0
 8015d58:	4607      	mov	r7, r0
 8015d5a:	db01      	blt.n	8015d60 <_malloc_r+0x1c>
 8015d5c:	42a9      	cmp	r1, r5
 8015d5e:	d905      	bls.n	8015d6c <_malloc_r+0x28>
 8015d60:	230c      	movs	r3, #12
 8015d62:	603b      	str	r3, [r7, #0]
 8015d64:	2600      	movs	r6, #0
 8015d66:	4630      	mov	r0, r6
 8015d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d6c:	4e2e      	ldr	r6, [pc, #184]	; (8015e28 <_malloc_r+0xe4>)
 8015d6e:	f000 ff1f 	bl	8016bb0 <__malloc_lock>
 8015d72:	6833      	ldr	r3, [r6, #0]
 8015d74:	461c      	mov	r4, r3
 8015d76:	bb34      	cbnz	r4, 8015dc6 <_malloc_r+0x82>
 8015d78:	4629      	mov	r1, r5
 8015d7a:	4638      	mov	r0, r7
 8015d7c:	f7ff ffc2 	bl	8015d04 <sbrk_aligned>
 8015d80:	1c43      	adds	r3, r0, #1
 8015d82:	4604      	mov	r4, r0
 8015d84:	d14d      	bne.n	8015e22 <_malloc_r+0xde>
 8015d86:	6834      	ldr	r4, [r6, #0]
 8015d88:	4626      	mov	r6, r4
 8015d8a:	2e00      	cmp	r6, #0
 8015d8c:	d140      	bne.n	8015e10 <_malloc_r+0xcc>
 8015d8e:	6823      	ldr	r3, [r4, #0]
 8015d90:	4631      	mov	r1, r6
 8015d92:	4638      	mov	r0, r7
 8015d94:	eb04 0803 	add.w	r8, r4, r3
 8015d98:	f000 fc92 	bl	80166c0 <_sbrk_r>
 8015d9c:	4580      	cmp	r8, r0
 8015d9e:	d13a      	bne.n	8015e16 <_malloc_r+0xd2>
 8015da0:	6821      	ldr	r1, [r4, #0]
 8015da2:	3503      	adds	r5, #3
 8015da4:	1a6d      	subs	r5, r5, r1
 8015da6:	f025 0503 	bic.w	r5, r5, #3
 8015daa:	3508      	adds	r5, #8
 8015dac:	2d0c      	cmp	r5, #12
 8015dae:	bf38      	it	cc
 8015db0:	250c      	movcc	r5, #12
 8015db2:	4629      	mov	r1, r5
 8015db4:	4638      	mov	r0, r7
 8015db6:	f7ff ffa5 	bl	8015d04 <sbrk_aligned>
 8015dba:	3001      	adds	r0, #1
 8015dbc:	d02b      	beq.n	8015e16 <_malloc_r+0xd2>
 8015dbe:	6823      	ldr	r3, [r4, #0]
 8015dc0:	442b      	add	r3, r5
 8015dc2:	6023      	str	r3, [r4, #0]
 8015dc4:	e00e      	b.n	8015de4 <_malloc_r+0xa0>
 8015dc6:	6822      	ldr	r2, [r4, #0]
 8015dc8:	1b52      	subs	r2, r2, r5
 8015dca:	d41e      	bmi.n	8015e0a <_malloc_r+0xc6>
 8015dcc:	2a0b      	cmp	r2, #11
 8015dce:	d916      	bls.n	8015dfe <_malloc_r+0xba>
 8015dd0:	1961      	adds	r1, r4, r5
 8015dd2:	42a3      	cmp	r3, r4
 8015dd4:	6025      	str	r5, [r4, #0]
 8015dd6:	bf18      	it	ne
 8015dd8:	6059      	strne	r1, [r3, #4]
 8015dda:	6863      	ldr	r3, [r4, #4]
 8015ddc:	bf08      	it	eq
 8015dde:	6031      	streq	r1, [r6, #0]
 8015de0:	5162      	str	r2, [r4, r5]
 8015de2:	604b      	str	r3, [r1, #4]
 8015de4:	4638      	mov	r0, r7
 8015de6:	f104 060b 	add.w	r6, r4, #11
 8015dea:	f000 fee7 	bl	8016bbc <__malloc_unlock>
 8015dee:	f026 0607 	bic.w	r6, r6, #7
 8015df2:	1d23      	adds	r3, r4, #4
 8015df4:	1af2      	subs	r2, r6, r3
 8015df6:	d0b6      	beq.n	8015d66 <_malloc_r+0x22>
 8015df8:	1b9b      	subs	r3, r3, r6
 8015dfa:	50a3      	str	r3, [r4, r2]
 8015dfc:	e7b3      	b.n	8015d66 <_malloc_r+0x22>
 8015dfe:	6862      	ldr	r2, [r4, #4]
 8015e00:	42a3      	cmp	r3, r4
 8015e02:	bf0c      	ite	eq
 8015e04:	6032      	streq	r2, [r6, #0]
 8015e06:	605a      	strne	r2, [r3, #4]
 8015e08:	e7ec      	b.n	8015de4 <_malloc_r+0xa0>
 8015e0a:	4623      	mov	r3, r4
 8015e0c:	6864      	ldr	r4, [r4, #4]
 8015e0e:	e7b2      	b.n	8015d76 <_malloc_r+0x32>
 8015e10:	4634      	mov	r4, r6
 8015e12:	6876      	ldr	r6, [r6, #4]
 8015e14:	e7b9      	b.n	8015d8a <_malloc_r+0x46>
 8015e16:	230c      	movs	r3, #12
 8015e18:	603b      	str	r3, [r7, #0]
 8015e1a:	4638      	mov	r0, r7
 8015e1c:	f000 fece 	bl	8016bbc <__malloc_unlock>
 8015e20:	e7a1      	b.n	8015d66 <_malloc_r+0x22>
 8015e22:	6025      	str	r5, [r4, #0]
 8015e24:	e7de      	b.n	8015de4 <_malloc_r+0xa0>
 8015e26:	bf00      	nop
 8015e28:	2000b1c8 	.word	0x2000b1c8

08015e2c <__ssputs_r>:
 8015e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e30:	688e      	ldr	r6, [r1, #8]
 8015e32:	429e      	cmp	r6, r3
 8015e34:	4682      	mov	sl, r0
 8015e36:	460c      	mov	r4, r1
 8015e38:	4690      	mov	r8, r2
 8015e3a:	461f      	mov	r7, r3
 8015e3c:	d838      	bhi.n	8015eb0 <__ssputs_r+0x84>
 8015e3e:	898a      	ldrh	r2, [r1, #12]
 8015e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015e44:	d032      	beq.n	8015eac <__ssputs_r+0x80>
 8015e46:	6825      	ldr	r5, [r4, #0]
 8015e48:	6909      	ldr	r1, [r1, #16]
 8015e4a:	eba5 0901 	sub.w	r9, r5, r1
 8015e4e:	6965      	ldr	r5, [r4, #20]
 8015e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e58:	3301      	adds	r3, #1
 8015e5a:	444b      	add	r3, r9
 8015e5c:	106d      	asrs	r5, r5, #1
 8015e5e:	429d      	cmp	r5, r3
 8015e60:	bf38      	it	cc
 8015e62:	461d      	movcc	r5, r3
 8015e64:	0553      	lsls	r3, r2, #21
 8015e66:	d531      	bpl.n	8015ecc <__ssputs_r+0xa0>
 8015e68:	4629      	mov	r1, r5
 8015e6a:	f7ff ff6b 	bl	8015d44 <_malloc_r>
 8015e6e:	4606      	mov	r6, r0
 8015e70:	b950      	cbnz	r0, 8015e88 <__ssputs_r+0x5c>
 8015e72:	230c      	movs	r3, #12
 8015e74:	f8ca 3000 	str.w	r3, [sl]
 8015e78:	89a3      	ldrh	r3, [r4, #12]
 8015e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e7e:	81a3      	strh	r3, [r4, #12]
 8015e80:	f04f 30ff 	mov.w	r0, #4294967295
 8015e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e88:	6921      	ldr	r1, [r4, #16]
 8015e8a:	464a      	mov	r2, r9
 8015e8c:	f7ff fd18 	bl	80158c0 <memcpy>
 8015e90:	89a3      	ldrh	r3, [r4, #12]
 8015e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e9a:	81a3      	strh	r3, [r4, #12]
 8015e9c:	6126      	str	r6, [r4, #16]
 8015e9e:	6165      	str	r5, [r4, #20]
 8015ea0:	444e      	add	r6, r9
 8015ea2:	eba5 0509 	sub.w	r5, r5, r9
 8015ea6:	6026      	str	r6, [r4, #0]
 8015ea8:	60a5      	str	r5, [r4, #8]
 8015eaa:	463e      	mov	r6, r7
 8015eac:	42be      	cmp	r6, r7
 8015eae:	d900      	bls.n	8015eb2 <__ssputs_r+0x86>
 8015eb0:	463e      	mov	r6, r7
 8015eb2:	6820      	ldr	r0, [r4, #0]
 8015eb4:	4632      	mov	r2, r6
 8015eb6:	4641      	mov	r1, r8
 8015eb8:	f7ff fd10 	bl	80158dc <memmove>
 8015ebc:	68a3      	ldr	r3, [r4, #8]
 8015ebe:	1b9b      	subs	r3, r3, r6
 8015ec0:	60a3      	str	r3, [r4, #8]
 8015ec2:	6823      	ldr	r3, [r4, #0]
 8015ec4:	4433      	add	r3, r6
 8015ec6:	6023      	str	r3, [r4, #0]
 8015ec8:	2000      	movs	r0, #0
 8015eca:	e7db      	b.n	8015e84 <__ssputs_r+0x58>
 8015ecc:	462a      	mov	r2, r5
 8015ece:	f000 fe7b 	bl	8016bc8 <_realloc_r>
 8015ed2:	4606      	mov	r6, r0
 8015ed4:	2800      	cmp	r0, #0
 8015ed6:	d1e1      	bne.n	8015e9c <__ssputs_r+0x70>
 8015ed8:	6921      	ldr	r1, [r4, #16]
 8015eda:	4650      	mov	r0, sl
 8015edc:	f7ff fec6 	bl	8015c6c <_free_r>
 8015ee0:	e7c7      	b.n	8015e72 <__ssputs_r+0x46>
	...

08015ee4 <_svfiprintf_r>:
 8015ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee8:	4698      	mov	r8, r3
 8015eea:	898b      	ldrh	r3, [r1, #12]
 8015eec:	061b      	lsls	r3, r3, #24
 8015eee:	b09d      	sub	sp, #116	; 0x74
 8015ef0:	4607      	mov	r7, r0
 8015ef2:	460d      	mov	r5, r1
 8015ef4:	4614      	mov	r4, r2
 8015ef6:	d50e      	bpl.n	8015f16 <_svfiprintf_r+0x32>
 8015ef8:	690b      	ldr	r3, [r1, #16]
 8015efa:	b963      	cbnz	r3, 8015f16 <_svfiprintf_r+0x32>
 8015efc:	2140      	movs	r1, #64	; 0x40
 8015efe:	f7ff ff21 	bl	8015d44 <_malloc_r>
 8015f02:	6028      	str	r0, [r5, #0]
 8015f04:	6128      	str	r0, [r5, #16]
 8015f06:	b920      	cbnz	r0, 8015f12 <_svfiprintf_r+0x2e>
 8015f08:	230c      	movs	r3, #12
 8015f0a:	603b      	str	r3, [r7, #0]
 8015f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f10:	e0d1      	b.n	80160b6 <_svfiprintf_r+0x1d2>
 8015f12:	2340      	movs	r3, #64	; 0x40
 8015f14:	616b      	str	r3, [r5, #20]
 8015f16:	2300      	movs	r3, #0
 8015f18:	9309      	str	r3, [sp, #36]	; 0x24
 8015f1a:	2320      	movs	r3, #32
 8015f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f24:	2330      	movs	r3, #48	; 0x30
 8015f26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80160d0 <_svfiprintf_r+0x1ec>
 8015f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f2e:	f04f 0901 	mov.w	r9, #1
 8015f32:	4623      	mov	r3, r4
 8015f34:	469a      	mov	sl, r3
 8015f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f3a:	b10a      	cbz	r2, 8015f40 <_svfiprintf_r+0x5c>
 8015f3c:	2a25      	cmp	r2, #37	; 0x25
 8015f3e:	d1f9      	bne.n	8015f34 <_svfiprintf_r+0x50>
 8015f40:	ebba 0b04 	subs.w	fp, sl, r4
 8015f44:	d00b      	beq.n	8015f5e <_svfiprintf_r+0x7a>
 8015f46:	465b      	mov	r3, fp
 8015f48:	4622      	mov	r2, r4
 8015f4a:	4629      	mov	r1, r5
 8015f4c:	4638      	mov	r0, r7
 8015f4e:	f7ff ff6d 	bl	8015e2c <__ssputs_r>
 8015f52:	3001      	adds	r0, #1
 8015f54:	f000 80aa 	beq.w	80160ac <_svfiprintf_r+0x1c8>
 8015f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f5a:	445a      	add	r2, fp
 8015f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8015f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	f000 80a2 	beq.w	80160ac <_svfiprintf_r+0x1c8>
 8015f68:	2300      	movs	r3, #0
 8015f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8015f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f72:	f10a 0a01 	add.w	sl, sl, #1
 8015f76:	9304      	str	r3, [sp, #16]
 8015f78:	9307      	str	r3, [sp, #28]
 8015f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8015f80:	4654      	mov	r4, sl
 8015f82:	2205      	movs	r2, #5
 8015f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f88:	4851      	ldr	r0, [pc, #324]	; (80160d0 <_svfiprintf_r+0x1ec>)
 8015f8a:	f7ea f949 	bl	8000220 <memchr>
 8015f8e:	9a04      	ldr	r2, [sp, #16]
 8015f90:	b9d8      	cbnz	r0, 8015fca <_svfiprintf_r+0xe6>
 8015f92:	06d0      	lsls	r0, r2, #27
 8015f94:	bf44      	itt	mi
 8015f96:	2320      	movmi	r3, #32
 8015f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f9c:	0711      	lsls	r1, r2, #28
 8015f9e:	bf44      	itt	mi
 8015fa0:	232b      	movmi	r3, #43	; 0x2b
 8015fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8015faa:	2b2a      	cmp	r3, #42	; 0x2a
 8015fac:	d015      	beq.n	8015fda <_svfiprintf_r+0xf6>
 8015fae:	9a07      	ldr	r2, [sp, #28]
 8015fb0:	4654      	mov	r4, sl
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	f04f 0c0a 	mov.w	ip, #10
 8015fb8:	4621      	mov	r1, r4
 8015fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fbe:	3b30      	subs	r3, #48	; 0x30
 8015fc0:	2b09      	cmp	r3, #9
 8015fc2:	d94e      	bls.n	8016062 <_svfiprintf_r+0x17e>
 8015fc4:	b1b0      	cbz	r0, 8015ff4 <_svfiprintf_r+0x110>
 8015fc6:	9207      	str	r2, [sp, #28]
 8015fc8:	e014      	b.n	8015ff4 <_svfiprintf_r+0x110>
 8015fca:	eba0 0308 	sub.w	r3, r0, r8
 8015fce:	fa09 f303 	lsl.w	r3, r9, r3
 8015fd2:	4313      	orrs	r3, r2
 8015fd4:	9304      	str	r3, [sp, #16]
 8015fd6:	46a2      	mov	sl, r4
 8015fd8:	e7d2      	b.n	8015f80 <_svfiprintf_r+0x9c>
 8015fda:	9b03      	ldr	r3, [sp, #12]
 8015fdc:	1d19      	adds	r1, r3, #4
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	9103      	str	r1, [sp, #12]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	bfbb      	ittet	lt
 8015fe6:	425b      	neglt	r3, r3
 8015fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8015fec:	9307      	strge	r3, [sp, #28]
 8015fee:	9307      	strlt	r3, [sp, #28]
 8015ff0:	bfb8      	it	lt
 8015ff2:	9204      	strlt	r2, [sp, #16]
 8015ff4:	7823      	ldrb	r3, [r4, #0]
 8015ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8015ff8:	d10c      	bne.n	8016014 <_svfiprintf_r+0x130>
 8015ffa:	7863      	ldrb	r3, [r4, #1]
 8015ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8015ffe:	d135      	bne.n	801606c <_svfiprintf_r+0x188>
 8016000:	9b03      	ldr	r3, [sp, #12]
 8016002:	1d1a      	adds	r2, r3, #4
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	9203      	str	r2, [sp, #12]
 8016008:	2b00      	cmp	r3, #0
 801600a:	bfb8      	it	lt
 801600c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016010:	3402      	adds	r4, #2
 8016012:	9305      	str	r3, [sp, #20]
 8016014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80160e0 <_svfiprintf_r+0x1fc>
 8016018:	7821      	ldrb	r1, [r4, #0]
 801601a:	2203      	movs	r2, #3
 801601c:	4650      	mov	r0, sl
 801601e:	f7ea f8ff 	bl	8000220 <memchr>
 8016022:	b140      	cbz	r0, 8016036 <_svfiprintf_r+0x152>
 8016024:	2340      	movs	r3, #64	; 0x40
 8016026:	eba0 000a 	sub.w	r0, r0, sl
 801602a:	fa03 f000 	lsl.w	r0, r3, r0
 801602e:	9b04      	ldr	r3, [sp, #16]
 8016030:	4303      	orrs	r3, r0
 8016032:	3401      	adds	r4, #1
 8016034:	9304      	str	r3, [sp, #16]
 8016036:	f814 1b01 	ldrb.w	r1, [r4], #1
 801603a:	4826      	ldr	r0, [pc, #152]	; (80160d4 <_svfiprintf_r+0x1f0>)
 801603c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016040:	2206      	movs	r2, #6
 8016042:	f7ea f8ed 	bl	8000220 <memchr>
 8016046:	2800      	cmp	r0, #0
 8016048:	d038      	beq.n	80160bc <_svfiprintf_r+0x1d8>
 801604a:	4b23      	ldr	r3, [pc, #140]	; (80160d8 <_svfiprintf_r+0x1f4>)
 801604c:	bb1b      	cbnz	r3, 8016096 <_svfiprintf_r+0x1b2>
 801604e:	9b03      	ldr	r3, [sp, #12]
 8016050:	3307      	adds	r3, #7
 8016052:	f023 0307 	bic.w	r3, r3, #7
 8016056:	3308      	adds	r3, #8
 8016058:	9303      	str	r3, [sp, #12]
 801605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801605c:	4433      	add	r3, r6
 801605e:	9309      	str	r3, [sp, #36]	; 0x24
 8016060:	e767      	b.n	8015f32 <_svfiprintf_r+0x4e>
 8016062:	fb0c 3202 	mla	r2, ip, r2, r3
 8016066:	460c      	mov	r4, r1
 8016068:	2001      	movs	r0, #1
 801606a:	e7a5      	b.n	8015fb8 <_svfiprintf_r+0xd4>
 801606c:	2300      	movs	r3, #0
 801606e:	3401      	adds	r4, #1
 8016070:	9305      	str	r3, [sp, #20]
 8016072:	4619      	mov	r1, r3
 8016074:	f04f 0c0a 	mov.w	ip, #10
 8016078:	4620      	mov	r0, r4
 801607a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801607e:	3a30      	subs	r2, #48	; 0x30
 8016080:	2a09      	cmp	r2, #9
 8016082:	d903      	bls.n	801608c <_svfiprintf_r+0x1a8>
 8016084:	2b00      	cmp	r3, #0
 8016086:	d0c5      	beq.n	8016014 <_svfiprintf_r+0x130>
 8016088:	9105      	str	r1, [sp, #20]
 801608a:	e7c3      	b.n	8016014 <_svfiprintf_r+0x130>
 801608c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016090:	4604      	mov	r4, r0
 8016092:	2301      	movs	r3, #1
 8016094:	e7f0      	b.n	8016078 <_svfiprintf_r+0x194>
 8016096:	ab03      	add	r3, sp, #12
 8016098:	9300      	str	r3, [sp, #0]
 801609a:	462a      	mov	r2, r5
 801609c:	4b0f      	ldr	r3, [pc, #60]	; (80160dc <_svfiprintf_r+0x1f8>)
 801609e:	a904      	add	r1, sp, #16
 80160a0:	4638      	mov	r0, r7
 80160a2:	f3af 8000 	nop.w
 80160a6:	1c42      	adds	r2, r0, #1
 80160a8:	4606      	mov	r6, r0
 80160aa:	d1d6      	bne.n	801605a <_svfiprintf_r+0x176>
 80160ac:	89ab      	ldrh	r3, [r5, #12]
 80160ae:	065b      	lsls	r3, r3, #25
 80160b0:	f53f af2c 	bmi.w	8015f0c <_svfiprintf_r+0x28>
 80160b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80160b6:	b01d      	add	sp, #116	; 0x74
 80160b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160bc:	ab03      	add	r3, sp, #12
 80160be:	9300      	str	r3, [sp, #0]
 80160c0:	462a      	mov	r2, r5
 80160c2:	4b06      	ldr	r3, [pc, #24]	; (80160dc <_svfiprintf_r+0x1f8>)
 80160c4:	a904      	add	r1, sp, #16
 80160c6:	4638      	mov	r0, r7
 80160c8:	f000 f9d4 	bl	8016474 <_printf_i>
 80160cc:	e7eb      	b.n	80160a6 <_svfiprintf_r+0x1c2>
 80160ce:	bf00      	nop
 80160d0:	0801c5d8 	.word	0x0801c5d8
 80160d4:	0801c5e2 	.word	0x0801c5e2
 80160d8:	00000000 	.word	0x00000000
 80160dc:	08015e2d 	.word	0x08015e2d
 80160e0:	0801c5de 	.word	0x0801c5de

080160e4 <__sfputc_r>:
 80160e4:	6893      	ldr	r3, [r2, #8]
 80160e6:	3b01      	subs	r3, #1
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	b410      	push	{r4}
 80160ec:	6093      	str	r3, [r2, #8]
 80160ee:	da08      	bge.n	8016102 <__sfputc_r+0x1e>
 80160f0:	6994      	ldr	r4, [r2, #24]
 80160f2:	42a3      	cmp	r3, r4
 80160f4:	db01      	blt.n	80160fa <__sfputc_r+0x16>
 80160f6:	290a      	cmp	r1, #10
 80160f8:	d103      	bne.n	8016102 <__sfputc_r+0x1e>
 80160fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160fe:	f000 bb33 	b.w	8016768 <__swbuf_r>
 8016102:	6813      	ldr	r3, [r2, #0]
 8016104:	1c58      	adds	r0, r3, #1
 8016106:	6010      	str	r0, [r2, #0]
 8016108:	7019      	strb	r1, [r3, #0]
 801610a:	4608      	mov	r0, r1
 801610c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016110:	4770      	bx	lr

08016112 <__sfputs_r>:
 8016112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016114:	4606      	mov	r6, r0
 8016116:	460f      	mov	r7, r1
 8016118:	4614      	mov	r4, r2
 801611a:	18d5      	adds	r5, r2, r3
 801611c:	42ac      	cmp	r4, r5
 801611e:	d101      	bne.n	8016124 <__sfputs_r+0x12>
 8016120:	2000      	movs	r0, #0
 8016122:	e007      	b.n	8016134 <__sfputs_r+0x22>
 8016124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016128:	463a      	mov	r2, r7
 801612a:	4630      	mov	r0, r6
 801612c:	f7ff ffda 	bl	80160e4 <__sfputc_r>
 8016130:	1c43      	adds	r3, r0, #1
 8016132:	d1f3      	bne.n	801611c <__sfputs_r+0xa>
 8016134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016138 <_vfiprintf_r>:
 8016138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613c:	460d      	mov	r5, r1
 801613e:	b09d      	sub	sp, #116	; 0x74
 8016140:	4614      	mov	r4, r2
 8016142:	4698      	mov	r8, r3
 8016144:	4606      	mov	r6, r0
 8016146:	b118      	cbz	r0, 8016150 <_vfiprintf_r+0x18>
 8016148:	6983      	ldr	r3, [r0, #24]
 801614a:	b90b      	cbnz	r3, 8016150 <_vfiprintf_r+0x18>
 801614c:	f7ff fcd4 	bl	8015af8 <__sinit>
 8016150:	4b89      	ldr	r3, [pc, #548]	; (8016378 <_vfiprintf_r+0x240>)
 8016152:	429d      	cmp	r5, r3
 8016154:	d11b      	bne.n	801618e <_vfiprintf_r+0x56>
 8016156:	6875      	ldr	r5, [r6, #4]
 8016158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801615a:	07d9      	lsls	r1, r3, #31
 801615c:	d405      	bmi.n	801616a <_vfiprintf_r+0x32>
 801615e:	89ab      	ldrh	r3, [r5, #12]
 8016160:	059a      	lsls	r2, r3, #22
 8016162:	d402      	bmi.n	801616a <_vfiprintf_r+0x32>
 8016164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016166:	f7ff fd77 	bl	8015c58 <__retarget_lock_acquire_recursive>
 801616a:	89ab      	ldrh	r3, [r5, #12]
 801616c:	071b      	lsls	r3, r3, #28
 801616e:	d501      	bpl.n	8016174 <_vfiprintf_r+0x3c>
 8016170:	692b      	ldr	r3, [r5, #16]
 8016172:	b9eb      	cbnz	r3, 80161b0 <_vfiprintf_r+0x78>
 8016174:	4629      	mov	r1, r5
 8016176:	4630      	mov	r0, r6
 8016178:	f000 fb5a 	bl	8016830 <__swsetup_r>
 801617c:	b1c0      	cbz	r0, 80161b0 <_vfiprintf_r+0x78>
 801617e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016180:	07dc      	lsls	r4, r3, #31
 8016182:	d50e      	bpl.n	80161a2 <_vfiprintf_r+0x6a>
 8016184:	f04f 30ff 	mov.w	r0, #4294967295
 8016188:	b01d      	add	sp, #116	; 0x74
 801618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801618e:	4b7b      	ldr	r3, [pc, #492]	; (801637c <_vfiprintf_r+0x244>)
 8016190:	429d      	cmp	r5, r3
 8016192:	d101      	bne.n	8016198 <_vfiprintf_r+0x60>
 8016194:	68b5      	ldr	r5, [r6, #8]
 8016196:	e7df      	b.n	8016158 <_vfiprintf_r+0x20>
 8016198:	4b79      	ldr	r3, [pc, #484]	; (8016380 <_vfiprintf_r+0x248>)
 801619a:	429d      	cmp	r5, r3
 801619c:	bf08      	it	eq
 801619e:	68f5      	ldreq	r5, [r6, #12]
 80161a0:	e7da      	b.n	8016158 <_vfiprintf_r+0x20>
 80161a2:	89ab      	ldrh	r3, [r5, #12]
 80161a4:	0598      	lsls	r0, r3, #22
 80161a6:	d4ed      	bmi.n	8016184 <_vfiprintf_r+0x4c>
 80161a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80161aa:	f7ff fd56 	bl	8015c5a <__retarget_lock_release_recursive>
 80161ae:	e7e9      	b.n	8016184 <_vfiprintf_r+0x4c>
 80161b0:	2300      	movs	r3, #0
 80161b2:	9309      	str	r3, [sp, #36]	; 0x24
 80161b4:	2320      	movs	r3, #32
 80161b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80161ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80161be:	2330      	movs	r3, #48	; 0x30
 80161c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016384 <_vfiprintf_r+0x24c>
 80161c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80161c8:	f04f 0901 	mov.w	r9, #1
 80161cc:	4623      	mov	r3, r4
 80161ce:	469a      	mov	sl, r3
 80161d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161d4:	b10a      	cbz	r2, 80161da <_vfiprintf_r+0xa2>
 80161d6:	2a25      	cmp	r2, #37	; 0x25
 80161d8:	d1f9      	bne.n	80161ce <_vfiprintf_r+0x96>
 80161da:	ebba 0b04 	subs.w	fp, sl, r4
 80161de:	d00b      	beq.n	80161f8 <_vfiprintf_r+0xc0>
 80161e0:	465b      	mov	r3, fp
 80161e2:	4622      	mov	r2, r4
 80161e4:	4629      	mov	r1, r5
 80161e6:	4630      	mov	r0, r6
 80161e8:	f7ff ff93 	bl	8016112 <__sfputs_r>
 80161ec:	3001      	adds	r0, #1
 80161ee:	f000 80aa 	beq.w	8016346 <_vfiprintf_r+0x20e>
 80161f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80161f4:	445a      	add	r2, fp
 80161f6:	9209      	str	r2, [sp, #36]	; 0x24
 80161f8:	f89a 3000 	ldrb.w	r3, [sl]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	f000 80a2 	beq.w	8016346 <_vfiprintf_r+0x20e>
 8016202:	2300      	movs	r3, #0
 8016204:	f04f 32ff 	mov.w	r2, #4294967295
 8016208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801620c:	f10a 0a01 	add.w	sl, sl, #1
 8016210:	9304      	str	r3, [sp, #16]
 8016212:	9307      	str	r3, [sp, #28]
 8016214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016218:	931a      	str	r3, [sp, #104]	; 0x68
 801621a:	4654      	mov	r4, sl
 801621c:	2205      	movs	r2, #5
 801621e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016222:	4858      	ldr	r0, [pc, #352]	; (8016384 <_vfiprintf_r+0x24c>)
 8016224:	f7e9 fffc 	bl	8000220 <memchr>
 8016228:	9a04      	ldr	r2, [sp, #16]
 801622a:	b9d8      	cbnz	r0, 8016264 <_vfiprintf_r+0x12c>
 801622c:	06d1      	lsls	r1, r2, #27
 801622e:	bf44      	itt	mi
 8016230:	2320      	movmi	r3, #32
 8016232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016236:	0713      	lsls	r3, r2, #28
 8016238:	bf44      	itt	mi
 801623a:	232b      	movmi	r3, #43	; 0x2b
 801623c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016240:	f89a 3000 	ldrb.w	r3, [sl]
 8016244:	2b2a      	cmp	r3, #42	; 0x2a
 8016246:	d015      	beq.n	8016274 <_vfiprintf_r+0x13c>
 8016248:	9a07      	ldr	r2, [sp, #28]
 801624a:	4654      	mov	r4, sl
 801624c:	2000      	movs	r0, #0
 801624e:	f04f 0c0a 	mov.w	ip, #10
 8016252:	4621      	mov	r1, r4
 8016254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016258:	3b30      	subs	r3, #48	; 0x30
 801625a:	2b09      	cmp	r3, #9
 801625c:	d94e      	bls.n	80162fc <_vfiprintf_r+0x1c4>
 801625e:	b1b0      	cbz	r0, 801628e <_vfiprintf_r+0x156>
 8016260:	9207      	str	r2, [sp, #28]
 8016262:	e014      	b.n	801628e <_vfiprintf_r+0x156>
 8016264:	eba0 0308 	sub.w	r3, r0, r8
 8016268:	fa09 f303 	lsl.w	r3, r9, r3
 801626c:	4313      	orrs	r3, r2
 801626e:	9304      	str	r3, [sp, #16]
 8016270:	46a2      	mov	sl, r4
 8016272:	e7d2      	b.n	801621a <_vfiprintf_r+0xe2>
 8016274:	9b03      	ldr	r3, [sp, #12]
 8016276:	1d19      	adds	r1, r3, #4
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	9103      	str	r1, [sp, #12]
 801627c:	2b00      	cmp	r3, #0
 801627e:	bfbb      	ittet	lt
 8016280:	425b      	neglt	r3, r3
 8016282:	f042 0202 	orrlt.w	r2, r2, #2
 8016286:	9307      	strge	r3, [sp, #28]
 8016288:	9307      	strlt	r3, [sp, #28]
 801628a:	bfb8      	it	lt
 801628c:	9204      	strlt	r2, [sp, #16]
 801628e:	7823      	ldrb	r3, [r4, #0]
 8016290:	2b2e      	cmp	r3, #46	; 0x2e
 8016292:	d10c      	bne.n	80162ae <_vfiprintf_r+0x176>
 8016294:	7863      	ldrb	r3, [r4, #1]
 8016296:	2b2a      	cmp	r3, #42	; 0x2a
 8016298:	d135      	bne.n	8016306 <_vfiprintf_r+0x1ce>
 801629a:	9b03      	ldr	r3, [sp, #12]
 801629c:	1d1a      	adds	r2, r3, #4
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	9203      	str	r2, [sp, #12]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	bfb8      	it	lt
 80162a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80162aa:	3402      	adds	r4, #2
 80162ac:	9305      	str	r3, [sp, #20]
 80162ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016394 <_vfiprintf_r+0x25c>
 80162b2:	7821      	ldrb	r1, [r4, #0]
 80162b4:	2203      	movs	r2, #3
 80162b6:	4650      	mov	r0, sl
 80162b8:	f7e9 ffb2 	bl	8000220 <memchr>
 80162bc:	b140      	cbz	r0, 80162d0 <_vfiprintf_r+0x198>
 80162be:	2340      	movs	r3, #64	; 0x40
 80162c0:	eba0 000a 	sub.w	r0, r0, sl
 80162c4:	fa03 f000 	lsl.w	r0, r3, r0
 80162c8:	9b04      	ldr	r3, [sp, #16]
 80162ca:	4303      	orrs	r3, r0
 80162cc:	3401      	adds	r4, #1
 80162ce:	9304      	str	r3, [sp, #16]
 80162d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162d4:	482c      	ldr	r0, [pc, #176]	; (8016388 <_vfiprintf_r+0x250>)
 80162d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80162da:	2206      	movs	r2, #6
 80162dc:	f7e9 ffa0 	bl	8000220 <memchr>
 80162e0:	2800      	cmp	r0, #0
 80162e2:	d03f      	beq.n	8016364 <_vfiprintf_r+0x22c>
 80162e4:	4b29      	ldr	r3, [pc, #164]	; (801638c <_vfiprintf_r+0x254>)
 80162e6:	bb1b      	cbnz	r3, 8016330 <_vfiprintf_r+0x1f8>
 80162e8:	9b03      	ldr	r3, [sp, #12]
 80162ea:	3307      	adds	r3, #7
 80162ec:	f023 0307 	bic.w	r3, r3, #7
 80162f0:	3308      	adds	r3, #8
 80162f2:	9303      	str	r3, [sp, #12]
 80162f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162f6:	443b      	add	r3, r7
 80162f8:	9309      	str	r3, [sp, #36]	; 0x24
 80162fa:	e767      	b.n	80161cc <_vfiprintf_r+0x94>
 80162fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8016300:	460c      	mov	r4, r1
 8016302:	2001      	movs	r0, #1
 8016304:	e7a5      	b.n	8016252 <_vfiprintf_r+0x11a>
 8016306:	2300      	movs	r3, #0
 8016308:	3401      	adds	r4, #1
 801630a:	9305      	str	r3, [sp, #20]
 801630c:	4619      	mov	r1, r3
 801630e:	f04f 0c0a 	mov.w	ip, #10
 8016312:	4620      	mov	r0, r4
 8016314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016318:	3a30      	subs	r2, #48	; 0x30
 801631a:	2a09      	cmp	r2, #9
 801631c:	d903      	bls.n	8016326 <_vfiprintf_r+0x1ee>
 801631e:	2b00      	cmp	r3, #0
 8016320:	d0c5      	beq.n	80162ae <_vfiprintf_r+0x176>
 8016322:	9105      	str	r1, [sp, #20]
 8016324:	e7c3      	b.n	80162ae <_vfiprintf_r+0x176>
 8016326:	fb0c 2101 	mla	r1, ip, r1, r2
 801632a:	4604      	mov	r4, r0
 801632c:	2301      	movs	r3, #1
 801632e:	e7f0      	b.n	8016312 <_vfiprintf_r+0x1da>
 8016330:	ab03      	add	r3, sp, #12
 8016332:	9300      	str	r3, [sp, #0]
 8016334:	462a      	mov	r2, r5
 8016336:	4b16      	ldr	r3, [pc, #88]	; (8016390 <_vfiprintf_r+0x258>)
 8016338:	a904      	add	r1, sp, #16
 801633a:	4630      	mov	r0, r6
 801633c:	f3af 8000 	nop.w
 8016340:	4607      	mov	r7, r0
 8016342:	1c78      	adds	r0, r7, #1
 8016344:	d1d6      	bne.n	80162f4 <_vfiprintf_r+0x1bc>
 8016346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016348:	07d9      	lsls	r1, r3, #31
 801634a:	d405      	bmi.n	8016358 <_vfiprintf_r+0x220>
 801634c:	89ab      	ldrh	r3, [r5, #12]
 801634e:	059a      	lsls	r2, r3, #22
 8016350:	d402      	bmi.n	8016358 <_vfiprintf_r+0x220>
 8016352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016354:	f7ff fc81 	bl	8015c5a <__retarget_lock_release_recursive>
 8016358:	89ab      	ldrh	r3, [r5, #12]
 801635a:	065b      	lsls	r3, r3, #25
 801635c:	f53f af12 	bmi.w	8016184 <_vfiprintf_r+0x4c>
 8016360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016362:	e711      	b.n	8016188 <_vfiprintf_r+0x50>
 8016364:	ab03      	add	r3, sp, #12
 8016366:	9300      	str	r3, [sp, #0]
 8016368:	462a      	mov	r2, r5
 801636a:	4b09      	ldr	r3, [pc, #36]	; (8016390 <_vfiprintf_r+0x258>)
 801636c:	a904      	add	r1, sp, #16
 801636e:	4630      	mov	r0, r6
 8016370:	f000 f880 	bl	8016474 <_printf_i>
 8016374:	e7e4      	b.n	8016340 <_vfiprintf_r+0x208>
 8016376:	bf00      	nop
 8016378:	0801c598 	.word	0x0801c598
 801637c:	0801c5b8 	.word	0x0801c5b8
 8016380:	0801c578 	.word	0x0801c578
 8016384:	0801c5d8 	.word	0x0801c5d8
 8016388:	0801c5e2 	.word	0x0801c5e2
 801638c:	00000000 	.word	0x00000000
 8016390:	08016113 	.word	0x08016113
 8016394:	0801c5de 	.word	0x0801c5de

08016398 <_printf_common>:
 8016398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801639c:	4616      	mov	r6, r2
 801639e:	4699      	mov	r9, r3
 80163a0:	688a      	ldr	r2, [r1, #8]
 80163a2:	690b      	ldr	r3, [r1, #16]
 80163a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80163a8:	4293      	cmp	r3, r2
 80163aa:	bfb8      	it	lt
 80163ac:	4613      	movlt	r3, r2
 80163ae:	6033      	str	r3, [r6, #0]
 80163b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80163b4:	4607      	mov	r7, r0
 80163b6:	460c      	mov	r4, r1
 80163b8:	b10a      	cbz	r2, 80163be <_printf_common+0x26>
 80163ba:	3301      	adds	r3, #1
 80163bc:	6033      	str	r3, [r6, #0]
 80163be:	6823      	ldr	r3, [r4, #0]
 80163c0:	0699      	lsls	r1, r3, #26
 80163c2:	bf42      	ittt	mi
 80163c4:	6833      	ldrmi	r3, [r6, #0]
 80163c6:	3302      	addmi	r3, #2
 80163c8:	6033      	strmi	r3, [r6, #0]
 80163ca:	6825      	ldr	r5, [r4, #0]
 80163cc:	f015 0506 	ands.w	r5, r5, #6
 80163d0:	d106      	bne.n	80163e0 <_printf_common+0x48>
 80163d2:	f104 0a19 	add.w	sl, r4, #25
 80163d6:	68e3      	ldr	r3, [r4, #12]
 80163d8:	6832      	ldr	r2, [r6, #0]
 80163da:	1a9b      	subs	r3, r3, r2
 80163dc:	42ab      	cmp	r3, r5
 80163de:	dc26      	bgt.n	801642e <_printf_common+0x96>
 80163e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80163e4:	1e13      	subs	r3, r2, #0
 80163e6:	6822      	ldr	r2, [r4, #0]
 80163e8:	bf18      	it	ne
 80163ea:	2301      	movne	r3, #1
 80163ec:	0692      	lsls	r2, r2, #26
 80163ee:	d42b      	bmi.n	8016448 <_printf_common+0xb0>
 80163f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80163f4:	4649      	mov	r1, r9
 80163f6:	4638      	mov	r0, r7
 80163f8:	47c0      	blx	r8
 80163fa:	3001      	adds	r0, #1
 80163fc:	d01e      	beq.n	801643c <_printf_common+0xa4>
 80163fe:	6823      	ldr	r3, [r4, #0]
 8016400:	68e5      	ldr	r5, [r4, #12]
 8016402:	6832      	ldr	r2, [r6, #0]
 8016404:	f003 0306 	and.w	r3, r3, #6
 8016408:	2b04      	cmp	r3, #4
 801640a:	bf08      	it	eq
 801640c:	1aad      	subeq	r5, r5, r2
 801640e:	68a3      	ldr	r3, [r4, #8]
 8016410:	6922      	ldr	r2, [r4, #16]
 8016412:	bf0c      	ite	eq
 8016414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016418:	2500      	movne	r5, #0
 801641a:	4293      	cmp	r3, r2
 801641c:	bfc4      	itt	gt
 801641e:	1a9b      	subgt	r3, r3, r2
 8016420:	18ed      	addgt	r5, r5, r3
 8016422:	2600      	movs	r6, #0
 8016424:	341a      	adds	r4, #26
 8016426:	42b5      	cmp	r5, r6
 8016428:	d11a      	bne.n	8016460 <_printf_common+0xc8>
 801642a:	2000      	movs	r0, #0
 801642c:	e008      	b.n	8016440 <_printf_common+0xa8>
 801642e:	2301      	movs	r3, #1
 8016430:	4652      	mov	r2, sl
 8016432:	4649      	mov	r1, r9
 8016434:	4638      	mov	r0, r7
 8016436:	47c0      	blx	r8
 8016438:	3001      	adds	r0, #1
 801643a:	d103      	bne.n	8016444 <_printf_common+0xac>
 801643c:	f04f 30ff 	mov.w	r0, #4294967295
 8016440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016444:	3501      	adds	r5, #1
 8016446:	e7c6      	b.n	80163d6 <_printf_common+0x3e>
 8016448:	18e1      	adds	r1, r4, r3
 801644a:	1c5a      	adds	r2, r3, #1
 801644c:	2030      	movs	r0, #48	; 0x30
 801644e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016452:	4422      	add	r2, r4
 8016454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801645c:	3302      	adds	r3, #2
 801645e:	e7c7      	b.n	80163f0 <_printf_common+0x58>
 8016460:	2301      	movs	r3, #1
 8016462:	4622      	mov	r2, r4
 8016464:	4649      	mov	r1, r9
 8016466:	4638      	mov	r0, r7
 8016468:	47c0      	blx	r8
 801646a:	3001      	adds	r0, #1
 801646c:	d0e6      	beq.n	801643c <_printf_common+0xa4>
 801646e:	3601      	adds	r6, #1
 8016470:	e7d9      	b.n	8016426 <_printf_common+0x8e>
	...

08016474 <_printf_i>:
 8016474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016478:	7e0f      	ldrb	r7, [r1, #24]
 801647a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801647c:	2f78      	cmp	r7, #120	; 0x78
 801647e:	4691      	mov	r9, r2
 8016480:	4680      	mov	r8, r0
 8016482:	460c      	mov	r4, r1
 8016484:	469a      	mov	sl, r3
 8016486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801648a:	d807      	bhi.n	801649c <_printf_i+0x28>
 801648c:	2f62      	cmp	r7, #98	; 0x62
 801648e:	d80a      	bhi.n	80164a6 <_printf_i+0x32>
 8016490:	2f00      	cmp	r7, #0
 8016492:	f000 80d8 	beq.w	8016646 <_printf_i+0x1d2>
 8016496:	2f58      	cmp	r7, #88	; 0x58
 8016498:	f000 80a3 	beq.w	80165e2 <_printf_i+0x16e>
 801649c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80164a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80164a4:	e03a      	b.n	801651c <_printf_i+0xa8>
 80164a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80164aa:	2b15      	cmp	r3, #21
 80164ac:	d8f6      	bhi.n	801649c <_printf_i+0x28>
 80164ae:	a101      	add	r1, pc, #4	; (adr r1, 80164b4 <_printf_i+0x40>)
 80164b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80164b4:	0801650d 	.word	0x0801650d
 80164b8:	08016521 	.word	0x08016521
 80164bc:	0801649d 	.word	0x0801649d
 80164c0:	0801649d 	.word	0x0801649d
 80164c4:	0801649d 	.word	0x0801649d
 80164c8:	0801649d 	.word	0x0801649d
 80164cc:	08016521 	.word	0x08016521
 80164d0:	0801649d 	.word	0x0801649d
 80164d4:	0801649d 	.word	0x0801649d
 80164d8:	0801649d 	.word	0x0801649d
 80164dc:	0801649d 	.word	0x0801649d
 80164e0:	0801662d 	.word	0x0801662d
 80164e4:	08016551 	.word	0x08016551
 80164e8:	0801660f 	.word	0x0801660f
 80164ec:	0801649d 	.word	0x0801649d
 80164f0:	0801649d 	.word	0x0801649d
 80164f4:	0801664f 	.word	0x0801664f
 80164f8:	0801649d 	.word	0x0801649d
 80164fc:	08016551 	.word	0x08016551
 8016500:	0801649d 	.word	0x0801649d
 8016504:	0801649d 	.word	0x0801649d
 8016508:	08016617 	.word	0x08016617
 801650c:	682b      	ldr	r3, [r5, #0]
 801650e:	1d1a      	adds	r2, r3, #4
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	602a      	str	r2, [r5, #0]
 8016514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801651c:	2301      	movs	r3, #1
 801651e:	e0a3      	b.n	8016668 <_printf_i+0x1f4>
 8016520:	6820      	ldr	r0, [r4, #0]
 8016522:	6829      	ldr	r1, [r5, #0]
 8016524:	0606      	lsls	r6, r0, #24
 8016526:	f101 0304 	add.w	r3, r1, #4
 801652a:	d50a      	bpl.n	8016542 <_printf_i+0xce>
 801652c:	680e      	ldr	r6, [r1, #0]
 801652e:	602b      	str	r3, [r5, #0]
 8016530:	2e00      	cmp	r6, #0
 8016532:	da03      	bge.n	801653c <_printf_i+0xc8>
 8016534:	232d      	movs	r3, #45	; 0x2d
 8016536:	4276      	negs	r6, r6
 8016538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801653c:	485e      	ldr	r0, [pc, #376]	; (80166b8 <_printf_i+0x244>)
 801653e:	230a      	movs	r3, #10
 8016540:	e019      	b.n	8016576 <_printf_i+0x102>
 8016542:	680e      	ldr	r6, [r1, #0]
 8016544:	602b      	str	r3, [r5, #0]
 8016546:	f010 0f40 	tst.w	r0, #64	; 0x40
 801654a:	bf18      	it	ne
 801654c:	b236      	sxthne	r6, r6
 801654e:	e7ef      	b.n	8016530 <_printf_i+0xbc>
 8016550:	682b      	ldr	r3, [r5, #0]
 8016552:	6820      	ldr	r0, [r4, #0]
 8016554:	1d19      	adds	r1, r3, #4
 8016556:	6029      	str	r1, [r5, #0]
 8016558:	0601      	lsls	r1, r0, #24
 801655a:	d501      	bpl.n	8016560 <_printf_i+0xec>
 801655c:	681e      	ldr	r6, [r3, #0]
 801655e:	e002      	b.n	8016566 <_printf_i+0xf2>
 8016560:	0646      	lsls	r6, r0, #25
 8016562:	d5fb      	bpl.n	801655c <_printf_i+0xe8>
 8016564:	881e      	ldrh	r6, [r3, #0]
 8016566:	4854      	ldr	r0, [pc, #336]	; (80166b8 <_printf_i+0x244>)
 8016568:	2f6f      	cmp	r7, #111	; 0x6f
 801656a:	bf0c      	ite	eq
 801656c:	2308      	moveq	r3, #8
 801656e:	230a      	movne	r3, #10
 8016570:	2100      	movs	r1, #0
 8016572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016576:	6865      	ldr	r5, [r4, #4]
 8016578:	60a5      	str	r5, [r4, #8]
 801657a:	2d00      	cmp	r5, #0
 801657c:	bfa2      	ittt	ge
 801657e:	6821      	ldrge	r1, [r4, #0]
 8016580:	f021 0104 	bicge.w	r1, r1, #4
 8016584:	6021      	strge	r1, [r4, #0]
 8016586:	b90e      	cbnz	r6, 801658c <_printf_i+0x118>
 8016588:	2d00      	cmp	r5, #0
 801658a:	d04d      	beq.n	8016628 <_printf_i+0x1b4>
 801658c:	4615      	mov	r5, r2
 801658e:	fbb6 f1f3 	udiv	r1, r6, r3
 8016592:	fb03 6711 	mls	r7, r3, r1, r6
 8016596:	5dc7      	ldrb	r7, [r0, r7]
 8016598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801659c:	4637      	mov	r7, r6
 801659e:	42bb      	cmp	r3, r7
 80165a0:	460e      	mov	r6, r1
 80165a2:	d9f4      	bls.n	801658e <_printf_i+0x11a>
 80165a4:	2b08      	cmp	r3, #8
 80165a6:	d10b      	bne.n	80165c0 <_printf_i+0x14c>
 80165a8:	6823      	ldr	r3, [r4, #0]
 80165aa:	07de      	lsls	r6, r3, #31
 80165ac:	d508      	bpl.n	80165c0 <_printf_i+0x14c>
 80165ae:	6923      	ldr	r3, [r4, #16]
 80165b0:	6861      	ldr	r1, [r4, #4]
 80165b2:	4299      	cmp	r1, r3
 80165b4:	bfde      	ittt	le
 80165b6:	2330      	movle	r3, #48	; 0x30
 80165b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80165bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80165c0:	1b52      	subs	r2, r2, r5
 80165c2:	6122      	str	r2, [r4, #16]
 80165c4:	f8cd a000 	str.w	sl, [sp]
 80165c8:	464b      	mov	r3, r9
 80165ca:	aa03      	add	r2, sp, #12
 80165cc:	4621      	mov	r1, r4
 80165ce:	4640      	mov	r0, r8
 80165d0:	f7ff fee2 	bl	8016398 <_printf_common>
 80165d4:	3001      	adds	r0, #1
 80165d6:	d14c      	bne.n	8016672 <_printf_i+0x1fe>
 80165d8:	f04f 30ff 	mov.w	r0, #4294967295
 80165dc:	b004      	add	sp, #16
 80165de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165e2:	4835      	ldr	r0, [pc, #212]	; (80166b8 <_printf_i+0x244>)
 80165e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80165e8:	6829      	ldr	r1, [r5, #0]
 80165ea:	6823      	ldr	r3, [r4, #0]
 80165ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80165f0:	6029      	str	r1, [r5, #0]
 80165f2:	061d      	lsls	r5, r3, #24
 80165f4:	d514      	bpl.n	8016620 <_printf_i+0x1ac>
 80165f6:	07df      	lsls	r7, r3, #31
 80165f8:	bf44      	itt	mi
 80165fa:	f043 0320 	orrmi.w	r3, r3, #32
 80165fe:	6023      	strmi	r3, [r4, #0]
 8016600:	b91e      	cbnz	r6, 801660a <_printf_i+0x196>
 8016602:	6823      	ldr	r3, [r4, #0]
 8016604:	f023 0320 	bic.w	r3, r3, #32
 8016608:	6023      	str	r3, [r4, #0]
 801660a:	2310      	movs	r3, #16
 801660c:	e7b0      	b.n	8016570 <_printf_i+0xfc>
 801660e:	6823      	ldr	r3, [r4, #0]
 8016610:	f043 0320 	orr.w	r3, r3, #32
 8016614:	6023      	str	r3, [r4, #0]
 8016616:	2378      	movs	r3, #120	; 0x78
 8016618:	4828      	ldr	r0, [pc, #160]	; (80166bc <_printf_i+0x248>)
 801661a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801661e:	e7e3      	b.n	80165e8 <_printf_i+0x174>
 8016620:	0659      	lsls	r1, r3, #25
 8016622:	bf48      	it	mi
 8016624:	b2b6      	uxthmi	r6, r6
 8016626:	e7e6      	b.n	80165f6 <_printf_i+0x182>
 8016628:	4615      	mov	r5, r2
 801662a:	e7bb      	b.n	80165a4 <_printf_i+0x130>
 801662c:	682b      	ldr	r3, [r5, #0]
 801662e:	6826      	ldr	r6, [r4, #0]
 8016630:	6961      	ldr	r1, [r4, #20]
 8016632:	1d18      	adds	r0, r3, #4
 8016634:	6028      	str	r0, [r5, #0]
 8016636:	0635      	lsls	r5, r6, #24
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	d501      	bpl.n	8016640 <_printf_i+0x1cc>
 801663c:	6019      	str	r1, [r3, #0]
 801663e:	e002      	b.n	8016646 <_printf_i+0x1d2>
 8016640:	0670      	lsls	r0, r6, #25
 8016642:	d5fb      	bpl.n	801663c <_printf_i+0x1c8>
 8016644:	8019      	strh	r1, [r3, #0]
 8016646:	2300      	movs	r3, #0
 8016648:	6123      	str	r3, [r4, #16]
 801664a:	4615      	mov	r5, r2
 801664c:	e7ba      	b.n	80165c4 <_printf_i+0x150>
 801664e:	682b      	ldr	r3, [r5, #0]
 8016650:	1d1a      	adds	r2, r3, #4
 8016652:	602a      	str	r2, [r5, #0]
 8016654:	681d      	ldr	r5, [r3, #0]
 8016656:	6862      	ldr	r2, [r4, #4]
 8016658:	2100      	movs	r1, #0
 801665a:	4628      	mov	r0, r5
 801665c:	f7e9 fde0 	bl	8000220 <memchr>
 8016660:	b108      	cbz	r0, 8016666 <_printf_i+0x1f2>
 8016662:	1b40      	subs	r0, r0, r5
 8016664:	6060      	str	r0, [r4, #4]
 8016666:	6863      	ldr	r3, [r4, #4]
 8016668:	6123      	str	r3, [r4, #16]
 801666a:	2300      	movs	r3, #0
 801666c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016670:	e7a8      	b.n	80165c4 <_printf_i+0x150>
 8016672:	6923      	ldr	r3, [r4, #16]
 8016674:	462a      	mov	r2, r5
 8016676:	4649      	mov	r1, r9
 8016678:	4640      	mov	r0, r8
 801667a:	47d0      	blx	sl
 801667c:	3001      	adds	r0, #1
 801667e:	d0ab      	beq.n	80165d8 <_printf_i+0x164>
 8016680:	6823      	ldr	r3, [r4, #0]
 8016682:	079b      	lsls	r3, r3, #30
 8016684:	d413      	bmi.n	80166ae <_printf_i+0x23a>
 8016686:	68e0      	ldr	r0, [r4, #12]
 8016688:	9b03      	ldr	r3, [sp, #12]
 801668a:	4298      	cmp	r0, r3
 801668c:	bfb8      	it	lt
 801668e:	4618      	movlt	r0, r3
 8016690:	e7a4      	b.n	80165dc <_printf_i+0x168>
 8016692:	2301      	movs	r3, #1
 8016694:	4632      	mov	r2, r6
 8016696:	4649      	mov	r1, r9
 8016698:	4640      	mov	r0, r8
 801669a:	47d0      	blx	sl
 801669c:	3001      	adds	r0, #1
 801669e:	d09b      	beq.n	80165d8 <_printf_i+0x164>
 80166a0:	3501      	adds	r5, #1
 80166a2:	68e3      	ldr	r3, [r4, #12]
 80166a4:	9903      	ldr	r1, [sp, #12]
 80166a6:	1a5b      	subs	r3, r3, r1
 80166a8:	42ab      	cmp	r3, r5
 80166aa:	dcf2      	bgt.n	8016692 <_printf_i+0x21e>
 80166ac:	e7eb      	b.n	8016686 <_printf_i+0x212>
 80166ae:	2500      	movs	r5, #0
 80166b0:	f104 0619 	add.w	r6, r4, #25
 80166b4:	e7f5      	b.n	80166a2 <_printf_i+0x22e>
 80166b6:	bf00      	nop
 80166b8:	0801c5e9 	.word	0x0801c5e9
 80166bc:	0801c5fa 	.word	0x0801c5fa

080166c0 <_sbrk_r>:
 80166c0:	b538      	push	{r3, r4, r5, lr}
 80166c2:	4d06      	ldr	r5, [pc, #24]	; (80166dc <_sbrk_r+0x1c>)
 80166c4:	2300      	movs	r3, #0
 80166c6:	4604      	mov	r4, r0
 80166c8:	4608      	mov	r0, r1
 80166ca:	602b      	str	r3, [r5, #0]
 80166cc:	f7ec f9ba 	bl	8002a44 <_sbrk>
 80166d0:	1c43      	adds	r3, r0, #1
 80166d2:	d102      	bne.n	80166da <_sbrk_r+0x1a>
 80166d4:	682b      	ldr	r3, [r5, #0]
 80166d6:	b103      	cbz	r3, 80166da <_sbrk_r+0x1a>
 80166d8:	6023      	str	r3, [r4, #0]
 80166da:	bd38      	pop	{r3, r4, r5, pc}
 80166dc:	2000b1c0 	.word	0x2000b1c0

080166e0 <__sread>:
 80166e0:	b510      	push	{r4, lr}
 80166e2:	460c      	mov	r4, r1
 80166e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166e8:	f000 fa9e 	bl	8016c28 <_read_r>
 80166ec:	2800      	cmp	r0, #0
 80166ee:	bfab      	itete	ge
 80166f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80166f2:	89a3      	ldrhlt	r3, [r4, #12]
 80166f4:	181b      	addge	r3, r3, r0
 80166f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80166fa:	bfac      	ite	ge
 80166fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80166fe:	81a3      	strhlt	r3, [r4, #12]
 8016700:	bd10      	pop	{r4, pc}

08016702 <__swrite>:
 8016702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016706:	461f      	mov	r7, r3
 8016708:	898b      	ldrh	r3, [r1, #12]
 801670a:	05db      	lsls	r3, r3, #23
 801670c:	4605      	mov	r5, r0
 801670e:	460c      	mov	r4, r1
 8016710:	4616      	mov	r6, r2
 8016712:	d505      	bpl.n	8016720 <__swrite+0x1e>
 8016714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016718:	2302      	movs	r3, #2
 801671a:	2200      	movs	r2, #0
 801671c:	f000 f9d0 	bl	8016ac0 <_lseek_r>
 8016720:	89a3      	ldrh	r3, [r4, #12]
 8016722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801672a:	81a3      	strh	r3, [r4, #12]
 801672c:	4632      	mov	r2, r6
 801672e:	463b      	mov	r3, r7
 8016730:	4628      	mov	r0, r5
 8016732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016736:	f000 b869 	b.w	801680c <_write_r>

0801673a <__sseek>:
 801673a:	b510      	push	{r4, lr}
 801673c:	460c      	mov	r4, r1
 801673e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016742:	f000 f9bd 	bl	8016ac0 <_lseek_r>
 8016746:	1c43      	adds	r3, r0, #1
 8016748:	89a3      	ldrh	r3, [r4, #12]
 801674a:	bf15      	itete	ne
 801674c:	6560      	strne	r0, [r4, #84]	; 0x54
 801674e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016756:	81a3      	strheq	r3, [r4, #12]
 8016758:	bf18      	it	ne
 801675a:	81a3      	strhne	r3, [r4, #12]
 801675c:	bd10      	pop	{r4, pc}

0801675e <__sclose>:
 801675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016762:	f000 b8db 	b.w	801691c <_close_r>
	...

08016768 <__swbuf_r>:
 8016768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801676a:	460e      	mov	r6, r1
 801676c:	4614      	mov	r4, r2
 801676e:	4605      	mov	r5, r0
 8016770:	b118      	cbz	r0, 801677a <__swbuf_r+0x12>
 8016772:	6983      	ldr	r3, [r0, #24]
 8016774:	b90b      	cbnz	r3, 801677a <__swbuf_r+0x12>
 8016776:	f7ff f9bf 	bl	8015af8 <__sinit>
 801677a:	4b21      	ldr	r3, [pc, #132]	; (8016800 <__swbuf_r+0x98>)
 801677c:	429c      	cmp	r4, r3
 801677e:	d12b      	bne.n	80167d8 <__swbuf_r+0x70>
 8016780:	686c      	ldr	r4, [r5, #4]
 8016782:	69a3      	ldr	r3, [r4, #24]
 8016784:	60a3      	str	r3, [r4, #8]
 8016786:	89a3      	ldrh	r3, [r4, #12]
 8016788:	071a      	lsls	r2, r3, #28
 801678a:	d52f      	bpl.n	80167ec <__swbuf_r+0x84>
 801678c:	6923      	ldr	r3, [r4, #16]
 801678e:	b36b      	cbz	r3, 80167ec <__swbuf_r+0x84>
 8016790:	6923      	ldr	r3, [r4, #16]
 8016792:	6820      	ldr	r0, [r4, #0]
 8016794:	1ac0      	subs	r0, r0, r3
 8016796:	6963      	ldr	r3, [r4, #20]
 8016798:	b2f6      	uxtb	r6, r6
 801679a:	4283      	cmp	r3, r0
 801679c:	4637      	mov	r7, r6
 801679e:	dc04      	bgt.n	80167aa <__swbuf_r+0x42>
 80167a0:	4621      	mov	r1, r4
 80167a2:	4628      	mov	r0, r5
 80167a4:	f000 f950 	bl	8016a48 <_fflush_r>
 80167a8:	bb30      	cbnz	r0, 80167f8 <__swbuf_r+0x90>
 80167aa:	68a3      	ldr	r3, [r4, #8]
 80167ac:	3b01      	subs	r3, #1
 80167ae:	60a3      	str	r3, [r4, #8]
 80167b0:	6823      	ldr	r3, [r4, #0]
 80167b2:	1c5a      	adds	r2, r3, #1
 80167b4:	6022      	str	r2, [r4, #0]
 80167b6:	701e      	strb	r6, [r3, #0]
 80167b8:	6963      	ldr	r3, [r4, #20]
 80167ba:	3001      	adds	r0, #1
 80167bc:	4283      	cmp	r3, r0
 80167be:	d004      	beq.n	80167ca <__swbuf_r+0x62>
 80167c0:	89a3      	ldrh	r3, [r4, #12]
 80167c2:	07db      	lsls	r3, r3, #31
 80167c4:	d506      	bpl.n	80167d4 <__swbuf_r+0x6c>
 80167c6:	2e0a      	cmp	r6, #10
 80167c8:	d104      	bne.n	80167d4 <__swbuf_r+0x6c>
 80167ca:	4621      	mov	r1, r4
 80167cc:	4628      	mov	r0, r5
 80167ce:	f000 f93b 	bl	8016a48 <_fflush_r>
 80167d2:	b988      	cbnz	r0, 80167f8 <__swbuf_r+0x90>
 80167d4:	4638      	mov	r0, r7
 80167d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167d8:	4b0a      	ldr	r3, [pc, #40]	; (8016804 <__swbuf_r+0x9c>)
 80167da:	429c      	cmp	r4, r3
 80167dc:	d101      	bne.n	80167e2 <__swbuf_r+0x7a>
 80167de:	68ac      	ldr	r4, [r5, #8]
 80167e0:	e7cf      	b.n	8016782 <__swbuf_r+0x1a>
 80167e2:	4b09      	ldr	r3, [pc, #36]	; (8016808 <__swbuf_r+0xa0>)
 80167e4:	429c      	cmp	r4, r3
 80167e6:	bf08      	it	eq
 80167e8:	68ec      	ldreq	r4, [r5, #12]
 80167ea:	e7ca      	b.n	8016782 <__swbuf_r+0x1a>
 80167ec:	4621      	mov	r1, r4
 80167ee:	4628      	mov	r0, r5
 80167f0:	f000 f81e 	bl	8016830 <__swsetup_r>
 80167f4:	2800      	cmp	r0, #0
 80167f6:	d0cb      	beq.n	8016790 <__swbuf_r+0x28>
 80167f8:	f04f 37ff 	mov.w	r7, #4294967295
 80167fc:	e7ea      	b.n	80167d4 <__swbuf_r+0x6c>
 80167fe:	bf00      	nop
 8016800:	0801c598 	.word	0x0801c598
 8016804:	0801c5b8 	.word	0x0801c5b8
 8016808:	0801c578 	.word	0x0801c578

0801680c <_write_r>:
 801680c:	b538      	push	{r3, r4, r5, lr}
 801680e:	4d07      	ldr	r5, [pc, #28]	; (801682c <_write_r+0x20>)
 8016810:	4604      	mov	r4, r0
 8016812:	4608      	mov	r0, r1
 8016814:	4611      	mov	r1, r2
 8016816:	2200      	movs	r2, #0
 8016818:	602a      	str	r2, [r5, #0]
 801681a:	461a      	mov	r2, r3
 801681c:	f7e9 ff63 	bl	80006e6 <_write>
 8016820:	1c43      	adds	r3, r0, #1
 8016822:	d102      	bne.n	801682a <_write_r+0x1e>
 8016824:	682b      	ldr	r3, [r5, #0]
 8016826:	b103      	cbz	r3, 801682a <_write_r+0x1e>
 8016828:	6023      	str	r3, [r4, #0]
 801682a:	bd38      	pop	{r3, r4, r5, pc}
 801682c:	2000b1c0 	.word	0x2000b1c0

08016830 <__swsetup_r>:
 8016830:	4b32      	ldr	r3, [pc, #200]	; (80168fc <__swsetup_r+0xcc>)
 8016832:	b570      	push	{r4, r5, r6, lr}
 8016834:	681d      	ldr	r5, [r3, #0]
 8016836:	4606      	mov	r6, r0
 8016838:	460c      	mov	r4, r1
 801683a:	b125      	cbz	r5, 8016846 <__swsetup_r+0x16>
 801683c:	69ab      	ldr	r3, [r5, #24]
 801683e:	b913      	cbnz	r3, 8016846 <__swsetup_r+0x16>
 8016840:	4628      	mov	r0, r5
 8016842:	f7ff f959 	bl	8015af8 <__sinit>
 8016846:	4b2e      	ldr	r3, [pc, #184]	; (8016900 <__swsetup_r+0xd0>)
 8016848:	429c      	cmp	r4, r3
 801684a:	d10f      	bne.n	801686c <__swsetup_r+0x3c>
 801684c:	686c      	ldr	r4, [r5, #4]
 801684e:	89a3      	ldrh	r3, [r4, #12]
 8016850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016854:	0719      	lsls	r1, r3, #28
 8016856:	d42c      	bmi.n	80168b2 <__swsetup_r+0x82>
 8016858:	06dd      	lsls	r5, r3, #27
 801685a:	d411      	bmi.n	8016880 <__swsetup_r+0x50>
 801685c:	2309      	movs	r3, #9
 801685e:	6033      	str	r3, [r6, #0]
 8016860:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016864:	81a3      	strh	r3, [r4, #12]
 8016866:	f04f 30ff 	mov.w	r0, #4294967295
 801686a:	e03e      	b.n	80168ea <__swsetup_r+0xba>
 801686c:	4b25      	ldr	r3, [pc, #148]	; (8016904 <__swsetup_r+0xd4>)
 801686e:	429c      	cmp	r4, r3
 8016870:	d101      	bne.n	8016876 <__swsetup_r+0x46>
 8016872:	68ac      	ldr	r4, [r5, #8]
 8016874:	e7eb      	b.n	801684e <__swsetup_r+0x1e>
 8016876:	4b24      	ldr	r3, [pc, #144]	; (8016908 <__swsetup_r+0xd8>)
 8016878:	429c      	cmp	r4, r3
 801687a:	bf08      	it	eq
 801687c:	68ec      	ldreq	r4, [r5, #12]
 801687e:	e7e6      	b.n	801684e <__swsetup_r+0x1e>
 8016880:	0758      	lsls	r0, r3, #29
 8016882:	d512      	bpl.n	80168aa <__swsetup_r+0x7a>
 8016884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016886:	b141      	cbz	r1, 801689a <__swsetup_r+0x6a>
 8016888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801688c:	4299      	cmp	r1, r3
 801688e:	d002      	beq.n	8016896 <__swsetup_r+0x66>
 8016890:	4630      	mov	r0, r6
 8016892:	f7ff f9eb 	bl	8015c6c <_free_r>
 8016896:	2300      	movs	r3, #0
 8016898:	6363      	str	r3, [r4, #52]	; 0x34
 801689a:	89a3      	ldrh	r3, [r4, #12]
 801689c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80168a0:	81a3      	strh	r3, [r4, #12]
 80168a2:	2300      	movs	r3, #0
 80168a4:	6063      	str	r3, [r4, #4]
 80168a6:	6923      	ldr	r3, [r4, #16]
 80168a8:	6023      	str	r3, [r4, #0]
 80168aa:	89a3      	ldrh	r3, [r4, #12]
 80168ac:	f043 0308 	orr.w	r3, r3, #8
 80168b0:	81a3      	strh	r3, [r4, #12]
 80168b2:	6923      	ldr	r3, [r4, #16]
 80168b4:	b94b      	cbnz	r3, 80168ca <__swsetup_r+0x9a>
 80168b6:	89a3      	ldrh	r3, [r4, #12]
 80168b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80168bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168c0:	d003      	beq.n	80168ca <__swsetup_r+0x9a>
 80168c2:	4621      	mov	r1, r4
 80168c4:	4630      	mov	r0, r6
 80168c6:	f000 f933 	bl	8016b30 <__smakebuf_r>
 80168ca:	89a0      	ldrh	r0, [r4, #12]
 80168cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80168d0:	f010 0301 	ands.w	r3, r0, #1
 80168d4:	d00a      	beq.n	80168ec <__swsetup_r+0xbc>
 80168d6:	2300      	movs	r3, #0
 80168d8:	60a3      	str	r3, [r4, #8]
 80168da:	6963      	ldr	r3, [r4, #20]
 80168dc:	425b      	negs	r3, r3
 80168de:	61a3      	str	r3, [r4, #24]
 80168e0:	6923      	ldr	r3, [r4, #16]
 80168e2:	b943      	cbnz	r3, 80168f6 <__swsetup_r+0xc6>
 80168e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80168e8:	d1ba      	bne.n	8016860 <__swsetup_r+0x30>
 80168ea:	bd70      	pop	{r4, r5, r6, pc}
 80168ec:	0781      	lsls	r1, r0, #30
 80168ee:	bf58      	it	pl
 80168f0:	6963      	ldrpl	r3, [r4, #20]
 80168f2:	60a3      	str	r3, [r4, #8]
 80168f4:	e7f4      	b.n	80168e0 <__swsetup_r+0xb0>
 80168f6:	2000      	movs	r0, #0
 80168f8:	e7f7      	b.n	80168ea <__swsetup_r+0xba>
 80168fa:	bf00      	nop
 80168fc:	20000068 	.word	0x20000068
 8016900:	0801c598 	.word	0x0801c598
 8016904:	0801c5b8 	.word	0x0801c5b8
 8016908:	0801c578 	.word	0x0801c578

0801690c <abort>:
 801690c:	b508      	push	{r3, lr}
 801690e:	2006      	movs	r0, #6
 8016910:	f000 f9c4 	bl	8016c9c <raise>
 8016914:	2001      	movs	r0, #1
 8016916:	f7ec f839 	bl	800298c <_exit>
	...

0801691c <_close_r>:
 801691c:	b538      	push	{r3, r4, r5, lr}
 801691e:	4d06      	ldr	r5, [pc, #24]	; (8016938 <_close_r+0x1c>)
 8016920:	2300      	movs	r3, #0
 8016922:	4604      	mov	r4, r0
 8016924:	4608      	mov	r0, r1
 8016926:	602b      	str	r3, [r5, #0]
 8016928:	f7ec f857 	bl	80029da <_close>
 801692c:	1c43      	adds	r3, r0, #1
 801692e:	d102      	bne.n	8016936 <_close_r+0x1a>
 8016930:	682b      	ldr	r3, [r5, #0]
 8016932:	b103      	cbz	r3, 8016936 <_close_r+0x1a>
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	bd38      	pop	{r3, r4, r5, pc}
 8016938:	2000b1c0 	.word	0x2000b1c0

0801693c <__sflush_r>:
 801693c:	898a      	ldrh	r2, [r1, #12]
 801693e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016942:	4605      	mov	r5, r0
 8016944:	0710      	lsls	r0, r2, #28
 8016946:	460c      	mov	r4, r1
 8016948:	d458      	bmi.n	80169fc <__sflush_r+0xc0>
 801694a:	684b      	ldr	r3, [r1, #4]
 801694c:	2b00      	cmp	r3, #0
 801694e:	dc05      	bgt.n	801695c <__sflush_r+0x20>
 8016950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016952:	2b00      	cmp	r3, #0
 8016954:	dc02      	bgt.n	801695c <__sflush_r+0x20>
 8016956:	2000      	movs	r0, #0
 8016958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801695c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801695e:	2e00      	cmp	r6, #0
 8016960:	d0f9      	beq.n	8016956 <__sflush_r+0x1a>
 8016962:	2300      	movs	r3, #0
 8016964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016968:	682f      	ldr	r7, [r5, #0]
 801696a:	602b      	str	r3, [r5, #0]
 801696c:	d032      	beq.n	80169d4 <__sflush_r+0x98>
 801696e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016970:	89a3      	ldrh	r3, [r4, #12]
 8016972:	075a      	lsls	r2, r3, #29
 8016974:	d505      	bpl.n	8016982 <__sflush_r+0x46>
 8016976:	6863      	ldr	r3, [r4, #4]
 8016978:	1ac0      	subs	r0, r0, r3
 801697a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801697c:	b10b      	cbz	r3, 8016982 <__sflush_r+0x46>
 801697e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016980:	1ac0      	subs	r0, r0, r3
 8016982:	2300      	movs	r3, #0
 8016984:	4602      	mov	r2, r0
 8016986:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016988:	6a21      	ldr	r1, [r4, #32]
 801698a:	4628      	mov	r0, r5
 801698c:	47b0      	blx	r6
 801698e:	1c43      	adds	r3, r0, #1
 8016990:	89a3      	ldrh	r3, [r4, #12]
 8016992:	d106      	bne.n	80169a2 <__sflush_r+0x66>
 8016994:	6829      	ldr	r1, [r5, #0]
 8016996:	291d      	cmp	r1, #29
 8016998:	d82c      	bhi.n	80169f4 <__sflush_r+0xb8>
 801699a:	4a2a      	ldr	r2, [pc, #168]	; (8016a44 <__sflush_r+0x108>)
 801699c:	40ca      	lsrs	r2, r1
 801699e:	07d6      	lsls	r6, r2, #31
 80169a0:	d528      	bpl.n	80169f4 <__sflush_r+0xb8>
 80169a2:	2200      	movs	r2, #0
 80169a4:	6062      	str	r2, [r4, #4]
 80169a6:	04d9      	lsls	r1, r3, #19
 80169a8:	6922      	ldr	r2, [r4, #16]
 80169aa:	6022      	str	r2, [r4, #0]
 80169ac:	d504      	bpl.n	80169b8 <__sflush_r+0x7c>
 80169ae:	1c42      	adds	r2, r0, #1
 80169b0:	d101      	bne.n	80169b6 <__sflush_r+0x7a>
 80169b2:	682b      	ldr	r3, [r5, #0]
 80169b4:	b903      	cbnz	r3, 80169b8 <__sflush_r+0x7c>
 80169b6:	6560      	str	r0, [r4, #84]	; 0x54
 80169b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80169ba:	602f      	str	r7, [r5, #0]
 80169bc:	2900      	cmp	r1, #0
 80169be:	d0ca      	beq.n	8016956 <__sflush_r+0x1a>
 80169c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169c4:	4299      	cmp	r1, r3
 80169c6:	d002      	beq.n	80169ce <__sflush_r+0x92>
 80169c8:	4628      	mov	r0, r5
 80169ca:	f7ff f94f 	bl	8015c6c <_free_r>
 80169ce:	2000      	movs	r0, #0
 80169d0:	6360      	str	r0, [r4, #52]	; 0x34
 80169d2:	e7c1      	b.n	8016958 <__sflush_r+0x1c>
 80169d4:	6a21      	ldr	r1, [r4, #32]
 80169d6:	2301      	movs	r3, #1
 80169d8:	4628      	mov	r0, r5
 80169da:	47b0      	blx	r6
 80169dc:	1c41      	adds	r1, r0, #1
 80169de:	d1c7      	bne.n	8016970 <__sflush_r+0x34>
 80169e0:	682b      	ldr	r3, [r5, #0]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d0c4      	beq.n	8016970 <__sflush_r+0x34>
 80169e6:	2b1d      	cmp	r3, #29
 80169e8:	d001      	beq.n	80169ee <__sflush_r+0xb2>
 80169ea:	2b16      	cmp	r3, #22
 80169ec:	d101      	bne.n	80169f2 <__sflush_r+0xb6>
 80169ee:	602f      	str	r7, [r5, #0]
 80169f0:	e7b1      	b.n	8016956 <__sflush_r+0x1a>
 80169f2:	89a3      	ldrh	r3, [r4, #12]
 80169f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169f8:	81a3      	strh	r3, [r4, #12]
 80169fa:	e7ad      	b.n	8016958 <__sflush_r+0x1c>
 80169fc:	690f      	ldr	r7, [r1, #16]
 80169fe:	2f00      	cmp	r7, #0
 8016a00:	d0a9      	beq.n	8016956 <__sflush_r+0x1a>
 8016a02:	0793      	lsls	r3, r2, #30
 8016a04:	680e      	ldr	r6, [r1, #0]
 8016a06:	bf08      	it	eq
 8016a08:	694b      	ldreq	r3, [r1, #20]
 8016a0a:	600f      	str	r7, [r1, #0]
 8016a0c:	bf18      	it	ne
 8016a0e:	2300      	movne	r3, #0
 8016a10:	eba6 0807 	sub.w	r8, r6, r7
 8016a14:	608b      	str	r3, [r1, #8]
 8016a16:	f1b8 0f00 	cmp.w	r8, #0
 8016a1a:	dd9c      	ble.n	8016956 <__sflush_r+0x1a>
 8016a1c:	6a21      	ldr	r1, [r4, #32]
 8016a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016a20:	4643      	mov	r3, r8
 8016a22:	463a      	mov	r2, r7
 8016a24:	4628      	mov	r0, r5
 8016a26:	47b0      	blx	r6
 8016a28:	2800      	cmp	r0, #0
 8016a2a:	dc06      	bgt.n	8016a3a <__sflush_r+0xfe>
 8016a2c:	89a3      	ldrh	r3, [r4, #12]
 8016a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a32:	81a3      	strh	r3, [r4, #12]
 8016a34:	f04f 30ff 	mov.w	r0, #4294967295
 8016a38:	e78e      	b.n	8016958 <__sflush_r+0x1c>
 8016a3a:	4407      	add	r7, r0
 8016a3c:	eba8 0800 	sub.w	r8, r8, r0
 8016a40:	e7e9      	b.n	8016a16 <__sflush_r+0xda>
 8016a42:	bf00      	nop
 8016a44:	20400001 	.word	0x20400001

08016a48 <_fflush_r>:
 8016a48:	b538      	push	{r3, r4, r5, lr}
 8016a4a:	690b      	ldr	r3, [r1, #16]
 8016a4c:	4605      	mov	r5, r0
 8016a4e:	460c      	mov	r4, r1
 8016a50:	b913      	cbnz	r3, 8016a58 <_fflush_r+0x10>
 8016a52:	2500      	movs	r5, #0
 8016a54:	4628      	mov	r0, r5
 8016a56:	bd38      	pop	{r3, r4, r5, pc}
 8016a58:	b118      	cbz	r0, 8016a62 <_fflush_r+0x1a>
 8016a5a:	6983      	ldr	r3, [r0, #24]
 8016a5c:	b90b      	cbnz	r3, 8016a62 <_fflush_r+0x1a>
 8016a5e:	f7ff f84b 	bl	8015af8 <__sinit>
 8016a62:	4b14      	ldr	r3, [pc, #80]	; (8016ab4 <_fflush_r+0x6c>)
 8016a64:	429c      	cmp	r4, r3
 8016a66:	d11b      	bne.n	8016aa0 <_fflush_r+0x58>
 8016a68:	686c      	ldr	r4, [r5, #4]
 8016a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d0ef      	beq.n	8016a52 <_fflush_r+0xa>
 8016a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016a74:	07d0      	lsls	r0, r2, #31
 8016a76:	d404      	bmi.n	8016a82 <_fflush_r+0x3a>
 8016a78:	0599      	lsls	r1, r3, #22
 8016a7a:	d402      	bmi.n	8016a82 <_fflush_r+0x3a>
 8016a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a7e:	f7ff f8eb 	bl	8015c58 <__retarget_lock_acquire_recursive>
 8016a82:	4628      	mov	r0, r5
 8016a84:	4621      	mov	r1, r4
 8016a86:	f7ff ff59 	bl	801693c <__sflush_r>
 8016a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a8c:	07da      	lsls	r2, r3, #31
 8016a8e:	4605      	mov	r5, r0
 8016a90:	d4e0      	bmi.n	8016a54 <_fflush_r+0xc>
 8016a92:	89a3      	ldrh	r3, [r4, #12]
 8016a94:	059b      	lsls	r3, r3, #22
 8016a96:	d4dd      	bmi.n	8016a54 <_fflush_r+0xc>
 8016a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a9a:	f7ff f8de 	bl	8015c5a <__retarget_lock_release_recursive>
 8016a9e:	e7d9      	b.n	8016a54 <_fflush_r+0xc>
 8016aa0:	4b05      	ldr	r3, [pc, #20]	; (8016ab8 <_fflush_r+0x70>)
 8016aa2:	429c      	cmp	r4, r3
 8016aa4:	d101      	bne.n	8016aaa <_fflush_r+0x62>
 8016aa6:	68ac      	ldr	r4, [r5, #8]
 8016aa8:	e7df      	b.n	8016a6a <_fflush_r+0x22>
 8016aaa:	4b04      	ldr	r3, [pc, #16]	; (8016abc <_fflush_r+0x74>)
 8016aac:	429c      	cmp	r4, r3
 8016aae:	bf08      	it	eq
 8016ab0:	68ec      	ldreq	r4, [r5, #12]
 8016ab2:	e7da      	b.n	8016a6a <_fflush_r+0x22>
 8016ab4:	0801c598 	.word	0x0801c598
 8016ab8:	0801c5b8 	.word	0x0801c5b8
 8016abc:	0801c578 	.word	0x0801c578

08016ac0 <_lseek_r>:
 8016ac0:	b538      	push	{r3, r4, r5, lr}
 8016ac2:	4d07      	ldr	r5, [pc, #28]	; (8016ae0 <_lseek_r+0x20>)
 8016ac4:	4604      	mov	r4, r0
 8016ac6:	4608      	mov	r0, r1
 8016ac8:	4611      	mov	r1, r2
 8016aca:	2200      	movs	r2, #0
 8016acc:	602a      	str	r2, [r5, #0]
 8016ace:	461a      	mov	r2, r3
 8016ad0:	f7eb ffaa 	bl	8002a28 <_lseek>
 8016ad4:	1c43      	adds	r3, r0, #1
 8016ad6:	d102      	bne.n	8016ade <_lseek_r+0x1e>
 8016ad8:	682b      	ldr	r3, [r5, #0]
 8016ada:	b103      	cbz	r3, 8016ade <_lseek_r+0x1e>
 8016adc:	6023      	str	r3, [r4, #0]
 8016ade:	bd38      	pop	{r3, r4, r5, pc}
 8016ae0:	2000b1c0 	.word	0x2000b1c0

08016ae4 <__swhatbuf_r>:
 8016ae4:	b570      	push	{r4, r5, r6, lr}
 8016ae6:	460e      	mov	r6, r1
 8016ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016aec:	2900      	cmp	r1, #0
 8016aee:	b096      	sub	sp, #88	; 0x58
 8016af0:	4614      	mov	r4, r2
 8016af2:	461d      	mov	r5, r3
 8016af4:	da08      	bge.n	8016b08 <__swhatbuf_r+0x24>
 8016af6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016afa:	2200      	movs	r2, #0
 8016afc:	602a      	str	r2, [r5, #0]
 8016afe:	061a      	lsls	r2, r3, #24
 8016b00:	d410      	bmi.n	8016b24 <__swhatbuf_r+0x40>
 8016b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b06:	e00e      	b.n	8016b26 <__swhatbuf_r+0x42>
 8016b08:	466a      	mov	r2, sp
 8016b0a:	f000 f8e3 	bl	8016cd4 <_fstat_r>
 8016b0e:	2800      	cmp	r0, #0
 8016b10:	dbf1      	blt.n	8016af6 <__swhatbuf_r+0x12>
 8016b12:	9a01      	ldr	r2, [sp, #4]
 8016b14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b1c:	425a      	negs	r2, r3
 8016b1e:	415a      	adcs	r2, r3
 8016b20:	602a      	str	r2, [r5, #0]
 8016b22:	e7ee      	b.n	8016b02 <__swhatbuf_r+0x1e>
 8016b24:	2340      	movs	r3, #64	; 0x40
 8016b26:	2000      	movs	r0, #0
 8016b28:	6023      	str	r3, [r4, #0]
 8016b2a:	b016      	add	sp, #88	; 0x58
 8016b2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b30 <__smakebuf_r>:
 8016b30:	898b      	ldrh	r3, [r1, #12]
 8016b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b34:	079d      	lsls	r5, r3, #30
 8016b36:	4606      	mov	r6, r0
 8016b38:	460c      	mov	r4, r1
 8016b3a:	d507      	bpl.n	8016b4c <__smakebuf_r+0x1c>
 8016b3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b40:	6023      	str	r3, [r4, #0]
 8016b42:	6123      	str	r3, [r4, #16]
 8016b44:	2301      	movs	r3, #1
 8016b46:	6163      	str	r3, [r4, #20]
 8016b48:	b002      	add	sp, #8
 8016b4a:	bd70      	pop	{r4, r5, r6, pc}
 8016b4c:	ab01      	add	r3, sp, #4
 8016b4e:	466a      	mov	r2, sp
 8016b50:	f7ff ffc8 	bl	8016ae4 <__swhatbuf_r>
 8016b54:	9900      	ldr	r1, [sp, #0]
 8016b56:	4605      	mov	r5, r0
 8016b58:	4630      	mov	r0, r6
 8016b5a:	f7ff f8f3 	bl	8015d44 <_malloc_r>
 8016b5e:	b948      	cbnz	r0, 8016b74 <__smakebuf_r+0x44>
 8016b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b64:	059a      	lsls	r2, r3, #22
 8016b66:	d4ef      	bmi.n	8016b48 <__smakebuf_r+0x18>
 8016b68:	f023 0303 	bic.w	r3, r3, #3
 8016b6c:	f043 0302 	orr.w	r3, r3, #2
 8016b70:	81a3      	strh	r3, [r4, #12]
 8016b72:	e7e3      	b.n	8016b3c <__smakebuf_r+0xc>
 8016b74:	4b0d      	ldr	r3, [pc, #52]	; (8016bac <__smakebuf_r+0x7c>)
 8016b76:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	6020      	str	r0, [r4, #0]
 8016b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b80:	81a3      	strh	r3, [r4, #12]
 8016b82:	9b00      	ldr	r3, [sp, #0]
 8016b84:	6163      	str	r3, [r4, #20]
 8016b86:	9b01      	ldr	r3, [sp, #4]
 8016b88:	6120      	str	r0, [r4, #16]
 8016b8a:	b15b      	cbz	r3, 8016ba4 <__smakebuf_r+0x74>
 8016b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b90:	4630      	mov	r0, r6
 8016b92:	f000 f8b1 	bl	8016cf8 <_isatty_r>
 8016b96:	b128      	cbz	r0, 8016ba4 <__smakebuf_r+0x74>
 8016b98:	89a3      	ldrh	r3, [r4, #12]
 8016b9a:	f023 0303 	bic.w	r3, r3, #3
 8016b9e:	f043 0301 	orr.w	r3, r3, #1
 8016ba2:	81a3      	strh	r3, [r4, #12]
 8016ba4:	89a0      	ldrh	r0, [r4, #12]
 8016ba6:	4305      	orrs	r5, r0
 8016ba8:	81a5      	strh	r5, [r4, #12]
 8016baa:	e7cd      	b.n	8016b48 <__smakebuf_r+0x18>
 8016bac:	08015a91 	.word	0x08015a91

08016bb0 <__malloc_lock>:
 8016bb0:	4801      	ldr	r0, [pc, #4]	; (8016bb8 <__malloc_lock+0x8>)
 8016bb2:	f7ff b851 	b.w	8015c58 <__retarget_lock_acquire_recursive>
 8016bb6:	bf00      	nop
 8016bb8:	2000b1c4 	.word	0x2000b1c4

08016bbc <__malloc_unlock>:
 8016bbc:	4801      	ldr	r0, [pc, #4]	; (8016bc4 <__malloc_unlock+0x8>)
 8016bbe:	f7ff b84c 	b.w	8015c5a <__retarget_lock_release_recursive>
 8016bc2:	bf00      	nop
 8016bc4:	2000b1c4 	.word	0x2000b1c4

08016bc8 <_realloc_r>:
 8016bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bcc:	4680      	mov	r8, r0
 8016bce:	4614      	mov	r4, r2
 8016bd0:	460e      	mov	r6, r1
 8016bd2:	b921      	cbnz	r1, 8016bde <_realloc_r+0x16>
 8016bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd8:	4611      	mov	r1, r2
 8016bda:	f7ff b8b3 	b.w	8015d44 <_malloc_r>
 8016bde:	b92a      	cbnz	r2, 8016bec <_realloc_r+0x24>
 8016be0:	f7ff f844 	bl	8015c6c <_free_r>
 8016be4:	4625      	mov	r5, r4
 8016be6:	4628      	mov	r0, r5
 8016be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bec:	f000 f894 	bl	8016d18 <_malloc_usable_size_r>
 8016bf0:	4284      	cmp	r4, r0
 8016bf2:	4607      	mov	r7, r0
 8016bf4:	d802      	bhi.n	8016bfc <_realloc_r+0x34>
 8016bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016bfa:	d812      	bhi.n	8016c22 <_realloc_r+0x5a>
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	4640      	mov	r0, r8
 8016c00:	f7ff f8a0 	bl	8015d44 <_malloc_r>
 8016c04:	4605      	mov	r5, r0
 8016c06:	2800      	cmp	r0, #0
 8016c08:	d0ed      	beq.n	8016be6 <_realloc_r+0x1e>
 8016c0a:	42bc      	cmp	r4, r7
 8016c0c:	4622      	mov	r2, r4
 8016c0e:	4631      	mov	r1, r6
 8016c10:	bf28      	it	cs
 8016c12:	463a      	movcs	r2, r7
 8016c14:	f7fe fe54 	bl	80158c0 <memcpy>
 8016c18:	4631      	mov	r1, r6
 8016c1a:	4640      	mov	r0, r8
 8016c1c:	f7ff f826 	bl	8015c6c <_free_r>
 8016c20:	e7e1      	b.n	8016be6 <_realloc_r+0x1e>
 8016c22:	4635      	mov	r5, r6
 8016c24:	e7df      	b.n	8016be6 <_realloc_r+0x1e>
	...

08016c28 <_read_r>:
 8016c28:	b538      	push	{r3, r4, r5, lr}
 8016c2a:	4d07      	ldr	r5, [pc, #28]	; (8016c48 <_read_r+0x20>)
 8016c2c:	4604      	mov	r4, r0
 8016c2e:	4608      	mov	r0, r1
 8016c30:	4611      	mov	r1, r2
 8016c32:	2200      	movs	r2, #0
 8016c34:	602a      	str	r2, [r5, #0]
 8016c36:	461a      	mov	r2, r3
 8016c38:	f7eb feb2 	bl	80029a0 <_read>
 8016c3c:	1c43      	adds	r3, r0, #1
 8016c3e:	d102      	bne.n	8016c46 <_read_r+0x1e>
 8016c40:	682b      	ldr	r3, [r5, #0]
 8016c42:	b103      	cbz	r3, 8016c46 <_read_r+0x1e>
 8016c44:	6023      	str	r3, [r4, #0]
 8016c46:	bd38      	pop	{r3, r4, r5, pc}
 8016c48:	2000b1c0 	.word	0x2000b1c0

08016c4c <_raise_r>:
 8016c4c:	291f      	cmp	r1, #31
 8016c4e:	b538      	push	{r3, r4, r5, lr}
 8016c50:	4604      	mov	r4, r0
 8016c52:	460d      	mov	r5, r1
 8016c54:	d904      	bls.n	8016c60 <_raise_r+0x14>
 8016c56:	2316      	movs	r3, #22
 8016c58:	6003      	str	r3, [r0, #0]
 8016c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8016c5e:	bd38      	pop	{r3, r4, r5, pc}
 8016c60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016c62:	b112      	cbz	r2, 8016c6a <_raise_r+0x1e>
 8016c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016c68:	b94b      	cbnz	r3, 8016c7e <_raise_r+0x32>
 8016c6a:	4620      	mov	r0, r4
 8016c6c:	f000 f830 	bl	8016cd0 <_getpid_r>
 8016c70:	462a      	mov	r2, r5
 8016c72:	4601      	mov	r1, r0
 8016c74:	4620      	mov	r0, r4
 8016c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c7a:	f000 b817 	b.w	8016cac <_kill_r>
 8016c7e:	2b01      	cmp	r3, #1
 8016c80:	d00a      	beq.n	8016c98 <_raise_r+0x4c>
 8016c82:	1c59      	adds	r1, r3, #1
 8016c84:	d103      	bne.n	8016c8e <_raise_r+0x42>
 8016c86:	2316      	movs	r3, #22
 8016c88:	6003      	str	r3, [r0, #0]
 8016c8a:	2001      	movs	r0, #1
 8016c8c:	e7e7      	b.n	8016c5e <_raise_r+0x12>
 8016c8e:	2400      	movs	r4, #0
 8016c90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016c94:	4628      	mov	r0, r5
 8016c96:	4798      	blx	r3
 8016c98:	2000      	movs	r0, #0
 8016c9a:	e7e0      	b.n	8016c5e <_raise_r+0x12>

08016c9c <raise>:
 8016c9c:	4b02      	ldr	r3, [pc, #8]	; (8016ca8 <raise+0xc>)
 8016c9e:	4601      	mov	r1, r0
 8016ca0:	6818      	ldr	r0, [r3, #0]
 8016ca2:	f7ff bfd3 	b.w	8016c4c <_raise_r>
 8016ca6:	bf00      	nop
 8016ca8:	20000068 	.word	0x20000068

08016cac <_kill_r>:
 8016cac:	b538      	push	{r3, r4, r5, lr}
 8016cae:	4d07      	ldr	r5, [pc, #28]	; (8016ccc <_kill_r+0x20>)
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	4604      	mov	r4, r0
 8016cb4:	4608      	mov	r0, r1
 8016cb6:	4611      	mov	r1, r2
 8016cb8:	602b      	str	r3, [r5, #0]
 8016cba:	f7eb fe55 	bl	8002968 <_kill>
 8016cbe:	1c43      	adds	r3, r0, #1
 8016cc0:	d102      	bne.n	8016cc8 <_kill_r+0x1c>
 8016cc2:	682b      	ldr	r3, [r5, #0]
 8016cc4:	b103      	cbz	r3, 8016cc8 <_kill_r+0x1c>
 8016cc6:	6023      	str	r3, [r4, #0]
 8016cc8:	bd38      	pop	{r3, r4, r5, pc}
 8016cca:	bf00      	nop
 8016ccc:	2000b1c0 	.word	0x2000b1c0

08016cd0 <_getpid_r>:
 8016cd0:	f7eb be42 	b.w	8002958 <_getpid>

08016cd4 <_fstat_r>:
 8016cd4:	b538      	push	{r3, r4, r5, lr}
 8016cd6:	4d07      	ldr	r5, [pc, #28]	; (8016cf4 <_fstat_r+0x20>)
 8016cd8:	2300      	movs	r3, #0
 8016cda:	4604      	mov	r4, r0
 8016cdc:	4608      	mov	r0, r1
 8016cde:	4611      	mov	r1, r2
 8016ce0:	602b      	str	r3, [r5, #0]
 8016ce2:	f7eb fe86 	bl	80029f2 <_fstat>
 8016ce6:	1c43      	adds	r3, r0, #1
 8016ce8:	d102      	bne.n	8016cf0 <_fstat_r+0x1c>
 8016cea:	682b      	ldr	r3, [r5, #0]
 8016cec:	b103      	cbz	r3, 8016cf0 <_fstat_r+0x1c>
 8016cee:	6023      	str	r3, [r4, #0]
 8016cf0:	bd38      	pop	{r3, r4, r5, pc}
 8016cf2:	bf00      	nop
 8016cf4:	2000b1c0 	.word	0x2000b1c0

08016cf8 <_isatty_r>:
 8016cf8:	b538      	push	{r3, r4, r5, lr}
 8016cfa:	4d06      	ldr	r5, [pc, #24]	; (8016d14 <_isatty_r+0x1c>)
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	4604      	mov	r4, r0
 8016d00:	4608      	mov	r0, r1
 8016d02:	602b      	str	r3, [r5, #0]
 8016d04:	f7eb fe85 	bl	8002a12 <_isatty>
 8016d08:	1c43      	adds	r3, r0, #1
 8016d0a:	d102      	bne.n	8016d12 <_isatty_r+0x1a>
 8016d0c:	682b      	ldr	r3, [r5, #0]
 8016d0e:	b103      	cbz	r3, 8016d12 <_isatty_r+0x1a>
 8016d10:	6023      	str	r3, [r4, #0]
 8016d12:	bd38      	pop	{r3, r4, r5, pc}
 8016d14:	2000b1c0 	.word	0x2000b1c0

08016d18 <_malloc_usable_size_r>:
 8016d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d1c:	1f18      	subs	r0, r3, #4
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	bfbc      	itt	lt
 8016d22:	580b      	ldrlt	r3, [r1, r0]
 8016d24:	18c0      	addlt	r0, r0, r3
 8016d26:	4770      	bx	lr

08016d28 <_init>:
 8016d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d2a:	bf00      	nop
 8016d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d2e:	bc08      	pop	{r3}
 8016d30:	469e      	mov	lr, r3
 8016d32:	4770      	bx	lr

08016d34 <_fini>:
 8016d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d36:	bf00      	nop
 8016d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d3a:	bc08      	pop	{r3}
 8016d3c:	469e      	mov	lr, r3
 8016d3e:	4770      	bx	lr
