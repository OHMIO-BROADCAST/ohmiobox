
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c14  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e20  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bfc  08007bfc  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c04  08007c04  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c08  08007c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000024  08007c30  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c4  08007cd0  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b50  20000164  08007d70  00020164  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000cb4  08007d70  00020cb4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017d8f  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d54  00000000  00000000  00037f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001228  00000000  00000000  0003ac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010f8  00000000  00000000  0003bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002847b  00000000  00000000  0003cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000165ff  00000000  00000000  00065413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f662e  00000000  00000000  0007ba12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00172040  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ca8  00000000  00000000  00172090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000164 	.word	0x20000164
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005dc4 	.word	0x08005dc4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000168 	.word	0x20000168
 8000204:	08005dc4 	.word	0x08005dc4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
extern int indexMenu=0;
extern int screen=0;
static uint32_t last_arriba_time = 0; // keeps track of the last time "ARRIBA" was displayed

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fbd1 	bl	8001cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f8bc 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fa60 	bl	80009dc <MX_GPIO_Init>
  MX_ETH_Init();
 800051c:	f000 f972 	bl	8000804 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f9fe 	bl	8000920 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 fa2c 	bl	8000980 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000528:	f000 f9ba 	bl	80008a0 <MX_I2C2_Init>
  MX_ADC1_Init();
 800052c:	f000 f918 	bl	8000760 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000530:	f000 fb40 	bl	8000bb4 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 8000534:	f001 f8ee 	bl	8001714 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 8000538:	f001 f8f8 	bl	800172c <ssd1306_OhmioMenuPrincipal>
  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH

	  HAL_ADC_Start(&hadc1);
 800053c:	4850      	ldr	r0, [pc, #320]	; (8000680 <main+0x174>)
 800053e:	f001 fc7f 	bl	8001e40 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
 8000542:	210a      	movs	r1, #10
 8000544:	484e      	ldr	r0, [pc, #312]	; (8000680 <main+0x174>)
 8000546:	f001 fd7d 	bl	8002044 <HAL_ADC_PollForConversion>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10e      	bne.n	800056e <main+0x62>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc1);
 8000550:	484b      	ldr	r0, [pc, #300]	; (8000680 <main+0x174>)
 8000552:	f001 fe02 	bl	800215a <HAL_ADC_GetValue>
 8000556:	4603      	mov	r3, r0
 8000558:	4a4a      	ldr	r2, [pc, #296]	; (8000684 <main+0x178>)
 800055a:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen);
 800055c:	4b49      	ldr	r3, [pc, #292]	; (8000684 <main+0x178>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a49      	ldr	r2, [pc, #292]	; (8000688 <main+0x17c>)
 8000562:	6811      	ldr	r1, [r2, #0]
 8000564:	4a49      	ldr	r2, [pc, #292]	; (800068c <main+0x180>)
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f001 f889 	bl	8001680 <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 800 && analog_value_keypad <= 900){
 800056e:	4b45      	ldr	r3, [pc, #276]	; (8000684 <main+0x178>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000576:	d311      	bcc.n	800059c <main+0x90>
 8000578:	4b42      	ldr	r3, [pc, #264]	; (8000684 <main+0x178>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000580:	d80c      	bhi.n	800059c <main+0x90>
		   if (indexMenu==2){
 8000582:	4b41      	ldr	r3, [pc, #260]	; (8000688 <main+0x17c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d103      	bne.n	8000592 <main+0x86>
			   indexMenu=0;
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <main+0x17c>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e004      	b.n	800059c <main+0x90>
		   }else{
			   indexMenu++;
 8000592:	4b3d      	ldr	r3, [pc, #244]	; (8000688 <main+0x17c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	4a3b      	ldr	r2, [pc, #236]	; (8000688 <main+0x17c>)
 800059a:	6013      	str	r3, [r2, #0]
	   //screen=1 -> DASHBOARD
	   //screen=2 -> ENERGIA
	   //screen=3 -> SETTINGS


	      if(analog_value_keypad >= 0 && analog_value_keypad <= 100){
 800059c:	4b39      	ldr	r3, [pc, #228]	; (8000684 <main+0x178>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b64      	cmp	r3, #100	; 0x64
 80005a2:	d865      	bhi.n	8000670 <main+0x164>
			//Select
	    	//Menu Principal
			if(screen==0){
 80005a4:	4b39      	ldr	r3, [pc, #228]	; (800068c <main+0x180>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d125      	bne.n	80005f8 <main+0xec>
				if(indexMenu==0){
 80005ac:	4b36      	ldr	r3, [pc, #216]	; (8000688 <main+0x17c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d108      	bne.n	80005c6 <main+0xba>
					//option Dashboard
					screen=1;
 80005b4:	4b35      	ldr	r3, [pc, #212]	; (800068c <main+0x180>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80005ba:	4b33      	ldr	r3, [pc, #204]	; (8000688 <main+0x17c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80005c0:	f000 fb86 	bl	8000cd0 <ssd1306_UpdateScreen>
 80005c4:	e018      	b.n	80005f8 <main+0xec>
				}else if (indexMenu==1){
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <main+0x17c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d108      	bne.n	80005e0 <main+0xd4>
					//option Energy
					screen=2;
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <main+0x180>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <main+0x17c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80005da:	f000 fb79 	bl	8000cd0 <ssd1306_UpdateScreen>
 80005de:	e00b      	b.n	80005f8 <main+0xec>
				}else if (indexMenu==2){
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <main+0x17c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d107      	bne.n	80005f8 <main+0xec>
					screen=3;
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <main+0x180>)
 80005ea:	2203      	movs	r2, #3
 80005ec:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <main+0x17c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80005f4:	f000 fb6c 	bl	8000cd0 <ssd1306_UpdateScreen>
				}
			}
			// Dashboard
				if(screen==1){
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <main+0x180>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d10f      	bne.n	8000620 <main+0x114>
					if(indexMenu==0){
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <main+0x17c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00b      	beq.n	8000620 <main+0x114>
						//screen=1;
					}else if (indexMenu==2){
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <main+0x17c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d107      	bne.n	8000620 <main+0x114>
						//option Atras back
						screen=0;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <main+0x180>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <main+0x17c>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 800061c:	f000 fb58 	bl	8000cd0 <ssd1306_UpdateScreen>
					}
				}
			// Energy
				if(screen==2){
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <main+0x180>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d10f      	bne.n	8000648 <main+0x13c>
					if(indexMenu==0){
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <main+0x17c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00b      	beq.n	8000648 <main+0x13c>
						//option power no hace nada
						//screen=1;
					}else if (indexMenu==2){
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <main+0x17c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d107      	bne.n	8000648 <main+0x13c>
						//option Atras back
						screen=0;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <main+0x180>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
						indexMenu=0;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <main+0x17c>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
						ssd1306_UpdateScreen();
 8000644:	f000 fb44 	bl	8000cd0 <ssd1306_UpdateScreen>
					}
				}
			// Settings
			if(screen==3){
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <main+0x180>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d10f      	bne.n	8000670 <main+0x164>
				if(indexMenu==0){
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <main+0x17c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <main+0x164>
					//option Version no hace nada
					//screen=1;
				}else if (indexMenu==2){
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <main+0x17c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d107      	bne.n	8000670 <main+0x164>
					//option Atras back
					screen=0;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <main+0x180>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <main+0x17c>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 800066c:	f000 fb30 	bl	8000cd0 <ssd1306_UpdateScreen>
			}
	      }



	  HAL_ADC_Stop(&hadc1);
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <main+0x174>)
 8000672:	f001 fcb3 	bl	8001fdc <HAL_ADC_Stop>
	  HAL_Delay(50);
 8000676:	2032      	movs	r0, #50	; 0x32
 8000678:	f001 fb7a 	bl	8001d70 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800067c:	e75e      	b.n	800053c <main+0x30>
 800067e:	bf00      	nop
 8000680:	200001b8 	.word	0x200001b8
 8000684:	20000200 	.word	0x20000200
 8000688:	20000898 	.word	0x20000898
 800068c:	2000089c 	.word	0x2000089c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fb88 	bl	8005db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b4:	f003 fb4a 	bl	8003d4c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <SystemClock_Config+0xc8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <SystemClock_Config+0xc8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <SystemClock_Config+0xcc>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <SystemClock_Config+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000704:	2348      	movs	r3, #72	; 0x48
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800070c:	2303      	movs	r3, #3
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fb29 	bl	8003d6c <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 fa0a 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2102      	movs	r1, #2
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fdb7 	bl	80042b4 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800074c:	f000 f9f4 	bl	8000b38 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	; 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_ADC1_Init+0xa0>)
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007c0:	f001 fafa 	bl	8001db8 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f9b5 	bl	8000b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007e0:	f001 fcc8 	bl	8002174 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ea:	f000 f9a5 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001b8 	.word	0x200001b8
 80007fc:	40012000 	.word	0x40012000
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_ETH_Init+0x84>)
 800080a:	4a20      	ldr	r2, [pc, #128]	; (800088c <MX_ETH_Init+0x88>)
 800080c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_ETH_Init+0x8c>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ETH_Init+0x8c>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ETH_Init+0x8c>)
 800081c:	22e1      	movs	r2, #225	; 0xe1
 800081e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ETH_Init+0x8c>)
 8000822:	2200      	movs	r2, #0
 8000824:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_ETH_Init+0x8c>)
 8000828:	2200      	movs	r2, #0
 800082a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_ETH_Init+0x8c>)
 800082e:	2200      	movs	r2, #0
 8000830:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_ETH_Init+0x84>)
 8000834:	4a16      	ldr	r2, [pc, #88]	; (8000890 <MX_ETH_Init+0x8c>)
 8000836:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_ETH_Init+0x84>)
 800083a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800083e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_ETH_Init+0x84>)
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <MX_ETH_Init+0x90>)
 8000844:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_ETH_Init+0x84>)
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_ETH_Init+0x94>)
 800084a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_ETH_Init+0x84>)
 800084e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000852:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_ETH_Init+0x84>)
 8000856:	f001 ffc3 	bl	80027e0 <HAL_ETH_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f96a 	bl	8000b38 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000864:	2238      	movs	r2, #56	; 0x38
 8000866:	2100      	movs	r1, #0
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <MX_ETH_Init+0x98>)
 800086a:	f005 faa3 	bl	8005db4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_ETH_Init+0x98>)
 8000870:	2221      	movs	r2, #33	; 0x21
 8000872:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_ETH_Init+0x98>)
 8000876:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800087a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_ETH_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000204 	.word	0x20000204
 800088c:	40028000 	.word	0x40028000
 8000890:	200008a0 	.word	0x200008a0
 8000894:	200000c4 	.word	0x200000c4
 8000898:	20000024 	.word	0x20000024
 800089c:	20000180 	.word	0x20000180

080008a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_I2C2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_I2C2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <MX_I2C2_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_I2C2_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2C2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_I2C2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	; (8000914 <MX_I2C2_Init+0x74>)
 80008dc:	f002 fc6c 	bl	80031b8 <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f927 	bl	8000b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ee:	f003 f84d 	bl	800398c <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f91e 	bl	8000b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_I2C2_Init+0x74>)
 8000900:	f003 f88f 	bl	8003a22 <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f915 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200002b4 	.word	0x200002b4
 8000918:	40005800 	.word	0x40005800
 800091c:	00301739 	.word	0x00301739

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <MX_USART3_UART_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000964:	f004 fabc 	bl	8004ee0 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f8e3 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000308 	.word	0x20000308
 800097c:	40004800 	.word	0x40004800

08000980 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800098a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2206      	movs	r2, #6
 8000990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2202      	movs	r2, #2
 8000996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	f003 f879 	bl	8003aba <HAL_PCD_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f8b3 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000390 	.word	0x20000390

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <MX_GPIO_Init+0x14c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a4c      	ldr	r2, [pc, #304]	; (8000b28 <MX_GPIO_Init+0x14c>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a46      	ldr	r2, [pc, #280]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a40      	ldr	r2, [pc, #256]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a34      	ldr	r2, [pc, #208]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_GPIO_Init+0x14c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa0:	4822      	ldr	r0, [pc, #136]	; (8000b2c <MX_GPIO_Init+0x150>)
 8000aa2:	f002 fb6f 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	4821      	ldr	r0, [pc, #132]	; (8000b30 <MX_GPIO_Init+0x154>)
 8000aac:	f002 fb6a 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481b      	ldr	r0, [pc, #108]	; (8000b34 <MX_GPIO_Init+0x158>)
 8000ac8:	f002 f9b0 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000acc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MX_GPIO_Init+0x150>)
 8000ae6:	f002 f9a1 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <MX_GPIO_Init+0x154>)
 8000b02:	f002 f993 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_GPIO_Init+0x154>)
 8000b1a:	f002 f987 	bl	8002e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3730      	adds	r7, #48	; 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40021800 	.word	0x40021800
 8000b34:	40020800 	.word	0x40020800

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>

08000b42 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af04      	add	r7, sp, #16
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	9302      	str	r3, [sp, #8]
 8000b60:	2301      	movs	r3, #1
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2178      	movs	r1, #120	; 0x78
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <ssd1306_WriteCommand+0x2c>)
 8000b70:	f002 fbb2 	bl	80032d8 <HAL_I2C_Mem_Write>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200002b4 	.word	0x200002b4

08000b80 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af04      	add	r7, sp, #16
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	2178      	movs	r1, #120	; 0x78
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <ssd1306_WriteData+0x30>)
 8000ba2:	f002 fb99 	bl	80032d8 <HAL_I2C_Mem_Write>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200002b4 	.word	0x200002b4

08000bb4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000bb8:	f7ff ffc3 	bl	8000b42 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000bbc:	2064      	movs	r0, #100	; 0x64
 8000bbe:	f001 f8d7 	bl	8001d70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 fa34 	bl	8001030 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000bc8:	2020      	movs	r0, #32
 8000bca:	f7ff ffc1 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ffbe 	bl	8000b50 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bd4:	20b0      	movs	r0, #176	; 0xb0
 8000bd6:	f7ff ffbb 	bl	8000b50 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000bda:	20c8      	movs	r0, #200	; 0xc8
 8000bdc:	f7ff ffb8 	bl	8000b50 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff ffb5 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000be6:	2010      	movs	r0, #16
 8000be8:	f7ff ffb2 	bl	8000b50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000bec:	2040      	movs	r0, #64	; 0x40
 8000bee:	f7ff ffaf 	bl	8000b50 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000bf2:	20ff      	movs	r0, #255	; 0xff
 8000bf4:	f000 fa09 	bl	800100a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000bf8:	20a1      	movs	r0, #161	; 0xa1
 8000bfa:	f7ff ffa9 	bl	8000b50 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bfe:	20a6      	movs	r0, #166	; 0xa6
 8000c00:	f7ff ffa6 	bl	8000b50 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c04:	20a8      	movs	r0, #168	; 0xa8
 8000c06:	f7ff ffa3 	bl	8000b50 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000c0a:	203f      	movs	r0, #63	; 0x3f
 8000c0c:	f7ff ffa0 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c10:	20a4      	movs	r0, #164	; 0xa4
 8000c12:	f7ff ff9d 	bl	8000b50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c16:	20d3      	movs	r0, #211	; 0xd3
 8000c18:	f7ff ff9a 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff ff97 	bl	8000b50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c22:	20d5      	movs	r0, #213	; 0xd5
 8000c24:	f7ff ff94 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c28:	20f0      	movs	r0, #240	; 0xf0
 8000c2a:	f7ff ff91 	bl	8000b50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c2e:	20d9      	movs	r0, #217	; 0xd9
 8000c30:	f7ff ff8e 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c34:	2022      	movs	r0, #34	; 0x22
 8000c36:	f7ff ff8b 	bl	8000b50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c3a:	20da      	movs	r0, #218	; 0xda
 8000c3c:	f7ff ff88 	bl	8000b50 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c40:	2012      	movs	r0, #18
 8000c42:	f7ff ff85 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c46:	20db      	movs	r0, #219	; 0xdb
 8000c48:	f7ff ff82 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c4c:	2020      	movs	r0, #32
 8000c4e:	f7ff ff7f 	bl	8000b50 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c52:	208d      	movs	r0, #141	; 0x8d
 8000c54:	f7ff ff7c 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c58:	2014      	movs	r0, #20
 8000c5a:	f7ff ff79 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 f9e6 	bl	8001030 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f80f 	bl	8000c88 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c6a:	f000 f831 	bl	8000cd0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <ssd1306_Init+0xd0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <ssd1306_Init+0xd0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c7a:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <ssd1306_Init+0xd0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	711a      	strb	r2, [r3, #4]
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000ca8 	.word	0x20000ca8

08000c88 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e00d      	b.n	8000cb4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <ssd1306_Fill+0x1a>
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	e000      	b.n	8000ca4 <ssd1306_Fill+0x1c>
 8000ca2:	21ff      	movs	r1, #255	; 0xff
 8000ca4:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <ssd1306_Fill+0x44>)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4413      	add	r3, r2
 8000caa:	460a      	mov	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cba:	d3ed      	bcc.n	8000c98 <ssd1306_Fill+0x10>
    }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200008a8 	.word	0x200008a8

08000cd0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	e016      	b.n	8000d0a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	3b50      	subs	r3, #80	; 0x50
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff34 	bl	8000b50 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff ff31 	bl	8000b50 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000cee:	2010      	movs	r0, #16
 8000cf0:	f7ff ff2e 	bl	8000b50 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	01db      	lsls	r3, r3, #7
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <ssd1306_UpdateScreen+0x4c>)
 8000cfa:	4413      	add	r3, r2
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff3e 	bl	8000b80 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	3301      	adds	r3, #1
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b07      	cmp	r3, #7
 8000d0e:	d9e5      	bls.n	8000cdc <ssd1306_UpdateScreen+0xc>
    }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200008a8 	.word	0x200008a8

08000d20 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db3d      	blt.n	8000db6 <ssd1306_DrawPixel+0x96>
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d3e:	d83a      	bhi.n	8000db6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d40:	797b      	ldrb	r3, [r7, #5]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d11a      	bne.n	8000d7c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d46:	79fa      	ldrb	r2, [r7, #7]
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	b2d8      	uxtb	r0, r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	01db      	lsls	r3, r3, #7
 8000d52:	4413      	add	r3, r2
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <ssd1306_DrawPixel+0xa4>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	b25a      	sxtb	r2, r3
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	2101      	movs	r1, #1
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b259      	sxtb	r1, r3
 8000d6c:	79fa      	ldrb	r2, [r7, #7]
 8000d6e:	4603      	mov	r3, r0
 8000d70:	01db      	lsls	r3, r3, #7
 8000d72:	4413      	add	r3, r2
 8000d74:	b2c9      	uxtb	r1, r1
 8000d76:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <ssd1306_DrawPixel+0xa4>)
 8000d78:	54d1      	strb	r1, [r2, r3]
 8000d7a:	e01d      	b.n	8000db8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d7c:	79fa      	ldrb	r2, [r7, #7]
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	b2d8      	uxtb	r0, r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	01db      	lsls	r3, r3, #7
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <ssd1306_DrawPixel+0xa4>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	4013      	ands	r3, r2
 8000da4:	b259      	sxtb	r1, r3
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	4603      	mov	r3, r0
 8000daa:	01db      	lsls	r3, r3, #7
 8000dac:	4413      	add	r3, r2
 8000dae:	b2c9      	uxtb	r1, r1
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <ssd1306_DrawPixel+0xa4>)
 8000db2:	54d1      	strb	r1, [r2, r3]
 8000db4:	e000      	b.n	8000db8 <ssd1306_DrawPixel+0x98>
        return;
 8000db6:	bf00      	nop
    }
}
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200008a8 	.word	0x200008a8

08000dc8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	1d38      	adds	r0, r7, #4
 8000dd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4623      	mov	r3, r4
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b1f      	cmp	r3, #31
 8000de4:	d902      	bls.n	8000dec <ssd1306_WriteChar+0x24>
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b7e      	cmp	r3, #126	; 0x7e
 8000dea:	d901      	bls.n	8000df0 <ssd1306_WriteChar+0x28>
        return 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e06d      	b.n	8000ecc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000df0:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <ssd1306_WriteChar+0x10c>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	793b      	ldrb	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2b80      	cmp	r3, #128	; 0x80
 8000dfc:	dc06      	bgt.n	8000e0c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <ssd1306_WriteChar+0x10c>)
 8000e00:	885b      	ldrh	r3, [r3, #2]
 8000e02:	461a      	mov	r2, r3
 8000e04:	797b      	ldrb	r3, [r7, #5]
 8000e06:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000e08:	2b40      	cmp	r3, #64	; 0x40
 8000e0a:	dd01      	ble.n	8000e10 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e05d      	b.n	8000ecc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	e04c      	b.n	8000eb0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	3b20      	subs	r3, #32
 8000e1c:	7979      	ldrb	r1, [r7, #5]
 8000e1e:	fb01 f303 	mul.w	r3, r1, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	440b      	add	r3, r1
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	e034      	b.n	8000ea0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d012      	beq.n	8000e6c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <ssd1306_WriteChar+0x10c>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2d8      	uxtb	r0, r3
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <ssd1306_WriteChar+0x10c>)
 8000e56:	885b      	ldrh	r3, [r3, #2]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	7bba      	ldrb	r2, [r7, #14]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff ff5b 	bl	8000d20 <ssd1306_DrawPixel>
 8000e6a:	e016      	b.n	8000e9a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <ssd1306_WriteChar+0x10c>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4413      	add	r3, r2
 8000e78:	b2d8      	uxtb	r0, r3
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <ssd1306_WriteChar+0x10c>)
 8000e7c:	885b      	ldrh	r3, [r3, #2]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4413      	add	r3, r2
 8000e86:	b2d9      	uxtb	r1, r3
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	f7ff ff43 	bl	8000d20 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	793b      	ldrb	r3, [r7, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d3c5      	bcc.n	8000e36 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	797b      	ldrb	r3, [r7, #5]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d3ad      	bcc.n	8000e16 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <ssd1306_WriteChar+0x10c>)
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	793b      	ldrb	r3, [r7, #4]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <ssd1306_WriteChar+0x10c>)
 8000ec8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3724      	adds	r7, #36	; 0x24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	20000ca8 	.word	0x20000ca8

08000ed8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	1d38      	adds	r0, r7, #4
 8000ee2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ee6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000ee8:	e012      	b.n	8000f10 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	7818      	ldrb	r0, [r3, #0]
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	1d3a      	adds	r2, r7, #4
 8000ef2:	ca06      	ldmia	r2, {r1, r2}
 8000ef4:	f7ff ff68 	bl	8000dc8 <ssd1306_WriteChar>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d002      	beq.n	8000f0a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	e008      	b.n	8000f1c <ssd1306_WriteString+0x44>
        }
        str++;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e8      	bne.n	8000eea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <ssd1306_SetCursor+0x2c>)
 8000f3a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <ssd1306_SetCursor+0x2c>)
 8000f42:	805a      	strh	r2, [r3, #2]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000ca8 	.word	0x20000ca8

08000f54 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	603a      	str	r2, [r7, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	460b      	mov	r3, r1
 8000f64:	71bb      	strb	r3, [r7, #6]
 8000f66:	4613      	mov	r3, r2
 8000f68:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	3307      	adds	r3, #7
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da00      	bge.n	8000f74 <ssd1306_DrawBitmap+0x20>
 8000f72:	3307      	adds	r3, #7
 8000f74:	10db      	asrs	r3, r3, #3
 8000f76:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db3e      	blt.n	8001002 <ssd1306_DrawBitmap+0xae>
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	2b3f      	cmp	r3, #63	; 0x3f
 8000f88:	d83b      	bhi.n	8001002 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	e033      	b.n	8000ff8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	737b      	strb	r3, [r7, #13]
 8000f94:	e026      	b.n	8000fe4 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e00d      	b.n	8000fc4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000fae:	fb02 f303 	mul.w	r3, r2, r3
 8000fb2:	7b7a      	ldrb	r2, [r7, #13]
 8000fb4:	08d2      	lsrs	r2, r2, #3
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	4413      	add	r3, r2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da08      	bge.n	8000fde <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	7b7b      	ldrb	r3, [r7, #13]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	7f3a      	ldrb	r2, [r7, #28]
 8000fd6:	79b9      	ldrb	r1, [r7, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fea1 	bl	8000d20 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	737b      	strb	r3, [r7, #13]
 8000fe4:	7b7a      	ldrb	r2, [r7, #13]
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3d4      	bcc.n	8000f96 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	73bb      	strb	r3, [r7, #14]
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	71bb      	strb	r3, [r7, #6]
 8000ff8:	7bba      	ldrb	r2, [r7, #14]
 8000ffa:	7e3b      	ldrb	r3, [r7, #24]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3c7      	bcc.n	8000f90 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001000:	e000      	b.n	8001004 <ssd1306_DrawBitmap+0xb0>
        return;
 8001002:	bf00      	nop
}
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001014:	2381      	movs	r3, #129	; 0x81
 8001016:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fd98 	bl	8000b50 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fd94 	bl	8000b50 <ssd1306_WriteCommand>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001040:	23af      	movs	r3, #175	; 0xaf
 8001042:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <ssd1306_SetDisplayOn+0x38>)
 8001046:	2201      	movs	r2, #1
 8001048:	715a      	strb	r2, [r3, #5]
 800104a:	e004      	b.n	8001056 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800104c:	23ae      	movs	r3, #174	; 0xae
 800104e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <ssd1306_SetDisplayOn+0x38>)
 8001052:	2200      	movs	r2, #0
 8001054:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fd79 	bl	8000b50 <ssd1306_WriteCommand>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000ca8 	.word	0x20000ca8

0800106c <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff fe06 	bl	8000c88 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4619      	mov	r1, r3
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ff4f 	bl	8000f24 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <ssd1306_TestFonts1+0x88>)
 8001088:	2301      	movs	r3, #1
 800108a:	ca06      	ldmia	r2, {r1, r2}
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <ssd1306_TestFonts1+0x8c>)
 800108e:	f7ff ff23 	bl	8000ed8 <ssd1306_WriteString>
    y += 26;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	331a      	adds	r3, #26
 8001096:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4619      	mov	r1, r3
 800109c:	2002      	movs	r0, #2
 800109e:	f7ff ff41 	bl	8000f24 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 80010a2:	4a16      	ldr	r2, [pc, #88]	; (80010fc <ssd1306_TestFonts1+0x90>)
 80010a4:	2301      	movs	r3, #1
 80010a6:	ca06      	ldmia	r2, {r1, r2}
 80010a8:	4815      	ldr	r0, [pc, #84]	; (8001100 <ssd1306_TestFonts1+0x94>)
 80010aa:	f7ff ff15 	bl	8000ed8 <ssd1306_WriteString>
    y += 10;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	330a      	adds	r3, #10
 80010b2:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	4619      	mov	r1, r3
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff ff33 	bl	8000f24 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <ssd1306_TestFonts1+0x98>)
 80010c0:	2301      	movs	r3, #1
 80010c2:	ca06      	ldmia	r2, {r1, r2}
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <ssd1306_TestFonts1+0x9c>)
 80010c6:	f7ff ff07 	bl	8000ed8 <ssd1306_WriteString>
    y += 10;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	330a      	adds	r3, #10
 80010ce:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4619      	mov	r1, r3
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff ff25 	bl	8000f24 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.1", Font_6x8, White);
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <ssd1306_TestFonts1+0x98>)
 80010dc:	2301      	movs	r3, #1
 80010de:	ca06      	ldmia	r2, {r1, r2}
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <ssd1306_TestFonts1+0xa0>)
 80010e2:	f7ff fef9 	bl	8000ed8 <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 80010e6:	f7ff fdf3 	bl	8000cd0 <ssd1306_UpdateScreen>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000010 	.word	0x20000010
 80010f8:	08005ddc 	.word	0x08005ddc
 80010fc:	20000008 	.word	0x20000008
 8001100:	08005de8 	.word	0x08005de8
 8001104:	20000000 	.word	0x20000000
 8001108:	08005df4 	.word	0x08005df4
 800110c:	08005e08 	.word	0x08005e08

08001110 <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fdaa 	bl	8000c88 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001134:	7ffb      	ldrb	r3, [r7, #31]
 8001136:	4619      	mov	r1, r3
 8001138:	2002      	movs	r0, #2
 800113a:	f7ff fef3 	bl	8000f24 <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 800113e:	4a42      	ldr	r2, [pc, #264]	; (8001248 <ssd1306_PrintPrincipalMenu+0x138>)
 8001140:	2301      	movs	r3, #1
 8001142:	ca06      	ldmia	r2, {r1, r2}
 8001144:	4841      	ldr	r0, [pc, #260]	; (800124c <ssd1306_PrintPrincipalMenu+0x13c>)
 8001146:	f7ff fec7 	bl	8000ed8 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800114a:	7ffb      	ldrb	r3, [r7, #31]
 800114c:	3314      	adds	r3, #20
 800114e:	77fb      	strb	r3, [r7, #31]
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	4619      	mov	r1, r3
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff fee5 	bl	8000f24 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d106      	bne.n	800116e <ssd1306_PrintPrincipalMenu+0x5e>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 8001160:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <ssd1306_PrintPrincipalMenu+0x140>)
 8001162:	2300      	movs	r3, #0
 8001164:	ca06      	ldmia	r2, {r1, r2}
 8001166:	483b      	ldr	r0, [pc, #236]	; (8001254 <ssd1306_PrintPrincipalMenu+0x144>)
 8001168:	f7ff feb6 	bl	8000ed8 <ssd1306_WriteString>
 800116c:	e005      	b.n	800117a <ssd1306_PrintPrincipalMenu+0x6a>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 800116e:	4a38      	ldr	r2, [pc, #224]	; (8001250 <ssd1306_PrintPrincipalMenu+0x140>)
 8001170:	2301      	movs	r3, #1
 8001172:	ca06      	ldmia	r2, {r1, r2}
 8001174:	4837      	ldr	r0, [pc, #220]	; (8001254 <ssd1306_PrintPrincipalMenu+0x144>)
 8001176:	f7ff feaf 	bl	8000ed8 <ssd1306_WriteString>

	    }
	    y += 10;
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	330a      	adds	r3, #10
 800117e:	77fb      	strb	r3, [r7, #31]
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	4619      	mov	r1, r3
 8001184:	2002      	movs	r0, #2
 8001186:	f7ff fecd 	bl	8000f24 <ssd1306_SetCursor>
	    if(indexMenu==1){
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <ssd1306_PrintPrincipalMenu+0x8e>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 8001190:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <ssd1306_PrintPrincipalMenu+0x140>)
 8001192:	2300      	movs	r3, #0
 8001194:	ca06      	ldmia	r2, {r1, r2}
 8001196:	4830      	ldr	r0, [pc, #192]	; (8001258 <ssd1306_PrintPrincipalMenu+0x148>)
 8001198:	f7ff fe9e 	bl	8000ed8 <ssd1306_WriteString>
 800119c:	e005      	b.n	80011aa <ssd1306_PrintPrincipalMenu+0x9a>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 800119e:	4a2c      	ldr	r2, [pc, #176]	; (8001250 <ssd1306_PrintPrincipalMenu+0x140>)
 80011a0:	2301      	movs	r3, #1
 80011a2:	ca06      	ldmia	r2, {r1, r2}
 80011a4:	482c      	ldr	r0, [pc, #176]	; (8001258 <ssd1306_PrintPrincipalMenu+0x148>)
 80011a6:	f7ff fe97 	bl	8000ed8 <ssd1306_WriteString>

	    }
		y += 10;
 80011aa:	7ffb      	ldrb	r3, [r7, #31]
 80011ac:	330a      	adds	r3, #10
 80011ae:	77fb      	strb	r3, [r7, #31]

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	4619      	mov	r1, r3
 80011b4:	2002      	movs	r0, #2
 80011b6:	f7ff feb5 	bl	8000f24 <ssd1306_SetCursor>
	    if(indexMenu==2){
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d106      	bne.n	80011ce <ssd1306_PrintPrincipalMenu+0xbe>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 80011c0:	4a23      	ldr	r2, [pc, #140]	; (8001250 <ssd1306_PrintPrincipalMenu+0x140>)
 80011c2:	2300      	movs	r3, #0
 80011c4:	ca06      	ldmia	r2, {r1, r2}
 80011c6:	4825      	ldr	r0, [pc, #148]	; (800125c <ssd1306_PrintPrincipalMenu+0x14c>)
 80011c8:	f7ff fe86 	bl	8000ed8 <ssd1306_WriteString>
 80011cc:	e005      	b.n	80011da <ssd1306_PrintPrincipalMenu+0xca>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 80011ce:	4a20      	ldr	r2, [pc, #128]	; (8001250 <ssd1306_PrintPrincipalMenu+0x140>)
 80011d0:	2301      	movs	r3, #1
 80011d2:	ca06      	ldmia	r2, {r1, r2}
 80011d4:	4821      	ldr	r0, [pc, #132]	; (800125c <ssd1306_PrintPrincipalMenu+0x14c>)
 80011d6:	f7ff fe7f 	bl	8000ed8 <ssd1306_WriteString>

	    }
		y += 10;
 80011da:	7ffb      	ldrb	r3, [r7, #31]
 80011dc:	330a      	adds	r3, #10
 80011de:	77fb      	strb	r3, [r7, #31]
		#endif




	         if(value >= 2850 && value <= 2950){
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f640 3221 	movw	r2, #2849	; 0xb21
 80011e6:	4293      	cmp	r3, r2
 80011e8:	dd0c      	ble.n	8001204 <ssd1306_PrintPrincipalMenu+0xf4>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f640 3286 	movw	r2, #2950	; 0xb86
 80011f0:	4293      	cmp	r3, r2
 80011f2:	dc07      	bgt.n	8001204 <ssd1306_PrintPrincipalMenu+0xf4>
	            strcpy(stringDirection, "DERECHA");
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <ssd1306_PrintPrincipalMenu+0x150>)
 80011fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001202:	e01b      	b.n	800123c <ssd1306_PrintPrincipalMenu+0x12c>
	        }
	        else if(value >= 1850 && value <= 1950){
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f240 7239 	movw	r2, #1849	; 0x739
 800120a:	4293      	cmp	r3, r2
 800120c:	dd0b      	ble.n	8001226 <ssd1306_PrintPrincipalMenu+0x116>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f240 729e 	movw	r2, #1950	; 0x79e
 8001214:	4293      	cmp	r3, r2
 8001216:	dc06      	bgt.n	8001226 <ssd1306_PrintPrincipalMenu+0x116>
	            strcpy(stringDirection, "IZQUIERDA");
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <ssd1306_PrintPrincipalMenu+0x154>)
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001220:	c303      	stmia	r3!, {r0, r1}
 8001222:	801a      	strh	r2, [r3, #0]
 8001224:	e00a      	b.n	800123c <ssd1306_PrintPrincipalMenu+0x12c>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <ssd1306_PrintPrincipalMenu+0x158>)
 800122c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001230:	6018      	str	r0, [r3, #0]
 8001232:	3304      	adds	r3, #4
 8001234:	8019      	strh	r1, [r3, #0]
 8001236:	3302      	adds	r3, #2
 8001238:	0c0a      	lsrs	r2, r1, #16
 800123a:	701a      	strb	r2, [r3, #0]
	         //sprintf(screen_str, "%d", screen); // convert index to a string
	         //ssd1306_SetCursor(20, y); // set the cursor position
	         //ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
	         //   #endif

	    ssd1306_UpdateScreen();
 800123c:	f7ff fd48 	bl	8000cd0 <ssd1306_UpdateScreen>
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000010 	.word	0x20000010
 800124c:	08005e14 	.word	0x08005e14
 8001250:	20000008 	.word	0x20000008
 8001254:	08005e1c 	.word	0x08005e1c
 8001258:	08005e28 	.word	0x08005e28
 800125c:	08005e30 	.word	0x08005e30
 8001260:	08005e3c 	.word	0x08005e3c
 8001264:	08005e44 	.word	0x08005e44
 8001268:	08005e50 	.word	0x08005e50

0800126c <ssd1306_PrintDashboardMenu>:

void ssd1306_PrintDashboardMenu(int value, int indexMenu, int screen){
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcfc 	bl	8000c88 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	4619      	mov	r1, r3
 8001294:	2002      	movs	r0, #2
 8001296:	f7ff fe45 	bl	8000f24 <ssd1306_SetCursor>
	    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 800129a:	4a42      	ldr	r2, [pc, #264]	; (80013a4 <ssd1306_PrintDashboardMenu+0x138>)
 800129c:	2301      	movs	r3, #1
 800129e:	ca06      	ldmia	r2, {r1, r2}
 80012a0:	4841      	ldr	r0, [pc, #260]	; (80013a8 <ssd1306_PrintDashboardMenu+0x13c>)
 80012a2:	f7ff fe19 	bl	8000ed8 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	3314      	adds	r3, #20
 80012aa:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80012ac:	7ffb      	ldrb	r3, [r7, #31]
 80012ae:	4619      	mov	r1, r3
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff fe37 	bl	8000f24 <ssd1306_SetCursor>
	    if(indexMenu==0){
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <ssd1306_PrintDashboardMenu+0x5e>
	        ssd1306_WriteString("LoRa Status", Font_7x10, Black);
 80012bc:	4a3b      	ldr	r2, [pc, #236]	; (80013ac <ssd1306_PrintDashboardMenu+0x140>)
 80012be:	2300      	movs	r3, #0
 80012c0:	ca06      	ldmia	r2, {r1, r2}
 80012c2:	483b      	ldr	r0, [pc, #236]	; (80013b0 <ssd1306_PrintDashboardMenu+0x144>)
 80012c4:	f7ff fe08 	bl	8000ed8 <ssd1306_WriteString>
 80012c8:	e005      	b.n	80012d6 <ssd1306_PrintDashboardMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("LoRa Status", Font_7x10, White);
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <ssd1306_PrintDashboardMenu+0x140>)
 80012cc:	2301      	movs	r3, #1
 80012ce:	ca06      	ldmia	r2, {r1, r2}
 80012d0:	4837      	ldr	r0, [pc, #220]	; (80013b0 <ssd1306_PrintDashboardMenu+0x144>)
 80012d2:	f7ff fe01 	bl	8000ed8 <ssd1306_WriteString>
	    }
		y += 10;
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	330a      	adds	r3, #10
 80012da:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	4619      	mov	r1, r3
 80012e0:	2002      	movs	r0, #2
 80012e2:	f7ff fe1f 	bl	8000f24 <ssd1306_SetCursor>
		if(indexMenu==1){
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d106      	bne.n	80012fa <ssd1306_PrintDashboardMenu+0x8e>
	        ssd1306_WriteString("RF", Font_7x10, Black);
 80012ec:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <ssd1306_PrintDashboardMenu+0x140>)
 80012ee:	2300      	movs	r3, #0
 80012f0:	ca06      	ldmia	r2, {r1, r2}
 80012f2:	4830      	ldr	r0, [pc, #192]	; (80013b4 <ssd1306_PrintDashboardMenu+0x148>)
 80012f4:	f7ff fdf0 	bl	8000ed8 <ssd1306_WriteString>
 80012f8:	e005      	b.n	8001306 <ssd1306_PrintDashboardMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("RF", Font_7x10, White);
 80012fa:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <ssd1306_PrintDashboardMenu+0x140>)
 80012fc:	2301      	movs	r3, #1
 80012fe:	ca06      	ldmia	r2, {r1, r2}
 8001300:	482c      	ldr	r0, [pc, #176]	; (80013b4 <ssd1306_PrintDashboardMenu+0x148>)
 8001302:	f7ff fde9 	bl	8000ed8 <ssd1306_WriteString>
		}
		y += 10;
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	330a      	adds	r3, #10
 800130a:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4619      	mov	r1, r3
 8001310:	2002      	movs	r0, #2
 8001312:	f7ff fe07 	bl	8000f24 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d106      	bne.n	800132a <ssd1306_PrintDashboardMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 800131c:	4a23      	ldr	r2, [pc, #140]	; (80013ac <ssd1306_PrintDashboardMenu+0x140>)
 800131e:	2300      	movs	r3, #0
 8001320:	ca06      	ldmia	r2, {r1, r2}
 8001322:	4825      	ldr	r0, [pc, #148]	; (80013b8 <ssd1306_PrintDashboardMenu+0x14c>)
 8001324:	f7ff fdd8 	bl	8000ed8 <ssd1306_WriteString>
 8001328:	e005      	b.n	8001336 <ssd1306_PrintDashboardMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <ssd1306_PrintDashboardMenu+0x140>)
 800132c:	2301      	movs	r3, #1
 800132e:	ca06      	ldmia	r2, {r1, r2}
 8001330:	4821      	ldr	r0, [pc, #132]	; (80013b8 <ssd1306_PrintDashboardMenu+0x14c>)
 8001332:	f7ff fdd1 	bl	8000ed8 <ssd1306_WriteString>
		}
		y += 10;
 8001336:	7ffb      	ldrb	r3, [r7, #31]
 8001338:	330a      	adds	r3, #10
 800133a:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f640 3221 	movw	r2, #2849	; 0xb21
 8001342:	4293      	cmp	r3, r2
 8001344:	dd0c      	ble.n	8001360 <ssd1306_PrintDashboardMenu+0xf4>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f640 3286 	movw	r2, #2950	; 0xb86
 800134c:	4293      	cmp	r3, r2
 800134e:	dc07      	bgt.n	8001360 <ssd1306_PrintDashboardMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <ssd1306_PrintDashboardMenu+0x150>)
 8001356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135a:	e883 0003 	stmia.w	r3, {r0, r1}
 800135e:	e01b      	b.n	8001398 <ssd1306_PrintDashboardMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f240 7239 	movw	r2, #1849	; 0x739
 8001366:	4293      	cmp	r3, r2
 8001368:	dd0b      	ble.n	8001382 <ssd1306_PrintDashboardMenu+0x116>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001370:	4293      	cmp	r3, r2
 8001372:	dc06      	bgt.n	8001382 <ssd1306_PrintDashboardMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <ssd1306_PrintDashboardMenu+0x154>)
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	ca07      	ldmia	r2, {r0, r1, r2}
 800137c:	c303      	stmia	r3!, {r0, r1}
 800137e:	801a      	strh	r2, [r3, #0]
 8001380:	e00a      	b.n	8001398 <ssd1306_PrintDashboardMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <ssd1306_PrintDashboardMenu+0x158>)
 8001388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138c:	6018      	str	r0, [r3, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	8019      	strh	r1, [r3, #0]
 8001392:	3302      	adds	r3, #2
 8001394:	0c0a      	lsrs	r2, r1, #16
 8001396:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001398:	f7ff fc9a 	bl	8000cd0 <ssd1306_UpdateScreen>
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000010 	.word	0x20000010
 80013a8:	08005ddc 	.word	0x08005ddc
 80013ac:	20000008 	.word	0x20000008
 80013b0:	08005e58 	.word	0x08005e58
 80013b4:	08005e64 	.word	0x08005e64
 80013b8:	08005e68 	.word	0x08005e68
 80013bc:	08005e3c 	.word	0x08005e3c
 80013c0:	08005e44 	.word	0x08005e44
 80013c4:	08005e50 	.word	0x08005e50

080013c8 <ssd1306_PrintEnergyMenu>:

void ssd1306_PrintEnergyMenu(int value, int indexMenu, int screen){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fc4e 	bl	8000c88 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	4619      	mov	r1, r3
 80013f0:	2002      	movs	r0, #2
 80013f2:	f7ff fd97 	bl	8000f24 <ssd1306_SetCursor>
	    ssd1306_WriteString("ENERGY", Font_11x18, White);
 80013f6:	4a42      	ldr	r2, [pc, #264]	; (8001500 <ssd1306_PrintEnergyMenu+0x138>)
 80013f8:	2301      	movs	r3, #1
 80013fa:	ca06      	ldmia	r2, {r1, r2}
 80013fc:	4841      	ldr	r0, [pc, #260]	; (8001504 <ssd1306_PrintEnergyMenu+0x13c>)
 80013fe:	f7ff fd6b 	bl	8000ed8 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001402:	7ffb      	ldrb	r3, [r7, #31]
 8001404:	3314      	adds	r3, #20
 8001406:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	4619      	mov	r1, r3
 800140c:	2002      	movs	r0, #2
 800140e:	f7ff fd89 	bl	8000f24 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <ssd1306_PrintEnergyMenu+0x5e>
	        ssd1306_WriteString("Power Supply", Font_7x10, Black);
 8001418:	4a3b      	ldr	r2, [pc, #236]	; (8001508 <ssd1306_PrintEnergyMenu+0x140>)
 800141a:	2300      	movs	r3, #0
 800141c:	ca06      	ldmia	r2, {r1, r2}
 800141e:	483b      	ldr	r0, [pc, #236]	; (800150c <ssd1306_PrintEnergyMenu+0x144>)
 8001420:	f7ff fd5a 	bl	8000ed8 <ssd1306_WriteString>
 8001424:	e005      	b.n	8001432 <ssd1306_PrintEnergyMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("Power Supply", Font_7x10, White);
 8001426:	4a38      	ldr	r2, [pc, #224]	; (8001508 <ssd1306_PrintEnergyMenu+0x140>)
 8001428:	2301      	movs	r3, #1
 800142a:	ca06      	ldmia	r2, {r1, r2}
 800142c:	4837      	ldr	r0, [pc, #220]	; (800150c <ssd1306_PrintEnergyMenu+0x144>)
 800142e:	f7ff fd53 	bl	8000ed8 <ssd1306_WriteString>
	    }
		y += 10;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	330a      	adds	r3, #10
 8001436:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	4619      	mov	r1, r3
 800143c:	2002      	movs	r0, #2
 800143e:	f7ff fd71 	bl	8000f24 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d106      	bne.n	8001456 <ssd1306_PrintEnergyMenu+0x8e>
	        ssd1306_WriteString("Status: 80%", Font_7x10, Black);
 8001448:	4a2f      	ldr	r2, [pc, #188]	; (8001508 <ssd1306_PrintEnergyMenu+0x140>)
 800144a:	2300      	movs	r3, #0
 800144c:	ca06      	ldmia	r2, {r1, r2}
 800144e:	4830      	ldr	r0, [pc, #192]	; (8001510 <ssd1306_PrintEnergyMenu+0x148>)
 8001450:	f7ff fd42 	bl	8000ed8 <ssd1306_WriteString>
 8001454:	e005      	b.n	8001462 <ssd1306_PrintEnergyMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("Status: 80%", Font_7x10, White);
 8001456:	4a2c      	ldr	r2, [pc, #176]	; (8001508 <ssd1306_PrintEnergyMenu+0x140>)
 8001458:	2301      	movs	r3, #1
 800145a:	ca06      	ldmia	r2, {r1, r2}
 800145c:	482c      	ldr	r0, [pc, #176]	; (8001510 <ssd1306_PrintEnergyMenu+0x148>)
 800145e:	f7ff fd3b 	bl	8000ed8 <ssd1306_WriteString>
		}
		y += 10;
 8001462:	7ffb      	ldrb	r3, [r7, #31]
 8001464:	330a      	adds	r3, #10
 8001466:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001468:	7ffb      	ldrb	r3, [r7, #31]
 800146a:	4619      	mov	r1, r3
 800146c:	2002      	movs	r0, #2
 800146e:	f7ff fd59 	bl	8000f24 <ssd1306_SetCursor>
		if(indexMenu==2){
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d106      	bne.n	8001486 <ssd1306_PrintEnergyMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 8001478:	4a23      	ldr	r2, [pc, #140]	; (8001508 <ssd1306_PrintEnergyMenu+0x140>)
 800147a:	2300      	movs	r3, #0
 800147c:	ca06      	ldmia	r2, {r1, r2}
 800147e:	4825      	ldr	r0, [pc, #148]	; (8001514 <ssd1306_PrintEnergyMenu+0x14c>)
 8001480:	f7ff fd2a 	bl	8000ed8 <ssd1306_WriteString>
 8001484:	e005      	b.n	8001492 <ssd1306_PrintEnergyMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 8001486:	4a20      	ldr	r2, [pc, #128]	; (8001508 <ssd1306_PrintEnergyMenu+0x140>)
 8001488:	2301      	movs	r3, #1
 800148a:	ca06      	ldmia	r2, {r1, r2}
 800148c:	4821      	ldr	r0, [pc, #132]	; (8001514 <ssd1306_PrintEnergyMenu+0x14c>)
 800148e:	f7ff fd23 	bl	8000ed8 <ssd1306_WriteString>
		}
		y += 10;
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	330a      	adds	r3, #10
 8001496:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f640 3221 	movw	r2, #2849	; 0xb21
 800149e:	4293      	cmp	r3, r2
 80014a0:	dd0c      	ble.n	80014bc <ssd1306_PrintEnergyMenu+0xf4>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f640 3286 	movw	r2, #2950	; 0xb86
 80014a8:	4293      	cmp	r3, r2
 80014aa:	dc07      	bgt.n	80014bc <ssd1306_PrintEnergyMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <ssd1306_PrintEnergyMenu+0x150>)
 80014b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80014ba:	e01b      	b.n	80014f4 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f240 7239 	movw	r2, #1849	; 0x739
 80014c2:	4293      	cmp	r3, r2
 80014c4:	dd0b      	ble.n	80014de <ssd1306_PrintEnergyMenu+0x116>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f240 729e 	movw	r2, #1950	; 0x79e
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dc06      	bgt.n	80014de <ssd1306_PrintEnergyMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <ssd1306_PrintEnergyMenu+0x154>)
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d8:	c303      	stmia	r3!, {r0, r1}
 80014da:	801a      	strh	r2, [r3, #0]
 80014dc:	e00a      	b.n	80014f4 <ssd1306_PrintEnergyMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <ssd1306_PrintEnergyMenu+0x158>)
 80014e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e8:	6018      	str	r0, [r3, #0]
 80014ea:	3304      	adds	r3, #4
 80014ec:	8019      	strh	r1, [r3, #0]
 80014ee:	3302      	adds	r3, #2
 80014f0:	0c0a      	lsrs	r2, r1, #16
 80014f2:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 80014f4:	f7ff fbec 	bl	8000cd0 <ssd1306_UpdateScreen>
}
 80014f8:	bf00      	nop
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000010 	.word	0x20000010
 8001504:	08005e28 	.word	0x08005e28
 8001508:	20000008 	.word	0x20000008
 800150c:	08005e70 	.word	0x08005e70
 8001510:	08005e80 	.word	0x08005e80
 8001514:	08005e68 	.word	0x08005e68
 8001518:	08005e3c 	.word	0x08005e3c
 800151c:	08005e44 	.word	0x08005e44
 8001520:	08005e50 	.word	0x08005e50

08001524 <ssd1306_PrintSettingsMenu>:


void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fba0 	bl	8000c88 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	4619      	mov	r1, r3
 800154c:	2002      	movs	r0, #2
 800154e:	f7ff fce9 	bl	8000f24 <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 8001552:	4a42      	ldr	r2, [pc, #264]	; (800165c <ssd1306_PrintSettingsMenu+0x138>)
 8001554:	2301      	movs	r3, #1
 8001556:	ca06      	ldmia	r2, {r1, r2}
 8001558:	4841      	ldr	r0, [pc, #260]	; (8001660 <ssd1306_PrintSettingsMenu+0x13c>)
 800155a:	f7ff fcbd 	bl	8000ed8 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	3314      	adds	r3, #20
 8001562:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001564:	7ffb      	ldrb	r3, [r7, #31]
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f7ff fcdb 	bl	8000f24 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <ssd1306_PrintSettingsMenu+0x5e>
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, Black);
 8001574:	4a3b      	ldr	r2, [pc, #236]	; (8001664 <ssd1306_PrintSettingsMenu+0x140>)
 8001576:	2300      	movs	r3, #0
 8001578:	ca06      	ldmia	r2, {r1, r2}
 800157a:	483b      	ldr	r0, [pc, #236]	; (8001668 <ssd1306_PrintSettingsMenu+0x144>)
 800157c:	f7ff fcac 	bl	8000ed8 <ssd1306_WriteString>
 8001580:	e005      	b.n	800158e <ssd1306_PrintSettingsMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, White);
 8001582:	4a38      	ldr	r2, [pc, #224]	; (8001664 <ssd1306_PrintSettingsMenu+0x140>)
 8001584:	2301      	movs	r3, #1
 8001586:	ca06      	ldmia	r2, {r1, r2}
 8001588:	4837      	ldr	r0, [pc, #220]	; (8001668 <ssd1306_PrintSettingsMenu+0x144>)
 800158a:	f7ff fca5 	bl	8000ed8 <ssd1306_WriteString>
	    }
		y += 10;
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	330a      	adds	r3, #10
 8001592:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	4619      	mov	r1, r3
 8001598:	2002      	movs	r0, #2
 800159a:	f7ff fcc3 	bl	8000f24 <ssd1306_SetCursor>
		if(indexMenu==1){
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <ssd1306_PrintSettingsMenu+0x8e>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 80015a4:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <ssd1306_PrintSettingsMenu+0x140>)
 80015a6:	2300      	movs	r3, #0
 80015a8:	ca06      	ldmia	r2, {r1, r2}
 80015aa:	4830      	ldr	r0, [pc, #192]	; (800166c <ssd1306_PrintSettingsMenu+0x148>)
 80015ac:	f7ff fc94 	bl	8000ed8 <ssd1306_WriteString>
 80015b0:	e005      	b.n	80015be <ssd1306_PrintSettingsMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 80015b2:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <ssd1306_PrintSettingsMenu+0x140>)
 80015b4:	2301      	movs	r3, #1
 80015b6:	ca06      	ldmia	r2, {r1, r2}
 80015b8:	482c      	ldr	r0, [pc, #176]	; (800166c <ssd1306_PrintSettingsMenu+0x148>)
 80015ba:	f7ff fc8d 	bl	8000ed8 <ssd1306_WriteString>
		}
		y += 10;
 80015be:	7ffb      	ldrb	r3, [r7, #31]
 80015c0:	330a      	adds	r3, #10
 80015c2:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	4619      	mov	r1, r3
 80015c8:	2002      	movs	r0, #2
 80015ca:	f7ff fcab 	bl	8000f24 <ssd1306_SetCursor>
		if(indexMenu==2){
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d106      	bne.n	80015e2 <ssd1306_PrintSettingsMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 80015d4:	4a23      	ldr	r2, [pc, #140]	; (8001664 <ssd1306_PrintSettingsMenu+0x140>)
 80015d6:	2300      	movs	r3, #0
 80015d8:	ca06      	ldmia	r2, {r1, r2}
 80015da:	4825      	ldr	r0, [pc, #148]	; (8001670 <ssd1306_PrintSettingsMenu+0x14c>)
 80015dc:	f7ff fc7c 	bl	8000ed8 <ssd1306_WriteString>
 80015e0:	e005      	b.n	80015ee <ssd1306_PrintSettingsMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 80015e2:	4a20      	ldr	r2, [pc, #128]	; (8001664 <ssd1306_PrintSettingsMenu+0x140>)
 80015e4:	2301      	movs	r3, #1
 80015e6:	ca06      	ldmia	r2, {r1, r2}
 80015e8:	4821      	ldr	r0, [pc, #132]	; (8001670 <ssd1306_PrintSettingsMenu+0x14c>)
 80015ea:	f7ff fc75 	bl	8000ed8 <ssd1306_WriteString>
		}
		y += 10;
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
 80015f0:	330a      	adds	r3, #10
 80015f2:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f640 3221 	movw	r2, #2849	; 0xb21
 80015fa:	4293      	cmp	r3, r2
 80015fc:	dd0c      	ble.n	8001618 <ssd1306_PrintSettingsMenu+0xf4>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f640 3286 	movw	r2, #2950	; 0xb86
 8001604:	4293      	cmp	r3, r2
 8001606:	dc07      	bgt.n	8001618 <ssd1306_PrintSettingsMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <ssd1306_PrintSettingsMenu+0x150>)
 800160e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001612:	e883 0003 	stmia.w	r3, {r0, r1}
 8001616:	e01b      	b.n	8001650 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f240 7239 	movw	r2, #1849	; 0x739
 800161e:	4293      	cmp	r3, r2
 8001620:	dd0b      	ble.n	800163a <ssd1306_PrintSettingsMenu+0x116>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f240 729e 	movw	r2, #1950	; 0x79e
 8001628:	4293      	cmp	r3, r2
 800162a:	dc06      	bgt.n	800163a <ssd1306_PrintSettingsMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <ssd1306_PrintSettingsMenu+0x154>)
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	ca07      	ldmia	r2, {r0, r1, r2}
 8001634:	c303      	stmia	r3!, {r0, r1}
 8001636:	801a      	strh	r2, [r3, #0]
 8001638:	e00a      	b.n	8001650 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <ssd1306_PrintSettingsMenu+0x158>)
 8001640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001644:	6018      	str	r0, [r3, #0]
 8001646:	3304      	adds	r3, #4
 8001648:	8019      	strh	r1, [r3, #0]
 800164a:	3302      	adds	r3, #2
 800164c:	0c0a      	lsrs	r2, r1, #16
 800164e:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001650:	f7ff fb3e 	bl	8000cd0 <ssd1306_UpdateScreen>
}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000010 	.word	0x20000010
 8001660:	08005e30 	.word	0x08005e30
 8001664:	20000008 	.word	0x20000008
 8001668:	08005e8c 	.word	0x08005e8c
 800166c:	08005e9c 	.word	0x08005e9c
 8001670:	08005e68 	.word	0x08005e68
 8001674:	08005e3c 	.word	0x08005e3c
 8001678:	08005e44 	.word	0x08005e44
 800167c:	08005e50 	.word	0x08005e50

08001680 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	if (screen==1){
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d105      	bne.n	800169e <ssd1306_DisplayAnalogValue+0x1e>
			   ssd1306_PrintDashboardMenu(value, indexMenu, screen);
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fde8 	bl	800126c <ssd1306_PrintDashboardMenu>
 800169c:	e016      	b.n	80016cc <ssd1306_DisplayAnalogValue+0x4c>
		}
	else if (screen==2){
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d105      	bne.n	80016b0 <ssd1306_DisplayAnalogValue+0x30>
		   ssd1306_PrintEnergyMenu(value, indexMenu, screen);
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f7ff fe8d 	bl	80013c8 <ssd1306_PrintEnergyMenu>
 80016ae:	e00d      	b.n	80016cc <ssd1306_DisplayAnalogValue+0x4c>
	}
	else if (screen==3){
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d105      	bne.n	80016c2 <ssd1306_DisplayAnalogValue+0x42>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7ff ff32 	bl	8001524 <ssd1306_PrintSettingsMenu>
 80016c0:	e004      	b.n	80016cc <ssd1306_DisplayAnalogValue+0x4c>
	}else{
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff fd22 	bl	8001110 <ssd1306_PrintPrincipalMenu>
	}
    HAL_Delay(50);
 80016cc:	2032      	movs	r0, #50	; 0x32
 80016ce:	f000 fb4f 	bl	8001d70 <HAL_Delay>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fad0 	bl	8000c88 <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 80016e8:	2301      	movs	r3, #1
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2348      	movs	r3, #72	; 0x48
 80016f2:	4a07      	ldr	r2, [pc, #28]	; (8001710 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 80016f4:	2100      	movs	r1, #0
 80016f6:	2020      	movs	r0, #32
 80016f8:	f7ff fc2c 	bl	8000f54 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 80016fc:	f7ff fae8 	bl	8000cd0 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8001700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001704:	f000 fb34 	bl	8001d70 <HAL_Delay>

}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	080079a4 	.word	0x080079a4

08001714 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001718:	f7ff fa4c 	bl	8000bb4 <ssd1306_Init>
    ssd1306_TestFonts1();
 800171c:	f7ff fca6 	bl	800106c <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8001720:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001724:	f000 fb24 	bl	8001d70 <HAL_Delay>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001730:	f7ff fa40 	bl	8000bb4 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8001734:	f7ff ffd2 	bl	80016dc <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 8001738:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800173c:	f000 fb18 	bl	8001d70 <HAL_Delay>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_MspInit+0x44>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_MspInit+0x44>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_MspInit+0x44>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_MspInit+0x44>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_MspInit+0x44>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_MspInit+0x44>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a15      	ldr	r2, [pc, #84]	; (8001800 <HAL_ADC_MspInit+0x74>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d123      	bne.n	80017f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_ADC_MspInit+0x78>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <HAL_ADC_MspInit+0x78>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_ADC_MspInit+0x78>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_ADC_MspInit+0x78>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_ADC_MspInit+0x78>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_ADC_MspInit+0x78>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e2:	2303      	movs	r3, #3
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_ADC_MspInit+0x7c>)
 80017f2:	f001 fb1b 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	; 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40012000 	.word	0x40012000
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000

0800180c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08e      	sub	sp, #56	; 0x38
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_ETH_MspInit+0x158>)
 800182a:	4293      	cmp	r3, r2
 800182c:	f040 8096 	bne.w	800195c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001830:	4b4d      	ldr	r3, [pc, #308]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 8001836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a46      	ldr	r2, [pc, #280]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 800184e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b44      	ldr	r3, [pc, #272]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	4a40      	ldr	r2, [pc, #256]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 8001866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800186a:	6313      	str	r3, [r2, #48]	; 0x30
 800186c:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6313      	str	r3, [r2, #48]	; 0x30
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a34      	ldr	r2, [pc, #208]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a2e      	ldr	r2, [pc, #184]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 80018c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ca:	6313      	str	r3, [r2, #48]	; 0x30
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_ETH_MspInit+0x15c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018d8:	2332      	movs	r3, #50	; 0x32
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018e8:	230b      	movs	r3, #11
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	481e      	ldr	r0, [pc, #120]	; (800196c <HAL_ETH_MspInit+0x160>)
 80018f4:	f001 fa9a 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018f8:	2386      	movs	r3, #134	; 0x86
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001908:	230b      	movs	r3, #11
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	4817      	ldr	r0, [pc, #92]	; (8001970 <HAL_ETH_MspInit+0x164>)
 8001914:	f001 fa8a 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800192a:	230b      	movs	r3, #11
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	4619      	mov	r1, r3
 8001934:	480f      	ldr	r0, [pc, #60]	; (8001974 <HAL_ETH_MspInit+0x168>)
 8001936:	f001 fa79 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800193a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800194c:	230b      	movs	r3, #11
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	4808      	ldr	r0, [pc, #32]	; (8001978 <HAL_ETH_MspInit+0x16c>)
 8001958:	f001 fa68 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3738      	adds	r7, #56	; 0x38
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40028000 	.word	0x40028000
 8001968:	40023800 	.word	0x40023800
 800196c:	40020800 	.word	0x40020800
 8001970:	40020000 	.word	0x40020000
 8001974:	40020400 	.word	0x40020400
 8001978:	40021800 	.word	0x40021800

0800197c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0aa      	sub	sp, #168	; 0xa8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2284      	movs	r2, #132	; 0x84
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fa09 	bl	8005db4 <memset>
  if(hi2c->Instance==I2C2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <HAL_I2C_MspInit+0xb0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d13b      	bne.n	8001a24 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fea0 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019c6:	f7ff f8b7 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_I2C_MspInit+0xb4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_I2C_MspInit+0xb4>)
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_I2C_MspInit+0xb4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e8:	2312      	movs	r3, #18
 80019ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019fa:	2304      	movs	r3, #4
 80019fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a04:	4619      	mov	r1, r3
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <HAL_I2C_MspInit+0xb8>)
 8001a08:	f001 fa10 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_I2C_MspInit+0xb4>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_I2C_MspInit+0xb4>)
 8001a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a16:	6413      	str	r3, [r2, #64]	; 0x40
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_I2C_MspInit+0xb4>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	37a8      	adds	r7, #168	; 0xa8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40005800 	.word	0x40005800
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40021400 	.word	0x40021400

08001a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0aa      	sub	sp, #168	; 0xa8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	2284      	movs	r2, #132	; 0x84
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f004 f9ab 	bl	8005db4 <memset>
  if(huart->Instance==USART3)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a22      	ldr	r2, [pc, #136]	; (8001aec <HAL_UART_MspInit+0xb4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d13c      	bne.n	8001ae2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fe42 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a82:	f7ff f859 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_UART_MspInit+0xb8>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <HAL_UART_MspInit+0xb8>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_UART_MspInit+0xb8>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_UART_MspInit+0xb8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <HAL_UART_MspInit+0xb8>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_UART_MspInit+0xb8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_UART_MspInit+0xbc>)
 8001ade:	f001 f9a5 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	37a8      	adds	r7, #168	; 0xa8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40004800 	.word	0x40004800
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b0ac      	sub	sp, #176	; 0xb0
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	2284      	movs	r2, #132	; 0x84
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 f94b 	bl	8005db4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b26:	d159      	bne.n	8001bdc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fde1 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b44:	f7fe fff8 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a25      	ldr	r2, [pc, #148]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6313      	str	r3, [r2, #48]	; 0x30
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b60:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4818      	ldr	r0, [pc, #96]	; (8001be8 <HAL_PCD_MspInit+0xf0>)
 8001b88:	f001 f950 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4810      	ldr	r0, [pc, #64]	; (8001be8 <HAL_PCD_MspInit+0xf0>)
 8001ba8:	f001 f940 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb6:	6353      	str	r3, [r2, #52]	; 0x34
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bce:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <HAL_PCD_MspInit+0xec>)
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	37b0      	adds	r7, #176	; 0xb0
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 f87a 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c6a:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c8e:	f7ff ffd7 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f004 f86b 	bl	8005d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7fe fc39 	bl	800050c <main>
  bx  lr    
 8001c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001ca8:	08007c0c 	.word	0x08007c0c
  ldr r2, =_sbss
 8001cac:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001cb0:	20000cb4 	.word	0x20000cb4

08001cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <ADC_IRQHandler>

08001cb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cba:	2003      	movs	r0, #3
 8001cbc:	f000 fd5c 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f000 f805 	bl	8001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc6:	f7ff fd3d 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x54>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x58>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fd69 	bl	80027c6 <HAL_SYSTICK_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00e      	b.n	8001d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d80a      	bhi.n	8001d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f000 fd3f 	bl	800278e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <HAL_InitTick+0x5c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000018 	.word	0x20000018
 8001d28:	20000020 	.word	0x20000020
 8001d2c:	2000001c 	.word	0x2000001c

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000020 	.word	0x20000020
 8001d54:	20000cb0 	.word	0x20000cb0

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000cb0 	.word	0x20000cb0

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ffee 	bl	8001d58 <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000020 	.word	0x20000020

08001db8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e031      	b.n	8001e32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fcd8 	bl	800178c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d116      	bne.n	8001e24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_ADC_Init+0x84>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	f043 0202 	orr.w	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fb0a 	bl	8002420 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f023 0303 	bic.w	r3, r3, #3
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
 8001e22:	e001      	b.n	8001e28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	ffffeefd 	.word	0xffffeefd

08001e40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Start+0x1a>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0ad      	b.n	8001fb6 <HAL_ADC_Start+0x176>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d018      	beq.n	8001ea2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_ADC_Start+0x184>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a50      	ldr	r2, [pc, #320]	; (8001fc8 <HAL_ADC_Start+0x188>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0c9a      	lsrs	r2, r3, #18
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e94:	e002      	b.n	8001e9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d175      	bne.n	8001f9c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <HAL_ADC_Start+0x18c>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eea:	d106      	bne.n	8001efa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f023 0206 	bic.w	r2, r3, #6
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_ADC_Start+0x190>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d143      	bne.n	8001fb4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	e03a      	b.n	8001fb4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <HAL_ADC_Start+0x194>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d10e      	bne.n	8001f66 <HAL_ADC_Start+0x126>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f64:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_ADC_Start+0x190>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d120      	bne.n	8001fb4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <HAL_ADC_Start+0x198>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_ADC_Start+0x174>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d114      	bne.n	8001fb4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f043 0210 	orr.w	r2, r3, #16
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000018 	.word	0x20000018
 8001fc8:	431bde83 	.word	0x431bde83
 8001fcc:	fffff8fe 	.word	0xfffff8fe
 8001fd0:	40012300 	.word	0x40012300
 8001fd4:	40012000 	.word	0x40012000
 8001fd8:	40012200 	.word	0x40012200

08001fdc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_Stop+0x16>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e01f      	b.n	8002032 <HAL_ADC_Stop+0x56>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_ADC_Stop+0x64>)
 800201e:	4013      	ands	r3, r2
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	ffffeefe 	.word	0xffffeefe

08002044 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002060:	d113      	bne.n	800208a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800206c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002070:	d10b      	bne.n	800208a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e063      	b.n	8002152 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800208a:	f7ff fe65 	bl	8001d58 <HAL_GetTick>
 800208e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002090:	e021      	b.n	80020d6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d01d      	beq.n	80020d6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_ADC_PollForConversion+0x6c>
 80020a0:	f7ff fe5a 	bl	8001d58 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d212      	bcs.n	80020d6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d00b      	beq.n	80020d6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f043 0204 	orr.w	r2, r3, #4
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e03d      	b.n	8002152 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d1d6      	bne.n	8002092 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0212 	mvn.w	r2, #18
 80020ec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d123      	bne.n	8002150 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800210c:	2b00      	cmp	r3, #0
 800210e:	d11f      	bne.n	8002150 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002128:	2b00      	cmp	r3, #0
 800212a:	d111      	bne.n	8002150 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1c>
 800218c:	2302      	movs	r3, #2
 800218e:	e136      	b.n	80023fe <HAL_ADC_ConfigChannel+0x28a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b09      	cmp	r3, #9
 800219e:	d93a      	bls.n	8002216 <HAL_ADC_ConfigChannel+0xa2>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021a8:	d035      	beq.n	8002216 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68d9      	ldr	r1, [r3, #12]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	3b1e      	subs	r3, #30
 80021c0:	2207      	movs	r2, #7
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	400a      	ands	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a8d      	ldr	r2, [pc, #564]	; (800240c <HAL_ADC_ConfigChannel+0x298>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10a      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68d9      	ldr	r1, [r3, #12]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	061a      	lsls	r2, r3, #24
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ee:	e035      	b.n	800225c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68d9      	ldr	r1, [r3, #12]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	4603      	mov	r3, r0
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4403      	add	r3, r0
 8002208:	3b1e      	subs	r3, #30
 800220a:	409a      	lsls	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002214:	e022      	b.n	800225c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6919      	ldr	r1, [r3, #16]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	2207      	movs	r2, #7
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43da      	mvns	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	400a      	ands	r2, r1
 8002238:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6919      	ldr	r1, [r3, #16]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	4603      	mov	r3, r0
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4403      	add	r3, r0
 8002252:	409a      	lsls	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d824      	bhi.n	80022ae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b05      	subs	r3, #5
 8002276:	221f      	movs	r2, #31
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43da      	mvns	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	400a      	ands	r2, r1
 8002284:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b05      	subs	r3, #5
 80022a0:	fa00 f203 	lsl.w	r2, r0, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34
 80022ac:	e04c      	b.n	8002348 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d824      	bhi.n	8002300 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b23      	subs	r3, #35	; 0x23
 80022c8:	221f      	movs	r2, #31
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b23      	subs	r3, #35	; 0x23
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
 80022fe:	e023      	b.n	8002348 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	3b41      	subs	r3, #65	; 0x41
 8002312:	221f      	movs	r2, #31
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43da      	mvns	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	400a      	ands	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b41      	subs	r3, #65	; 0x41
 800233c:	fa00 f203 	lsl.w	r2, r0, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a30      	ldr	r2, [pc, #192]	; (8002410 <HAL_ADC_ConfigChannel+0x29c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10a      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1f4>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800235a:	d105      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 8002362:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002366:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_ADC_ConfigChannel+0x29c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10f      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x21e>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b12      	cmp	r3, #18
 8002378:	d10b      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4a25      	ldr	r2, [pc, #148]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 8002380:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002384:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 800238c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002390:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <HAL_ADC_ConfigChannel+0x29c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d12b      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x280>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_ADC_ConfigChannel+0x298>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x23a>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b11      	cmp	r3, #17
 80023ac:	d122      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023b8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <HAL_ADC_ConfigChannel+0x2a0>)
 80023c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_ADC_ConfigChannel+0x298>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d111      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_ADC_ConfigChannel+0x2a4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_ADC_ConfigChannel+0x2a8>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0c9a      	lsrs	r2, r3, #18
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023e6:	e002      	b.n	80023ee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f9      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	10000012 	.word	0x10000012
 8002410:	40012000 	.word	0x40012000
 8002414:	40012300 	.word	0x40012300
 8002418:	20000018 	.word	0x20000018
 800241c:	431bde83 	.word	0x431bde83

08002420 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002428:	4b78      	ldr	r3, [pc, #480]	; (800260c <ADC_Init+0x1ec>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a77      	ldr	r2, [pc, #476]	; (800260c <ADC_Init+0x1ec>)
 800242e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002432:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002434:	4b75      	ldr	r3, [pc, #468]	; (800260c <ADC_Init+0x1ec>)
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4973      	ldr	r1, [pc, #460]	; (800260c <ADC_Init+0x1ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	021a      	lsls	r2, r3, #8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	4a58      	ldr	r2, [pc, #352]	; (8002610 <ADC_Init+0x1f0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d022      	beq.n	80024fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e00f      	b.n	800251a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002518:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0202 	bic.w	r2, r2, #2
 8002528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	005a      	lsls	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002556:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002566:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	3b01      	subs	r3, #1
 8002574:	035a      	lsls	r2, r3, #13
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	e007      	b.n	8002590 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	051a      	lsls	r2, r3, #20
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d2:	025a      	lsls	r2, r3, #9
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	029a      	lsls	r2, r3, #10
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40012300 	.word	0x40012300
 8002610:	0f000001 	.word	0x0f000001

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <__NVIC_SetPriorityGrouping+0x40>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	4313      	orrs	r3, r2
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	; (8002654 <__NVIC_SetPriorityGrouping+0x40>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	05fa0000 	.word	0x05fa0000

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f7ff ff8e 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff47 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a0:	f7ff ff5c 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff ff8e 	bl	80026cc <NVIC_EncodePriority>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffb0 	bl	8002734 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06a      	b.n	80028c8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2223      	movs	r2, #35	; 0x23
 8002800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff f801 	bl	800180c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_ETH_Init+0xf0>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <HAL_ETH_Init+0xf0>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <HAL_ETH_Init+0xf0>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_ETH_Init+0xf4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a2b      	ldr	r2, [pc, #172]	; (80028d4 <HAL_ETH_Init+0xf4>)
 8002828:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800282c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800282e:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <HAL_ETH_Init+0xf4>)
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4927      	ldr	r1, [pc, #156]	; (80028d4 <HAL_ETH_Init+0xf4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_ETH_Init+0xf4>)
 800283e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002856:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002858:	f7ff fa7e 	bl	8001d58 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800285e:	e011      	b.n	8002884 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002860:	f7ff fa7a 	bl	8001d58 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800286e:	d909      	bls.n	8002884 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2204      	movs	r2, #4
 8002874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	22e0      	movs	r2, #224	; 0xe0
 800287c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e021      	b.n	80028c8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e4      	bne.n	8002860 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f958 	bl	8002b4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f9ff 	bl	8002ca0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa55 	bl	8002d52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	461a      	mov	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f9bd 	bl	8002c30 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2210      	movs	r2, #16
 80028c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40013800 	.word	0x40013800

080028d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4b51      	ldr	r3, [pc, #324]	; (8002a34 <ETH_SetMACConfig+0x15c>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	7c1b      	ldrb	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <ETH_SetMACConfig+0x28>
 80028fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028fe:	e000      	b.n	8002902 <ETH_SetMACConfig+0x2a>
 8002900:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	7c5b      	ldrb	r3, [r3, #17]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <ETH_SetMACConfig+0x38>
 800290a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800290e:	e000      	b.n	8002912 <ETH_SetMACConfig+0x3a>
 8002910:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002912:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002918:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	7fdb      	ldrb	r3, [r3, #31]
 800291e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002920:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002926:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	7f92      	ldrb	r2, [r2, #30]
 800292c:	2a00      	cmp	r2, #0
 800292e:	d102      	bne.n	8002936 <ETH_SetMACConfig+0x5e>
 8002930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002934:	e000      	b.n	8002938 <ETH_SetMACConfig+0x60>
 8002936:	2200      	movs	r2, #0
                        macconf->Speed |
 8002938:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	7f1b      	ldrb	r3, [r3, #28]
 800293e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002940:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002946:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	791b      	ldrb	r3, [r3, #4]
 800294c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800294e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002956:	2a00      	cmp	r2, #0
 8002958:	d102      	bne.n	8002960 <ETH_SetMACConfig+0x88>
 800295a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295e:	e000      	b.n	8002962 <ETH_SetMACConfig+0x8a>
 8002960:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002962:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	7bdb      	ldrb	r3, [r3, #15]
 8002968:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800296a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002970:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002978:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800297a:	4313      	orrs	r3, r2
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002992:	2001      	movs	r0, #1
 8002994:	f7ff f9ec 	bl	8001d70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029ae:	4013      	ands	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80029be:	2a00      	cmp	r2, #0
 80029c0:	d101      	bne.n	80029c6 <ETH_SetMACConfig+0xee>
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	e000      	b.n	80029c8 <ETH_SetMACConfig+0xf0>
 80029c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80029d6:	2a01      	cmp	r2, #1
 80029d8:	d101      	bne.n	80029de <ETH_SetMACConfig+0x106>
 80029da:	2208      	movs	r2, #8
 80029dc:	e000      	b.n	80029e0 <ETH_SetMACConfig+0x108>
 80029de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80029e8:	2a01      	cmp	r2, #1
 80029ea:	d101      	bne.n	80029f0 <ETH_SetMACConfig+0x118>
 80029ec:	2204      	movs	r2, #4
 80029ee:	e000      	b.n	80029f2 <ETH_SetMACConfig+0x11a>
 80029f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80029fa:	2a01      	cmp	r2, #1
 80029fc:	d101      	bne.n	8002a02 <ETH_SetMACConfig+0x12a>
 80029fe:	2202      	movs	r2, #2
 8002a00:	e000      	b.n	8002a04 <ETH_SetMACConfig+0x12c>
 8002a02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a04:	4313      	orrs	r3, r2
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7ff f9a7 	bl	8001d70 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	619a      	str	r2, [r3, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	ff20810f 	.word	0xff20810f

08002a38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <ETH_SetDMAConfig+0x110>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	7b1b      	ldrb	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <ETH_SetDMAConfig+0x2c>
 8002a5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a62:	e000      	b.n	8002a66 <ETH_SetDMAConfig+0x2e>
 8002a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	7b5b      	ldrb	r3, [r3, #13]
 8002a6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	7f52      	ldrb	r2, [r2, #29]
 8002a72:	2a00      	cmp	r2, #0
 8002a74:	d102      	bne.n	8002a7c <ETH_SetDMAConfig+0x44>
 8002a76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a7a:	e000      	b.n	8002a7e <ETH_SetDMAConfig+0x46>
 8002a7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	7b9b      	ldrb	r3, [r3, #14]
 8002a84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	7f1b      	ldrb	r3, [r3, #28]
 8002a92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	7f9b      	ldrb	r3, [r3, #30]
 8002a9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aa2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aaa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002aac:	4313      	orrs	r3, r2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abc:	461a      	mov	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7ff f94e 	bl	8001d70 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002adc:	461a      	mov	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	791b      	ldrb	r3, [r3, #4]
 8002ae6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002aec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002af2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002af8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f7ff f91f 	bl	8001d70 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	f8de3f23 	.word	0xf8de3f23

08002b4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0a6      	sub	sp, #152	; 0x98
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b60:	2300      	movs	r3, #0
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fe86 	bl	80028d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c00:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c1c:	f107 0308 	add.w	r3, r7, #8
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ff08 	bl	8002a38 <ETH_SetDMAConfig>
}
 8002c28:	bf00      	nop
 8002c2a:	3798      	adds	r7, #152	; 0x98
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3305      	adds	r3, #5
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	3204      	adds	r2, #4
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <ETH_MACAddressConfig+0x68>)
 8002c52:	4413      	add	r3, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3303      	adds	r3, #3
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	061a      	lsls	r2, r3, #24
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3302      	adds	r3, #2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	4313      	orrs	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <ETH_MACAddressConfig+0x6c>)
 8002c82:	4413      	add	r3, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	6013      	str	r3, [r2, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40028040 	.word	0x40028040
 8002c9c:	40028044 	.word	0x40028044

08002ca0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e03e      	b.n	8002d2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	3206      	adds	r2, #6
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d80c      	bhi.n	8002d10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68d9      	ldr	r1, [r3, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	e004      	b.n	8002d1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	461a      	mov	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d9bd      	bls.n	8002cae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d44:	611a      	str	r2, [r3, #16]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e046      	b.n	8002dee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6919      	ldr	r1, [r3, #16]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002da4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	3212      	adds	r2, #18
 8002dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d80c      	bhi.n	8002dde <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6919      	ldr	r1, [r3, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e004      	b.n	8002de8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d9b5      	bls.n	8002d60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1e:	60da      	str	r2, [r3, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e175      	b.n	8003138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f040 8164 	bne.w	8003132 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d005      	beq.n	8002e82 <HAL_GPIO_Init+0x56>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d130      	bne.n	8002ee4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 0201 	and.w	r2, r3, #1
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d017      	beq.n	8002f20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d123      	bne.n	8002f74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	69b9      	ldr	r1, [r7, #24]
 8002f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	2203      	movs	r2, #3
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0203 	and.w	r2, r3, #3
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80be 	beq.w	8003132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb6:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a65      	ldr	r2, [pc, #404]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b63      	ldr	r3, [pc, #396]	; (8003150 <HAL_GPIO_Init+0x324>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fce:	4a61      	ldr	r2, [pc, #388]	; (8003154 <HAL_GPIO_Init+0x328>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	; (8003158 <HAL_GPIO_Init+0x32c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d037      	beq.n	800306a <HAL_GPIO_Init+0x23e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a57      	ldr	r2, [pc, #348]	; (800315c <HAL_GPIO_Init+0x330>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d031      	beq.n	8003066 <HAL_GPIO_Init+0x23a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a56      	ldr	r2, [pc, #344]	; (8003160 <HAL_GPIO_Init+0x334>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d02b      	beq.n	8003062 <HAL_GPIO_Init+0x236>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a55      	ldr	r2, [pc, #340]	; (8003164 <HAL_GPIO_Init+0x338>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d025      	beq.n	800305e <HAL_GPIO_Init+0x232>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a54      	ldr	r2, [pc, #336]	; (8003168 <HAL_GPIO_Init+0x33c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01f      	beq.n	800305a <HAL_GPIO_Init+0x22e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a53      	ldr	r2, [pc, #332]	; (800316c <HAL_GPIO_Init+0x340>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d019      	beq.n	8003056 <HAL_GPIO_Init+0x22a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_GPIO_Init+0x344>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_GPIO_Init+0x226>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a51      	ldr	r2, [pc, #324]	; (8003174 <HAL_GPIO_Init+0x348>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00d      	beq.n	800304e <HAL_GPIO_Init+0x222>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a50      	ldr	r2, [pc, #320]	; (8003178 <HAL_GPIO_Init+0x34c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <HAL_GPIO_Init+0x21e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4f      	ldr	r2, [pc, #316]	; (800317c <HAL_GPIO_Init+0x350>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_GPIO_Init+0x21a>
 8003042:	2309      	movs	r3, #9
 8003044:	e012      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003046:	230a      	movs	r3, #10
 8003048:	e010      	b.n	800306c <HAL_GPIO_Init+0x240>
 800304a:	2308      	movs	r3, #8
 800304c:	e00e      	b.n	800306c <HAL_GPIO_Init+0x240>
 800304e:	2307      	movs	r3, #7
 8003050:	e00c      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003052:	2306      	movs	r3, #6
 8003054:	e00a      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003056:	2305      	movs	r3, #5
 8003058:	e008      	b.n	800306c <HAL_GPIO_Init+0x240>
 800305a:	2304      	movs	r3, #4
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x240>
 800305e:	2303      	movs	r3, #3
 8003060:	e004      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003062:	2302      	movs	r3, #2
 8003064:	e002      	b.n	800306c <HAL_GPIO_Init+0x240>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_GPIO_Init+0x240>
 800306a:	2300      	movs	r3, #0
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f002 0203 	and.w	r2, r2, #3
 8003072:	0092      	lsls	r2, r2, #2
 8003074:	4093      	lsls	r3, r2
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800307c:	4935      	ldr	r1, [pc, #212]	; (8003154 <HAL_GPIO_Init+0x328>)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_GPIO_Init+0x354>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ae:	4a34      	ldr	r2, [pc, #208]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_GPIO_Init+0x354>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_GPIO_Init+0x354>)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_GPIO_Init+0x354>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <HAL_GPIO_Init+0x354>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3301      	adds	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b0f      	cmp	r3, #15
 800313c:	f67f ae86 	bls.w	8002e4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	40013800 	.word	0x40013800
 8003158:	40020000 	.word	0x40020000
 800315c:	40020400 	.word	0x40020400
 8003160:	40020800 	.word	0x40020800
 8003164:	40020c00 	.word	0x40020c00
 8003168:	40021000 	.word	0x40021000
 800316c:	40021400 	.word	0x40021400
 8003170:	40021800 	.word	0x40021800
 8003174:	40021c00 	.word	0x40021c00
 8003178:	40022000 	.word	0x40022000
 800317c:	40022400 	.word	0x40022400
 8003180:	40013c00 	.word	0x40013c00

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031a0:	e003      	b.n	80031aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031a2:	887b      	ldrh	r3, [r7, #2]
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	619a      	str	r2, [r3, #24]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07f      	b.n	80032ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe fbcc 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003208:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003218:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e006      	b.n	8003240 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800323e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d104      	bne.n	8003252 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_I2C_Init+0x11c>)
 800325e:	430b      	orrs	r3, r1
 8003260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	02008000 	.word	0x02008000

080032d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	f040 80f9 	bne.w	80034f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_I2C_Mem_Write+0x34>
 8003306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0ed      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_I2C_Mem_Write+0x4e>
 8003322:	2302      	movs	r3, #2
 8003324:	e0e6      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800332e:	f7fe fd13 	bl	8001d58 <HAL_GetTick>
 8003332:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2319      	movs	r3, #25
 800333a:	2201      	movs	r2, #1
 800333c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f955 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0d1      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2221      	movs	r2, #33	; 0x21
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2240      	movs	r2, #64	; 0x40
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003378:	88f8      	ldrh	r0, [r7, #6]
 800337a:	893a      	ldrh	r2, [r7, #8]
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4603      	mov	r3, r0
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f8b9 	bl	8003500 <I2C_RequestMemoryWrite>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0a9      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2bff      	cmp	r3, #255	; 0xff
 80033a8:	d90e      	bls.n	80033c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	22ff      	movs	r2, #255	; 0xff
 80033ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	8979      	ldrh	r1, [r7, #10]
 80033b8:	2300      	movs	r3, #0
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fab1 	bl	8003928 <I2C_TransferConfig>
 80033c6:	e00f      	b.n	80033e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	8979      	ldrh	r1, [r7, #10]
 80033da:	2300      	movs	r3, #0
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 faa0 	bl	8003928 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f93f 	bl	8003670 <I2C_WaitOnTXISFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e07b      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d034      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x1c8>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	d130      	bne.n	80034a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	2200      	movs	r2, #0
 8003446:	2180      	movs	r1, #128	; 0x80
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f8d1 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e04d      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2bff      	cmp	r3, #255	; 0xff
 8003460:	d90e      	bls.n	8003480 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	22ff      	movs	r2, #255	; 0xff
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	b2da      	uxtb	r2, r3
 800346e:	8979      	ldrh	r1, [r7, #10]
 8003470:	2300      	movs	r3, #0
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fa55 	bl	8003928 <I2C_TransferConfig>
 800347e:	e00f      	b.n	80034a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	b2da      	uxtb	r2, r3
 8003490:	8979      	ldrh	r1, [r7, #10]
 8003492:	2300      	movs	r3, #0
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa44 	bl	8003928 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d19e      	bne.n	80033e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f91e 	bl	80036f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e01a      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2220      	movs	r2, #32
 80034c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <HAL_I2C_Mem_Write+0x224>)
 80034d2:	400b      	ands	r3, r1
 80034d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	fe00e800 	.word	0xfe00e800

08003500 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	8979      	ldrh	r1, [r7, #10]
 8003520:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <I2C_RequestMemoryWrite+0xa4>)
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f9fd 	bl	8003928 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	69b9      	ldr	r1, [r7, #24]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f89c 	bl	8003670 <I2C_WaitOnTXISFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02c      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003548:	893b      	ldrh	r3, [r7, #8]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	629a      	str	r2, [r3, #40]	; 0x28
 8003552:	e015      	b.n	8003580 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	b29b      	uxth	r3, r3
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	69b9      	ldr	r1, [r7, #24]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f882 	bl	8003670 <I2C_WaitOnTXISFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e012      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2200      	movs	r2, #0
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f830 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	80002000 	.word	0x80002000

080035a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d103      	bne.n	80035c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d007      	beq.n	80035e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	619a      	str	r2, [r3, #24]
  }
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003600:	e022      	b.n	8003648 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d01e      	beq.n	8003648 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fe fba5 	bl	8001d58 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x30>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e00f      	b.n	8003668 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	429a      	cmp	r2, r3
 8003664:	d0cd      	beq.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800367c:	e02c      	b.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f870 	bl	8003768 <I2C_IsErrorOccurred>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e02a      	b.n	80036e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d01e      	beq.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	f7fe fb5d 	bl	8001d58 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d113      	bne.n	80036d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e007      	b.n	80036e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d1cb      	bne.n	800367e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036fc:	e028      	b.n	8003750 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f830 	bl	8003768 <I2C_IsErrorOccurred>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e026      	b.n	8003760 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fe fb21 	bl	8001d58 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d113      	bne.n	8003750 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e007      	b.n	8003760 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b20      	cmp	r3, #32
 800375c:	d1cf      	bne.n	80036fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d068      	beq.n	8003866 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2210      	movs	r2, #16
 800379a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800379c:	e049      	b.n	8003832 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d045      	beq.n	8003832 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fe fad7 	bl	8001d58 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_IsErrorOccurred+0x54>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d13a      	bne.n	8003832 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037de:	d121      	bne.n	8003824 <I2C_IsErrorOccurred+0xbc>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e6:	d01d      	beq.n	8003824 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d01a      	beq.n	8003824 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037fe:	f7fe faab 	bl	8001d58 <HAL_GetTick>
 8003802:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003804:	e00e      	b.n	8003824 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003806:	f7fe faa7 	bl	8001d58 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b19      	cmp	r3, #25
 8003812:	d907      	bls.n	8003824 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f043 0320 	orr.w	r3, r3, #32
 800381a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003822:	e006      	b.n	8003832 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d1e9      	bne.n	8003806 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b20      	cmp	r3, #32
 800383e:	d003      	beq.n	8003848 <I2C_IsErrorOccurred+0xe0>
 8003840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0aa      	beq.n	800379e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800384c:	2b00      	cmp	r3, #0
 800384e:	d103      	bne.n	8003858 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2220      	movs	r2, #32
 8003856:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003888:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f043 0302 	orr.w	r3, r3, #2
 80038c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80038d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff fe63 	bl	80035a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <I2C_IsErrorOccurred+0x1bc>)
 80038ee:	400b      	ands	r3, r1
 80038f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800391a:	4618      	mov	r0, r3
 800391c:	3728      	adds	r7, #40	; 0x28
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	fe00e800 	.word	0xfe00e800

08003928 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	817b      	strh	r3, [r7, #10]
 8003936:	4613      	mov	r3, r2
 8003938:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003940:	7a7b      	ldrb	r3, [r7, #9]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003948:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	4313      	orrs	r3, r2
 8003952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003956:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	0d5b      	lsrs	r3, r3, #21
 8003962:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <I2C_TransferConfig+0x60>)
 8003968:	430b      	orrs	r3, r1
 800396a:	43db      	mvns	r3, r3
 800396c:	ea02 0103 	and.w	r1, r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	03ff63ff 	.word	0x03ff63ff

0800398c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d138      	bne.n	8003a14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e032      	b.n	8003a16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	; 0x24
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d139      	bne.n	8003aac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e033      	b.n	8003aae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2224      	movs	r2, #36	; 0x24
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abc:	b08f      	sub	sp, #60	; 0x3c
 8003abe:	af0a      	add	r7, sp, #40	; 0x28
 8003ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e116      	b.n	8003cfa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe f806 	bl	8001af8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2203      	movs	r2, #3
 8003af0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fe92 	bl	8005834 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	687e      	ldr	r6, [r7, #4]
 8003b18:	466d      	mov	r5, sp
 8003b1a:	f106 0410 	add.w	r4, r6, #16
 8003b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b2e:	1d33      	adds	r3, r6, #4
 8003b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b32:	6838      	ldr	r0, [r7, #0]
 8003b34:	f001 fe26 	bl	8005784 <USB_CoreInit>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0d7      	b.n	8003cfa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f001 fe80 	bl	8005856 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e04a      	b.n	8003bf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	333d      	adds	r3, #61	; 0x3d
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	333c      	adds	r3, #60	; 0x3c
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	b298      	uxth	r0, r3
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	3344      	adds	r3, #68	; 0x44
 8003b98:	4602      	mov	r2, r0
 8003b9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	3340      	adds	r3, #64	; 0x40
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3348      	adds	r3, #72	; 0x48
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	334c      	adds	r3, #76	; 0x4c
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3354      	adds	r3, #84	; 0x54
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
 8003bf2:	7bfa      	ldrb	r2, [r7, #15]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d3af      	bcc.n	8003b5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]
 8003c00:	e044      	b.n	8003c8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c70:	7bfa      	ldrb	r2, [r7, #15]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d3b5      	bcc.n	8003c02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	687e      	ldr	r6, [r7, #4]
 8003c9e:	466d      	mov	r5, sp
 8003ca0:	f106 0410 	add.w	r4, r6, #16
 8003ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cb4:	1d33      	adds	r3, r6, #4
 8003cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	f001 fe19 	bl	80058f0 <USB_DevInit>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e014      	b.n	8003cfa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d102      	bne.n	8003cee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f80b 	bl	8003d04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 ffd7 	bl	8005ca6 <USB_DevDisconnect>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	10000003 	.word	0x10000003

08003d4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e291      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8087 	beq.w	8003e9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d90:	4b96      	ldr	r3, [pc, #600]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d00c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9c:	4b93      	ldr	r3, [pc, #588]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d112      	bne.n	8003dce <HAL_RCC_OscConfig+0x62>
 8003da8:	4b90      	ldr	r3, [pc, #576]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db4:	d10b      	bne.n	8003dce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db6:	4b8d      	ldr	r3, [pc, #564]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d06c      	beq.n	8003e9c <HAL_RCC_OscConfig+0x130>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d168      	bne.n	8003e9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e26b      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x7a>
 8003dd8:	4b84      	ldr	r3, [pc, #528]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a83      	ldr	r2, [pc, #524]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e02e      	b.n	8003e44 <HAL_RCC_OscConfig+0xd8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x9c>
 8003dee:	4b7f      	ldr	r3, [pc, #508]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7e      	ldr	r2, [pc, #504]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b7c      	ldr	r3, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7b      	ldr	r2, [pc, #492]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xd8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0xc0>
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a75      	ldr	r2, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b73      	ldr	r3, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a72      	ldr	r2, [pc, #456]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xd8>
 8003e2c:	4b6f      	ldr	r3, [pc, #444]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a6b      	ldr	r2, [pc, #428]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd ff84 	bl	8001d58 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fd ff80 	bl	8001d58 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e21f      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xe8>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd ff70 	bl	8001d58 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fd ff6c 	bl	8001d58 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e20b      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	4b57      	ldr	r3, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x110>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d069      	beq.n	8003f7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eaa:	4b50      	ldr	r3, [pc, #320]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb6:	4b4d      	ldr	r3, [pc, #308]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d11c      	bne.n	8003efc <HAL_RCC_OscConfig+0x190>
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x17a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e1df      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b41      	ldr	r3, [pc, #260]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	493d      	ldr	r1, [pc, #244]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	e040      	b.n	8003f7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d023      	beq.n	8003f4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b39      	ldr	r3, [pc, #228]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a38      	ldr	r2, [pc, #224]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fd ff22 	bl	8001d58 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f18:	f7fd ff1e 	bl	8001d58 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1bd      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b30      	ldr	r3, [pc, #192]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b2d      	ldr	r3, [pc, #180]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4929      	ldr	r1, [pc, #164]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
 8003f4a:	e018      	b.n	8003f7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd fefe 	bl	8001d58 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f60:	f7fd fefa 	bl	8001d58 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e199      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d038      	beq.n	8003ffc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d019      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f92:	4b16      	ldr	r3, [pc, #88]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f96:	4a15      	ldr	r2, [pc, #84]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9e:	f7fd fedb 	bl	8001d58 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7fd fed7 	bl	8001d58 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e176      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x23a>
 8003fc4:	e01a      	b.n	8003ffc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd fec1 	bl	8001d58 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fd febd 	bl	8001d58 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d903      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e15c      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
 8003fec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	4b91      	ldr	r3, [pc, #580]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a4 	beq.w	8004152 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400a:	4b8b      	ldr	r3, [pc, #556]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10d      	bne.n	8004032 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	4b88      	ldr	r3, [pc, #544]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a87      	ldr	r2, [pc, #540]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40
 8004022:	4b85      	ldr	r3, [pc, #532]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004032:	4b82      	ldr	r3, [pc, #520]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d118      	bne.n	8004070 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800403e:	4b7f      	ldr	r3, [pc, #508]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a7e      	ldr	r2, [pc, #504]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404a:	f7fd fe85 	bl	8001d58 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fd fe81 	bl	8001d58 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b64      	cmp	r3, #100	; 0x64
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e120      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004064:	4b75      	ldr	r3, [pc, #468]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x31a>
 8004078:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a6e      	ldr	r2, [pc, #440]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
 8004084:	e02d      	b.n	80040e2 <HAL_RCC_OscConfig+0x376>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x33c>
 800408e:	4b6a      	ldr	r3, [pc, #424]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a69      	ldr	r2, [pc, #420]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
 800409a:	4b67      	ldr	r3, [pc, #412]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a66      	ldr	r2, [pc, #408]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e01c      	b.n	80040e2 <HAL_RCC_OscConfig+0x376>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d10c      	bne.n	80040ca <HAL_RCC_OscConfig+0x35e>
 80040b0:	4b61      	ldr	r3, [pc, #388]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	4a60      	ldr	r2, [pc, #384]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	f043 0304 	orr.w	r3, r3, #4
 80040ba:	6713      	str	r3, [r2, #112]	; 0x70
 80040bc:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a5d      	ldr	r2, [pc, #372]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	e00b      	b.n	80040e2 <HAL_RCC_OscConfig+0x376>
 80040ca:	4b5b      	ldr	r3, [pc, #364]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a5a      	ldr	r2, [pc, #360]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70
 80040d6:	4b58      	ldr	r3, [pc, #352]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a57      	ldr	r2, [pc, #348]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ea:	f7fd fe35 	bl	8001d58 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fd fe31 	bl	8001d58 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e0ce      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	4b4b      	ldr	r3, [pc, #300]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ee      	beq.n	80040f2 <HAL_RCC_OscConfig+0x386>
 8004114:	e014      	b.n	8004140 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fd fe1f 	bl	8001d58 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fd fe1b 	bl	8001d58 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0b8      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	4b40      	ldr	r3, [pc, #256]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ee      	bne.n	800411e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d105      	bne.n	8004152 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004146:	4b3c      	ldr	r3, [pc, #240]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a3b      	ldr	r2, [pc, #236]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80a4 	beq.w	80042a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800415c:	4b36      	ldr	r3, [pc, #216]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d06b      	beq.n	8004240 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d149      	bne.n	8004204 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b31      	ldr	r3, [pc, #196]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a30      	ldr	r2, [pc, #192]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fdec 	bl	8001d58 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004184:	f7fd fde8 	bl	8001d58 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e087      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	4b28      	ldr	r3, [pc, #160]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	3b01      	subs	r3, #1
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	4313      	orrs	r3, r2
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80041ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80041d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fdbc 	bl	8001d58 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fd fdb8 	bl	8001d58 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e057      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x478>
 8004202:	e04f      	b.n	80042a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004204:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800420a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800420e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd fda2 	bl	8001d58 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004218:	f7fd fd9e 	bl	8001d58 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e03d      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_RCC_OscConfig+0x4cc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x4ac>
 8004236:	e035      	b.n	80042a4 <HAL_RCC_OscConfig+0x538>
 8004238:	40023800 	.word	0x40023800
 800423c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x544>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d028      	beq.n	80042a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d121      	bne.n	80042a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d11a      	bne.n	80042a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004270:	4013      	ands	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004276:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004278:	4293      	cmp	r3, r2
 800427a:	d111      	bne.n	80042a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	3b01      	subs	r3, #1
 800428a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800

080042b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0d0      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b67      	ldr	r3, [pc, #412]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	4965      	ldr	r1, [pc, #404]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b63      	ldr	r3, [pc, #396]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0b8      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a58      	ldr	r2, [pc, #352]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 800431a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800431e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800432c:	4b53      	ldr	r3, [pc, #332]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004336:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	494d      	ldr	r1, [pc, #308]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d040      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d115      	bne.n	8004396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004376:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e073      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	4b3d      	ldr	r3, [pc, #244]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e06b      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b39      	ldr	r3, [pc, #228]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4936      	ldr	r1, [pc, #216]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a8:	f7fd fcd6 	bl	8001d58 <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fd fcd2 	bl	8001d58 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e053      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b2d      	ldr	r3, [pc, #180]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d210      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 020f 	bic.w	r2, r3, #15
 80043ee:	4922      	ldr	r1, [pc, #136]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e032      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4916      	ldr	r1, [pc, #88]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	490e      	ldr	r1, [pc, #56]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004446:	f000 f821 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	490a      	ldr	r1, [pc, #40]	; (8004480 <HAL_RCC_ClockConfig+0x1cc>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	fa22 f303 	lsr.w	r3, r2, r3
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <HAL_RCC_ClockConfig+0x1d0>)
 8004460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1d4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd fc32 	bl	8001cd0 <HAL_InitTick>

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023c00 	.word	0x40023c00
 800447c:	40023800 	.word	0x40023800
 8004480:	08007be4 	.word	0x08007be4
 8004484:	20000018 	.word	0x20000018
 8004488:	2000001c 	.word	0x2000001c

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b094      	sub	sp, #80	; 0x50
 8004492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
 8004498:	2300      	movs	r3, #0
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	2300      	movs	r3, #0
 800449e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a4:	4b79      	ldr	r3, [pc, #484]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d00d      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x40>
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	f200 80e1 	bhi.w	8004678 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044be:	e0db      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c0:	4b73      	ldr	r3, [pc, #460]	; (8004690 <HAL_RCC_GetSysClockFreq+0x204>)
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044c4:	e0db      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c6:	4b73      	ldr	r3, [pc, #460]	; (8004694 <HAL_RCC_GetSysClockFreq+0x208>)
 80044c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ca:	e0d8      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044cc:	4b6f      	ldr	r3, [pc, #444]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044d6:	4b6d      	ldr	r3, [pc, #436]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d063      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
 80044f6:	2300      	movs	r3, #0
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
 80044fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	0159      	lsls	r1, r3, #5
 800450c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004510:	0150      	lsls	r0, r2, #5
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4621      	mov	r1, r4
 8004518:	1a51      	subs	r1, r2, r1
 800451a:	6139      	str	r1, [r7, #16]
 800451c:	4629      	mov	r1, r5
 800451e:	eb63 0301 	sbc.w	r3, r3, r1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004530:	4659      	mov	r1, fp
 8004532:	018b      	lsls	r3, r1, #6
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800453a:	4651      	mov	r1, sl
 800453c:	018a      	lsls	r2, r1, #6
 800453e:	4651      	mov	r1, sl
 8004540:	ebb2 0801 	subs.w	r8, r2, r1
 8004544:	4659      	mov	r1, fp
 8004546:	eb63 0901 	sbc.w	r9, r3, r1
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800455a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800455e:	4690      	mov	r8, r2
 8004560:	4699      	mov	r9, r3
 8004562:	4623      	mov	r3, r4
 8004564:	eb18 0303 	adds.w	r3, r8, r3
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	462b      	mov	r3, r5
 800456c:	eb49 0303 	adc.w	r3, r9, r3
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800457e:	4629      	mov	r1, r5
 8004580:	024b      	lsls	r3, r1, #9
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004588:	4621      	mov	r1, r4
 800458a:	024a      	lsls	r2, r1, #9
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004592:	2200      	movs	r2, #0
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
 8004596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004598:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800459c:	f7fb fe34 	bl	8000208 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a8:	e058      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045aa:	4b38      	ldr	r3, [pc, #224]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	099b      	lsrs	r3, r3, #6
 80045b0:	2200      	movs	r2, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	4611      	mov	r1, r2
 80045b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
 80045c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045c4:	4642      	mov	r2, r8
 80045c6:	464b      	mov	r3, r9
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	0159      	lsls	r1, r3, #5
 80045d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d6:	0150      	lsls	r0, r2, #5
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4641      	mov	r1, r8
 80045de:	ebb2 0a01 	subs.w	sl, r2, r1
 80045e2:	4649      	mov	r1, r9
 80045e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004600:	eb63 050b 	sbc.w	r5, r3, fp
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	00eb      	lsls	r3, r5, #3
 800460e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004612:	00e2      	lsls	r2, r4, #3
 8004614:	4614      	mov	r4, r2
 8004616:	461d      	mov	r5, r3
 8004618:	4643      	mov	r3, r8
 800461a:	18e3      	adds	r3, r4, r3
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	464b      	mov	r3, r9
 8004620:	eb45 0303 	adc.w	r3, r5, r3
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004632:	4629      	mov	r1, r5
 8004634:	028b      	lsls	r3, r1, #10
 8004636:	4621      	mov	r1, r4
 8004638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800463c:	4621      	mov	r1, r4
 800463e:	028a      	lsls	r2, r1, #10
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004646:	2200      	movs	r2, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	61fa      	str	r2, [r7, #28]
 800464c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004650:	f7fb fdda 	bl	8000208 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4613      	mov	r3, r2
 800465a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	3301      	adds	r3, #1
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800466c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800466e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetSysClockFreq+0x204>)
 800467a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004680:	4618      	mov	r0, r3
 8004682:	3750      	adds	r7, #80	; 0x50
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800
 8004690:	00f42400 	.word	0x00f42400
 8004694:	007a1200 	.word	0x007a1200

08004698 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <HAL_RCC_GetHCLKFreq+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000018 	.word	0x20000018

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046b4:	f7ff fff0 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	0a9b      	lsrs	r3, r3, #10
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40023800 	.word	0x40023800
 80046d4:	08007bf4 	.word	0x08007bf4

080046d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046dc:	f7ff ffdc 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0b5b      	lsrs	r3, r3, #13
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	08007bf4 	.word	0x08007bf4

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004728:	4b69      	ldr	r3, [pc, #420]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a68      	ldr	r2, [pc, #416]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004732:	6093      	str	r3, [r2, #8]
 8004734:	4b66      	ldr	r3, [pc, #408]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	4964      	ldr	r1, [pc, #400]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800474a:	2301      	movs	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d017      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800475a:	4b5d      	ldr	r3, [pc, #372]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	4959      	ldr	r1, [pc, #356]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004778:	d101      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800477a:	2301      	movs	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004786:	2301      	movs	r3, #1
 8004788:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004796:	4b4e      	ldr	r3, [pc, #312]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	494a      	ldr	r1, [pc, #296]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b4:	d101      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 808b 	beq.w	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047e4:	4b3a      	ldr	r3, [pc, #232]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	4a39      	ldr	r2, [pc, #228]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ee:	6413      	str	r3, [r2, #64]	; 0x40
 80047f0:	4b37      	ldr	r3, [pc, #220]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a34      	ldr	r2, [pc, #208]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004808:	f7fd faa6 	bl	8001d58 <HAL_GetTick>
 800480c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004810:	f7fd faa2 	bl	8001d58 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e357      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004822:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d035      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	429a      	cmp	r2, r3
 800484a:	d02e      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800484c:	4b20      	ldr	r3, [pc, #128]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004854:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004856:	4b1e      	ldr	r3, [pc, #120]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a1d      	ldr	r2, [pc, #116]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004862:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800486e:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004874:	4b16      	ldr	r3, [pc, #88]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d114      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fd fa6a 	bl	8001d58 <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fd fa66 	bl	8001d58 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e319      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0ee      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b6:	d111      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048c6:	400b      	ands	r3, r1
 80048c8:	4901      	ldr	r1, [pc, #4]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
 80048ce:	e00b      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40007000 	.word	0x40007000
 80048d8:	0ffffcff 	.word	0x0ffffcff
 80048dc:	4baa      	ldr	r3, [pc, #680]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4aa9      	ldr	r2, [pc, #676]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048e6:	6093      	str	r3, [r2, #8]
 80048e8:	4ba7      	ldr	r3, [pc, #668]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f4:	49a4      	ldr	r1, [pc, #656]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	d010      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004906:	4ba0      	ldr	r3, [pc, #640]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800490c:	4a9e      	ldr	r2, [pc, #632]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800490e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004912:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004916:	4b9c      	ldr	r3, [pc, #624]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004918:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	4999      	ldr	r1, [pc, #612]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004934:	4b94      	ldr	r3, [pc, #592]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004942:	4991      	ldr	r1, [pc, #580]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004956:	4b8c      	ldr	r3, [pc, #560]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004964:	4988      	ldr	r1, [pc, #544]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004978:	4b83      	ldr	r3, [pc, #524]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004986:	4980      	ldr	r1, [pc, #512]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800499a:	4b7b      	ldr	r3, [pc, #492]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	4977      	ldr	r1, [pc, #476]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049bc:	4b72      	ldr	r3, [pc, #456]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	496f      	ldr	r1, [pc, #444]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049de:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	f023 020c 	bic.w	r2, r3, #12
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ec:	4966      	ldr	r1, [pc, #408]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a00:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	495e      	ldr	r1, [pc, #376]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a22:	4b59      	ldr	r3, [pc, #356]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	4955      	ldr	r1, [pc, #340]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	494d      	ldr	r1, [pc, #308]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a66:	4b48      	ldr	r3, [pc, #288]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	4944      	ldr	r1, [pc, #272]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a88:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	493c      	ldr	r1, [pc, #240]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004aaa:	4b37      	ldr	r3, [pc, #220]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab8:	4933      	ldr	r1, [pc, #204]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004acc:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ada:	492b      	ldr	r1, [pc, #172]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d011      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afc:	4922      	ldr	r1, [pc, #136]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3c:	4912      	ldr	r1, [pc, #72]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00b      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b60:	4909      	ldr	r1, [pc, #36]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d006      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 80d9 	beq.w	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a01      	ldr	r2, [pc, #4]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b86:	e001      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8e:	f7fd f8e3 	bl	8001d58 <HAL_GetTick>
 8004b92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b96:	f7fd f8df 	bl	8001d58 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b64      	cmp	r3, #100	; 0x64
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e194      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba8:	4b6c      	ldr	r3, [pc, #432]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d021      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11d      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bc8:	4b64      	ldr	r3, [pc, #400]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bd6:	4b61      	ldr	r3, [pc, #388]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bdc:	0e1b      	lsrs	r3, r3, #24
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	019a      	lsls	r2, r3, #6
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	061b      	lsls	r3, r3, #24
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	071b      	lsls	r3, r3, #28
 8004bfc:	4957      	ldr	r1, [pc, #348]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d02e      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2e:	d129      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c30:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c44:	0f1b      	lsrs	r3, r3, #28
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	019a      	lsls	r2, r3, #6
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	071b      	lsls	r3, r3, #28
 8004c64:	493d      	ldr	r1, [pc, #244]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c72:	f023 021f 	bic.w	r2, r3, #31
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	4937      	ldr	r1, [pc, #220]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01d      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c90:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c96:	0e1b      	lsrs	r3, r3, #24
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c9e:	4b2f      	ldr	r3, [pc, #188]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca4:	0f1b      	lsrs	r3, r3, #28
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	019a      	lsls	r2, r3, #6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	071b      	lsls	r3, r3, #28
 8004cc4:	4925      	ldr	r1, [pc, #148]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d011      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	019a      	lsls	r2, r3, #6
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	071b      	lsls	r3, r3, #28
 8004cf4:	4919      	ldr	r1, [pc, #100]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cfc:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d08:	f7fd f826 	bl	8001d58 <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d10:	f7fd f822 	bl	8001d58 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0d7      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f040 80cd 	bne.w	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a08      	ldr	r2, [pc, #32]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d42:	f7fd f809 	bl	8001d58 <HAL_GetTick>
 8004d46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d48:	e00a      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d4a:	f7fd f805 	bl	8001d58 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b64      	cmp	r3, #100	; 0x64
 8004d56:	d903      	bls.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0ba      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d60:	4b5e      	ldr	r3, [pc, #376]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6c:	d0ed      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d02e      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d12a      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d96:	4b51      	ldr	r3, [pc, #324]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004da4:	4b4d      	ldr	r3, [pc, #308]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	0f1b      	lsrs	r3, r3, #28
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	019a      	lsls	r2, r3, #6
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	041b      	lsls	r3, r3, #16
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	071b      	lsls	r3, r3, #28
 8004dca:	4944      	ldr	r1, [pc, #272]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dd2:	4b42      	ldr	r3, [pc, #264]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	3b01      	subs	r3, #1
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	493d      	ldr	r1, [pc, #244]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d022      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e00:	d11d      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e02:	4b36      	ldr	r3, [pc, #216]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	0e1b      	lsrs	r3, r3, #24
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e10:	4b32      	ldr	r3, [pc, #200]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	0f1b      	lsrs	r3, r3, #28
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	019a      	lsls	r2, r3, #6
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	061b      	lsls	r3, r3, #24
 8004e30:	431a      	orrs	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	071b      	lsls	r3, r3, #28
 8004e36:	4929      	ldr	r1, [pc, #164]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d028      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e4a:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	0e1b      	lsrs	r3, r3, #24
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e58:	4b20      	ldr	r3, [pc, #128]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	019a      	lsls	r2, r3, #6
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	431a      	orrs	r2, r3
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	4917      	ldr	r1, [pc, #92]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	4911      	ldr	r1, [pc, #68]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0e      	ldr	r2, [pc, #56]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fc ff56 	bl	8001d58 <HAL_GetTick>
 8004eac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eb0:	f7fc ff52 	bl	8001d58 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e007      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ece:	d1ef      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800

08004ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e040      	b.n	8004f74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fc fd98 	bl	8001a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2224      	movs	r2, #36	; 0x24
 8004f0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f82c 	bl	8004f7c <UART_SetConfig>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e022      	b.n	8004f74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fa84 	bl	8005444 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fb0b 	bl	8005588 <UART_CheckIdleState>
 8004f72:	4603      	mov	r3, r0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4ba6      	ldr	r3, [pc, #664]	; (8005240 <UART_SetConfig+0x2c4>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	6979      	ldr	r1, [r7, #20]
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a94      	ldr	r2, [pc, #592]	; (8005244 <UART_SetConfig+0x2c8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d120      	bne.n	800503a <UART_SetConfig+0xbe>
 8004ff8:	4b93      	ldr	r3, [pc, #588]	; (8005248 <UART_SetConfig+0x2cc>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b03      	cmp	r3, #3
 8005004:	d816      	bhi.n	8005034 <UART_SetConfig+0xb8>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x90>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800501d 	.word	0x0800501d
 8005010:	08005029 	.word	0x08005029
 8005014:	08005023 	.word	0x08005023
 8005018:	0800502f 	.word	0x0800502f
 800501c:	2301      	movs	r3, #1
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e150      	b.n	80052c4 <UART_SetConfig+0x348>
 8005022:	2302      	movs	r3, #2
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e14d      	b.n	80052c4 <UART_SetConfig+0x348>
 8005028:	2304      	movs	r3, #4
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e14a      	b.n	80052c4 <UART_SetConfig+0x348>
 800502e:	2308      	movs	r3, #8
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e147      	b.n	80052c4 <UART_SetConfig+0x348>
 8005034:	2310      	movs	r3, #16
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e144      	b.n	80052c4 <UART_SetConfig+0x348>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a83      	ldr	r2, [pc, #524]	; (800524c <UART_SetConfig+0x2d0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d132      	bne.n	80050aa <UART_SetConfig+0x12e>
 8005044:	4b80      	ldr	r3, [pc, #512]	; (8005248 <UART_SetConfig+0x2cc>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b0c      	cmp	r3, #12
 8005050:	d828      	bhi.n	80050a4 <UART_SetConfig+0x128>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0xdc>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	0800508d 	.word	0x0800508d
 800505c:	080050a5 	.word	0x080050a5
 8005060:	080050a5 	.word	0x080050a5
 8005064:	080050a5 	.word	0x080050a5
 8005068:	08005099 	.word	0x08005099
 800506c:	080050a5 	.word	0x080050a5
 8005070:	080050a5 	.word	0x080050a5
 8005074:	080050a5 	.word	0x080050a5
 8005078:	08005093 	.word	0x08005093
 800507c:	080050a5 	.word	0x080050a5
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050a5 	.word	0x080050a5
 8005088:	0800509f 	.word	0x0800509f
 800508c:	2300      	movs	r3, #0
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e118      	b.n	80052c4 <UART_SetConfig+0x348>
 8005092:	2302      	movs	r3, #2
 8005094:	77fb      	strb	r3, [r7, #31]
 8005096:	e115      	b.n	80052c4 <UART_SetConfig+0x348>
 8005098:	2304      	movs	r3, #4
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e112      	b.n	80052c4 <UART_SetConfig+0x348>
 800509e:	2308      	movs	r3, #8
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e10f      	b.n	80052c4 <UART_SetConfig+0x348>
 80050a4:	2310      	movs	r3, #16
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e10c      	b.n	80052c4 <UART_SetConfig+0x348>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a68      	ldr	r2, [pc, #416]	; (8005250 <UART_SetConfig+0x2d4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d120      	bne.n	80050f6 <UART_SetConfig+0x17a>
 80050b4:	4b64      	ldr	r3, [pc, #400]	; (8005248 <UART_SetConfig+0x2cc>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050be:	2b30      	cmp	r3, #48	; 0x30
 80050c0:	d013      	beq.n	80050ea <UART_SetConfig+0x16e>
 80050c2:	2b30      	cmp	r3, #48	; 0x30
 80050c4:	d814      	bhi.n	80050f0 <UART_SetConfig+0x174>
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d009      	beq.n	80050de <UART_SetConfig+0x162>
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d810      	bhi.n	80050f0 <UART_SetConfig+0x174>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <UART_SetConfig+0x15c>
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	d006      	beq.n	80050e4 <UART_SetConfig+0x168>
 80050d6:	e00b      	b.n	80050f0 <UART_SetConfig+0x174>
 80050d8:	2300      	movs	r3, #0
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e0f2      	b.n	80052c4 <UART_SetConfig+0x348>
 80050de:	2302      	movs	r3, #2
 80050e0:	77fb      	strb	r3, [r7, #31]
 80050e2:	e0ef      	b.n	80052c4 <UART_SetConfig+0x348>
 80050e4:	2304      	movs	r3, #4
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e0ec      	b.n	80052c4 <UART_SetConfig+0x348>
 80050ea:	2308      	movs	r3, #8
 80050ec:	77fb      	strb	r3, [r7, #31]
 80050ee:	e0e9      	b.n	80052c4 <UART_SetConfig+0x348>
 80050f0:	2310      	movs	r3, #16
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e0e6      	b.n	80052c4 <UART_SetConfig+0x348>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a56      	ldr	r2, [pc, #344]	; (8005254 <UART_SetConfig+0x2d8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d120      	bne.n	8005142 <UART_SetConfig+0x1c6>
 8005100:	4b51      	ldr	r3, [pc, #324]	; (8005248 <UART_SetConfig+0x2cc>)
 8005102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005106:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800510a:	2bc0      	cmp	r3, #192	; 0xc0
 800510c:	d013      	beq.n	8005136 <UART_SetConfig+0x1ba>
 800510e:	2bc0      	cmp	r3, #192	; 0xc0
 8005110:	d814      	bhi.n	800513c <UART_SetConfig+0x1c0>
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d009      	beq.n	800512a <UART_SetConfig+0x1ae>
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d810      	bhi.n	800513c <UART_SetConfig+0x1c0>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <UART_SetConfig+0x1a8>
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	d006      	beq.n	8005130 <UART_SetConfig+0x1b4>
 8005122:	e00b      	b.n	800513c <UART_SetConfig+0x1c0>
 8005124:	2300      	movs	r3, #0
 8005126:	77fb      	strb	r3, [r7, #31]
 8005128:	e0cc      	b.n	80052c4 <UART_SetConfig+0x348>
 800512a:	2302      	movs	r3, #2
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e0c9      	b.n	80052c4 <UART_SetConfig+0x348>
 8005130:	2304      	movs	r3, #4
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e0c6      	b.n	80052c4 <UART_SetConfig+0x348>
 8005136:	2308      	movs	r3, #8
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e0c3      	b.n	80052c4 <UART_SetConfig+0x348>
 800513c:	2310      	movs	r3, #16
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e0c0      	b.n	80052c4 <UART_SetConfig+0x348>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a44      	ldr	r2, [pc, #272]	; (8005258 <UART_SetConfig+0x2dc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d125      	bne.n	8005198 <UART_SetConfig+0x21c>
 800514c:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <UART_SetConfig+0x2cc>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800515a:	d017      	beq.n	800518c <UART_SetConfig+0x210>
 800515c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005160:	d817      	bhi.n	8005192 <UART_SetConfig+0x216>
 8005162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005166:	d00b      	beq.n	8005180 <UART_SetConfig+0x204>
 8005168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800516c:	d811      	bhi.n	8005192 <UART_SetConfig+0x216>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <UART_SetConfig+0x1fe>
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d006      	beq.n	8005186 <UART_SetConfig+0x20a>
 8005178:	e00b      	b.n	8005192 <UART_SetConfig+0x216>
 800517a:	2300      	movs	r3, #0
 800517c:	77fb      	strb	r3, [r7, #31]
 800517e:	e0a1      	b.n	80052c4 <UART_SetConfig+0x348>
 8005180:	2302      	movs	r3, #2
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e09e      	b.n	80052c4 <UART_SetConfig+0x348>
 8005186:	2304      	movs	r3, #4
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e09b      	b.n	80052c4 <UART_SetConfig+0x348>
 800518c:	2308      	movs	r3, #8
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e098      	b.n	80052c4 <UART_SetConfig+0x348>
 8005192:	2310      	movs	r3, #16
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e095      	b.n	80052c4 <UART_SetConfig+0x348>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2f      	ldr	r2, [pc, #188]	; (800525c <UART_SetConfig+0x2e0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d125      	bne.n	80051ee <UART_SetConfig+0x272>
 80051a2:	4b29      	ldr	r3, [pc, #164]	; (8005248 <UART_SetConfig+0x2cc>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b0:	d017      	beq.n	80051e2 <UART_SetConfig+0x266>
 80051b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051b6:	d817      	bhi.n	80051e8 <UART_SetConfig+0x26c>
 80051b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051bc:	d00b      	beq.n	80051d6 <UART_SetConfig+0x25a>
 80051be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c2:	d811      	bhi.n	80051e8 <UART_SetConfig+0x26c>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <UART_SetConfig+0x254>
 80051c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051cc:	d006      	beq.n	80051dc <UART_SetConfig+0x260>
 80051ce:	e00b      	b.n	80051e8 <UART_SetConfig+0x26c>
 80051d0:	2301      	movs	r3, #1
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e076      	b.n	80052c4 <UART_SetConfig+0x348>
 80051d6:	2302      	movs	r3, #2
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e073      	b.n	80052c4 <UART_SetConfig+0x348>
 80051dc:	2304      	movs	r3, #4
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e070      	b.n	80052c4 <UART_SetConfig+0x348>
 80051e2:	2308      	movs	r3, #8
 80051e4:	77fb      	strb	r3, [r7, #31]
 80051e6:	e06d      	b.n	80052c4 <UART_SetConfig+0x348>
 80051e8:	2310      	movs	r3, #16
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e06a      	b.n	80052c4 <UART_SetConfig+0x348>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <UART_SetConfig+0x2e4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d138      	bne.n	800526a <UART_SetConfig+0x2ee>
 80051f8:	4b13      	ldr	r3, [pc, #76]	; (8005248 <UART_SetConfig+0x2cc>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005206:	d017      	beq.n	8005238 <UART_SetConfig+0x2bc>
 8005208:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800520c:	d82a      	bhi.n	8005264 <UART_SetConfig+0x2e8>
 800520e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005212:	d00b      	beq.n	800522c <UART_SetConfig+0x2b0>
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005218:	d824      	bhi.n	8005264 <UART_SetConfig+0x2e8>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <UART_SetConfig+0x2aa>
 800521e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005222:	d006      	beq.n	8005232 <UART_SetConfig+0x2b6>
 8005224:	e01e      	b.n	8005264 <UART_SetConfig+0x2e8>
 8005226:	2300      	movs	r3, #0
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e04b      	b.n	80052c4 <UART_SetConfig+0x348>
 800522c:	2302      	movs	r3, #2
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e048      	b.n	80052c4 <UART_SetConfig+0x348>
 8005232:	2304      	movs	r3, #4
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	e045      	b.n	80052c4 <UART_SetConfig+0x348>
 8005238:	2308      	movs	r3, #8
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e042      	b.n	80052c4 <UART_SetConfig+0x348>
 800523e:	bf00      	nop
 8005240:	efff69f3 	.word	0xefff69f3
 8005244:	40011000 	.word	0x40011000
 8005248:	40023800 	.word	0x40023800
 800524c:	40004400 	.word	0x40004400
 8005250:	40004800 	.word	0x40004800
 8005254:	40004c00 	.word	0x40004c00
 8005258:	40005000 	.word	0x40005000
 800525c:	40011400 	.word	0x40011400
 8005260:	40007800 	.word	0x40007800
 8005264:	2310      	movs	r3, #16
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e02c      	b.n	80052c4 <UART_SetConfig+0x348>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a72      	ldr	r2, [pc, #456]	; (8005438 <UART_SetConfig+0x4bc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d125      	bne.n	80052c0 <UART_SetConfig+0x344>
 8005274:	4b71      	ldr	r3, [pc, #452]	; (800543c <UART_SetConfig+0x4c0>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800527e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005282:	d017      	beq.n	80052b4 <UART_SetConfig+0x338>
 8005284:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005288:	d817      	bhi.n	80052ba <UART_SetConfig+0x33e>
 800528a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528e:	d00b      	beq.n	80052a8 <UART_SetConfig+0x32c>
 8005290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005294:	d811      	bhi.n	80052ba <UART_SetConfig+0x33e>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <UART_SetConfig+0x326>
 800529a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529e:	d006      	beq.n	80052ae <UART_SetConfig+0x332>
 80052a0:	e00b      	b.n	80052ba <UART_SetConfig+0x33e>
 80052a2:	2300      	movs	r3, #0
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e00d      	b.n	80052c4 <UART_SetConfig+0x348>
 80052a8:	2302      	movs	r3, #2
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e00a      	b.n	80052c4 <UART_SetConfig+0x348>
 80052ae:	2304      	movs	r3, #4
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e007      	b.n	80052c4 <UART_SetConfig+0x348>
 80052b4:	2308      	movs	r3, #8
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e004      	b.n	80052c4 <UART_SetConfig+0x348>
 80052ba:	2310      	movs	r3, #16
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e001      	b.n	80052c4 <UART_SetConfig+0x348>
 80052c0:	2310      	movs	r3, #16
 80052c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052cc:	d15b      	bne.n	8005386 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80052ce:	7ffb      	ldrb	r3, [r7, #31]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d828      	bhi.n	8005326 <UART_SetConfig+0x3aa>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <UART_SetConfig+0x360>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005301 	.word	0x08005301
 80052e0:	08005309 	.word	0x08005309
 80052e4:	08005311 	.word	0x08005311
 80052e8:	08005327 	.word	0x08005327
 80052ec:	08005317 	.word	0x08005317
 80052f0:	08005327 	.word	0x08005327
 80052f4:	08005327 	.word	0x08005327
 80052f8:	08005327 	.word	0x08005327
 80052fc:	0800531f 	.word	0x0800531f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005300:	f7ff f9d6 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8005304:	61b8      	str	r0, [r7, #24]
        break;
 8005306:	e013      	b.n	8005330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005308:	f7ff f9e6 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 800530c:	61b8      	str	r0, [r7, #24]
        break;
 800530e:	e00f      	b.n	8005330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005310:	4b4b      	ldr	r3, [pc, #300]	; (8005440 <UART_SetConfig+0x4c4>)
 8005312:	61bb      	str	r3, [r7, #24]
        break;
 8005314:	e00c      	b.n	8005330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005316:	f7ff f8b9 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800531a:	61b8      	str	r0, [r7, #24]
        break;
 800531c:	e008      	b.n	8005330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800531e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005322:	61bb      	str	r3, [r7, #24]
        break;
 8005324:	e004      	b.n	8005330 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	77bb      	strb	r3, [r7, #30]
        break;
 800532e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d074      	beq.n	8005420 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	005a      	lsls	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	441a      	add	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	fbb2 f3f3 	udiv	r3, r2, r3
 800534a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b0f      	cmp	r3, #15
 8005350:	d916      	bls.n	8005380 <UART_SetConfig+0x404>
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005358:	d212      	bcs.n	8005380 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f023 030f 	bic.w	r3, r3, #15
 8005362:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	b29b      	uxth	r3, r3
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	b29a      	uxth	r2, r3
 8005370:	89fb      	ldrh	r3, [r7, #14]
 8005372:	4313      	orrs	r3, r2
 8005374:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	89fa      	ldrh	r2, [r7, #14]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	e04f      	b.n	8005420 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	77bb      	strb	r3, [r7, #30]
 8005384:	e04c      	b.n	8005420 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d828      	bhi.n	80053de <UART_SetConfig+0x462>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x418>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053c1 	.word	0x080053c1
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	080053df 	.word	0x080053df
 80053a4:	080053cf 	.word	0x080053cf
 80053a8:	080053df 	.word	0x080053df
 80053ac:	080053df 	.word	0x080053df
 80053b0:	080053df 	.word	0x080053df
 80053b4:	080053d7 	.word	0x080053d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7ff f97a 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 80053bc:	61b8      	str	r0, [r7, #24]
        break;
 80053be:	e013      	b.n	80053e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c0:	f7ff f98a 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 80053c4:	61b8      	str	r0, [r7, #24]
        break;
 80053c6:	e00f      	b.n	80053e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <UART_SetConfig+0x4c4>)
 80053ca:	61bb      	str	r3, [r7, #24]
        break;
 80053cc:	e00c      	b.n	80053e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ce:	f7ff f85d 	bl	800448c <HAL_RCC_GetSysClockFreq>
 80053d2:	61b8      	str	r0, [r7, #24]
        break;
 80053d4:	e008      	b.n	80053e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053da:	61bb      	str	r3, [r7, #24]
        break;
 80053dc:	e004      	b.n	80053e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	77bb      	strb	r3, [r7, #30]
        break;
 80053e6:	bf00      	nop
    }

    if (pclk != 0U)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d018      	beq.n	8005420 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085a      	lsrs	r2, r3, #1
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	441a      	add	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b0f      	cmp	r3, #15
 8005406:	d909      	bls.n	800541c <UART_SetConfig+0x4a0>
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540e:	d205      	bcs.n	800541c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	b29a      	uxth	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	e001      	b.n	8005420 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800542c:	7fbb      	ldrb	r3, [r7, #30]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40007c00 	.word	0x40007c00
 800543c:	40023800 	.word	0x40023800
 8005440:	00f42400 	.word	0x00f42400

08005444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01a      	beq.n	800555a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005542:	d10a      	bne.n	800555a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005598:	f7fc fbde 	bl	8001d58 <HAL_GetTick>
 800559c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d10e      	bne.n	80055ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f81b 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e011      	b.n	80055ee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005606:	e0a7      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	f000 80a3 	beq.w	8005758 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005612:	f7fc fba1 	bl	8001d58 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <UART_WaitOnFlagUntilTimeout+0x32>
 8005622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005624:	2b00      	cmp	r3, #0
 8005626:	d13f      	bne.n	80056a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800563c:	667b      	str	r3, [r7, #100]	; 0x64
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005648:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800564c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e6      	bne.n	8005628 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	663b      	str	r3, [r7, #96]	; 0x60
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800567a:	64ba      	str	r2, [r7, #72]	; 0x48
 800567c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e068      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d050      	beq.n	8005758 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c4:	d148      	bne.n	8005758 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
 80056f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e6      	bne.n	80056d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3308      	adds	r3, #8
 8005708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	613b      	str	r3, [r7, #16]
   return(result);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f023 0301 	bic.w	r3, r3, #1
 8005718:	66bb      	str	r3, [r7, #104]	; 0x68
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005722:	623a      	str	r2, [r7, #32]
 8005724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	69f9      	ldr	r1, [r7, #28]
 8005728:	6a3a      	ldr	r2, [r7, #32]
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e5      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e010      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4013      	ands	r3, r2
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	bf0c      	ite	eq
 8005768:	2301      	moveq	r3, #1
 800576a:	2300      	movne	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	429a      	cmp	r2, r3
 8005774:	f43f af48 	beq.w	8005608 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3770      	adds	r7, #112	; 0x70
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005784:	b084      	sub	sp, #16
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	f107 001c 	add.w	r0, r7, #28
 8005792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2b01      	cmp	r3, #1
 800579a:	d120      	bne.n	80057de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	4b20      	ldr	r3, [pc, #128]	; (8005830 <USB_CoreInit+0xac>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d105      	bne.n	80057d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa96 	bl	8005d04 <USB_CoreReset>
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
 80057dc:	e010      	b.n	8005800 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa8a 	bl	8005d04 <USB_CoreReset>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	2b01      	cmp	r3, #1
 8005804:	d10b      	bne.n	800581e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f043 0206 	orr.w	r2, r3, #6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800582a:	b004      	add	sp, #16
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	ffbdffbf 	.word	0xffbdffbf

08005834 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 0201 	bic.w	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d115      	bne.n	80058a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005884:	2001      	movs	r0, #1
 8005886:	f7fc fa73 	bl	8001d70 <HAL_Delay>
      ms++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3301      	adds	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fa29 	bl	8005ce8 <USB_GetMode>
 8005896:	4603      	mov	r3, r0
 8005898:	2b01      	cmp	r3, #1
 800589a:	d01e      	beq.n	80058da <USB_SetCurrentMode+0x84>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b31      	cmp	r3, #49	; 0x31
 80058a0:	d9f0      	bls.n	8005884 <USB_SetCurrentMode+0x2e>
 80058a2:	e01a      	b.n	80058da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d115      	bne.n	80058d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058b6:	2001      	movs	r0, #1
 80058b8:	f7fc fa5a 	bl	8001d70 <HAL_Delay>
      ms++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa10 	bl	8005ce8 <USB_GetMode>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <USB_SetCurrentMode+0x84>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b31      	cmp	r3, #49	; 0x31
 80058d2:	d9f0      	bls.n	80058b6 <USB_SetCurrentMode+0x60>
 80058d4:	e001      	b.n	80058da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e005      	b.n	80058e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b32      	cmp	r3, #50	; 0x32
 80058de:	d101      	bne.n	80058e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f0:	b084      	sub	sp, #16
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	e009      	b.n	8005924 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	3340      	adds	r3, #64	; 0x40
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	2200      	movs	r2, #0
 800591c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3301      	adds	r3, #1
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b0e      	cmp	r3, #14
 8005928:	d9f2      	bls.n	8005910 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800592a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d11c      	bne.n	800596a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e005      	b.n	8005976 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800597c:	461a      	mov	r2, r3
 800597e:	2300      	movs	r3, #0
 8005980:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	4619      	mov	r1, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	461a      	mov	r2, r3
 8005992:	680b      	ldr	r3, [r1, #0]
 8005994:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	2b01      	cmp	r3, #1
 800599a:	d10c      	bne.n	80059b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059a2:	2100      	movs	r1, #0
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f965 	bl	8005c74 <USB_SetDevSpeed>
 80059aa:	e008      	b.n	80059be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059ac:	2101      	movs	r1, #1
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f960 	bl	8005c74 <USB_SetDevSpeed>
 80059b4:	e003      	b.n	80059be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059b6:	2103      	movs	r1, #3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f95b 	bl	8005c74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059be:	2110      	movs	r1, #16
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f8f3 	bl	8005bac <USB_FlushTxFifo>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f91f 	bl	8005c14 <USB_FlushRxFifo>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	461a      	mov	r2, r3
 80059e8:	2300      	movs	r3, #0
 80059ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	e043      	b.n	8005a92 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a20:	d118      	bne.n	8005a54 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	461a      	mov	r2, r3
 8005a36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e013      	b.n	8005a66 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	e008      	b.n	8005a66 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	461a      	mov	r2, r3
 8005a62:	2300      	movs	r3, #0
 8005a64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	461a      	mov	r2, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	461a      	mov	r2, r3
 8005a86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d3b7      	bcc.n	8005a0a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e043      	b.n	8005b28 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab6:	d118      	bne.n	8005aea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	461a      	mov	r2, r3
 8005acc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e013      	b.n	8005afc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e008      	b.n	8005afc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d3b7      	bcc.n	8005aa0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f043 0210 	orr.w	r2, r3, #16
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <USB_DevInit+0x2b4>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d005      	beq.n	8005b82 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f043 0208 	orr.w	r2, r3, #8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d105      	bne.n	8005b94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <USB_DevInit+0x2b8>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ba0:	b004      	add	sp, #16
 8005ba2:	4770      	bx	lr
 8005ba4:	803c3800 	.word	0x803c3800
 8005ba8:	40000004 	.word	0x40000004

08005bac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a13      	ldr	r2, [pc, #76]	; (8005c10 <USB_FlushTxFifo+0x64>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e01b      	b.n	8005c04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	daf2      	bge.n	8005bba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	019b      	lsls	r3, r3, #6
 8005bdc:	f043 0220 	orr.w	r2, r3, #32
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <USB_FlushTxFifo+0x64>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e006      	b.n	8005c04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d0f0      	beq.n	8005be4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	00030d40 	.word	0x00030d40

08005c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4a11      	ldr	r2, [pc, #68]	; (8005c70 <USB_FlushRxFifo+0x5c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d901      	bls.n	8005c32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e018      	b.n	8005c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	daf2      	bge.n	8005c20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2210      	movs	r2, #16
 8005c42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <USB_FlushRxFifo+0x5c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e006      	b.n	8005c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d0f0      	beq.n	8005c44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	00030d40 	.word	0x00030d40

08005c74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c94:	4313      	orrs	r3, r2
 8005c96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cc0:	f023 0303 	bic.w	r3, r3, #3
 8005cc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <USB_CoreReset+0x64>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e01b      	b.n	8005d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	daf2      	bge.n	8005d10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <USB_CoreReset+0x64>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d901      	bls.n	8005d4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e006      	b.n	8005d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d0f0      	beq.n	8005d3a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	00030d40 	.word	0x00030d40

08005d6c <__libc_init_array>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4d0d      	ldr	r5, [pc, #52]	; (8005da4 <__libc_init_array+0x38>)
 8005d70:	4c0d      	ldr	r4, [pc, #52]	; (8005da8 <__libc_init_array+0x3c>)
 8005d72:	1b64      	subs	r4, r4, r5
 8005d74:	10a4      	asrs	r4, r4, #2
 8005d76:	2600      	movs	r6, #0
 8005d78:	42a6      	cmp	r6, r4
 8005d7a:	d109      	bne.n	8005d90 <__libc_init_array+0x24>
 8005d7c:	4d0b      	ldr	r5, [pc, #44]	; (8005dac <__libc_init_array+0x40>)
 8005d7e:	4c0c      	ldr	r4, [pc, #48]	; (8005db0 <__libc_init_array+0x44>)
 8005d80:	f000 f820 	bl	8005dc4 <_init>
 8005d84:	1b64      	subs	r4, r4, r5
 8005d86:	10a4      	asrs	r4, r4, #2
 8005d88:	2600      	movs	r6, #0
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	d105      	bne.n	8005d9a <__libc_init_array+0x2e>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d94:	4798      	blx	r3
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7ee      	b.n	8005d78 <__libc_init_array+0xc>
 8005d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9e:	4798      	blx	r3
 8005da0:	3601      	adds	r6, #1
 8005da2:	e7f2      	b.n	8005d8a <__libc_init_array+0x1e>
 8005da4:	08007c04 	.word	0x08007c04
 8005da8:	08007c04 	.word	0x08007c04
 8005dac:	08007c04 	.word	0x08007c04
 8005db0:	08007c08 	.word	0x08007c08

08005db4 <memset>:
 8005db4:	4402      	add	r2, r0
 8005db6:	4603      	mov	r3, r0
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d100      	bne.n	8005dbe <memset+0xa>
 8005dbc:	4770      	bx	lr
 8005dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc2:	e7f9      	b.n	8005db8 <memset+0x4>

08005dc4 <_init>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr

08005dd0 <_fini>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr
