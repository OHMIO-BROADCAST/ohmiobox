
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006184  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e14  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008168  08008168  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008170  08008170  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08008200  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  080082a0  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b68  200001c8  08008340  000201c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d30  08008340  00020d30  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017d63  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e2e  00000000  00000000  00037f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001218  00000000  00000000  0003ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010d8  00000000  00000000  0003bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000287b5  00000000  00000000  0003d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001690b  00000000  00000000  00065835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6a52  00000000  00000000  0007c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00172b92  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005018  00000000  00000000  00172be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800633c 	.word	0x0800633c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	0800633c 	.word	0x0800633c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
  */
extern int indexMenu=0;
extern int screen=0;

int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 f9c5 	bl	8001946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f84a 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f9ee 	bl	80009a0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005c4:	f000 f900 	bl	80007c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f98c 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 f9ba 	bl	8000944 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80005d0:	f000 f948 	bl	8000864 <MX_I2C2_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8a6 	bl	8000724 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005d8:	f000 face 	bl	8000b78 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 80005dc:	f000 feac 	bl	8001338 <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 80005e0:	f000 feb6 	bl	8001350 <ssd1306_OhmioMenuPrincipal>
  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH

	  HAL_ADC_Start(&hadc1);
 80005e4:	4817      	ldr	r0, [pc, #92]	; (8000644 <main+0x90>)
 80005e6:	f001 fa73 	bl	8001ad0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
 80005ea:	210a      	movs	r1, #10
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <main+0x90>)
 80005ee:	f001 fb71 	bl	8001cd4 <HAL_ADC_PollForConversion>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10e      	bne.n	8000616 <main+0x62>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc1);
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <main+0x90>)
 80005fa:	f001 fbf6 	bl	8001dea <HAL_ADC_GetValue>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a11      	ldr	r2, [pc, #68]	; (8000648 <main+0x94>)
 8000602:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen);
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <main+0x94>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <main+0x98>)
 800060a:	6811      	ldr	r1, [r2, #0]
 800060c:	4a10      	ldr	r2, [pc, #64]	; (8000650 <main+0x9c>)
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fd5f 	bl	80010d4 <ssd1306_DisplayAnalogValue>
	  }

	   if(analog_value_keypad >= 800 && analog_value_keypad <= 900){
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <main+0x94>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800061e:	d309      	bcc.n	8000634 <main+0x80>
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <main+0x94>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000628:	d804      	bhi.n	8000634 <main+0x80>
	        	indexMenu++;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <main+0x98>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <main+0x98>)
 8000632:	6013      	str	r3, [r2, #0]
	        }
	  HAL_ADC_Stop(&hadc1);
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <main+0x90>)
 8000636:	f001 fb19 	bl	8001c6c <HAL_ADC_Stop>
	  HAL_Delay(50);
 800063a:	2032      	movs	r0, #50	; 0x32
 800063c:	f001 f9e0 	bl	8001a00 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000640:	e7d0      	b.n	80005e4 <main+0x30>
 8000642:	bf00      	nop
 8000644:	2000021c 	.word	0x2000021c
 8000648:	20000264 	.word	0x20000264
 800064c:	200008fc 	.word	0x200008fc
 8000650:	20000900 	.word	0x20000900

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fa02 	bl	8005a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000678:	f003 f9b0 	bl	80039dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a26      	ldr	r2, [pc, #152]	; (800071c <SystemClock_Config+0xc8>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <SystemClock_Config+0xcc>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006c8:	2348      	movs	r3, #72	; 0x48
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006d0:	2303      	movs	r3, #3
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 f98f 	bl	80039fc <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 fa0a 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2102      	movs	r1, #2
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fc1d 	bl	8003f44 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000710:	f000 f9f4 	bl	8000afc <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC1_Init+0x98>)
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <MX_ADC1_Init+0x9c>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_ADC1_Init+0x98>)
 8000764:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MX_ADC1_Init+0xa0>)
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_ADC1_Init+0x98>)
 8000770:	2201      	movs	r2, #1
 8000772:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_ADC1_Init+0x98>)
 800077e:	2201      	movs	r2, #1
 8000780:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <MX_ADC1_Init+0x98>)
 8000784:	f001 f960 	bl	8001a48 <HAL_ADC_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f9b5 	bl	8000afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000796:	2301      	movs	r3, #1
 8000798:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_ADC1_Init+0x98>)
 80007a4:	f001 fb2e 	bl	8001e04 <HAL_ADC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ae:	f000 f9a5 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000021c 	.word	0x2000021c
 80007c0:	40012000 	.word	0x40012000
 80007c4:	0f000001 	.word	0x0f000001

080007c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_ETH_Init+0x84>)
 80007ce:	4a20      	ldr	r2, [pc, #128]	; (8000850 <MX_ETH_Init+0x88>)
 80007d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_ETH_Init+0x8c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_ETH_Init+0x8c>)
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_ETH_Init+0x8c>)
 80007e0:	22e1      	movs	r2, #225	; 0xe1
 80007e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_ETH_Init+0x8c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_ETH_Init+0x8c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_ETH_Init+0x8c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_ETH_Init+0x84>)
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <MX_ETH_Init+0x8c>)
 80007fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_ETH_Init+0x84>)
 80007fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000802:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_ETH_Init+0x84>)
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <MX_ETH_Init+0x90>)
 8000808:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_ETH_Init+0x84>)
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <MX_ETH_Init+0x94>)
 800080e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_ETH_Init+0x84>)
 8000812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000816:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_ETH_Init+0x84>)
 800081a:	f001 fe29 	bl	8002470 <HAL_ETH_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000824:	f000 f96a 	bl	8000afc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000828:	2238      	movs	r2, #56	; 0x38
 800082a:	2100      	movs	r1, #0
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_ETH_Init+0x98>)
 800082e:	f005 f91d 	bl	8005a6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_ETH_Init+0x98>)
 8000834:	2221      	movs	r2, #33	; 0x21
 8000836:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_ETH_Init+0x98>)
 800083a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800083e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_ETH_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000268 	.word	0x20000268
 8000850:	40028000 	.word	0x40028000
 8000854:	20000904 	.word	0x20000904
 8000858:	20000128 	.word	0x20000128
 800085c:	20000088 	.word	0x20000088
 8000860:	200001e4 	.word	0x200001e4

08000864 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_I2C2_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_I2C2_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <MX_I2C2_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_I2C2_Init+0x74>)
 800087c:	2201      	movs	r2, #1
 800087e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008a0:	f002 fad2 	bl	8002e48 <HAL_I2C_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008aa:	f000 f927 	bl	8000afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008b2:	f002 feb3 	bl	800361c <HAL_I2CEx_ConfigAnalogFilter>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008bc:	f000 f91e 	bl	8000afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008c4:	f002 fef5 	bl	80036b2 <HAL_I2CEx_ConfigDigitalFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 f915 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000318 	.word	0x20000318
 80008dc:	40005800 	.word	0x40005800
 80008e0:	00301739 	.word	0x00301739

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_USART3_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000928:	f004 f922 	bl	8004b70 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f8e3 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000036c 	.word	0x2000036c
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800094e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2206      	movs	r2, #6
 8000954:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2202      	movs	r2, #2
 8000966:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2201      	movs	r2, #1
 800096c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2201      	movs	r2, #1
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	f002 fedf 	bl	800374a <HAL_PCD_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f8b3 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200003f4 	.word	0x200003f4

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b4d      	ldr	r3, [pc, #308]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a4c      	ldr	r2, [pc, #304]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b4a      	ldr	r3, [pc, #296]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	4b47      	ldr	r3, [pc, #284]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a46      	ldr	r2, [pc, #280]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009d4:	f043 0320 	orr.w	r3, r3, #32
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b44      	ldr	r3, [pc, #272]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0320 	and.w	r3, r3, #32
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a40      	ldr	r2, [pc, #256]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <MX_GPIO_Init+0x14c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a3a      	ldr	r2, [pc, #232]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a34      	ldr	r2, [pc, #208]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b32      	ldr	r3, [pc, #200]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a2e      	ldr	r2, [pc, #184]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a28      	ldr	r2, [pc, #160]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <MX_GPIO_Init+0x14c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a64:	4822      	ldr	r0, [pc, #136]	; (8000af0 <MX_GPIO_Init+0x150>)
 8000a66:	f002 f9d5 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	4821      	ldr	r0, [pc, #132]	; (8000af4 <MX_GPIO_Init+0x154>)
 8000a70:	f002 f9d0 	bl	8002e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481b      	ldr	r0, [pc, #108]	; (8000af8 <MX_GPIO_Init+0x158>)
 8000a8c:	f002 f816 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a90:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_GPIO_Init+0x150>)
 8000aaa:	f002 f807 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <MX_GPIO_Init+0x154>)
 8000ac6:	f001 fff9 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_GPIO_Init+0x154>)
 8000ade:	f001 ffed 	bl	8002abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3730      	adds	r7, #48	; 0x30
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40020800 	.word	0x40020800

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>

08000b06 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af04      	add	r7, sp, #16
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	2301      	movs	r3, #1
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2178      	movs	r1, #120	; 0x78
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <ssd1306_WriteCommand+0x2c>)
 8000b34:	f002 fa18 	bl	8002f68 <HAL_I2C_Mem_Write>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000318 	.word	0x20000318

08000b44 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af04      	add	r7, sp, #16
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	f04f 32ff 	mov.w	r2, #4294967295
 8000b56:	9202      	str	r2, [sp, #8]
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2240      	movs	r2, #64	; 0x40
 8000b62:	2178      	movs	r1, #120	; 0x78
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <ssd1306_WriteData+0x30>)
 8000b66:	f002 f9ff 	bl	8002f68 <HAL_I2C_Mem_Write>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000318 	.word	0x20000318

08000b78 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b7c:	f7ff ffc3 	bl	8000b06 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b80:	2064      	movs	r0, #100	; 0x64
 8000b82:	f000 ff3d 	bl	8001a00 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 fa34 	bl	8000ff4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b8c:	2020      	movs	r0, #32
 8000b8e:	f7ff ffc1 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ffbe 	bl	8000b14 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b98:	20b0      	movs	r0, #176	; 0xb0
 8000b9a:	f7ff ffbb 	bl	8000b14 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b9e:	20c8      	movs	r0, #200	; 0xc8
 8000ba0:	f7ff ffb8 	bl	8000b14 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff ffb5 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000baa:	2010      	movs	r0, #16
 8000bac:	f7ff ffb2 	bl	8000b14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000bb0:	2040      	movs	r0, #64	; 0x40
 8000bb2:	f7ff ffaf 	bl	8000b14 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000bb6:	20ff      	movs	r0, #255	; 0xff
 8000bb8:	f000 fa09 	bl	8000fce <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000bbc:	20a1      	movs	r0, #161	; 0xa1
 8000bbe:	f7ff ffa9 	bl	8000b14 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bc2:	20a6      	movs	r0, #166	; 0xa6
 8000bc4:	f7ff ffa6 	bl	8000b14 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bc8:	20a8      	movs	r0, #168	; 0xa8
 8000bca:	f7ff ffa3 	bl	8000b14 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bce:	203f      	movs	r0, #63	; 0x3f
 8000bd0:	f7ff ffa0 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bd4:	20a4      	movs	r0, #164	; 0xa4
 8000bd6:	f7ff ff9d 	bl	8000b14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bda:	20d3      	movs	r0, #211	; 0xd3
 8000bdc:	f7ff ff9a 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff ff97 	bl	8000b14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000be6:	20d5      	movs	r0, #213	; 0xd5
 8000be8:	f7ff ff94 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bec:	20f0      	movs	r0, #240	; 0xf0
 8000bee:	f7ff ff91 	bl	8000b14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bf2:	20d9      	movs	r0, #217	; 0xd9
 8000bf4:	f7ff ff8e 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bf8:	2022      	movs	r0, #34	; 0x22
 8000bfa:	f7ff ff8b 	bl	8000b14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bfe:	20da      	movs	r0, #218	; 0xda
 8000c00:	f7ff ff88 	bl	8000b14 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c04:	2012      	movs	r0, #18
 8000c06:	f7ff ff85 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c0a:	20db      	movs	r0, #219	; 0xdb
 8000c0c:	f7ff ff82 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c10:	2020      	movs	r0, #32
 8000c12:	f7ff ff7f 	bl	8000b14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c16:	208d      	movs	r0, #141	; 0x8d
 8000c18:	f7ff ff7c 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c1c:	2014      	movs	r0, #20
 8000c1e:	f7ff ff79 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 f9e6 	bl	8000ff4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f80f 	bl	8000c4c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c2e:	f000 f831 	bl	8000c94 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <ssd1306_Init+0xd0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <ssd1306_Init+0xd0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c3e:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <ssd1306_Init+0xd0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	711a      	strb	r2, [r3, #4]
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000d0c 	.word	0x20000d0c

08000c4c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e00d      	b.n	8000c78 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <ssd1306_Fill+0x1a>
 8000c62:	2100      	movs	r1, #0
 8000c64:	e000      	b.n	8000c68 <ssd1306_Fill+0x1c>
 8000c66:	21ff      	movs	r1, #255	; 0xff
 8000c68:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <ssd1306_Fill+0x44>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	460a      	mov	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c7e:	d3ed      	bcc.n	8000c5c <ssd1306_Fill+0x10>
    }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2000090c 	.word	0x2000090c

08000c94 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	e016      	b.n	8000cce <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	3b50      	subs	r3, #80	; 0x50
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff34 	bl	8000b14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f7ff ff31 	bl	8000b14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f7ff ff2e 	bl	8000b14 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	01db      	lsls	r3, r3, #7
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <ssd1306_UpdateScreen+0x4c>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff3e 	bl	8000b44 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d9e5      	bls.n	8000ca0 <ssd1306_UpdateScreen+0xc>
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000090c 	.word	0x2000090c

08000ce4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	71bb      	strb	r3, [r7, #6]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db3d      	blt.n	8000d7a <ssd1306_DrawPixel+0x96>
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	2b3f      	cmp	r3, #63	; 0x3f
 8000d02:	d83a      	bhi.n	8000d7a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d11a      	bne.n	8000d40 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	b2d8      	uxtb	r0, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	01db      	lsls	r3, r3, #7
 8000d16:	4413      	add	r3, r2
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <ssd1306_DrawPixel+0xa4>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b259      	sxtb	r1, r3
 8000d30:	79fa      	ldrb	r2, [r7, #7]
 8000d32:	4603      	mov	r3, r0
 8000d34:	01db      	lsls	r3, r3, #7
 8000d36:	4413      	add	r3, r2
 8000d38:	b2c9      	uxtb	r1, r1
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <ssd1306_DrawPixel+0xa4>)
 8000d3c:	54d1      	strb	r1, [r2, r3]
 8000d3e:	e01d      	b.n	8000d7c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	b2d8      	uxtb	r0, r3
 8000d48:	4603      	mov	r3, r0
 8000d4a:	01db      	lsls	r3, r3, #7
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <ssd1306_DrawPixel+0xa4>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	4013      	ands	r3, r2
 8000d68:	b259      	sxtb	r1, r3
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	01db      	lsls	r3, r3, #7
 8000d70:	4413      	add	r3, r2
 8000d72:	b2c9      	uxtb	r1, r1
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <ssd1306_DrawPixel+0xa4>)
 8000d76:	54d1      	strb	r1, [r2, r3]
 8000d78:	e000      	b.n	8000d7c <ssd1306_DrawPixel+0x98>
        return;
 8000d7a:	bf00      	nop
    }
}
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2000090c 	.word	0x2000090c

08000d8c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4604      	mov	r4, r0
 8000d94:	1d38      	adds	r0, r7, #4
 8000d96:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4623      	mov	r3, r4
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	4613      	mov	r3, r2
 8000da2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b1f      	cmp	r3, #31
 8000da8:	d902      	bls.n	8000db0 <ssd1306_WriteChar+0x24>
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b7e      	cmp	r3, #126	; 0x7e
 8000dae:	d901      	bls.n	8000db4 <ssd1306_WriteChar+0x28>
        return 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e06d      	b.n	8000e90 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000db4:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <ssd1306_WriteChar+0x10c>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	793b      	ldrb	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	2b80      	cmp	r3, #128	; 0x80
 8000dc0:	dc06      	bgt.n	8000dd0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <ssd1306_WriteChar+0x10c>)
 8000dc4:	885b      	ldrh	r3, [r3, #2]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000dcc:	2b40      	cmp	r3, #64	; 0x40
 8000dce:	dd01      	ble.n	8000dd4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e05d      	b.n	8000e90 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	e04c      	b.n	8000e74 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	3b20      	subs	r3, #32
 8000de0:	7979      	ldrb	r1, [r7, #5]
 8000de2:	fb01 f303 	mul.w	r3, r1, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	440b      	add	r3, r1
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	e034      	b.n	8000e64 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d012      	beq.n	8000e30 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b2d8      	uxtb	r0, r3
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e1a:	885b      	ldrh	r3, [r3, #2]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	7bba      	ldrb	r2, [r7, #14]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff ff5b 	bl	8000ce4 <ssd1306_DrawPixel>
 8000e2e:	e016      	b.n	8000e5e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b2d8      	uxtb	r0, r3
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e40:	885b      	ldrh	r3, [r3, #2]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2d9      	uxtb	r1, r3
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f7ff ff43 	bl	8000ce4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	793b      	ldrb	r3, [r7, #4]
 8000e66:	461a      	mov	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d3c5      	bcc.n	8000dfa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	797b      	ldrb	r3, [r7, #5]
 8000e76:	461a      	mov	r2, r3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d3ad      	bcc.n	8000dda <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	793b      	ldrb	r3, [r7, #4]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4413      	add	r3, r2
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <ssd1306_WriteChar+0x10c>)
 8000e8c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3724      	adds	r7, #36	; 0x24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	20000d0c 	.word	0x20000d0c

08000e9c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	1d38      	adds	r0, r7, #4
 8000ea6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000eaa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000eac:	e012      	b.n	8000ed4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	7818      	ldrb	r0, [r3, #0]
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	1d3a      	adds	r2, r7, #4
 8000eb6:	ca06      	ldmia	r2, {r1, r2}
 8000eb8:	f7ff ff68 	bl	8000d8c <ssd1306_WriteChar>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d002      	beq.n	8000ece <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	e008      	b.n	8000ee0 <ssd1306_WriteString+0x44>
        }
        str++;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1e8      	bne.n	8000eae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	781b      	ldrb	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <ssd1306_SetCursor+0x2c>)
 8000efe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <ssd1306_SetCursor+0x2c>)
 8000f06:	805a      	strh	r2, [r3, #2]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000d0c 	.word	0x20000d0c

08000f18 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	603a      	str	r2, [r7, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	460b      	mov	r3, r1
 8000f28:	71bb      	strb	r3, [r7, #6]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	3307      	adds	r3, #7
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da00      	bge.n	8000f38 <ssd1306_DrawBitmap+0x20>
 8000f36:	3307      	adds	r3, #7
 8000f38:	10db      	asrs	r3, r3, #3
 8000f3a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db3e      	blt.n	8000fc6 <ssd1306_DrawBitmap+0xae>
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f4c:	d83b      	bhi.n	8000fc6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	e033      	b.n	8000fbc <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	737b      	strb	r3, [r7, #13]
 8000f58:	e026      	b.n	8000fa8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000f5a:	7b7b      	ldrb	r3, [r7, #13]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e00d      	b.n	8000f88 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	7b7a      	ldrb	r2, [r7, #13]
 8000f78:	08d2      	lsrs	r2, r2, #3
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da08      	bge.n	8000fa2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	7b7b      	ldrb	r3, [r7, #13]
 8000f94:	4413      	add	r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	7f3a      	ldrb	r2, [r7, #28]
 8000f9a:	79b9      	ldrb	r1, [r7, #6]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fea1 	bl	8000ce4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000fa2:	7b7b      	ldrb	r3, [r7, #13]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	737b      	strb	r3, [r7, #13]
 8000fa8:	7b7a      	ldrb	r2, [r7, #13]
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3d4      	bcc.n	8000f5a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	71bb      	strb	r3, [r7, #6]
 8000fbc:	7bba      	ldrb	r2, [r7, #14]
 8000fbe:	7e3b      	ldrb	r3, [r7, #24]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3c7      	bcc.n	8000f54 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000fc4:	e000      	b.n	8000fc8 <ssd1306_DrawBitmap+0xb0>
        return;
 8000fc6:	bf00      	nop
}
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000fd8:	2381      	movs	r3, #129	; 0x81
 8000fda:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fd98 	bl	8000b14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fd94 	bl	8000b14 <ssd1306_WriteCommand>
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001004:	23af      	movs	r3, #175	; 0xaf
 8001006:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <ssd1306_SetDisplayOn+0x38>)
 800100a:	2201      	movs	r2, #1
 800100c:	715a      	strb	r2, [r3, #5]
 800100e:	e004      	b.n	800101a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001010:	23ae      	movs	r3, #174	; 0xae
 8001012:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <ssd1306_SetDisplayOn+0x38>)
 8001016:	2200      	movs	r2, #0
 8001018:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd79 	bl	8000b14 <ssd1306_WriteCommand>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000d0c 	.word	0x20000d0c

08001030 <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fe06 	bl	8000c4c <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4619      	mov	r1, r3
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff ff4f 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <ssd1306_TestFonts1+0x88>)
 800104c:	2301      	movs	r3, #1
 800104e:	ca06      	ldmia	r2, {r1, r2}
 8001050:	481a      	ldr	r0, [pc, #104]	; (80010bc <ssd1306_TestFonts1+0x8c>)
 8001052:	f7ff ff23 	bl	8000e9c <ssd1306_WriteString>
    y += 26;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	331a      	adds	r3, #26
 800105a:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4619      	mov	r1, r3
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff ff41 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <ssd1306_TestFonts1+0x90>)
 8001068:	2301      	movs	r3, #1
 800106a:	ca06      	ldmia	r2, {r1, r2}
 800106c:	4815      	ldr	r0, [pc, #84]	; (80010c4 <ssd1306_TestFonts1+0x94>)
 800106e:	f7ff ff15 	bl	8000e9c <ssd1306_WriteString>
    y += 10;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	330a      	adds	r3, #10
 8001076:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4619      	mov	r1, r3
 800107c:	2002      	movs	r0, #2
 800107e:	f7ff ff33 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <ssd1306_TestFonts1+0x98>)
 8001084:	2301      	movs	r3, #1
 8001086:	ca06      	ldmia	r2, {r1, r2}
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <ssd1306_TestFonts1+0x9c>)
 800108a:	f7ff ff07 	bl	8000e9c <ssd1306_WriteString>
    y += 10;
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	330a      	adds	r3, #10
 8001092:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4619      	mov	r1, r3
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff ff25 	bl	8000ee8 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.1", Font_6x8, White);
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <ssd1306_TestFonts1+0x98>)
 80010a0:	2301      	movs	r3, #1
 80010a2:	ca06      	ldmia	r2, {r1, r2}
 80010a4:	480a      	ldr	r0, [pc, #40]	; (80010d0 <ssd1306_TestFonts1+0xa0>)
 80010a6:	f7ff fef9 	bl	8000e9c <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 80010aa:	f7ff fdf3 	bl	8000c94 <ssd1306_UpdateScreen>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000010 	.word	0x20000010
 80010bc:	08006354 	.word	0x08006354
 80010c0:	20000008 	.word	0x20000008
 80010c4:	08006360 	.word	0x08006360
 80010c8:	20000000 	.word	0x20000000
 80010cc:	0800636c 	.word	0x0800636c
 80010d0:	08006380 	.word	0x08006380

080010d4 <ssd1306_DisplayAnalogValue>:


void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
    static uint32_t last_arriba_time = 0; // keeps track of the last time "ARRIBA" was displayed
    uint8_t y = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	77fb      	strb	r3, [r7, #31]
    char stringDirection[10] = "";
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	809a      	strh	r2, [r3, #4]

    ssd1306_Fill(Black);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fdaa 	bl	8000c4c <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80010f8:	7ffb      	ldrb	r3, [r7, #31]
 80010fa:	4619      	mov	r1, r3
 80010fc:	2002      	movs	r0, #2
 80010fe:	f7ff fef3 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString("MENU", Font_11x18, White);
 8001102:	4a72      	ldr	r2, [pc, #456]	; (80012cc <ssd1306_DisplayAnalogValue+0x1f8>)
 8001104:	2301      	movs	r3, #1
 8001106:	ca06      	ldmia	r2, {r1, r2}
 8001108:	4871      	ldr	r0, [pc, #452]	; (80012d0 <ssd1306_DisplayAnalogValue+0x1fc>)
 800110a:	f7ff fec7 	bl	8000e9c <ssd1306_WriteString>
    //ssd1306_DrawRectangle(0,y, 128, 10, White);

    y += 20;
 800110e:	7ffb      	ldrb	r3, [r7, #31]
 8001110:	3314      	adds	r3, #20
 8001112:	77fb      	strb	r3, [r7, #31]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	4619      	mov	r1, r3
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff fee5 	bl	8000ee8 <ssd1306_SetCursor>
    if(indexMenu==0){
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d106      	bne.n	8001132 <ssd1306_DisplayAnalogValue+0x5e>
        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 8001124:	4a6b      	ldr	r2, [pc, #428]	; (80012d4 <ssd1306_DisplayAnalogValue+0x200>)
 8001126:	2300      	movs	r3, #0
 8001128:	ca06      	ldmia	r2, {r1, r2}
 800112a:	486b      	ldr	r0, [pc, #428]	; (80012d8 <ssd1306_DisplayAnalogValue+0x204>)
 800112c:	f7ff feb6 	bl	8000e9c <ssd1306_WriteString>
 8001130:	e005      	b.n	800113e <ssd1306_DisplayAnalogValue+0x6a>
    }else{
        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 8001132:	4a68      	ldr	r2, [pc, #416]	; (80012d4 <ssd1306_DisplayAnalogValue+0x200>)
 8001134:	2301      	movs	r3, #1
 8001136:	ca06      	ldmia	r2, {r1, r2}
 8001138:	4867      	ldr	r0, [pc, #412]	; (80012d8 <ssd1306_DisplayAnalogValue+0x204>)
 800113a:	f7ff feaf 	bl	8000e9c <ssd1306_WriteString>

    }
    y += 10;
 800113e:	7ffb      	ldrb	r3, [r7, #31]
 8001140:	330a      	adds	r3, #10
 8001142:	77fb      	strb	r3, [r7, #31]
    #endif

	#ifdef SSD1306_INCLUDE_FONT_7x10
	ssd1306_SetCursor(2, y);
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	4619      	mov	r1, r3
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fecd 	bl	8000ee8 <ssd1306_SetCursor>
    if(indexMenu==1){
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d106      	bne.n	8001162 <ssd1306_DisplayAnalogValue+0x8e>
        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 8001154:	4a5f      	ldr	r2, [pc, #380]	; (80012d4 <ssd1306_DisplayAnalogValue+0x200>)
 8001156:	2300      	movs	r3, #0
 8001158:	ca06      	ldmia	r2, {r1, r2}
 800115a:	4860      	ldr	r0, [pc, #384]	; (80012dc <ssd1306_DisplayAnalogValue+0x208>)
 800115c:	f7ff fe9e 	bl	8000e9c <ssd1306_WriteString>
 8001160:	e005      	b.n	800116e <ssd1306_DisplayAnalogValue+0x9a>
    }
    else{
        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 8001162:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <ssd1306_DisplayAnalogValue+0x200>)
 8001164:	2301      	movs	r3, #1
 8001166:	ca06      	ldmia	r2, {r1, r2}
 8001168:	485c      	ldr	r0, [pc, #368]	; (80012dc <ssd1306_DisplayAnalogValue+0x208>)
 800116a:	f7ff fe97 	bl	8000e9c <ssd1306_WriteString>

    }
	y += 10;
 800116e:	7ffb      	ldrb	r3, [r7, #31]
 8001170:	330a      	adds	r3, #10
 8001172:	77fb      	strb	r3, [r7, #31]

	#endif
	#ifdef SSD1306_INCLUDE_FONT_7x10
	ssd1306_SetCursor(2, y);
 8001174:	7ffb      	ldrb	r3, [r7, #31]
 8001176:	4619      	mov	r1, r3
 8001178:	2002      	movs	r0, #2
 800117a:	f7ff feb5 	bl	8000ee8 <ssd1306_SetCursor>
    if(indexMenu==2){
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d106      	bne.n	8001192 <ssd1306_DisplayAnalogValue+0xbe>
        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 8001184:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <ssd1306_DisplayAnalogValue+0x200>)
 8001186:	2300      	movs	r3, #0
 8001188:	ca06      	ldmia	r2, {r1, r2}
 800118a:	4855      	ldr	r0, [pc, #340]	; (80012e0 <ssd1306_DisplayAnalogValue+0x20c>)
 800118c:	f7ff fe86 	bl	8000e9c <ssd1306_WriteString>
 8001190:	e005      	b.n	800119e <ssd1306_DisplayAnalogValue+0xca>
    }
    else{
        ssd1306_WriteString("ENERGY", Font_7x10, White);
 8001192:	4a50      	ldr	r2, [pc, #320]	; (80012d4 <ssd1306_DisplayAnalogValue+0x200>)
 8001194:	2301      	movs	r3, #1
 8001196:	ca06      	ldmia	r2, {r1, r2}
 8001198:	4851      	ldr	r0, [pc, #324]	; (80012e0 <ssd1306_DisplayAnalogValue+0x20c>)
 800119a:	f7ff fe7f 	bl	8000e9c <ssd1306_WriteString>

    }
	y += 10;
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	330a      	adds	r3, #10
 80011a2:	77fb      	strb	r3, [r7, #31]
	#endif


    if(value == 4095){
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d127      	bne.n	80011fe <ssd1306_DisplayAnalogValue+0x12a>
        if(last_arriba_time == 0){
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <ssd1306_DisplayAnalogValue+0x210>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d105      	bne.n	80011c2 <ssd1306_DisplayAnalogValue+0xee>
            last_arriba_time = HAL_GetTick();
 80011b6:	f000 fc17 	bl	80019e8 <HAL_GetTick>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a49      	ldr	r2, [pc, #292]	; (80012e4 <ssd1306_DisplayAnalogValue+0x210>)
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e064      	b.n	800128c <ssd1306_DisplayAnalogValue+0x1b8>
        }
        else if(HAL_GetTick() - last_arriba_time > 300){
 80011c2:	f000 fc11 	bl	80019e8 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <ssd1306_DisplayAnalogValue+0x210>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011d2:	d95b      	bls.n	800128c <ssd1306_DisplayAnalogValue+0x1b8>
            strcpy(stringDirection, "ARRIBA");
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <ssd1306_DisplayAnalogValue+0x214>)
 80011da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011de:	6018      	str	r0, [r3, #0]
 80011e0:	3304      	adds	r3, #4
 80011e2:	8019      	strh	r1, [r3, #0]
 80011e4:	3302      	adds	r3, #2
 80011e6:	0c0a      	lsrs	r2, r1, #16
 80011e8:	701a      	strb	r2, [r3, #0]
            if(indexMenu>0){
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dd02      	ble.n	80011f6 <ssd1306_DisplayAnalogValue+0x122>
            	indexMenu--;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
            }
            last_arriba_time = 0;
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <ssd1306_DisplayAnalogValue+0x210>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e046      	b.n	800128c <ssd1306_DisplayAnalogValue+0x1b8>
        }
    }
    else{
        if(last_arriba_time != 0){
 80011fe:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <ssd1306_DisplayAnalogValue+0x210>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <ssd1306_DisplayAnalogValue+0x138>
            last_arriba_time = 0;
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <ssd1306_DisplayAnalogValue+0x210>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
        }

        if(value >= 0 && value <= 100){
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0e      	blt.n	8001230 <ssd1306_DisplayAnalogValue+0x15c>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2b64      	cmp	r3, #100	; 0x64
 8001216:	dc0b      	bgt.n	8001230 <ssd1306_DisplayAnalogValue+0x15c>
            strcpy(stringDirection, "SELECT");
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4a33      	ldr	r2, [pc, #204]	; (80012ec <ssd1306_DisplayAnalogValue+0x218>)
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	8019      	strh	r1, [r3, #0]
 8001228:	3302      	adds	r3, #2
 800122a:	0c0a      	lsrs	r2, r1, #16
 800122c:	701a      	strb	r2, [r3, #0]
 800122e:	e02d      	b.n	800128c <ssd1306_DisplayAnalogValue+0x1b8>
        }

        else if(value >= 2850 && value <= 2950){
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f640 3221 	movw	r2, #2849	; 0xb21
 8001236:	4293      	cmp	r3, r2
 8001238:	dd0c      	ble.n	8001254 <ssd1306_DisplayAnalogValue+0x180>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f640 3286 	movw	r2, #2950	; 0xb86
 8001240:	4293      	cmp	r3, r2
 8001242:	dc07      	bgt.n	8001254 <ssd1306_DisplayAnalogValue+0x180>
            strcpy(stringDirection, "DERECHA");
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4a29      	ldr	r2, [pc, #164]	; (80012f0 <ssd1306_DisplayAnalogValue+0x21c>)
 800124a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001252:	e01b      	b.n	800128c <ssd1306_DisplayAnalogValue+0x1b8>
        }
        else if(value >= 1850 && value <= 1950){
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f240 7239 	movw	r2, #1849	; 0x739
 800125a:	4293      	cmp	r3, r2
 800125c:	dd0b      	ble.n	8001276 <ssd1306_DisplayAnalogValue+0x1a2>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f240 729e 	movw	r2, #1950	; 0x79e
 8001264:	4293      	cmp	r3, r2
 8001266:	dc06      	bgt.n	8001276 <ssd1306_DisplayAnalogValue+0x1a2>
            strcpy(stringDirection, "IZQUIERDA");
 8001268:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <ssd1306_DisplayAnalogValue+0x220>)
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001270:	c303      	stmia	r3!, {r0, r1}
 8001272:	801a      	strh	r2, [r3, #0]
 8001274:	e00a      	b.n	800128c <ssd1306_DisplayAnalogValue+0x1b8>
        }
        else {
            strcpy(stringDirection, "NORMAL");
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <ssd1306_DisplayAnalogValue+0x224>)
 800127c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001280:	6018      	str	r0, [r3, #0]
 8001282:	3304      	adds	r3, #4
 8001284:	8019      	strh	r1, [r3, #0]
 8001286:	3302      	adds	r3, #2
 8001288:	0c0a      	lsrs	r2, r1, #16
 800128a:	701a      	strb	r2, [r3, #0]
        }
    }

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(55, y);
 800128c:	7ffb      	ldrb	r3, [r7, #31]
 800128e:	4619      	mov	r1, r3
 8001290:	2037      	movs	r0, #55	; 0x37
 8001292:	f7ff fe29 	bl	8000ee8 <ssd1306_SetCursor>
    char index_str[3]; // assuming index is a single-digit number
    sprintf(index_str, "%d", indexMenu); // convert index to a string
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	4917      	ldr	r1, [pc, #92]	; (80012fc <ssd1306_DisplayAnalogValue+0x228>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fbec 	bl	8005a7c <siprintf>
    ssd1306_SetCursor(100, 20); // set the cursor position
 80012a4:	2114      	movs	r1, #20
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f7ff fe1e 	bl	8000ee8 <ssd1306_SetCursor>
    ssd1306_WriteString(index_str, Font_7x10, White); // write the string to the display    y += 10;
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <ssd1306_DisplayAnalogValue+0x200>)
 80012ae:	f107 0010 	add.w	r0, r7, #16
 80012b2:	2301      	movs	r3, #1
 80012b4:	ca06      	ldmia	r2, {r1, r2}
 80012b6:	f7ff fdf1 	bl	8000e9c <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 80012ba:	f7ff fceb 	bl	8000c94 <ssd1306_UpdateScreen>
    HAL_Delay(50);
 80012be:	2032      	movs	r0, #50	; 0x32
 80012c0:	f000 fb9e 	bl	8001a00 <HAL_Delay>
}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000010 	.word	0x20000010
 80012d0:	0800638c 	.word	0x0800638c
 80012d4:	20000008 	.word	0x20000008
 80012d8:	08006394 	.word	0x08006394
 80012dc:	080063a0 	.word	0x080063a0
 80012e0:	080063ac 	.word	0x080063ac
 80012e4:	20000d14 	.word	0x20000d14
 80012e8:	080063b4 	.word	0x080063b4
 80012ec:	080063bc 	.word	0x080063bc
 80012f0:	080063c4 	.word	0x080063c4
 80012f4:	080063cc 	.word	0x080063cc
 80012f8:	080063d8 	.word	0x080063d8
 80012fc:	080063e0 	.word	0x080063e0

08001300 <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fca0 	bl	8000c4c <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2348      	movs	r3, #72	; 0x48
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 8001318:	2100      	movs	r1, #0
 800131a:	2020      	movs	r0, #32
 800131c:	f7ff fdfc 	bl	8000f18 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 8001320:	f7ff fcb8 	bl	8000c94 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8001324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001328:	f000 fb6a 	bl	8001a00 <HAL_Delay>

}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	08007edc 	.word	0x08007edc

08001338 <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 800133c:	f7ff fc1c 	bl	8000b78 <ssd1306_Init>
    ssd1306_TestFonts1();
 8001340:	f7ff fe76 	bl	8001030 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8001344:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001348:	f000 fb5a 	bl	8001a00 <HAL_Delay>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001354:	f7ff fc10 	bl	8000b78 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 8001358:	f7ff ffd2 	bl	8001300 <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 800135c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001360:	f000 fb4e 	bl	8001a00 <HAL_Delay>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x44>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_MspInit+0x44>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_MspInit+0x44>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_MspInit+0x44>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_MspInit+0x44>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_MspInit+0x44>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_ADC_MspInit+0x74>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d123      	bne.n	800141a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_ADC_MspInit+0x78>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <HAL_ADC_MspInit+0x78>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_ADC_MspInit+0x78>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_ADC_MspInit+0x78>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_ADC_MspInit+0x78>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_ADC_MspInit+0x78>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001402:	2301      	movs	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2303      	movs	r3, #3
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <HAL_ADC_MspInit+0x7c>)
 8001416:	f001 fb51 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40012000 	.word	0x40012000
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000

08001430 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_ETH_MspInit+0x158>)
 800144e:	4293      	cmp	r3, r2
 8001450:	f040 8096 	bne.w	8001580 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001454:	4b4d      	ldr	r3, [pc, #308]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800145a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a46      	ldr	r2, [pc, #280]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a40      	ldr	r2, [pc, #256]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800148a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HAL_ETH_MspInit+0x15c>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149c:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_ETH_MspInit+0x15c>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b38      	ldr	r3, [pc, #224]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a34      	ldr	r2, [pc, #208]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	4a2e      	ldr	r2, [pc, #184]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	6313      	str	r3, [r2, #48]	; 0x30
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_ETH_MspInit+0x15c>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014fc:	2332      	movs	r3, #50	; 0x32
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150c:	230b      	movs	r3, #11
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	481e      	ldr	r0, [pc, #120]	; (8001590 <HAL_ETH_MspInit+0x160>)
 8001518:	f001 fad0 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800151c:	2386      	movs	r3, #134	; 0x86
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152c:	230b      	movs	r3, #11
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <HAL_ETH_MspInit+0x164>)
 8001538:	f001 fac0 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800153c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800154e:	230b      	movs	r3, #11
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	480f      	ldr	r0, [pc, #60]	; (8001598 <HAL_ETH_MspInit+0x168>)
 800155a:	f001 faaf 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800155e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001570:	230b      	movs	r3, #11
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <HAL_ETH_MspInit+0x16c>)
 800157c:	f001 fa9e 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3738      	adds	r7, #56	; 0x38
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40028000 	.word	0x40028000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020800 	.word	0x40020800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400
 800159c:	40021800 	.word	0x40021800

080015a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0aa      	sub	sp, #168	; 0xa8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2284      	movs	r2, #132	; 0x84
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fa53 	bl	8005a6c <memset>
  if(hi2c->Instance==I2C2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_I2C_MspInit+0xb0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d13b      	bne.n	8001648 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fed6 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015ea:	f7ff fa87 	bl	8000afc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_I2C_MspInit+0xb4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_I2C_MspInit+0xb4>)
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_I2C_MspInit+0xb4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800161e:	2304      	movs	r3, #4
 8001620:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001624:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001628:	4619      	mov	r1, r3
 800162a:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_I2C_MspInit+0xb8>)
 800162c:	f001 fa46 	bl	8002abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_I2C_MspInit+0xb4>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_I2C_MspInit+0xb4>)
 8001636:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_I2C_MspInit+0xb4>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	37a8      	adds	r7, #168	; 0xa8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40005800 	.word	0x40005800
 8001654:	40023800 	.word	0x40023800
 8001658:	40021400 	.word	0x40021400

0800165c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0aa      	sub	sp, #168	; 0xa8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2284      	movs	r2, #132	; 0x84
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f004 f9f5 	bl	8005a6c <memset>
  if(huart->Instance==USART3)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_UART_MspInit+0xb4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d13c      	bne.n	8001706 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800168c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001690:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001692:	2300      	movs	r3, #0
 8001694:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4618      	mov	r0, r3
 800169c:	f002 fe78 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016a6:	f7ff fa29 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_UART_MspInit+0xb8>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_UART_MspInit+0xb8>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_UART_MspInit+0xb8>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_UART_MspInit+0xb8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_UART_MspInit+0xb8>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_UART_MspInit+0xb8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016f4:	2307      	movs	r3, #7
 80016f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <HAL_UART_MspInit+0xbc>)
 8001702:	f001 f9db 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	37a8      	adds	r7, #168	; 0xa8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40004800 	.word	0x40004800
 8001714:	40023800 	.word	0x40023800
 8001718:	40020c00 	.word	0x40020c00

0800171c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0ac      	sub	sp, #176	; 0xb0
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	2284      	movs	r2, #132	; 0x84
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f004 f995 	bl	8005a6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800174a:	d159      	bne.n	8001800 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800174c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001750:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fe17 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001768:	f7ff f9c8 	bl	8000afc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_PCD_MspInit+0xec>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	4a25      	ldr	r2, [pc, #148]	; (8001808 <HAL_PCD_MspInit+0xec>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6313      	str	r3, [r2, #48]	; 0x30
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_PCD_MspInit+0xec>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001784:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800179e:	230a      	movs	r3, #10
 80017a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a8:	4619      	mov	r1, r3
 80017aa:	4818      	ldr	r0, [pc, #96]	; (800180c <HAL_PCD_MspInit+0xf0>)
 80017ac:	f001 f986 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017c8:	4619      	mov	r1, r3
 80017ca:	4810      	ldr	r0, [pc, #64]	; (800180c <HAL_PCD_MspInit+0xf0>)
 80017cc:	f001 f976 	bl	8002abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_PCD_MspInit+0xec>)
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <HAL_PCD_MspInit+0xec>)
 80017d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017da:	6353      	str	r3, [r2, #52]	; 0x34
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_PCD_MspInit+0xec>)
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_PCD_MspInit+0xec>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_PCD_MspInit+0xec>)
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f2:	6453      	str	r3, [r2, #68]	; 0x44
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <HAL_PCD_MspInit+0xec>)
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	37b0      	adds	r7, #176	; 0xb0
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 f8b0 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f004 f8b2 	bl	80059fc <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20050000 	.word	0x20050000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	20000d18 	.word	0x20000d18
 80018cc:	20000d30 	.word	0x20000d30

080018d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <SystemInit+0x20>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <SystemInit+0x20>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800192c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018fa:	490e      	ldr	r1, [pc, #56]	; (8001934 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001910:	4c0b      	ldr	r4, [pc, #44]	; (8001940 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800191e:	f7ff ffd7 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f004 f871 	bl	8005a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7fe fe45 	bl	80005b4 <main>
  bx  lr    
 800192a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800192c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001938:	08008178 	.word	0x08008178
  ldr r2, =_sbss
 800193c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001940:	20000d30 	.word	0x20000d30

08001944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC_IRQHandler>

08001946 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194a:	2003      	movs	r0, #3
 800194c:	f000 fd5c 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001950:	2000      	movs	r0, #0
 8001952:	f000 f805 	bl	8001960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001956:	f7ff fd07 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x54>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x58>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fd69 	bl	8002456 <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 fd3f 	bl	800241e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_InitTick+0x5c>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000018 	.word	0x20000018
 80019b8:	20000020 	.word	0x20000020
 80019bc:	2000001c 	.word	0x2000001c

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000020 	.word	0x20000020
 80019e4:	20000d1c 	.word	0x20000d1c

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000d1c 	.word	0x20000d1c

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000020 	.word	0x20000020

08001a48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e031      	b.n	8001ac2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fca2 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_ADC_Init+0x84>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	f043 0202 	orr.w	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fb0a 	bl	80020b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab2:	e001      	b.n	8001ab8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	ffffeefd 	.word	0xffffeefd

08001ad0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_Start+0x1a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e0ad      	b.n	8001c46 <HAL_ADC_Start+0x176>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d018      	beq.n	8001b32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b10:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <HAL_ADC_Start+0x184>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a50      	ldr	r2, [pc, #320]	; (8001c58 <HAL_ADC_Start+0x188>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0c9a      	lsrs	r2, r3, #18
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d175      	bne.n	8001c2c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b44:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <HAL_ADC_Start+0x18c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7a:	d106      	bne.n	8001b8a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f023 0206 	bic.w	r2, r3, #6
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_ADC_Start+0x190>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10f      	bne.n	8001bce <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d143      	bne.n	8001c44 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	e03a      	b.n	8001c44 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <HAL_ADC_Start+0x194>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d10e      	bne.n	8001bf6 <HAL_ADC_Start+0x126>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d107      	bne.n	8001bf6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bf4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_ADC_Start+0x190>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d120      	bne.n	8001c44 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_ADC_Start+0x198>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d11b      	bne.n	8001c44 <HAL_ADC_Start+0x174>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d114      	bne.n	8001c44 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	e00b      	b.n	8001c44 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f043 0210 	orr.w	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000018 	.word	0x20000018
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	fffff8fe 	.word	0xfffff8fe
 8001c60:	40012300 	.word	0x40012300
 8001c64:	40012000 	.word	0x40012000
 8001c68:	40012200 	.word	0x40012200

08001c6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Stop+0x16>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e01f      	b.n	8001cc2 <HAL_ADC_Stop+0x56>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_ADC_Stop+0x64>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	ffffeefe 	.word	0xffffeefe

08001cd4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf0:	d113      	bne.n	8001d1a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d00:	d10b      	bne.n	8001d1a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f043 0220 	orr.w	r2, r3, #32
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e063      	b.n	8001de2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d1a:	f7ff fe65 	bl	80019e8 <HAL_GetTick>
 8001d1e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d20:	e021      	b.n	8001d66 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d01d      	beq.n	8001d66 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_ADC_PollForConversion+0x6c>
 8001d30:	f7ff fe5a 	bl	80019e8 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d212      	bcs.n	8001d66 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d00b      	beq.n	8001d66 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f043 0204 	orr.w	r2, r3, #4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e03d      	b.n	8001de2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d1d6      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0212 	mvn.w	r2, #18
 8001d7c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d123      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11f      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d111      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x1c>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e136      	b.n	800208e <HAL_ADC_ConfigChannel+0x28a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d93a      	bls.n	8001ea6 <HAL_ADC_ConfigChannel+0xa2>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e38:	d035      	beq.n	8001ea6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68d9      	ldr	r1, [r3, #12]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b1e      	subs	r3, #30
 8001e50:	2207      	movs	r2, #7
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a8d      	ldr	r2, [pc, #564]	; (800209c <HAL_ADC_ConfigChannel+0x298>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10a      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68d9      	ldr	r1, [r3, #12]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	061a      	lsls	r2, r3, #24
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7e:	e035      	b.n	8001eec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68d9      	ldr	r1, [r3, #12]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4403      	add	r3, r0
 8001e98:	3b1e      	subs	r3, #30
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea4:	e022      	b.n	8001eec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6919      	ldr	r1, [r3, #16]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	2207      	movs	r2, #7
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43da      	mvns	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6919      	ldr	r1, [r3, #16]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	4603      	mov	r3, r0
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4403      	add	r3, r0
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d824      	bhi.n	8001f3e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b05      	subs	r3, #5
 8001f06:	221f      	movs	r2, #31
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43da      	mvns	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	400a      	ands	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b05      	subs	r3, #5
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3c:	e04c      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d824      	bhi.n	8001f90 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b23      	subs	r3, #35	; 0x23
 8001f58:	221f      	movs	r2, #31
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	400a      	ands	r2, r1
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b23      	subs	r3, #35	; 0x23
 8001f82:	fa00 f203 	lsl.w	r2, r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8e:	e023      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b41      	subs	r3, #65	; 0x41
 8001fa2:	221f      	movs	r2, #31
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	400a      	ands	r2, r1
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b41      	subs	r3, #65	; 0x41
 8001fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <HAL_ADC_ConfigChannel+0x29c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x1f4>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fea:	d105      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ff6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <HAL_ADC_ConfigChannel+0x29c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10f      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x21e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b12      	cmp	r3, #18
 8002008:	d10b      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002010:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002014:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800201c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002020:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_ADC_ConfigChannel+0x29c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d12b      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x280>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_ADC_ConfigChannel+0x298>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d003      	beq.n	800203e <HAL_ADC_ConfigChannel+0x23a>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b11      	cmp	r3, #17
 800203c:	d122      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002044:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002048:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002050:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002054:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_ADC_ConfigChannel+0x298>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d111      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_ADC_ConfigChannel+0x2a8>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0c9a      	lsrs	r2, r3, #18
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002076:	e002      	b.n	800207e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3b01      	subs	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f9      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	10000012 	.word	0x10000012
 80020a0:	40012000 	.word	0x40012000
 80020a4:	40012300 	.word	0x40012300
 80020a8:	20000018 	.word	0x20000018
 80020ac:	431bde83 	.word	0x431bde83

080020b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020b8:	4b78      	ldr	r3, [pc, #480]	; (800229c <ADC_Init+0x1ec>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a77      	ldr	r2, [pc, #476]	; (800229c <ADC_Init+0x1ec>)
 80020be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020c4:	4b75      	ldr	r3, [pc, #468]	; (800229c <ADC_Init+0x1ec>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4973      	ldr	r1, [pc, #460]	; (800229c <ADC_Init+0x1ec>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	021a      	lsls	r2, r3, #8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6899      	ldr	r1, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <ADC_Init+0x1f0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002152:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6899      	ldr	r1, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e00f      	b.n	80021aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0202 	bic.w	r2, r2, #2
 80021b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6899      	ldr	r1, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	005a      	lsls	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01b      	beq.n	8002210 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	3b01      	subs	r3, #1
 8002204:	035a      	lsls	r2, r3, #13
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	e007      	b.n	8002220 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	3b01      	subs	r3, #1
 800223c:	051a      	lsls	r2, r3, #20
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002262:	025a      	lsls	r2, r3, #9
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6899      	ldr	r1, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	029a      	lsls	r2, r3, #10
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40012300 	.word	0x40012300
 80022a0:	0f000001 	.word	0x0f000001

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <__NVIC_SetPriorityGrouping+0x40>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <__NVIC_SetPriorityGrouping+0x40>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00
 80022e8:	05fa0000 	.word	0x05fa0000

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d4:	d301      	bcc.n	80023da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <SysTick_Config+0x40>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e2:	210f      	movs	r1, #15
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f7ff ff8e 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <SysTick_Config+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <SysTick_Config+0x40>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff47 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff5c 	bl	80022ec <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ff8e 	bl	800235c <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5d 	bl	8002308 <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffb0 	bl	80023c4 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06a      	b.n	8002558 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2223      	movs	r2, #35	; 0x23
 8002490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7fe ffcb 	bl	8001430 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_ETH_Init+0xf0>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a30      	ldr	r2, [pc, #192]	; (8002560 <HAL_ETH_Init+0xf0>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_ETH_Init+0xf0>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024b2:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <HAL_ETH_Init+0xf4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <HAL_ETH_Init+0xf4>)
 80024b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_ETH_Init+0xf4>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	4927      	ldr	r1, [pc, #156]	; (8002564 <HAL_ETH_Init+0xf4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_ETH_Init+0xf4>)
 80024ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e8:	f7ff fa7e 	bl	80019e8 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024ee:	e011      	b.n	8002514 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024f0:	f7ff fa7a 	bl	80019e8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024fe:	d909      	bls.n	8002514 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2204      	movs	r2, #4
 8002504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	22e0      	movs	r2, #224	; 0xe0
 800250c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e021      	b.n	8002558 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e4      	bne.n	80024f0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f958 	bl	80027dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f9ff 	bl	8002930 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa55 	bl	80029e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	461a      	mov	r2, r3
 800253e:	2100      	movs	r1, #0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f9bd 	bl	80028c0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2210      	movs	r2, #16
 8002552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	40013800 	.word	0x40013800

08002568 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4b51      	ldr	r3, [pc, #324]	; (80026c4 <ETH_SetMACConfig+0x15c>)
 800257e:	4013      	ands	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7c1b      	ldrb	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <ETH_SetMACConfig+0x28>
 800258a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800258e:	e000      	b.n	8002592 <ETH_SetMACConfig+0x2a>
 8002590:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7c5b      	ldrb	r3, [r3, #17]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <ETH_SetMACConfig+0x38>
 800259a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800259e:	e000      	b.n	80025a2 <ETH_SetMACConfig+0x3a>
 80025a0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	7fdb      	ldrb	r3, [r3, #31]
 80025ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	7f92      	ldrb	r2, [r2, #30]
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d102      	bne.n	80025c6 <ETH_SetMACConfig+0x5e>
 80025c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c4:	e000      	b.n	80025c8 <ETH_SetMACConfig+0x60>
 80025c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80025c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	7f1b      	ldrb	r3, [r3, #28]
 80025ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	791b      	ldrb	r3, [r3, #4]
 80025dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d102      	bne.n	80025f0 <ETH_SetMACConfig+0x88>
 80025ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ee:	e000      	b.n	80025f2 <ETH_SetMACConfig+0x8a>
 80025f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	7bdb      	ldrb	r3, [r3, #15]
 80025f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002600:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002608:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800260a:	4313      	orrs	r3, r2
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002622:	2001      	movs	r0, #1
 8002624:	f7ff f9ec 	bl	8001a00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800263e:	4013      	ands	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002646:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800264e:	2a00      	cmp	r2, #0
 8002650:	d101      	bne.n	8002656 <ETH_SetMACConfig+0xee>
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	e000      	b.n	8002658 <ETH_SetMACConfig+0xf0>
 8002656:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002658:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800265e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002666:	2a01      	cmp	r2, #1
 8002668:	d101      	bne.n	800266e <ETH_SetMACConfig+0x106>
 800266a:	2208      	movs	r2, #8
 800266c:	e000      	b.n	8002670 <ETH_SetMACConfig+0x108>
 800266e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002670:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002678:	2a01      	cmp	r2, #1
 800267a:	d101      	bne.n	8002680 <ETH_SetMACConfig+0x118>
 800267c:	2204      	movs	r2, #4
 800267e:	e000      	b.n	8002682 <ETH_SetMACConfig+0x11a>
 8002680:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002682:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800268a:	2a01      	cmp	r2, #1
 800268c:	d101      	bne.n	8002692 <ETH_SetMACConfig+0x12a>
 800268e:	2202      	movs	r2, #2
 8002690:	e000      	b.n	8002694 <ETH_SetMACConfig+0x12c>
 8002692:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002694:	4313      	orrs	r3, r2
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7ff f9a7 	bl	8001a00 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	ff20810f 	.word	0xff20810f

080026c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <ETH_SetDMAConfig+0x110>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	7b1b      	ldrb	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <ETH_SetDMAConfig+0x2c>
 80026ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026f2:	e000      	b.n	80026f6 <ETH_SetDMAConfig+0x2e>
 80026f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	7b5b      	ldrb	r3, [r3, #13]
 80026fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	7f52      	ldrb	r2, [r2, #29]
 8002702:	2a00      	cmp	r2, #0
 8002704:	d102      	bne.n	800270c <ETH_SetDMAConfig+0x44>
 8002706:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800270a:	e000      	b.n	800270e <ETH_SetDMAConfig+0x46>
 800270c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800270e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7b9b      	ldrb	r3, [r3, #14]
 8002714:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002716:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800271c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	7f1b      	ldrb	r3, [r3, #28]
 8002722:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002724:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	7f9b      	ldrb	r3, [r3, #30]
 800272a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800272c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002732:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800273a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800273c:	4313      	orrs	r3, r2
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800274c:	461a      	mov	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800275e:	2001      	movs	r0, #1
 8002760:	f7ff f94e 	bl	8001a00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276c:	461a      	mov	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	791b      	ldrb	r3, [r3, #4]
 8002776:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800277c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002782:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002788:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002790:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002792:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800279a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027bc:	2001      	movs	r0, #1
 80027be:	f7ff f91f 	bl	8001a00 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	f8de3f23 	.word	0xf8de3f23

080027dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0a6      	sub	sp, #152	; 0x98
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80027f0:	2300      	movs	r3, #0
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002818:	2300      	movs	r3, #0
 800281a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002822:	2300      	movs	r3, #0
 8002824:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800283e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002842:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002848:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fe86 	bl	8002568 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800285c:	2301      	movs	r3, #1
 800285e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002860:	2301      	movs	r3, #1
 8002862:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800287e:	2300      	movs	r3, #0
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002888:	2301      	movs	r3, #1
 800288a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800288c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002890:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002896:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800289c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028ac:	f107 0308 	add.w	r3, r7, #8
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff08 	bl	80026c8 <ETH_SetDMAConfig>
}
 80028b8:	bf00      	nop
 80028ba:	3798      	adds	r7, #152	; 0x98
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3305      	adds	r3, #5
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	3204      	adds	r2, #4
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <ETH_MACAddressConfig+0x68>)
 80028e2:	4413      	add	r3, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3303      	adds	r3, #3
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	061a      	lsls	r2, r3, #24
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3302      	adds	r3, #2
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3301      	adds	r3, #1
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	4313      	orrs	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <ETH_MACAddressConfig+0x6c>)
 8002912:	4413      	add	r3, r2
 8002914:	461a      	mov	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	6013      	str	r3, [r2, #0]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40028040 	.word	0x40028040
 800292c:	40028044 	.word	0x40028044

08002930 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e03e      	b.n	80029bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68d9      	ldr	r1, [r3, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	3206      	adds	r2, #6
 8002970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d80c      	bhi.n	80029a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68d9      	ldr	r1, [r3, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	e004      	b.n	80029aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d9bd      	bls.n	800293e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d4:	611a      	str	r2, [r3, #16]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	e046      	b.n	8002a7e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6919      	ldr	r1, [r3, #16]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a2c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a34:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	3212      	adds	r2, #18
 8002a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d80c      	bhi.n	8002a6e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	e004      	b.n	8002a78 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d9b5      	bls.n	80029f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aae:	60da      	str	r2, [r3, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e175      	b.n	8002dc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8164 	bne.w	8002dc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d005      	beq.n	8002b12 <HAL_GPIO_Init+0x56>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d130      	bne.n	8002b74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0201 	and.w	r2, r3, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d017      	beq.n	8002bb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d123      	bne.n	8002c04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	08da      	lsrs	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3208      	adds	r2, #8
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80be 	beq.w	8002dc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	4b66      	ldr	r3, [pc, #408]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a65      	ldr	r2, [pc, #404]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c5e:	4a61      	ldr	r2, [pc, #388]	; (8002de4 <HAL_GPIO_Init+0x328>)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_GPIO_Init+0x32c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d037      	beq.n	8002cfa <HAL_GPIO_Init+0x23e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_GPIO_Init+0x330>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_GPIO_Init+0x23a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a56      	ldr	r2, [pc, #344]	; (8002df0 <HAL_GPIO_Init+0x334>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <HAL_GPIO_Init+0x236>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a55      	ldr	r2, [pc, #340]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x232>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a54      	ldr	r2, [pc, #336]	; (8002df8 <HAL_GPIO_Init+0x33c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x22e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a53      	ldr	r2, [pc, #332]	; (8002dfc <HAL_GPIO_Init+0x340>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x22a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_GPIO_Init+0x344>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x226>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a51      	ldr	r2, [pc, #324]	; (8002e04 <HAL_GPIO_Init+0x348>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x222>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a50      	ldr	r2, [pc, #320]	; (8002e08 <HAL_GPIO_Init+0x34c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x21e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4f      	ldr	r2, [pc, #316]	; (8002e0c <HAL_GPIO_Init+0x350>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x21a>
 8002cd2:	2309      	movs	r3, #9
 8002cd4:	e012      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cd6:	230a      	movs	r3, #10
 8002cd8:	e010      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e00e      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e00c      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	e00a      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002ce6:	2305      	movs	r3, #5
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d0c:	4935      	ldr	r1, [pc, #212]	; (8002de4 <HAL_GPIO_Init+0x328>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a29      	ldr	r2, [pc, #164]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d92:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbc:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f ae86 	bls.w	8002adc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020c00 	.word	0x40020c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40021400 	.word	0x40021400
 8002e00:	40021800 	.word	0x40021800
 8002e04:	40021c00 	.word	0x40021c00
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40022400 	.word	0x40022400
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e30:	e003      	b.n	8002e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fe fb96 	bl	80015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	e006      	b.n	8002ed0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ece:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d104      	bne.n	8002ee2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ee0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_I2C_Init+0x11c>)
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69d9      	ldr	r1, [r3, #28]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	02008000 	.word	0x02008000

08002f68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	4608      	mov	r0, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	461a      	mov	r2, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	817b      	strh	r3, [r7, #10]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	813b      	strh	r3, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	f040 80f9 	bne.w	8003182 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_I2C_Mem_Write+0x34>
 8002f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0ed      	b.n	8003184 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Mem_Write+0x4e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0e6      	b.n	8003184 <HAL_I2C_Mem_Write+0x21c>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fd13 	bl	80019e8 <HAL_GetTick>
 8002fc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2319      	movs	r3, #25
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f955 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d1      	b.n	8003184 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2221      	movs	r2, #33	; 0x21
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003008:	88f8      	ldrh	r0, [r7, #6]
 800300a:	893a      	ldrh	r2, [r7, #8]
 800300c:	8979      	ldrh	r1, [r7, #10]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4603      	mov	r3, r0
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f8b9 	bl	8003190 <I2C_RequestMemoryWrite>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0a9      	b.n	8003184 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	d90e      	bls.n	8003058 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	22ff      	movs	r2, #255	; 0xff
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	b2da      	uxtb	r2, r3
 8003046:	8979      	ldrh	r1, [r7, #10]
 8003048:	2300      	movs	r3, #0
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fab1 	bl	80035b8 <I2C_TransferConfig>
 8003056:	e00f      	b.n	8003078 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	b2da      	uxtb	r2, r3
 8003068:	8979      	ldrh	r1, [r7, #10]
 800306a:	2300      	movs	r3, #0
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 faa0 	bl	80035b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f93f 	bl	8003300 <I2C_WaitOnTXISFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e07b      	b.n	8003184 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d034      	beq.n	8003130 <HAL_I2C_Mem_Write+0x1c8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d130      	bne.n	8003130 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f8d1 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04d      	b.n	8003184 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2bff      	cmp	r3, #255	; 0xff
 80030f0:	d90e      	bls.n	8003110 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	8979      	ldrh	r1, [r7, #10]
 8003100:	2300      	movs	r3, #0
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fa55 	bl	80035b8 <I2C_TransferConfig>
 800310e:	e00f      	b.n	8003130 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311e:	b2da      	uxtb	r2, r3
 8003120:	8979      	ldrh	r1, [r7, #10]
 8003122:	2300      	movs	r3, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa44 	bl	80035b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d19e      	bne.n	8003078 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f91e 	bl	8003380 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e01a      	b.n	8003184 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2220      	movs	r2, #32
 8003154:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_I2C_Mem_Write+0x224>)
 8003162:	400b      	ands	r3, r1
 8003164:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	fe00e800 	.word	0xfe00e800

08003190 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	4b20      	ldr	r3, [pc, #128]	; (8003234 <I2C_RequestMemoryWrite+0xa4>)
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f9fd 	bl	80035b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f89c 	bl	8003300 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e02c      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d8:	893b      	ldrh	r3, [r7, #8]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
 80031e2:	e015      	b.n	8003210 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	69b9      	ldr	r1, [r7, #24]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f882 	bl	8003300 <I2C_WaitOnTXISFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e012      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003206:	893b      	ldrh	r3, [r7, #8]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2200      	movs	r2, #0
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f830 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	80002000 	.word	0x80002000

08003238 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d103      	bne.n	8003256 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d007      	beq.n	8003274 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	619a      	str	r2, [r3, #24]
  }
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003290:	e022      	b.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d01e      	beq.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fe fba5 	bl	80019e8 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d113      	bne.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e00f      	b.n	80032f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d0cd      	beq.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800330c:	e02c      	b.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f870 	bl	80033f8 <I2C_IsErrorOccurred>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e02a      	b.n	8003378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d01e      	beq.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fb5d 	bl	80019e8 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d113      	bne.n	8003368 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d1cb      	bne.n	800330e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338c:	e028      	b.n	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f830 	bl	80033f8 <I2C_IsErrorOccurred>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e026      	b.n	80033f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fe fb21 	bl	80019e8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d1cf      	bne.n	800338e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d068      	beq.n	80034f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2210      	movs	r2, #16
 800342a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800342c:	e049      	b.n	80034c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d045      	beq.n	80034c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe fad7 	bl	80019e8 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_IsErrorOccurred+0x54>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d13a      	bne.n	80034c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003456:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800345e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346e:	d121      	bne.n	80034b4 <I2C_IsErrorOccurred+0xbc>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003476:	d01d      	beq.n	80034b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	2b20      	cmp	r3, #32
 800347c:	d01a      	beq.n	80034b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800348c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800348e:	f7fe faab 	bl	80019e8 <HAL_GetTick>
 8003492:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003494:	e00e      	b.n	80034b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003496:	f7fe faa7 	bl	80019e8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b19      	cmp	r3, #25
 80034a2:	d907      	bls.n	80034b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f043 0320 	orr.w	r3, r3, #32
 80034aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80034b2:	e006      	b.n	80034c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d1e9      	bne.n	8003496 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d003      	beq.n	80034d8 <I2C_IsErrorOccurred+0xe0>
 80034d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0aa      	beq.n	800342e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d103      	bne.n	80034e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2220      	movs	r2, #32
 80034e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f043 0308 	orr.w	r3, r3, #8
 8003530:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800353a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f043 0302 	orr.w	r3, r3, #2
 8003552:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01c      	beq.n	80035a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff fe63 	bl	8003238 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <I2C_IsErrorOccurred+0x1bc>)
 800357e:	400b      	ands	r3, r1
 8003580:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80035a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	fe00e800 	.word	0xfe00e800

080035b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	4613      	mov	r3, r2
 80035c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ca:	897b      	ldrh	r3, [r7, #10]
 80035cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035d0:	7a7b      	ldrb	r3, [r7, #9]
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	0d5b      	lsrs	r3, r3, #21
 80035f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <I2C_TransferConfig+0x60>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	43db      	mvns	r3, r3
 80035fc:	ea02 0103 	and.w	r1, r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	03ff63ff 	.word	0x03ff63ff

0800361c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b20      	cmp	r3, #32
 8003630:	d138      	bne.n	80036a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800363c:	2302      	movs	r3, #2
 800363e:	e032      	b.n	80036a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800366e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d139      	bne.n	800373c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e033      	b.n	800373e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2224      	movs	r2, #36	; 0x24
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800374a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374c:	b08f      	sub	sp, #60	; 0x3c
 800374e:	af0a      	add	r7, sp, #40	; 0x28
 8003750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e116      	b.n	800398a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd ffd0 	bl	800171c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2203      	movs	r2, #3
 8003780:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f001 fe92 	bl	80054c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	687e      	ldr	r6, [r7, #4]
 80037a8:	466d      	mov	r5, sp
 80037aa:	f106 0410 	add.w	r4, r6, #16
 80037ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80037be:	1d33      	adds	r3, r6, #4
 80037c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	f001 fe26 	bl	8005414 <USB_CoreInit>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0d7      	b.n	800398a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 fe80 	bl	80054e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e04a      	b.n	8003882 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	333d      	adds	r3, #61	; 0x3d
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	333c      	adds	r3, #60	; 0x3c
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	b298      	uxth	r0, r3
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3344      	adds	r3, #68	; 0x44
 8003828:	4602      	mov	r2, r0
 800382a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3340      	adds	r3, #64	; 0x40
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3348      	adds	r3, #72	; 0x48
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	334c      	adds	r3, #76	; 0x4c
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3354      	adds	r3, #84	; 0x54
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	3301      	adds	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	d3af      	bcc.n	80037ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e044      	b.n	800391c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	3301      	adds	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d3b5      	bcc.n	8003892 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	687e      	ldr	r6, [r7, #4]
 800392e:	466d      	mov	r5, sp
 8003930:	f106 0410 	add.w	r4, r6, #16
 8003934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003940:	e885 0003 	stmia.w	r5, {r0, r1}
 8003944:	1d33      	adds	r3, r6, #4
 8003946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003948:	6838      	ldr	r0, [r7, #0]
 800394a:	f001 fe19 	bl	8005580 <USB_DevInit>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e014      	b.n	800398a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	2b01      	cmp	r3, #1
 8003976:	d102      	bne.n	800397e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f80b 	bl	8003994 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f001 ffd7 	bl	8005936 <USB_DevDisconnect>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003994 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	10000003 	.word	0x10000003

080039dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40007000 	.word	0x40007000

080039fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e291      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8087 	beq.w	8003b2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a20:	4b96      	ldr	r3, [pc, #600]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d00c      	beq.n	8003a46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2c:	4b93      	ldr	r3, [pc, #588]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d112      	bne.n	8003a5e <HAL_RCC_OscConfig+0x62>
 8003a38:	4b90      	ldr	r3, [pc, #576]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a44:	d10b      	bne.n	8003a5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a46:	4b8d      	ldr	r3, [pc, #564]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d06c      	beq.n	8003b2c <HAL_RCC_OscConfig+0x130>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d168      	bne.n	8003b2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e26b      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x7a>
 8003a68:	4b84      	ldr	r3, [pc, #528]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a83      	ldr	r2, [pc, #524]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	e02e      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x9c>
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a7e      	ldr	r2, [pc, #504]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7b      	ldr	r2, [pc, #492]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e01d      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0xc0>
 8003aa2:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a75      	ldr	r2, [pc, #468]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a72      	ldr	r2, [pc, #456]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0xd8>
 8003abc:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a6e      	ldr	r2, [pc, #440]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b6c      	ldr	r3, [pc, #432]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6b      	ldr	r2, [pc, #428]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd ff84 	bl	80019e8 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fd ff80 	bl	80019e8 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e21f      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xe8>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd ff70 	bl	80019e8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd ff6c 	bl	80019e8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e20b      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1e:	4b57      	ldr	r3, [pc, #348]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x110>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d069      	beq.n	8003c0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b3a:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b46:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d11c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x190>
 8003b52:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d116      	bne.n	8003b8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_RCC_OscConfig+0x17a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d001      	beq.n	8003b76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e1df      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	493d      	ldr	r1, [pc, #244]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8a:	e040      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d023      	beq.n	8003bdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd ff22 	bl	80019e8 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba8:	f7fd ff1e 	bl	80019e8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e1bd      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4929      	ldr	r1, [pc, #164]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
 8003bda:	e018      	b.n	8003c0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd fefe 	bl	80019e8 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf0:	f7fd fefa 	bl	80019e8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e199      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d038      	beq.n	8003c8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d019      	beq.n	8003c56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fedb 	bl	80019e8 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c36:	f7fd fed7 	bl	80019e8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e176      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x23a>
 8003c54:	e01a      	b.n	8003c8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fd fec1 	bl	80019e8 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fd febd 	bl	80019e8 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d903      	bls.n	8003c80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e15c      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
 8003c7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b91      	ldr	r3, [pc, #580]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ee      	bne.n	8003c6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a4 	beq.w	8003de2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b8b      	ldr	r3, [pc, #556]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10d      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	4b88      	ldr	r3, [pc, #544]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a87      	ldr	r2, [pc, #540]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b85      	ldr	r3, [pc, #532]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc2:	4b82      	ldr	r3, [pc, #520]	; (8003ecc <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cce:	4b7f      	ldr	r3, [pc, #508]	; (8003ecc <HAL_RCC_OscConfig+0x4d0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7e      	ldr	r2, [pc, #504]	; (8003ecc <HAL_RCC_OscConfig+0x4d0>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fd fe85 	bl	80019e8 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fd fe81 	bl	80019e8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b64      	cmp	r3, #100	; 0x64
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e120      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf4:	4b75      	ldr	r3, [pc, #468]	; (8003ecc <HAL_RCC_OscConfig+0x4d0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x31a>
 8003d08:	4b6f      	ldr	r3, [pc, #444]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a6e      	ldr	r2, [pc, #440]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	e02d      	b.n	8003d72 <HAL_RCC_OscConfig+0x376>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x33c>
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a69      	ldr	r2, [pc, #420]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	4b67      	ldr	r3, [pc, #412]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a66      	ldr	r2, [pc, #408]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	e01c      	b.n	8003d72 <HAL_RCC_OscConfig+0x376>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_OscConfig+0x35e>
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a60      	ldr	r2, [pc, #384]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	4b5e      	ldr	r3, [pc, #376]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a5d      	ldr	r2, [pc, #372]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
 8003d58:	e00b      	b.n	8003d72 <HAL_RCC_OscConfig+0x376>
 8003d5a:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a5a      	ldr	r2, [pc, #360]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
 8003d66:	4b58      	ldr	r3, [pc, #352]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a57      	ldr	r2, [pc, #348]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d015      	beq.n	8003da6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fd fe35 	bl	80019e8 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fd fe31 	bl	80019e8 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0ce      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ee      	beq.n	8003d82 <HAL_RCC_OscConfig+0x386>
 8003da4:	e014      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fd fe1f 	bl	80019e8 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd fe1b 	bl	80019e8 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e0b8      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc4:	4b40      	ldr	r3, [pc, #256]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ee      	bne.n	8003dae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a3b      	ldr	r2, [pc, #236]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a4 	beq.w	8003f34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d06b      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d149      	bne.n	8003e94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e00:	4b31      	ldr	r3, [pc, #196]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a30      	ldr	r2, [pc, #192]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fd fdec 	bl	80019e8 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd fde8 	bl	80019e8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e087      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	019b      	lsls	r3, r3, #6
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	4313      	orrs	r3, r2
 8003e58:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fdbc 	bl	80019e8 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd fdb8 	bl	80019e8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e057      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x478>
 8003e92:	e04f      	b.n	8003f34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fda2 	bl	80019e8 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fd fd9e 	bl	80019e8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e03d      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4ac>
 8003ec6:	e035      	b.n	8003f34 <HAL_RCC_OscConfig+0x538>
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x544>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d028      	beq.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d121      	bne.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d11a      	bne.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f00:	4013      	ands	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d111      	bne.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d0      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d910      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b67      	ldr	r3, [pc, #412]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 020f 	bic.w	r2, r3, #15
 8003f72:	4965      	ldr	r1, [pc, #404]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d040      	beq.n	8004068 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d115      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e073      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06b      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4936      	ldr	r1, [pc, #216]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fd fcd6 	bl	80019e8 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fd fcd2 	bl	80019e8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e053      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d1eb      	bne.n	8004040 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004068:	4b27      	ldr	r3, [pc, #156]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d210      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	4922      	ldr	r1, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e032      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4916      	ldr	r1, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d6:	f000 f821 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	490a      	ldr	r1, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1cc>)
 80040e8:	5ccb      	ldrb	r3, [r1, r3]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1d0>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1d4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fc32 	bl	8001960 <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00
 800410c:	40023800 	.word	0x40023800
 8004110:	0800811c 	.word	0x0800811c
 8004114:	20000018 	.word	0x20000018
 8004118:	2000001c 	.word	0x2000001c

0800411c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004120:	b094      	sub	sp, #80	; 0x50
 8004122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	647b      	str	r3, [r7, #68]	; 0x44
 8004128:	2300      	movs	r3, #0
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	2300      	movs	r3, #0
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004134:	4b79      	ldr	r3, [pc, #484]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 030c 	and.w	r3, r3, #12
 800413c:	2b08      	cmp	r3, #8
 800413e:	d00d      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x40>
 8004140:	2b08      	cmp	r3, #8
 8004142:	f200 80e1 	bhi.w	8004308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x34>
 800414a:	2b04      	cmp	r3, #4
 800414c:	d003      	beq.n	8004156 <HAL_RCC_GetSysClockFreq+0x3a>
 800414e:	e0db      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCC_GetSysClockFreq+0x204>)
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004154:	e0db      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004156:	4b73      	ldr	r3, [pc, #460]	; (8004324 <HAL_RCC_GetSysClockFreq+0x208>)
 8004158:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800415a:	e0d8      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800415c:	4b6f      	ldr	r3, [pc, #444]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004166:	4b6d      	ldr	r3, [pc, #436]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004172:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	2200      	movs	r2, #0
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
 800417c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004184:	633b      	str	r3, [r7, #48]	; 0x30
 8004186:	2300      	movs	r3, #0
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
 800418a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800418e:	4622      	mov	r2, r4
 8004190:	462b      	mov	r3, r5
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f04f 0100 	mov.w	r1, #0
 800419a:	0159      	lsls	r1, r3, #5
 800419c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a0:	0150      	lsls	r0, r2, #5
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4621      	mov	r1, r4
 80041a8:	1a51      	subs	r1, r2, r1
 80041aa:	6139      	str	r1, [r7, #16]
 80041ac:	4629      	mov	r1, r5
 80041ae:	eb63 0301 	sbc.w	r3, r3, r1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c0:	4659      	mov	r1, fp
 80041c2:	018b      	lsls	r3, r1, #6
 80041c4:	4651      	mov	r1, sl
 80041c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ca:	4651      	mov	r1, sl
 80041cc:	018a      	lsls	r2, r1, #6
 80041ce:	4651      	mov	r1, sl
 80041d0:	ebb2 0801 	subs.w	r8, r2, r1
 80041d4:	4659      	mov	r1, fp
 80041d6:	eb63 0901 	sbc.w	r9, r3, r1
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ee:	4690      	mov	r8, r2
 80041f0:	4699      	mov	r9, r3
 80041f2:	4623      	mov	r3, r4
 80041f4:	eb18 0303 	adds.w	r3, r8, r3
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	462b      	mov	r3, r5
 80041fc:	eb49 0303 	adc.w	r3, r9, r3
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800420e:	4629      	mov	r1, r5
 8004210:	024b      	lsls	r3, r1, #9
 8004212:	4621      	mov	r1, r4
 8004214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004218:	4621      	mov	r1, r4
 800421a:	024a      	lsls	r2, r1, #9
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004222:	2200      	movs	r2, #0
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800422c:	f7fc f840 	bl	80002b0 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004238:	e058      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b38      	ldr	r3, [pc, #224]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	2200      	movs	r2, #0
 8004242:	4618      	mov	r0, r3
 8004244:	4611      	mov	r1, r2
 8004246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800424a:	623b      	str	r3, [r7, #32]
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	f04f 0000 	mov.w	r0, #0
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	0159      	lsls	r1, r3, #5
 8004262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004266:	0150      	lsls	r0, r2, #5
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4641      	mov	r1, r8
 800426e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004272:	4649      	mov	r1, r9
 8004274:	eb63 0b01 	sbc.w	fp, r3, r1
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800428c:	ebb2 040a 	subs.w	r4, r2, sl
 8004290:	eb63 050b 	sbc.w	r5, r3, fp
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	00eb      	lsls	r3, r5, #3
 800429e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a2:	00e2      	lsls	r2, r4, #3
 80042a4:	4614      	mov	r4, r2
 80042a6:	461d      	mov	r5, r3
 80042a8:	4643      	mov	r3, r8
 80042aa:	18e3      	adds	r3, r4, r3
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	464b      	mov	r3, r9
 80042b0:	eb45 0303 	adc.w	r3, r5, r3
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042c2:	4629      	mov	r1, r5
 80042c4:	028b      	lsls	r3, r1, #10
 80042c6:	4621      	mov	r1, r4
 80042c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042cc:	4621      	mov	r1, r4
 80042ce:	028a      	lsls	r2, r1, #10
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d6:	2200      	movs	r2, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	61fa      	str	r2, [r7, #28]
 80042dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e0:	f7fb ffe6 	bl	80002b0 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4613      	mov	r3, r2
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80042fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004306:	e002      	b.n	800430e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetSysClockFreq+0x204>)
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800430c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004310:	4618      	mov	r0, r3
 8004312:	3750      	adds	r7, #80	; 0x50
 8004314:	46bd      	mov	sp, r7
 8004316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400
 8004324:	007a1200 	.word	0x007a1200

08004328 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000018 	.word	0x20000018

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004344:	f7ff fff0 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0a9b      	lsrs	r3, r3, #10
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4903      	ldr	r1, [pc, #12]	; (8004364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	0800812c 	.word	0x0800812c

08004368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800436c:	f7ff ffdc 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0b5b      	lsrs	r3, r3, #13
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK2Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	0800812c 	.word	0x0800812c

08004390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d012      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043b8:	4b69      	ldr	r3, [pc, #420]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a68      	ldr	r2, [pc, #416]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043c2:	6093      	str	r3, [r2, #8]
 80043c4:	4b66      	ldr	r3, [pc, #408]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	4964      	ldr	r1, [pc, #400]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d017      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ea:	4b5d      	ldr	r3, [pc, #372]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	4959      	ldr	r1, [pc, #356]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004408:	d101      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800440a:	2301      	movs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d017      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004426:	4b4e      	ldr	r3, [pc, #312]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	494a      	ldr	r1, [pc, #296]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004444:	d101      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004446:	2301      	movs	r3, #1
 8004448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004462:	2301      	movs	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 808b 	beq.w	800458a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	4a39      	ldr	r2, [pc, #228]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447e:	6413      	str	r3, [r2, #64]	; 0x40
 8004480:	4b37      	ldr	r3, [pc, #220]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800448c:	4b35      	ldr	r3, [pc, #212]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a34      	ldr	r2, [pc, #208]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fd faa6 	bl	80019e8 <HAL_GetTick>
 800449c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7fd faa2 	bl	80019e8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e357      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044b2:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044be:	4b28      	ldr	r3, [pc, #160]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d035      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d02e      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044dc:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004504:	4b16      	ldr	r3, [pc, #88]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d114      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd fa6a 	bl	80019e8 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fd fa66 	bl	80019e8 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e319      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ee      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004546:	d111      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004556:	400b      	ands	r3, r1
 8004558:	4901      	ldr	r1, [pc, #4]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
 800455e:	e00b      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000
 8004568:	0ffffcff 	.word	0x0ffffcff
 800456c:	4baa      	ldr	r3, [pc, #680]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4aa9      	ldr	r2, [pc, #676]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004572:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004576:	6093      	str	r3, [r2, #8]
 8004578:	4ba7      	ldr	r3, [pc, #668]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004584:	49a4      	ldr	r1, [pc, #656]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004586:	4313      	orrs	r3, r2
 8004588:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d010      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004596:	4ba0      	ldr	r3, [pc, #640]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459c:	4a9e      	ldr	r2, [pc, #632]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800459e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045a6:	4b9c      	ldr	r3, [pc, #624]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	4999      	ldr	r1, [pc, #612]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c4:	4b94      	ldr	r3, [pc, #592]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d2:	4991      	ldr	r1, [pc, #580]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e6:	4b8c      	ldr	r3, [pc, #560]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f4:	4988      	ldr	r1, [pc, #544]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004608:	4b83      	ldr	r3, [pc, #524]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004616:	4980      	ldr	r1, [pc, #512]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800462a:	4b7b      	ldr	r3, [pc, #492]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4977      	ldr	r1, [pc, #476]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800464c:	4b72      	ldr	r3, [pc, #456]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	496f      	ldr	r1, [pc, #444]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800466e:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f023 020c 	bic.w	r2, r3, #12
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	4966      	ldr	r1, [pc, #408]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004690:	4b61      	ldr	r3, [pc, #388]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469e:	495e      	ldr	r1, [pc, #376]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046b2:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	4955      	ldr	r1, [pc, #340]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046d4:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	494d      	ldr	r1, [pc, #308]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046f6:	4b48      	ldr	r3, [pc, #288]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	4944      	ldr	r1, [pc, #272]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004718:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	493c      	ldr	r1, [pc, #240]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800473a:	4b37      	ldr	r3, [pc, #220]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004748:	4933      	ldr	r1, [pc, #204]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800475c:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800476a:	492b      	ldr	r1, [pc, #172]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d011      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478c:	4922      	ldr	r1, [pc, #136]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800479c:	d101      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047cc:	4912      	ldr	r1, [pc, #72]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f0:	4909      	ldr	r1, [pc, #36]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d006      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 80d9 	beq.w	80049be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800480c:	4b02      	ldr	r3, [pc, #8]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a01      	ldr	r2, [pc, #4]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004816:	e001      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004818:	40023800 	.word	0x40023800
 800481c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481e:	f7fd f8e3 	bl	80019e8 <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004826:	f7fd f8df 	bl	80019e8 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b64      	cmp	r3, #100	; 0x64
 8004832:	d901      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e194      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004838:	4b6c      	ldr	r3, [pc, #432]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d021      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004854:	2b00      	cmp	r3, #0
 8004856:	d11d      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004858:	4b64      	ldr	r3, [pc, #400]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004866:	4b61      	ldr	r3, [pc, #388]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	0e1b      	lsrs	r3, r3, #24
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	019a      	lsls	r2, r3, #6
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	431a      	orrs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	061b      	lsls	r3, r3, #24
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	071b      	lsls	r3, r3, #28
 800488c:	4957      	ldr	r1, [pc, #348]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02e      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048be:	d129      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048c0:	4b4a      	ldr	r3, [pc, #296]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048ce:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d4:	0f1b      	lsrs	r3, r3, #28
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	019a      	lsls	r2, r3, #6
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	431a      	orrs	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	071b      	lsls	r3, r3, #28
 80048f4:	493d      	ldr	r1, [pc, #244]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004902:	f023 021f 	bic.w	r2, r3, #31
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	3b01      	subs	r3, #1
 800490c:	4937      	ldr	r1, [pc, #220]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01d      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004920:	4b32      	ldr	r3, [pc, #200]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004926:	0e1b      	lsrs	r3, r3, #24
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004934:	0f1b      	lsrs	r3, r3, #28
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	019a      	lsls	r2, r3, #6
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	431a      	orrs	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	061b      	lsls	r3, r3, #24
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	071b      	lsls	r3, r3, #28
 8004954:	4925      	ldr	r1, [pc, #148]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d011      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	019a      	lsls	r2, r3, #6
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	061b      	lsls	r3, r3, #24
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	071b      	lsls	r3, r3, #28
 8004984:	4919      	ldr	r1, [pc, #100]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004992:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fd f826 	bl	80019e8 <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049a0:	f7fd f822 	bl	80019e8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e0d7      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	f040 80cd 	bne.w	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d2:	f7fd f809 	bl	80019e8 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049d8:	e00a      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049da:	f7fd f805 	bl	80019e8 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	; 0x64
 80049e6:	d903      	bls.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0ba      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80049ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049f0:	4b5e      	ldr	r3, [pc, #376]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fc:	d0ed      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d02e      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d12a      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a26:	4b51      	ldr	r3, [pc, #324]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a34:	4b4d      	ldr	r3, [pc, #308]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	0f1b      	lsrs	r3, r3, #28
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	019a      	lsls	r2, r3, #6
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	071b      	lsls	r3, r3, #28
 8004a5a:	4944      	ldr	r1, [pc, #272]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a62:	4b42      	ldr	r3, [pc, #264]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	3b01      	subs	r3, #1
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	493d      	ldr	r1, [pc, #244]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d022      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a90:	d11d      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a92:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	0e1b      	lsrs	r3, r3, #24
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004aa0:	4b32      	ldr	r3, [pc, #200]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	0f1b      	lsrs	r3, r3, #28
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	019a      	lsls	r2, r3, #6
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	431a      	orrs	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	071b      	lsls	r3, r3, #28
 8004ac6:	4929      	ldr	r1, [pc, #164]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d028      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ae8:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	431a      	orrs	r2, r3
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	071b      	lsls	r3, r3, #28
 8004b0e:	4917      	ldr	r1, [pc, #92]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4911      	ldr	r1, [pc, #68]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b38:	f7fc ff56 	bl	80019e8 <HAL_GetTick>
 8004b3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b40:	f7fc ff52 	bl	80019e8 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e007      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5e:	d1ef      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800

08004b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e040      	b.n	8004c04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fd62 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f82c 	bl	8004c0c <UART_SetConfig>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e022      	b.n	8004c04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa84 	bl	80050d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb0b 	bl	8005218 <UART_CheckIdleState>
 8004c02:	4603      	mov	r3, r0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4ba6      	ldr	r3, [pc, #664]	; (8004ed0 <UART_SetConfig+0x2c4>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	6979      	ldr	r1, [r7, #20]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a94      	ldr	r2, [pc, #592]	; (8004ed4 <UART_SetConfig+0x2c8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d120      	bne.n	8004cca <UART_SetConfig+0xbe>
 8004c88:	4b93      	ldr	r3, [pc, #588]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d816      	bhi.n	8004cc4 <UART_SetConfig+0xb8>
 8004c96:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <UART_SetConfig+0x90>)
 8004c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9c:	08004cad 	.word	0x08004cad
 8004ca0:	08004cb9 	.word	0x08004cb9
 8004ca4:	08004cb3 	.word	0x08004cb3
 8004ca8:	08004cbf 	.word	0x08004cbf
 8004cac:	2301      	movs	r3, #1
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e150      	b.n	8004f54 <UART_SetConfig+0x348>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e14d      	b.n	8004f54 <UART_SetConfig+0x348>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e14a      	b.n	8004f54 <UART_SetConfig+0x348>
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e147      	b.n	8004f54 <UART_SetConfig+0x348>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e144      	b.n	8004f54 <UART_SetConfig+0x348>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a83      	ldr	r2, [pc, #524]	; (8004edc <UART_SetConfig+0x2d0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d132      	bne.n	8004d3a <UART_SetConfig+0x12e>
 8004cd4:	4b80      	ldr	r3, [pc, #512]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	d828      	bhi.n	8004d34 <UART_SetConfig+0x128>
 8004ce2:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <UART_SetConfig+0xdc>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d1d 	.word	0x08004d1d
 8004cec:	08004d35 	.word	0x08004d35
 8004cf0:	08004d35 	.word	0x08004d35
 8004cf4:	08004d35 	.word	0x08004d35
 8004cf8:	08004d29 	.word	0x08004d29
 8004cfc:	08004d35 	.word	0x08004d35
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08004d35 	.word	0x08004d35
 8004d08:	08004d23 	.word	0x08004d23
 8004d0c:	08004d35 	.word	0x08004d35
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d35 	.word	0x08004d35
 8004d18:	08004d2f 	.word	0x08004d2f
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e118      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d22:	2302      	movs	r3, #2
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e115      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e112      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d2e:	2308      	movs	r3, #8
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e10f      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d34:	2310      	movs	r3, #16
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e10c      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a68      	ldr	r2, [pc, #416]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d120      	bne.n	8004d86 <UART_SetConfig+0x17a>
 8004d44:	4b64      	ldr	r3, [pc, #400]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d4e:	2b30      	cmp	r3, #48	; 0x30
 8004d50:	d013      	beq.n	8004d7a <UART_SetConfig+0x16e>
 8004d52:	2b30      	cmp	r3, #48	; 0x30
 8004d54:	d814      	bhi.n	8004d80 <UART_SetConfig+0x174>
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d009      	beq.n	8004d6e <UART_SetConfig+0x162>
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d810      	bhi.n	8004d80 <UART_SetConfig+0x174>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <UART_SetConfig+0x15c>
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d006      	beq.n	8004d74 <UART_SetConfig+0x168>
 8004d66:	e00b      	b.n	8004d80 <UART_SetConfig+0x174>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e0f2      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e0ef      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d74:	2304      	movs	r3, #4
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e0ec      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e0e9      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d80:	2310      	movs	r3, #16
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e0e6      	b.n	8004f54 <UART_SetConfig+0x348>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a56      	ldr	r2, [pc, #344]	; (8004ee4 <UART_SetConfig+0x2d8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d120      	bne.n	8004dd2 <UART_SetConfig+0x1c6>
 8004d90:	4b51      	ldr	r3, [pc, #324]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d9c:	d013      	beq.n	8004dc6 <UART_SetConfig+0x1ba>
 8004d9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004da0:	d814      	bhi.n	8004dcc <UART_SetConfig+0x1c0>
 8004da2:	2b80      	cmp	r3, #128	; 0x80
 8004da4:	d009      	beq.n	8004dba <UART_SetConfig+0x1ae>
 8004da6:	2b80      	cmp	r3, #128	; 0x80
 8004da8:	d810      	bhi.n	8004dcc <UART_SetConfig+0x1c0>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <UART_SetConfig+0x1a8>
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d006      	beq.n	8004dc0 <UART_SetConfig+0x1b4>
 8004db2:	e00b      	b.n	8004dcc <UART_SetConfig+0x1c0>
 8004db4:	2300      	movs	r3, #0
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e0cc      	b.n	8004f54 <UART_SetConfig+0x348>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e0c9      	b.n	8004f54 <UART_SetConfig+0x348>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e0c6      	b.n	8004f54 <UART_SetConfig+0x348>
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e0c3      	b.n	8004f54 <UART_SetConfig+0x348>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e0c0      	b.n	8004f54 <UART_SetConfig+0x348>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a44      	ldr	r2, [pc, #272]	; (8004ee8 <UART_SetConfig+0x2dc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d125      	bne.n	8004e28 <UART_SetConfig+0x21c>
 8004ddc:	4b3e      	ldr	r3, [pc, #248]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dea:	d017      	beq.n	8004e1c <UART_SetConfig+0x210>
 8004dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df0:	d817      	bhi.n	8004e22 <UART_SetConfig+0x216>
 8004df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df6:	d00b      	beq.n	8004e10 <UART_SetConfig+0x204>
 8004df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfc:	d811      	bhi.n	8004e22 <UART_SetConfig+0x216>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <UART_SetConfig+0x1fe>
 8004e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e06:	d006      	beq.n	8004e16 <UART_SetConfig+0x20a>
 8004e08:	e00b      	b.n	8004e22 <UART_SetConfig+0x216>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e0a1      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e10:	2302      	movs	r3, #2
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e09e      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e16:	2304      	movs	r3, #4
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e09b      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e098      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e22:	2310      	movs	r3, #16
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e095      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <UART_SetConfig+0x2e0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d125      	bne.n	8004e7e <UART_SetConfig+0x272>
 8004e32:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e40:	d017      	beq.n	8004e72 <UART_SetConfig+0x266>
 8004e42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e46:	d817      	bhi.n	8004e78 <UART_SetConfig+0x26c>
 8004e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4c:	d00b      	beq.n	8004e66 <UART_SetConfig+0x25a>
 8004e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e52:	d811      	bhi.n	8004e78 <UART_SetConfig+0x26c>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <UART_SetConfig+0x254>
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5c:	d006      	beq.n	8004e6c <UART_SetConfig+0x260>
 8004e5e:	e00b      	b.n	8004e78 <UART_SetConfig+0x26c>
 8004e60:	2301      	movs	r3, #1
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e076      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e66:	2302      	movs	r3, #2
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e073      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e070      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e72:	2308      	movs	r3, #8
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e06d      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e06a      	b.n	8004f54 <UART_SetConfig+0x348>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1b      	ldr	r2, [pc, #108]	; (8004ef0 <UART_SetConfig+0x2e4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d138      	bne.n	8004efa <UART_SetConfig+0x2ee>
 8004e88:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e96:	d017      	beq.n	8004ec8 <UART_SetConfig+0x2bc>
 8004e98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e9c:	d82a      	bhi.n	8004ef4 <UART_SetConfig+0x2e8>
 8004e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea2:	d00b      	beq.n	8004ebc <UART_SetConfig+0x2b0>
 8004ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea8:	d824      	bhi.n	8004ef4 <UART_SetConfig+0x2e8>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <UART_SetConfig+0x2aa>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	d006      	beq.n	8004ec2 <UART_SetConfig+0x2b6>
 8004eb4:	e01e      	b.n	8004ef4 <UART_SetConfig+0x2e8>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e04b      	b.n	8004f54 <UART_SetConfig+0x348>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e048      	b.n	8004f54 <UART_SetConfig+0x348>
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	77fb      	strb	r3, [r7, #31]
 8004ec6:	e045      	b.n	8004f54 <UART_SetConfig+0x348>
 8004ec8:	2308      	movs	r3, #8
 8004eca:	77fb      	strb	r3, [r7, #31]
 8004ecc:	e042      	b.n	8004f54 <UART_SetConfig+0x348>
 8004ece:	bf00      	nop
 8004ed0:	efff69f3 	.word	0xefff69f3
 8004ed4:	40011000 	.word	0x40011000
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	40004400 	.word	0x40004400
 8004ee0:	40004800 	.word	0x40004800
 8004ee4:	40004c00 	.word	0x40004c00
 8004ee8:	40005000 	.word	0x40005000
 8004eec:	40011400 	.word	0x40011400
 8004ef0:	40007800 	.word	0x40007800
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e02c      	b.n	8004f54 <UART_SetConfig+0x348>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a72      	ldr	r2, [pc, #456]	; (80050c8 <UART_SetConfig+0x4bc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d125      	bne.n	8004f50 <UART_SetConfig+0x344>
 8004f04:	4b71      	ldr	r3, [pc, #452]	; (80050cc <UART_SetConfig+0x4c0>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f12:	d017      	beq.n	8004f44 <UART_SetConfig+0x338>
 8004f14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f18:	d817      	bhi.n	8004f4a <UART_SetConfig+0x33e>
 8004f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1e:	d00b      	beq.n	8004f38 <UART_SetConfig+0x32c>
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f24:	d811      	bhi.n	8004f4a <UART_SetConfig+0x33e>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <UART_SetConfig+0x326>
 8004f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f2e:	d006      	beq.n	8004f3e <UART_SetConfig+0x332>
 8004f30:	e00b      	b.n	8004f4a <UART_SetConfig+0x33e>
 8004f32:	2300      	movs	r3, #0
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e00d      	b.n	8004f54 <UART_SetConfig+0x348>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e00a      	b.n	8004f54 <UART_SetConfig+0x348>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e007      	b.n	8004f54 <UART_SetConfig+0x348>
 8004f44:	2308      	movs	r3, #8
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e004      	b.n	8004f54 <UART_SetConfig+0x348>
 8004f4a:	2310      	movs	r3, #16
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e001      	b.n	8004f54 <UART_SetConfig+0x348>
 8004f50:	2310      	movs	r3, #16
 8004f52:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5c:	d15b      	bne.n	8005016 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f5e:	7ffb      	ldrb	r3, [r7, #31]
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d828      	bhi.n	8004fb6 <UART_SetConfig+0x3aa>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0x360>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004fb7 	.word	0x08004fb7
 8004f7c:	08004fa7 	.word	0x08004fa7
 8004f80:	08004fb7 	.word	0x08004fb7
 8004f84:	08004fb7 	.word	0x08004fb7
 8004f88:	08004fb7 	.word	0x08004fb7
 8004f8c:	08004faf 	.word	0x08004faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7ff f9d6 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8004f94:	61b8      	str	r0, [r7, #24]
        break;
 8004f96:	e013      	b.n	8004fc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7ff f9e6 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	61b8      	str	r0, [r7, #24]
        break;
 8004f9e:	e00f      	b.n	8004fc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <UART_SetConfig+0x4c4>)
 8004fa2:	61bb      	str	r3, [r7, #24]
        break;
 8004fa4:	e00c      	b.n	8004fc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7ff f8b9 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8004faa:	61b8      	str	r0, [r7, #24]
        break;
 8004fac:	e008      	b.n	8004fc0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb2:	61bb      	str	r3, [r7, #24]
        break;
 8004fb4:	e004      	b.n	8004fc0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	77bb      	strb	r3, [r7, #30]
        break;
 8004fbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d074      	beq.n	80050b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	005a      	lsls	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	441a      	add	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d916      	bls.n	8005010 <UART_SetConfig+0x404>
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe8:	d212      	bcs.n	8005010 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f023 030f 	bic.w	r3, r3, #15
 8004ff2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	89fb      	ldrh	r3, [r7, #14]
 8005002:	4313      	orrs	r3, r2
 8005004:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	89fa      	ldrh	r2, [r7, #14]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	e04f      	b.n	80050b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	77bb      	strb	r3, [r7, #30]
 8005014:	e04c      	b.n	80050b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005016:	7ffb      	ldrb	r3, [r7, #31]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d828      	bhi.n	800506e <UART_SetConfig+0x462>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x418>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005049 	.word	0x08005049
 8005028:	08005051 	.word	0x08005051
 800502c:	08005059 	.word	0x08005059
 8005030:	0800506f 	.word	0x0800506f
 8005034:	0800505f 	.word	0x0800505f
 8005038:	0800506f 	.word	0x0800506f
 800503c:	0800506f 	.word	0x0800506f
 8005040:	0800506f 	.word	0x0800506f
 8005044:	08005067 	.word	0x08005067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005048:	f7ff f97a 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 800504c:	61b8      	str	r0, [r7, #24]
        break;
 800504e:	e013      	b.n	8005078 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7ff f98a 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 8005054:	61b8      	str	r0, [r7, #24]
        break;
 8005056:	e00f      	b.n	8005078 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <UART_SetConfig+0x4c4>)
 800505a:	61bb      	str	r3, [r7, #24]
        break;
 800505c:	e00c      	b.n	8005078 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7ff f85d 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005062:	61b8      	str	r0, [r7, #24]
        break;
 8005064:	e008      	b.n	8005078 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506a:	61bb      	str	r3, [r7, #24]
        break;
 800506c:	e004      	b.n	8005078 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	77bb      	strb	r3, [r7, #30]
        break;
 8005076:	bf00      	nop
    }

    if (pclk != 0U)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	085a      	lsrs	r2, r3, #1
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	441a      	add	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b0f      	cmp	r3, #15
 8005096:	d909      	bls.n	80050ac <UART_SetConfig+0x4a0>
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509e:	d205      	bcs.n	80050ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	e001      	b.n	80050b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40007c00 	.word	0x40007c00
 80050cc:	40023800 	.word	0x40023800
 80050d0:	00f42400 	.word	0x00f42400

080050d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01a      	beq.n	80051ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051d2:	d10a      	bne.n	80051ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af02      	add	r7, sp, #8
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005228:	f7fc fbde 	bl	80019e8 <HAL_GetTick>
 800522c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b08      	cmp	r3, #8
 800523a:	d10e      	bne.n	800525a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800523c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f81b 	bl	8005286 <UART_WaitOnFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e011      	b.n	800527e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b09c      	sub	sp, #112	; 0x70
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	4613      	mov	r3, r2
 8005294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005296:	e0a7      	b.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	f000 80a3 	beq.w	80053e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fc fba1 	bl	80019e8 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80052b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d13f      	bne.n	8005338 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052cc:	667b      	str	r3, [r7, #100]	; 0x64
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e6      	bne.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	f023 0301 	bic.w	r3, r3, #1
 8005300:	663b      	str	r3, [r7, #96]	; 0x60
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800530a:	64ba      	str	r2, [r7, #72]	; 0x48
 800530c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e068      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d050      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005354:	d148      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005374:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e6      	bne.n	8005360 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	613b      	str	r3, [r7, #16]
   return(result);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053b2:	623a      	str	r2, [r7, #32]
 80053b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	69f9      	ldr	r1, [r7, #28]
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e010      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	429a      	cmp	r2, r3
 8005404:	f43f af48 	beq.w	8005298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3770      	adds	r7, #112	; 0x70
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005414:	b084      	sub	sp, #16
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	f107 001c 	add.w	r0, r7, #28
 8005422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	2b01      	cmp	r3, #1
 800542a:	d120      	bne.n	800546e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <USB_CoreInit+0xac>)
 800543e:	4013      	ands	r3, r2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d105      	bne.n	8005462 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa96 	bl	8005994 <USB_CoreReset>
 8005468:	4603      	mov	r3, r0
 800546a:	73fb      	strb	r3, [r7, #15]
 800546c:	e010      	b.n	8005490 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa8a 	bl	8005994 <USB_CoreReset>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	2b01      	cmp	r3, #1
 8005494:	d10b      	bne.n	80054ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f043 0206 	orr.w	r2, r3, #6
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f043 0220 	orr.w	r2, r3, #32
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ba:	b004      	add	sp, #16
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	ffbdffbf 	.word	0xffbdffbf

080054c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f023 0201 	bic.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d115      	bne.n	8005534 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005514:	2001      	movs	r0, #1
 8005516:	f7fc fa73 	bl	8001a00 <HAL_Delay>
      ms++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fa29 	bl	8005978 <USB_GetMode>
 8005526:	4603      	mov	r3, r0
 8005528:	2b01      	cmp	r3, #1
 800552a:	d01e      	beq.n	800556a <USB_SetCurrentMode+0x84>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b31      	cmp	r3, #49	; 0x31
 8005530:	d9f0      	bls.n	8005514 <USB_SetCurrentMode+0x2e>
 8005532:	e01a      	b.n	800556a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d115      	bne.n	8005566 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005546:	2001      	movs	r0, #1
 8005548:	f7fc fa5a 	bl	8001a00 <HAL_Delay>
      ms++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3301      	adds	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa10 	bl	8005978 <USB_GetMode>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <USB_SetCurrentMode+0x84>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b31      	cmp	r3, #49	; 0x31
 8005562:	d9f0      	bls.n	8005546 <USB_SetCurrentMode+0x60>
 8005564:	e001      	b.n	800556a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e005      	b.n	8005576 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b32      	cmp	r3, #50	; 0x32
 800556e:	d101      	bne.n	8005574 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005580:	b084      	sub	sp, #16
 8005582:	b580      	push	{r7, lr}
 8005584:	b086      	sub	sp, #24
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800558e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800559a:	2300      	movs	r3, #0
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	e009      	b.n	80055b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3340      	adds	r3, #64	; 0x40
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	2200      	movs	r2, #0
 80055ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3301      	adds	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b0e      	cmp	r3, #14
 80055b8:	d9f2      	bls.n	80055a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d11c      	bne.n	80055fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ce:	f043 0302 	orr.w	r3, r3, #2
 80055d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e005      	b.n	8005606 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800560c:	461a      	mov	r2, r3
 800560e:	2300      	movs	r3, #0
 8005610:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005618:	4619      	mov	r1, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	461a      	mov	r2, r3
 8005622:	680b      	ldr	r3, [r1, #0]
 8005624:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	2b01      	cmp	r3, #1
 800562a:	d10c      	bne.n	8005646 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005632:	2100      	movs	r1, #0
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f965 	bl	8005904 <USB_SetDevSpeed>
 800563a:	e008      	b.n	800564e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800563c:	2101      	movs	r1, #1
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f960 	bl	8005904 <USB_SetDevSpeed>
 8005644:	e003      	b.n	800564e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005646:	2103      	movs	r1, #3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f95b 	bl	8005904 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800564e:	2110      	movs	r1, #16
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f8f3 	bl	800583c <USB_FlushTxFifo>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f91f 	bl	80058a4 <USB_FlushRxFifo>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	461a      	mov	r2, r3
 8005678:	2300      	movs	r3, #0
 800567a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	461a      	mov	r2, r3
 8005684:	2300      	movs	r3, #0
 8005686:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	461a      	mov	r2, r3
 8005690:	2300      	movs	r3, #0
 8005692:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	e043      	b.n	8005722 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b0:	d118      	bne.n	80056e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c4:	461a      	mov	r2, r3
 80056c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	e013      	b.n	80056f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056da:	461a      	mov	r2, r3
 80056dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e008      	b.n	80056f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	461a      	mov	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	461a      	mov	r2, r3
 8005704:	2300      	movs	r3, #0
 8005706:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	461a      	mov	r2, r3
 8005716:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800571a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3301      	adds	r3, #1
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d3b7      	bcc.n	800569a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	e043      	b.n	80057b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005746:	d118      	bne.n	800577a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	461a      	mov	r2, r3
 800575c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	e013      	b.n	800578c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005770:	461a      	mov	r2, r3
 8005772:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	e008      	b.n	800578c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	2300      	movs	r3, #0
 800578a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	461a      	mov	r2, r3
 800579a:	2300      	movs	r3, #0
 800579c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057aa:	461a      	mov	r2, r3
 80057ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3301      	adds	r3, #1
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d3b7      	bcc.n	8005730 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d105      	bne.n	80057f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f043 0210 	orr.w	r2, r3, #16
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699a      	ldr	r2, [r3, #24]
 80057f8:	4b0e      	ldr	r3, [pc, #56]	; (8005834 <USB_DevInit+0x2b4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f043 0208 	orr.w	r2, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d105      	bne.n	8005824 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <USB_DevInit+0x2b8>)
 800581e:	4313      	orrs	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005824:	7dfb      	ldrb	r3, [r7, #23]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005830:	b004      	add	sp, #16
 8005832:	4770      	bx	lr
 8005834:	803c3800 	.word	0x803c3800
 8005838:	40000004 	.word	0x40000004

0800583c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3301      	adds	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <USB_FlushTxFifo+0x64>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d901      	bls.n	800585c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e01b      	b.n	8005894 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	daf2      	bge.n	800584a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	019b      	lsls	r3, r3, #6
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <USB_FlushTxFifo+0x64>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e006      	b.n	8005894 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b20      	cmp	r3, #32
 8005890:	d0f0      	beq.n	8005874 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	00030d40 	.word	0x00030d40

080058a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a11      	ldr	r2, [pc, #68]	; (8005900 <USB_FlushRxFifo+0x5c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e018      	b.n	80058f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	daf2      	bge.n	80058b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2210      	movs	r2, #16
 80058d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a08      	ldr	r2, [pc, #32]	; (8005900 <USB_FlushRxFifo+0x5c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e006      	b.n	80058f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d0f0      	beq.n	80058d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	00030d40 	.word	0x00030d40

08005904 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005950:	f023 0303 	bic.w	r3, r3, #3
 8005954:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005964:	f043 0302 	orr.w	r3, r3, #2
 8005968:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f003 0301 	and.w	r3, r3, #1
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a13      	ldr	r2, [pc, #76]	; (80059f8 <USB_CoreReset+0x64>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e01b      	b.n	80059ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	daf2      	bge.n	80059a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f043 0201 	orr.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3301      	adds	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <USB_CoreReset+0x64>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d901      	bls.n	80059dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d0f0      	beq.n	80059ca <USB_CoreReset+0x36>

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	00030d40 	.word	0x00030d40

080059fc <__errno>:
 80059fc:	4b01      	ldr	r3, [pc, #4]	; (8005a04 <__errno+0x8>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000024 	.word	0x20000024

08005a08 <__libc_init_array>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	4d0d      	ldr	r5, [pc, #52]	; (8005a40 <__libc_init_array+0x38>)
 8005a0c:	4c0d      	ldr	r4, [pc, #52]	; (8005a44 <__libc_init_array+0x3c>)
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	10a4      	asrs	r4, r4, #2
 8005a12:	2600      	movs	r6, #0
 8005a14:	42a6      	cmp	r6, r4
 8005a16:	d109      	bne.n	8005a2c <__libc_init_array+0x24>
 8005a18:	4d0b      	ldr	r5, [pc, #44]	; (8005a48 <__libc_init_array+0x40>)
 8005a1a:	4c0c      	ldr	r4, [pc, #48]	; (8005a4c <__libc_init_array+0x44>)
 8005a1c:	f000 fc8e 	bl	800633c <_init>
 8005a20:	1b64      	subs	r4, r4, r5
 8005a22:	10a4      	asrs	r4, r4, #2
 8005a24:	2600      	movs	r6, #0
 8005a26:	42a6      	cmp	r6, r4
 8005a28:	d105      	bne.n	8005a36 <__libc_init_array+0x2e>
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a30:	4798      	blx	r3
 8005a32:	3601      	adds	r6, #1
 8005a34:	e7ee      	b.n	8005a14 <__libc_init_array+0xc>
 8005a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3a:	4798      	blx	r3
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	e7f2      	b.n	8005a26 <__libc_init_array+0x1e>
 8005a40:	08008170 	.word	0x08008170
 8005a44:	08008170 	.word	0x08008170
 8005a48:	08008170 	.word	0x08008170
 8005a4c:	08008174 	.word	0x08008174

08005a50 <memcpy>:
 8005a50:	440a      	add	r2, r1
 8005a52:	4291      	cmp	r1, r2
 8005a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a58:	d100      	bne.n	8005a5c <memcpy+0xc>
 8005a5a:	4770      	bx	lr
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a66:	4291      	cmp	r1, r2
 8005a68:	d1f9      	bne.n	8005a5e <memcpy+0xe>
 8005a6a:	bd10      	pop	{r4, pc}

08005a6c <memset>:
 8005a6c:	4402      	add	r2, r0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d100      	bne.n	8005a76 <memset+0xa>
 8005a74:	4770      	bx	lr
 8005a76:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7a:	e7f9      	b.n	8005a70 <memset+0x4>

08005a7c <siprintf>:
 8005a7c:	b40e      	push	{r1, r2, r3}
 8005a7e:	b500      	push	{lr}
 8005a80:	b09c      	sub	sp, #112	; 0x70
 8005a82:	ab1d      	add	r3, sp, #116	; 0x74
 8005a84:	9002      	str	r0, [sp, #8]
 8005a86:	9006      	str	r0, [sp, #24]
 8005a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a8c:	4809      	ldr	r0, [pc, #36]	; (8005ab4 <siprintf+0x38>)
 8005a8e:	9107      	str	r1, [sp, #28]
 8005a90:	9104      	str	r1, [sp, #16]
 8005a92:	4909      	ldr	r1, [pc, #36]	; (8005ab8 <siprintf+0x3c>)
 8005a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a98:	9105      	str	r1, [sp, #20]
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	a902      	add	r1, sp, #8
 8005aa0:	f000 f868 	bl	8005b74 <_svfiprintf_r>
 8005aa4:	9b02      	ldr	r3, [sp, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	b01c      	add	sp, #112	; 0x70
 8005aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ab0:	b003      	add	sp, #12
 8005ab2:	4770      	bx	lr
 8005ab4:	20000024 	.word	0x20000024
 8005ab8:	ffff0208 	.word	0xffff0208

08005abc <__ssputs_r>:
 8005abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	688e      	ldr	r6, [r1, #8]
 8005ac2:	429e      	cmp	r6, r3
 8005ac4:	4682      	mov	sl, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	4690      	mov	r8, r2
 8005aca:	461f      	mov	r7, r3
 8005acc:	d838      	bhi.n	8005b40 <__ssputs_r+0x84>
 8005ace:	898a      	ldrh	r2, [r1, #12]
 8005ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ad4:	d032      	beq.n	8005b3c <__ssputs_r+0x80>
 8005ad6:	6825      	ldr	r5, [r4, #0]
 8005ad8:	6909      	ldr	r1, [r1, #16]
 8005ada:	eba5 0901 	sub.w	r9, r5, r1
 8005ade:	6965      	ldr	r5, [r4, #20]
 8005ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ae8:	3301      	adds	r3, #1
 8005aea:	444b      	add	r3, r9
 8005aec:	106d      	asrs	r5, r5, #1
 8005aee:	429d      	cmp	r5, r3
 8005af0:	bf38      	it	cc
 8005af2:	461d      	movcc	r5, r3
 8005af4:	0553      	lsls	r3, r2, #21
 8005af6:	d531      	bpl.n	8005b5c <__ssputs_r+0xa0>
 8005af8:	4629      	mov	r1, r5
 8005afa:	f000 fb55 	bl	80061a8 <_malloc_r>
 8005afe:	4606      	mov	r6, r0
 8005b00:	b950      	cbnz	r0, 8005b18 <__ssputs_r+0x5c>
 8005b02:	230c      	movs	r3, #12
 8005b04:	f8ca 3000 	str.w	r3, [sl]
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b18:	6921      	ldr	r1, [r4, #16]
 8005b1a:	464a      	mov	r2, r9
 8005b1c:	f7ff ff98 	bl	8005a50 <memcpy>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2a:	81a3      	strh	r3, [r4, #12]
 8005b2c:	6126      	str	r6, [r4, #16]
 8005b2e:	6165      	str	r5, [r4, #20]
 8005b30:	444e      	add	r6, r9
 8005b32:	eba5 0509 	sub.w	r5, r5, r9
 8005b36:	6026      	str	r6, [r4, #0]
 8005b38:	60a5      	str	r5, [r4, #8]
 8005b3a:	463e      	mov	r6, r7
 8005b3c:	42be      	cmp	r6, r7
 8005b3e:	d900      	bls.n	8005b42 <__ssputs_r+0x86>
 8005b40:	463e      	mov	r6, r7
 8005b42:	6820      	ldr	r0, [r4, #0]
 8005b44:	4632      	mov	r2, r6
 8005b46:	4641      	mov	r1, r8
 8005b48:	f000 faa8 	bl	800609c <memmove>
 8005b4c:	68a3      	ldr	r3, [r4, #8]
 8005b4e:	1b9b      	subs	r3, r3, r6
 8005b50:	60a3      	str	r3, [r4, #8]
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	4433      	add	r3, r6
 8005b56:	6023      	str	r3, [r4, #0]
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e7db      	b.n	8005b14 <__ssputs_r+0x58>
 8005b5c:	462a      	mov	r2, r5
 8005b5e:	f000 fb97 	bl	8006290 <_realloc_r>
 8005b62:	4606      	mov	r6, r0
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d1e1      	bne.n	8005b2c <__ssputs_r+0x70>
 8005b68:	6921      	ldr	r1, [r4, #16]
 8005b6a:	4650      	mov	r0, sl
 8005b6c:	f000 fab0 	bl	80060d0 <_free_r>
 8005b70:	e7c7      	b.n	8005b02 <__ssputs_r+0x46>
	...

08005b74 <_svfiprintf_r>:
 8005b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	4698      	mov	r8, r3
 8005b7a:	898b      	ldrh	r3, [r1, #12]
 8005b7c:	061b      	lsls	r3, r3, #24
 8005b7e:	b09d      	sub	sp, #116	; 0x74
 8005b80:	4607      	mov	r7, r0
 8005b82:	460d      	mov	r5, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	d50e      	bpl.n	8005ba6 <_svfiprintf_r+0x32>
 8005b88:	690b      	ldr	r3, [r1, #16]
 8005b8a:	b963      	cbnz	r3, 8005ba6 <_svfiprintf_r+0x32>
 8005b8c:	2140      	movs	r1, #64	; 0x40
 8005b8e:	f000 fb0b 	bl	80061a8 <_malloc_r>
 8005b92:	6028      	str	r0, [r5, #0]
 8005b94:	6128      	str	r0, [r5, #16]
 8005b96:	b920      	cbnz	r0, 8005ba2 <_svfiprintf_r+0x2e>
 8005b98:	230c      	movs	r3, #12
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	e0d1      	b.n	8005d46 <_svfiprintf_r+0x1d2>
 8005ba2:	2340      	movs	r3, #64	; 0x40
 8005ba4:	616b      	str	r3, [r5, #20]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8005baa:	2320      	movs	r3, #32
 8005bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb4:	2330      	movs	r3, #48	; 0x30
 8005bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d60 <_svfiprintf_r+0x1ec>
 8005bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bbe:	f04f 0901 	mov.w	r9, #1
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	469a      	mov	sl, r3
 8005bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bca:	b10a      	cbz	r2, 8005bd0 <_svfiprintf_r+0x5c>
 8005bcc:	2a25      	cmp	r2, #37	; 0x25
 8005bce:	d1f9      	bne.n	8005bc4 <_svfiprintf_r+0x50>
 8005bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd4:	d00b      	beq.n	8005bee <_svfiprintf_r+0x7a>
 8005bd6:	465b      	mov	r3, fp
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4629      	mov	r1, r5
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f7ff ff6d 	bl	8005abc <__ssputs_r>
 8005be2:	3001      	adds	r0, #1
 8005be4:	f000 80aa 	beq.w	8005d3c <_svfiprintf_r+0x1c8>
 8005be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bea:	445a      	add	r2, fp
 8005bec:	9209      	str	r2, [sp, #36]	; 0x24
 8005bee:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80a2 	beq.w	8005d3c <_svfiprintf_r+0x1c8>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c02:	f10a 0a01 	add.w	sl, sl, #1
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	9307      	str	r3, [sp, #28]
 8005c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c10:	4654      	mov	r4, sl
 8005c12:	2205      	movs	r2, #5
 8005c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c18:	4851      	ldr	r0, [pc, #324]	; (8005d60 <_svfiprintf_r+0x1ec>)
 8005c1a:	f7fa faf9 	bl	8000210 <memchr>
 8005c1e:	9a04      	ldr	r2, [sp, #16]
 8005c20:	b9d8      	cbnz	r0, 8005c5a <_svfiprintf_r+0xe6>
 8005c22:	06d0      	lsls	r0, r2, #27
 8005c24:	bf44      	itt	mi
 8005c26:	2320      	movmi	r3, #32
 8005c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2c:	0711      	lsls	r1, r2, #28
 8005c2e:	bf44      	itt	mi
 8005c30:	232b      	movmi	r3, #43	; 0x2b
 8005c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c36:	f89a 3000 	ldrb.w	r3, [sl]
 8005c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3c:	d015      	beq.n	8005c6a <_svfiprintf_r+0xf6>
 8005c3e:	9a07      	ldr	r2, [sp, #28]
 8005c40:	4654      	mov	r4, sl
 8005c42:	2000      	movs	r0, #0
 8005c44:	f04f 0c0a 	mov.w	ip, #10
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4e:	3b30      	subs	r3, #48	; 0x30
 8005c50:	2b09      	cmp	r3, #9
 8005c52:	d94e      	bls.n	8005cf2 <_svfiprintf_r+0x17e>
 8005c54:	b1b0      	cbz	r0, 8005c84 <_svfiprintf_r+0x110>
 8005c56:	9207      	str	r2, [sp, #28]
 8005c58:	e014      	b.n	8005c84 <_svfiprintf_r+0x110>
 8005c5a:	eba0 0308 	sub.w	r3, r0, r8
 8005c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	46a2      	mov	sl, r4
 8005c68:	e7d2      	b.n	8005c10 <_svfiprintf_r+0x9c>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	1d19      	adds	r1, r3, #4
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	9103      	str	r1, [sp, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfbb      	ittet	lt
 8005c76:	425b      	neglt	r3, r3
 8005c78:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7c:	9307      	strge	r3, [sp, #28]
 8005c7e:	9307      	strlt	r3, [sp, #28]
 8005c80:	bfb8      	it	lt
 8005c82:	9204      	strlt	r2, [sp, #16]
 8005c84:	7823      	ldrb	r3, [r4, #0]
 8005c86:	2b2e      	cmp	r3, #46	; 0x2e
 8005c88:	d10c      	bne.n	8005ca4 <_svfiprintf_r+0x130>
 8005c8a:	7863      	ldrb	r3, [r4, #1]
 8005c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8e:	d135      	bne.n	8005cfc <_svfiprintf_r+0x188>
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	9203      	str	r2, [sp, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfb8      	it	lt
 8005c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ca0:	3402      	adds	r4, #2
 8005ca2:	9305      	str	r3, [sp, #20]
 8005ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d70 <_svfiprintf_r+0x1fc>
 8005ca8:	7821      	ldrb	r1, [r4, #0]
 8005caa:	2203      	movs	r2, #3
 8005cac:	4650      	mov	r0, sl
 8005cae:	f7fa faaf 	bl	8000210 <memchr>
 8005cb2:	b140      	cbz	r0, 8005cc6 <_svfiprintf_r+0x152>
 8005cb4:	2340      	movs	r3, #64	; 0x40
 8005cb6:	eba0 000a 	sub.w	r0, r0, sl
 8005cba:	fa03 f000 	lsl.w	r0, r3, r0
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	4303      	orrs	r3, r0
 8005cc2:	3401      	adds	r4, #1
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cca:	4826      	ldr	r0, [pc, #152]	; (8005d64 <_svfiprintf_r+0x1f0>)
 8005ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cd0:	2206      	movs	r2, #6
 8005cd2:	f7fa fa9d 	bl	8000210 <memchr>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d038      	beq.n	8005d4c <_svfiprintf_r+0x1d8>
 8005cda:	4b23      	ldr	r3, [pc, #140]	; (8005d68 <_svfiprintf_r+0x1f4>)
 8005cdc:	bb1b      	cbnz	r3, 8005d26 <_svfiprintf_r+0x1b2>
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	3307      	adds	r3, #7
 8005ce2:	f023 0307 	bic.w	r3, r3, #7
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	9303      	str	r3, [sp, #12]
 8005cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cec:	4433      	add	r3, r6
 8005cee:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf0:	e767      	b.n	8005bc2 <_svfiprintf_r+0x4e>
 8005cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	e7a5      	b.n	8005c48 <_svfiprintf_r+0xd4>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	3401      	adds	r4, #1
 8005d00:	9305      	str	r3, [sp, #20]
 8005d02:	4619      	mov	r1, r3
 8005d04:	f04f 0c0a 	mov.w	ip, #10
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d0e:	3a30      	subs	r2, #48	; 0x30
 8005d10:	2a09      	cmp	r2, #9
 8005d12:	d903      	bls.n	8005d1c <_svfiprintf_r+0x1a8>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0c5      	beq.n	8005ca4 <_svfiprintf_r+0x130>
 8005d18:	9105      	str	r1, [sp, #20]
 8005d1a:	e7c3      	b.n	8005ca4 <_svfiprintf_r+0x130>
 8005d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d20:	4604      	mov	r4, r0
 8005d22:	2301      	movs	r3, #1
 8005d24:	e7f0      	b.n	8005d08 <_svfiprintf_r+0x194>
 8005d26:	ab03      	add	r3, sp, #12
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	462a      	mov	r2, r5
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <_svfiprintf_r+0x1f8>)
 8005d2e:	a904      	add	r1, sp, #16
 8005d30:	4638      	mov	r0, r7
 8005d32:	f3af 8000 	nop.w
 8005d36:	1c42      	adds	r2, r0, #1
 8005d38:	4606      	mov	r6, r0
 8005d3a:	d1d6      	bne.n	8005cea <_svfiprintf_r+0x176>
 8005d3c:	89ab      	ldrh	r3, [r5, #12]
 8005d3e:	065b      	lsls	r3, r3, #25
 8005d40:	f53f af2c 	bmi.w	8005b9c <_svfiprintf_r+0x28>
 8005d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d46:	b01d      	add	sp, #116	; 0x74
 8005d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4c:	ab03      	add	r3, sp, #12
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	462a      	mov	r2, r5
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <_svfiprintf_r+0x1f8>)
 8005d54:	a904      	add	r1, sp, #16
 8005d56:	4638      	mov	r0, r7
 8005d58:	f000 f87a 	bl	8005e50 <_printf_i>
 8005d5c:	e7eb      	b.n	8005d36 <_svfiprintf_r+0x1c2>
 8005d5e:	bf00      	nop
 8005d60:	08008134 	.word	0x08008134
 8005d64:	0800813e 	.word	0x0800813e
 8005d68:	00000000 	.word	0x00000000
 8005d6c:	08005abd 	.word	0x08005abd
 8005d70:	0800813a 	.word	0x0800813a

08005d74 <_printf_common>:
 8005d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	4616      	mov	r6, r2
 8005d7a:	4699      	mov	r9, r3
 8005d7c:	688a      	ldr	r2, [r1, #8]
 8005d7e:	690b      	ldr	r3, [r1, #16]
 8005d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d84:	4293      	cmp	r3, r2
 8005d86:	bfb8      	it	lt
 8005d88:	4613      	movlt	r3, r2
 8005d8a:	6033      	str	r3, [r6, #0]
 8005d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d90:	4607      	mov	r7, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	b10a      	cbz	r2, 8005d9a <_printf_common+0x26>
 8005d96:	3301      	adds	r3, #1
 8005d98:	6033      	str	r3, [r6, #0]
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	0699      	lsls	r1, r3, #26
 8005d9e:	bf42      	ittt	mi
 8005da0:	6833      	ldrmi	r3, [r6, #0]
 8005da2:	3302      	addmi	r3, #2
 8005da4:	6033      	strmi	r3, [r6, #0]
 8005da6:	6825      	ldr	r5, [r4, #0]
 8005da8:	f015 0506 	ands.w	r5, r5, #6
 8005dac:	d106      	bne.n	8005dbc <_printf_common+0x48>
 8005dae:	f104 0a19 	add.w	sl, r4, #25
 8005db2:	68e3      	ldr	r3, [r4, #12]
 8005db4:	6832      	ldr	r2, [r6, #0]
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	42ab      	cmp	r3, r5
 8005dba:	dc26      	bgt.n	8005e0a <_printf_common+0x96>
 8005dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dc0:	1e13      	subs	r3, r2, #0
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	bf18      	it	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	0692      	lsls	r2, r2, #26
 8005dca:	d42b      	bmi.n	8005e24 <_printf_common+0xb0>
 8005dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	47c0      	blx	r8
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d01e      	beq.n	8005e18 <_printf_common+0xa4>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	68e5      	ldr	r5, [r4, #12]
 8005dde:	6832      	ldr	r2, [r6, #0]
 8005de0:	f003 0306 	and.w	r3, r3, #6
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	bf08      	it	eq
 8005de8:	1aad      	subeq	r5, r5, r2
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	6922      	ldr	r2, [r4, #16]
 8005dee:	bf0c      	ite	eq
 8005df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df4:	2500      	movne	r5, #0
 8005df6:	4293      	cmp	r3, r2
 8005df8:	bfc4      	itt	gt
 8005dfa:	1a9b      	subgt	r3, r3, r2
 8005dfc:	18ed      	addgt	r5, r5, r3
 8005dfe:	2600      	movs	r6, #0
 8005e00:	341a      	adds	r4, #26
 8005e02:	42b5      	cmp	r5, r6
 8005e04:	d11a      	bne.n	8005e3c <_printf_common+0xc8>
 8005e06:	2000      	movs	r0, #0
 8005e08:	e008      	b.n	8005e1c <_printf_common+0xa8>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4638      	mov	r0, r7
 8005e12:	47c0      	blx	r8
 8005e14:	3001      	adds	r0, #1
 8005e16:	d103      	bne.n	8005e20 <_printf_common+0xac>
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e20:	3501      	adds	r5, #1
 8005e22:	e7c6      	b.n	8005db2 <_printf_common+0x3e>
 8005e24:	18e1      	adds	r1, r4, r3
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	2030      	movs	r0, #48	; 0x30
 8005e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e2e:	4422      	add	r2, r4
 8005e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e38:	3302      	adds	r3, #2
 8005e3a:	e7c7      	b.n	8005dcc <_printf_common+0x58>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	4622      	mov	r2, r4
 8005e40:	4649      	mov	r1, r9
 8005e42:	4638      	mov	r0, r7
 8005e44:	47c0      	blx	r8
 8005e46:	3001      	adds	r0, #1
 8005e48:	d0e6      	beq.n	8005e18 <_printf_common+0xa4>
 8005e4a:	3601      	adds	r6, #1
 8005e4c:	e7d9      	b.n	8005e02 <_printf_common+0x8e>
	...

08005e50 <_printf_i>:
 8005e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	7e0f      	ldrb	r7, [r1, #24]
 8005e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e58:	2f78      	cmp	r7, #120	; 0x78
 8005e5a:	4691      	mov	r9, r2
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	469a      	mov	sl, r3
 8005e62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e66:	d807      	bhi.n	8005e78 <_printf_i+0x28>
 8005e68:	2f62      	cmp	r7, #98	; 0x62
 8005e6a:	d80a      	bhi.n	8005e82 <_printf_i+0x32>
 8005e6c:	2f00      	cmp	r7, #0
 8005e6e:	f000 80d8 	beq.w	8006022 <_printf_i+0x1d2>
 8005e72:	2f58      	cmp	r7, #88	; 0x58
 8005e74:	f000 80a3 	beq.w	8005fbe <_printf_i+0x16e>
 8005e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e80:	e03a      	b.n	8005ef8 <_printf_i+0xa8>
 8005e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e86:	2b15      	cmp	r3, #21
 8005e88:	d8f6      	bhi.n	8005e78 <_printf_i+0x28>
 8005e8a:	a101      	add	r1, pc, #4	; (adr r1, 8005e90 <_printf_i+0x40>)
 8005e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e90:	08005ee9 	.word	0x08005ee9
 8005e94:	08005efd 	.word	0x08005efd
 8005e98:	08005e79 	.word	0x08005e79
 8005e9c:	08005e79 	.word	0x08005e79
 8005ea0:	08005e79 	.word	0x08005e79
 8005ea4:	08005e79 	.word	0x08005e79
 8005ea8:	08005efd 	.word	0x08005efd
 8005eac:	08005e79 	.word	0x08005e79
 8005eb0:	08005e79 	.word	0x08005e79
 8005eb4:	08005e79 	.word	0x08005e79
 8005eb8:	08005e79 	.word	0x08005e79
 8005ebc:	08006009 	.word	0x08006009
 8005ec0:	08005f2d 	.word	0x08005f2d
 8005ec4:	08005feb 	.word	0x08005feb
 8005ec8:	08005e79 	.word	0x08005e79
 8005ecc:	08005e79 	.word	0x08005e79
 8005ed0:	0800602b 	.word	0x0800602b
 8005ed4:	08005e79 	.word	0x08005e79
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005e79 	.word	0x08005e79
 8005ee0:	08005e79 	.word	0x08005e79
 8005ee4:	08005ff3 	.word	0x08005ff3
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	1d1a      	adds	r2, r3, #4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	602a      	str	r2, [r5, #0]
 8005ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0a3      	b.n	8006044 <_printf_i+0x1f4>
 8005efc:	6820      	ldr	r0, [r4, #0]
 8005efe:	6829      	ldr	r1, [r5, #0]
 8005f00:	0606      	lsls	r6, r0, #24
 8005f02:	f101 0304 	add.w	r3, r1, #4
 8005f06:	d50a      	bpl.n	8005f1e <_printf_i+0xce>
 8005f08:	680e      	ldr	r6, [r1, #0]
 8005f0a:	602b      	str	r3, [r5, #0]
 8005f0c:	2e00      	cmp	r6, #0
 8005f0e:	da03      	bge.n	8005f18 <_printf_i+0xc8>
 8005f10:	232d      	movs	r3, #45	; 0x2d
 8005f12:	4276      	negs	r6, r6
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f18:	485e      	ldr	r0, [pc, #376]	; (8006094 <_printf_i+0x244>)
 8005f1a:	230a      	movs	r3, #10
 8005f1c:	e019      	b.n	8005f52 <_printf_i+0x102>
 8005f1e:	680e      	ldr	r6, [r1, #0]
 8005f20:	602b      	str	r3, [r5, #0]
 8005f22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f26:	bf18      	it	ne
 8005f28:	b236      	sxthne	r6, r6
 8005f2a:	e7ef      	b.n	8005f0c <_printf_i+0xbc>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	6820      	ldr	r0, [r4, #0]
 8005f30:	1d19      	adds	r1, r3, #4
 8005f32:	6029      	str	r1, [r5, #0]
 8005f34:	0601      	lsls	r1, r0, #24
 8005f36:	d501      	bpl.n	8005f3c <_printf_i+0xec>
 8005f38:	681e      	ldr	r6, [r3, #0]
 8005f3a:	e002      	b.n	8005f42 <_printf_i+0xf2>
 8005f3c:	0646      	lsls	r6, r0, #25
 8005f3e:	d5fb      	bpl.n	8005f38 <_printf_i+0xe8>
 8005f40:	881e      	ldrh	r6, [r3, #0]
 8005f42:	4854      	ldr	r0, [pc, #336]	; (8006094 <_printf_i+0x244>)
 8005f44:	2f6f      	cmp	r7, #111	; 0x6f
 8005f46:	bf0c      	ite	eq
 8005f48:	2308      	moveq	r3, #8
 8005f4a:	230a      	movne	r3, #10
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f52:	6865      	ldr	r5, [r4, #4]
 8005f54:	60a5      	str	r5, [r4, #8]
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	bfa2      	ittt	ge
 8005f5a:	6821      	ldrge	r1, [r4, #0]
 8005f5c:	f021 0104 	bicge.w	r1, r1, #4
 8005f60:	6021      	strge	r1, [r4, #0]
 8005f62:	b90e      	cbnz	r6, 8005f68 <_printf_i+0x118>
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	d04d      	beq.n	8006004 <_printf_i+0x1b4>
 8005f68:	4615      	mov	r5, r2
 8005f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f72:	5dc7      	ldrb	r7, [r0, r7]
 8005f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f78:	4637      	mov	r7, r6
 8005f7a:	42bb      	cmp	r3, r7
 8005f7c:	460e      	mov	r6, r1
 8005f7e:	d9f4      	bls.n	8005f6a <_printf_i+0x11a>
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d10b      	bne.n	8005f9c <_printf_i+0x14c>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	07de      	lsls	r6, r3, #31
 8005f88:	d508      	bpl.n	8005f9c <_printf_i+0x14c>
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	6861      	ldr	r1, [r4, #4]
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	bfde      	ittt	le
 8005f92:	2330      	movle	r3, #48	; 0x30
 8005f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f9c:	1b52      	subs	r2, r2, r5
 8005f9e:	6122      	str	r2, [r4, #16]
 8005fa0:	f8cd a000 	str.w	sl, [sp]
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	aa03      	add	r2, sp, #12
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4640      	mov	r0, r8
 8005fac:	f7ff fee2 	bl	8005d74 <_printf_common>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d14c      	bne.n	800604e <_printf_i+0x1fe>
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	b004      	add	sp, #16
 8005fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbe:	4835      	ldr	r0, [pc, #212]	; (8006094 <_printf_i+0x244>)
 8005fc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fc4:	6829      	ldr	r1, [r5, #0]
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fcc:	6029      	str	r1, [r5, #0]
 8005fce:	061d      	lsls	r5, r3, #24
 8005fd0:	d514      	bpl.n	8005ffc <_printf_i+0x1ac>
 8005fd2:	07df      	lsls	r7, r3, #31
 8005fd4:	bf44      	itt	mi
 8005fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8005fda:	6023      	strmi	r3, [r4, #0]
 8005fdc:	b91e      	cbnz	r6, 8005fe6 <_printf_i+0x196>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	f023 0320 	bic.w	r3, r3, #32
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	2310      	movs	r3, #16
 8005fe8:	e7b0      	b.n	8005f4c <_printf_i+0xfc>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	f043 0320 	orr.w	r3, r3, #32
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	2378      	movs	r3, #120	; 0x78
 8005ff4:	4828      	ldr	r0, [pc, #160]	; (8006098 <_printf_i+0x248>)
 8005ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ffa:	e7e3      	b.n	8005fc4 <_printf_i+0x174>
 8005ffc:	0659      	lsls	r1, r3, #25
 8005ffe:	bf48      	it	mi
 8006000:	b2b6      	uxthmi	r6, r6
 8006002:	e7e6      	b.n	8005fd2 <_printf_i+0x182>
 8006004:	4615      	mov	r5, r2
 8006006:	e7bb      	b.n	8005f80 <_printf_i+0x130>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	6826      	ldr	r6, [r4, #0]
 800600c:	6961      	ldr	r1, [r4, #20]
 800600e:	1d18      	adds	r0, r3, #4
 8006010:	6028      	str	r0, [r5, #0]
 8006012:	0635      	lsls	r5, r6, #24
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	d501      	bpl.n	800601c <_printf_i+0x1cc>
 8006018:	6019      	str	r1, [r3, #0]
 800601a:	e002      	b.n	8006022 <_printf_i+0x1d2>
 800601c:	0670      	lsls	r0, r6, #25
 800601e:	d5fb      	bpl.n	8006018 <_printf_i+0x1c8>
 8006020:	8019      	strh	r1, [r3, #0]
 8006022:	2300      	movs	r3, #0
 8006024:	6123      	str	r3, [r4, #16]
 8006026:	4615      	mov	r5, r2
 8006028:	e7ba      	b.n	8005fa0 <_printf_i+0x150>
 800602a:	682b      	ldr	r3, [r5, #0]
 800602c:	1d1a      	adds	r2, r3, #4
 800602e:	602a      	str	r2, [r5, #0]
 8006030:	681d      	ldr	r5, [r3, #0]
 8006032:	6862      	ldr	r2, [r4, #4]
 8006034:	2100      	movs	r1, #0
 8006036:	4628      	mov	r0, r5
 8006038:	f7fa f8ea 	bl	8000210 <memchr>
 800603c:	b108      	cbz	r0, 8006042 <_printf_i+0x1f2>
 800603e:	1b40      	subs	r0, r0, r5
 8006040:	6060      	str	r0, [r4, #4]
 8006042:	6863      	ldr	r3, [r4, #4]
 8006044:	6123      	str	r3, [r4, #16]
 8006046:	2300      	movs	r3, #0
 8006048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800604c:	e7a8      	b.n	8005fa0 <_printf_i+0x150>
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	462a      	mov	r2, r5
 8006052:	4649      	mov	r1, r9
 8006054:	4640      	mov	r0, r8
 8006056:	47d0      	blx	sl
 8006058:	3001      	adds	r0, #1
 800605a:	d0ab      	beq.n	8005fb4 <_printf_i+0x164>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	079b      	lsls	r3, r3, #30
 8006060:	d413      	bmi.n	800608a <_printf_i+0x23a>
 8006062:	68e0      	ldr	r0, [r4, #12]
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	4298      	cmp	r0, r3
 8006068:	bfb8      	it	lt
 800606a:	4618      	movlt	r0, r3
 800606c:	e7a4      	b.n	8005fb8 <_printf_i+0x168>
 800606e:	2301      	movs	r3, #1
 8006070:	4632      	mov	r2, r6
 8006072:	4649      	mov	r1, r9
 8006074:	4640      	mov	r0, r8
 8006076:	47d0      	blx	sl
 8006078:	3001      	adds	r0, #1
 800607a:	d09b      	beq.n	8005fb4 <_printf_i+0x164>
 800607c:	3501      	adds	r5, #1
 800607e:	68e3      	ldr	r3, [r4, #12]
 8006080:	9903      	ldr	r1, [sp, #12]
 8006082:	1a5b      	subs	r3, r3, r1
 8006084:	42ab      	cmp	r3, r5
 8006086:	dcf2      	bgt.n	800606e <_printf_i+0x21e>
 8006088:	e7eb      	b.n	8006062 <_printf_i+0x212>
 800608a:	2500      	movs	r5, #0
 800608c:	f104 0619 	add.w	r6, r4, #25
 8006090:	e7f5      	b.n	800607e <_printf_i+0x22e>
 8006092:	bf00      	nop
 8006094:	08008145 	.word	0x08008145
 8006098:	08008156 	.word	0x08008156

0800609c <memmove>:
 800609c:	4288      	cmp	r0, r1
 800609e:	b510      	push	{r4, lr}
 80060a0:	eb01 0402 	add.w	r4, r1, r2
 80060a4:	d902      	bls.n	80060ac <memmove+0x10>
 80060a6:	4284      	cmp	r4, r0
 80060a8:	4623      	mov	r3, r4
 80060aa:	d807      	bhi.n	80060bc <memmove+0x20>
 80060ac:	1e43      	subs	r3, r0, #1
 80060ae:	42a1      	cmp	r1, r4
 80060b0:	d008      	beq.n	80060c4 <memmove+0x28>
 80060b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ba:	e7f8      	b.n	80060ae <memmove+0x12>
 80060bc:	4402      	add	r2, r0
 80060be:	4601      	mov	r1, r0
 80060c0:	428a      	cmp	r2, r1
 80060c2:	d100      	bne.n	80060c6 <memmove+0x2a>
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ce:	e7f7      	b.n	80060c0 <memmove+0x24>

080060d0 <_free_r>:
 80060d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060d2:	2900      	cmp	r1, #0
 80060d4:	d044      	beq.n	8006160 <_free_r+0x90>
 80060d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060da:	9001      	str	r0, [sp, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f1a1 0404 	sub.w	r4, r1, #4
 80060e2:	bfb8      	it	lt
 80060e4:	18e4      	addlt	r4, r4, r3
 80060e6:	f000 f913 	bl	8006310 <__malloc_lock>
 80060ea:	4a1e      	ldr	r2, [pc, #120]	; (8006164 <_free_r+0x94>)
 80060ec:	9801      	ldr	r0, [sp, #4]
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	b933      	cbnz	r3, 8006100 <_free_r+0x30>
 80060f2:	6063      	str	r3, [r4, #4]
 80060f4:	6014      	str	r4, [r2, #0]
 80060f6:	b003      	add	sp, #12
 80060f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060fc:	f000 b90e 	b.w	800631c <__malloc_unlock>
 8006100:	42a3      	cmp	r3, r4
 8006102:	d908      	bls.n	8006116 <_free_r+0x46>
 8006104:	6825      	ldr	r5, [r4, #0]
 8006106:	1961      	adds	r1, r4, r5
 8006108:	428b      	cmp	r3, r1
 800610a:	bf01      	itttt	eq
 800610c:	6819      	ldreq	r1, [r3, #0]
 800610e:	685b      	ldreq	r3, [r3, #4]
 8006110:	1949      	addeq	r1, r1, r5
 8006112:	6021      	streq	r1, [r4, #0]
 8006114:	e7ed      	b.n	80060f2 <_free_r+0x22>
 8006116:	461a      	mov	r2, r3
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b10b      	cbz	r3, 8006120 <_free_r+0x50>
 800611c:	42a3      	cmp	r3, r4
 800611e:	d9fa      	bls.n	8006116 <_free_r+0x46>
 8006120:	6811      	ldr	r1, [r2, #0]
 8006122:	1855      	adds	r5, r2, r1
 8006124:	42a5      	cmp	r5, r4
 8006126:	d10b      	bne.n	8006140 <_free_r+0x70>
 8006128:	6824      	ldr	r4, [r4, #0]
 800612a:	4421      	add	r1, r4
 800612c:	1854      	adds	r4, r2, r1
 800612e:	42a3      	cmp	r3, r4
 8006130:	6011      	str	r1, [r2, #0]
 8006132:	d1e0      	bne.n	80060f6 <_free_r+0x26>
 8006134:	681c      	ldr	r4, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	6053      	str	r3, [r2, #4]
 800613a:	4421      	add	r1, r4
 800613c:	6011      	str	r1, [r2, #0]
 800613e:	e7da      	b.n	80060f6 <_free_r+0x26>
 8006140:	d902      	bls.n	8006148 <_free_r+0x78>
 8006142:	230c      	movs	r3, #12
 8006144:	6003      	str	r3, [r0, #0]
 8006146:	e7d6      	b.n	80060f6 <_free_r+0x26>
 8006148:	6825      	ldr	r5, [r4, #0]
 800614a:	1961      	adds	r1, r4, r5
 800614c:	428b      	cmp	r3, r1
 800614e:	bf04      	itt	eq
 8006150:	6819      	ldreq	r1, [r3, #0]
 8006152:	685b      	ldreq	r3, [r3, #4]
 8006154:	6063      	str	r3, [r4, #4]
 8006156:	bf04      	itt	eq
 8006158:	1949      	addeq	r1, r1, r5
 800615a:	6021      	streq	r1, [r4, #0]
 800615c:	6054      	str	r4, [r2, #4]
 800615e:	e7ca      	b.n	80060f6 <_free_r+0x26>
 8006160:	b003      	add	sp, #12
 8006162:	bd30      	pop	{r4, r5, pc}
 8006164:	20000d20 	.word	0x20000d20

08006168 <sbrk_aligned>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4e0e      	ldr	r6, [pc, #56]	; (80061a4 <sbrk_aligned+0x3c>)
 800616c:	460c      	mov	r4, r1
 800616e:	6831      	ldr	r1, [r6, #0]
 8006170:	4605      	mov	r5, r0
 8006172:	b911      	cbnz	r1, 800617a <sbrk_aligned+0x12>
 8006174:	f000 f8bc 	bl	80062f0 <_sbrk_r>
 8006178:	6030      	str	r0, [r6, #0]
 800617a:	4621      	mov	r1, r4
 800617c:	4628      	mov	r0, r5
 800617e:	f000 f8b7 	bl	80062f0 <_sbrk_r>
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	d00a      	beq.n	800619c <sbrk_aligned+0x34>
 8006186:	1cc4      	adds	r4, r0, #3
 8006188:	f024 0403 	bic.w	r4, r4, #3
 800618c:	42a0      	cmp	r0, r4
 800618e:	d007      	beq.n	80061a0 <sbrk_aligned+0x38>
 8006190:	1a21      	subs	r1, r4, r0
 8006192:	4628      	mov	r0, r5
 8006194:	f000 f8ac 	bl	80062f0 <_sbrk_r>
 8006198:	3001      	adds	r0, #1
 800619a:	d101      	bne.n	80061a0 <sbrk_aligned+0x38>
 800619c:	f04f 34ff 	mov.w	r4, #4294967295
 80061a0:	4620      	mov	r0, r4
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	20000d24 	.word	0x20000d24

080061a8 <_malloc_r>:
 80061a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ac:	1ccd      	adds	r5, r1, #3
 80061ae:	f025 0503 	bic.w	r5, r5, #3
 80061b2:	3508      	adds	r5, #8
 80061b4:	2d0c      	cmp	r5, #12
 80061b6:	bf38      	it	cc
 80061b8:	250c      	movcc	r5, #12
 80061ba:	2d00      	cmp	r5, #0
 80061bc:	4607      	mov	r7, r0
 80061be:	db01      	blt.n	80061c4 <_malloc_r+0x1c>
 80061c0:	42a9      	cmp	r1, r5
 80061c2:	d905      	bls.n	80061d0 <_malloc_r+0x28>
 80061c4:	230c      	movs	r3, #12
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	2600      	movs	r6, #0
 80061ca:	4630      	mov	r0, r6
 80061cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d0:	4e2e      	ldr	r6, [pc, #184]	; (800628c <_malloc_r+0xe4>)
 80061d2:	f000 f89d 	bl	8006310 <__malloc_lock>
 80061d6:	6833      	ldr	r3, [r6, #0]
 80061d8:	461c      	mov	r4, r3
 80061da:	bb34      	cbnz	r4, 800622a <_malloc_r+0x82>
 80061dc:	4629      	mov	r1, r5
 80061de:	4638      	mov	r0, r7
 80061e0:	f7ff ffc2 	bl	8006168 <sbrk_aligned>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	4604      	mov	r4, r0
 80061e8:	d14d      	bne.n	8006286 <_malloc_r+0xde>
 80061ea:	6834      	ldr	r4, [r6, #0]
 80061ec:	4626      	mov	r6, r4
 80061ee:	2e00      	cmp	r6, #0
 80061f0:	d140      	bne.n	8006274 <_malloc_r+0xcc>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	4631      	mov	r1, r6
 80061f6:	4638      	mov	r0, r7
 80061f8:	eb04 0803 	add.w	r8, r4, r3
 80061fc:	f000 f878 	bl	80062f0 <_sbrk_r>
 8006200:	4580      	cmp	r8, r0
 8006202:	d13a      	bne.n	800627a <_malloc_r+0xd2>
 8006204:	6821      	ldr	r1, [r4, #0]
 8006206:	3503      	adds	r5, #3
 8006208:	1a6d      	subs	r5, r5, r1
 800620a:	f025 0503 	bic.w	r5, r5, #3
 800620e:	3508      	adds	r5, #8
 8006210:	2d0c      	cmp	r5, #12
 8006212:	bf38      	it	cc
 8006214:	250c      	movcc	r5, #12
 8006216:	4629      	mov	r1, r5
 8006218:	4638      	mov	r0, r7
 800621a:	f7ff ffa5 	bl	8006168 <sbrk_aligned>
 800621e:	3001      	adds	r0, #1
 8006220:	d02b      	beq.n	800627a <_malloc_r+0xd2>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	442b      	add	r3, r5
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	e00e      	b.n	8006248 <_malloc_r+0xa0>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	1b52      	subs	r2, r2, r5
 800622e:	d41e      	bmi.n	800626e <_malloc_r+0xc6>
 8006230:	2a0b      	cmp	r2, #11
 8006232:	d916      	bls.n	8006262 <_malloc_r+0xba>
 8006234:	1961      	adds	r1, r4, r5
 8006236:	42a3      	cmp	r3, r4
 8006238:	6025      	str	r5, [r4, #0]
 800623a:	bf18      	it	ne
 800623c:	6059      	strne	r1, [r3, #4]
 800623e:	6863      	ldr	r3, [r4, #4]
 8006240:	bf08      	it	eq
 8006242:	6031      	streq	r1, [r6, #0]
 8006244:	5162      	str	r2, [r4, r5]
 8006246:	604b      	str	r3, [r1, #4]
 8006248:	4638      	mov	r0, r7
 800624a:	f104 060b 	add.w	r6, r4, #11
 800624e:	f000 f865 	bl	800631c <__malloc_unlock>
 8006252:	f026 0607 	bic.w	r6, r6, #7
 8006256:	1d23      	adds	r3, r4, #4
 8006258:	1af2      	subs	r2, r6, r3
 800625a:	d0b6      	beq.n	80061ca <_malloc_r+0x22>
 800625c:	1b9b      	subs	r3, r3, r6
 800625e:	50a3      	str	r3, [r4, r2]
 8006260:	e7b3      	b.n	80061ca <_malloc_r+0x22>
 8006262:	6862      	ldr	r2, [r4, #4]
 8006264:	42a3      	cmp	r3, r4
 8006266:	bf0c      	ite	eq
 8006268:	6032      	streq	r2, [r6, #0]
 800626a:	605a      	strne	r2, [r3, #4]
 800626c:	e7ec      	b.n	8006248 <_malloc_r+0xa0>
 800626e:	4623      	mov	r3, r4
 8006270:	6864      	ldr	r4, [r4, #4]
 8006272:	e7b2      	b.n	80061da <_malloc_r+0x32>
 8006274:	4634      	mov	r4, r6
 8006276:	6876      	ldr	r6, [r6, #4]
 8006278:	e7b9      	b.n	80061ee <_malloc_r+0x46>
 800627a:	230c      	movs	r3, #12
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	4638      	mov	r0, r7
 8006280:	f000 f84c 	bl	800631c <__malloc_unlock>
 8006284:	e7a1      	b.n	80061ca <_malloc_r+0x22>
 8006286:	6025      	str	r5, [r4, #0]
 8006288:	e7de      	b.n	8006248 <_malloc_r+0xa0>
 800628a:	bf00      	nop
 800628c:	20000d20 	.word	0x20000d20

08006290 <_realloc_r>:
 8006290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006294:	4680      	mov	r8, r0
 8006296:	4614      	mov	r4, r2
 8006298:	460e      	mov	r6, r1
 800629a:	b921      	cbnz	r1, 80062a6 <_realloc_r+0x16>
 800629c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062a0:	4611      	mov	r1, r2
 80062a2:	f7ff bf81 	b.w	80061a8 <_malloc_r>
 80062a6:	b92a      	cbnz	r2, 80062b4 <_realloc_r+0x24>
 80062a8:	f7ff ff12 	bl	80060d0 <_free_r>
 80062ac:	4625      	mov	r5, r4
 80062ae:	4628      	mov	r0, r5
 80062b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b4:	f000 f838 	bl	8006328 <_malloc_usable_size_r>
 80062b8:	4284      	cmp	r4, r0
 80062ba:	4607      	mov	r7, r0
 80062bc:	d802      	bhi.n	80062c4 <_realloc_r+0x34>
 80062be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062c2:	d812      	bhi.n	80062ea <_realloc_r+0x5a>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff ff6e 	bl	80061a8 <_malloc_r>
 80062cc:	4605      	mov	r5, r0
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d0ed      	beq.n	80062ae <_realloc_r+0x1e>
 80062d2:	42bc      	cmp	r4, r7
 80062d4:	4622      	mov	r2, r4
 80062d6:	4631      	mov	r1, r6
 80062d8:	bf28      	it	cs
 80062da:	463a      	movcs	r2, r7
 80062dc:	f7ff fbb8 	bl	8005a50 <memcpy>
 80062e0:	4631      	mov	r1, r6
 80062e2:	4640      	mov	r0, r8
 80062e4:	f7ff fef4 	bl	80060d0 <_free_r>
 80062e8:	e7e1      	b.n	80062ae <_realloc_r+0x1e>
 80062ea:	4635      	mov	r5, r6
 80062ec:	e7df      	b.n	80062ae <_realloc_r+0x1e>
	...

080062f0 <_sbrk_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d06      	ldr	r5, [pc, #24]	; (800630c <_sbrk_r+0x1c>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fb fab2 	bl	8001864 <_sbrk>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_sbrk_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_sbrk_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	20000d28 	.word	0x20000d28

08006310 <__malloc_lock>:
 8006310:	4801      	ldr	r0, [pc, #4]	; (8006318 <__malloc_lock+0x8>)
 8006312:	f000 b811 	b.w	8006338 <__retarget_lock_acquire_recursive>
 8006316:	bf00      	nop
 8006318:	20000d2c 	.word	0x20000d2c

0800631c <__malloc_unlock>:
 800631c:	4801      	ldr	r0, [pc, #4]	; (8006324 <__malloc_unlock+0x8>)
 800631e:	f000 b80c 	b.w	800633a <__retarget_lock_release_recursive>
 8006322:	bf00      	nop
 8006324:	20000d2c 	.word	0x20000d2c

08006328 <_malloc_usable_size_r>:
 8006328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800632c:	1f18      	subs	r0, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfbc      	itt	lt
 8006332:	580b      	ldrlt	r3, [r1, r0]
 8006334:	18c0      	addlt	r0, r0, r3
 8006336:	4770      	bx	lr

08006338 <__retarget_lock_acquire_recursive>:
 8006338:	4770      	bx	lr

0800633a <__retarget_lock_release_recursive>:
 800633a:	4770      	bx	lr

0800633c <_init>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr

08006348 <_fini>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	bf00      	nop
 800634c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634e:	bc08      	pop	{r3}
 8006350:	469e      	mov	lr, r3
 8006352:	4770      	bx	lr
