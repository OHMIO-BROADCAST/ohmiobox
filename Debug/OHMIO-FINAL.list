
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058ec  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df4  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a8  080078a8  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b0  080078b0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080078b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000024  080078dc  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c4  0800797c  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b50  20000164  08007a1c  00020164  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000cb4  08007a1c  00020cb4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017cc1  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d54  00000000  00000000  00037e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001218  00000000  00000000  0003abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010e8  00000000  00000000  0003bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002847b  00000000  00000000  0003ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000164f5  00000000  00000000  0006532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f65fb  00000000  00000000  0007b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00171e1b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004c60  00000000  00000000  00171e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000164 	.word	0x20000164
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005a9c 	.word	0x08005a9c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000168 	.word	0x20000168
 8000204:	08005a9c 	.word	0x08005a9c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
extern int indexMenu=0;
extern int screen=0;
static uint32_t last_arriba_time = 0; // keeps track of the last time "ARRIBA" was displayed

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fa3d 	bl	800198e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f894 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fa38 	bl	800098c <MX_GPIO_Init>
  MX_ETH_Init();
 800051c:	f000 f94a 	bl	80007b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f9d6 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 fa04 	bl	8000930 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000528:	f000 f992 	bl	8000850 <MX_I2C2_Init>
  MX_ADC1_Init();
 800052c:	f000 f8f0 	bl	8000710 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000530:	f000 fb18 	bl	8000b64 <ssd1306_Init>
  //INICIALIZAMOS EL SPLASH
  ssd1306_OhmioSplash();
 8000534:	f000 ff5a 	bl	80013ec <ssd1306_OhmioSplash>
  ssd1306_OhmioMenuPrincipal();
 8000538:	f000 ff64 	bl	8001404 <ssd1306_OhmioMenuPrincipal>
  while (1)
  {
    /* USER CODE END WHILE */
	  //INICIALIZAMOS EL SPLASH

	  HAL_ADC_Start(&hadc1);
 800053c:	483c      	ldr	r0, [pc, #240]	; (8000630 <main+0x124>)
 800053e:	f001 faeb 	bl	8001b18 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
 8000542:	210a      	movs	r1, #10
 8000544:	483a      	ldr	r0, [pc, #232]	; (8000630 <main+0x124>)
 8000546:	f001 fbe9 	bl	8001d1c <HAL_ADC_PollForConversion>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10e      	bne.n	800056e <main+0x62>
		  analog_value_keypad=HAL_ADC_GetValue(&hadc1);
 8000550:	4837      	ldr	r0, [pc, #220]	; (8000630 <main+0x124>)
 8000552:	f001 fc6e 	bl	8001e32 <HAL_ADC_GetValue>
 8000556:	4603      	mov	r3, r0
 8000558:	4a36      	ldr	r2, [pc, #216]	; (8000634 <main+0x128>)
 800055a:	6013      	str	r3, [r2, #0]
		  ssd1306_DisplayAnalogValue(analog_value_keypad, indexMenu, screen);
 800055c:	4b35      	ldr	r3, [pc, #212]	; (8000634 <main+0x128>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a35      	ldr	r2, [pc, #212]	; (8000638 <main+0x12c>)
 8000562:	6811      	ldr	r1, [r2, #0]
 8000564:	4a35      	ldr	r2, [pc, #212]	; (800063c <main+0x130>)
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 ff05 	bl	8001378 <ssd1306_DisplayAnalogValue>
	  }

	  //Displacement vertical
	   if(analog_value_keypad >= 800 && analog_value_keypad <= 900){
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <main+0x128>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000576:	d311      	bcc.n	800059c <main+0x90>
 8000578:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <main+0x128>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000580:	d80c      	bhi.n	800059c <main+0x90>
		   if (indexMenu==2){
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <main+0x12c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d103      	bne.n	8000592 <main+0x86>
			   indexMenu=0;
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <main+0x12c>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e004      	b.n	800059c <main+0x90>
		   }else{
			   indexMenu++;
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <main+0x12c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <main+0x12c>)
 800059a:	6013      	str	r3, [r2, #0]
	   //screen=1 -> DASHBOARD
	   //screen=2 -> ENERGIA
	   //screen=3 -> SETTINGS


	      if(analog_value_keypad >= 0 && analog_value_keypad <= 100){
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <main+0x128>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b64      	cmp	r3, #100	; 0x64
 80005a2:	d83d      	bhi.n	8000620 <main+0x114>
			//Select
	    	//Menu Principal
			if(screen==0){
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <main+0x130>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d125      	bne.n	80005f8 <main+0xec>
				if(indexMenu==0){
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <main+0x12c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d108      	bne.n	80005c6 <main+0xba>
					//option Dashboard
					screen=1;
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <main+0x130>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <main+0x12c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80005c0:	f000 fb5e 	bl	8000c80 <ssd1306_UpdateScreen>
 80005c4:	e018      	b.n	80005f8 <main+0xec>
				}else if (indexMenu==1){
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <main+0x12c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d108      	bne.n	80005e0 <main+0xd4>
					//option Energy
					screen=2;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <main+0x130>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <main+0x12c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80005da:	f000 fb51 	bl	8000c80 <ssd1306_UpdateScreen>
 80005de:	e00b      	b.n	80005f8 <main+0xec>
				}else if (indexMenu==2){
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <main+0x12c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d107      	bne.n	80005f8 <main+0xec>
					screen=3;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <main+0x130>)
 80005ea:	2203      	movs	r2, #3
 80005ec:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <main+0x12c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 80005f4:	f000 fb44 	bl	8000c80 <ssd1306_UpdateScreen>
				}
			}
			//Menu Settings
			if(screen==3){
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <main+0x130>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d10f      	bne.n	8000620 <main+0x114>
				if(indexMenu==0){
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <main+0x12c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00b      	beq.n	8000620 <main+0x114>
					//option Version no hace nada
					//screen=1;
				}else if (indexMenu==2){
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <main+0x12c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d107      	bne.n	8000620 <main+0x114>
					//option Atras back
					screen=0;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <main+0x130>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
					indexMenu=0;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0x12c>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
					ssd1306_UpdateScreen();
 800061c:	f000 fb30 	bl	8000c80 <ssd1306_UpdateScreen>
			}
	      }



	  HAL_ADC_Stop(&hadc1);
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <main+0x124>)
 8000622:	f001 fb47 	bl	8001cb4 <HAL_ADC_Stop>
	  HAL_Delay(50);
 8000626:	2032      	movs	r0, #50	; 0x32
 8000628:	f001 fa0e 	bl	8001a48 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800062c:	e786      	b.n	800053c <main+0x30>
 800062e:	bf00      	nop
 8000630:	200001b8 	.word	0x200001b8
 8000634:	20000200 	.word	0x20000200
 8000638:	20000898 	.word	0x20000898
 800063c:	2000089c 	.word	0x2000089c

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 fa1c 	bl	8005a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000664:	f003 f9de 	bl	8003a24 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a26      	ldr	r2, [pc, #152]	; (8000708 <SystemClock_Config+0xc8>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <SystemClock_Config+0xc8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xcc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xcc>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <SystemClock_Config+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006b4:	2348      	movs	r3, #72	; 0x48
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006bc:	2303      	movs	r3, #3
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 f9bd 	bl	8003a44 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 fa0a 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fc4b 	bl	8003f8c <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006fc:	f000 f9f4 	bl	8000ae8 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_ADC1_Init+0x9c>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_ADC1_Init+0xa0>)
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_ADC1_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_ADC1_Init+0x98>)
 800076a:	2201      	movs	r2, #1
 800076c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000770:	f001 f98e 	bl	8001a90 <HAL_ADC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800077a:	f000 f9b5 	bl	8000ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000782:	2301      	movs	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000790:	f001 fb5c 	bl	8001e4c <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800079a:	f000 f9a5 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001b8 	.word	0x200001b8
 80007ac:	40012000 	.word	0x40012000
 80007b0:	0f000001 	.word	0x0f000001

080007b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ETH_Init+0x84>)
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <MX_ETH_Init+0x88>)
 80007bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ETH_Init+0x8c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ETH_Init+0x8c>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ETH_Init+0x8c>)
 80007cc:	22e1      	movs	r2, #225	; 0xe1
 80007ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ETH_Init+0x8c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ETH_Init+0x8c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_ETH_Init+0x8c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_ETH_Init+0x84>)
 80007e4:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_ETH_Init+0x8c>)
 80007e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_ETH_Init+0x84>)
 80007ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_ETH_Init+0x84>)
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_ETH_Init+0x90>)
 80007f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_ETH_Init+0x84>)
 80007f8:	4a13      	ldr	r2, [pc, #76]	; (8000848 <MX_ETH_Init+0x94>)
 80007fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_ETH_Init+0x84>)
 80007fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000802:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_ETH_Init+0x84>)
 8000806:	f001 fe57 	bl	80024b8 <HAL_ETH_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f96a 	bl	8000ae8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000814:	2238      	movs	r2, #56	; 0x38
 8000816:	2100      	movs	r1, #0
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_ETH_Init+0x98>)
 800081a:	f005 f937 	bl	8005a8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_ETH_Init+0x98>)
 8000820:	2221      	movs	r2, #33	; 0x21
 8000822:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_ETH_Init+0x98>)
 8000826:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800082a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_ETH_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000204 	.word	0x20000204
 800083c:	40028000 	.word	0x40028000
 8000840:	200008a0 	.word	0x200008a0
 8000844:	200000c4 	.word	0x200000c4
 8000848:	20000024 	.word	0x20000024
 800084c:	20000180 	.word	0x20000180

08000850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C2_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C2_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C2_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C2_Init+0x74>)
 800088c:	f002 fb00 	bl	8002e90 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 f927 	bl	8000ae8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C2_Init+0x74>)
 800089e:	f002 fee1 	bl	8003664 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f91e 	bl	8000ae8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C2_Init+0x74>)
 80008b0:	f002 ff23 	bl	80036fa <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f915 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200002b4 	.word	0x200002b4
 80008c8:	40005800 	.word	0x40005800
 80008cc:	00301739 	.word	0x00301739

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART3_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000914:	f004 f950 	bl	8004bb8 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f8e3 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000308 	.word	0x20000308
 800092c:	40004800 	.word	0x40004800

08000930 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800093a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2206      	movs	r2, #6
 8000940:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2202      	movs	r2, #2
 8000946:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2202      	movs	r2, #2
 8000952:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2201      	movs	r2, #1
 8000958:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2201      	movs	r2, #1
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	f002 ff0d 	bl	8003792 <HAL_PCD_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f8b3 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000390 	.word	0x20000390

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a4c      	ldr	r2, [pc, #304]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ba:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a46      	ldr	r2, [pc, #280]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009c0:	f043 0320 	orr.w	r3, r3, #32
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0320 	and.w	r3, r3, #32
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a3a      	ldr	r2, [pc, #232]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a34      	ldr	r2, [pc, #208]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a52:	f002 fa03 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2140      	movs	r1, #64	; 0x40
 8000a5a:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <MX_GPIO_Init+0x154>)
 8000a5c:	f002 f9fe 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <MX_GPIO_Init+0x158>)
 8000a78:	f002 f844 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a7c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a96:	f002 f835 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <MX_GPIO_Init+0x154>)
 8000ab2:	f002 f827 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_GPIO_Init+0x154>)
 8000aca:	f002 f81b 	bl	8002b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3730      	adds	r7, #48	; 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40020800 	.word	0x40020800

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>

08000af2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	2301      	movs	r3, #1
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2178      	movs	r1, #120	; 0x78
 8000b1e:	4803      	ldr	r0, [pc, #12]	; (8000b2c <ssd1306_WriteCommand+0x2c>)
 8000b20:	f002 fa46 	bl	8002fb0 <HAL_I2C_Mem_Write>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200002b4 	.word	0x200002b4

08000b30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b42:	9202      	str	r2, [sp, #8]
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	2240      	movs	r2, #64	; 0x40
 8000b4e:	2178      	movs	r1, #120	; 0x78
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <ssd1306_WriteData+0x30>)
 8000b52:	f002 fa2d 	bl	8002fb0 <HAL_I2C_Mem_Write>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200002b4 	.word	0x200002b4

08000b64 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b68:	f7ff ffc3 	bl	8000af2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b6c:	2064      	movs	r0, #100	; 0x64
 8000b6e:	f000 ff6b 	bl	8001a48 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 fa34 	bl	8000fe0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b78:	2020      	movs	r0, #32
 8000b7a:	f7ff ffc1 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff ffbe 	bl	8000b00 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b84:	20b0      	movs	r0, #176	; 0xb0
 8000b86:	f7ff ffbb 	bl	8000b00 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b8a:	20c8      	movs	r0, #200	; 0xc8
 8000b8c:	f7ff ffb8 	bl	8000b00 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff ffb5 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b96:	2010      	movs	r0, #16
 8000b98:	f7ff ffb2 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b9c:	2040      	movs	r0, #64	; 0x40
 8000b9e:	f7ff ffaf 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ba2:	20ff      	movs	r0, #255	; 0xff
 8000ba4:	f000 fa09 	bl	8000fba <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ba8:	20a1      	movs	r0, #161	; 0xa1
 8000baa:	f7ff ffa9 	bl	8000b00 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bae:	20a6      	movs	r0, #166	; 0xa6
 8000bb0:	f7ff ffa6 	bl	8000b00 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bb4:	20a8      	movs	r0, #168	; 0xa8
 8000bb6:	f7ff ffa3 	bl	8000b00 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bba:	203f      	movs	r0, #63	; 0x3f
 8000bbc:	f7ff ffa0 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bc0:	20a4      	movs	r0, #164	; 0xa4
 8000bc2:	f7ff ff9d 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bc6:	20d3      	movs	r0, #211	; 0xd3
 8000bc8:	f7ff ff9a 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ff97 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bd2:	20d5      	movs	r0, #213	; 0xd5
 8000bd4:	f7ff ff94 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bd8:	20f0      	movs	r0, #240	; 0xf0
 8000bda:	f7ff ff91 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bde:	20d9      	movs	r0, #217	; 0xd9
 8000be0:	f7ff ff8e 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000be4:	2022      	movs	r0, #34	; 0x22
 8000be6:	f7ff ff8b 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bea:	20da      	movs	r0, #218	; 0xda
 8000bec:	f7ff ff88 	bl	8000b00 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bf0:	2012      	movs	r0, #18
 8000bf2:	f7ff ff85 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bf6:	20db      	movs	r0, #219	; 0xdb
 8000bf8:	f7ff ff82 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000bfc:	2020      	movs	r0, #32
 8000bfe:	f7ff ff7f 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c02:	208d      	movs	r0, #141	; 0x8d
 8000c04:	f7ff ff7c 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c08:	2014      	movs	r0, #20
 8000c0a:	f7ff ff79 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 f9e6 	bl	8000fe0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f000 f80f 	bl	8000c38 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c1a:	f000 f831 	bl	8000c80 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <ssd1306_Init+0xd0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <ssd1306_Init+0xd0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c2a:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <ssd1306_Init+0xd0>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	711a      	strb	r2, [r3, #4]
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000ca8 	.word	0x20000ca8

08000c38 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	e00d      	b.n	8000c64 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <ssd1306_Fill+0x1a>
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e000      	b.n	8000c54 <ssd1306_Fill+0x1c>
 8000c52:	21ff      	movs	r1, #255	; 0xff
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <ssd1306_Fill+0x44>)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4413      	add	r3, r2
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6a:	d3ed      	bcc.n	8000c48 <ssd1306_Fill+0x10>
    }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200008a8 	.word	0x200008a8

08000c80 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e016      	b.n	8000cba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	3b50      	subs	r3, #80	; 0x50
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff34 	bl	8000b00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f7ff ff31 	bl	8000b00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c9e:	2010      	movs	r0, #16
 8000ca0:	f7ff ff2e 	bl	8000b00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	01db      	lsls	r3, r3, #7
 8000ca8:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <ssd1306_UpdateScreen+0x4c>)
 8000caa:	4413      	add	r3, r2
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff3e 	bl	8000b30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b07      	cmp	r3, #7
 8000cbe:	d9e5      	bls.n	8000c8c <ssd1306_UpdateScreen+0xc>
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200008a8 	.word	0x200008a8

08000cd0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	71bb      	strb	r3, [r7, #6]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db3d      	blt.n	8000d66 <ssd1306_DrawPixel+0x96>
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	2b3f      	cmp	r3, #63	; 0x3f
 8000cee:	d83a      	bhi.n	8000d66 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d11a      	bne.n	8000d2c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	08db      	lsrs	r3, r3, #3
 8000cfc:	b2d8      	uxtb	r0, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	01db      	lsls	r3, r3, #7
 8000d02:	4413      	add	r3, r2
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <ssd1306_DrawPixel+0xa4>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	b25a      	sxtb	r2, r3
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b259      	sxtb	r1, r3
 8000d1c:	79fa      	ldrb	r2, [r7, #7]
 8000d1e:	4603      	mov	r3, r0
 8000d20:	01db      	lsls	r3, r3, #7
 8000d22:	4413      	add	r3, r2
 8000d24:	b2c9      	uxtb	r1, r1
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <ssd1306_DrawPixel+0xa4>)
 8000d28:	54d1      	strb	r1, [r2, r3]
 8000d2a:	e01d      	b.n	8000d68 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	b2d8      	uxtb	r0, r3
 8000d34:	4603      	mov	r3, r0
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <ssd1306_DrawPixel+0xa4>)
 8000d3c:	5cd3      	ldrb	r3, [r2, r3]
 8000d3e:	b25a      	sxtb	r2, r3
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	4013      	ands	r3, r2
 8000d54:	b259      	sxtb	r1, r3
 8000d56:	79fa      	ldrb	r2, [r7, #7]
 8000d58:	4603      	mov	r3, r0
 8000d5a:	01db      	lsls	r3, r3, #7
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b2c9      	uxtb	r1, r1
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <ssd1306_DrawPixel+0xa4>)
 8000d62:	54d1      	strb	r1, [r2, r3]
 8000d64:	e000      	b.n	8000d68 <ssd1306_DrawPixel+0x98>
        return;
 8000d66:	bf00      	nop
    }
}
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200008a8 	.word	0x200008a8

08000d78 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	1d38      	adds	r0, r7, #4
 8000d82:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d86:	461a      	mov	r2, r3
 8000d88:	4623      	mov	r3, r4
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b1f      	cmp	r3, #31
 8000d94:	d902      	bls.n	8000d9c <ssd1306_WriteChar+0x24>
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b7e      	cmp	r3, #126	; 0x7e
 8000d9a:	d901      	bls.n	8000da0 <ssd1306_WriteChar+0x28>
        return 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e06d      	b.n	8000e7c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <ssd1306_WriteChar+0x10c>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	793b      	ldrb	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	2b80      	cmp	r3, #128	; 0x80
 8000dac:	dc06      	bgt.n	8000dbc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <ssd1306_WriteChar+0x10c>)
 8000db0:	885b      	ldrh	r3, [r3, #2]
 8000db2:	461a      	mov	r2, r3
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000db8:	2b40      	cmp	r3, #64	; 0x40
 8000dba:	dd01      	ble.n	8000dc0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e05d      	b.n	8000e7c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	e04c      	b.n	8000e60 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	3b20      	subs	r3, #32
 8000dcc:	7979      	ldrb	r1, [r7, #5]
 8000dce:	fb01 f303 	mul.w	r3, r1, r3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	440b      	add	r3, r1
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	e034      	b.n	8000e50 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d012      	beq.n	8000e1c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <ssd1306_WriteChar+0x10c>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4413      	add	r3, r2
 8000e02:	b2d8      	uxtb	r0, r3
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <ssd1306_WriteChar+0x10c>)
 8000e06:	885b      	ldrh	r3, [r3, #2]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	7bba      	ldrb	r2, [r7, #14]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff ff5b 	bl	8000cd0 <ssd1306_DrawPixel>
 8000e1a:	e016      	b.n	8000e4a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <ssd1306_WriteChar+0x10c>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4413      	add	r3, r2
 8000e28:	b2d8      	uxtb	r0, r3
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <ssd1306_WriteChar+0x10c>)
 8000e2c:	885b      	ldrh	r3, [r3, #2]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b2d9      	uxtb	r1, r3
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	f7ff ff43 	bl	8000cd0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	793b      	ldrb	r3, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d3c5      	bcc.n	8000de6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	461a      	mov	r2, r3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d3ad      	bcc.n	8000dc6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <ssd1306_WriteChar+0x10c>)
 8000e6c:	881a      	ldrh	r2, [r3, #0]
 8000e6e:	793b      	ldrb	r3, [r7, #4]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4413      	add	r3, r2
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <ssd1306_WriteChar+0x10c>)
 8000e78:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3724      	adds	r7, #36	; 0x24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	20000ca8 	.word	0x20000ca8

08000e88 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	1d38      	adds	r0, r7, #4
 8000e92:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e96:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000e98:	e012      	b.n	8000ec0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	7818      	ldrb	r0, [r3, #0]
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	1d3a      	adds	r2, r7, #4
 8000ea2:	ca06      	ldmia	r2, {r1, r2}
 8000ea4:	f7ff ff68 	bl	8000d78 <ssd1306_WriteChar>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d002      	beq.n	8000eba <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	e008      	b.n	8000ecc <ssd1306_WriteString+0x44>
        }
        str++;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e8      	bne.n	8000e9a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	781b      	ldrb	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <ssd1306_SetCursor+0x2c>)
 8000eea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <ssd1306_SetCursor+0x2c>)
 8000ef2:	805a      	strh	r2, [r3, #2]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20000ca8 	.word	0x20000ca8

08000f04 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	603a      	str	r2, [r7, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	460b      	mov	r3, r1
 8000f14:	71bb      	strb	r3, [r7, #6]
 8000f16:	4613      	mov	r3, r2
 8000f18:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	3307      	adds	r3, #7
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da00      	bge.n	8000f24 <ssd1306_DrawBitmap+0x20>
 8000f22:	3307      	adds	r3, #7
 8000f24:	10db      	asrs	r3, r3, #3
 8000f26:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db3e      	blt.n	8000fb2 <ssd1306_DrawBitmap+0xae>
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	2b3f      	cmp	r3, #63	; 0x3f
 8000f38:	d83b      	bhi.n	8000fb2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73bb      	strb	r3, [r7, #14]
 8000f3e:	e033      	b.n	8000fa8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	737b      	strb	r3, [r7, #13]
 8000f44:	e026      	b.n	8000f94 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000f46:	7b7b      	ldrb	r3, [r7, #13]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e00d      	b.n	8000f74 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	7b7a      	ldrb	r2, [r7, #13]
 8000f64:	08d2      	lsrs	r2, r2, #3
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	4413      	add	r3, r2
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	da08      	bge.n	8000f8e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	4413      	add	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	7f3a      	ldrb	r2, [r7, #28]
 8000f86:	79b9      	ldrb	r1, [r7, #6]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fea1 	bl	8000cd0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	3301      	adds	r3, #1
 8000f92:	737b      	strb	r3, [r7, #13]
 8000f94:	7b7a      	ldrb	r2, [r7, #13]
 8000f96:	797b      	ldrb	r3, [r7, #5]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3d4      	bcc.n	8000f46 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73bb      	strb	r3, [r7, #14]
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	71bb      	strb	r3, [r7, #6]
 8000fa8:	7bba      	ldrb	r2, [r7, #14]
 8000faa:	7e3b      	ldrb	r3, [r7, #24]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3c7      	bcc.n	8000f40 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000fb0:	e000      	b.n	8000fb4 <ssd1306_DrawBitmap+0xb0>
        return;
 8000fb2:	bf00      	nop
}
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000fc4:	2381      	movs	r3, #129	; 0x81
 8000fc6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fd98 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fd94 	bl	8000b00 <ssd1306_WriteCommand>
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000ff0:	23af      	movs	r3, #175	; 0xaf
 8000ff2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <ssd1306_SetDisplayOn+0x38>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	715a      	strb	r2, [r3, #5]
 8000ffa:	e004      	b.n	8001006 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000ffc:	23ae      	movs	r3, #174	; 0xae
 8000ffe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <ssd1306_SetDisplayOn+0x38>)
 8001002:	2200      	movs	r2, #0
 8001004:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fd79 	bl	8000b00 <ssd1306_WriteCommand>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000ca8 	.word	0x20000ca8

0800101c <ssd1306_TestFonts1>:
   
    HAL_Delay(1000);
}


void ssd1306_TestFonts1() {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fe06 	bl	8000c38 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4619      	mov	r1, r3
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff ff4f 	bl	8000ed4 <ssd1306_SetCursor>
    ssd1306_WriteString("OHMIO BOX", Font_11x18, White);
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <ssd1306_TestFonts1+0x88>)
 8001038:	2301      	movs	r3, #1
 800103a:	ca06      	ldmia	r2, {r1, r2}
 800103c:	481a      	ldr	r0, [pc, #104]	; (80010a8 <ssd1306_TestFonts1+0x8c>)
 800103e:	f7ff ff23 	bl	8000e88 <ssd1306_WriteString>
    y += 26;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	331a      	adds	r3, #26
 8001046:	71fb      	strb	r3, [r7, #7]
    #endif



    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4619      	mov	r1, r3
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff ff41 	bl	8000ed4 <ssd1306_SetCursor>
    ssd1306_WriteString("Web 3.0 for", Font_7x10, White);
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <ssd1306_TestFonts1+0x90>)
 8001054:	2301      	movs	r3, #1
 8001056:	ca06      	ldmia	r2, {r1, r2}
 8001058:	4815      	ldr	r0, [pc, #84]	; (80010b0 <ssd1306_TestFonts1+0x94>)
 800105a:	f7ff ff15 	bl	8000e88 <ssd1306_WriteString>
    y += 10;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	330a      	adds	r3, #10
 8001062:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4619      	mov	r1, r3
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ff33 	bl	8000ed4 <ssd1306_SetCursor>
    ssd1306_WriteString("Broadcast Industry", Font_6x8, White);
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <ssd1306_TestFonts1+0x98>)
 8001070:	2301      	movs	r3, #1
 8001072:	ca06      	ldmia	r2, {r1, r2}
 8001074:	4810      	ldr	r0, [pc, #64]	; (80010b8 <ssd1306_TestFonts1+0x9c>)
 8001076:	f7ff ff07 	bl	8000e88 <ssd1306_WriteString>
    y += 10;
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	330a      	adds	r3, #10
 800107e:	71fb      	strb	r3, [r7, #7]
    #endif

#ifdef SSD1306_INCLUDE_FONT_6x8
   ssd1306_SetCursor(2, y);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4619      	mov	r1, r3
 8001084:	2002      	movs	r0, #2
 8001086:	f7ff ff25 	bl	8000ed4 <ssd1306_SetCursor>
   ssd1306_WriteString("Version 1.1", Font_6x8, White);
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <ssd1306_TestFonts1+0x98>)
 800108c:	2301      	movs	r3, #1
 800108e:	ca06      	ldmia	r2, {r1, r2}
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <ssd1306_TestFonts1+0xa0>)
 8001092:	f7ff fef9 	bl	8000e88 <ssd1306_WriteString>
   #endif

    ssd1306_UpdateScreen();
 8001096:	f7ff fdf3 	bl	8000c80 <ssd1306_UpdateScreen>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000010 	.word	0x20000010
 80010a8:	08005ab4 	.word	0x08005ab4
 80010ac:	20000008 	.word	0x20000008
 80010b0:	08005ac0 	.word	0x08005ac0
 80010b4:	20000000 	.word	0x20000000
 80010b8:	08005acc 	.word	0x08005acc
 80010bc:	08005ae0 	.word	0x08005ae0

080010c0 <ssd1306_PrintPrincipalMenu>:
void ssd1306_PrintSettingsToolbar(){
	  ssd1306_DrawBitmap(80,0,garfield_128x64,128,64,Black);
	    ssd1306_UpdateScreen();
}

void ssd1306_PrintPrincipalMenu(int value, int indexMenu, int screen){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fdaa 	bl	8000c38 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 80010e4:	7ffb      	ldrb	r3, [r7, #31]
 80010e6:	4619      	mov	r1, r3
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff fef3 	bl	8000ed4 <ssd1306_SetCursor>
	    ssd1306_WriteString("MENU", Font_11x18, White);
 80010ee:	4a42      	ldr	r2, [pc, #264]	; (80011f8 <ssd1306_PrintPrincipalMenu+0x138>)
 80010f0:	2301      	movs	r3, #1
 80010f2:	ca06      	ldmia	r2, {r1, r2}
 80010f4:	4841      	ldr	r0, [pc, #260]	; (80011fc <ssd1306_PrintPrincipalMenu+0x13c>)
 80010f6:	f7ff fec7 	bl	8000e88 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 80010fa:	7ffb      	ldrb	r3, [r7, #31]
 80010fc:	3314      	adds	r3, #20
 80010fe:	77fb      	strb	r3, [r7, #31]
	    #endif

	    #ifdef SSD1306_INCLUDE_FONT_7x10
	    ssd1306_SetCursor(2, y);
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	4619      	mov	r1, r3
 8001104:	2002      	movs	r0, #2
 8001106:	f7ff fee5 	bl	8000ed4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d106      	bne.n	800111e <ssd1306_PrintPrincipalMenu+0x5e>
	        ssd1306_WriteString("DASHBOARD", Font_7x10, Black);
 8001110:	4a3b      	ldr	r2, [pc, #236]	; (8001200 <ssd1306_PrintPrincipalMenu+0x140>)
 8001112:	2300      	movs	r3, #0
 8001114:	ca06      	ldmia	r2, {r1, r2}
 8001116:	483b      	ldr	r0, [pc, #236]	; (8001204 <ssd1306_PrintPrincipalMenu+0x144>)
 8001118:	f7ff feb6 	bl	8000e88 <ssd1306_WriteString>
 800111c:	e005      	b.n	800112a <ssd1306_PrintPrincipalMenu+0x6a>
	    }else{
	        ssd1306_WriteString("DASHBOARD", Font_7x10, White);
 800111e:	4a38      	ldr	r2, [pc, #224]	; (8001200 <ssd1306_PrintPrincipalMenu+0x140>)
 8001120:	2301      	movs	r3, #1
 8001122:	ca06      	ldmia	r2, {r1, r2}
 8001124:	4837      	ldr	r0, [pc, #220]	; (8001204 <ssd1306_PrintPrincipalMenu+0x144>)
 8001126:	f7ff feaf 	bl	8000e88 <ssd1306_WriteString>

	    }
	    y += 10;
 800112a:	7ffb      	ldrb	r3, [r7, #31]
 800112c:	330a      	adds	r3, #10
 800112e:	77fb      	strb	r3, [r7, #31]
	    #endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	4619      	mov	r1, r3
 8001134:	2002      	movs	r0, #2
 8001136:	f7ff fecd 	bl	8000ed4 <ssd1306_SetCursor>
	    if(indexMenu==1){
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <ssd1306_PrintPrincipalMenu+0x8e>
	        ssd1306_WriteString("ENERGY", Font_7x10, Black);
 8001140:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <ssd1306_PrintPrincipalMenu+0x140>)
 8001142:	2300      	movs	r3, #0
 8001144:	ca06      	ldmia	r2, {r1, r2}
 8001146:	4830      	ldr	r0, [pc, #192]	; (8001208 <ssd1306_PrintPrincipalMenu+0x148>)
 8001148:	f7ff fe9e 	bl	8000e88 <ssd1306_WriteString>
 800114c:	e005      	b.n	800115a <ssd1306_PrintPrincipalMenu+0x9a>
	    }
	    else{
	        ssd1306_WriteString("ENERGY", Font_7x10, White);
 800114e:	4a2c      	ldr	r2, [pc, #176]	; (8001200 <ssd1306_PrintPrincipalMenu+0x140>)
 8001150:	2301      	movs	r3, #1
 8001152:	ca06      	ldmia	r2, {r1, r2}
 8001154:	482c      	ldr	r0, [pc, #176]	; (8001208 <ssd1306_PrintPrincipalMenu+0x148>)
 8001156:	f7ff fe97 	bl	8000e88 <ssd1306_WriteString>

	    }
		y += 10;
 800115a:	7ffb      	ldrb	r3, [r7, #31]
 800115c:	330a      	adds	r3, #10
 800115e:	77fb      	strb	r3, [r7, #31]

		#endif
		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 8001160:	7ffb      	ldrb	r3, [r7, #31]
 8001162:	4619      	mov	r1, r3
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff feb5 	bl	8000ed4 <ssd1306_SetCursor>
	    if(indexMenu==2){
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d106      	bne.n	800117e <ssd1306_PrintPrincipalMenu+0xbe>
	        ssd1306_WriteString("SETTINGS", Font_7x10, Black);
 8001170:	4a23      	ldr	r2, [pc, #140]	; (8001200 <ssd1306_PrintPrincipalMenu+0x140>)
 8001172:	2300      	movs	r3, #0
 8001174:	ca06      	ldmia	r2, {r1, r2}
 8001176:	4825      	ldr	r0, [pc, #148]	; (800120c <ssd1306_PrintPrincipalMenu+0x14c>)
 8001178:	f7ff fe86 	bl	8000e88 <ssd1306_WriteString>
 800117c:	e005      	b.n	800118a <ssd1306_PrintPrincipalMenu+0xca>
	    }
	    else{
	        ssd1306_WriteString("SETTINGS", Font_7x10, White);
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <ssd1306_PrintPrincipalMenu+0x140>)
 8001180:	2301      	movs	r3, #1
 8001182:	ca06      	ldmia	r2, {r1, r2}
 8001184:	4821      	ldr	r0, [pc, #132]	; (800120c <ssd1306_PrintPrincipalMenu+0x14c>)
 8001186:	f7ff fe7f 	bl	8000e88 <ssd1306_WriteString>

	    }
		y += 10;
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	330a      	adds	r3, #10
 800118e:	77fb      	strb	r3, [r7, #31]
		#endif




	         if(value >= 2850 && value <= 2950){
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f640 3221 	movw	r2, #2849	; 0xb21
 8001196:	4293      	cmp	r3, r2
 8001198:	dd0c      	ble.n	80011b4 <ssd1306_PrintPrincipalMenu+0xf4>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f640 3286 	movw	r2, #2950	; 0xb86
 80011a0:	4293      	cmp	r3, r2
 80011a2:	dc07      	bgt.n	80011b4 <ssd1306_PrintPrincipalMenu+0xf4>
	            strcpy(stringDirection, "DERECHA");
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <ssd1306_PrintPrincipalMenu+0x150>)
 80011aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80011b2:	e01b      	b.n	80011ec <ssd1306_PrintPrincipalMenu+0x12c>
	        }
	        else if(value >= 1850 && value <= 1950){
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f240 7239 	movw	r2, #1849	; 0x739
 80011ba:	4293      	cmp	r3, r2
 80011bc:	dd0b      	ble.n	80011d6 <ssd1306_PrintPrincipalMenu+0x116>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f240 729e 	movw	r2, #1950	; 0x79e
 80011c4:	4293      	cmp	r3, r2
 80011c6:	dc06      	bgt.n	80011d6 <ssd1306_PrintPrincipalMenu+0x116>
	            strcpy(stringDirection, "IZQUIERDA");
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <ssd1306_PrintPrincipalMenu+0x154>)
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d0:	c303      	stmia	r3!, {r0, r1}
 80011d2:	801a      	strh	r2, [r3, #0]
 80011d4:	e00a      	b.n	80011ec <ssd1306_PrintPrincipalMenu+0x12c>
	        }
	        else {
	            strcpy(stringDirection, "NORMAL");
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <ssd1306_PrintPrincipalMenu+0x158>)
 80011dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e0:	6018      	str	r0, [r3, #0]
 80011e2:	3304      	adds	r3, #4
 80011e4:	8019      	strh	r1, [r3, #0]
 80011e6:	3302      	adds	r3, #2
 80011e8:	0c0a      	lsrs	r2, r1, #16
 80011ea:	701a      	strb	r2, [r3, #0]
	         //sprintf(screen_str, "%d", screen); // convert index to a string
	         //ssd1306_SetCursor(20, y); // set the cursor position
	         //ssd1306_WriteString(screen_str, Font_7x10, White); // write the string to the display    y += 10;
	         //   #endif

	    ssd1306_UpdateScreen();
 80011ec:	f7ff fd48 	bl	8000c80 <ssd1306_UpdateScreen>
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000010 	.word	0x20000010
 80011fc:	08005aec 	.word	0x08005aec
 8001200:	20000008 	.word	0x20000008
 8001204:	08005af4 	.word	0x08005af4
 8001208:	08005b00 	.word	0x08005b00
 800120c:	08005b08 	.word	0x08005b08
 8001210:	08005b14 	.word	0x08005b14
 8001214:	08005b1c 	.word	0x08005b1c
 8001218:	08005b28 	.word	0x08005b28

0800121c <ssd1306_PrintSettingsMenu>:

void ssd1306_PrintSettingsMenu(int value, int indexMenu, int screen){
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	 uint8_t y = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	77fb      	strb	r3, [r7, #31]
	    char stringDirection[10] = "";
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	f107 0318 	add.w	r3, r7, #24
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	809a      	strh	r2, [r3, #4]

	    ssd1306_Fill(Black);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff fcfc 	bl	8000c38 <ssd1306_Fill>

	    #ifdef SSD1306_INCLUDE_FONT_11x18
	    ssd1306_SetCursor(2, y);
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	4619      	mov	r1, r3
 8001244:	2002      	movs	r0, #2
 8001246:	f7ff fe45 	bl	8000ed4 <ssd1306_SetCursor>
	    ssd1306_WriteString("SETTINGS", Font_11x18, White);
 800124a:	4a42      	ldr	r2, [pc, #264]	; (8001354 <ssd1306_PrintSettingsMenu+0x138>)
 800124c:	2301      	movs	r3, #1
 800124e:	ca06      	ldmia	r2, {r1, r2}
 8001250:	4841      	ldr	r0, [pc, #260]	; (8001358 <ssd1306_PrintSettingsMenu+0x13c>)
 8001252:	f7ff fe19 	bl	8000e88 <ssd1306_WriteString>
	    //ssd1306_DrawRectangle(0,y, 128, 10, White);

	    y += 20;
 8001256:	7ffb      	ldrb	r3, [r7, #31]
 8001258:	3314      	adds	r3, #20
 800125a:	77fb      	strb	r3, [r7, #31]
	    #endif



		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	4619      	mov	r1, r3
 8001260:	2002      	movs	r0, #2
 8001262:	f7ff fe37 	bl	8000ed4 <ssd1306_SetCursor>
	    if(indexMenu==0){
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d106      	bne.n	800127a <ssd1306_PrintSettingsMenu+0x5e>
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, Black);
 800126c:	4a3b      	ldr	r2, [pc, #236]	; (800135c <ssd1306_PrintSettingsMenu+0x140>)
 800126e:	2300      	movs	r3, #0
 8001270:	ca06      	ldmia	r2, {r1, r2}
 8001272:	483b      	ldr	r0, [pc, #236]	; (8001360 <ssd1306_PrintSettingsMenu+0x144>)
 8001274:	f7ff fe08 	bl	8000e88 <ssd1306_WriteString>
 8001278:	e005      	b.n	8001286 <ssd1306_PrintSettingsMenu+0x6a>
	    }
	    else{
	        ssd1306_WriteString("ID: a23d-4f5g6", Font_7x10, White);
 800127a:	4a38      	ldr	r2, [pc, #224]	; (800135c <ssd1306_PrintSettingsMenu+0x140>)
 800127c:	2301      	movs	r3, #1
 800127e:	ca06      	ldmia	r2, {r1, r2}
 8001280:	4837      	ldr	r0, [pc, #220]	; (8001360 <ssd1306_PrintSettingsMenu+0x144>)
 8001282:	f7ff fe01 	bl	8000e88 <ssd1306_WriteString>
	    }
		y += 10;
 8001286:	7ffb      	ldrb	r3, [r7, #31]
 8001288:	330a      	adds	r3, #10
 800128a:	77fb      	strb	r3, [r7, #31]
		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 800128c:	7ffb      	ldrb	r3, [r7, #31]
 800128e:	4619      	mov	r1, r3
 8001290:	2002      	movs	r0, #2
 8001292:	f7ff fe1f 	bl	8000ed4 <ssd1306_SetCursor>
		if(indexMenu==1){
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d106      	bne.n	80012aa <ssd1306_PrintSettingsMenu+0x8e>
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, Black);
 800129c:	4a2f      	ldr	r2, [pc, #188]	; (800135c <ssd1306_PrintSettingsMenu+0x140>)
 800129e:	2300      	movs	r3, #0
 80012a0:	ca06      	ldmia	r2, {r1, r2}
 80012a2:	4830      	ldr	r0, [pc, #192]	; (8001364 <ssd1306_PrintSettingsMenu+0x148>)
 80012a4:	f7ff fdf0 	bl	8000e88 <ssd1306_WriteString>
 80012a8:	e005      	b.n	80012b6 <ssd1306_PrintSettingsMenu+0x9a>
		}
		else{
	        ssd1306_WriteString("OHMIO Box v1.0", Font_7x10, White);
 80012aa:	4a2c      	ldr	r2, [pc, #176]	; (800135c <ssd1306_PrintSettingsMenu+0x140>)
 80012ac:	2301      	movs	r3, #1
 80012ae:	ca06      	ldmia	r2, {r1, r2}
 80012b0:	482c      	ldr	r0, [pc, #176]	; (8001364 <ssd1306_PrintSettingsMenu+0x148>)
 80012b2:	f7ff fde9 	bl	8000e88 <ssd1306_WriteString>
		}
		y += 10;
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
 80012b8:	330a      	adds	r3, #10
 80012ba:	77fb      	strb	r3, [r7, #31]

		#endif

		#ifdef SSD1306_INCLUDE_FONT_7x10
		ssd1306_SetCursor(2, y);
 80012bc:	7ffb      	ldrb	r3, [r7, #31]
 80012be:	4619      	mov	r1, r3
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff fe07 	bl	8000ed4 <ssd1306_SetCursor>
		if(indexMenu==2){
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d106      	bne.n	80012da <ssd1306_PrintSettingsMenu+0xbe>
			ssd1306_WriteString("BACK", Font_7x10, Black);
 80012cc:	4a23      	ldr	r2, [pc, #140]	; (800135c <ssd1306_PrintSettingsMenu+0x140>)
 80012ce:	2300      	movs	r3, #0
 80012d0:	ca06      	ldmia	r2, {r1, r2}
 80012d2:	4825      	ldr	r0, [pc, #148]	; (8001368 <ssd1306_PrintSettingsMenu+0x14c>)
 80012d4:	f7ff fdd8 	bl	8000e88 <ssd1306_WriteString>
 80012d8:	e005      	b.n	80012e6 <ssd1306_PrintSettingsMenu+0xca>
		}
		else{
			ssd1306_WriteString("BACK", Font_7x10, White);
 80012da:	4a20      	ldr	r2, [pc, #128]	; (800135c <ssd1306_PrintSettingsMenu+0x140>)
 80012dc:	2301      	movs	r3, #1
 80012de:	ca06      	ldmia	r2, {r1, r2}
 80012e0:	4821      	ldr	r0, [pc, #132]	; (8001368 <ssd1306_PrintSettingsMenu+0x14c>)
 80012e2:	f7ff fdd1 	bl	8000e88 <ssd1306_WriteString>
		}
		y += 10;
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	330a      	adds	r3, #10
 80012ea:	77fb      	strb	r3, [r7, #31]

		#endif



		 if(value >= 2850 && value <= 2950){
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f640 3221 	movw	r2, #2849	; 0xb21
 80012f2:	4293      	cmp	r3, r2
 80012f4:	dd0c      	ble.n	8001310 <ssd1306_PrintSettingsMenu+0xf4>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f640 3286 	movw	r2, #2950	; 0xb86
 80012fc:	4293      	cmp	r3, r2
 80012fe:	dc07      	bgt.n	8001310 <ssd1306_PrintSettingsMenu+0xf4>
			strcpy(stringDirection, "DERECHA");
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <ssd1306_PrintSettingsMenu+0x150>)
 8001306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130a:	e883 0003 	stmia.w	r3, {r0, r1}
 800130e:	e01b      	b.n	8001348 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else if(value >= 1850 && value <= 1950){
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f240 7239 	movw	r2, #1849	; 0x739
 8001316:	4293      	cmp	r3, r2
 8001318:	dd0b      	ble.n	8001332 <ssd1306_PrintSettingsMenu+0x116>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001320:	4293      	cmp	r3, r2
 8001322:	dc06      	bgt.n	8001332 <ssd1306_PrintSettingsMenu+0x116>
			strcpy(stringDirection, "IZQUIERDA");
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <ssd1306_PrintSettingsMenu+0x154>)
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	ca07      	ldmia	r2, {r0, r1, r2}
 800132c:	c303      	stmia	r3!, {r0, r1}
 800132e:	801a      	strh	r2, [r3, #0]
 8001330:	e00a      	b.n	8001348 <ssd1306_PrintSettingsMenu+0x12c>
		}
		else {
			strcpy(stringDirection, "NORMAL");
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <ssd1306_PrintSettingsMenu+0x158>)
 8001338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800133c:	6018      	str	r0, [r3, #0]
 800133e:	3304      	adds	r3, #4
 8001340:	8019      	strh	r1, [r3, #0]
 8001342:	3302      	adds	r3, #2
 8001344:	0c0a      	lsrs	r2, r1, #16
 8001346:	701a      	strb	r2, [r3, #0]
		}

	    ssd1306_UpdateScreen();
 8001348:	f7ff fc9a 	bl	8000c80 <ssd1306_UpdateScreen>
}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000010 	.word	0x20000010
 8001358:	08005b08 	.word	0x08005b08
 800135c:	20000008 	.word	0x20000008
 8001360:	08005b30 	.word	0x08005b30
 8001364:	08005b40 	.word	0x08005b40
 8001368:	08005b50 	.word	0x08005b50
 800136c:	08005b14 	.word	0x08005b14
 8001370:	08005b1c 	.word	0x08005b1c
 8001374:	08005b28 	.word	0x08005b28

08001378 <ssd1306_DisplayAnalogValue>:

void ssd1306_DisplayAnalogValue(int value, int indexMenu, int screen) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	if(screen==0){
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <ssd1306_DisplayAnalogValue+0x1e>
		   ssd1306_PrintPrincipalMenu(value, indexMenu, screen);
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff fe96 	bl	80010c0 <ssd1306_PrintPrincipalMenu>
 8001394:	e007      	b.n	80013a6 <ssd1306_DisplayAnalogValue+0x2e>
	}else if (screen==3){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d104      	bne.n	80013a6 <ssd1306_DisplayAnalogValue+0x2e>
		   ssd1306_PrintSettingsMenu(value, indexMenu, screen);
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff ff3b 	bl	800121c <ssd1306_PrintSettingsMenu>
	}
    HAL_Delay(50);
 80013a6:	2032      	movs	r0, #50	; 0x32
 80013a8:	f000 fb4e 	bl	8001a48 <HAL_Delay>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <ssd1306_TestDrawBitmapOHMIO>:
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestDrawBitmapOHMIO()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fc3c 	bl	8000c38 <ssd1306_Fill>
	    ssd1306_DrawBitmap(32,0,ohmio_logo_fondoblanco,72,64,White);
 80013c0:	2301      	movs	r3, #1
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2348      	movs	r3, #72	; 0x48
 80013ca:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <ssd1306_TestDrawBitmapOHMIO+0x34>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	2020      	movs	r0, #32
 80013d0:	f7ff fd98 	bl	8000f04 <ssd1306_DrawBitmap>
	    ssd1306_UpdateScreen();
 80013d4:	f7ff fc54 	bl	8000c80 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 80013d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013dc:	f000 fb34 	bl	8001a48 <HAL_Delay>

}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	08007650 	.word	0x08007650

080013ec <ssd1306_OhmioSplash>:



void ssd1306_OhmioSplash() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80013f0:	f7ff fbb8 	bl	8000b64 <ssd1306_Init>
    ssd1306_TestFonts1();
 80013f4:	f7ff fe12 	bl	800101c <ssd1306_TestFonts1>
    HAL_Delay(3000);
 80013f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013fc:	f000 fb24 	bl	8001a48 <HAL_Delay>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <ssd1306_OhmioMenuPrincipal>:

void ssd1306_OhmioMenuPrincipal() {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8001408:	f7ff fbac 	bl	8000b64 <ssd1306_Init>
    ssd1306_TestDrawBitmapOHMIO();
 800140c:	f7ff ffd2 	bl	80013b4 <ssd1306_TestDrawBitmapOHMIO>
    HAL_Delay(3000);
 8001410:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001414:	f000 fb18 	bl	8001a48 <HAL_Delay>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_MspInit+0x44>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_MspInit+0x44>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_MspInit+0x44>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_MspInit+0x44>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_MspInit+0x44>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x44>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <HAL_ADC_MspInit+0x74>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d123      	bne.n	80014ce <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_ADC_MspInit+0x78>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_ADC_MspInit+0x78>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_ADC_MspInit+0x78>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_ADC_MspInit+0x78>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_ADC_MspInit+0x78>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_ADC_MspInit+0x78>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ba:	2303      	movs	r3, #3
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_ADC_MspInit+0x7c>)
 80014ca:	f001 fb1b 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40012000 	.word	0x40012000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	; 0x38
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a4e      	ldr	r2, [pc, #312]	; (800163c <HAL_ETH_MspInit+0x158>)
 8001502:	4293      	cmp	r3, r2
 8001504:	f040 8096 	bne.w	8001634 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001508:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800150e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	623b      	str	r3, [r7, #32]
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4a46      	ldr	r2, [pc, #280]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800152a:	6313      	str	r3, [r2, #48]	; 0x30
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a40      	ldr	r2, [pc, #256]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800153e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001550:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6313      	str	r3, [r2, #48]	; 0x30
 800155c:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a34      	ldr	r2, [pc, #208]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b32      	ldr	r3, [pc, #200]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a28      	ldr	r2, [pc, #160]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 800159e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_ETH_MspInit+0x15c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015b0:	2332      	movs	r3, #50	; 0x32
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015c0:	230b      	movs	r3, #11
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	481e      	ldr	r0, [pc, #120]	; (8001644 <HAL_ETH_MspInit+0x160>)
 80015cc:	f001 fa9a 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015d0:	2386      	movs	r3, #134	; 0x86
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e0:	230b      	movs	r3, #11
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	4817      	ldr	r0, [pc, #92]	; (8001648 <HAL_ETH_MspInit+0x164>)
 80015ec:	f001 fa8a 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001602:	230b      	movs	r3, #11
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <HAL_ETH_MspInit+0x168>)
 800160e:	f001 fa79 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001612:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001624:	230b      	movs	r3, #11
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <HAL_ETH_MspInit+0x16c>)
 8001630:	f001 fa68 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3738      	adds	r7, #56	; 0x38
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40028000 	.word	0x40028000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020800 	.word	0x40020800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40021800 	.word	0x40021800

08001654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0aa      	sub	sp, #168	; 0xa8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2284      	movs	r2, #132	; 0x84
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fa09 	bl	8005a8c <memset>
  if(hi2c->Instance==I2C2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a21      	ldr	r2, [pc, #132]	; (8001704 <HAL_I2C_MspInit+0xb0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d13b      	bne.n	80016fc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001688:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800168a:	2300      	movs	r3, #0
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fea0 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800169e:	f7ff fa23 	bl	8000ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_I2C_MspInit+0xb4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a18      	ldr	r2, [pc, #96]	; (8001708 <HAL_I2C_MspInit+0xb4>)
 80016a8:	f043 0320 	orr.w	r3, r3, #32
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_I2C_MspInit+0xb4>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016d2:	2304      	movs	r3, #4
 80016d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016dc:	4619      	mov	r1, r3
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <HAL_I2C_MspInit+0xb8>)
 80016e0:	f001 fa10 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0xb4>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_I2C_MspInit+0xb4>)
 80016ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_I2C_MspInit+0xb4>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	37a8      	adds	r7, #168	; 0xa8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005800 	.word	0x40005800
 8001708:	40023800 	.word	0x40023800
 800170c:	40021400 	.word	0x40021400

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0aa      	sub	sp, #168	; 0xa8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2284      	movs	r2, #132	; 0x84
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f004 f9ab 	bl	8005a8c <memset>
  if(huart->Instance==USART3)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <HAL_UART_MspInit+0xb4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d13c      	bne.n	80017ba <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001744:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001746:	2300      	movs	r3, #0
 8001748:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fe42 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800175a:	f7ff f9c5 	bl	8000ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800178e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179c:	2301      	movs	r3, #1
 800179e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017a8:	2307      	movs	r3, #7
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_UART_MspInit+0xbc>)
 80017b6:	f001 f9a5 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	37a8      	adds	r7, #168	; 0xa8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40004800 	.word	0x40004800
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020c00 	.word	0x40020c00

080017d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0ac      	sub	sp, #176	; 0xb0
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	2284      	movs	r2, #132	; 0x84
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 f94b 	bl	8005a8c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017fe:	d159      	bne.n	80018b4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001800:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001804:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180c:	f107 0318 	add.w	r3, r7, #24
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fde1 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800181c:	f7ff f964 	bl	8000ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_PCD_MspInit+0xec>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_PCD_MspInit+0xec>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6313      	str	r3, [r2, #48]	; 0x30
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_PCD_MspInit+0xec>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001838:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800183c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001852:	230a      	movs	r3, #10
 8001854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185c:	4619      	mov	r1, r3
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <HAL_PCD_MspInit+0xf0>)
 8001860:	f001 f950 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800187c:	4619      	mov	r1, r3
 800187e:	4810      	ldr	r0, [pc, #64]	; (80018c0 <HAL_PCD_MspInit+0xf0>)
 8001880:	f001 f940 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_PCD_MspInit+0xec>)
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <HAL_PCD_MspInit+0xec>)
 800188a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188e:	6353      	str	r3, [r2, #52]	; 0x34
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_PCD_MspInit+0xec>)
 8001892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_PCD_MspInit+0xec>)
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_PCD_MspInit+0xec>)
 80018a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a6:	6453      	str	r3, [r2, #68]	; 0x44
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_PCD_MspInit+0xec>)
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	37b0      	adds	r7, #176	; 0xb0
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001910:	f000 f87a 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001942:	490e      	ldr	r1, [pc, #56]	; (800197c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001958:	4c0b      	ldr	r4, [pc, #44]	; (8001988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001966:	f7ff ffd7 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196a:	f004 f86b 	bl	8005a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7fe fdcd 	bl	800050c <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001974:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001980:	080078b8 	.word	0x080078b8
  ldr r2, =_sbss
 8001984:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001988:	20000cb4 	.word	0x20000cb4

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>

0800198e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001992:	2003      	movs	r0, #3
 8001994:	f000 fd5c 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001998:	2000      	movs	r0, #0
 800199a:	f000 f805 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199e:	f7ff fd3d 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fd69 	bl	800249e <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 fd3f 	bl	8002466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000018 	.word	0x20000018
 8001a00:	20000020 	.word	0x20000020
 8001a04:	2000001c 	.word	0x2000001c

08001a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000020 	.word	0x20000020
 8001a2c:	20000cb0 	.word	0x20000cb0

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000cb0 	.word	0x20000cb0

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000020 	.word	0x20000020

08001a90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e031      	b.n	8001b0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fcd8 	bl	8001464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_ADC_Init+0x84>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fb0a 	bl	80020f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
 8001afa:	e001      	b.n	8001b00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	ffffeefd 	.word	0xffffeefd

08001b18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_Start+0x1a>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e0ad      	b.n	8001c8e <HAL_ADC_Start+0x176>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d018      	beq.n	8001b7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_ADC_Start+0x184>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a50      	ldr	r2, [pc, #320]	; (8001ca0 <HAL_ADC_Start+0x188>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0c9a      	lsrs	r2, r3, #18
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b6c:	e002      	b.n	8001b74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f9      	bne.n	8001b6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d175      	bne.n	8001c74 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8c:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <HAL_ADC_Start+0x18c>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f023 0206 	bic.w	r2, r3, #6
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
 8001bd0:	e002      	b.n	8001bd8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001be8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_ADC_Start+0x190>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d143      	bne.n	8001c8c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	e03a      	b.n	8001c8c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a24      	ldr	r2, [pc, #144]	; (8001cac <HAL_ADC_Start+0x194>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d10e      	bne.n	8001c3e <HAL_ADC_Start+0x126>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_ADC_Start+0x190>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d120      	bne.n	8001c8c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_ADC_Start+0x198>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d11b      	bne.n	8001c8c <HAL_ADC_Start+0x174>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d114      	bne.n	8001c8c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e00b      	b.n	8001c8c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000018 	.word	0x20000018
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	fffff8fe 	.word	0xfffff8fe
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	40012000 	.word	0x40012000
 8001cb0:	40012200 	.word	0x40012200

08001cb4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_Stop+0x16>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e01f      	b.n	8001d0a <HAL_ADC_Stop+0x56>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d107      	bne.n	8001d00 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_ADC_Stop+0x64>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	ffffeefe 	.word	0xffffeefe

08001d1c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d38:	d113      	bne.n	8001d62 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d48:	d10b      	bne.n	8001d62 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f043 0220 	orr.w	r2, r3, #32
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e063      	b.n	8001e2a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d62:	f7ff fe65 	bl	8001a30 <HAL_GetTick>
 8001d66:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d68:	e021      	b.n	8001dae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d01d      	beq.n	8001dae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_ADC_PollForConversion+0x6c>
 8001d78:	f7ff fe5a 	bl	8001a30 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d212      	bcs.n	8001dae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d00b      	beq.n	8001dae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e03d      	b.n	8001e2a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d1d6      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0212 	mvn.w	r2, #18
 8001dc4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d123      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11f      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d111      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1c>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e136      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x28a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b09      	cmp	r3, #9
 8001e76:	d93a      	bls.n	8001eee <HAL_ADC_ConfigChannel+0xa2>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e80:	d035      	beq.n	8001eee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68d9      	ldr	r1, [r3, #12]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	3b1e      	subs	r3, #30
 8001e98:	2207      	movs	r2, #7
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a8d      	ldr	r2, [pc, #564]	; (80020e4 <HAL_ADC_ConfigChannel+0x298>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d10a      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68d9      	ldr	r1, [r3, #12]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	061a      	lsls	r2, r3, #24
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec6:	e035      	b.n	8001f34 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4403      	add	r3, r0
 8001ee0:	3b1e      	subs	r3, #30
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eec:	e022      	b.n	8001f34 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6919      	ldr	r1, [r3, #16]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	2207      	movs	r2, #7
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	400a      	ands	r2, r1
 8001f10:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6919      	ldr	r1, [r3, #16]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d824      	bhi.n	8001f86 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3b05      	subs	r3, #5
 8001f4e:	221f      	movs	r2, #31
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43da      	mvns	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b05      	subs	r3, #5
 8001f78:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	635a      	str	r2, [r3, #52]	; 0x34
 8001f84:	e04c      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d824      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b23      	subs	r3, #35	; 0x23
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b23      	subs	r3, #35	; 0x23
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd6:	e023      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b41      	subs	r3, #65	; 0x41
 8001fea:	221f      	movs	r2, #31
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b41      	subs	r3, #65	; 0x41
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10a      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1f4>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002032:	d105      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a2c      	ldr	r2, [pc, #176]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 800203a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800203e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10f      	bne.n	800206a <HAL_ADC_ConfigChannel+0x21e>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b12      	cmp	r3, #18
 8002050:	d10b      	bne.n	800206a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4a25      	ldr	r2, [pc, #148]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002058:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800205c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a22      	ldr	r2, [pc, #136]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002068:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_ADC_ConfigChannel+0x29c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d12b      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x280>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_ADC_ConfigChannel+0x298>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x23a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b11      	cmp	r3, #17
 8002084:	d122      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 800208c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002090:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a15      	ldr	r2, [pc, #84]	; (80020ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800209c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_ADC_ConfigChannel+0x298>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_ADC_ConfigChannel+0x2a4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0c9a      	lsrs	r2, r3, #18
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020be:	e002      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	10000012 	.word	0x10000012
 80020e8:	40012000 	.word	0x40012000
 80020ec:	40012300 	.word	0x40012300
 80020f0:	20000018 	.word	0x20000018
 80020f4:	431bde83 	.word	0x431bde83

080020f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002100:	4b78      	ldr	r3, [pc, #480]	; (80022e4 <ADC_Init+0x1ec>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a77      	ldr	r2, [pc, #476]	; (80022e4 <ADC_Init+0x1ec>)
 8002106:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800210a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800210c:	4b75      	ldr	r3, [pc, #468]	; (80022e4 <ADC_Init+0x1ec>)
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4973      	ldr	r1, [pc, #460]	; (80022e4 <ADC_Init+0x1ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	021a      	lsls	r2, r3, #8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800214c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6899      	ldr	r1, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <ADC_Init+0x1f0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d022      	beq.n	80021d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800219a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	e00f      	b.n	80021f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0202 	bic.w	r2, r2, #2
 8002200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	005a      	lsls	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01b      	beq.n	8002258 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800223e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	3b01      	subs	r3, #1
 800224c:	035a      	lsls	r2, r3, #13
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	e007      	b.n	8002268 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002266:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	3b01      	subs	r3, #1
 8002284:	051a      	lsls	r2, r3, #20
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800229c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022aa:	025a      	lsls	r2, r3, #9
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	029a      	lsls	r2, r3, #10
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40012300 	.word	0x40012300
 80022e8:	0f000001 	.word	0x0f000001

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <__NVIC_SetPriorityGrouping+0x40>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	4313      	orrs	r3, r2
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	; (800232c <__NVIC_SetPriorityGrouping+0x40>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	05fa0000 	.word	0x05fa0000

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff47 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff5c 	bl	8002334 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8e 	bl	80023a4 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5d 	bl	8002350 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffb0 	bl	800240c <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06a      	b.n	80025a0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2223      	movs	r2, #35	; 0x23
 80024d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff f801 	bl	80014e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_ETH_Init+0xf0>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <HAL_ETH_Init+0xf0>)
 80024e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_ETH_Init+0xf0>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_ETH_Init+0xf4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a2b      	ldr	r2, [pc, #172]	; (80025ac <HAL_ETH_Init+0xf4>)
 8002500:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002504:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_ETH_Init+0xf4>)
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4927      	ldr	r1, [pc, #156]	; (80025ac <HAL_ETH_Init+0xf4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <HAL_ETH_Init+0xf4>)
 8002516:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800252e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002530:	f7ff fa7e 	bl	8001a30 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002536:	e011      	b.n	800255c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002538:	f7ff fa7a 	bl	8001a30 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002546:	d909      	bls.n	800255c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2204      	movs	r2, #4
 800254c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	22e0      	movs	r2, #224	; 0xe0
 8002554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e021      	b.n	80025a0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e4      	bne.n	8002538 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f958 	bl	8002824 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f9ff 	bl	8002978 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa55 	bl	8002a2a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	461a      	mov	r2, r3
 8002586:	2100      	movs	r1, #0
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f9bd 	bl	8002908 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2210      	movs	r2, #16
 800259a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800

080025b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4b51      	ldr	r3, [pc, #324]	; (800270c <ETH_SetMACConfig+0x15c>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	7c1b      	ldrb	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <ETH_SetMACConfig+0x28>
 80025d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025d6:	e000      	b.n	80025da <ETH_SetMACConfig+0x2a>
 80025d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	7c5b      	ldrb	r3, [r3, #17]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <ETH_SetMACConfig+0x38>
 80025e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025e6:	e000      	b.n	80025ea <ETH_SetMACConfig+0x3a>
 80025e8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	7fdb      	ldrb	r3, [r3, #31]
 80025f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	7f92      	ldrb	r2, [r2, #30]
 8002604:	2a00      	cmp	r2, #0
 8002606:	d102      	bne.n	800260e <ETH_SetMACConfig+0x5e>
 8002608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260c:	e000      	b.n	8002610 <ETH_SetMACConfig+0x60>
 800260e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002610:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	7f1b      	ldrb	r3, [r3, #28]
 8002616:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002618:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800261e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	791b      	ldrb	r3, [r3, #4]
 8002624:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002626:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800262e:	2a00      	cmp	r2, #0
 8002630:	d102      	bne.n	8002638 <ETH_SetMACConfig+0x88>
 8002632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002636:	e000      	b.n	800263a <ETH_SetMACConfig+0x8a>
 8002638:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800263a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	7bdb      	ldrb	r3, [r3, #15]
 8002640:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002642:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002648:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002650:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002652:	4313      	orrs	r3, r2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800266a:	2001      	movs	r0, #1
 800266c:	f7ff f9ec 	bl	8001a48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002696:	2a00      	cmp	r2, #0
 8002698:	d101      	bne.n	800269e <ETH_SetMACConfig+0xee>
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	e000      	b.n	80026a0 <ETH_SetMACConfig+0xf0>
 800269e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80026ae:	2a01      	cmp	r2, #1
 80026b0:	d101      	bne.n	80026b6 <ETH_SetMACConfig+0x106>
 80026b2:	2208      	movs	r2, #8
 80026b4:	e000      	b.n	80026b8 <ETH_SetMACConfig+0x108>
 80026b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80026c0:	2a01      	cmp	r2, #1
 80026c2:	d101      	bne.n	80026c8 <ETH_SetMACConfig+0x118>
 80026c4:	2204      	movs	r2, #4
 80026c6:	e000      	b.n	80026ca <ETH_SetMACConfig+0x11a>
 80026c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d101      	bne.n	80026da <ETH_SetMACConfig+0x12a>
 80026d6:	2202      	movs	r2, #2
 80026d8:	e000      	b.n	80026dc <ETH_SetMACConfig+0x12c>
 80026da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026dc:	4313      	orrs	r3, r2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff f9a7 	bl	8001a48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	619a      	str	r2, [r3, #24]
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	ff20810f 	.word	0xff20810f

08002710 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <ETH_SetDMAConfig+0x110>)
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	7b1b      	ldrb	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <ETH_SetDMAConfig+0x2c>
 8002736:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800273a:	e000      	b.n	800273e <ETH_SetDMAConfig+0x2e>
 800273c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	7b5b      	ldrb	r3, [r3, #13]
 8002742:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002744:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	7f52      	ldrb	r2, [r2, #29]
 800274a:	2a00      	cmp	r2, #0
 800274c:	d102      	bne.n	8002754 <ETH_SetDMAConfig+0x44>
 800274e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002752:	e000      	b.n	8002756 <ETH_SetDMAConfig+0x46>
 8002754:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002756:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7b9b      	ldrb	r3, [r3, #14]
 800275c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800275e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002764:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
 800276a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800276c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	7f9b      	ldrb	r3, [r3, #30]
 8002772:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002774:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800277a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002782:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002784:	4313      	orrs	r3, r2
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002794:	461a      	mov	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7ff f94e 	bl	8001a48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b4:	461a      	mov	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	791b      	ldrb	r3, [r3, #4]
 80027be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002804:	2001      	movs	r0, #1
 8002806:	f7ff f91f 	bl	8001a48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	f8de3f23 	.word	0xf8de3f23

08002824 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0a6      	sub	sp, #152	; 0x98
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800282c:	2301      	movs	r3, #1
 800282e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002838:	2300      	movs	r3, #0
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002860:	2300      	movs	r3, #0
 8002862:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800286a:	2300      	movs	r3, #0
 800286c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002886:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800288a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800288c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002890:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002898:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fe86 	bl	80025b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff08 	bl	8002710 <ETH_SetDMAConfig>
}
 8002900:	bf00      	nop
 8002902:	3798      	adds	r7, #152	; 0x98
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3305      	adds	r3, #5
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	3204      	adds	r2, #4
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <ETH_MACAddressConfig+0x68>)
 800292a:	4413      	add	r3, r2
 800292c:	461a      	mov	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3303      	adds	r3, #3
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	061a      	lsls	r2, r3, #24
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3302      	adds	r3, #2
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3301      	adds	r3, #1
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	4313      	orrs	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <ETH_MACAddressConfig+0x6c>)
 800295a:	4413      	add	r3, r2
 800295c:	461a      	mov	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	6013      	str	r3, [r2, #0]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40028040 	.word	0x40028040
 8002974:	40028044 	.word	0x40028044

08002978 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e03e      	b.n	8002a04 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68d9      	ldr	r1, [r3, #12]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	3206      	adds	r2, #6
 80029b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d80c      	bhi.n	80029e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68d9      	ldr	r1, [r3, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	e004      	b.n	80029f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3301      	adds	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d9bd      	bls.n	8002986 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1c:	611a      	str	r2, [r3, #16]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e046      	b.n	8002ac6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6919      	ldr	r1, [r3, #16]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a74:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002a7c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	3212      	adds	r2, #18
 8002a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d80c      	bhi.n	8002ab6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6919      	ldr	r1, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	e004      	b.n	8002ac0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d9b5      	bls.n	8002a38 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e175      	b.n	8002e10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b24:	2201      	movs	r2, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	f040 8164 	bne.w	8002e0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d005      	beq.n	8002b5a <HAL_GPIO_Init+0x56>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d130      	bne.n	8002bbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2203      	movs	r2, #3
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b90:	2201      	movs	r2, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 0201 	and.w	r2, r3, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d017      	beq.n	8002bf8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d123      	bne.n	8002c4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	69b9      	ldr	r1, [r7, #24]
 8002c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0203 	and.w	r2, r3, #3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80be 	beq.w	8002e0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8e:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4a65      	ldr	r2, [pc, #404]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9a:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_GPIO_Init+0x324>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ca6:	4a61      	ldr	r2, [pc, #388]	; (8002e2c <HAL_GPIO_Init+0x328>)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3302      	adds	r3, #2
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a58      	ldr	r2, [pc, #352]	; (8002e30 <HAL_GPIO_Init+0x32c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d037      	beq.n	8002d42 <HAL_GPIO_Init+0x23e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a57      	ldr	r2, [pc, #348]	; (8002e34 <HAL_GPIO_Init+0x330>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d031      	beq.n	8002d3e <HAL_GPIO_Init+0x23a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a56      	ldr	r2, [pc, #344]	; (8002e38 <HAL_GPIO_Init+0x334>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02b      	beq.n	8002d3a <HAL_GPIO_Init+0x236>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a55      	ldr	r2, [pc, #340]	; (8002e3c <HAL_GPIO_Init+0x338>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d025      	beq.n	8002d36 <HAL_GPIO_Init+0x232>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a54      	ldr	r2, [pc, #336]	; (8002e40 <HAL_GPIO_Init+0x33c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <HAL_GPIO_Init+0x22e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a53      	ldr	r2, [pc, #332]	; (8002e44 <HAL_GPIO_Init+0x340>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d019      	beq.n	8002d2e <HAL_GPIO_Init+0x22a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_GPIO_Init+0x344>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_GPIO_Init+0x226>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a51      	ldr	r2, [pc, #324]	; (8002e4c <HAL_GPIO_Init+0x348>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00d      	beq.n	8002d26 <HAL_GPIO_Init+0x222>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a50      	ldr	r2, [pc, #320]	; (8002e50 <HAL_GPIO_Init+0x34c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <HAL_GPIO_Init+0x21e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4f      	ldr	r2, [pc, #316]	; (8002e54 <HAL_GPIO_Init+0x350>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_GPIO_Init+0x21a>
 8002d1a:	2309      	movs	r3, #9
 8002d1c:	e012      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d1e:	230a      	movs	r3, #10
 8002d20:	e010      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d22:	2308      	movs	r3, #8
 8002d24:	e00e      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d26:	2307      	movs	r3, #7
 8002d28:	e00c      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d2a:	2306      	movs	r3, #6
 8002d2c:	e00a      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d2e:	2305      	movs	r3, #5
 8002d30:	e008      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d32:	2304      	movs	r3, #4
 8002d34:	e006      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d36:	2303      	movs	r3, #3
 8002d38:	e004      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e002      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_GPIO_Init+0x240>
 8002d42:	2300      	movs	r3, #0
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f002 0203 	and.w	r2, r2, #3
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	4093      	lsls	r3, r2
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d54:	4935      	ldr	r1, [pc, #212]	; (8002e2c <HAL_GPIO_Init+0x328>)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	089b      	lsrs	r3, r3, #2
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d62:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <HAL_GPIO_Init+0x354>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d86:	4a34      	ldr	r2, [pc, #208]	; (8002e58 <HAL_GPIO_Init+0x354>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d8c:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <HAL_GPIO_Init+0x354>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db0:	4a29      	ldr	r2, [pc, #164]	; (8002e58 <HAL_GPIO_Init+0x354>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_GPIO_Init+0x354>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dda:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <HAL_GPIO_Init+0x354>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de0:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <HAL_GPIO_Init+0x354>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e04:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <HAL_GPIO_Init+0x354>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b0f      	cmp	r3, #15
 8002e14:	f67f ae86 	bls.w	8002b24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40013800 	.word	0x40013800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40020800 	.word	0x40020800
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40021400 	.word	0x40021400
 8002e48:	40021800 	.word	0x40021800
 8002e4c:	40021c00 	.word	0x40021c00
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40022400 	.word	0x40022400
 8002e58:	40013c00 	.word	0x40013c00

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e07f      	b.n	8002fa2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe fbcc 	bl	8001654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	e006      	b.n	8002f18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d104      	bne.n	8002f2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_I2C_Init+0x11c>)
 8002f36:	430b      	orrs	r3, r1
 8002f38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	02008000 	.word	0x02008000

08002fb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	f040 80f9 	bne.w	80031ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_I2C_Mem_Write+0x34>
 8002fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0ed      	b.n	80031cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2C_Mem_Write+0x4e>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0e6      	b.n	80031cc <HAL_I2C_Mem_Write+0x21c>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003006:	f7fe fd13 	bl	8001a30 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2319      	movs	r3, #25
 8003012:	2201      	movs	r2, #1
 8003014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f955 	bl	80032c8 <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0d1      	b.n	80031cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2221      	movs	r2, #33	; 0x21
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2240      	movs	r2, #64	; 0x40
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a3a      	ldr	r2, [r7, #32]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003050:	88f8      	ldrh	r0, [r7, #6]
 8003052:	893a      	ldrh	r2, [r7, #8]
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	4603      	mov	r3, r0
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f8b9 	bl	80031d8 <I2C_RequestMemoryWrite>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0a9      	b.n	80031cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2bff      	cmp	r3, #255	; 0xff
 8003080:	d90e      	bls.n	80030a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	22ff      	movs	r2, #255	; 0xff
 8003086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	b2da      	uxtb	r2, r3
 800308e:	8979      	ldrh	r1, [r7, #10]
 8003090:	2300      	movs	r3, #0
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fab1 	bl	8003600 <I2C_TransferConfig>
 800309e:	e00f      	b.n	80030c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	8979      	ldrh	r1, [r7, #10]
 80030b2:	2300      	movs	r3, #0
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 faa0 	bl	8003600 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f93f 	bl	8003348 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e07b      	b.n	80031cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d034      	beq.n	8003178 <HAL_I2C_Mem_Write+0x1c8>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d130      	bne.n	8003178 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f8d1 	bl	80032c8 <I2C_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e04d      	b.n	80031cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	2bff      	cmp	r3, #255	; 0xff
 8003138:	d90e      	bls.n	8003158 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	22ff      	movs	r2, #255	; 0xff
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	b2da      	uxtb	r2, r3
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	2300      	movs	r3, #0
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fa55 	bl	8003600 <I2C_TransferConfig>
 8003156:	e00f      	b.n	8003178 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	b2da      	uxtb	r2, r3
 8003168:	8979      	ldrh	r1, [r7, #10]
 800316a:	2300      	movs	r3, #0
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fa44 	bl	8003600 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d19e      	bne.n	80030c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f91e 	bl	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e01a      	b.n	80031cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2220      	movs	r2, #32
 800319c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_I2C_Mem_Write+0x224>)
 80031aa:	400b      	ands	r3, r1
 80031ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	fe00e800 	.word	0xfe00e800

080031d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	4608      	mov	r0, r1
 80031e2:	4611      	mov	r1, r2
 80031e4:	461a      	mov	r2, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	817b      	strh	r3, [r7, #10]
 80031ea:	460b      	mov	r3, r1
 80031ec:	813b      	strh	r3, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	8979      	ldrh	r1, [r7, #10]
 80031f8:	4b20      	ldr	r3, [pc, #128]	; (800327c <I2C_RequestMemoryWrite+0xa4>)
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f9fd 	bl	8003600 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	69b9      	ldr	r1, [r7, #24]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f89c 	bl	8003348 <I2C_WaitOnTXISFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e02c      	b.n	8003274 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
 800322a:	e015      	b.n	8003258 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	b29b      	uxth	r3, r3
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f882 	bl	8003348 <I2C_WaitOnTXISFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e012      	b.n	8003274 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800324e:	893b      	ldrh	r3, [r7, #8]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2200      	movs	r2, #0
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f830 	bl	80032c8 <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	80002000 	.word	0x80002000

08003280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	d103      	bne.n	800329e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d007      	beq.n	80032bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	619a      	str	r2, [r3, #24]
  }
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d8:	e022      	b.n	8003320 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d01e      	beq.n	8003320 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fe fba5 	bl	8001a30 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d113      	bne.n	8003320 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e00f      	b.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	429a      	cmp	r2, r3
 800333c:	d0cd      	beq.n	80032da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003354:	e02c      	b.n	80033b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f870 	bl	8003440 <I2C_IsErrorOccurred>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e02a      	b.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d01e      	beq.n	80033b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7fe fb5d 	bl	8001a30 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d113      	bne.n	80033b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d1cb      	bne.n	8003356 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d4:	e028      	b.n	8003428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f830 	bl	8003440 <I2C_IsErrorOccurred>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e026      	b.n	8003438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7fe fb21 	bl	8001a30 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d113      	bne.n	8003428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e007      	b.n	8003438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b20      	cmp	r3, #32
 8003434:	d1cf      	bne.n	80033d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d068      	beq.n	800353e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2210      	movs	r2, #16
 8003472:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003474:	e049      	b.n	800350a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d045      	beq.n	800350a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fad7 	bl	8001a30 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_IsErrorOccurred+0x54>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d13a      	bne.n	800350a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b6:	d121      	bne.n	80034fc <I2C_IsErrorOccurred+0xbc>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034be:	d01d      	beq.n	80034fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034c0:	7cfb      	ldrb	r3, [r7, #19]
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d01a      	beq.n	80034fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034d6:	f7fe faab 	bl	8001a30 <HAL_GetTick>
 80034da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034dc:	e00e      	b.n	80034fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034de:	f7fe faa7 	bl	8001a30 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b19      	cmp	r3, #25
 80034ea:	d907      	bls.n	80034fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f043 0320 	orr.w	r3, r3, #32
 80034f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80034fa:	e006      	b.n	800350a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b20      	cmp	r3, #32
 8003508:	d1e9      	bne.n	80034de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b20      	cmp	r3, #32
 8003516:	d003      	beq.n	8003520 <I2C_IsErrorOccurred+0xe0>
 8003518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0aa      	beq.n	8003476 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003524:	2b00      	cmp	r3, #0
 8003526:	d103      	bne.n	8003530 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2220      	movs	r2, #32
 800352e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f043 0308 	orr.w	r3, r3, #8
 8003578:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003582:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f043 0302 	orr.w	r3, r3, #2
 800359a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01c      	beq.n	80035ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff fe63 	bl	8003280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <I2C_IsErrorOccurred+0x1bc>)
 80035c6:	400b      	ands	r3, r1
 80035c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80035ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	fe00e800 	.word	0xfe00e800

08003600 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	4613      	mov	r3, r2
 8003610:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003618:	7a7b      	ldrb	r3, [r7, #9]
 800361a:	041b      	lsls	r3, r3, #16
 800361c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003620:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	4313      	orrs	r3, r2
 800362a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800362e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	0d5b      	lsrs	r3, r3, #21
 800363a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <I2C_TransferConfig+0x60>)
 8003640:	430b      	orrs	r3, r1
 8003642:	43db      	mvns	r3, r3
 8003644:	ea02 0103 	and.w	r1, r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	03ff63ff 	.word	0x03ff63ff

08003664 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b20      	cmp	r3, #32
 8003678:	d138      	bne.n	80036ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003684:	2302      	movs	r3, #2
 8003686:	e032      	b.n	80036ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b20      	cmp	r3, #32
 800370e:	d139      	bne.n	8003784 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800371a:	2302      	movs	r3, #2
 800371c:	e033      	b.n	8003786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2224      	movs	r2, #36	; 0x24
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800374c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003794:	b08f      	sub	sp, #60	; 0x3c
 8003796:	af0a      	add	r7, sp, #40	; 0x28
 8003798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e116      	b.n	80039d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe f806 	bl	80017d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fe92 	bl	800550c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	687e      	ldr	r6, [r7, #4]
 80037f0:	466d      	mov	r5, sp
 80037f2:	f106 0410 	add.w	r4, r6, #16
 80037f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003802:	e885 0003 	stmia.w	r5, {r0, r1}
 8003806:	1d33      	adds	r3, r6, #4
 8003808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f001 fe26 	bl	800545c <USB_CoreInit>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0d7      	b.n	80039d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fe80 	bl	800552e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e04a      	b.n	80038ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	333d      	adds	r3, #61	; 0x3d
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	333c      	adds	r3, #60	; 0x3c
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	b298      	uxth	r0, r3
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	3344      	adds	r3, #68	; 0x44
 8003870:	4602      	mov	r2, r0
 8003872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	3340      	adds	r3, #64	; 0x40
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3348      	adds	r3, #72	; 0x48
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334c      	adds	r3, #76	; 0x4c
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3354      	adds	r3, #84	; 0x54
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3af      	bcc.n	8003834 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e044      	b.n	8003964 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	3301      	adds	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3b5      	bcc.n	80038da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	687e      	ldr	r6, [r7, #4]
 8003976:	466d      	mov	r5, sp
 8003978:	f106 0410 	add.w	r4, r6, #16
 800397c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003984:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003988:	e885 0003 	stmia.w	r5, {r0, r1}
 800398c:	1d33      	adds	r3, r6, #4
 800398e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003990:	6838      	ldr	r0, [r7, #0]
 8003992:	f001 fe19 	bl	80055c8 <USB_DevInit>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e014      	b.n	80039d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d102      	bne.n	80039c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f80b 	bl	80039dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 ffd7 	bl	800597e <USB_DevDisconnect>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	10000003 	.word	0x10000003

08003a24 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40007000 	.word	0x40007000

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e291      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8087 	beq.w	8003b76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a68:	4b96      	ldr	r3, [pc, #600]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d00c      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a74:	4b93      	ldr	r3, [pc, #588]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d112      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x62>
 8003a80:	4b90      	ldr	r3, [pc, #576]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8e:	4b8d      	ldr	r3, [pc, #564]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d06c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x130>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d168      	bne.n	8003b74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e26b      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x7a>
 8003ab0:	4b84      	ldr	r3, [pc, #528]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a83      	ldr	r2, [pc, #524]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	e02e      	b.n	8003b1c <HAL_RCC_OscConfig+0xd8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x9c>
 8003ac6:	4b7f      	ldr	r3, [pc, #508]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a7e      	ldr	r2, [pc, #504]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b7c      	ldr	r3, [pc, #496]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7b      	ldr	r2, [pc, #492]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e01d      	b.n	8003b1c <HAL_RCC_OscConfig+0xd8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0xc0>
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a75      	ldr	r2, [pc, #468]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003af0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b73      	ldr	r3, [pc, #460]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a72      	ldr	r2, [pc, #456]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e00b      	b.n	8003b1c <HAL_RCC_OscConfig+0xd8>
 8003b04:	4b6f      	ldr	r3, [pc, #444]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a6e      	ldr	r2, [pc, #440]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6b      	ldr	r2, [pc, #428]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd ff84 	bl	8001a30 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd ff80 	bl	8001a30 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e21f      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e014      	b.n	8003b76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd ff70 	bl	8001a30 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd ff6c 	bl	8001a30 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e20b      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x110>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d069      	beq.n	8003c56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b82:	4b50      	ldr	r3, [pc, #320]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8e:	4b4d      	ldr	r3, [pc, #308]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d11c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x190>
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d116      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba6:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x17a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e1df      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbe:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	493d      	ldr	r1, [pc, #244]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	e040      	b.n	8003c56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d023      	beq.n	8003c24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bdc:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a38      	ldr	r2, [pc, #224]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd ff22 	bl	8001a30 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf0:	f7fd ff1e 	bl	8001a30 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e1bd      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4929      	ldr	r1, [pc, #164]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
 8003c22:	e018      	b.n	8003c56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fd fefe 	bl	8001a30 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c38:	f7fd fefa 	bl	8001a30 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e199      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d038      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d019      	beq.n	8003c9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6a:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6e:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fd fedb 	bl	8001a30 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7e:	f7fd fed7 	bl	8001a30 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e176      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x23a>
 8003c9c:	e01a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003caa:	f7fd fec1 	bl	8001a30 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb2:	f7fd febd 	bl	8001a30 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d903      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e15c      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
 8003cc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b91      	ldr	r3, [pc, #580]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a4 	beq.w	8003e2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce2:	4b8b      	ldr	r3, [pc, #556]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10d      	bne.n	8003d0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	4b88      	ldr	r3, [pc, #544]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	4a87      	ldr	r2, [pc, #540]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0a:	4b82      	ldr	r3, [pc, #520]	; (8003f14 <HAL_RCC_OscConfig+0x4d0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d118      	bne.n	8003d48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d16:	4b7f      	ldr	r3, [pc, #508]	; (8003f14 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a7e      	ldr	r2, [pc, #504]	; (8003f14 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fd fe85 	bl	8001a30 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7fd fe81 	bl	8001a30 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	; 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e120      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3c:	4b75      	ldr	r3, [pc, #468]	; (8003f14 <HAL_RCC_OscConfig+0x4d0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x31a>
 8003d50:	4b6f      	ldr	r3, [pc, #444]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a6e      	ldr	r2, [pc, #440]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	e02d      	b.n	8003dba <HAL_RCC_OscConfig+0x376>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x33c>
 8003d66:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a69      	ldr	r2, [pc, #420]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
 8003d72:	4b67      	ldr	r3, [pc, #412]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a66      	ldr	r2, [pc, #408]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d78:	f023 0304 	bic.w	r3, r3, #4
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	e01c      	b.n	8003dba <HAL_RCC_OscConfig+0x376>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b05      	cmp	r3, #5
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x35e>
 8003d88:	4b61      	ldr	r3, [pc, #388]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	4a60      	ldr	r2, [pc, #384]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d8e:	f043 0304 	orr.w	r3, r3, #4
 8003d92:	6713      	str	r3, [r2, #112]	; 0x70
 8003d94:	4b5e      	ldr	r3, [pc, #376]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a5d      	ldr	r2, [pc, #372]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	e00b      	b.n	8003dba <HAL_RCC_OscConfig+0x376>
 8003da2:	4b5b      	ldr	r3, [pc, #364]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	4a5a      	ldr	r2, [pc, #360]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	6713      	str	r3, [r2, #112]	; 0x70
 8003dae:	4b58      	ldr	r3, [pc, #352]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4a57      	ldr	r2, [pc, #348]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003db4:	f023 0304 	bic.w	r3, r3, #4
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d015      	beq.n	8003dee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fd fe35 	bl	8001a30 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7fd fe31 	bl	8001a30 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0ce      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	4b4b      	ldr	r3, [pc, #300]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ee      	beq.n	8003dca <HAL_RCC_OscConfig+0x386>
 8003dec:	e014      	b.n	8003e18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dee:	f7fd fe1f 	bl	8001a30 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df4:	e00a      	b.n	8003e0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fd fe1b 	bl	8001a30 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e0b8      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0c:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ee      	bne.n	8003df6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1e:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a3b      	ldr	r2, [pc, #236]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80a4 	beq.w	8003f7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d06b      	beq.n	8003f18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d149      	bne.n	8003edc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a30      	ldr	r2, [pc, #192]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fd fdec 	bl	8001a30 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fd fde8 	bl	8001a30 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e087      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	3b01      	subs	r3, #1
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	061b      	lsls	r3, r3, #24
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003ea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ea6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fdbc 	bl	8001a30 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd fdb8 	bl	8001a30 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e057      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x478>
 8003eda:	e04f      	b.n	8003f7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fda2 	bl	8001a30 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd fd9e 	bl	8001a30 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e03d      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f02:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_RCC_OscConfig+0x4cc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x4ac>
 8003f0e:	e035      	b.n	8003f7c <HAL_RCC_OscConfig+0x538>
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f18:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x544>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d028      	beq.n	8003f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d121      	bne.n	8003f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d11a      	bne.n	8003f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f48:	4013      	ands	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d111      	bne.n	8003f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	3b01      	subs	r3, #1
 8003f62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800

08003f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0d0      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b67      	ldr	r3, [pc, #412]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 020f 	bic.w	r2, r3, #15
 8003fba:	4965      	ldr	r1, [pc, #404]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0b8      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fec:	4b59      	ldr	r3, [pc, #356]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4a58      	ldr	r2, [pc, #352]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ff6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004004:	4b53      	ldr	r3, [pc, #332]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a52      	ldr	r2, [pc, #328]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800400e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	494d      	ldr	r1, [pc, #308]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d040      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b47      	ldr	r3, [pc, #284]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d115      	bne.n	800406e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e07f      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404e:	4b41      	ldr	r3, [pc, #260]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e073      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e06b      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406e:	4b39      	ldr	r3, [pc, #228]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4936      	ldr	r1, [pc, #216]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004080:	f7fd fcd6 	bl	8001a30 <HAL_GetTick>
 8004084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	e00a      	b.n	800409e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004088:	f7fd fcd2 	bl	8001a30 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e053      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 020c 	and.w	r2, r3, #12
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d1eb      	bne.n	8004088 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d210      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b24      	ldr	r3, [pc, #144]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 020f 	bic.w	r2, r3, #15
 80040c6:	4922      	ldr	r1, [pc, #136]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e032      	b.n	8004146 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4916      	ldr	r1, [pc, #88]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	490e      	ldr	r1, [pc, #56]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800411e:	f000 f821 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004122:	4602      	mov	r2, r0
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	490a      	ldr	r1, [pc, #40]	; (8004158 <HAL_RCC_ClockConfig+0x1cc>)
 8004130:	5ccb      	ldrb	r3, [r1, r3]
 8004132:	fa22 f303 	lsr.w	r3, r2, r3
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1d0>)
 8004138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_ClockConfig+0x1d4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fc32 	bl	80019a8 <HAL_InitTick>

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40023c00 	.word	0x40023c00
 8004154:	40023800 	.word	0x40023800
 8004158:	08007890 	.word	0x08007890
 800415c:	20000018 	.word	0x20000018
 8004160:	2000001c 	.word	0x2000001c

08004164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004168:	b094      	sub	sp, #80	; 0x50
 800416a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	647b      	str	r3, [r7, #68]	; 0x44
 8004170:	2300      	movs	r3, #0
 8004172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004174:	2300      	movs	r3, #0
 8004176:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800417c:	4b79      	ldr	r3, [pc, #484]	; (8004364 <HAL_RCC_GetSysClockFreq+0x200>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b08      	cmp	r3, #8
 8004186:	d00d      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004188:	2b08      	cmp	r3, #8
 800418a:	f200 80e1 	bhi.w	8004350 <HAL_RCC_GetSysClockFreq+0x1ec>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x34>
 8004192:	2b04      	cmp	r3, #4
 8004194:	d003      	beq.n	800419e <HAL_RCC_GetSysClockFreq+0x3a>
 8004196:	e0db      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004198:	4b73      	ldr	r3, [pc, #460]	; (8004368 <HAL_RCC_GetSysClockFreq+0x204>)
 800419a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419c:	e0db      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800419e:	4b73      	ldr	r3, [pc, #460]	; (800436c <HAL_RCC_GetSysClockFreq+0x208>)
 80041a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a2:	e0d8      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a4:	4b6f      	ldr	r3, [pc, #444]	; (8004364 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041ae:	4b6d      	ldr	r3, [pc, #436]	; (8004364 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d063      	beq.n	8004282 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ba:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCC_GetSysClockFreq+0x200>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	099b      	lsrs	r3, r3, #6
 80041c0:	2200      	movs	r2, #0
 80041c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
 80041ce:	2300      	movs	r3, #0
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
 80041d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	f04f 0000 	mov.w	r0, #0
 80041de:	f04f 0100 	mov.w	r1, #0
 80041e2:	0159      	lsls	r1, r3, #5
 80041e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e8:	0150      	lsls	r0, r2, #5
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4621      	mov	r1, r4
 80041f0:	1a51      	subs	r1, r2, r1
 80041f2:	6139      	str	r1, [r7, #16]
 80041f4:	4629      	mov	r1, r5
 80041f6:	eb63 0301 	sbc.w	r3, r3, r1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004208:	4659      	mov	r1, fp
 800420a:	018b      	lsls	r3, r1, #6
 800420c:	4651      	mov	r1, sl
 800420e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004212:	4651      	mov	r1, sl
 8004214:	018a      	lsls	r2, r1, #6
 8004216:	4651      	mov	r1, sl
 8004218:	ebb2 0801 	subs.w	r8, r2, r1
 800421c:	4659      	mov	r1, fp
 800421e:	eb63 0901 	sbc.w	r9, r3, r1
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004236:	4690      	mov	r8, r2
 8004238:	4699      	mov	r9, r3
 800423a:	4623      	mov	r3, r4
 800423c:	eb18 0303 	adds.w	r3, r8, r3
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	462b      	mov	r3, r5
 8004244:	eb49 0303 	adc.w	r3, r9, r3
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004256:	4629      	mov	r1, r5
 8004258:	024b      	lsls	r3, r1, #9
 800425a:	4621      	mov	r1, r4
 800425c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004260:	4621      	mov	r1, r4
 8004262:	024a      	lsls	r2, r1, #9
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426a:	2200      	movs	r2, #0
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
 800426e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004274:	f7fb ffc8 	bl	8000208 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4613      	mov	r3, r2
 800427e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004280:	e058      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004282:	4b38      	ldr	r3, [pc, #224]	; (8004364 <HAL_RCC_GetSysClockFreq+0x200>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	099b      	lsrs	r3, r3, #6
 8004288:	2200      	movs	r2, #0
 800428a:	4618      	mov	r0, r3
 800428c:	4611      	mov	r1, r2
 800428e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004292:	623b      	str	r3, [r7, #32]
 8004294:	2300      	movs	r3, #0
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	f04f 0000 	mov.w	r0, #0
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	0159      	lsls	r1, r3, #5
 80042aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ae:	0150      	lsls	r0, r2, #5
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4641      	mov	r1, r8
 80042b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80042ba:	4649      	mov	r1, r9
 80042bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042d4:	ebb2 040a 	subs.w	r4, r2, sl
 80042d8:	eb63 050b 	sbc.w	r5, r3, fp
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	00eb      	lsls	r3, r5, #3
 80042e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ea:	00e2      	lsls	r2, r4, #3
 80042ec:	4614      	mov	r4, r2
 80042ee:	461d      	mov	r5, r3
 80042f0:	4643      	mov	r3, r8
 80042f2:	18e3      	adds	r3, r4, r3
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	464b      	mov	r3, r9
 80042f8:	eb45 0303 	adc.w	r3, r5, r3
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800430a:	4629      	mov	r1, r5
 800430c:	028b      	lsls	r3, r1, #10
 800430e:	4621      	mov	r1, r4
 8004310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004314:	4621      	mov	r1, r4
 8004316:	028a      	lsls	r2, r1, #10
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431e:	2200      	movs	r2, #0
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	61fa      	str	r2, [r7, #28]
 8004324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004328:	f7fb ff6e 	bl	8000208 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4613      	mov	r3, r2
 8004332:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCC_GetSysClockFreq+0x200>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800434e:	e002      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCC_GetSysClockFreq+0x204>)
 8004352:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004358:	4618      	mov	r0, r3
 800435a:	3750      	adds	r7, #80	; 0x50
 800435c:	46bd      	mov	sp, r7
 800435e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	00f42400 	.word	0x00f42400
 800436c:	007a1200 	.word	0x007a1200

08004370 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <HAL_RCC_GetHCLKFreq+0x14>)
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000018 	.word	0x20000018

08004388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800438c:	f7ff fff0 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	0a9b      	lsrs	r3, r3, #10
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	4903      	ldr	r1, [pc, #12]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40023800 	.word	0x40023800
 80043ac:	080078a0 	.word	0x080078a0

080043b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043b4:	f7ff ffdc 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	0b5b      	lsrs	r3, r3, #13
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4903      	ldr	r1, [pc, #12]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	080078a0 	.word	0x080078a0

080043d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d012      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004400:	4b69      	ldr	r3, [pc, #420]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a68      	ldr	r2, [pc, #416]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800440a:	6093      	str	r3, [r2, #8]
 800440c:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	4964      	ldr	r1, [pc, #400]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d017      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004432:	4b5d      	ldr	r3, [pc, #372]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	4959      	ldr	r1, [pc, #356]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004450:	d101      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800445e:	2301      	movs	r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d017      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800446e:	4b4e      	ldr	r3, [pc, #312]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004474:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	494a      	ldr	r1, [pc, #296]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448c:	d101      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800448e:	2301      	movs	r3, #1
 8004490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 808b 	beq.w	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	4a39      	ldr	r2, [pc, #228]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c6:	6413      	str	r3, [r2, #64]	; 0x40
 80044c8:	4b37      	ldr	r3, [pc, #220]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a34      	ldr	r2, [pc, #208]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fd faa6 	bl	8001a30 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e8:	f7fd faa2 	bl	8001a30 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e357      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044fa:	4b2c      	ldr	r3, [pc, #176]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004506:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d035      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d02e      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004544:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004546:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800454c:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d114      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd fa6a 	bl	8001a30 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455e:	e00a      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fd fa66 	bl	8001a30 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e319      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0ee      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458e:	d111      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800459e:	400b      	ands	r3, r1
 80045a0:	4901      	ldr	r1, [pc, #4]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
 80045a6:	e00b      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000
 80045b0:	0ffffcff 	.word	0x0ffffcff
 80045b4:	4baa      	ldr	r3, [pc, #680]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4aa9      	ldr	r2, [pc, #676]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045be:	6093      	str	r3, [r2, #8]
 80045c0:	4ba7      	ldr	r3, [pc, #668]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045cc:	49a4      	ldr	r1, [pc, #656]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d010      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045de:	4ba0      	ldr	r3, [pc, #640]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e4:	4a9e      	ldr	r2, [pc, #632]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ee:	4b9c      	ldr	r3, [pc, #624]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	4999      	ldr	r1, [pc, #612]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800460c:	4b94      	ldr	r3, [pc, #592]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461a:	4991      	ldr	r1, [pc, #580]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800462e:	4b8c      	ldr	r3, [pc, #560]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800463c:	4988      	ldr	r1, [pc, #544]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004650:	4b83      	ldr	r3, [pc, #524]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465e:	4980      	ldr	r1, [pc, #512]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004672:	4b7b      	ldr	r3, [pc, #492]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4977      	ldr	r1, [pc, #476]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004694:	4b72      	ldr	r3, [pc, #456]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	496f      	ldr	r1, [pc, #444]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046b6:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046bc:	f023 020c 	bic.w	r2, r3, #12
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	4966      	ldr	r1, [pc, #408]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046d8:	4b61      	ldr	r3, [pc, #388]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e6:	495e      	ldr	r1, [pc, #376]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046fa:	4b59      	ldr	r3, [pc, #356]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004700:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004708:	4955      	ldr	r1, [pc, #340]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800471c:	4b50      	ldr	r3, [pc, #320]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	494d      	ldr	r1, [pc, #308]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800473e:	4b48      	ldr	r3, [pc, #288]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	4944      	ldr	r1, [pc, #272]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004760:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	493c      	ldr	r1, [pc, #240]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004782:	4b37      	ldr	r3, [pc, #220]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004790:	4933      	ldr	r1, [pc, #204]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a4:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b2:	492b      	ldr	r1, [pc, #172]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d011      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d4:	4922      	ldr	r1, [pc, #136]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047e6:	2301      	movs	r3, #1
 80047e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047f6:	2301      	movs	r3, #1
 80047f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004814:	4912      	ldr	r1, [pc, #72]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004828:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004838:	4909      	ldr	r1, [pc, #36]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d006      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80d9 	beq.w	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004854:	4b02      	ldr	r3, [pc, #8]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a01      	ldr	r2, [pc, #4]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800485e:	e001      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004860:	40023800 	.word	0x40023800
 8004864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004866:	f7fd f8e3 	bl	8001a30 <HAL_GetTick>
 800486a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800486e:	f7fd f8df 	bl	8001a30 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b64      	cmp	r3, #100	; 0x64
 800487a:	d901      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e194      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004880:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d021      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11d      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048a0:	4b64      	ldr	r3, [pc, #400]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ae:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b4:	0e1b      	lsrs	r3, r3, #24
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	019a      	lsls	r2, r3, #6
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	431a      	orrs	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	071b      	lsls	r3, r3, #28
 80048d4:	4957      	ldr	r1, [pc, #348]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d02e      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004906:	d129      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004908:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	0f1b      	lsrs	r3, r3, #28
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	019a      	lsls	r2, r3, #6
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	431a      	orrs	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	071b      	lsls	r3, r3, #28
 800493c:	493d      	ldr	r1, [pc, #244]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004944:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494a:	f023 021f 	bic.w	r2, r3, #31
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	3b01      	subs	r3, #1
 8004954:	4937      	ldr	r1, [pc, #220]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01d      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004968:	4b32      	ldr	r3, [pc, #200]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496e:	0e1b      	lsrs	r3, r3, #24
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004976:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497c:	0f1b      	lsrs	r3, r3, #28
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	019a      	lsls	r2, r3, #6
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	431a      	orrs	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	431a      	orrs	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	071b      	lsls	r3, r3, #28
 800499c:	4925      	ldr	r1, [pc, #148]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d011      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	019a      	lsls	r2, r3, #6
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	071b      	lsls	r3, r3, #28
 80049cc:	4919      	ldr	r1, [pc, #100]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e0:	f7fd f826 	bl	8001a30 <HAL_GetTick>
 80049e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049e8:	f7fd f822 	bl	8001a30 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e0d7      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049fa:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	f040 80cd 	bne.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1a:	f7fd f809 	bl	8001a30 <HAL_GetTick>
 8004a1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a22:	f7fd f805 	bl	8001a30 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b64      	cmp	r3, #100	; 0x64
 8004a2e:	d903      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e0ba      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a38:	4b5e      	ldr	r3, [pc, #376]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a44:	d0ed      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d02e      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d12a      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a6e:	4b51      	ldr	r3, [pc, #324]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a7c:	4b4d      	ldr	r3, [pc, #308]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	0f1b      	lsrs	r3, r3, #28
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	019a      	lsls	r2, r3, #6
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	071b      	lsls	r3, r3, #28
 8004aa2:	4944      	ldr	r1, [pc, #272]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004aaa:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	493d      	ldr	r1, [pc, #244]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d022      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad8:	d11d      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ada:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ae8:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	0f1b      	lsrs	r3, r3, #28
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	431a      	orrs	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	071b      	lsls	r3, r3, #28
 8004b0e:	4929      	ldr	r1, [pc, #164]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d028      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	019a      	lsls	r2, r3, #6
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	071b      	lsls	r3, r3, #28
 8004b56:	4917      	ldr	r1, [pc, #92]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4911      	ldr	r1, [pc, #68]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fc ff56 	bl	8001a30 <HAL_GetTick>
 8004b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b88:	f7fc ff52 	bl	8001a30 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e007      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba6:	d1ef      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e040      	b.n	8004c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc fd98 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	; 0x24
 8004be4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f82c 	bl	8004c54 <UART_SetConfig>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e022      	b.n	8004c4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fa84 	bl	800511c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fb0b 	bl	8005260 <UART_CheckIdleState>
 8004c4a:	4603      	mov	r3, r0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4ba6      	ldr	r3, [pc, #664]	; (8004f18 <UART_SetConfig+0x2c4>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a94      	ldr	r2, [pc, #592]	; (8004f1c <UART_SetConfig+0x2c8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d120      	bne.n	8004d12 <UART_SetConfig+0xbe>
 8004cd0:	4b93      	ldr	r3, [pc, #588]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d816      	bhi.n	8004d0c <UART_SetConfig+0xb8>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0x90>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004d01 	.word	0x08004d01
 8004cec:	08004cfb 	.word	0x08004cfb
 8004cf0:	08004d07 	.word	0x08004d07
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e150      	b.n	8004f9c <UART_SetConfig+0x348>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e14d      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d00:	2304      	movs	r3, #4
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e14a      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d06:	2308      	movs	r3, #8
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e147      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e144      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a83      	ldr	r2, [pc, #524]	; (8004f24 <UART_SetConfig+0x2d0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d132      	bne.n	8004d82 <UART_SetConfig+0x12e>
 8004d1c:	4b80      	ldr	r3, [pc, #512]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	d828      	bhi.n	8004d7c <UART_SetConfig+0x128>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0xdc>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004d7d 	.word	0x08004d7d
 8004d38:	08004d7d 	.word	0x08004d7d
 8004d3c:	08004d7d 	.word	0x08004d7d
 8004d40:	08004d71 	.word	0x08004d71
 8004d44:	08004d7d 	.word	0x08004d7d
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d6b 	.word	0x08004d6b
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d7d 	.word	0x08004d7d
 8004d60:	08004d77 	.word	0x08004d77
 8004d64:	2300      	movs	r3, #0
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e118      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e115      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d70:	2304      	movs	r3, #4
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e112      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d76:	2308      	movs	r3, #8
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e10f      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e10c      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a68      	ldr	r2, [pc, #416]	; (8004f28 <UART_SetConfig+0x2d4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d120      	bne.n	8004dce <UART_SetConfig+0x17a>
 8004d8c:	4b64      	ldr	r3, [pc, #400]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	d013      	beq.n	8004dc2 <UART_SetConfig+0x16e>
 8004d9a:	2b30      	cmp	r3, #48	; 0x30
 8004d9c:	d814      	bhi.n	8004dc8 <UART_SetConfig+0x174>
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d009      	beq.n	8004db6 <UART_SetConfig+0x162>
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d810      	bhi.n	8004dc8 <UART_SetConfig+0x174>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <UART_SetConfig+0x15c>
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d006      	beq.n	8004dbc <UART_SetConfig+0x168>
 8004dae:	e00b      	b.n	8004dc8 <UART_SetConfig+0x174>
 8004db0:	2300      	movs	r3, #0
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e0f2      	b.n	8004f9c <UART_SetConfig+0x348>
 8004db6:	2302      	movs	r3, #2
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e0ef      	b.n	8004f9c <UART_SetConfig+0x348>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e0ec      	b.n	8004f9c <UART_SetConfig+0x348>
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e0e9      	b.n	8004f9c <UART_SetConfig+0x348>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e0e6      	b.n	8004f9c <UART_SetConfig+0x348>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a56      	ldr	r2, [pc, #344]	; (8004f2c <UART_SetConfig+0x2d8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d120      	bne.n	8004e1a <UART_SetConfig+0x1c6>
 8004dd8:	4b51      	ldr	r3, [pc, #324]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004de2:	2bc0      	cmp	r3, #192	; 0xc0
 8004de4:	d013      	beq.n	8004e0e <UART_SetConfig+0x1ba>
 8004de6:	2bc0      	cmp	r3, #192	; 0xc0
 8004de8:	d814      	bhi.n	8004e14 <UART_SetConfig+0x1c0>
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d009      	beq.n	8004e02 <UART_SetConfig+0x1ae>
 8004dee:	2b80      	cmp	r3, #128	; 0x80
 8004df0:	d810      	bhi.n	8004e14 <UART_SetConfig+0x1c0>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <UART_SetConfig+0x1a8>
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d006      	beq.n	8004e08 <UART_SetConfig+0x1b4>
 8004dfa:	e00b      	b.n	8004e14 <UART_SetConfig+0x1c0>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e0cc      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e02:	2302      	movs	r3, #2
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e0c9      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e0c6      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e0e:	2308      	movs	r3, #8
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e0c3      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e14:	2310      	movs	r3, #16
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e0c0      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a44      	ldr	r2, [pc, #272]	; (8004f30 <UART_SetConfig+0x2dc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d125      	bne.n	8004e70 <UART_SetConfig+0x21c>
 8004e24:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e32:	d017      	beq.n	8004e64 <UART_SetConfig+0x210>
 8004e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e38:	d817      	bhi.n	8004e6a <UART_SetConfig+0x216>
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3e:	d00b      	beq.n	8004e58 <UART_SetConfig+0x204>
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d811      	bhi.n	8004e6a <UART_SetConfig+0x216>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <UART_SetConfig+0x1fe>
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d006      	beq.n	8004e5e <UART_SetConfig+0x20a>
 8004e50:	e00b      	b.n	8004e6a <UART_SetConfig+0x216>
 8004e52:	2300      	movs	r3, #0
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e0a1      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e09e      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e09b      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e64:	2308      	movs	r3, #8
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e098      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e095      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2f      	ldr	r2, [pc, #188]	; (8004f34 <UART_SetConfig+0x2e0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d125      	bne.n	8004ec6 <UART_SetConfig+0x272>
 8004e7a:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e88:	d017      	beq.n	8004eba <UART_SetConfig+0x266>
 8004e8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e8e:	d817      	bhi.n	8004ec0 <UART_SetConfig+0x26c>
 8004e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e94:	d00b      	beq.n	8004eae <UART_SetConfig+0x25a>
 8004e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9a:	d811      	bhi.n	8004ec0 <UART_SetConfig+0x26c>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <UART_SetConfig+0x254>
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d006      	beq.n	8004eb4 <UART_SetConfig+0x260>
 8004ea6:	e00b      	b.n	8004ec0 <UART_SetConfig+0x26c>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e076      	b.n	8004f9c <UART_SetConfig+0x348>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e073      	b.n	8004f9c <UART_SetConfig+0x348>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e070      	b.n	8004f9c <UART_SetConfig+0x348>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e06d      	b.n	8004f9c <UART_SetConfig+0x348>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e06a      	b.n	8004f9c <UART_SetConfig+0x348>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <UART_SetConfig+0x2e4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d138      	bne.n	8004f42 <UART_SetConfig+0x2ee>
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004eda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ede:	d017      	beq.n	8004f10 <UART_SetConfig+0x2bc>
 8004ee0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ee4:	d82a      	bhi.n	8004f3c <UART_SetConfig+0x2e8>
 8004ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eea:	d00b      	beq.n	8004f04 <UART_SetConfig+0x2b0>
 8004eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef0:	d824      	bhi.n	8004f3c <UART_SetConfig+0x2e8>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <UART_SetConfig+0x2aa>
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efa:	d006      	beq.n	8004f0a <UART_SetConfig+0x2b6>
 8004efc:	e01e      	b.n	8004f3c <UART_SetConfig+0x2e8>
 8004efe:	2300      	movs	r3, #0
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e04b      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f04:	2302      	movs	r3, #2
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e048      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	77fb      	strb	r3, [r7, #31]
 8004f0e:	e045      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f10:	2308      	movs	r3, #8
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e042      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f16:	bf00      	nop
 8004f18:	efff69f3 	.word	0xefff69f3
 8004f1c:	40011000 	.word	0x40011000
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40004400 	.word	0x40004400
 8004f28:	40004800 	.word	0x40004800
 8004f2c:	40004c00 	.word	0x40004c00
 8004f30:	40005000 	.word	0x40005000
 8004f34:	40011400 	.word	0x40011400
 8004f38:	40007800 	.word	0x40007800
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e02c      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a72      	ldr	r2, [pc, #456]	; (8005110 <UART_SetConfig+0x4bc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d125      	bne.n	8004f98 <UART_SetConfig+0x344>
 8004f4c:	4b71      	ldr	r3, [pc, #452]	; (8005114 <UART_SetConfig+0x4c0>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f5a:	d017      	beq.n	8004f8c <UART_SetConfig+0x338>
 8004f5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f60:	d817      	bhi.n	8004f92 <UART_SetConfig+0x33e>
 8004f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f66:	d00b      	beq.n	8004f80 <UART_SetConfig+0x32c>
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6c:	d811      	bhi.n	8004f92 <UART_SetConfig+0x33e>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <UART_SetConfig+0x326>
 8004f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f76:	d006      	beq.n	8004f86 <UART_SetConfig+0x332>
 8004f78:	e00b      	b.n	8004f92 <UART_SetConfig+0x33e>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e00d      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f80:	2302      	movs	r3, #2
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e00a      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f86:	2304      	movs	r3, #4
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e007      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e004      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f92:	2310      	movs	r3, #16
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e001      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa4:	d15b      	bne.n	800505e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d828      	bhi.n	8004ffe <UART_SetConfig+0x3aa>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <UART_SetConfig+0x360>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fe1 	.word	0x08004fe1
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	08004fff 	.word	0x08004fff
 8004fc4:	08004fef 	.word	0x08004fef
 8004fc8:	08004fff 	.word	0x08004fff
 8004fcc:	08004fff 	.word	0x08004fff
 8004fd0:	08004fff 	.word	0x08004fff
 8004fd4:	08004ff7 	.word	0x08004ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd8:	f7ff f9d6 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8004fdc:	61b8      	str	r0, [r7, #24]
        break;
 8004fde:	e013      	b.n	8005008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe0:	f7ff f9e6 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 8004fe4:	61b8      	str	r0, [r7, #24]
        break;
 8004fe6:	e00f      	b.n	8005008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe8:	4b4b      	ldr	r3, [pc, #300]	; (8005118 <UART_SetConfig+0x4c4>)
 8004fea:	61bb      	str	r3, [r7, #24]
        break;
 8004fec:	e00c      	b.n	8005008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fee:	f7ff f8b9 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004ff2:	61b8      	str	r0, [r7, #24]
        break;
 8004ff4:	e008      	b.n	8005008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffa:	61bb      	str	r3, [r7, #24]
        break;
 8004ffc:	e004      	b.n	8005008 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	77bb      	strb	r3, [r7, #30]
        break;
 8005006:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d074      	beq.n	80050f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	005a      	lsls	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	085b      	lsrs	r3, r3, #1
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b0f      	cmp	r3, #15
 8005028:	d916      	bls.n	8005058 <UART_SetConfig+0x404>
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d212      	bcs.n	8005058 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f023 030f 	bic.w	r3, r3, #15
 800503a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	b29a      	uxth	r2, r3
 8005048:	89fb      	ldrh	r3, [r7, #14]
 800504a:	4313      	orrs	r3, r2
 800504c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	89fa      	ldrh	r2, [r7, #14]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	e04f      	b.n	80050f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	77bb      	strb	r3, [r7, #30]
 800505c:	e04c      	b.n	80050f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800505e:	7ffb      	ldrb	r3, [r7, #31]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d828      	bhi.n	80050b6 <UART_SetConfig+0x462>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0x418>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	08005091 	.word	0x08005091
 8005070:	08005099 	.word	0x08005099
 8005074:	080050a1 	.word	0x080050a1
 8005078:	080050b7 	.word	0x080050b7
 800507c:	080050a7 	.word	0x080050a7
 8005080:	080050b7 	.word	0x080050b7
 8005084:	080050b7 	.word	0x080050b7
 8005088:	080050b7 	.word	0x080050b7
 800508c:	080050af 	.word	0x080050af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005090:	f7ff f97a 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8005094:	61b8      	str	r0, [r7, #24]
        break;
 8005096:	e013      	b.n	80050c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005098:	f7ff f98a 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 800509c:	61b8      	str	r0, [r7, #24]
        break;
 800509e:	e00f      	b.n	80050c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <UART_SetConfig+0x4c4>)
 80050a2:	61bb      	str	r3, [r7, #24]
        break;
 80050a4:	e00c      	b.n	80050c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a6:	f7ff f85d 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 80050aa:	61b8      	str	r0, [r7, #24]
        break;
 80050ac:	e008      	b.n	80050c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b2:	61bb      	str	r3, [r7, #24]
        break;
 80050b4:	e004      	b.n	80050c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	77bb      	strb	r3, [r7, #30]
        break;
 80050be:	bf00      	nop
    }

    if (pclk != 0U)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d018      	beq.n	80050f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085a      	lsrs	r2, r3, #1
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	441a      	add	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b0f      	cmp	r3, #15
 80050de:	d909      	bls.n	80050f4 <UART_SetConfig+0x4a0>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d205      	bcs.n	80050f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	e001      	b.n	80050f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005104:	7fbb      	ldrb	r3, [r7, #30]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40007c00 	.word	0x40007c00
 8005114:	40023800 	.word	0x40023800
 8005118:	00f42400 	.word	0x00f42400

0800511c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01a      	beq.n	8005232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521a:	d10a      	bne.n	8005232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005270:	f7fc fbde 	bl	8001a30 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d10e      	bne.n	80052a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f81b 	bl	80052ce <UART_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e011      	b.n	80052c6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b09c      	sub	sp, #112	; 0x70
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	4613      	mov	r3, r2
 80052dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052de:	e0a7      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	f000 80a3 	beq.w	8005430 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7fc fba1 	bl	8001a30 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <UART_WaitOnFlagUntilTimeout+0x32>
 80052fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d13f      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800530e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005314:	667b      	str	r3, [r7, #100]	; 0x64
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800531e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005320:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800532c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e6      	bne.n	8005300 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3308      	adds	r3, #8
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	663b      	str	r3, [r7, #96]	; 0x60
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3308      	adds	r3, #8
 8005350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005352:	64ba      	str	r2, [r7, #72]	; 0x48
 8005354:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e5      	bne.n	8005332 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e068      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d050      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539c:	d148      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
 80053c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e6      	bne.n	80053a8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3308      	adds	r3, #8
 80053e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3308      	adds	r3, #8
 80053f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053fa:	623a      	str	r2, [r7, #32]
 80053fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	69f9      	ldr	r1, [r7, #28]
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	61bb      	str	r3, [r7, #24]
   return(result);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e5      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e010      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4013      	ands	r3, r2
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	429a      	cmp	r2, r3
 800544c:	f43f af48 	beq.w	80052e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3770      	adds	r7, #112	; 0x70
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800545c:	b084      	sub	sp, #16
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	f107 001c 	add.w	r0, r7, #28
 800546a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	2b01      	cmp	r3, #1
 8005472:	d120      	bne.n	80054b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	4b20      	ldr	r3, [pc, #128]	; (8005508 <USB_CoreInit+0xac>)
 8005486:	4013      	ands	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa96 	bl	80059dc <USB_CoreReset>
 80054b0:	4603      	mov	r3, r0
 80054b2:	73fb      	strb	r3, [r7, #15]
 80054b4:	e010      	b.n	80054d8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa8a 	bl	80059dc <USB_CoreReset>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d10b      	bne.n	80054f6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f043 0206 	orr.w	r2, r3, #6
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f043 0220 	orr.w	r2, r3, #32
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005502:	b004      	add	sp, #16
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	ffbdffbf 	.word	0xffbdffbf

0800550c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 0201 	bic.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d115      	bne.n	800557c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800555c:	2001      	movs	r0, #1
 800555e:	f7fc fa73 	bl	8001a48 <HAL_Delay>
      ms++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa29 	bl	80059c0 <USB_GetMode>
 800556e:	4603      	mov	r3, r0
 8005570:	2b01      	cmp	r3, #1
 8005572:	d01e      	beq.n	80055b2 <USB_SetCurrentMode+0x84>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b31      	cmp	r3, #49	; 0x31
 8005578:	d9f0      	bls.n	800555c <USB_SetCurrentMode+0x2e>
 800557a:	e01a      	b.n	80055b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d115      	bne.n	80055ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800558e:	2001      	movs	r0, #1
 8005590:	f7fc fa5a 	bl	8001a48 <HAL_Delay>
      ms++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3301      	adds	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa10 	bl	80059c0 <USB_GetMode>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <USB_SetCurrentMode+0x84>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b31      	cmp	r3, #49	; 0x31
 80055aa:	d9f0      	bls.n	800558e <USB_SetCurrentMode+0x60>
 80055ac:	e001      	b.n	80055b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e005      	b.n	80055be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b32      	cmp	r3, #50	; 0x32
 80055b6:	d101      	bne.n	80055bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055c8:	b084      	sub	sp, #16
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b086      	sub	sp, #24
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e009      	b.n	80055fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	3340      	adds	r3, #64	; 0x40
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	2200      	movs	r2, #0
 80055f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	3301      	adds	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b0e      	cmp	r3, #14
 8005600:	d9f2      	bls.n	80055e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11c      	bne.n	8005642 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005616:	f043 0302 	orr.w	r3, r3, #2
 800561a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e005      	b.n	800564e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005654:	461a      	mov	r2, r3
 8005656:	2300      	movs	r3, #0
 8005658:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	4619      	mov	r1, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005668:	461a      	mov	r2, r3
 800566a:	680b      	ldr	r3, [r1, #0]
 800566c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	2b01      	cmp	r3, #1
 8005672:	d10c      	bne.n	800568e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d104      	bne.n	8005684 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800567a:	2100      	movs	r1, #0
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f965 	bl	800594c <USB_SetDevSpeed>
 8005682:	e008      	b.n	8005696 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005684:	2101      	movs	r1, #1
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f960 	bl	800594c <USB_SetDevSpeed>
 800568c:	e003      	b.n	8005696 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800568e:	2103      	movs	r1, #3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f95b 	bl	800594c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005696:	2110      	movs	r1, #16
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8f3 	bl	8005884 <USB_FlushTxFifo>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f91f 	bl	80058ec <USB_FlushRxFifo>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	461a      	mov	r2, r3
 80056c0:	2300      	movs	r3, #0
 80056c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	461a      	mov	r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	461a      	mov	r2, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	e043      	b.n	800576a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056f8:	d118      	bne.n	800572c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	461a      	mov	r2, r3
 800570e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e013      	b.n	800573e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	461a      	mov	r2, r3
 8005724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	e008      	b.n	800573e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	461a      	mov	r2, r3
 800573a:	2300      	movs	r3, #0
 800573c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	461a      	mov	r2, r3
 800574c:	2300      	movs	r3, #0
 800574e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	461a      	mov	r2, r3
 800575e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	3301      	adds	r3, #1
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	429a      	cmp	r2, r3
 8005770:	d3b7      	bcc.n	80056e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	e043      	b.n	8005800 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800578a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578e:	d118      	bne.n	80057c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	461a      	mov	r2, r3
 80057a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e013      	b.n	80057d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	461a      	mov	r2, r3
 80057ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	e008      	b.n	80057d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	461a      	mov	r2, r3
 80057d0:	2300      	movs	r3, #0
 80057d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	461a      	mov	r2, r3
 80057e2:	2300      	movs	r3, #0
 80057e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	461a      	mov	r2, r3
 80057f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3301      	adds	r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	429a      	cmp	r2, r3
 8005806:	d3b7      	bcc.n	8005778 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800581a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005828:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	2b00      	cmp	r3, #0
 800582e:	d105      	bne.n	800583c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f043 0210 	orr.w	r2, r3, #16
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	4b0e      	ldr	r3, [pc, #56]	; (800587c <USB_DevInit+0x2b4>)
 8005842:	4313      	orrs	r3, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f043 0208 	orr.w	r2, r3, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800585a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d105      	bne.n	800586c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699a      	ldr	r2, [r3, #24]
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <USB_DevInit+0x2b8>)
 8005866:	4313      	orrs	r3, r2
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800586c:	7dfb      	ldrb	r3, [r7, #23]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005878:	b004      	add	sp, #16
 800587a:	4770      	bx	lr
 800587c:	803c3800 	.word	0x803c3800
 8005880:	40000004 	.word	0x40000004

08005884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3301      	adds	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <USB_FlushTxFifo+0x64>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e01b      	b.n	80058dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	daf2      	bge.n	8005892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	019b      	lsls	r3, r3, #6
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <USB_FlushTxFifo+0x64>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e006      	b.n	80058dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d0f0      	beq.n	80058bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	00030d40 	.word	0x00030d40

080058ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a11      	ldr	r2, [pc, #68]	; (8005948 <USB_FlushRxFifo+0x5c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e018      	b.n	800593c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	daf2      	bge.n	80058f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2210      	movs	r2, #16
 800591a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a08      	ldr	r2, [pc, #32]	; (8005948 <USB_FlushRxFifo+0x5c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e006      	b.n	800593c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b10      	cmp	r3, #16
 8005938:	d0f0      	beq.n	800591c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	00030d40 	.word	0x00030d40

0800594c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800596c:	4313      	orrs	r3, r2
 800596e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005998:	f023 0303 	bic.w	r3, r3, #3
 800599c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0301 	and.w	r3, r3, #1
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <USB_CoreReset+0x64>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e01b      	b.n	8005a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	daf2      	bge.n	80059e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3301      	adds	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <USB_CoreReset+0x64>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e006      	b.n	8005a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d0f0      	beq.n	8005a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	00030d40 	.word	0x00030d40

08005a44 <__libc_init_array>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	4d0d      	ldr	r5, [pc, #52]	; (8005a7c <__libc_init_array+0x38>)
 8005a48:	4c0d      	ldr	r4, [pc, #52]	; (8005a80 <__libc_init_array+0x3c>)
 8005a4a:	1b64      	subs	r4, r4, r5
 8005a4c:	10a4      	asrs	r4, r4, #2
 8005a4e:	2600      	movs	r6, #0
 8005a50:	42a6      	cmp	r6, r4
 8005a52:	d109      	bne.n	8005a68 <__libc_init_array+0x24>
 8005a54:	4d0b      	ldr	r5, [pc, #44]	; (8005a84 <__libc_init_array+0x40>)
 8005a56:	4c0c      	ldr	r4, [pc, #48]	; (8005a88 <__libc_init_array+0x44>)
 8005a58:	f000 f820 	bl	8005a9c <_init>
 8005a5c:	1b64      	subs	r4, r4, r5
 8005a5e:	10a4      	asrs	r4, r4, #2
 8005a60:	2600      	movs	r6, #0
 8005a62:	42a6      	cmp	r6, r4
 8005a64:	d105      	bne.n	8005a72 <__libc_init_array+0x2e>
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6c:	4798      	blx	r3
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7ee      	b.n	8005a50 <__libc_init_array+0xc>
 8005a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a76:	4798      	blx	r3
 8005a78:	3601      	adds	r6, #1
 8005a7a:	e7f2      	b.n	8005a62 <__libc_init_array+0x1e>
 8005a7c:	080078b0 	.word	0x080078b0
 8005a80:	080078b0 	.word	0x080078b0
 8005a84:	080078b0 	.word	0x080078b0
 8005a88:	080078b4 	.word	0x080078b4

08005a8c <memset>:
 8005a8c:	4402      	add	r2, r0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d100      	bne.n	8005a96 <memset+0xa>
 8005a94:	4770      	bx	lr
 8005a96:	f803 1b01 	strb.w	r1, [r3], #1
 8005a9a:	e7f9      	b.n	8005a90 <memset+0x4>

08005a9c <_init>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr

08005aa8 <_fini>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr
