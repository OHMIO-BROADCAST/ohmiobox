
OHMIO-FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004880  08008140  08008140  00018140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c0  0800c9c0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c0  0800c9c0  0001c9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9c8  0800c9c8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c8  0800c9c8  0001c9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9cc  0800c9cc  0001c9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c9d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  0800ca68  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  0800cb08  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b10  200001d8  0800cba8  000201d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000ce8  0800cba8  00020ce8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000168a9  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bec  00000000  00000000  00036ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010f8  00000000  00000000  000396a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000fc8  00000000  00000000  0003a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027d34  00000000  00000000  0003b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001515e  00000000  00000000  00063494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f14b1  00000000  00000000  000785f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00169aa3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004f7c  00000000  00000000  00169af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008124 	.word	0x08008124

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008124 	.word	0x08008124

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b974 	b.w	8000f4c <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468e      	mov	lr, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14d      	bne.n	8000d26 <__udivmoddi4+0xaa>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0xe8>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b152      	cbz	r2, 8000cac <__udivmoddi4+0x30>
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	f1c2 0120 	rsb	r1, r2, #32
 8000c9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ca2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca6:	ea41 0e03 	orr.w	lr, r1, r3
 8000caa:	4094      	lsls	r4, r2
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	0c21      	lsrs	r1, r4, #16
 8000cb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb6:	fa1f f78c 	uxth.w	r7, ip
 8000cba:	fb08 e316 	mls	r3, r8, r6, lr
 8000cbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cc2:	fb06 f107 	mul.w	r1, r6, r7
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x64>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cd2:	f080 811f 	bcs.w	8000f14 <__udivmoddi4+0x298>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 811c 	bls.w	8000f14 <__udivmoddi4+0x298>
 8000cdc:	3e02      	subs	r6, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf0:	fb00 f707 	mul.w	r7, r0, r7
 8000cf4:	42a7      	cmp	r7, r4
 8000cf6:	d90a      	bls.n	8000d0e <__udivmoddi4+0x92>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	f080 810a 	bcs.w	8000f18 <__udivmoddi4+0x29c>
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	f240 8107 	bls.w	8000f18 <__udivmoddi4+0x29c>
 8000d0a:	4464      	add	r4, ip
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d12:	1be4      	subs	r4, r4, r7
 8000d14:	2600      	movs	r6, #0
 8000d16:	b11d      	cbz	r5, 8000d20 <__udivmoddi4+0xa4>
 8000d18:	40d4      	lsrs	r4, r2
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d909      	bls.n	8000d3e <__udivmoddi4+0xc2>
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	f000 80ef 	beq.w	8000f0e <__udivmoddi4+0x292>
 8000d30:	2600      	movs	r6, #0
 8000d32:	e9c5 0100 	strd	r0, r1, [r5]
 8000d36:	4630      	mov	r0, r6
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	fab3 f683 	clz	r6, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d14a      	bne.n	8000ddc <__udivmoddi4+0x160>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xd4>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 80f9 	bhi.w	8000f42 <__udivmoddi4+0x2c6>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb61 0303 	sbc.w	r3, r1, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	469e      	mov	lr, r3
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e0      	beq.n	8000d20 <__udivmoddi4+0xa4>
 8000d5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d62:	e7dd      	b.n	8000d20 <__udivmoddi4+0xa4>
 8000d64:	b902      	cbnz	r2, 8000d68 <__udivmoddi4+0xec>
 8000d66:	deff      	udf	#255	; 0xff
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	f040 8092 	bne.w	8000e96 <__udivmoddi4+0x21a>
 8000d72:	eba1 010c 	sub.w	r1, r1, ip
 8000d76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	2601      	movs	r6, #1
 8000d80:	0c20      	lsrs	r0, r4, #16
 8000d82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d86:	fb07 1113 	mls	r1, r7, r3, r1
 8000d8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8e:	fb0e f003 	mul.w	r0, lr, r3
 8000d92:	4288      	cmp	r0, r1
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x12c>
 8000d96:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x12a>
 8000da0:	4288      	cmp	r0, r1
 8000da2:	f200 80cb 	bhi.w	8000f3c <__udivmoddi4+0x2c0>
 8000da6:	4643      	mov	r3, r8
 8000da8:	1a09      	subs	r1, r1, r0
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1110 	mls	r1, r7, r0, r1
 8000db4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x156>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x154>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2ca>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	eba4 040e 	sub.w	r4, r4, lr
 8000dd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dda:	e79c      	b.n	8000d16 <__udivmoddi4+0x9a>
 8000ddc:	f1c6 0720 	rsb	r7, r6, #32
 8000de0:	40b3      	lsls	r3, r6
 8000de2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa20 f407 	lsr.w	r4, r0, r7
 8000dee:	fa01 f306 	lsl.w	r3, r1, r6
 8000df2:	431c      	orrs	r4, r3
 8000df4:	40f9      	lsrs	r1, r7
 8000df6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e02:	0c20      	lsrs	r0, r4, #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fb09 1118 	mls	r1, r9, r8, r1
 8000e0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e10:	fb08 f00e 	mul.w	r0, r8, lr
 8000e14:	4288      	cmp	r0, r1
 8000e16:	fa02 f206 	lsl.w	r2, r2, r6
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b8>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2bc>
 8000e28:	4288      	cmp	r0, r1
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2bc>
 8000e2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e48:	458e      	cmp	lr, r1
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x1e2>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e54:	d26c      	bcs.n	8000f30 <__udivmoddi4+0x2b4>
 8000e56:	458e      	cmp	lr, r1
 8000e58:	d96a      	bls.n	8000f30 <__udivmoddi4+0x2b4>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4461      	add	r1, ip
 8000e5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e62:	fba0 9402 	umull	r9, r4, r0, r2
 8000e66:	eba1 010e 	sub.w	r1, r1, lr
 8000e6a:	42a1      	cmp	r1, r4
 8000e6c:	46c8      	mov	r8, r9
 8000e6e:	46a6      	mov	lr, r4
 8000e70:	d356      	bcc.n	8000f20 <__udivmoddi4+0x2a4>
 8000e72:	d053      	beq.n	8000f1c <__udivmoddi4+0x2a0>
 8000e74:	b15d      	cbz	r5, 8000e8e <__udivmoddi4+0x212>
 8000e76:	ebb3 0208 	subs.w	r2, r3, r8
 8000e7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e82:	fa22 f306 	lsr.w	r3, r2, r6
 8000e86:	40f1      	lsrs	r1, r6
 8000e88:	431f      	orrs	r7, r3
 8000e8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8e:	2600      	movs	r6, #0
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	f1c2 0320 	rsb	r3, r2, #32
 8000e9a:	40d8      	lsrs	r0, r3
 8000e9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	4301      	orrs	r1, r0
 8000ea8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb8:	0c0b      	lsrs	r3, r1, #16
 8000eba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ebe:	fb00 f60e 	mul.w	r6, r0, lr
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x260>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed2:	d22f      	bcs.n	8000f34 <__udivmoddi4+0x2b8>
 8000ed4:	429e      	cmp	r6, r3
 8000ed6:	d92d      	bls.n	8000f34 <__udivmoddi4+0x2b8>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	b289      	uxth	r1, r1
 8000ee0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eec:	fb06 f30e 	mul.w	r3, r6, lr
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x28a>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000efc:	d216      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d914      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000f02:	3e02      	subs	r6, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f0c:	e738      	b.n	8000d80 <__udivmoddi4+0x104>
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e705      	b.n	8000d20 <__udivmoddi4+0xa4>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e3      	b.n	8000ce0 <__udivmoddi4+0x64>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6f8      	b.n	8000d0e <__udivmoddi4+0x92>
 8000f1c:	454b      	cmp	r3, r9
 8000f1e:	d2a9      	bcs.n	8000e74 <__udivmoddi4+0x1f8>
 8000f20:	ebb9 0802 	subs.w	r8, r9, r2
 8000f24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7a3      	b.n	8000e74 <__udivmoddi4+0x1f8>
 8000f2c:	4646      	mov	r6, r8
 8000f2e:	e7ea      	b.n	8000f06 <__udivmoddi4+0x28a>
 8000f30:	4620      	mov	r0, r4
 8000f32:	e794      	b.n	8000e5e <__udivmoddi4+0x1e2>
 8000f34:	4640      	mov	r0, r8
 8000f36:	e7d1      	b.n	8000edc <__udivmoddi4+0x260>
 8000f38:	46d0      	mov	r8, sl
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b8>
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	e732      	b.n	8000da8 <__udivmoddi4+0x12c>
 8000f42:	4630      	mov	r0, r6
 8000f44:	e709      	b.n	8000d5a <__udivmoddi4+0xde>
 8000f46:	4464      	add	r4, ip
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x156>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f001 ff67 	bl	8002e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f810 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f962 	bl	8001224 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f60:	f000 f874 	bl	800104c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f64:	f000 f900 	bl	8001168 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f68:	f000 f92e 	bl	80011c8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000f6c:	f000 f8bc 	bl	80010e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000f70:	f000 fa44 	bl	80013fc <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ssd1306_TestAll();
 8000f74:	f001 fc58 	bl	8002828 <ssd1306_TestAll>
 8000f78:	e7fc      	b.n	8000f74 <main+0x24>
	...

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	; 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fbca 	bl	8006724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fa0:	f003 fb5e 	bl	8004660 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <SystemClock_Config+0xc8>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <SystemClock_Config+0xc8>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <SystemClock_Config+0xc8>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <SystemClock_Config+0xcc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc4:	4a20      	ldr	r2, [pc, #128]	; (8001048 <SystemClock_Config+0xcc>)
 8000fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <SystemClock_Config+0xcc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ff0:	2348      	movs	r3, #72	; 0x48
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0320 	add.w	r3, r7, #32
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fb3d 	bl	8004680 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800100c:	f000 f9b8 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2102      	movs	r1, #2
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fdcb 	bl	8004bc8 <HAL_RCC_ClockConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001038:	f000 f9a2 	bl	8001380 <Error_Handler>
  }
}
 800103c:	bf00      	nop
 800103e:	3750      	adds	r7, #80	; 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_ETH_Init+0x84>)
 8001052:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <MX_ETH_Init+0x88>)
 8001054:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <MX_ETH_Init+0x8c>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ETH_Init+0x8c>)
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_ETH_Init+0x8c>)
 8001064:	22e1      	movs	r2, #225	; 0xe1
 8001066:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_ETH_Init+0x8c>)
 800106a:	2200      	movs	r2, #0
 800106c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_ETH_Init+0x8c>)
 8001070:	2200      	movs	r2, #0
 8001072:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_ETH_Init+0x8c>)
 8001076:	2200      	movs	r2, #0
 8001078:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_ETH_Init+0x84>)
 800107c:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <MX_ETH_Init+0x8c>)
 800107e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_ETH_Init+0x84>)
 8001082:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001086:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_ETH_Init+0x84>)
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <MX_ETH_Init+0x90>)
 800108c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_ETH_Init+0x84>)
 8001090:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_ETH_Init+0x94>)
 8001092:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_ETH_Init+0x84>)
 8001096:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800109a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_ETH_Init+0x84>)
 800109e:	f002 f829 	bl	80030f4 <HAL_ETH_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010a8:	f000 f96a 	bl	8001380 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010ac:	2238      	movs	r2, #56	; 0x38
 80010ae:	2100      	movs	r1, #0
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_ETH_Init+0x98>)
 80010b2:	f005 fb37 	bl	8006724 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_ETH_Init+0x98>)
 80010b8:	2221      	movs	r2, #33	; 0x21
 80010ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_ETH_Init+0x98>)
 80010be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_ETH_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000022c 	.word	0x2000022c
 80010d4:	40028000 	.word	0x40028000
 80010d8:	200008c0 	.word	0x200008c0
 80010dc:	20000138 	.word	0x20000138
 80010e0:	20000098 	.word	0x20000098
 80010e4:	200001f4 	.word	0x200001f4

080010e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_I2C2_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <MX_I2C2_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_I2C2_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <MX_I2C2_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_I2C2_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_I2C2_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_I2C2_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_I2C2_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_I2C2_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_I2C2_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_I2C2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <MX_I2C2_Init+0x74>)
 8001124:	f002 fcd2 	bl	8003acc <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 f927 	bl	8001380 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <MX_I2C2_Init+0x74>)
 8001136:	f003 f8b3 	bl	80042a0 <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f91e 	bl	8001380 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_I2C2_Init+0x74>)
 8001148:	f003 f8f5 	bl	8004336 <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 f915 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200002dc 	.word	0x200002dc
 8001160:	40005800 	.word	0x40005800
 8001164:	00301739 	.word	0x00301739

08001168 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <MX_USART3_UART_Init+0x5c>)
 8001170:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART3_UART_Init+0x58>)
 80011ac:	f004 fb22 	bl	80057f4 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011b6:	f000 f8e3 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000330 	.word	0x20000330
 80011c4:	40004800 	.word	0x40004800

080011c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d6:	2206      	movs	r2, #6
 80011d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011dc:	2202      	movs	r2, #2
 80011de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001200:	2201      	movs	r2, #1
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800120c:	f003 f8df 	bl	80043ce <HAL_PCD_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001216:	f000 f8b3 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200003b8 	.word	0x200003b8

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <MX_GPIO_Init+0x14c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a46      	ldr	r2, [pc, #280]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001258:	f043 0320 	orr.w	r3, r3, #32
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0320 	and.w	r3, r3, #32
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <MX_GPIO_Init+0x14c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a40      	ldr	r2, [pc, #256]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a3a      	ldr	r2, [pc, #232]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <MX_GPIO_Init+0x14c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b35      	ldr	r3, [pc, #212]	; (8001370 <MX_GPIO_Init+0x14c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a34      	ldr	r2, [pc, #208]	; (8001370 <MX_GPIO_Init+0x14c>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <MX_GPIO_Init+0x14c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <MX_GPIO_Init+0x14c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a2e      	ldr	r2, [pc, #184]	; (8001370 <MX_GPIO_Init+0x14c>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <MX_GPIO_Init+0x14c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <MX_GPIO_Init+0x14c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a28      	ldr	r2, [pc, #160]	; (8001370 <MX_GPIO_Init+0x14c>)
 80012d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_GPIO_Init+0x14c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80012e8:	4822      	ldr	r0, [pc, #136]	; (8001374 <MX_GPIO_Init+0x150>)
 80012ea:	f002 fbd5 	bl	8003a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	4821      	ldr	r0, [pc, #132]	; (8001378 <MX_GPIO_Init+0x154>)
 80012f4:	f002 fbd0 	bl	8003a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <MX_GPIO_Init+0x158>)
 8001310:	f002 fa16 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001314:	f244 0381 	movw	r3, #16513	; 0x4081
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_GPIO_Init+0x150>)
 800132e:	f002 fa07 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001332:	2340      	movs	r3, #64	; 0x40
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <MX_GPIO_Init+0x154>)
 800134a:	f002 f9f9 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_GPIO_Init+0x154>)
 8001362:	f002 f9ed 	bl	8003740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001366:	bf00      	nop
 8001368:	3730      	adds	r7, #48	; 0x30
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400
 8001378:	40021800 	.word	0x40021800
 800137c:	40020800 	.word	0x40020800

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>

0800138a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af04      	add	r7, sp, #16
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	2200      	movs	r2, #0
 80013b4:	2178      	movs	r1, #120	; 0x78
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <ssd1306_WriteCommand+0x2c>)
 80013b8:	f002 fc18 	bl	8003bec <HAL_I2C_Mem_Write>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200002dc 	.word	0x200002dc

080013c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f04f 32ff 	mov.w	r2, #4294967295
 80013da:	9202      	str	r2, [sp, #8]
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	2240      	movs	r2, #64	; 0x40
 80013e6:	2178      	movs	r1, #120	; 0x78
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <ssd1306_WriteData+0x30>)
 80013ea:	f002 fbff 	bl	8003bec <HAL_I2C_Mem_Write>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002dc 	.word	0x200002dc

080013fc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001400:	f7ff ffc3 	bl	800138a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001404:	2064      	movs	r0, #100	; 0x64
 8001406:	f001 fd6b 	bl	8002ee0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800140a:	2000      	movs	r0, #0
 800140c:	f000 ff4c 	bl	80022a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001410:	2020      	movs	r0, #32
 8001412:	f7ff ffc1 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff ffbe 	bl	8001398 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800141c:	20b0      	movs	r0, #176	; 0xb0
 800141e:	f7ff ffbb 	bl	8001398 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001422:	20c8      	movs	r0, #200	; 0xc8
 8001424:	f7ff ffb8 	bl	8001398 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff ffb5 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800142e:	2010      	movs	r0, #16
 8001430:	f7ff ffb2 	bl	8001398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001434:	2040      	movs	r0, #64	; 0x40
 8001436:	f7ff ffaf 	bl	8001398 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800143a:	20ff      	movs	r0, #255	; 0xff
 800143c:	f000 ff20 	bl	8002280 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001440:	20a1      	movs	r0, #161	; 0xa1
 8001442:	f7ff ffa9 	bl	8001398 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001446:	20a6      	movs	r0, #166	; 0xa6
 8001448:	f7ff ffa6 	bl	8001398 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800144c:	20a8      	movs	r0, #168	; 0xa8
 800144e:	f7ff ffa3 	bl	8001398 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001452:	203f      	movs	r0, #63	; 0x3f
 8001454:	f7ff ffa0 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001458:	20a4      	movs	r0, #164	; 0xa4
 800145a:	f7ff ff9d 	bl	8001398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800145e:	20d3      	movs	r0, #211	; 0xd3
 8001460:	f7ff ff9a 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff ff97 	bl	8001398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800146a:	20d5      	movs	r0, #213	; 0xd5
 800146c:	f7ff ff94 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001470:	20f0      	movs	r0, #240	; 0xf0
 8001472:	f7ff ff91 	bl	8001398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001476:	20d9      	movs	r0, #217	; 0xd9
 8001478:	f7ff ff8e 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800147c:	2022      	movs	r0, #34	; 0x22
 800147e:	f7ff ff8b 	bl	8001398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001482:	20da      	movs	r0, #218	; 0xda
 8001484:	f7ff ff88 	bl	8001398 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001488:	2012      	movs	r0, #18
 800148a:	f7ff ff85 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800148e:	20db      	movs	r0, #219	; 0xdb
 8001490:	f7ff ff82 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001494:	2020      	movs	r0, #32
 8001496:	f7ff ff7f 	bl	8001398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800149a:	208d      	movs	r0, #141	; 0x8d
 800149c:	f7ff ff7c 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80014a0:	2014      	movs	r0, #20
 80014a2:	f7ff ff79 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80014a6:	2001      	movs	r0, #1
 80014a8:	f000 fefe 	bl	80022a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 f80f 	bl	80014d0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80014b2:	f000 f831 	bl	8001518 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <ssd1306_Init+0xd0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <ssd1306_Init+0xd0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80014c2:	4b02      	ldr	r3, [pc, #8]	; (80014cc <ssd1306_Init+0xd0>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	711a      	strb	r2, [r3, #4]
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000cc8 	.word	0x20000cc8

080014d0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e00d      	b.n	80014fc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <ssd1306_Fill+0x1a>
 80014e6:	2100      	movs	r1, #0
 80014e8:	e000      	b.n	80014ec <ssd1306_Fill+0x1c>
 80014ea:	21ff      	movs	r1, #255	; 0xff
 80014ec:	4a09      	ldr	r2, [pc, #36]	; (8001514 <ssd1306_Fill+0x44>)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	460a      	mov	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001502:	d3ed      	bcc.n	80014e0 <ssd1306_Fill+0x10>
    }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200008c8 	.word	0x200008c8

08001518 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	e016      	b.n	8001552 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	3b50      	subs	r3, #80	; 0x50
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff34 	bl	8001398 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff ff31 	bl	8001398 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001536:	2010      	movs	r0, #16
 8001538:	f7ff ff2e 	bl	8001398 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	01db      	lsls	r3, r3, #7
 8001540:	4a08      	ldr	r2, [pc, #32]	; (8001564 <ssd1306_UpdateScreen+0x4c>)
 8001542:	4413      	add	r3, r2
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff3e 	bl	80013c8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3301      	adds	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b07      	cmp	r3, #7
 8001556:	d9e5      	bls.n	8001524 <ssd1306_UpdateScreen+0xc>
    }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200008c8 	.word	0x200008c8

08001568 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	460b      	mov	r3, r1
 8001574:	71bb      	strb	r3, [r7, #6]
 8001576:	4613      	mov	r3, r2
 8001578:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db3d      	blt.n	80015fe <ssd1306_DrawPixel+0x96>
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	2b3f      	cmp	r3, #63	; 0x3f
 8001586:	d83a      	bhi.n	80015fe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001588:	797b      	ldrb	r3, [r7, #5]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d11a      	bne.n	80015c4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800158e:	79fa      	ldrb	r2, [r7, #7]
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	b2d8      	uxtb	r0, r3
 8001596:	4603      	mov	r3, r0
 8001598:	01db      	lsls	r3, r3, #7
 800159a:	4413      	add	r3, r2
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <ssd1306_DrawPixel+0xa4>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b259      	sxtb	r1, r3
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	4603      	mov	r3, r0
 80015b8:	01db      	lsls	r3, r3, #7
 80015ba:	4413      	add	r3, r2
 80015bc:	b2c9      	uxtb	r1, r1
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <ssd1306_DrawPixel+0xa4>)
 80015c0:	54d1      	strb	r1, [r2, r3]
 80015c2:	e01d      	b.n	8001600 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	b2d8      	uxtb	r0, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4413      	add	r3, r2
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <ssd1306_DrawPixel+0xa4>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4013      	ands	r3, r2
 80015ec:	b259      	sxtb	r1, r3
 80015ee:	79fa      	ldrb	r2, [r7, #7]
 80015f0:	4603      	mov	r3, r0
 80015f2:	01db      	lsls	r3, r3, #7
 80015f4:	4413      	add	r3, r2
 80015f6:	b2c9      	uxtb	r1, r1
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <ssd1306_DrawPixel+0xa4>)
 80015fa:	54d1      	strb	r1, [r2, r3]
 80015fc:	e000      	b.n	8001600 <ssd1306_DrawPixel+0x98>
        return;
 80015fe:	bf00      	nop
    }
}
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200008c8 	.word	0x200008c8

08001610 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	4604      	mov	r4, r0
 8001618:	1d38      	adds	r0, r7, #4
 800161a:	e880 0006 	stmia.w	r0, {r1, r2}
 800161e:	461a      	mov	r2, r3
 8001620:	4623      	mov	r3, r4
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	4613      	mov	r3, r2
 8001626:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b1f      	cmp	r3, #31
 800162c:	d902      	bls.n	8001634 <ssd1306_WriteChar+0x24>
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b7e      	cmp	r3, #126	; 0x7e
 8001632:	d901      	bls.n	8001638 <ssd1306_WriteChar+0x28>
        return 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e06d      	b.n	8001714 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001638:	4b38      	ldr	r3, [pc, #224]	; (800171c <ssd1306_WriteChar+0x10c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	793b      	ldrb	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	2b80      	cmp	r3, #128	; 0x80
 8001644:	dc06      	bgt.n	8001654 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001646:	4b35      	ldr	r3, [pc, #212]	; (800171c <ssd1306_WriteChar+0x10c>)
 8001648:	885b      	ldrh	r3, [r3, #2]
 800164a:	461a      	mov	r2, r3
 800164c:	797b      	ldrb	r3, [r7, #5]
 800164e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001650:	2b40      	cmp	r3, #64	; 0x40
 8001652:	dd01      	ble.n	8001658 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001654:	2300      	movs	r3, #0
 8001656:	e05d      	b.n	8001714 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	e04c      	b.n	80016f8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	3b20      	subs	r3, #32
 8001664:	7979      	ldrb	r1, [r7, #5]
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4619      	mov	r1, r3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	440b      	add	r3, r1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	e034      	b.n	80016e8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d012      	beq.n	80016b4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <ssd1306_WriteChar+0x10c>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4413      	add	r3, r2
 800169a:	b2d8      	uxtb	r0, r3
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <ssd1306_WriteChar+0x10c>)
 800169e:	885b      	ldrh	r3, [r3, #2]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	7bba      	ldrb	r2, [r7, #14]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff ff5b 	bl	8001568 <ssd1306_DrawPixel>
 80016b2:	e016      	b.n	80016e2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <ssd1306_WriteChar+0x10c>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b2d8      	uxtb	r0, r3
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <ssd1306_WriteChar+0x10c>)
 80016c4:	885b      	ldrh	r3, [r3, #2]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	b2d9      	uxtb	r1, r3
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	f7ff ff43 	bl	8001568 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	793b      	ldrb	r3, [r7, #4]
 80016ea:	461a      	mov	r2, r3
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d3c5      	bcc.n	800167e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	461a      	mov	r2, r3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4293      	cmp	r3, r2
 8001700:	d3ad      	bcc.n	800165e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <ssd1306_WriteChar+0x10c>)
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	793b      	ldrb	r3, [r7, #4]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4413      	add	r3, r2
 800170c:	b29a      	uxth	r2, r3
 800170e:	4b03      	ldr	r3, [pc, #12]	; (800171c <ssd1306_WriteChar+0x10c>)
 8001710:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	20000cc8 	.word	0x20000cc8

08001720 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	1d38      	adds	r0, r7, #4
 800172a:	e880 0006 	stmia.w	r0, {r1, r2}
 800172e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001730:	e012      	b.n	8001758 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	7818      	ldrb	r0, [r3, #0]
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	1d3a      	adds	r2, r7, #4
 800173a:	ca06      	ldmia	r2, {r1, r2}
 800173c:	f7ff ff68 	bl	8001610 <ssd1306_WriteChar>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d002      	beq.n	8001752 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	e008      	b.n	8001764 <ssd1306_WriteString+0x44>
        }
        str++;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3301      	adds	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1e8      	bne.n	8001732 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	781b      	ldrb	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <ssd1306_SetCursor+0x2c>)
 8001782:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <ssd1306_SetCursor+0x2c>)
 800178a:	805a      	strh	r2, [r3, #2]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	20000cc8 	.word	0x20000cc8

0800179c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	4603      	mov	r3, r0
 80017b0:	71bb      	strb	r3, [r7, #6]
 80017b2:	460b      	mov	r3, r1
 80017b4:	717b      	strb	r3, [r7, #5]
 80017b6:	4613      	mov	r3, r2
 80017b8:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80017ba:	797a      	ldrb	r2, [r7, #5]
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bfb8      	it	lt
 80017c4:	425b      	neglt	r3, r3
 80017c6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80017c8:	793a      	ldrb	r2, [r7, #4]
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bfb8      	it	lt
 80017d2:	425b      	neglt	r3, r3
 80017d4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	797b      	ldrb	r3, [r7, #5]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d201      	bcs.n	80017e2 <ssd1306_Line+0x46>
 80017de:	2301      	movs	r3, #1
 80017e0:	e001      	b.n	80017e6 <ssd1306_Line+0x4a>
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80017e8:	79ba      	ldrb	r2, [r7, #6]
 80017ea:	793b      	ldrb	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d201      	bcs.n	80017f4 <ssd1306_Line+0x58>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e001      	b.n	80017f8 <ssd1306_Line+0x5c>
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001802:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001806:	7939      	ldrb	r1, [r7, #4]
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff feac 	bl	8001568 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001810:	e024      	b.n	800185c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001812:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001816:	79b9      	ldrb	r1, [r7, #6]
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fea4 	bl	8001568 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	425b      	negs	r3, r3
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	dd08      	ble.n	8001842 <ssd1306_Line+0xa6>
            error -= deltaY;
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4413      	add	r3, r2
 8001840:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	429a      	cmp	r2, r3
 8001848:	da08      	bge.n	800185c <ssd1306_Line+0xc0>
            error += deltaX;
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	4413      	add	r3, r2
 8001850:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	4413      	add	r3, r2
 800185a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 800185c:	79fa      	ldrb	r2, [r7, #7]
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	429a      	cmp	r2, r3
 8001862:	d1d6      	bne.n	8001812 <ssd1306_Line+0x76>
 8001864:	79ba      	ldrb	r2, [r7, #6]
 8001866:	793b      	ldrb	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	d1d2      	bne.n	8001812 <ssd1306_Line+0x76>
        }
    }
    return;
 800186c:	bf00      	nop
}
 800186e:	3724      	adds	r7, #36	; 0x24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}

08001874 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b087      	sub	sp, #28
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d02a      	beq.n	80018e0 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 800188a:	2301      	movs	r3, #1
 800188c:	81fb      	strh	r3, [r7, #14]
 800188e:	e022      	b.n	80018d6 <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001890:	89fa      	ldrh	r2, [r7, #14]
 8001892:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	7818      	ldrb	r0, [r3, #0]
 80018a0:	89fa      	ldrh	r2, [r7, #14]
 80018a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	7859      	ldrb	r1, [r3, #1]
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	781c      	ldrb	r4, [r3, #0]
 80018ba:	89fb      	ldrh	r3, [r7, #14]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	785a      	ldrb	r2, [r3, #1]
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4613      	mov	r3, r2
 80018ca:	4622      	mov	r2, r4
 80018cc:	f7ff ff66 	bl	800179c <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 80018d0:	89fb      	ldrh	r3, [r7, #14]
 80018d2:	3301      	adds	r3, #1
 80018d4:	81fb      	strh	r3, [r7, #14]
 80018d6:	89fa      	ldrh	r2, [r7, #14]
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3d8      	bcc.n	8001890 <ssd1306_Polyline+0x1c>
    }

    return;
 80018de:	e000      	b.n	80018e2 <ssd1306_Polyline+0x6e>
        return;
 80018e0:	bf00      	nop
}
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}

080018e8 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe40 	bl	8000578 <__aeabi_f2d>
 80018f8:	a30e      	add	r3, pc, #56	; (adr r3, 8001934 <ssd1306_DegToRad+0x4c>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe93 	bl	8000628 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <ssd1306_DegToRad+0x48>)
 8001910:	f7fe ffb4 	bl	800087c <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f946 	bl	8000bac <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	ee07 3a90 	vmov	s15, r3
}
 8001926:	eeb0 0a67 	vmov.f32	s0, s15
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40668000 	.word	0x40668000
 8001934:	51eb851f 	.word	0x51eb851f
 8001938:	40091eb8 	.word	0x40091eb8

0800193c <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800194c:	d802      	bhi.n	8001954 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	81fb      	strh	r3, [r7, #14]
 8001952:	e013      	b.n	800197c <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <ssd1306_NormalizeTo0_360+0x50>)
 800195a:	fba1 1202 	umull	r1, r2, r1, r2
 800195e:	0892      	lsrs	r2, r2, #2
 8001960:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001964:	fb01 f202 	mul.w	r2, r1, r2
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	81fb      	strh	r3, [r7, #14]
        loc_angle = ((par_deg != 0)?par_deg:360);
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <ssd1306_NormalizeTo0_360+0x3a>
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	e001      	b.n	800197a <ssd1306_NormalizeTo0_360+0x3e>
 8001976:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800197a:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 800197c:	89fb      	ldrh	r3, [r7, #14]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	16c16c17 	.word	0x16c16c17

08001990 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af02      	add	r7, sp, #8
 8001996:	4604      	mov	r4, r0
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4623      	mov	r3, r4
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	4603      	mov	r3, r0
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	460b      	mov	r3, r1
 80019a8:	717b      	strb	r3, [r7, #5]
 80019aa:	4613      	mov	r3, r2
 80019ac:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80019b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ffbf 	bl	800193c <ssd1306_NormalizeTo0_360>
 80019be:	4603      	mov	r3, r0
 80019c0:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffb9 	bl	800193c <ssd1306_NormalizeTo0_360>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b77      	ldr	r3, [pc, #476]	; (8001bac <ssd1306_DrawArc+0x21c>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4a76      	ldr	r2, [pc, #472]	; (8001bb0 <ssd1306_DrawArc+0x220>)
 80019d8:	fb82 1203 	smull	r1, r2, r2, r3
 80019dc:	441a      	add	r2, r3
 80019de:	1212      	asrs	r2, r2, #8
 80019e0:	17db      	asrs	r3, r3, #31
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80019e6:	4b71      	ldr	r3, [pc, #452]	; (8001bac <ssd1306_DrawArc+0x21c>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	4a6f      	ldr	r2, [pc, #444]	; (8001bb4 <ssd1306_DrawArc+0x224>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a16:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 8001a1a:	e0be      	b.n	8001b9a <ssd1306_DrawArc+0x20a>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	f7ff ff59 	bl	80018e8 <ssd1306_DegToRad>
 8001a36:	ed87 0a06 	vstr	s0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8001a3a:	69b8      	ldr	r0, [r7, #24]
 8001a3c:	f7fe fd9c 	bl	8000578 <__aeabi_f2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	ec43 2b10 	vmov	d0, r2, r3
 8001a48:	f005 fb22 	bl	8007090 <sin>
 8001a4c:	ec55 4b10 	vmov	r4, r5, d0
 8001a50:	797b      	ldrb	r3, [r7, #5]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd7e 	bl	8000554 <__aeabi_i2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fde2 	bl	8000628 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f876 	bl	8000b5c <__aeabi_d2iz>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4413      	add	r3, r2
 8001a7a:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 8001a7c:	69b8      	ldr	r0, [r7, #24]
 8001a7e:	f7fe fd7b 	bl	8000578 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ec43 2b10 	vmov	d0, r2, r3
 8001a8a:	f005 faad 	bl	8006fe8 <cos>
 8001a8e:	ec55 4b10 	vmov	r4, r5, d0
 8001a92:	797b      	ldrb	r3, [r7, #5]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd5d 	bl	8000554 <__aeabi_i2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fdc1 	bl	8000628 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f855 	bl	8000b5c <__aeabi_d2iz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	79bb      	ldrb	r3, [r7, #6]
 8001aba:	4413      	add	r3, r2
 8001abc:	72bb      	strb	r3, [r7, #10]
        count++;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments) {
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d00f      	beq.n	8001aec <ssd1306_DrawArc+0x15c>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	f7ff ff01 	bl	80018e8 <ssd1306_DegToRad>
 8001ae6:	ed87 0a06 	vstr	s0, [r7, #24]
 8001aea:	e00a      	b.n	8001b02 <ssd1306_DrawArc+0x172>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	f7ff fef5 	bl	80018e8 <ssd1306_DegToRad>
 8001afe:	ed87 0a06 	vstr	s0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8001b02:	69b8      	ldr	r0, [r7, #24]
 8001b04:	f7fe fd38 	bl	8000578 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	ec43 2b10 	vmov	d0, r2, r3
 8001b10:	f005 fabe 	bl	8007090 <sin>
 8001b14:	ec55 4b10 	vmov	r4, r5, d0
 8001b18:	797b      	ldrb	r3, [r7, #5]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd1a 	bl	8000554 <__aeabi_i2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fd7e 	bl	8000628 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f812 	bl	8000b5c <__aeabi_d2iz>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4413      	add	r3, r2
 8001b42:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 8001b44:	69b8      	ldr	r0, [r7, #24]
 8001b46:	f7fe fd17 	bl	8000578 <__aeabi_f2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	ec43 2b10 	vmov	d0, r2, r3
 8001b52:	f005 fa49 	bl	8006fe8 <cos>
 8001b56:	ec55 4b10 	vmov	r4, r5, d0
 8001b5a:	797b      	ldrb	r3, [r7, #5]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcf9 	bl	8000554 <__aeabi_i2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4620      	mov	r0, r4
 8001b68:	4629      	mov	r1, r5
 8001b6a:	f7fe fd5d 	bl	8000628 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7fe fff1 	bl	8000b5c <__aeabi_d2iz>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	4413      	add	r3, r2
 8001b84:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001b86:	7a3c      	ldrb	r4, [r7, #8]
 8001b88:	7a7a      	ldrb	r2, [r7, #9]
 8001b8a:	7ab9      	ldrb	r1, [r7, #10]
 8001b8c:	7af8      	ldrb	r0, [r7, #11]
 8001b8e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4623      	mov	r3, r4
 8001b96:	f7ff fe01 	bl	800179c <ssd1306_Line>
    while(count < approx_segments)
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	f4ff af3c 	bcc.w	8001a1c <ssd1306_DrawArc+0x8c>
    }
    
    return;
 8001ba4:	bf00      	nop
}
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bac:	080081c2 	.word	0x080081c2
 8001bb0:	b60b60b7 	.word	0xb60b60b7
 8001bb4:	16c16c17 	.word	0x16c16c17

08001bb8 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71bb      	strb	r3, [r7, #6]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	717b      	strb	r3, [r7, #5]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1 = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	76fb      	strb	r3, [r7, #27]
    uint8_t xp2 = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t yp1 = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	76bb      	strb	r3, [r7, #26]
    uint8_t yp2 = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
    uint32_t loc_sweep = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001bf2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fea1 	bl	800193c <ssd1306_NormalizeTo0_360>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fe9b 	bl	800193c <ssd1306_NormalizeTo0_360>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4bad      	ldr	r3, [pc, #692]	; (8001ec0 <ssd1306_DrawArcWithRadiusLine+0x308>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	4aac      	ldr	r2, [pc, #688]	; (8001ec4 <ssd1306_DrawArcWithRadiusLine+0x30c>)
 8001c14:	fb82 1203 	smull	r1, r2, r2, r3
 8001c18:	441a      	add	r2, r3
 8001c1a:	1212      	asrs	r2, r2, #8
 8001c1c:	17db      	asrs	r3, r3, #31
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	623b      	str	r3, [r7, #32]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001c22:	4ba7      	ldr	r3, [pc, #668]	; (8001ec0 <ssd1306_DrawArcWithRadiusLine+0x308>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	08db      	lsrs	r3, r3, #3
 8001c30:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <ssd1306_DrawArcWithRadiusLine+0x310>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c52:	edc7 7a03 	vstr	s15, [r7, #12]

    rad = ssd1306_DegToRad(count*approx_degree);
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6c:	f7ff fe3c 	bl	80018e8 <ssd1306_DegToRad>
 8001c70:	ed87 0a07 	vstr	s0, [r7, #28]
    uint8_t first_point_x = x + (int8_t)(sin(rad)*radius);
 8001c74:	69f8      	ldr	r0, [r7, #28]
 8001c76:	f7fe fc7f 	bl	8000578 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	ec43 2b10 	vmov	d0, r2, r3
 8001c82:	f005 fa05 	bl	8007090 <sin>
 8001c86:	ec55 4b10 	vmov	r4, r5, d0
 8001c8a:	797b      	ldrb	r3, [r7, #5]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc61 	bl	8000554 <__aeabi_i2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fcc5 	bl	8000628 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe ff59 	bl	8000b5c <__aeabi_d2iz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	b25b      	sxtb	r3, r3
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	72fb      	strb	r3, [r7, #11]
    uint8_t first_point_y = y + (int8_t)(cos(rad)*radius);   
 8001cb6:	69f8      	ldr	r0, [r7, #28]
 8001cb8:	f7fe fc5e 	bl	8000578 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	ec43 2b10 	vmov	d0, r2, r3
 8001cc4:	f005 f990 	bl	8006fe8 <cos>
 8001cc8:	ec55 4b10 	vmov	r4, r5, d0
 8001ccc:	797b      	ldrb	r3, [r7, #5]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc40 	bl	8000554 <__aeabi_i2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4629      	mov	r1, r5
 8001cdc:	f7fe fca4 	bl	8000628 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe ff38 	bl	8000b5c <__aeabi_d2iz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	72bb      	strb	r3, [r7, #10]
    while (count < approx_segments) {
 8001cf8:	e0c2      	b.n	8001e80 <ssd1306_DrawArcWithRadiusLine+0x2c8>
        rad = ssd1306_DegToRad(count*approx_degree);
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	f7ff fdea 	bl	80018e8 <ssd1306_DegToRad>
 8001d14:	ed87 0a07 	vstr	s0, [r7, #28]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8001d18:	69f8      	ldr	r0, [r7, #28]
 8001d1a:	f7fe fc2d 	bl	8000578 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	ec43 2b10 	vmov	d0, r2, r3
 8001d26:	f005 f9b3 	bl	8007090 <sin>
 8001d2a:	ec55 4b10 	vmov	r4, r5, d0
 8001d2e:	797b      	ldrb	r3, [r7, #5]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fc0f 	bl	8000554 <__aeabi_i2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fc73 	bl	8000628 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff07 	bl	8000b5c <__aeabi_d2iz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4413      	add	r3, r2
 8001d58:	76fb      	strb	r3, [r7, #27]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 8001d5a:	69f8      	ldr	r0, [r7, #28]
 8001d5c:	f7fe fc0c 	bl	8000578 <__aeabi_f2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	ec43 2b10 	vmov	d0, r2, r3
 8001d68:	f005 f93e 	bl	8006fe8 <cos>
 8001d6c:	ec55 4b10 	vmov	r4, r5, d0
 8001d70:	797b      	ldrb	r3, [r7, #5]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbee 	bl	8000554 <__aeabi_i2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f7fe fc52 	bl	8000628 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7fe fee6 	bl	8000b5c <__aeabi_d2iz>
 8001d90:	4603      	mov	r3, r0
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	4413      	add	r3, r2
 8001d9a:	76bb      	strb	r3, [r7, #26]
        count++;
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	623b      	str	r3, [r7, #32]
        if (count != approx_segments) {
 8001da2:	6a3a      	ldr	r2, [r7, #32]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d00f      	beq.n	8001dca <ssd1306_DrawArcWithRadiusLine+0x212>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc0:	f7ff fd92 	bl	80018e8 <ssd1306_DegToRad>
 8001dc4:	ed87 0a07 	vstr	s0, [r7, #28]
 8001dc8:	e00a      	b.n	8001de0 <ssd1306_DrawArcWithRadiusLine+0x228>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd8:	f7ff fd86 	bl	80018e8 <ssd1306_DegToRad>
 8001ddc:	ed87 0a07 	vstr	s0, [r7, #28]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8001de0:	69f8      	ldr	r0, [r7, #28]
 8001de2:	f7fe fbc9 	bl	8000578 <__aeabi_f2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	ec43 2b10 	vmov	d0, r2, r3
 8001dee:	f005 f94f 	bl	8007090 <sin>
 8001df2:	ec55 4b10 	vmov	r4, r5, d0
 8001df6:	797b      	ldrb	r3, [r7, #5]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fbab 	bl	8000554 <__aeabi_i2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4620      	mov	r0, r4
 8001e04:	4629      	mov	r1, r5
 8001e06:	f7fe fc0f 	bl	8000628 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fea3 	bl	8000b5c <__aeabi_d2iz>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        yp2 = y + (int8_t)(cos(rad)*radius);    
 8001e24:	69f8      	ldr	r0, [r7, #28]
 8001e26:	f7fe fba7 	bl	8000578 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	ec43 2b10 	vmov	d0, r2, r3
 8001e32:	f005 f8d9 	bl	8006fe8 <cos>
 8001e36:	ec55 4b10 	vmov	r4, r5, d0
 8001e3a:	797b      	ldrb	r3, [r7, #5]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb89 	bl	8000554 <__aeabi_i2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fbed 	bl	8000628 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe81 	bl	8000b5c <__aeabi_d2iz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	79bb      	ldrb	r3, [r7, #6]
 8001e62:	4413      	add	r3, r2
 8001e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001e68:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001e6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e70:	7eb9      	ldrb	r1, [r7, #26]
 8001e72:	7ef8      	ldrb	r0, [r7, #27]
 8001e74:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	f7ff fc8e 	bl	800179c <ssd1306_Line>
    while (count < approx_segments) {
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f4ff af38 	bcc.w	8001cfa <ssd1306_DrawArcWithRadiusLine+0x142>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8001e8a:	7abc      	ldrb	r4, [r7, #10]
 8001e8c:	7afa      	ldrb	r2, [r7, #11]
 8001e8e:	79b9      	ldrb	r1, [r7, #6]
 8001e90:	79f8      	ldrb	r0, [r7, #7]
 8001e92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	4623      	mov	r3, r4
 8001e9a:	f7ff fc7f 	bl	800179c <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8001e9e:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001ea2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ea6:	79b9      	ldrb	r1, [r7, #6]
 8001ea8:	79f8      	ldrb	r0, [r7, #7]
 8001eaa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4623      	mov	r3, r4
 8001eb2:	f7ff fc73 	bl	800179c <ssd1306_Line>
    return;
 8001eb6:	bf00      	nop
}
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	080081c3 	.word	0x080081c3
 8001ec4:	b60b60b7 	.word	0xb60b60b7
 8001ec8:	16c16c17 	.word	0x16c16c17

08001ecc <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	71fb      	strb	r3, [r7, #7]
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71bb      	strb	r3, [r7, #6]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	717b      	strb	r3, [r7, #5]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001eea:	797b      	ldrb	r3, [r7, #5]
 8001eec:	425b      	negs	r3, r3
 8001eee:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8001ef4:	797b      	ldrb	r3, [r7, #5]
 8001ef6:	f1c3 0301 	rsb	r3, r3, #1
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db65      	blt.n	8001fd2 <ssd1306_DrawCircle+0x106>
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	2b3f      	cmp	r3, #63	; 0x3f
 8001f0a:	d862      	bhi.n	8001fd2 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	79fa      	ldrb	r2, [r7, #7]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	b2d8      	uxtb	r0, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	793a      	ldrb	r2, [r7, #4]
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7ff fb20 	bl	8001568 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4413      	add	r3, r2
 8001f30:	b2d8      	uxtb	r0, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	4413      	add	r3, r2
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	793a      	ldrb	r2, [r7, #4]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7ff fb12 	bl	8001568 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2d8      	uxtb	r0, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	79ba      	ldrb	r2, [r7, #6]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	793a      	ldrb	r2, [r7, #4]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7ff fb04 	bl	8001568 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	b2d8      	uxtb	r0, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	79ba      	ldrb	r2, [r7, #6]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	793a      	ldrb	r2, [r7, #4]
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7ff faf6 	bl	8001568 <ssd1306_DrawPixel>
        e2 = err;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dc13      	bgt.n	8001fb0 <ssd1306_DrawCircle+0xe4>
            y++;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	3301      	adds	r3, #1
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d105      	bne.n	8001fb0 <ssd1306_DrawCircle+0xe4>
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dc01      	bgt.n	8001fb0 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dd08      	ble.n	8001fca <ssd1306_DrawCircle+0xfe>
            x++;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dd9d      	ble.n	8001f0c <ssd1306_DrawCircle+0x40>

    return;
 8001fd0:	e000      	b.n	8001fd4 <ssd1306_DrawCircle+0x108>
        return;
 8001fd2:	bf00      	nop
}
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}

08001fda <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001fda:	b590      	push	{r4, r7, lr}
 8001fdc:	b089      	sub	sp, #36	; 0x24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	4608      	mov	r0, r1
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4623      	mov	r3, r4
 8001fea:	71fb      	strb	r3, [r7, #7]
 8001fec:	4603      	mov	r3, r0
 8001fee:	71bb      	strb	r3, [r7, #6]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	717b      	strb	r3, [r7, #5]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001ff8:	797b      	ldrb	r3, [r7, #5]
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8002002:	797b      	ldrb	r3, [r7, #5]
 8002004:	f1c3 0301 	rsb	r3, r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db51      	blt.n	80020b8 <ssd1306_FillCircle+0xde>
 8002014:	79bb      	ldrb	r3, [r7, #6]
 8002016:	2b3f      	cmp	r3, #63	; 0x3f
 8002018:	d84e      	bhi.n	80020b8 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	79bb      	ldrb	r3, [r7, #6]
 8002020:	4413      	add	r3, r2
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e017      	b.n	8002056 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	73bb      	strb	r3, [r7, #14]
 8002030:	e008      	b.n	8002044 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8002032:	793a      	ldrb	r2, [r7, #4]
 8002034:	7bf9      	ldrb	r1, [r7, #15]
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fa95 	bl	8001568 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	3b01      	subs	r3, #1
 8002042:	73bb      	strb	r3, [r7, #14]
 8002044:	7bba      	ldrb	r2, [r7, #14]
 8002046:	79f9      	ldrb	r1, [r7, #7]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	440b      	add	r3, r1
 800204c:	429a      	cmp	r2, r3
 800204e:	daf0      	bge.n	8002032 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	3b01      	subs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	79b9      	ldrb	r1, [r7, #6]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	1acb      	subs	r3, r1, r3
 800205e:	429a      	cmp	r2, r3
 8002060:	dae1      	bge.n	8002026 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	429a      	cmp	r2, r3
 800206c:	dc13      	bgt.n	8002096 <ssd1306_FillCircle+0xbc>
            y++;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	3301      	adds	r3, #1
 8002072:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	3301      	adds	r3, #1
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4413      	add	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	425b      	negs	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	429a      	cmp	r2, r3
 8002088:	d105      	bne.n	8002096 <ssd1306_FillCircle+0xbc>
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	429a      	cmp	r2, r3
 8002090:	dc01      	bgt.n	8002096 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	429a      	cmp	r2, r3
 800209c:	dd08      	ble.n	80020b0 <ssd1306_FillCircle+0xd6>
            x++;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	3301      	adds	r3, #1
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4413      	add	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	ddb1      	ble.n	800201a <ssd1306_FillCircle+0x40>

    return;
 80020b6:	e000      	b.n	80020ba <ssd1306_FillCircle+0xe0>
        return;
 80020b8:	bf00      	nop
}
 80020ba:	3724      	adds	r7, #36	; 0x24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}

080020c0 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	4604      	mov	r4, r0
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4623      	mov	r3, r4
 80020d0:	71fb      	strb	r3, [r7, #7]
 80020d2:	4603      	mov	r3, r0
 80020d4:	71bb      	strb	r3, [r7, #6]
 80020d6:	460b      	mov	r3, r1
 80020d8:	717b      	strb	r3, [r7, #5]
 80020da:	4613      	mov	r3, r2
 80020dc:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80020de:	79bc      	ldrb	r4, [r7, #6]
 80020e0:	797a      	ldrb	r2, [r7, #5]
 80020e2:	79b9      	ldrb	r1, [r7, #6]
 80020e4:	79f8      	ldrb	r0, [r7, #7]
 80020e6:	7e3b      	ldrb	r3, [r7, #24]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	4623      	mov	r3, r4
 80020ec:	f7ff fb56 	bl	800179c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80020f0:	793c      	ldrb	r4, [r7, #4]
 80020f2:	797a      	ldrb	r2, [r7, #5]
 80020f4:	79b9      	ldrb	r1, [r7, #6]
 80020f6:	7978      	ldrb	r0, [r7, #5]
 80020f8:	7e3b      	ldrb	r3, [r7, #24]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	4623      	mov	r3, r4
 80020fe:	f7ff fb4d 	bl	800179c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002102:	793c      	ldrb	r4, [r7, #4]
 8002104:	79fa      	ldrb	r2, [r7, #7]
 8002106:	7939      	ldrb	r1, [r7, #4]
 8002108:	7978      	ldrb	r0, [r7, #5]
 800210a:	7e3b      	ldrb	r3, [r7, #24]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4623      	mov	r3, r4
 8002110:	f7ff fb44 	bl	800179c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002114:	79bc      	ldrb	r4, [r7, #6]
 8002116:	79fa      	ldrb	r2, [r7, #7]
 8002118:	7939      	ldrb	r1, [r7, #4]
 800211a:	79f8      	ldrb	r0, [r7, #7]
 800211c:	7e3b      	ldrb	r3, [r7, #24]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4623      	mov	r3, r4
 8002122:	f7ff fb3b 	bl	800179c <ssd1306_Line>

    return;
 8002126:	bf00      	nop
}
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bd90      	pop	{r4, r7, pc}

0800212e <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800212e:	b590      	push	{r4, r7, lr}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	4604      	mov	r4, r0
 8002136:	4608      	mov	r0, r1
 8002138:	4611      	mov	r1, r2
 800213a:	461a      	mov	r2, r3
 800213c:	4623      	mov	r3, r4
 800213e:	71fb      	strb	r3, [r7, #7]
 8002140:	4603      	mov	r3, r0
 8002142:	71bb      	strb	r3, [r7, #6]
 8002144:	460b      	mov	r3, r1
 8002146:	717b      	strb	r3, [r7, #5]
 8002148:	4613      	mov	r3, r2
 800214a:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	797b      	ldrb	r3, [r7, #5]
 8002150:	4293      	cmp	r3, r2
 8002152:	bf28      	it	cs
 8002154:	4613      	movcs	r3, r2
 8002156:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002158:	797a      	ldrb	r2, [r7, #5]
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	4293      	cmp	r3, r2
 800215e:	bf38      	it	cc
 8002160:	4613      	movcc	r3, r2
 8002162:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002164:	79ba      	ldrb	r2, [r7, #6]
 8002166:	793b      	ldrb	r3, [r7, #4]
 8002168:	4293      	cmp	r3, r2
 800216a:	bf28      	it	cs
 800216c:	4613      	movcs	r3, r2
 800216e:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002170:	793a      	ldrb	r2, [r7, #4]
 8002172:	79bb      	ldrb	r3, [r7, #6]
 8002174:	4293      	cmp	r3, r2
 8002176:	bf38      	it	cc
 8002178:	4613      	movcc	r3, r2
 800217a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800217c:	7afb      	ldrb	r3, [r7, #11]
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e017      	b.n	80021b2 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002182:	7b7b      	ldrb	r3, [r7, #13]
 8002184:	73bb      	strb	r3, [r7, #14]
 8002186:	e009      	b.n	800219c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002188:	f897 2020 	ldrb.w	r2, [r7, #32]
 800218c:	7bf9      	ldrb	r1, [r7, #15]
 800218e:	7bbb      	ldrb	r3, [r7, #14]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff f9e9 	bl	8001568 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	3301      	adds	r3, #1
 800219a:	73bb      	strb	r3, [r7, #14]
 800219c:	7bba      	ldrb	r2, [r7, #14]
 800219e:	7b3b      	ldrb	r3, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d803      	bhi.n	80021ac <ssd1306_FillRectangle+0x7e>
 80021a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	daed      	bge.n	8002188 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	3301      	adds	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	7abb      	ldrb	r3, [r7, #10]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d803      	bhi.n	80021c2 <ssd1306_FillRectangle+0x94>
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b3f      	cmp	r3, #63	; 0x3f
 80021be:	d9e0      	bls.n	8002182 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
}
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd90      	pop	{r4, r7, pc}

080021ca <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	603a      	str	r2, [r7, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	460b      	mov	r3, r1
 80021da:	71bb      	strb	r3, [r7, #6]
 80021dc:	4613      	mov	r3, r2
 80021de:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80021e0:	797b      	ldrb	r3, [r7, #5]
 80021e2:	3307      	adds	r3, #7
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da00      	bge.n	80021ea <ssd1306_DrawBitmap+0x20>
 80021e8:	3307      	adds	r3, #7
 80021ea:	10db      	asrs	r3, r3, #3
 80021ec:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db3e      	blt.n	8002278 <ssd1306_DrawBitmap+0xae>
 80021fa:	79bb      	ldrb	r3, [r7, #6]
 80021fc:	2b3f      	cmp	r3, #63	; 0x3f
 80021fe:	d83b      	bhi.n	8002278 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002200:	2300      	movs	r3, #0
 8002202:	73bb      	strb	r3, [r7, #14]
 8002204:	e033      	b.n	800226e <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002206:	2300      	movs	r3, #0
 8002208:	737b      	strb	r3, [r7, #13]
 800220a:	e026      	b.n	800225a <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800220c:	7b7b      	ldrb	r3, [r7, #13]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e00d      	b.n	800223a <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	7b7a      	ldrb	r2, [r7, #13]
 800222a:	08d2      	lsrs	r2, r2, #3
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4413      	add	r3, r2
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da08      	bge.n	8002254 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002242:	79fa      	ldrb	r2, [r7, #7]
 8002244:	7b7b      	ldrb	r3, [r7, #13]
 8002246:	4413      	add	r3, r2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	7f3a      	ldrb	r2, [r7, #28]
 800224c:	79b9      	ldrb	r1, [r7, #6]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f98a 	bl	8001568 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002254:	7b7b      	ldrb	r3, [r7, #13]
 8002256:	3301      	adds	r3, #1
 8002258:	737b      	strb	r3, [r7, #13]
 800225a:	7b7a      	ldrb	r2, [r7, #13]
 800225c:	797b      	ldrb	r3, [r7, #5]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3d4      	bcc.n	800220c <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	3301      	adds	r3, #1
 8002266:	73bb      	strb	r3, [r7, #14]
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	3301      	adds	r3, #1
 800226c:	71bb      	strb	r3, [r7, #6]
 800226e:	7bba      	ldrb	r2, [r7, #14]
 8002270:	7e3b      	ldrb	r3, [r7, #24]
 8002272:	429a      	cmp	r2, r3
 8002274:	d3c7      	bcc.n	8002206 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002276:	e000      	b.n	800227a <ssd1306_DrawBitmap+0xb0>
        return;
 8002278:	bf00      	nop
}
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800228a:	2381      	movs	r3, #129	; 0x81
 800228c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f881 	bl	8001398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f87d 	bl	8001398 <ssd1306_WriteCommand>
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80022b8:	23af      	movs	r3, #175	; 0xaf
 80022ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <ssd1306_SetDisplayOn+0x38>)
 80022be:	2201      	movs	r2, #1
 80022c0:	715a      	strb	r2, [r3, #5]
 80022c2:	e004      	b.n	80022ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80022c4:	23ae      	movs	r3, #174	; 0xae
 80022c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <ssd1306_SetDisplayOn+0x38>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f861 	bl	8001398 <ssd1306_WriteCommand>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000cc8 	.word	0x20000cc8

080022e4 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff f8f0 	bl	80014d0 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80022f0:	f000 fdea 	bl	8002ec8 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8002302:	7bb9      	ldrb	r1, [r7, #14]
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2200      	movs	r2, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f92d 	bl	8001568 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 800230e:	7bbb      	ldrb	r3, [r7, #14]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <ssd1306_TestBorder+0x3e>
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b7e      	cmp	r3, #126	; 0x7e
 8002318:	d803      	bhi.n	8002322 <ssd1306_TestBorder+0x3e>
            x++;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	3301      	adds	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e016      	b.n	8002350 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b7f      	cmp	r3, #127	; 0x7f
 8002326:	d106      	bne.n	8002336 <ssd1306_TestBorder+0x52>
 8002328:	7bbb      	ldrb	r3, [r7, #14]
 800232a:	2b3e      	cmp	r3, #62	; 0x3e
 800232c:	d803      	bhi.n	8002336 <ssd1306_TestBorder+0x52>
            y++;
 800232e:	7bbb      	ldrb	r3, [r7, #14]
 8002330:	3301      	adds	r3, #1
 8002332:	73bb      	strb	r3, [r7, #14]
 8002334:	e00c      	b.n	8002350 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8002336:	7bbb      	ldrb	r3, [r7, #14]
 8002338:	2b3f      	cmp	r3, #63	; 0x3f
 800233a:	d106      	bne.n	800234a <ssd1306_TestBorder+0x66>
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <ssd1306_TestBorder+0x66>
            x--;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	3b01      	subs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e002      	b.n	8002350 <ssd1306_TestBorder+0x6c>
        else
            y--;
 800234a:	7bbb      	ldrb	r3, [r7, #14]
 800234c:	3b01      	subs	r3, #1
 800234e:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8002350:	7bb9      	ldrb	r1, [r7, #14]
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2201      	movs	r2, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff f906 	bl	8001568 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 800235c:	f7ff f8dc 	bl	8001518 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8002360:	2005      	movs	r0, #5
 8002362:	f000 fdbd 	bl	8002ee0 <HAL_Delay>
        end = HAL_GetTick();
 8002366:	f000 fdaf 	bl	8002ec8 <HAL_GetTick>
 800236a:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002376:	d3c4      	bcc.n	8002302 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 8002378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800237c:	f000 fdb0 	bl	8002ee0 <HAL_Delay>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff f89c 	bl	80014d0 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	4619      	mov	r1, r3
 800239c:	2002      	movs	r0, #2
 800239e:	f7ff f9e5 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 80023a2:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <ssd1306_TestFonts1+0x88>)
 80023a4:	2301      	movs	r3, #1
 80023a6:	ca06      	ldmia	r2, {r1, r2}
 80023a8:	481a      	ldr	r0, [pc, #104]	; (8002414 <ssd1306_TestFonts1+0x8c>)
 80023aa:	f7ff f9b9 	bl	8001720 <ssd1306_WriteString>
    y += 26;
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	331a      	adds	r3, #26
 80023b2:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	4619      	mov	r1, r3
 80023b8:	2002      	movs	r0, #2
 80023ba:	f7ff f9d7 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80023be:	4a16      	ldr	r2, [pc, #88]	; (8002418 <ssd1306_TestFonts1+0x90>)
 80023c0:	2301      	movs	r3, #1
 80023c2:	ca06      	ldmia	r2, {r1, r2}
 80023c4:	4815      	ldr	r0, [pc, #84]	; (800241c <ssd1306_TestFonts1+0x94>)
 80023c6:	f7ff f9ab 	bl	8001720 <ssd1306_WriteString>
    y += 18;
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	3312      	adds	r3, #18
 80023ce:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4619      	mov	r1, r3
 80023d4:	2002      	movs	r0, #2
 80023d6:	f7ff f9c9 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80023da:	4a11      	ldr	r2, [pc, #68]	; (8002420 <ssd1306_TestFonts1+0x98>)
 80023dc:	2301      	movs	r3, #1
 80023de:	ca06      	ldmia	r2, {r1, r2}
 80023e0:	4810      	ldr	r0, [pc, #64]	; (8002424 <ssd1306_TestFonts1+0x9c>)
 80023e2:	f7ff f99d 	bl	8001720 <ssd1306_WriteString>
    y += 10;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	330a      	adds	r3, #10
 80023ea:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	4619      	mov	r1, r3
 80023f0:	2002      	movs	r0, #2
 80023f2:	f7ff f9bb 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <ssd1306_TestFonts1+0xa0>)
 80023f8:	2301      	movs	r3, #1
 80023fa:	ca06      	ldmia	r2, {r1, r2}
 80023fc:	480b      	ldr	r0, [pc, #44]	; (800242c <ssd1306_TestFonts1+0xa4>)
 80023fe:	f7ff f98f 	bl	8001720 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8002402:	f7ff f889 	bl	8001518 <ssd1306_UpdateScreen>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000018 	.word	0x20000018
 8002414:	08008140 	.word	0x08008140
 8002418:	20000010 	.word	0x20000010
 800241c:	0800814c 	.word	0x0800814c
 8002420:	20000008 	.word	0x20000008
 8002424:	08008158 	.word	0x08008158
 8002428:	20000000 	.word	0x20000000
 800242c:	08008164 	.word	0x08008164

08002430 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b085      	sub	sp, #20
 8002434:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff f84a 	bl	80014d0 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 800243c:	2104      	movs	r1, #4
 800243e:	2000      	movs	r0, #0
 8002440:	f7ff f994 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8002444:	4a13      	ldr	r2, [pc, #76]	; (8002494 <ssd1306_TestFonts2+0x64>)
 8002446:	2301      	movs	r3, #1
 8002448:	ca06      	ldmia	r2, {r1, r2}
 800244a:	4813      	ldr	r0, [pc, #76]	; (8002498 <ssd1306_TestFonts2+0x68>)
 800244c:	f7ff f968 	bl	8001720 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8002450:	2124      	movs	r1, #36	; 0x24
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff f98a 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <ssd1306_TestFonts2+0x64>)
 800245a:	2301      	movs	r3, #1
 800245c:	ca06      	ldmia	r2, {r1, r2}
 800245e:	480f      	ldr	r0, [pc, #60]	; (800249c <ssd1306_TestFonts2+0x6c>)
 8002460:	f7ff f95e 	bl	8001720 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002464:	2360      	movs	r3, #96	; 0x60
 8002466:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002468:	233c      	movs	r3, #60	; 0x3c
 800246a:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	3310      	adds	r3, #16
 8002470:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	3302      	adds	r3, #2
 8002476:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002478:	793b      	ldrb	r3, [r7, #4]
 800247a:	797a      	ldrb	r2, [r7, #5]
 800247c:	79b9      	ldrb	r1, [r7, #6]
 800247e:	79f8      	ldrb	r0, [r7, #7]
 8002480:	2401      	movs	r4, #1
 8002482:	9400      	str	r4, [sp, #0]
 8002484:	f7ff fe53 	bl	800212e <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002488:	f7ff f846 	bl	8001518 <ssd1306_UpdateScreen>
#endif
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bd90      	pop	{r4, r7, pc}
 8002494:	20000020 	.word	0x20000020
 8002498:	08008170 	.word	0x08008170
 800249c:	0800817c 	.word	0x0800817c

080024a0 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b098      	sub	sp, #96	; 0x60
 80024a4:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7ff f812 	bl	80014d0 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80024ac:	f000 fd0c 	bl	8002ec8 <HAL_GetTick>
 80024b0:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 80024b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b4:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 80024ba:	4a43      	ldr	r2, [pc, #268]	; (80025c8 <ssd1306_TestFPS+0x128>)
 80024bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 80024c6:	2100      	movs	r1, #0
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7ff f94f 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 80024ce:	4a3f      	ldr	r2, [pc, #252]	; (80025cc <ssd1306_TestFPS+0x12c>)
 80024d0:	2300      	movs	r3, #0
 80024d2:	ca06      	ldmia	r2, {r1, r2}
 80024d4:	483e      	ldr	r0, [pc, #248]	; (80025d0 <ssd1306_TestFPS+0x130>)
 80024d6:	f7ff f923 	bl	8001720 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 80024da:	2124      	movs	r1, #36	; 0x24
 80024dc:	2002      	movs	r0, #2
 80024de:	f7ff f945 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 80024e2:	4a3a      	ldr	r2, [pc, #232]	; (80025cc <ssd1306_TestFPS+0x12c>)
 80024e4:	2300      	movs	r3, #0
 80024e6:	ca06      	ldmia	r2, {r1, r2}
 80024e8:	483a      	ldr	r0, [pc, #232]	; (80025d4 <ssd1306_TestFPS+0x134>)
 80024ea:	f7ff f919 	bl	8001720 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 80024ee:	2112      	movs	r1, #18
 80024f0:	2002      	movs	r0, #2
 80024f2:	f7ff f93b 	bl	800176c <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 80024f6:	4a35      	ldr	r2, [pc, #212]	; (80025cc <ssd1306_TestFPS+0x12c>)
 80024f8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80024fc:	2300      	movs	r3, #0
 80024fe:	ca06      	ldmia	r2, {r1, r2}
 8002500:	f7ff f90e 	bl	8001720 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002504:	f7ff f808 	bl	8001518 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002508:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800250c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 8002510:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002514:	3301      	adds	r3, #1
 8002516:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800251a:	220a      	movs	r2, #10
 800251c:	4619      	mov	r1, r3
 800251e:	f004 f8e7 	bl	80066f0 <memmove>
        message[sizeof(message)-2] = ch;
 8002522:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002526:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 800252a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252c:	3301      	adds	r3, #1
 800252e:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8002530:	f000 fcca 	bl	8002ec8 <HAL_GetTick>
 8002534:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8002536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002540:	4293      	cmp	r3, r2
 8002542:	d9d4      	bls.n	80024ee <ssd1306_TestFPS+0x4e>
   
    HAL_Delay(5000);
 8002544:	f241 3088 	movw	r0, #5000	; 0x1388
 8002548:	f000 fcca 	bl	8002ee0 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 800254c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	ee17 0a90 	vmov	r0, s15
 800255a:	f7fe f80d 	bl	8000578 <__aeabi_f2d>
 800255e:	4604      	mov	r4, r0
 8002560:	460d      	mov	r5, r1
 8002562:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ffe3 	bl	8000534 <__aeabi_ui2d>
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <ssd1306_TestFPS+0x138>)
 8002574:	f7fe f982 	bl	800087c <__aeabi_ddiv>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fe f97c 	bl	800087c <__aeabi_ddiv>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe fae6 	bl	8000b5c <__aeabi_d2iz>
 8002590:	4603      	mov	r3, r0
 8002592:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8002594:	1d38      	adds	r0, r7, #4
 8002596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002598:	4a10      	ldr	r2, [pc, #64]	; (80025dc <ssd1306_TestFPS+0x13c>)
 800259a:	2140      	movs	r1, #64	; 0x40
 800259c:	f004 f8ca 	bl	8006734 <sniprintf>
   
    ssd1306_Fill(White);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f7fe ff95 	bl	80014d0 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 80025a6:	2102      	movs	r1, #2
 80025a8:	2002      	movs	r0, #2
 80025aa:	f7ff f8df 	bl	800176c <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <ssd1306_TestFPS+0x12c>)
 80025b0:	1d38      	adds	r0, r7, #4
 80025b2:	2300      	movs	r3, #0
 80025b4:	ca06      	ldmia	r2, {r1, r2}
 80025b6:	f7ff f8b3 	bl	8001720 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80025ba:	f7fe ffad 	bl	8001518 <ssd1306_UpdateScreen>
}
 80025be:	bf00      	nop
 80025c0:	3760      	adds	r7, #96	; 0x60
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bdb0      	pop	{r4, r5, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	080081a8 	.word	0x080081a8
 80025cc:	20000010 	.word	0x20000010
 80025d0:	08008188 	.word	0x08008188
 80025d4:	08008194 	.word	0x08008194
 80025d8:	408f4000 	.word	0x408f4000
 80025dc:	080081a0 	.word	0x080081a0

080025e0 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 80025e6:	2301      	movs	r3, #1
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	233f      	movs	r3, #63	; 0x3f
 80025ec:	227f      	movs	r2, #127	; 0x7f
 80025ee:	2101      	movs	r1, #1
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff f8d3 	bl	800179c <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 80025f6:	2301      	movs	r3, #1
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	233f      	movs	r3, #63	; 0x3f
 80025fc:	2201      	movs	r2, #1
 80025fe:	2101      	movs	r1, #1
 8002600:	207f      	movs	r0, #127	; 0x7f
 8002602:	f7ff f8cb 	bl	800179c <ssd1306_Line>
  ssd1306_UpdateScreen();
 8002606:	f7fe ff87 	bl	8001518 <ssd1306_UpdateScreen>
  return;
 800260a:	bf00      	nop
}
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b085      	sub	sp, #20
 8002614:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	e028      	b.n	800266e <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4413      	add	r3, r2
 8002626:	b2db      	uxtb	r3, r3
 8002628:	3301      	adds	r3, #1
 800262a:	b2d8      	uxtb	r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4413      	add	r3, r2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3301      	adds	r3, #1
 800263a:	b2d9      	uxtb	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	4413      	add	r3, r2
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800264c:	b2da      	uxtb	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461c      	mov	r4, r3
 8002654:	00a4      	lsls	r4, r4, #2
 8002656:	4423      	add	r3, r4
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2401      	movs	r4, #1
 8002662:	9400      	str	r4, [sp, #0]
 8002664:	f7ff fd2c 	bl	80020c0 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3301      	adds	r3, #1
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d9d3      	bls.n	800261c <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8002674:	f7fe ff50 	bl	8001518 <ssd1306_UpdateScreen>
  return;
 8002678:	bf00      	nop
}
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}

08002680 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8002686:	2301      	movs	r3, #1
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2323      	movs	r3, #35	; 0x23
 800268c:	2241      	movs	r2, #65	; 0x41
 800268e:	2101      	movs	r1, #1
 8002690:	201f      	movs	r0, #31
 8002692:	f7ff fd4c 	bl	800212e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8002696:	2301      	movs	r3, #1
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	233c      	movs	r3, #60	; 0x3c
 800269c:	2246      	movs	r2, #70	; 0x46
 800269e:	212d      	movs	r1, #45	; 0x2d
 80026a0:	200a      	movs	r0, #10
 80026a2:	f7ff fd44 	bl	800212e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 80026a6:	2301      	movs	r3, #1
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	232d      	movs	r3, #45	; 0x2d
 80026ac:	2264      	movs	r2, #100	; 0x64
 80026ae:	210a      	movs	r1, #10
 80026b0:	204b      	movs	r0, #75	; 0x4b
 80026b2:	f7ff fd3c 	bl	800212e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 80026b6:	2300      	movs	r3, #0
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2337      	movs	r3, #55	; 0x37
 80026bc:	2250      	movs	r2, #80	; 0x50
 80026be:	211e      	movs	r1, #30
 80026c0:	2037      	movs	r0, #55	; 0x37
 80026c2:	f7ff fd34 	bl	800212e <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 80026c6:	f7fe ff27 	bl	8001518 <ssd1306_UpdateScreen>
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	e010      	b.n	80026fe <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	331e      	adds	r3, #30
 80026ec:	b2d8      	uxtb	r0, r3
 80026ee:	2301      	movs	r3, #1
 80026f0:	220a      	movs	r2, #10
 80026f2:	210f      	movs	r1, #15
 80026f4:	f7ff fbea 	bl	8001ecc <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3301      	adds	r3, #1
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d9eb      	bls.n	80026dc <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	e011      	b.n	800272e <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	0052      	lsls	r2, r2, #1
 8002712:	441a      	add	r2, r3
 8002714:	00d2      	lsls	r2, r2, #3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	330f      	adds	r3, #15
 800271c:	b2d8      	uxtb	r0, r3
 800271e:	2301      	movs	r3, #1
 8002720:	220a      	movs	r2, #10
 8002722:	2128      	movs	r1, #40	; 0x28
 8002724:	f7ff fc59 	bl	8001fda <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d9ea      	bls.n	800270a <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002734:	f7fe fef0 	bl	8001518 <ssd1306_UpdateScreen>
  return;
 8002738:	bf00      	nop
}
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002746:	2301      	movs	r3, #1
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2314      	movs	r3, #20
 8002752:	221e      	movs	r2, #30
 8002754:	211e      	movs	r1, #30
 8002756:	201e      	movs	r0, #30
 8002758:	f7ff f91a 	bl	8001990 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 800275c:	2301      	movs	r3, #1
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	231e      	movs	r3, #30
 8002768:	220a      	movs	r2, #10
 800276a:	2137      	movs	r1, #55	; 0x37
 800276c:	2050      	movs	r0, #80	; 0x50
 800276e:	f7ff fa23 	bl	8001bb8 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 8002772:	f7fe fed1 	bl	8001518 <ssd1306_UpdateScreen>
  return;
 8002776:	bf00      	nop
}
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <ssd1306_TestPolyline+0x28>)
 8002784:	463c      	mov	r4, r7
 8002786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002788:	c407      	stmia	r4!, {r0, r1, r2}
 800278a:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 800278c:	463b      	mov	r3, r7
 800278e:	2201      	movs	r2, #1
 8002790:	2107      	movs	r1, #7
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f86e 	bl	8001874 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002798:	f7fe febe 	bl	8001518 <ssd1306_UpdateScreen>
  return;
 800279c:	bf00      	nop
}
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd90      	pop	{r4, r7, pc}
 80027a4:	080081b4 	.word	0x080081b4

080027a8 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7fe fe8e 	bl	80014d0 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 80027b4:	2300      	movs	r3, #0
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2340      	movs	r3, #64	; 0x40
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	4a18      	ldr	r2, [pc, #96]	; (8002820 <ssd1306_TestDrawBitmap+0x78>)
 80027c0:	2100      	movs	r1, #0
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7ff fd01 	bl	80021ca <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80027c8:	f7fe fea6 	bl	8001518 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80027cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027d0:	f000 fb86 	bl	8002ee0 <HAL_Delay>
    ssd1306_Fill(Black);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe fe7b 	bl	80014d0 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80027da:	2301      	movs	r3, #1
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	2340      	movs	r3, #64	; 0x40
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2340      	movs	r3, #64	; 0x40
 80027e4:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <ssd1306_TestDrawBitmap+0x7c>)
 80027e6:	2100      	movs	r1, #0
 80027e8:	2020      	movs	r0, #32
 80027ea:	f7ff fcee 	bl	80021ca <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80027ee:	f7fe fe93 	bl	8001518 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80027f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027f6:	f000 fb73 	bl	8002ee0 <HAL_Delay>
    ssd1306_Fill(White);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fe fe68 	bl	80014d0 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 8002800:	2300      	movs	r3, #0
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2340      	movs	r3, #64	; 0x40
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2340      	movs	r3, #64	; 0x40
 800280a:	4a06      	ldr	r2, [pc, #24]	; (8002824 <ssd1306_TestDrawBitmap+0x7c>)
 800280c:	2100      	movs	r1, #0
 800280e:	2020      	movs	r0, #32
 8002810:	f7ff fcdb 	bl	80021ca <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002814:	f7fe fe80 	bl	8001518 <ssd1306_UpdateScreen>
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	0800c198 	.word	0x0800c198
 8002824:	0800c598 	.word	0x0800c598

08002828 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 800282c:	f7fe fde6 	bl	80013fc <ssd1306_Init>
    ssd1306_TestFPS();
 8002830:	f7ff fe36 	bl	80024a0 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002834:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002838:	f000 fb52 	bl	8002ee0 <HAL_Delay>
    ssd1306_TestBorder();
 800283c:	f7ff fd52 	bl	80022e4 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8002840:	f7ff fda2 	bl	8002388 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002844:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002848:	f000 fb4a 	bl	8002ee0 <HAL_Delay>
    ssd1306_TestFonts2();
 800284c:	f7ff fdf0 	bl	8002430 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002850:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002854:	f000 fb44 	bl	8002ee0 <HAL_Delay>
    ssd1306_Fill(Black);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fe39 	bl	80014d0 <ssd1306_Fill>
    ssd1306_TestRectangle();
 800285e:	f7ff fed7 	bl	8002610 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8002862:	f7ff febd 	bl	80025e0 <ssd1306_TestLine>
    HAL_Delay(3000);
 8002866:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800286a:	f000 fb39 	bl	8002ee0 <HAL_Delay>
    ssd1306_Fill(Black);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe fe2e 	bl	80014d0 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8002874:	f7ff ff04 	bl	8002680 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002878:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800287c:	f000 fb30 	bl	8002ee0 <HAL_Delay>
    ssd1306_Fill(Black);
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe fe25 	bl	80014d0 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002886:	f7ff ff79 	bl	800277c <ssd1306_TestPolyline>
    HAL_Delay(3000);
 800288a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800288e:	f000 fb27 	bl	8002ee0 <HAL_Delay>
    ssd1306_Fill(Black);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe fe1c 	bl	80014d0 <ssd1306_Fill>
    ssd1306_TestArc();
 8002898:	f7ff ff52 	bl	8002740 <ssd1306_TestArc>
    HAL_Delay(3000);
 800289c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028a0:	f000 fb1e 	bl	8002ee0 <HAL_Delay>
    ssd1306_Fill(Black);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe fe13 	bl	80014d0 <ssd1306_Fill>
    ssd1306_TestCircle();
 80028aa:	f7ff ff11 	bl	80026d0 <ssd1306_TestCircle>
    HAL_Delay(3000);
 80028ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028b2:	f000 fb15 	bl	8002ee0 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 80028b6:	f7ff ff77 	bl	80027a8 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 80028ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028be:	f000 fb0f 	bl	8002ee0 <HAL_Delay>
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_MspInit+0x44>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a0e      	ldr	r2, [pc, #56]	; (800290c <HAL_MspInit+0x44>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HAL_MspInit+0x44>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_MspInit+0x44>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_MspInit+0x44>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_MspInit+0x44>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08e      	sub	sp, #56	; 0x38
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4e      	ldr	r2, [pc, #312]	; (8002a68 <HAL_ETH_MspInit+0x158>)
 800292e:	4293      	cmp	r3, r2
 8002930:	f040 8096 	bne.w	8002a60 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002934:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 800293a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800293e:	6313      	str	r3, [r2, #48]	; 0x30
 8002940:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4a46      	ldr	r2, [pc, #280]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 8002952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
 8002958:	4b44      	ldr	r3, [pc, #272]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a40      	ldr	r2, [pc, #256]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 800296a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297c:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a3a      	ldr	r2, [pc, #232]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	6313      	str	r3, [r2, #48]	; 0x30
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029c4:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 80029ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ce:	6313      	str	r3, [r2, #48]	; 0x30
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_ETH_MspInit+0x15c>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029dc:	2332      	movs	r3, #50	; 0x32
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e8:	2303      	movs	r3, #3
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029ec:	230b      	movs	r3, #11
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	481e      	ldr	r0, [pc, #120]	; (8002a70 <HAL_ETH_MspInit+0x160>)
 80029f8:	f000 fea2 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80029fc:	2386      	movs	r3, #134	; 0x86
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a0c:	230b      	movs	r3, #11
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a14:	4619      	mov	r1, r3
 8002a16:	4817      	ldr	r0, [pc, #92]	; (8002a74 <HAL_ETH_MspInit+0x164>)
 8002a18:	f000 fe92 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a2e:	230b      	movs	r3, #11
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	4619      	mov	r1, r3
 8002a38:	480f      	ldr	r0, [pc, #60]	; (8002a78 <HAL_ETH_MspInit+0x168>)
 8002a3a:	f000 fe81 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002a3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a50:	230b      	movs	r3, #11
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4808      	ldr	r0, [pc, #32]	; (8002a7c <HAL_ETH_MspInit+0x16c>)
 8002a5c:	f000 fe70 	bl	8003740 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3738      	adds	r7, #56	; 0x38
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40028000 	.word	0x40028000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40021800 	.word	0x40021800

08002a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b0aa      	sub	sp, #168	; 0xa8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	2284      	movs	r2, #132	; 0x84
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fe3f 	bl	8006724 <memset>
  if(hi2c->Instance==I2C2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <HAL_I2C_MspInit+0xb0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d13b      	bne.n	8002b28 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 faa8 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002aca:	f7fe fc59 	bl	8001380 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_I2C_MspInit+0xb4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_I2C_MspInit+0xb4>)
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_I2C_MspInit+0xb4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aec:	2312      	movs	r3, #18
 8002aee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002afe:	2304      	movs	r3, #4
 8002b00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b08:	4619      	mov	r1, r3
 8002b0a:	480b      	ldr	r0, [pc, #44]	; (8002b38 <HAL_I2C_MspInit+0xb8>)
 8002b0c:	f000 fe18 	bl	8003740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_I2C_MspInit+0xb4>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_I2C_MspInit+0xb4>)
 8002b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_I2C_MspInit+0xb4>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b28:	bf00      	nop
 8002b2a:	37a8      	adds	r7, #168	; 0xa8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40005800 	.word	0x40005800
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40021400 	.word	0x40021400

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b0aa      	sub	sp, #168	; 0xa8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	2284      	movs	r2, #132	; 0x84
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fde1 	bl	8006724 <memset>
  if(huart->Instance==USART3)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <HAL_UART_MspInit+0xb4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d13c      	bne.n	8002be6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002b72:	2300      	movs	r3, #0
 8002b74:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b76:	f107 0310 	add.w	r3, r7, #16
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fa4a 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b86:	f7fe fbfb 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_UART_MspInit+0xb8>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_UART_MspInit+0xb8>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_UART_MspInit+0xb8>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_UART_MspInit+0xb8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <HAL_UART_MspInit+0xb8>)
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_UART_MspInit+0xb8>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bde:	4619      	mov	r1, r3
 8002be0:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_UART_MspInit+0xbc>)
 8002be2:	f000 fdad 	bl	8003740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002be6:	bf00      	nop
 8002be8:	37a8      	adds	r7, #168	; 0xa8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40004800 	.word	0x40004800
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020c00 	.word	0x40020c00

08002bfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b0ac      	sub	sp, #176	; 0xb0
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c14:	f107 0318 	add.w	r3, r7, #24
 8002c18:	2284      	movs	r2, #132	; 0x84
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fd81 	bl	8006724 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2a:	d159      	bne.n	8002ce0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002c2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c38:	f107 0318 	add.w	r3, r7, #24
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 f9e9 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002c48:	f7fe fb9a 	bl	8001380 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002c64:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c7e:	230a      	movs	r3, #10
 8002c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4818      	ldr	r0, [pc, #96]	; (8002cec <HAL_PCD_MspInit+0xf0>)
 8002c8c:	f000 fd58 	bl	8003740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ca4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4810      	ldr	r0, [pc, #64]	; (8002cec <HAL_PCD_MspInit+0xf0>)
 8002cac:	f000 fd48 	bl	8003740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cba:	6353      	str	r3, [r2, #52]	; 0x34
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_PCD_MspInit+0xec>)
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002ce0:	bf00      	nop
 8002ce2:	37b0      	adds	r7, #176	; 0xb0
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020000 	.word	0x40020000

08002cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <NMI_Handler+0x4>

08002cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <HardFault_Handler+0x4>

08002cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <MemManage_Handler+0x4>

08002d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <BusFault_Handler+0x4>

08002d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <UsageFault_Handler+0x4>

08002d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d3c:	f000 f8b0 	bl	8002ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <_sbrk+0x5c>)
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <_sbrk+0x60>)
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <_sbrk+0x64>)
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <_sbrk+0x68>)
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d207      	bcs.n	8002d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d74:	f003 fc84 	bl	8006680 <__errno>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e009      	b.n	8002d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <_sbrk+0x64>)
 8002d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20050000 	.word	0x20050000
 8002da4:	00000400 	.word	0x00000400
 8002da8:	20000cd0 	.word	0x20000cd0
 8002dac:	20000ce8 	.word	0x20000ce8

08002db0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <SystemInit+0x20>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <SystemInit+0x20>)
 8002dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dda:	490e      	ldr	r1, [pc, #56]	; (8002e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de0:	e002      	b.n	8002de8 <LoopCopyDataInit>

08002de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de6:	3304      	adds	r3, #4

08002de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dec:	d3f9      	bcc.n	8002de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002df0:	4c0b      	ldr	r4, [pc, #44]	; (8002e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df4:	e001      	b.n	8002dfa <LoopFillZerobss>

08002df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df8:	3204      	adds	r2, #4

08002dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dfc:	d3fb      	bcc.n	8002df6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dfe:	f7ff ffd7 	bl	8002db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e02:	f003 fc43 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e06:	f7fe f8a3 	bl	8000f50 <main>
  bx  lr    
 8002e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e0c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e14:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002e18:	0800c9d0 	.word	0x0800c9d0
  ldr r2, =_sbss
 8002e1c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002e20:	20000ce8 	.word	0x20000ce8

08002e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC_IRQHandler>

08002e26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	f000 f92e 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f000 f805 	bl	8002e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e36:	f7ff fd47 	bl	80028c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_InitTick+0x54>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x58>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f93b 	bl	80030da <HAL_SYSTICK_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d80a      	bhi.n	8002e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e74:	2200      	movs	r2, #0
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f000 f911 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e80:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <HAL_InitTick+0x5c>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000028 	.word	0x20000028
 8002e98:	20000030 	.word	0x20000030
 8002e9c:	2000002c 	.word	0x2000002c

08002ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_IncTick+0x20>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_IncTick+0x24>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_IncTick+0x24>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000030 	.word	0x20000030
 8002ec4:	20000cd4 	.word	0x20000cd4

08002ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_GetTick+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000cd4 	.word	0x20000cd4

08002ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff ffee 	bl	8002ec8 <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d005      	beq.n	8002f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_Delay+0x44>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f06:	bf00      	nop
 8002f08:	f7ff ffde 	bl	8002ec8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8f7      	bhi.n	8002f08 <HAL_Delay+0x28>
  {
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000030 	.word	0x20000030

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <__NVIC_SetPriorityGrouping+0x40>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <__NVIC_SetPriorityGrouping+0x40>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00
 8002f6c:	05fa0000 	.word	0x05fa0000

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff47 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff5c 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff8e 	bl	8002fe0 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5d 	bl	8002f8c <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffb0 	bl	8003048 <SysTick_Config>
 80030e8:	4603      	mov	r3, r0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e06a      	b.n	80031dc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2223      	movs	r2, #35	; 0x23
 8003114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fbf9 	bl	8002910 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_ETH_Init+0xf0>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a30      	ldr	r2, [pc, #192]	; (80031e4 <HAL_ETH_Init+0xf0>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_ETH_Init+0xf0>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_ETH_Init+0xf4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <HAL_ETH_Init+0xf4>)
 800313c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003140:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003142:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <HAL_ETH_Init+0xf4>)
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4927      	ldr	r1, [pc, #156]	; (80031e8 <HAL_ETH_Init+0xf4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <HAL_ETH_Init+0xf4>)
 8003152:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800316a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800316c:	f7ff feac 	bl	8002ec8 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003172:	e011      	b.n	8003198 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003174:	f7ff fea8 	bl	8002ec8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003182:	d909      	bls.n	8003198 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2204      	movs	r2, #4
 8003188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	22e0      	movs	r2, #224	; 0xe0
 8003190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e021      	b.n	80031dc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e4      	bne.n	8003174 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f958 	bl	8003460 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f9ff 	bl	80035b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fa55 	bl	8003666 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	461a      	mov	r2, r3
 80031c2:	2100      	movs	r1, #0
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f9bd 	bl	8003544 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2210      	movs	r2, #16
 80031d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800

080031ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4b51      	ldr	r3, [pc, #324]	; (8003348 <ETH_SetMACConfig+0x15c>)
 8003202:	4013      	ands	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7c1b      	ldrb	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <ETH_SetMACConfig+0x28>
 800320e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003212:	e000      	b.n	8003216 <ETH_SetMACConfig+0x2a>
 8003214:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	7c5b      	ldrb	r3, [r3, #17]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <ETH_SetMACConfig+0x38>
 800321e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003222:	e000      	b.n	8003226 <ETH_SetMACConfig+0x3a>
 8003224:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003226:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800322c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	7fdb      	ldrb	r3, [r3, #31]
 8003232:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003234:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800323a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	7f92      	ldrb	r2, [r2, #30]
 8003240:	2a00      	cmp	r2, #0
 8003242:	d102      	bne.n	800324a <ETH_SetMACConfig+0x5e>
 8003244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003248:	e000      	b.n	800324c <ETH_SetMACConfig+0x60>
 800324a:	2200      	movs	r2, #0
                        macconf->Speed |
 800324c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	7f1b      	ldrb	r3, [r3, #28]
 8003252:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003254:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800325a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	791b      	ldrb	r3, [r3, #4]
 8003260:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003262:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	f892 2020 	ldrb.w	r2, [r2, #32]
 800326a:	2a00      	cmp	r2, #0
 800326c:	d102      	bne.n	8003274 <ETH_SetMACConfig+0x88>
 800326e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003272:	e000      	b.n	8003276 <ETH_SetMACConfig+0x8a>
 8003274:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003276:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	7bdb      	ldrb	r3, [r3, #15]
 800327c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800327e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003284:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800328c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800328e:	4313      	orrs	r3, r2
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f7ff fe1a 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80032c2:	4013      	ands	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80032d2:	2a00      	cmp	r2, #0
 80032d4:	d101      	bne.n	80032da <ETH_SetMACConfig+0xee>
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	e000      	b.n	80032dc <ETH_SetMACConfig+0xf0>
 80032da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80032ea:	2a01      	cmp	r2, #1
 80032ec:	d101      	bne.n	80032f2 <ETH_SetMACConfig+0x106>
 80032ee:	2208      	movs	r2, #8
 80032f0:	e000      	b.n	80032f4 <ETH_SetMACConfig+0x108>
 80032f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80032f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80032fc:	2a01      	cmp	r2, #1
 80032fe:	d101      	bne.n	8003304 <ETH_SetMACConfig+0x118>
 8003300:	2204      	movs	r2, #4
 8003302:	e000      	b.n	8003306 <ETH_SetMACConfig+0x11a>
 8003304:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003306:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800330e:	2a01      	cmp	r2, #1
 8003310:	d101      	bne.n	8003316 <ETH_SetMACConfig+0x12a>
 8003312:	2202      	movs	r2, #2
 8003314:	e000      	b.n	8003318 <ETH_SetMACConfig+0x12c>
 8003316:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003318:	4313      	orrs	r3, r2
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003330:	2001      	movs	r0, #1
 8003332:	f7ff fdd5 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	619a      	str	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	ff20810f 	.word	0xff20810f

0800334c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4b3d      	ldr	r3, [pc, #244]	; (800345c <ETH_SetDMAConfig+0x110>)
 8003366:	4013      	ands	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	7b1b      	ldrb	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <ETH_SetDMAConfig+0x2c>
 8003372:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003376:	e000      	b.n	800337a <ETH_SetDMAConfig+0x2e>
 8003378:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	7b5b      	ldrb	r3, [r3, #13]
 800337e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003380:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	7f52      	ldrb	r2, [r2, #29]
 8003386:	2a00      	cmp	r2, #0
 8003388:	d102      	bne.n	8003390 <ETH_SetDMAConfig+0x44>
 800338a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800338e:	e000      	b.n	8003392 <ETH_SetDMAConfig+0x46>
 8003390:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003392:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	7b9b      	ldrb	r3, [r3, #14]
 8003398:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800339a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	7f1b      	ldrb	r3, [r3, #28]
 80033a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80033a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	7f9b      	ldrb	r3, [r3, #30]
 80033ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033c0:	4313      	orrs	r3, r2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d0:	461a      	mov	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f7ff fd7c 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f0:	461a      	mov	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	791b      	ldrb	r3, [r3, #4]
 80033fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003400:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003406:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800340c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003414:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003416:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800341e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003424:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800342e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003432:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003440:	2001      	movs	r0, #1
 8003442:	f7ff fd4d 	bl	8002ee0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344e:	461a      	mov	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6013      	str	r3, [r2, #0]
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	f8de3f23 	.word	0xf8de3f23

08003460 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b0a6      	sub	sp, #152	; 0x98
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003474:	2300      	movs	r3, #0
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800349c:	2300      	movs	r3, #0
 800349e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034c6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80034c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fe86 	bl	80031ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80034e0:	2301      	movs	r3, #1
 80034e2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003502:	2300      	movs	r3, #0
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800350c:	2301      	movs	r3, #1
 800350e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003514:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800351a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800351c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003520:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003528:	2300      	movs	r3, #0
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003530:	f107 0308 	add.w	r3, r7, #8
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff08 	bl	800334c <ETH_SetDMAConfig>
}
 800353c:	bf00      	nop
 800353e:	3798      	adds	r7, #152	; 0x98
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3305      	adds	r3, #5
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	3204      	adds	r2, #4
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <ETH_MACAddressConfig+0x68>)
 8003566:	4413      	add	r3, r2
 8003568:	461a      	mov	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3303      	adds	r3, #3
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	061a      	lsls	r2, r3, #24
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3302      	adds	r3, #2
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3301      	adds	r3, #1
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	4313      	orrs	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <ETH_MACAddressConfig+0x6c>)
 8003596:	4413      	add	r3, r2
 8003598:	461a      	mov	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	6013      	str	r3, [r2, #0]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40028040 	.word	0x40028040
 80035b0:	40028044 	.word	0x40028044

080035b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e03e      	b.n	8003640 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68d9      	ldr	r1, [r3, #12]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	3206      	adds	r2, #6
 80035f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d80c      	bhi.n	8003624 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68d9      	ldr	r1, [r3, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	440b      	add	r3, r1
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	e004      	b.n	800362e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3301      	adds	r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d9bd      	bls.n	80035c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003658:	611a      	str	r2, [r3, #16]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e046      	b.n	8003702 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6919      	ldr	r1, [r3, #16]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2200      	movs	r2, #0
 80036a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80036b8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	3212      	adds	r2, #18
 80036ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d80c      	bhi.n	80036f2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6919      	ldr	r1, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	60da      	str	r2, [r3, #12]
 80036f0:	e004      	b.n	80036fc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3301      	adds	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d9b5      	bls.n	8003674 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003732:	60da      	str	r2, [r3, #12]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e175      	b.n	8003a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003760:	2201      	movs	r2, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	429a      	cmp	r2, r3
 800377a:	f040 8164 	bne.w	8003a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d005      	beq.n	8003796 <HAL_GPIO_Init+0x56>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d130      	bne.n	80037f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2203      	movs	r2, #3
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 0201 	and.w	r2, r3, #1
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b03      	cmp	r3, #3
 8003802:	d017      	beq.n	8003834 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	2203      	movs	r2, #3
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d123      	bne.n	8003888 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	08da      	lsrs	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3208      	adds	r2, #8
 8003848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	220f      	movs	r2, #15
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	08da      	lsrs	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3208      	adds	r2, #8
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	2203      	movs	r2, #3
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0203 	and.w	r2, r3, #3
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80be 	beq.w	8003a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ca:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_GPIO_Init+0x324>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <HAL_GPIO_Init+0x324>)
 80038d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d4:	6453      	str	r3, [r2, #68]	; 0x44
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_GPIO_Init+0x324>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038e2:	4a61      	ldr	r2, [pc, #388]	; (8003a68 <HAL_GPIO_Init+0x328>)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <HAL_GPIO_Init+0x32c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d037      	beq.n	800397e <HAL_GPIO_Init+0x23e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_GPIO_Init+0x330>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_GPIO_Init+0x23a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_GPIO_Init+0x334>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02b      	beq.n	8003976 <HAL_GPIO_Init+0x236>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a55      	ldr	r2, [pc, #340]	; (8003a78 <HAL_GPIO_Init+0x338>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d025      	beq.n	8003972 <HAL_GPIO_Init+0x232>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_GPIO_Init+0x33c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <HAL_GPIO_Init+0x22e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a53      	ldr	r2, [pc, #332]	; (8003a80 <HAL_GPIO_Init+0x340>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d019      	beq.n	800396a <HAL_GPIO_Init+0x22a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_GPIO_Init+0x344>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_GPIO_Init+0x226>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a51      	ldr	r2, [pc, #324]	; (8003a88 <HAL_GPIO_Init+0x348>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00d      	beq.n	8003962 <HAL_GPIO_Init+0x222>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a50      	ldr	r2, [pc, #320]	; (8003a8c <HAL_GPIO_Init+0x34c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <HAL_GPIO_Init+0x21e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4f      	ldr	r2, [pc, #316]	; (8003a90 <HAL_GPIO_Init+0x350>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_GPIO_Init+0x21a>
 8003956:	2309      	movs	r3, #9
 8003958:	e012      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800395a:	230a      	movs	r3, #10
 800395c:	e010      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800395e:	2308      	movs	r3, #8
 8003960:	e00e      	b.n	8003980 <HAL_GPIO_Init+0x240>
 8003962:	2307      	movs	r3, #7
 8003964:	e00c      	b.n	8003980 <HAL_GPIO_Init+0x240>
 8003966:	2306      	movs	r3, #6
 8003968:	e00a      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800396a:	2305      	movs	r3, #5
 800396c:	e008      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800396e:	2304      	movs	r3, #4
 8003970:	e006      	b.n	8003980 <HAL_GPIO_Init+0x240>
 8003972:	2303      	movs	r3, #3
 8003974:	e004      	b.n	8003980 <HAL_GPIO_Init+0x240>
 8003976:	2302      	movs	r3, #2
 8003978:	e002      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800397e:	2300      	movs	r3, #0
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	f002 0203 	and.w	r2, r2, #3
 8003986:	0092      	lsls	r2, r2, #2
 8003988:	4093      	lsls	r3, r2
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003990:	4935      	ldr	r1, [pc, #212]	; (8003a68 <HAL_GPIO_Init+0x328>)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	089b      	lsrs	r3, r3, #2
 8003996:	3302      	adds	r3, #2
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039c2:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039c8:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039ec:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a16:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <HAL_GPIO_Init+0x354>)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_GPIO_Init+0x354>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <HAL_GPIO_Init+0x354>)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	f67f ae86 	bls.w	8003760 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40013800 	.word	0x40013800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	40020400 	.word	0x40020400
 8003a74:	40020800 	.word	0x40020800
 8003a78:	40020c00 	.word	0x40020c00
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40021400 	.word	0x40021400
 8003a84:	40021800 	.word	0x40021800
 8003a88:	40021c00 	.word	0x40021c00
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40022400 	.word	0x40022400
 8003a94:	40013c00 	.word	0x40013c00

08003a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa8:	787b      	ldrb	r3, [r7, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ab4:	e003      	b.n	8003abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ab6:	887b      	ldrh	r3, [r7, #2]
 8003ab8:	041a      	lsls	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	619a      	str	r2, [r3, #24]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07f      	b.n	8003bde <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe ffc4 	bl	8002a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	e006      	b.n	8003b54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d104      	bne.n	8003b66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_I2C_Init+0x11c>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69d9      	ldr	r1, [r3, #28]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	02008000 	.word	0x02008000

08003bec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	817b      	strh	r3, [r7, #10]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	813b      	strh	r3, [r7, #8]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	f040 80f9 	bne.w	8003e06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_I2C_Mem_Write+0x34>
 8003c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0ed      	b.n	8003e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Mem_Write+0x4e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0e6      	b.n	8003e08 <HAL_I2C_Mem_Write+0x21c>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c42:	f7ff f941 	bl	8002ec8 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2319      	movs	r3, #25
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f955 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0d1      	b.n	8003e08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2221      	movs	r2, #33	; 0x21
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2240      	movs	r2, #64	; 0x40
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c8c:	88f8      	ldrh	r0, [r7, #6]
 8003c8e:	893a      	ldrh	r2, [r7, #8]
 8003c90:	8979      	ldrh	r1, [r7, #10]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f8b9 	bl	8003e14 <I2C_RequestMemoryWrite>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0a9      	b.n	8003e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2bff      	cmp	r3, #255	; 0xff
 8003cbc:	d90e      	bls.n	8003cdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	22ff      	movs	r2, #255	; 0xff
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	8979      	ldrh	r1, [r7, #10]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fab1 	bl	800423c <I2C_TransferConfig>
 8003cda:	e00f      	b.n	8003cfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	8979      	ldrh	r1, [r7, #10]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 faa0 	bl	800423c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f93f 	bl	8003f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e07b      	b.n	8003e08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d034      	beq.n	8003db4 <HAL_I2C_Mem_Write+0x1c8>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d130      	bne.n	8003db4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f8d1 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e04d      	b.n	8003e08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d90e      	bls.n	8003d94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	8979      	ldrh	r1, [r7, #10]
 8003d84:	2300      	movs	r3, #0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fa55 	bl	800423c <I2C_TransferConfig>
 8003d92:	e00f      	b.n	8003db4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	8979      	ldrh	r1, [r7, #10]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fa44 	bl	800423c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d19e      	bne.n	8003cfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f91e 	bl	8004004 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01a      	b.n	8003e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_I2C_Mem_Write+0x224>)
 8003de6:	400b      	ands	r3, r1
 8003de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	fe00e800 	.word	0xfe00e800

08003e14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	817b      	strh	r3, [r7, #10]
 8003e26:	460b      	mov	r3, r1
 8003e28:	813b      	strh	r3, [r7, #8]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	8979      	ldrh	r1, [r7, #10]
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <I2C_RequestMemoryWrite+0xa4>)
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f9fd 	bl	800423c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f89c 	bl	8003f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e02c      	b.n	8003eb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d105      	bne.n	8003e68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5c:	893b      	ldrh	r3, [r7, #8]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
 8003e66:	e015      	b.n	8003e94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e68:	893b      	ldrh	r3, [r7, #8]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	69b9      	ldr	r1, [r7, #24]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f882 	bl	8003f84 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e012      	b.n	8003eb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8a:	893b      	ldrh	r3, [r7, #8]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f830 	bl	8003f04 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	80002000 	.word	0x80002000

08003ebc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d103      	bne.n	8003eda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d007      	beq.n	8003ef8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	619a      	str	r2, [r3, #24]
  }
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f14:	e022      	b.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d01e      	beq.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1e:	f7fe ffd3 	bl	8002ec8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d113      	bne.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e00f      	b.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d0cd      	beq.n	8003f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f90:	e02c      	b.n	8003fec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f870 	bl	800407c <I2C_IsErrorOccurred>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e02a      	b.n	8003ffc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d01e      	beq.n	8003fec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fae:	f7fe ff8b 	bl	8002ec8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d113      	bne.n	8003fec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e007      	b.n	8003ffc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d1cb      	bne.n	8003f92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004010:	e028      	b.n	8004064 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f830 	bl	800407c <I2C_IsErrorOccurred>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e026      	b.n	8004074 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004026:	f7fe ff4f 	bl	8002ec8 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d113      	bne.n	8004064 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b20      	cmp	r3, #32
 8004070:	d1cf      	bne.n	8004012 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d068      	beq.n	800417a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2210      	movs	r2, #16
 80040ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040b0:	e049      	b.n	8004146 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d045      	beq.n	8004146 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe ff05 	bl	8002ec8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_IsErrorOccurred+0x54>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13a      	bne.n	8004146 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f2:	d121      	bne.n	8004138 <I2C_IsErrorOccurred+0xbc>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fa:	d01d      	beq.n	8004138 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d01a      	beq.n	8004138 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004110:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004112:	f7fe fed9 	bl	8002ec8 <HAL_GetTick>
 8004116:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004118:	e00e      	b.n	8004138 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800411a:	f7fe fed5 	bl	8002ec8 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b19      	cmp	r3, #25
 8004126:	d907      	bls.n	8004138 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f043 0320 	orr.w	r3, r3, #32
 800412e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004136:	e006      	b.n	8004146 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b20      	cmp	r3, #32
 8004144:	d1e9      	bne.n	800411a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b20      	cmp	r3, #32
 8004152:	d003      	beq.n	800415c <I2C_IsErrorOccurred+0xe0>
 8004154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0aa      	beq.n	80040b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800415c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2220      	movs	r2, #32
 800416a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	f043 0308 	orr.w	r3, r3, #8
 80041b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80041e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01c      	beq.n	800422a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff fe63 	bl	8003ebc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <I2C_IsErrorOccurred+0x1bc>)
 8004202:	400b      	ands	r3, r1
 8004204:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800422a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800422e:	4618      	mov	r0, r3
 8004230:	3728      	adds	r7, #40	; 0x28
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	fe00e800 	.word	0xfe00e800

0800423c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	817b      	strh	r3, [r7, #10]
 800424a:	4613      	mov	r3, r2
 800424c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004254:	7a7b      	ldrb	r3, [r7, #9]
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800425c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	4313      	orrs	r3, r2
 8004266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800426a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	0d5b      	lsrs	r3, r3, #21
 8004276:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <I2C_TransferConfig+0x60>)
 800427c:	430b      	orrs	r3, r1
 800427e:	43db      	mvns	r3, r3
 8004280:	ea02 0103 	and.w	r1, r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	03ff63ff 	.word	0x03ff63ff

080042a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d138      	bne.n	8004328 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e032      	b.n	800432a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b20      	cmp	r3, #32
 800434a:	d139      	bne.n	80043c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004356:	2302      	movs	r3, #2
 8004358:	e033      	b.n	80043c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2224      	movs	r2, #36	; 0x24
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004388:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d0:	b08f      	sub	sp, #60	; 0x3c
 80043d2:	af0a      	add	r7, sp, #40	; 0x28
 80043d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e116      	b.n	800460e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fe fbfe 	bl	8002bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2203      	movs	r2, #3
 8004404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f001 fe92 	bl	8006148 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	687e      	ldr	r6, [r7, #4]
 800442c:	466d      	mov	r5, sp
 800442e:	f106 0410 	add.w	r4, r6, #16
 8004432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800443a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800443e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004442:	1d33      	adds	r3, r6, #4
 8004444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004446:	6838      	ldr	r0, [r7, #0]
 8004448:	f001 fe26 	bl	8006098 <USB_CoreInit>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0d7      	b.n	800460e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f001 fe80 	bl	800616a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	e04a      	b.n	8004506 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	333d      	adds	r3, #61	; 0x3d
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	333c      	adds	r3, #60	; 0x3c
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004498:	7bfa      	ldrb	r2, [r7, #15]
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	b298      	uxth	r0, r3
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3344      	adds	r3, #68	; 0x44
 80044ac:	4602      	mov	r2, r0
 80044ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	3340      	adds	r3, #64	; 0x40
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	3348      	adds	r3, #72	; 0x48
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	334c      	adds	r3, #76	; 0x4c
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3354      	adds	r3, #84	; 0x54
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	3301      	adds	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d3af      	bcc.n	8004470 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004510:	2300      	movs	r3, #0
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e044      	b.n	80045a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800453e:	7bfa      	ldrb	r2, [r7, #15]
 8004540:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	3301      	adds	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
 80045a0:	7bfa      	ldrb	r2, [r7, #15]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d3b5      	bcc.n	8004516 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	687e      	ldr	r6, [r7, #4]
 80045b2:	466d      	mov	r5, sp
 80045b4:	f106 0410 	add.w	r4, r6, #16
 80045b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80045c8:	1d33      	adds	r3, r6, #4
 80045ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045cc:	6838      	ldr	r0, [r7, #0]
 80045ce:	f001 fe19 	bl	8006204 <USB_DevInit>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e014      	b.n	800460e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f80b 	bl	8004618 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f001 ffd7 	bl	80065ba <USB_DevDisconnect>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004618 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_PCDEx_ActivateLPM+0x44>)
 8004648:	4313      	orrs	r3, r2
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	10000003 	.word	0x10000003

08004660 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a04      	ldr	r2, [pc, #16]	; (800467c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800466a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466e:	6013      	str	r3, [r2, #0]
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40007000 	.word	0x40007000

08004680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004688:	2300      	movs	r3, #0
 800468a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e291      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8087 	beq.w	80047b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a4:	4b96      	ldr	r3, [pc, #600]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d00c      	beq.n	80046ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b0:	4b93      	ldr	r3, [pc, #588]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d112      	bne.n	80046e2 <HAL_RCC_OscConfig+0x62>
 80046bc:	4b90      	ldr	r3, [pc, #576]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c8:	d10b      	bne.n	80046e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ca:	4b8d      	ldr	r3, [pc, #564]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d06c      	beq.n	80047b0 <HAL_RCC_OscConfig+0x130>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d168      	bne.n	80047b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e26b      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x7a>
 80046ec:	4b84      	ldr	r3, [pc, #528]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a83      	ldr	r2, [pc, #524]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80046f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	e02e      	b.n	8004758 <HAL_RCC_OscConfig+0xd8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10c      	bne.n	800471c <HAL_RCC_OscConfig+0x9c>
 8004702:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a7e      	ldr	r2, [pc, #504]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7b      	ldr	r2, [pc, #492]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e01d      	b.n	8004758 <HAL_RCC_OscConfig+0xd8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0xc0>
 8004726:	4b76      	ldr	r3, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a75      	ldr	r2, [pc, #468]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800472c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a72      	ldr	r2, [pc, #456]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0xd8>
 8004740:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a6e      	ldr	r2, [pc, #440]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a6b      	ldr	r2, [pc, #428]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fe fbb2 	bl	8002ec8 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004768:	f7fe fbae 	bl	8002ec8 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e21f      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b61      	ldr	r3, [pc, #388]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0xe8>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fb9e 	bl	8002ec8 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fe fb9a 	bl	8002ec8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e20b      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a2:	4b57      	ldr	r3, [pc, #348]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x110>
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d069      	beq.n	8004892 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047be:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00b      	beq.n	80047e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ca:	4b4d      	ldr	r3, [pc, #308]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d11c      	bne.n	8004810 <HAL_RCC_OscConfig+0x190>
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d116      	bne.n	8004810 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_RCC_OscConfig+0x17a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d001      	beq.n	80047fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1df      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	493d      	ldr	r1, [pc, #244]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	e040      	b.n	8004892 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d023      	beq.n	8004860 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004818:	4b39      	ldr	r3, [pc, #228]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a38      	ldr	r2, [pc, #224]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe fb50 	bl	8002ec8 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482c:	f7fe fb4c 	bl	8002ec8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1bd      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4929      	ldr	r1, [pc, #164]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
 800485e:	e018      	b.n	8004892 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004860:	4b27      	ldr	r3, [pc, #156]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a26      	ldr	r2, [pc, #152]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fe fb2c 	bl	8002ec8 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004874:	f7fe fb28 	bl	8002ec8 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e199      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d038      	beq.n	8004910 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d019      	beq.n	80048da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fe fb09 	bl	8002ec8 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fe fb05 	bl	8002ec8 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e176      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x23a>
 80048d8:	e01a      	b.n	8004910 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	4a08      	ldr	r2, [pc, #32]	; (8004900 <HAL_RCC_OscConfig+0x280>)
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fe faef 	bl	8002ec8 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	e00a      	b.n	8004904 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fe faeb 	bl	8002ec8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d903      	bls.n	8004904 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e15c      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
 8004900:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	4b91      	ldr	r3, [pc, #580]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ee      	bne.n	80048ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80a4 	beq.w	8004a66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491e:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	4a87      	ldr	r2, [pc, #540]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004934:	6413      	str	r3, [r2, #64]	; 0x40
 8004936:	4b85      	ldr	r3, [pc, #532]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004946:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <HAL_RCC_OscConfig+0x4d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004952:	4b7f      	ldr	r3, [pc, #508]	; (8004b50 <HAL_RCC_OscConfig+0x4d0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a7e      	ldr	r2, [pc, #504]	; (8004b50 <HAL_RCC_OscConfig+0x4d0>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495e:	f7fe fab3 	bl	8002ec8 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fe faaf 	bl	8002ec8 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b64      	cmp	r3, #100	; 0x64
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e120      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004978:	4b75      	ldr	r3, [pc, #468]	; (8004b50 <HAL_RCC_OscConfig+0x4d0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d106      	bne.n	800499a <HAL_RCC_OscConfig+0x31a>
 800498c:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4a6e      	ldr	r2, [pc, #440]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	6713      	str	r3, [r2, #112]	; 0x70
 8004998:	e02d      	b.n	80049f6 <HAL_RCC_OscConfig+0x376>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x33c>
 80049a2:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a69      	ldr	r2, [pc, #420]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70
 80049ae:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a66      	ldr	r2, [pc, #408]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ba:	e01c      	b.n	80049f6 <HAL_RCC_OscConfig+0x376>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b05      	cmp	r3, #5
 80049c2:	d10c      	bne.n	80049de <HAL_RCC_OscConfig+0x35e>
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a60      	ldr	r2, [pc, #384]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
 80049d0:	4b5e      	ldr	r3, [pc, #376]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a5d      	ldr	r2, [pc, #372]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	e00b      	b.n	80049f6 <HAL_RCC_OscConfig+0x376>
 80049de:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a5a      	ldr	r2, [pc, #360]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	4b58      	ldr	r3, [pc, #352]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a57      	ldr	r2, [pc, #348]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d015      	beq.n	8004a2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fe fa63 	bl	8002ec8 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fe fa5f 	bl	8002ec8 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0ce      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ee      	beq.n	8004a06 <HAL_RCC_OscConfig+0x386>
 8004a28:	e014      	b.n	8004a54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fa4d 	bl	8002ec8 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fe fa49 	bl	8002ec8 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e0b8      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ee      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d105      	bne.n	8004a66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5a:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80a4 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a70:	4b36      	ldr	r3, [pc, #216]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d06b      	beq.n	8004b54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d149      	bne.n	8004b18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fe fa1a 	bl	8002ec8 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fe fa16 	bl	8002ec8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e087      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	4313      	orrs	r3, r2
 8004adc:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ae2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe f9ea 	bl	8002ec8 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fe f9e6 	bl	8002ec8 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e057      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x478>
 8004b16:	e04f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fe f9d0 	bl	8002ec8 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fe f9cc 	bl	8002ec8 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e03d      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x4ac>
 8004b4a:	e035      	b.n	8004bb8 <HAL_RCC_OscConfig+0x538>
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <HAL_RCC_OscConfig+0x544>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d028      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d121      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d11a      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d111      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0d0      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be0:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d910      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b67      	ldr	r3, [pc, #412]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 020f 	bic.w	r2, r3, #15
 8004bf6:	4965      	ldr	r1, [pc, #404]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b63      	ldr	r3, [pc, #396]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0b8      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d020      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c28:	4b59      	ldr	r3, [pc, #356]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a58      	ldr	r2, [pc, #352]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c40:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a52      	ldr	r2, [pc, #328]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4c:	4b50      	ldr	r3, [pc, #320]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	494d      	ldr	r1, [pc, #308]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d040      	beq.n	8004cec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b47      	ldr	r3, [pc, #284]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d115      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e07f      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e073      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06b      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4936      	ldr	r1, [pc, #216]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbc:	f7fe f904 	bl	8002ec8 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fe f900 	bl	8002ec8 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e053      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d210      	bcs.n	8004d1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 020f 	bic.w	r2, r3, #15
 8004d02:	4922      	ldr	r1, [pc, #136]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e032      	b.n	8004d82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4916      	ldr	r1, [pc, #88]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d46:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	490e      	ldr	r1, [pc, #56]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d5a:	f000 f821 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	490a      	ldr	r1, [pc, #40]	; (8004d94 <HAL_RCC_ClockConfig+0x1cc>)
 8004d6c:	5ccb      	ldrb	r3, [r1, r3]
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1d0>)
 8004d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d76:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1d4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe f860 	bl	8002e40 <HAL_InitTick>

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40023c00 	.word	0x40023c00
 8004d90:	40023800 	.word	0x40023800
 8004d94:	0800c798 	.word	0x0800c798
 8004d98:	20000028 	.word	0x20000028
 8004d9c:	2000002c 	.word	0x2000002c

08004da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da4:	b094      	sub	sp, #80	; 0x50
 8004da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	647b      	str	r3, [r7, #68]	; 0x44
 8004dac:	2300      	movs	r3, #0
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db0:	2300      	movs	r3, #0
 8004db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db8:	4b79      	ldr	r3, [pc, #484]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d00d      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x40>
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	f200 80e1 	bhi.w	8004f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d003      	beq.n	8004dda <HAL_RCC_GetSysClockFreq+0x3a>
 8004dd2:	e0db      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd4:	4b73      	ldr	r3, [pc, #460]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd8:	e0db      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dda:	4b73      	ldr	r3, [pc, #460]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dde:	e0d8      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de0:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004dea:	4b6d      	ldr	r3, [pc, #436]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df6:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e12:	4622      	mov	r2, r4
 8004e14:	462b      	mov	r3, r5
 8004e16:	f04f 0000 	mov.w	r0, #0
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	0159      	lsls	r1, r3, #5
 8004e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e24:	0150      	lsls	r0, r2, #5
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	1a51      	subs	r1, r2, r1
 8004e2e:	6139      	str	r1, [r7, #16]
 8004e30:	4629      	mov	r1, r5
 8004e32:	eb63 0301 	sbc.w	r3, r3, r1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e44:	4659      	mov	r1, fp
 8004e46:	018b      	lsls	r3, r1, #6
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4e:	4651      	mov	r1, sl
 8004e50:	018a      	lsls	r2, r1, #6
 8004e52:	4651      	mov	r1, sl
 8004e54:	ebb2 0801 	subs.w	r8, r2, r1
 8004e58:	4659      	mov	r1, fp
 8004e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e72:	4690      	mov	r8, r2
 8004e74:	4699      	mov	r9, r3
 8004e76:	4623      	mov	r3, r4
 8004e78:	eb18 0303 	adds.w	r3, r8, r3
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	462b      	mov	r3, r5
 8004e80:	eb49 0303 	adc.w	r3, r9, r3
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e92:	4629      	mov	r1, r5
 8004e94:	024b      	lsls	r3, r1, #9
 8004e96:	4621      	mov	r1, r4
 8004e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	024a      	lsls	r2, r1, #9
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb0:	f7fb fecc 	bl	8000c4c <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4613      	mov	r3, r2
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ebc:	e058      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebe:	4b38      	ldr	r3, [pc, #224]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	099b      	lsrs	r3, r3, #6
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	4611      	mov	r1, r2
 8004eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	f04f 0000 	mov.w	r0, #0
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	0159      	lsls	r1, r3, #5
 8004ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eea:	0150      	lsls	r0, r2, #5
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f10:	ebb2 040a 	subs.w	r4, r2, sl
 8004f14:	eb63 050b 	sbc.w	r5, r3, fp
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	00eb      	lsls	r3, r5, #3
 8004f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f26:	00e2      	lsls	r2, r4, #3
 8004f28:	4614      	mov	r4, r2
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	4643      	mov	r3, r8
 8004f2e:	18e3      	adds	r3, r4, r3
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	464b      	mov	r3, r9
 8004f34:	eb45 0303 	adc.w	r3, r5, r3
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f46:	4629      	mov	r1, r5
 8004f48:	028b      	lsls	r3, r1, #10
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f50:	4621      	mov	r1, r4
 8004f52:	028a      	lsls	r2, r1, #10
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	61fa      	str	r2, [r7, #28]
 8004f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f64:	f7fb fe72 	bl	8000c4c <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f8a:	e002      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3750      	adds	r7, #80	; 0x50
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	00f42400 	.word	0x00f42400
 8004fa8:	007a1200 	.word	0x007a1200

08004fac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000028 	.word	0x20000028

08004fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fc8:	f7ff fff0 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0a9b      	lsrs	r3, r3, #10
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4903      	ldr	r1, [pc, #12]	; (8004fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	0800c7a8 	.word	0x0800c7a8

08004fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ff0:	f7ff ffdc 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	0b5b      	lsrs	r3, r3, #13
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4903      	ldr	r1, [pc, #12]	; (8005010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005002:	5ccb      	ldrb	r3, [r1, r3]
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800
 8005010:	0800c7a8 	.word	0x0800c7a8

08005014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d012      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800503c:	4b69      	ldr	r3, [pc, #420]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a68      	ldr	r2, [pc, #416]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005042:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005046:	6093      	str	r3, [r2, #8]
 8005048:	4b66      	ldr	r3, [pc, #408]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	4964      	ldr	r1, [pc, #400]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d017      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800506e:	4b5d      	ldr	r3, [pc, #372]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	4959      	ldr	r1, [pc, #356]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508c:	d101      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800509a:	2301      	movs	r3, #1
 800509c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d017      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050aa:	4b4e      	ldr	r3, [pc, #312]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	494a      	ldr	r1, [pc, #296]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c8:	d101      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80050d6:	2301      	movs	r3, #1
 80050d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80050e6:	2301      	movs	r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 808b 	beq.w	800520e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050f8:	4b3a      	ldr	r3, [pc, #232]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	4a39      	ldr	r2, [pc, #228]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005102:	6413      	str	r3, [r2, #64]	; 0x40
 8005104:	4b37      	ldr	r3, [pc, #220]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005110:	4b35      	ldr	r3, [pc, #212]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a34      	ldr	r2, [pc, #208]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511c:	f7fd fed4 	bl	8002ec8 <HAL_GetTick>
 8005120:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005124:	f7fd fed0 	bl	8002ec8 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e357      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005136:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005142:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d035      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	429a      	cmp	r2, r3
 800515e:	d02e      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005160:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005168:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800516a:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005180:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005182:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005188:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d114      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7fd fe98 	bl	8002ec8 <HAL_GetTick>
 8005198:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519a:	e00a      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fd fe94 	bl	8002ec8 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e319      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0ee      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ca:	d111      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051da:	400b      	ands	r3, r1
 80051dc:	4901      	ldr	r1, [pc, #4]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
 80051e2:	e00b      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80051e4:	40023800 	.word	0x40023800
 80051e8:	40007000 	.word	0x40007000
 80051ec:	0ffffcff 	.word	0x0ffffcff
 80051f0:	4baa      	ldr	r3, [pc, #680]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4aa9      	ldr	r2, [pc, #676]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051fa:	6093      	str	r3, [r2, #8]
 80051fc:	4ba7      	ldr	r3, [pc, #668]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005208:	49a4      	ldr	r1, [pc, #656]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520a:	4313      	orrs	r3, r2
 800520c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	d010      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800521a:	4ba0      	ldr	r3, [pc, #640]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005220:	4a9e      	ldr	r2, [pc, #632]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005226:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800522a:	4b9c      	ldr	r3, [pc, #624]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	4999      	ldr	r1, [pc, #612]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005248:	4b94      	ldr	r3, [pc, #592]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005256:	4991      	ldr	r1, [pc, #580]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800526a:	4b8c      	ldr	r3, [pc, #560]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005278:	4988      	ldr	r1, [pc, #544]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800528c:	4b83      	ldr	r3, [pc, #524]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529a:	4980      	ldr	r1, [pc, #512]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052ae:	4b7b      	ldr	r3, [pc, #492]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052bc:	4977      	ldr	r1, [pc, #476]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052d0:	4b72      	ldr	r3, [pc, #456]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	496f      	ldr	r1, [pc, #444]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052f2:	4b6a      	ldr	r3, [pc, #424]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f023 020c 	bic.w	r2, r3, #12
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005300:	4966      	ldr	r1, [pc, #408]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005314:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005322:	495e      	ldr	r1, [pc, #376]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005336:	4b59      	ldr	r3, [pc, #356]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	4955      	ldr	r1, [pc, #340]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005358:	4b50      	ldr	r3, [pc, #320]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	494d      	ldr	r1, [pc, #308]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800537a:	4b48      	ldr	r3, [pc, #288]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005380:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	4944      	ldr	r1, [pc, #272]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800539c:	4b3f      	ldr	r3, [pc, #252]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	493c      	ldr	r1, [pc, #240]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053be:	4b37      	ldr	r3, [pc, #220]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	4933      	ldr	r1, [pc, #204]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053e0:	4b2e      	ldr	r3, [pc, #184]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ee:	492b      	ldr	r1, [pc, #172]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d011      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005402:	4b26      	ldr	r3, [pc, #152]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005410:	4922      	ldr	r1, [pc, #136]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005420:	d101      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005422:	2301      	movs	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005432:	2301      	movs	r3, #1
 8005434:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005442:	4b16      	ldr	r3, [pc, #88]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005448:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005450:	4912      	ldr	r1, [pc, #72]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00b      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005474:	4909      	ldr	r1, [pc, #36]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d006      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80d9 	beq.w	8005642 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a01      	ldr	r2, [pc, #4]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005496:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800549a:	e001      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800549c:	40023800 	.word	0x40023800
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a2:	f7fd fd11 	bl	8002ec8 <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054aa:	f7fd fd0d 	bl	8002ec8 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b64      	cmp	r3, #100	; 0x64
 80054b6:	d901      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e194      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054bc:	4b6c      	ldr	r3, [pc, #432]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d021      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d11d      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054dc:	4b64      	ldr	r3, [pc, #400]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054ea:	4b61      	ldr	r3, [pc, #388]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f0:	0e1b      	lsrs	r3, r3, #24
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	019a      	lsls	r2, r3, #6
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	041b      	lsls	r3, r3, #16
 8005502:	431a      	orrs	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	071b      	lsls	r3, r3, #28
 8005510:	4957      	ldr	r1, [pc, #348]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005536:	2b00      	cmp	r3, #0
 8005538:	d02e      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005542:	d129      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005544:	4b4a      	ldr	r3, [pc, #296]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554a:	0c1b      	lsrs	r3, r3, #16
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005552:	4b47      	ldr	r3, [pc, #284]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005558:	0f1b      	lsrs	r3, r3, #28
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	019a      	lsls	r2, r3, #6
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	431a      	orrs	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	071b      	lsls	r3, r3, #28
 8005578:	493d      	ldr	r1, [pc, #244]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005580:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005586:	f023 021f 	bic.w	r2, r3, #31
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	3b01      	subs	r3, #1
 8005590:	4937      	ldr	r1, [pc, #220]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01d      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055aa:	0e1b      	lsrs	r3, r3, #24
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b8:	0f1b      	lsrs	r3, r3, #28
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	019a      	lsls	r2, r3, #6
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	431a      	orrs	r2, r3
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	071b      	lsls	r3, r3, #28
 80055d8:	4925      	ldr	r1, [pc, #148]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	019a      	lsls	r2, r3, #6
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	071b      	lsls	r3, r3, #28
 8005608:	4919      	ldr	r1, [pc, #100]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005610:	4b17      	ldr	r3, [pc, #92]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800561a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fd fc54 	bl	8002ec8 <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005624:	f7fd fc50 	bl	8002ec8 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e0d7      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b01      	cmp	r3, #1
 8005646:	f040 80cd 	bne.w	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a08      	ldr	r2, [pc, #32]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005656:	f7fd fc37 	bl	8002ec8 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800565c:	e00a      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800565e:	f7fd fc33 	bl	8002ec8 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b64      	cmp	r3, #100	; 0x64
 800566a:	d903      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e0ba      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005670:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005674:	4b5e      	ldr	r3, [pc, #376]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005680:	d0ed      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02e      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d12a      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056aa:	4b51      	ldr	r3, [pc, #324]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056b8:	4b4d      	ldr	r3, [pc, #308]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	0f1b      	lsrs	r3, r3, #28
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	019a      	lsls	r2, r3, #6
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	061b      	lsls	r3, r3, #24
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	071b      	lsls	r3, r3, #28
 80056de:	4944      	ldr	r1, [pc, #272]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056e6:	4b42      	ldr	r3, [pc, #264]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	3b01      	subs	r3, #1
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	493d      	ldr	r1, [pc, #244]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d022      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005710:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005714:	d11d      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005716:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	0e1b      	lsrs	r3, r3, #24
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005724:	4b32      	ldr	r3, [pc, #200]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	0f1b      	lsrs	r3, r3, #28
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	019a      	lsls	r2, r3, #6
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	431a      	orrs	r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	061b      	lsls	r3, r3, #24
 8005744:	431a      	orrs	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	071b      	lsls	r3, r3, #28
 800574a:	4929      	ldr	r1, [pc, #164]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d028      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800575e:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800576c:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	019a      	lsls	r2, r3, #6
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	431a      	orrs	r2, r3
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	071b      	lsls	r3, r3, #28
 8005792:	4917      	ldr	r1, [pc, #92]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800579c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4911      	ldr	r1, [pc, #68]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0e      	ldr	r2, [pc, #56]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057bc:	f7fd fb84 	bl	8002ec8 <HAL_GetTick>
 80057c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057c4:	f7fd fb80 	bl	8002ec8 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b64      	cmp	r3, #100	; 0x64
 80057d0:	d901      	bls.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e007      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e2:	d1ef      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800

080057f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e040      	b.n	8005888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fd f990 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f82c 	bl	8005890 <UART_SetConfig>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e022      	b.n	8005888 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fa84 	bl	8005d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800585e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800586e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fb0b 	bl	8005e9c <UART_CheckIdleState>
 8005886:	4603      	mov	r3, r0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4ba6      	ldr	r3, [pc, #664]	; (8005b54 <UART_SetConfig+0x2c4>)
 80058bc:	4013      	ands	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	6979      	ldr	r1, [r7, #20]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a94      	ldr	r2, [pc, #592]	; (8005b58 <UART_SetConfig+0x2c8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d120      	bne.n	800594e <UART_SetConfig+0xbe>
 800590c:	4b93      	ldr	r3, [pc, #588]	; (8005b5c <UART_SetConfig+0x2cc>)
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b03      	cmp	r3, #3
 8005918:	d816      	bhi.n	8005948 <UART_SetConfig+0xb8>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <UART_SetConfig+0x90>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005931 	.word	0x08005931
 8005924:	0800593d 	.word	0x0800593d
 8005928:	08005937 	.word	0x08005937
 800592c:	08005943 	.word	0x08005943
 8005930:	2301      	movs	r3, #1
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e150      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005936:	2302      	movs	r3, #2
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	e14d      	b.n	8005bd8 <UART_SetConfig+0x348>
 800593c:	2304      	movs	r3, #4
 800593e:	77fb      	strb	r3, [r7, #31]
 8005940:	e14a      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005942:	2308      	movs	r3, #8
 8005944:	77fb      	strb	r3, [r7, #31]
 8005946:	e147      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005948:	2310      	movs	r3, #16
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e144      	b.n	8005bd8 <UART_SetConfig+0x348>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a83      	ldr	r2, [pc, #524]	; (8005b60 <UART_SetConfig+0x2d0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d132      	bne.n	80059be <UART_SetConfig+0x12e>
 8005958:	4b80      	ldr	r3, [pc, #512]	; (8005b5c <UART_SetConfig+0x2cc>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b0c      	cmp	r3, #12
 8005964:	d828      	bhi.n	80059b8 <UART_SetConfig+0x128>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0xdc>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059b9 	.word	0x080059b9
 8005974:	080059b9 	.word	0x080059b9
 8005978:	080059b9 	.word	0x080059b9
 800597c:	080059ad 	.word	0x080059ad
 8005980:	080059b9 	.word	0x080059b9
 8005984:	080059b9 	.word	0x080059b9
 8005988:	080059b9 	.word	0x080059b9
 800598c:	080059a7 	.word	0x080059a7
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059b9 	.word	0x080059b9
 800599c:	080059b3 	.word	0x080059b3
 80059a0:	2300      	movs	r3, #0
 80059a2:	77fb      	strb	r3, [r7, #31]
 80059a4:	e118      	b.n	8005bd8 <UART_SetConfig+0x348>
 80059a6:	2302      	movs	r3, #2
 80059a8:	77fb      	strb	r3, [r7, #31]
 80059aa:	e115      	b.n	8005bd8 <UART_SetConfig+0x348>
 80059ac:	2304      	movs	r3, #4
 80059ae:	77fb      	strb	r3, [r7, #31]
 80059b0:	e112      	b.n	8005bd8 <UART_SetConfig+0x348>
 80059b2:	2308      	movs	r3, #8
 80059b4:	77fb      	strb	r3, [r7, #31]
 80059b6:	e10f      	b.n	8005bd8 <UART_SetConfig+0x348>
 80059b8:	2310      	movs	r3, #16
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e10c      	b.n	8005bd8 <UART_SetConfig+0x348>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a68      	ldr	r2, [pc, #416]	; (8005b64 <UART_SetConfig+0x2d4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d120      	bne.n	8005a0a <UART_SetConfig+0x17a>
 80059c8:	4b64      	ldr	r3, [pc, #400]	; (8005b5c <UART_SetConfig+0x2cc>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059d2:	2b30      	cmp	r3, #48	; 0x30
 80059d4:	d013      	beq.n	80059fe <UART_SetConfig+0x16e>
 80059d6:	2b30      	cmp	r3, #48	; 0x30
 80059d8:	d814      	bhi.n	8005a04 <UART_SetConfig+0x174>
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d009      	beq.n	80059f2 <UART_SetConfig+0x162>
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d810      	bhi.n	8005a04 <UART_SetConfig+0x174>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <UART_SetConfig+0x15c>
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d006      	beq.n	80059f8 <UART_SetConfig+0x168>
 80059ea:	e00b      	b.n	8005a04 <UART_SetConfig+0x174>
 80059ec:	2300      	movs	r3, #0
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e0f2      	b.n	8005bd8 <UART_SetConfig+0x348>
 80059f2:	2302      	movs	r3, #2
 80059f4:	77fb      	strb	r3, [r7, #31]
 80059f6:	e0ef      	b.n	8005bd8 <UART_SetConfig+0x348>
 80059f8:	2304      	movs	r3, #4
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e0ec      	b.n	8005bd8 <UART_SetConfig+0x348>
 80059fe:	2308      	movs	r3, #8
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e0e9      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a04:	2310      	movs	r3, #16
 8005a06:	77fb      	strb	r3, [r7, #31]
 8005a08:	e0e6      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a56      	ldr	r2, [pc, #344]	; (8005b68 <UART_SetConfig+0x2d8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d120      	bne.n	8005a56 <UART_SetConfig+0x1c6>
 8005a14:	4b51      	ldr	r3, [pc, #324]	; (8005b5c <UART_SetConfig+0x2cc>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a20:	d013      	beq.n	8005a4a <UART_SetConfig+0x1ba>
 8005a22:	2bc0      	cmp	r3, #192	; 0xc0
 8005a24:	d814      	bhi.n	8005a50 <UART_SetConfig+0x1c0>
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d009      	beq.n	8005a3e <UART_SetConfig+0x1ae>
 8005a2a:	2b80      	cmp	r3, #128	; 0x80
 8005a2c:	d810      	bhi.n	8005a50 <UART_SetConfig+0x1c0>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <UART_SetConfig+0x1a8>
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d006      	beq.n	8005a44 <UART_SetConfig+0x1b4>
 8005a36:	e00b      	b.n	8005a50 <UART_SetConfig+0x1c0>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	77fb      	strb	r3, [r7, #31]
 8005a3c:	e0cc      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	77fb      	strb	r3, [r7, #31]
 8005a42:	e0c9      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a44:	2304      	movs	r3, #4
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e0c6      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e0c3      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a50:	2310      	movs	r3, #16
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e0c0      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a44      	ldr	r2, [pc, #272]	; (8005b6c <UART_SetConfig+0x2dc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d125      	bne.n	8005aac <UART_SetConfig+0x21c>
 8005a60:	4b3e      	ldr	r3, [pc, #248]	; (8005b5c <UART_SetConfig+0x2cc>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6e:	d017      	beq.n	8005aa0 <UART_SetConfig+0x210>
 8005a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a74:	d817      	bhi.n	8005aa6 <UART_SetConfig+0x216>
 8005a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7a:	d00b      	beq.n	8005a94 <UART_SetConfig+0x204>
 8005a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a80:	d811      	bhi.n	8005aa6 <UART_SetConfig+0x216>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <UART_SetConfig+0x1fe>
 8005a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8a:	d006      	beq.n	8005a9a <UART_SetConfig+0x20a>
 8005a8c:	e00b      	b.n	8005aa6 <UART_SetConfig+0x216>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	77fb      	strb	r3, [r7, #31]
 8005a92:	e0a1      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a94:	2302      	movs	r3, #2
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e09e      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005a9a:	2304      	movs	r3, #4
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e09b      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e098      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005aa6:	2310      	movs	r3, #16
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e095      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2f      	ldr	r2, [pc, #188]	; (8005b70 <UART_SetConfig+0x2e0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d125      	bne.n	8005b02 <UART_SetConfig+0x272>
 8005ab6:	4b29      	ldr	r3, [pc, #164]	; (8005b5c <UART_SetConfig+0x2cc>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac4:	d017      	beq.n	8005af6 <UART_SetConfig+0x266>
 8005ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aca:	d817      	bhi.n	8005afc <UART_SetConfig+0x26c>
 8005acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad0:	d00b      	beq.n	8005aea <UART_SetConfig+0x25a>
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad6:	d811      	bhi.n	8005afc <UART_SetConfig+0x26c>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <UART_SetConfig+0x254>
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae0:	d006      	beq.n	8005af0 <UART_SetConfig+0x260>
 8005ae2:	e00b      	b.n	8005afc <UART_SetConfig+0x26c>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e076      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005aea:	2302      	movs	r3, #2
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e073      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005af0:	2304      	movs	r3, #4
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e070      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005af6:	2308      	movs	r3, #8
 8005af8:	77fb      	strb	r3, [r7, #31]
 8005afa:	e06d      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005afc:	2310      	movs	r3, #16
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e06a      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1b      	ldr	r2, [pc, #108]	; (8005b74 <UART_SetConfig+0x2e4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d138      	bne.n	8005b7e <UART_SetConfig+0x2ee>
 8005b0c:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <UART_SetConfig+0x2cc>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b1a:	d017      	beq.n	8005b4c <UART_SetConfig+0x2bc>
 8005b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b20:	d82a      	bhi.n	8005b78 <UART_SetConfig+0x2e8>
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b26:	d00b      	beq.n	8005b40 <UART_SetConfig+0x2b0>
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2c:	d824      	bhi.n	8005b78 <UART_SetConfig+0x2e8>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <UART_SetConfig+0x2aa>
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b36:	d006      	beq.n	8005b46 <UART_SetConfig+0x2b6>
 8005b38:	e01e      	b.n	8005b78 <UART_SetConfig+0x2e8>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e04b      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005b40:	2302      	movs	r3, #2
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e048      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005b46:	2304      	movs	r3, #4
 8005b48:	77fb      	strb	r3, [r7, #31]
 8005b4a:	e045      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e042      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005b52:	bf00      	nop
 8005b54:	efff69f3 	.word	0xefff69f3
 8005b58:	40011000 	.word	0x40011000
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	40004400 	.word	0x40004400
 8005b64:	40004800 	.word	0x40004800
 8005b68:	40004c00 	.word	0x40004c00
 8005b6c:	40005000 	.word	0x40005000
 8005b70:	40011400 	.word	0x40011400
 8005b74:	40007800 	.word	0x40007800
 8005b78:	2310      	movs	r3, #16
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e02c      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a72      	ldr	r2, [pc, #456]	; (8005d4c <UART_SetConfig+0x4bc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d125      	bne.n	8005bd4 <UART_SetConfig+0x344>
 8005b88:	4b71      	ldr	r3, [pc, #452]	; (8005d50 <UART_SetConfig+0x4c0>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b96:	d017      	beq.n	8005bc8 <UART_SetConfig+0x338>
 8005b98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b9c:	d817      	bhi.n	8005bce <UART_SetConfig+0x33e>
 8005b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba2:	d00b      	beq.n	8005bbc <UART_SetConfig+0x32c>
 8005ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba8:	d811      	bhi.n	8005bce <UART_SetConfig+0x33e>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <UART_SetConfig+0x326>
 8005bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bb2:	d006      	beq.n	8005bc2 <UART_SetConfig+0x332>
 8005bb4:	e00b      	b.n	8005bce <UART_SetConfig+0x33e>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e00d      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e00a      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005bc2:	2304      	movs	r3, #4
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e007      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e004      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005bce:	2310      	movs	r3, #16
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e001      	b.n	8005bd8 <UART_SetConfig+0x348>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be0:	d15b      	bne.n	8005c9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005be2:	7ffb      	ldrb	r3, [r7, #31]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d828      	bhi.n	8005c3a <UART_SetConfig+0x3aa>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x360>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	08005c3b 	.word	0x08005c3b
 8005c00:	08005c2b 	.word	0x08005c2b
 8005c04:	08005c3b 	.word	0x08005c3b
 8005c08:	08005c3b 	.word	0x08005c3b
 8005c0c:	08005c3b 	.word	0x08005c3b
 8005c10:	08005c33 	.word	0x08005c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7ff f9d6 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8005c18:	61b8      	str	r0, [r7, #24]
        break;
 8005c1a:	e013      	b.n	8005c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7ff f9e6 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8005c20:	61b8      	str	r0, [r7, #24]
        break;
 8005c22:	e00f      	b.n	8005c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c24:	4b4b      	ldr	r3, [pc, #300]	; (8005d54 <UART_SetConfig+0x4c4>)
 8005c26:	61bb      	str	r3, [r7, #24]
        break;
 8005c28:	e00c      	b.n	8005c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7ff f8b9 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8005c2e:	61b8      	str	r0, [r7, #24]
        break;
 8005c30:	e008      	b.n	8005c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c36:	61bb      	str	r3, [r7, #24]
        break;
 8005c38:	e004      	b.n	8005c44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	77bb      	strb	r3, [r7, #30]
        break;
 8005c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d074      	beq.n	8005d34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	005a      	lsls	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b0f      	cmp	r3, #15
 8005c64:	d916      	bls.n	8005c94 <UART_SetConfig+0x404>
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d212      	bcs.n	8005c94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f023 030f 	bic.w	r3, r3, #15
 8005c76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	89fb      	ldrh	r3, [r7, #14]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	89fa      	ldrh	r2, [r7, #14]
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e04f      	b.n	8005d34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	77bb      	strb	r3, [r7, #30]
 8005c98:	e04c      	b.n	8005d34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c9a:	7ffb      	ldrb	r3, [r7, #31]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d828      	bhi.n	8005cf2 <UART_SetConfig+0x462>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x418>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005ccd 	.word	0x08005ccd
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005cdd 	.word	0x08005cdd
 8005cb4:	08005cf3 	.word	0x08005cf3
 8005cb8:	08005ce3 	.word	0x08005ce3
 8005cbc:	08005cf3 	.word	0x08005cf3
 8005cc0:	08005cf3 	.word	0x08005cf3
 8005cc4:	08005cf3 	.word	0x08005cf3
 8005cc8:	08005ceb 	.word	0x08005ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ccc:	f7ff f97a 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8005cd0:	61b8      	str	r0, [r7, #24]
        break;
 8005cd2:	e013      	b.n	8005cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd4:	f7ff f98a 	bl	8004fec <HAL_RCC_GetPCLK2Freq>
 8005cd8:	61b8      	str	r0, [r7, #24]
        break;
 8005cda:	e00f      	b.n	8005cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <UART_SetConfig+0x4c4>)
 8005cde:	61bb      	str	r3, [r7, #24]
        break;
 8005ce0:	e00c      	b.n	8005cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce2:	f7ff f85d 	bl	8004da0 <HAL_RCC_GetSysClockFreq>
 8005ce6:	61b8      	str	r0, [r7, #24]
        break;
 8005ce8:	e008      	b.n	8005cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	61bb      	str	r3, [r7, #24]
        break;
 8005cf0:	e004      	b.n	8005cfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cfa:	bf00      	nop
    }

    if (pclk != 0U)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d018      	beq.n	8005d34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	085a      	lsrs	r2, r3, #1
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	441a      	add	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	d909      	bls.n	8005d30 <UART_SetConfig+0x4a0>
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d22:	d205      	bcs.n	8005d30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	e001      	b.n	8005d34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d40:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40007c00 	.word	0x40007c00
 8005d50:	40023800 	.word	0x40023800
 8005d54:	00f42400 	.word	0x00f42400

08005d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01a      	beq.n	8005e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e56:	d10a      	bne.n	8005e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005eac:	f7fd f80c 	bl	8002ec8 <HAL_GetTick>
 8005eb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d10e      	bne.n	8005ede <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f81b 	bl	8005f0a <UART_WaitOnFlagUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e011      	b.n	8005f02 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b09c      	sub	sp, #112	; 0x70
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1a:	e0a7      	b.n	800606c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	f000 80a3 	beq.w	800606c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f26:	f7fc ffcf 	bl	8002ec8 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x32>
 8005f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d13f      	bne.n	8005fbc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f50:	667b      	str	r3, [r7, #100]	; 0x64
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e6      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	663b      	str	r3, [r7, #96]	; 0x60
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e5      	bne.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e068      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d050      	beq.n	800606c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd8:	d148      	bne.n	800606c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
 8006004:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e6      	bne.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	613b      	str	r3, [r7, #16]
   return(result);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	66bb      	str	r3, [r7, #104]	; 0x68
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006036:	623a      	str	r2, [r7, #32]
 8006038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	69f9      	ldr	r1, [r7, #28]
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	61bb      	str	r3, [r7, #24]
   return(result);
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e5      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e010      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4013      	ands	r3, r2
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	429a      	cmp	r2, r3
 800607a:	bf0c      	ite	eq
 800607c:	2301      	moveq	r3, #1
 800607e:	2300      	movne	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	429a      	cmp	r2, r3
 8006088:	f43f af48 	beq.w	8005f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3770      	adds	r7, #112	; 0x70
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006098:	b084      	sub	sp, #16
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	f107 001c 	add.w	r0, r7, #28
 80060a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d120      	bne.n	80060f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	4b20      	ldr	r3, [pc, #128]	; (8006144 <USB_CoreInit+0xac>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d105      	bne.n	80060e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa96 	bl	8006618 <USB_CoreReset>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
 80060f0:	e010      	b.n	8006114 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa8a 	bl	8006618 <USB_CoreReset>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	2b01      	cmp	r3, #1
 8006118:	d10b      	bne.n	8006132 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f043 0206 	orr.w	r2, r3, #6
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800613e:	b004      	add	sp, #16
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	ffbdffbf 	.word	0xffbdffbf

08006148 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f023 0201 	bic.w	r2, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d115      	bne.n	80061b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006198:	2001      	movs	r0, #1
 800619a:	f7fc fea1 	bl	8002ee0 <HAL_Delay>
      ms++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3301      	adds	r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fa29 	bl	80065fc <USB_GetMode>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d01e      	beq.n	80061ee <USB_SetCurrentMode+0x84>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b31      	cmp	r3, #49	; 0x31
 80061b4:	d9f0      	bls.n	8006198 <USB_SetCurrentMode+0x2e>
 80061b6:	e01a      	b.n	80061ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d115      	bne.n	80061ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061ca:	2001      	movs	r0, #1
 80061cc:	f7fc fe88 	bl	8002ee0 <HAL_Delay>
      ms++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fa10 	bl	80065fc <USB_GetMode>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <USB_SetCurrentMode+0x84>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b31      	cmp	r3, #49	; 0x31
 80061e6:	d9f0      	bls.n	80061ca <USB_SetCurrentMode+0x60>
 80061e8:	e001      	b.n	80061ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e005      	b.n	80061fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b32      	cmp	r3, #50	; 0x32
 80061f2:	d101      	bne.n	80061f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006204:	b084      	sub	sp, #16
 8006206:	b580      	push	{r7, lr}
 8006208:	b086      	sub	sp, #24
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e009      	b.n	8006238 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3340      	adds	r3, #64	; 0x40
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	2200      	movs	r2, #0
 8006230:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	3301      	adds	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b0e      	cmp	r3, #14
 800623c:	d9f2      	bls.n	8006224 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11c      	bne.n	800627e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006252:	f043 0302 	orr.w	r3, r3, #2
 8006256:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e005      	b.n	800628a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	4619      	mov	r1, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a4:	461a      	mov	r2, r3
 80062a6:	680b      	ldr	r3, [r1, #0]
 80062a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10c      	bne.n	80062ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062b6:	2100      	movs	r1, #0
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f965 	bl	8006588 <USB_SetDevSpeed>
 80062be:	e008      	b.n	80062d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062c0:	2101      	movs	r1, #1
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f960 	bl	8006588 <USB_SetDevSpeed>
 80062c8:	e003      	b.n	80062d2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062ca:	2103      	movs	r1, #3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f95b 	bl	8006588 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062d2:	2110      	movs	r1, #16
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f8f3 	bl	80064c0 <USB_FlushTxFifo>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f91f 	bl	8006528 <USB_FlushRxFifo>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	461a      	mov	r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006306:	461a      	mov	r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	461a      	mov	r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	e043      	b.n	80063a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006334:	d118      	bne.n	8006368 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006348:	461a      	mov	r2, r3
 800634a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	e013      	b.n	800637a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e008      	b.n	800637a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	461a      	mov	r2, r3
 8006388:	2300      	movs	r3, #0
 800638a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	461a      	mov	r2, r3
 800639a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800639e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	3301      	adds	r3, #1
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d3b7      	bcc.n	800631e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ae:	2300      	movs	r3, #0
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e043      	b.n	800643c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ca:	d118      	bne.n	80063fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	461a      	mov	r2, r3
 80063e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e013      	b.n	8006410 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	461a      	mov	r2, r3
 80063f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	e008      	b.n	8006410 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	2300      	movs	r3, #0
 800640e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	461a      	mov	r2, r3
 800641e:	2300      	movs	r3, #0
 8006420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642e:	461a      	mov	r2, r3
 8006430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	3301      	adds	r3, #1
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	429a      	cmp	r2, r3
 8006442:	d3b7      	bcc.n	80063b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006456:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006464:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f043 0210 	orr.w	r2, r3, #16
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699a      	ldr	r2, [r3, #24]
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <USB_DevInit+0x2b4>)
 800647e:	4313      	orrs	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f043 0208 	orr.w	r2, r3, #8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d105      	bne.n	80064a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	4b06      	ldr	r3, [pc, #24]	; (80064bc <USB_DevInit+0x2b8>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b4:	b004      	add	sp, #16
 80064b6:	4770      	bx	lr
 80064b8:	803c3800 	.word	0x803c3800
 80064bc:	40000004 	.word	0x40000004

080064c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a13      	ldr	r2, [pc, #76]	; (8006524 <USB_FlushTxFifo+0x64>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e01b      	b.n	8006518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	daf2      	bge.n	80064ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	019b      	lsls	r3, r3, #6
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a08      	ldr	r2, [pc, #32]	; (8006524 <USB_FlushTxFifo+0x64>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e006      	b.n	8006518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b20      	cmp	r3, #32
 8006514:	d0f0      	beq.n	80064f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	00030d40 	.word	0x00030d40

08006528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a11      	ldr	r2, [pc, #68]	; (8006584 <USB_FlushRxFifo+0x5c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e018      	b.n	8006578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	daf2      	bge.n	8006534 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2210      	movs	r2, #16
 8006556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a08      	ldr	r2, [pc, #32]	; (8006584 <USB_FlushRxFifo+0x5c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e006      	b.n	8006578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b10      	cmp	r3, #16
 8006574:	d0f0      	beq.n	8006558 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	00030d40 	.word	0x00030d40

08006588 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a8:	4313      	orrs	r3, r2
 80065aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065d4:	f023 0303 	bic.w	r3, r3, #3
 80065d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e8:	f043 0302 	orr.w	r3, r3, #2
 80065ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0301 	and.w	r3, r3, #1
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4a13      	ldr	r2, [pc, #76]	; (800667c <USB_CoreReset+0x64>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e01b      	b.n	800666e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	daf2      	bge.n	8006624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f043 0201 	orr.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4a09      	ldr	r2, [pc, #36]	; (800667c <USB_CoreReset+0x64>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e006      	b.n	800666e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b01      	cmp	r3, #1
 800666a:	d0f0      	beq.n	800664e <USB_CoreReset+0x36>

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	00030d40 	.word	0x00030d40

08006680 <__errno>:
 8006680:	4b01      	ldr	r3, [pc, #4]	; (8006688 <__errno+0x8>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20000034 	.word	0x20000034

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4d0d      	ldr	r5, [pc, #52]	; (80066c4 <__libc_init_array+0x38>)
 8006690:	4c0d      	ldr	r4, [pc, #52]	; (80066c8 <__libc_init_array+0x3c>)
 8006692:	1b64      	subs	r4, r4, r5
 8006694:	10a4      	asrs	r4, r4, #2
 8006696:	2600      	movs	r6, #0
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	4d0b      	ldr	r5, [pc, #44]	; (80066cc <__libc_init_array+0x40>)
 800669e:	4c0c      	ldr	r4, [pc, #48]	; (80066d0 <__libc_init_array+0x44>)
 80066a0:	f001 fd40 	bl	8008124 <_init>
 80066a4:	1b64      	subs	r4, r4, r5
 80066a6:	10a4      	asrs	r4, r4, #2
 80066a8:	2600      	movs	r6, #0
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b4:	4798      	blx	r3
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80066be:	4798      	blx	r3
 80066c0:	3601      	adds	r6, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	0800c9c8 	.word	0x0800c9c8
 80066c8:	0800c9c8 	.word	0x0800c9c8
 80066cc:	0800c9c8 	.word	0x0800c9c8
 80066d0:	0800c9cc 	.word	0x0800c9cc

080066d4 <memcpy>:
 80066d4:	440a      	add	r2, r1
 80066d6:	4291      	cmp	r1, r2
 80066d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066dc:	d100      	bne.n	80066e0 <memcpy+0xc>
 80066de:	4770      	bx	lr
 80066e0:	b510      	push	{r4, lr}
 80066e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ea:	4291      	cmp	r1, r2
 80066ec:	d1f9      	bne.n	80066e2 <memcpy+0xe>
 80066ee:	bd10      	pop	{r4, pc}

080066f0 <memmove>:
 80066f0:	4288      	cmp	r0, r1
 80066f2:	b510      	push	{r4, lr}
 80066f4:	eb01 0402 	add.w	r4, r1, r2
 80066f8:	d902      	bls.n	8006700 <memmove+0x10>
 80066fa:	4284      	cmp	r4, r0
 80066fc:	4623      	mov	r3, r4
 80066fe:	d807      	bhi.n	8006710 <memmove+0x20>
 8006700:	1e43      	subs	r3, r0, #1
 8006702:	42a1      	cmp	r1, r4
 8006704:	d008      	beq.n	8006718 <memmove+0x28>
 8006706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800670a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800670e:	e7f8      	b.n	8006702 <memmove+0x12>
 8006710:	4402      	add	r2, r0
 8006712:	4601      	mov	r1, r0
 8006714:	428a      	cmp	r2, r1
 8006716:	d100      	bne.n	800671a <memmove+0x2a>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800671e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006722:	e7f7      	b.n	8006714 <memmove+0x24>

08006724 <memset>:
 8006724:	4402      	add	r2, r0
 8006726:	4603      	mov	r3, r0
 8006728:	4293      	cmp	r3, r2
 800672a:	d100      	bne.n	800672e <memset+0xa>
 800672c:	4770      	bx	lr
 800672e:	f803 1b01 	strb.w	r1, [r3], #1
 8006732:	e7f9      	b.n	8006728 <memset+0x4>

08006734 <sniprintf>:
 8006734:	b40c      	push	{r2, r3}
 8006736:	b530      	push	{r4, r5, lr}
 8006738:	4b17      	ldr	r3, [pc, #92]	; (8006798 <sniprintf+0x64>)
 800673a:	1e0c      	subs	r4, r1, #0
 800673c:	681d      	ldr	r5, [r3, #0]
 800673e:	b09d      	sub	sp, #116	; 0x74
 8006740:	da08      	bge.n	8006754 <sniprintf+0x20>
 8006742:	238b      	movs	r3, #139	; 0x8b
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	b01d      	add	sp, #116	; 0x74
 800674c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006750:	b002      	add	sp, #8
 8006752:	4770      	bx	lr
 8006754:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006758:	f8ad 3014 	strh.w	r3, [sp, #20]
 800675c:	bf14      	ite	ne
 800675e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006762:	4623      	moveq	r3, r4
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	9307      	str	r3, [sp, #28]
 8006768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800676c:	9002      	str	r0, [sp, #8]
 800676e:	9006      	str	r0, [sp, #24]
 8006770:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006774:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006776:	ab21      	add	r3, sp, #132	; 0x84
 8006778:	a902      	add	r1, sp, #8
 800677a:	4628      	mov	r0, r5
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	f000 f869 	bl	8006854 <_svfiprintf_r>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	bfbc      	itt	lt
 8006786:	238b      	movlt	r3, #139	; 0x8b
 8006788:	602b      	strlt	r3, [r5, #0]
 800678a:	2c00      	cmp	r4, #0
 800678c:	d0dd      	beq.n	800674a <sniprintf+0x16>
 800678e:	9b02      	ldr	r3, [sp, #8]
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	e7d9      	b.n	800674a <sniprintf+0x16>
 8006796:	bf00      	nop
 8006798:	20000034 	.word	0x20000034

0800679c <__ssputs_r>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	688e      	ldr	r6, [r1, #8]
 80067a2:	429e      	cmp	r6, r3
 80067a4:	4682      	mov	sl, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	4690      	mov	r8, r2
 80067aa:	461f      	mov	r7, r3
 80067ac:	d838      	bhi.n	8006820 <__ssputs_r+0x84>
 80067ae:	898a      	ldrh	r2, [r1, #12]
 80067b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b4:	d032      	beq.n	800681c <__ssputs_r+0x80>
 80067b6:	6825      	ldr	r5, [r4, #0]
 80067b8:	6909      	ldr	r1, [r1, #16]
 80067ba:	eba5 0901 	sub.w	r9, r5, r1
 80067be:	6965      	ldr	r5, [r4, #20]
 80067c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067c8:	3301      	adds	r3, #1
 80067ca:	444b      	add	r3, r9
 80067cc:	106d      	asrs	r5, r5, #1
 80067ce:	429d      	cmp	r5, r3
 80067d0:	bf38      	it	cc
 80067d2:	461d      	movcc	r5, r3
 80067d4:	0553      	lsls	r3, r2, #21
 80067d6:	d531      	bpl.n	800683c <__ssputs_r+0xa0>
 80067d8:	4629      	mov	r1, r5
 80067da:	f000 fb3b 	bl	8006e54 <_malloc_r>
 80067de:	4606      	mov	r6, r0
 80067e0:	b950      	cbnz	r0, 80067f8 <__ssputs_r+0x5c>
 80067e2:	230c      	movs	r3, #12
 80067e4:	f8ca 3000 	str.w	r3, [sl]
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	6921      	ldr	r1, [r4, #16]
 80067fa:	464a      	mov	r2, r9
 80067fc:	f7ff ff6a 	bl	80066d4 <memcpy>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	6126      	str	r6, [r4, #16]
 800680e:	6165      	str	r5, [r4, #20]
 8006810:	444e      	add	r6, r9
 8006812:	eba5 0509 	sub.w	r5, r5, r9
 8006816:	6026      	str	r6, [r4, #0]
 8006818:	60a5      	str	r5, [r4, #8]
 800681a:	463e      	mov	r6, r7
 800681c:	42be      	cmp	r6, r7
 800681e:	d900      	bls.n	8006822 <__ssputs_r+0x86>
 8006820:	463e      	mov	r6, r7
 8006822:	6820      	ldr	r0, [r4, #0]
 8006824:	4632      	mov	r2, r6
 8006826:	4641      	mov	r1, r8
 8006828:	f7ff ff62 	bl	80066f0 <memmove>
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	1b9b      	subs	r3, r3, r6
 8006830:	60a3      	str	r3, [r4, #8]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	4433      	add	r3, r6
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	2000      	movs	r0, #0
 800683a:	e7db      	b.n	80067f4 <__ssputs_r+0x58>
 800683c:	462a      	mov	r2, r5
 800683e:	f000 fb7d 	bl	8006f3c <_realloc_r>
 8006842:	4606      	mov	r6, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	d1e1      	bne.n	800680c <__ssputs_r+0x70>
 8006848:	6921      	ldr	r1, [r4, #16]
 800684a:	4650      	mov	r0, sl
 800684c:	f000 fa96 	bl	8006d7c <_free_r>
 8006850:	e7c7      	b.n	80067e2 <__ssputs_r+0x46>
	...

08006854 <_svfiprintf_r>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4698      	mov	r8, r3
 800685a:	898b      	ldrh	r3, [r1, #12]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	b09d      	sub	sp, #116	; 0x74
 8006860:	4607      	mov	r7, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4614      	mov	r4, r2
 8006866:	d50e      	bpl.n	8006886 <_svfiprintf_r+0x32>
 8006868:	690b      	ldr	r3, [r1, #16]
 800686a:	b963      	cbnz	r3, 8006886 <_svfiprintf_r+0x32>
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	f000 faf1 	bl	8006e54 <_malloc_r>
 8006872:	6028      	str	r0, [r5, #0]
 8006874:	6128      	str	r0, [r5, #16]
 8006876:	b920      	cbnz	r0, 8006882 <_svfiprintf_r+0x2e>
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e0d1      	b.n	8006a26 <_svfiprintf_r+0x1d2>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	616b      	str	r3, [r5, #20]
 8006886:	2300      	movs	r3, #0
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	2320      	movs	r3, #32
 800688c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006890:	f8cd 800c 	str.w	r8, [sp, #12]
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a40 <_svfiprintf_r+0x1ec>
 800689a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800689e:	f04f 0901 	mov.w	r9, #1
 80068a2:	4623      	mov	r3, r4
 80068a4:	469a      	mov	sl, r3
 80068a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068aa:	b10a      	cbz	r2, 80068b0 <_svfiprintf_r+0x5c>
 80068ac:	2a25      	cmp	r2, #37	; 0x25
 80068ae:	d1f9      	bne.n	80068a4 <_svfiprintf_r+0x50>
 80068b0:	ebba 0b04 	subs.w	fp, sl, r4
 80068b4:	d00b      	beq.n	80068ce <_svfiprintf_r+0x7a>
 80068b6:	465b      	mov	r3, fp
 80068b8:	4622      	mov	r2, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff ff6d 	bl	800679c <__ssputs_r>
 80068c2:	3001      	adds	r0, #1
 80068c4:	f000 80aa 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ca:	445a      	add	r2, fp
 80068cc:	9209      	str	r2, [sp, #36]	; 0x24
 80068ce:	f89a 3000 	ldrb.w	r3, [sl]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a2 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068d8:	2300      	movs	r3, #0
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e2:	f10a 0a01 	add.w	sl, sl, #1
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	9307      	str	r3, [sp, #28]
 80068ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ee:	931a      	str	r3, [sp, #104]	; 0x68
 80068f0:	4654      	mov	r4, sl
 80068f2:	2205      	movs	r2, #5
 80068f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f8:	4851      	ldr	r0, [pc, #324]	; (8006a40 <_svfiprintf_r+0x1ec>)
 80068fa:	f7f9 fc89 	bl	8000210 <memchr>
 80068fe:	9a04      	ldr	r2, [sp, #16]
 8006900:	b9d8      	cbnz	r0, 800693a <_svfiprintf_r+0xe6>
 8006902:	06d0      	lsls	r0, r2, #27
 8006904:	bf44      	itt	mi
 8006906:	2320      	movmi	r3, #32
 8006908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690c:	0711      	lsls	r1, r2, #28
 800690e:	bf44      	itt	mi
 8006910:	232b      	movmi	r3, #43	; 0x2b
 8006912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006916:	f89a 3000 	ldrb.w	r3, [sl]
 800691a:	2b2a      	cmp	r3, #42	; 0x2a
 800691c:	d015      	beq.n	800694a <_svfiprintf_r+0xf6>
 800691e:	9a07      	ldr	r2, [sp, #28]
 8006920:	4654      	mov	r4, sl
 8006922:	2000      	movs	r0, #0
 8006924:	f04f 0c0a 	mov.w	ip, #10
 8006928:	4621      	mov	r1, r4
 800692a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692e:	3b30      	subs	r3, #48	; 0x30
 8006930:	2b09      	cmp	r3, #9
 8006932:	d94e      	bls.n	80069d2 <_svfiprintf_r+0x17e>
 8006934:	b1b0      	cbz	r0, 8006964 <_svfiprintf_r+0x110>
 8006936:	9207      	str	r2, [sp, #28]
 8006938:	e014      	b.n	8006964 <_svfiprintf_r+0x110>
 800693a:	eba0 0308 	sub.w	r3, r0, r8
 800693e:	fa09 f303 	lsl.w	r3, r9, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	9304      	str	r3, [sp, #16]
 8006946:	46a2      	mov	sl, r4
 8006948:	e7d2      	b.n	80068f0 <_svfiprintf_r+0x9c>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfbb      	ittet	lt
 8006956:	425b      	neglt	r3, r3
 8006958:	f042 0202 	orrlt.w	r2, r2, #2
 800695c:	9307      	strge	r3, [sp, #28]
 800695e:	9307      	strlt	r3, [sp, #28]
 8006960:	bfb8      	it	lt
 8006962:	9204      	strlt	r2, [sp, #16]
 8006964:	7823      	ldrb	r3, [r4, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d10c      	bne.n	8006984 <_svfiprintf_r+0x130>
 800696a:	7863      	ldrb	r3, [r4, #1]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d135      	bne.n	80069dc <_svfiprintf_r+0x188>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	1d1a      	adds	r2, r3, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	9203      	str	r2, [sp, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfb8      	it	lt
 800697c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006980:	3402      	adds	r4, #2
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a50 <_svfiprintf_r+0x1fc>
 8006988:	7821      	ldrb	r1, [r4, #0]
 800698a:	2203      	movs	r2, #3
 800698c:	4650      	mov	r0, sl
 800698e:	f7f9 fc3f 	bl	8000210 <memchr>
 8006992:	b140      	cbz	r0, 80069a6 <_svfiprintf_r+0x152>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	eba0 000a 	sub.w	r0, r0, sl
 800699a:	fa03 f000 	lsl.w	r0, r3, r0
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	4303      	orrs	r3, r0
 80069a2:	3401      	adds	r4, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069aa:	4826      	ldr	r0, [pc, #152]	; (8006a44 <_svfiprintf_r+0x1f0>)
 80069ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b0:	2206      	movs	r2, #6
 80069b2:	f7f9 fc2d 	bl	8000210 <memchr>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d038      	beq.n	8006a2c <_svfiprintf_r+0x1d8>
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <_svfiprintf_r+0x1f4>)
 80069bc:	bb1b      	cbnz	r3, 8006a06 <_svfiprintf_r+0x1b2>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	3308      	adds	r3, #8
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	4433      	add	r3, r6
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	e767      	b.n	80068a2 <_svfiprintf_r+0x4e>
 80069d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069d6:	460c      	mov	r4, r1
 80069d8:	2001      	movs	r0, #1
 80069da:	e7a5      	b.n	8006928 <_svfiprintf_r+0xd4>
 80069dc:	2300      	movs	r3, #0
 80069de:	3401      	adds	r4, #1
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	4619      	mov	r1, r3
 80069e4:	f04f 0c0a 	mov.w	ip, #10
 80069e8:	4620      	mov	r0, r4
 80069ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ee:	3a30      	subs	r2, #48	; 0x30
 80069f0:	2a09      	cmp	r2, #9
 80069f2:	d903      	bls.n	80069fc <_svfiprintf_r+0x1a8>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c5      	beq.n	8006984 <_svfiprintf_r+0x130>
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	e7c3      	b.n	8006984 <_svfiprintf_r+0x130>
 80069fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a00:	4604      	mov	r4, r0
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7f0      	b.n	80069e8 <_svfiprintf_r+0x194>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a0e:	a904      	add	r1, sp, #16
 8006a10:	4638      	mov	r0, r7
 8006a12:	f3af 8000 	nop.w
 8006a16:	1c42      	adds	r2, r0, #1
 8006a18:	4606      	mov	r6, r0
 8006a1a:	d1d6      	bne.n	80069ca <_svfiprintf_r+0x176>
 8006a1c:	89ab      	ldrh	r3, [r5, #12]
 8006a1e:	065b      	lsls	r3, r3, #25
 8006a20:	f53f af2c 	bmi.w	800687c <_svfiprintf_r+0x28>
 8006a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a26:	b01d      	add	sp, #116	; 0x74
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	ab03      	add	r3, sp, #12
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462a      	mov	r2, r5
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a34:	a904      	add	r1, sp, #16
 8006a36:	4638      	mov	r0, r7
 8006a38:	f000 f87a 	bl	8006b30 <_printf_i>
 8006a3c:	e7eb      	b.n	8006a16 <_svfiprintf_r+0x1c2>
 8006a3e:	bf00      	nop
 8006a40:	0800c7b0 	.word	0x0800c7b0
 8006a44:	0800c7ba 	.word	0x0800c7ba
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	0800679d 	.word	0x0800679d
 8006a50:	0800c7b6 	.word	0x0800c7b6

08006a54 <_printf_common>:
 8006a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	4616      	mov	r6, r2
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	688a      	ldr	r2, [r1, #8]
 8006a5e:	690b      	ldr	r3, [r1, #16]
 8006a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	bfb8      	it	lt
 8006a68:	4613      	movlt	r3, r2
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a70:	4607      	mov	r7, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	b10a      	cbz	r2, 8006a7a <_printf_common+0x26>
 8006a76:	3301      	adds	r3, #1
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	0699      	lsls	r1, r3, #26
 8006a7e:	bf42      	ittt	mi
 8006a80:	6833      	ldrmi	r3, [r6, #0]
 8006a82:	3302      	addmi	r3, #2
 8006a84:	6033      	strmi	r3, [r6, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	f015 0506 	ands.w	r5, r5, #6
 8006a8c:	d106      	bne.n	8006a9c <_printf_common+0x48>
 8006a8e:	f104 0a19 	add.w	sl, r4, #25
 8006a92:	68e3      	ldr	r3, [r4, #12]
 8006a94:	6832      	ldr	r2, [r6, #0]
 8006a96:	1a9b      	subs	r3, r3, r2
 8006a98:	42ab      	cmp	r3, r5
 8006a9a:	dc26      	bgt.n	8006aea <_printf_common+0x96>
 8006a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aa0:	1e13      	subs	r3, r2, #0
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	bf18      	it	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	0692      	lsls	r2, r2, #26
 8006aaa:	d42b      	bmi.n	8006b04 <_printf_common+0xb0>
 8006aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d01e      	beq.n	8006af8 <_printf_common+0xa4>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	68e5      	ldr	r5, [r4, #12]
 8006abe:	6832      	ldr	r2, [r6, #0]
 8006ac0:	f003 0306 	and.w	r3, r3, #6
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	bf08      	it	eq
 8006ac8:	1aad      	subeq	r5, r5, r2
 8006aca:	68a3      	ldr	r3, [r4, #8]
 8006acc:	6922      	ldr	r2, [r4, #16]
 8006ace:	bf0c      	ite	eq
 8006ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad4:	2500      	movne	r5, #0
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	bfc4      	itt	gt
 8006ada:	1a9b      	subgt	r3, r3, r2
 8006adc:	18ed      	addgt	r5, r5, r3
 8006ade:	2600      	movs	r6, #0
 8006ae0:	341a      	adds	r4, #26
 8006ae2:	42b5      	cmp	r5, r6
 8006ae4:	d11a      	bne.n	8006b1c <_printf_common+0xc8>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e008      	b.n	8006afc <_printf_common+0xa8>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4652      	mov	r2, sl
 8006aee:	4649      	mov	r1, r9
 8006af0:	4638      	mov	r0, r7
 8006af2:	47c0      	blx	r8
 8006af4:	3001      	adds	r0, #1
 8006af6:	d103      	bne.n	8006b00 <_printf_common+0xac>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b00:	3501      	adds	r5, #1
 8006b02:	e7c6      	b.n	8006a92 <_printf_common+0x3e>
 8006b04:	18e1      	adds	r1, r4, r3
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	2030      	movs	r0, #48	; 0x30
 8006b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b0e:	4422      	add	r2, r4
 8006b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b18:	3302      	adds	r3, #2
 8006b1a:	e7c7      	b.n	8006aac <_printf_common+0x58>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4622      	mov	r2, r4
 8006b20:	4649      	mov	r1, r9
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c0      	blx	r8
 8006b26:	3001      	adds	r0, #1
 8006b28:	d0e6      	beq.n	8006af8 <_printf_common+0xa4>
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7d9      	b.n	8006ae2 <_printf_common+0x8e>
	...

08006b30 <_printf_i>:
 8006b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	7e0f      	ldrb	r7, [r1, #24]
 8006b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b38:	2f78      	cmp	r7, #120	; 0x78
 8006b3a:	4691      	mov	r9, r2
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	469a      	mov	sl, r3
 8006b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b46:	d807      	bhi.n	8006b58 <_printf_i+0x28>
 8006b48:	2f62      	cmp	r7, #98	; 0x62
 8006b4a:	d80a      	bhi.n	8006b62 <_printf_i+0x32>
 8006b4c:	2f00      	cmp	r7, #0
 8006b4e:	f000 80d8 	beq.w	8006d02 <_printf_i+0x1d2>
 8006b52:	2f58      	cmp	r7, #88	; 0x58
 8006b54:	f000 80a3 	beq.w	8006c9e <_printf_i+0x16e>
 8006b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b60:	e03a      	b.n	8006bd8 <_printf_i+0xa8>
 8006b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b66:	2b15      	cmp	r3, #21
 8006b68:	d8f6      	bhi.n	8006b58 <_printf_i+0x28>
 8006b6a:	a101      	add	r1, pc, #4	; (adr r1, 8006b70 <_printf_i+0x40>)
 8006b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b70:	08006bc9 	.word	0x08006bc9
 8006b74:	08006bdd 	.word	0x08006bdd
 8006b78:	08006b59 	.word	0x08006b59
 8006b7c:	08006b59 	.word	0x08006b59
 8006b80:	08006b59 	.word	0x08006b59
 8006b84:	08006b59 	.word	0x08006b59
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006b59 	.word	0x08006b59
 8006b90:	08006b59 	.word	0x08006b59
 8006b94:	08006b59 	.word	0x08006b59
 8006b98:	08006b59 	.word	0x08006b59
 8006b9c:	08006ce9 	.word	0x08006ce9
 8006ba0:	08006c0d 	.word	0x08006c0d
 8006ba4:	08006ccb 	.word	0x08006ccb
 8006ba8:	08006b59 	.word	0x08006b59
 8006bac:	08006b59 	.word	0x08006b59
 8006bb0:	08006d0b 	.word	0x08006d0b
 8006bb4:	08006b59 	.word	0x08006b59
 8006bb8:	08006c0d 	.word	0x08006c0d
 8006bbc:	08006b59 	.word	0x08006b59
 8006bc0:	08006b59 	.word	0x08006b59
 8006bc4:	08006cd3 	.word	0x08006cd3
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	602a      	str	r2, [r5, #0]
 8006bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0a3      	b.n	8006d24 <_printf_i+0x1f4>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	6829      	ldr	r1, [r5, #0]
 8006be0:	0606      	lsls	r6, r0, #24
 8006be2:	f101 0304 	add.w	r3, r1, #4
 8006be6:	d50a      	bpl.n	8006bfe <_printf_i+0xce>
 8006be8:	680e      	ldr	r6, [r1, #0]
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	2e00      	cmp	r6, #0
 8006bee:	da03      	bge.n	8006bf8 <_printf_i+0xc8>
 8006bf0:	232d      	movs	r3, #45	; 0x2d
 8006bf2:	4276      	negs	r6, r6
 8006bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf8:	485e      	ldr	r0, [pc, #376]	; (8006d74 <_printf_i+0x244>)
 8006bfa:	230a      	movs	r3, #10
 8006bfc:	e019      	b.n	8006c32 <_printf_i+0x102>
 8006bfe:	680e      	ldr	r6, [r1, #0]
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c06:	bf18      	it	ne
 8006c08:	b236      	sxthne	r6, r6
 8006c0a:	e7ef      	b.n	8006bec <_printf_i+0xbc>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	1d19      	adds	r1, r3, #4
 8006c12:	6029      	str	r1, [r5, #0]
 8006c14:	0601      	lsls	r1, r0, #24
 8006c16:	d501      	bpl.n	8006c1c <_printf_i+0xec>
 8006c18:	681e      	ldr	r6, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <_printf_i+0xf2>
 8006c1c:	0646      	lsls	r6, r0, #25
 8006c1e:	d5fb      	bpl.n	8006c18 <_printf_i+0xe8>
 8006c20:	881e      	ldrh	r6, [r3, #0]
 8006c22:	4854      	ldr	r0, [pc, #336]	; (8006d74 <_printf_i+0x244>)
 8006c24:	2f6f      	cmp	r7, #111	; 0x6f
 8006c26:	bf0c      	ite	eq
 8006c28:	2308      	moveq	r3, #8
 8006c2a:	230a      	movne	r3, #10
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c32:	6865      	ldr	r5, [r4, #4]
 8006c34:	60a5      	str	r5, [r4, #8]
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	bfa2      	ittt	ge
 8006c3a:	6821      	ldrge	r1, [r4, #0]
 8006c3c:	f021 0104 	bicge.w	r1, r1, #4
 8006c40:	6021      	strge	r1, [r4, #0]
 8006c42:	b90e      	cbnz	r6, 8006c48 <_printf_i+0x118>
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	d04d      	beq.n	8006ce4 <_printf_i+0x1b4>
 8006c48:	4615      	mov	r5, r2
 8006c4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c52:	5dc7      	ldrb	r7, [r0, r7]
 8006c54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c58:	4637      	mov	r7, r6
 8006c5a:	42bb      	cmp	r3, r7
 8006c5c:	460e      	mov	r6, r1
 8006c5e:	d9f4      	bls.n	8006c4a <_printf_i+0x11a>
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d10b      	bne.n	8006c7c <_printf_i+0x14c>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	07de      	lsls	r6, r3, #31
 8006c68:	d508      	bpl.n	8006c7c <_printf_i+0x14c>
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	6861      	ldr	r1, [r4, #4]
 8006c6e:	4299      	cmp	r1, r3
 8006c70:	bfde      	ittt	le
 8006c72:	2330      	movle	r3, #48	; 0x30
 8006c74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c7c:	1b52      	subs	r2, r2, r5
 8006c7e:	6122      	str	r2, [r4, #16]
 8006c80:	f8cd a000 	str.w	sl, [sp]
 8006c84:	464b      	mov	r3, r9
 8006c86:	aa03      	add	r2, sp, #12
 8006c88:	4621      	mov	r1, r4
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f7ff fee2 	bl	8006a54 <_printf_common>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d14c      	bne.n	8006d2e <_printf_i+0x1fe>
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
 8006c98:	b004      	add	sp, #16
 8006c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9e:	4835      	ldr	r0, [pc, #212]	; (8006d74 <_printf_i+0x244>)
 8006ca0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ca4:	6829      	ldr	r1, [r5, #0]
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cac:	6029      	str	r1, [r5, #0]
 8006cae:	061d      	lsls	r5, r3, #24
 8006cb0:	d514      	bpl.n	8006cdc <_printf_i+0x1ac>
 8006cb2:	07df      	lsls	r7, r3, #31
 8006cb4:	bf44      	itt	mi
 8006cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cba:	6023      	strmi	r3, [r4, #0]
 8006cbc:	b91e      	cbnz	r6, 8006cc6 <_printf_i+0x196>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f023 0320 	bic.w	r3, r3, #32
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	e7b0      	b.n	8006c2c <_printf_i+0xfc>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	f043 0320 	orr.w	r3, r3, #32
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	2378      	movs	r3, #120	; 0x78
 8006cd4:	4828      	ldr	r0, [pc, #160]	; (8006d78 <_printf_i+0x248>)
 8006cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cda:	e7e3      	b.n	8006ca4 <_printf_i+0x174>
 8006cdc:	0659      	lsls	r1, r3, #25
 8006cde:	bf48      	it	mi
 8006ce0:	b2b6      	uxthmi	r6, r6
 8006ce2:	e7e6      	b.n	8006cb2 <_printf_i+0x182>
 8006ce4:	4615      	mov	r5, r2
 8006ce6:	e7bb      	b.n	8006c60 <_printf_i+0x130>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	6826      	ldr	r6, [r4, #0]
 8006cec:	6961      	ldr	r1, [r4, #20]
 8006cee:	1d18      	adds	r0, r3, #4
 8006cf0:	6028      	str	r0, [r5, #0]
 8006cf2:	0635      	lsls	r5, r6, #24
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	d501      	bpl.n	8006cfc <_printf_i+0x1cc>
 8006cf8:	6019      	str	r1, [r3, #0]
 8006cfa:	e002      	b.n	8006d02 <_printf_i+0x1d2>
 8006cfc:	0670      	lsls	r0, r6, #25
 8006cfe:	d5fb      	bpl.n	8006cf8 <_printf_i+0x1c8>
 8006d00:	8019      	strh	r1, [r3, #0]
 8006d02:	2300      	movs	r3, #0
 8006d04:	6123      	str	r3, [r4, #16]
 8006d06:	4615      	mov	r5, r2
 8006d08:	e7ba      	b.n	8006c80 <_printf_i+0x150>
 8006d0a:	682b      	ldr	r3, [r5, #0]
 8006d0c:	1d1a      	adds	r2, r3, #4
 8006d0e:	602a      	str	r2, [r5, #0]
 8006d10:	681d      	ldr	r5, [r3, #0]
 8006d12:	6862      	ldr	r2, [r4, #4]
 8006d14:	2100      	movs	r1, #0
 8006d16:	4628      	mov	r0, r5
 8006d18:	f7f9 fa7a 	bl	8000210 <memchr>
 8006d1c:	b108      	cbz	r0, 8006d22 <_printf_i+0x1f2>
 8006d1e:	1b40      	subs	r0, r0, r5
 8006d20:	6060      	str	r0, [r4, #4]
 8006d22:	6863      	ldr	r3, [r4, #4]
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	2300      	movs	r3, #0
 8006d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d2c:	e7a8      	b.n	8006c80 <_printf_i+0x150>
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	462a      	mov	r2, r5
 8006d32:	4649      	mov	r1, r9
 8006d34:	4640      	mov	r0, r8
 8006d36:	47d0      	blx	sl
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d0ab      	beq.n	8006c94 <_printf_i+0x164>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	079b      	lsls	r3, r3, #30
 8006d40:	d413      	bmi.n	8006d6a <_printf_i+0x23a>
 8006d42:	68e0      	ldr	r0, [r4, #12]
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	4298      	cmp	r0, r3
 8006d48:	bfb8      	it	lt
 8006d4a:	4618      	movlt	r0, r3
 8006d4c:	e7a4      	b.n	8006c98 <_printf_i+0x168>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4632      	mov	r2, r6
 8006d52:	4649      	mov	r1, r9
 8006d54:	4640      	mov	r0, r8
 8006d56:	47d0      	blx	sl
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d09b      	beq.n	8006c94 <_printf_i+0x164>
 8006d5c:	3501      	adds	r5, #1
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	9903      	ldr	r1, [sp, #12]
 8006d62:	1a5b      	subs	r3, r3, r1
 8006d64:	42ab      	cmp	r3, r5
 8006d66:	dcf2      	bgt.n	8006d4e <_printf_i+0x21e>
 8006d68:	e7eb      	b.n	8006d42 <_printf_i+0x212>
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	f104 0619 	add.w	r6, r4, #25
 8006d70:	e7f5      	b.n	8006d5e <_printf_i+0x22e>
 8006d72:	bf00      	nop
 8006d74:	0800c7c1 	.word	0x0800c7c1
 8006d78:	0800c7d2 	.word	0x0800c7d2

08006d7c <_free_r>:
 8006d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	d044      	beq.n	8006e0c <_free_r+0x90>
 8006d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d86:	9001      	str	r0, [sp, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d8e:	bfb8      	it	lt
 8006d90:	18e4      	addlt	r4, r4, r3
 8006d92:	f000 f913 	bl	8006fbc <__malloc_lock>
 8006d96:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <_free_r+0x94>)
 8006d98:	9801      	ldr	r0, [sp, #4]
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x30>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	b003      	add	sp, #12
 8006da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006da8:	f000 b90e 	b.w	8006fc8 <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x46>
 8006db0:	6825      	ldr	r5, [r4, #0]
 8006db2:	1961      	adds	r1, r4, r5
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1949      	addeq	r1, r1, r5
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x22>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x50>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x46>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1855      	adds	r5, r2, r1
 8006dd0:	42a5      	cmp	r5, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x70>
 8006dd4:	6824      	ldr	r4, [r4, #0]
 8006dd6:	4421      	add	r1, r4
 8006dd8:	1854      	adds	r4, r2, r1
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x26>
 8006de0:	681c      	ldr	r4, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	4421      	add	r1, r4
 8006de8:	6011      	str	r1, [r2, #0]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x26>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x78>
 8006dee:	230c      	movs	r3, #12
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x26>
 8006df4:	6825      	ldr	r5, [r4, #0]
 8006df6:	1961      	adds	r1, r4, r5
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1949      	addeq	r1, r1, r5
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7ca      	b.n	8006da2 <_free_r+0x26>
 8006e0c:	b003      	add	sp, #12
 8006e0e:	bd30      	pop	{r4, r5, pc}
 8006e10:	20000cd8 	.word	0x20000cd8

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0e      	ldr	r6, [pc, #56]	; (8006e50 <sbrk_aligned+0x3c>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 f8bc 	bl	8006f9c <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f8b7 	bl	8006f9c <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d00a      	beq.n	8006e48 <sbrk_aligned+0x34>
 8006e32:	1cc4      	adds	r4, r0, #3
 8006e34:	f024 0403 	bic.w	r4, r4, #3
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d007      	beq.n	8006e4c <sbrk_aligned+0x38>
 8006e3c:	1a21      	subs	r1, r4, r0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 f8ac 	bl	8006f9c <_sbrk_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d101      	bne.n	8006e4c <sbrk_aligned+0x38>
 8006e48:	f04f 34ff 	mov.w	r4, #4294967295
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	20000cdc 	.word	0x20000cdc

08006e54 <_malloc_r>:
 8006e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e58:	1ccd      	adds	r5, r1, #3
 8006e5a:	f025 0503 	bic.w	r5, r5, #3
 8006e5e:	3508      	adds	r5, #8
 8006e60:	2d0c      	cmp	r5, #12
 8006e62:	bf38      	it	cc
 8006e64:	250c      	movcc	r5, #12
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	4607      	mov	r7, r0
 8006e6a:	db01      	blt.n	8006e70 <_malloc_r+0x1c>
 8006e6c:	42a9      	cmp	r1, r5
 8006e6e:	d905      	bls.n	8006e7c <_malloc_r+0x28>
 8006e70:	230c      	movs	r3, #12
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	2600      	movs	r6, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e7c:	4e2e      	ldr	r6, [pc, #184]	; (8006f38 <_malloc_r+0xe4>)
 8006e7e:	f000 f89d 	bl	8006fbc <__malloc_lock>
 8006e82:	6833      	ldr	r3, [r6, #0]
 8006e84:	461c      	mov	r4, r3
 8006e86:	bb34      	cbnz	r4, 8006ed6 <_malloc_r+0x82>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	f7ff ffc2 	bl	8006e14 <sbrk_aligned>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	4604      	mov	r4, r0
 8006e94:	d14d      	bne.n	8006f32 <_malloc_r+0xde>
 8006e96:	6834      	ldr	r4, [r6, #0]
 8006e98:	4626      	mov	r6, r4
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	d140      	bne.n	8006f20 <_malloc_r+0xcc>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	eb04 0803 	add.w	r8, r4, r3
 8006ea8:	f000 f878 	bl	8006f9c <_sbrk_r>
 8006eac:	4580      	cmp	r8, r0
 8006eae:	d13a      	bne.n	8006f26 <_malloc_r+0xd2>
 8006eb0:	6821      	ldr	r1, [r4, #0]
 8006eb2:	3503      	adds	r5, #3
 8006eb4:	1a6d      	subs	r5, r5, r1
 8006eb6:	f025 0503 	bic.w	r5, r5, #3
 8006eba:	3508      	adds	r5, #8
 8006ebc:	2d0c      	cmp	r5, #12
 8006ebe:	bf38      	it	cc
 8006ec0:	250c      	movcc	r5, #12
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff ffa5 	bl	8006e14 <sbrk_aligned>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d02b      	beq.n	8006f26 <_malloc_r+0xd2>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	442b      	add	r3, r5
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	e00e      	b.n	8006ef4 <_malloc_r+0xa0>
 8006ed6:	6822      	ldr	r2, [r4, #0]
 8006ed8:	1b52      	subs	r2, r2, r5
 8006eda:	d41e      	bmi.n	8006f1a <_malloc_r+0xc6>
 8006edc:	2a0b      	cmp	r2, #11
 8006ede:	d916      	bls.n	8006f0e <_malloc_r+0xba>
 8006ee0:	1961      	adds	r1, r4, r5
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	6025      	str	r5, [r4, #0]
 8006ee6:	bf18      	it	ne
 8006ee8:	6059      	strne	r1, [r3, #4]
 8006eea:	6863      	ldr	r3, [r4, #4]
 8006eec:	bf08      	it	eq
 8006eee:	6031      	streq	r1, [r6, #0]
 8006ef0:	5162      	str	r2, [r4, r5]
 8006ef2:	604b      	str	r3, [r1, #4]
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f104 060b 	add.w	r6, r4, #11
 8006efa:	f000 f865 	bl	8006fc8 <__malloc_unlock>
 8006efe:	f026 0607 	bic.w	r6, r6, #7
 8006f02:	1d23      	adds	r3, r4, #4
 8006f04:	1af2      	subs	r2, r6, r3
 8006f06:	d0b6      	beq.n	8006e76 <_malloc_r+0x22>
 8006f08:	1b9b      	subs	r3, r3, r6
 8006f0a:	50a3      	str	r3, [r4, r2]
 8006f0c:	e7b3      	b.n	8006e76 <_malloc_r+0x22>
 8006f0e:	6862      	ldr	r2, [r4, #4]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	bf0c      	ite	eq
 8006f14:	6032      	streq	r2, [r6, #0]
 8006f16:	605a      	strne	r2, [r3, #4]
 8006f18:	e7ec      	b.n	8006ef4 <_malloc_r+0xa0>
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	6864      	ldr	r4, [r4, #4]
 8006f1e:	e7b2      	b.n	8006e86 <_malloc_r+0x32>
 8006f20:	4634      	mov	r4, r6
 8006f22:	6876      	ldr	r6, [r6, #4]
 8006f24:	e7b9      	b.n	8006e9a <_malloc_r+0x46>
 8006f26:	230c      	movs	r3, #12
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f000 f84c 	bl	8006fc8 <__malloc_unlock>
 8006f30:	e7a1      	b.n	8006e76 <_malloc_r+0x22>
 8006f32:	6025      	str	r5, [r4, #0]
 8006f34:	e7de      	b.n	8006ef4 <_malloc_r+0xa0>
 8006f36:	bf00      	nop
 8006f38:	20000cd8 	.word	0x20000cd8

08006f3c <_realloc_r>:
 8006f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f40:	4680      	mov	r8, r0
 8006f42:	4614      	mov	r4, r2
 8006f44:	460e      	mov	r6, r1
 8006f46:	b921      	cbnz	r1, 8006f52 <_realloc_r+0x16>
 8006f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	f7ff bf81 	b.w	8006e54 <_malloc_r>
 8006f52:	b92a      	cbnz	r2, 8006f60 <_realloc_r+0x24>
 8006f54:	f7ff ff12 	bl	8006d7c <_free_r>
 8006f58:	4625      	mov	r5, r4
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f60:	f000 f838 	bl	8006fd4 <_malloc_usable_size_r>
 8006f64:	4284      	cmp	r4, r0
 8006f66:	4607      	mov	r7, r0
 8006f68:	d802      	bhi.n	8006f70 <_realloc_r+0x34>
 8006f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f6e:	d812      	bhi.n	8006f96 <_realloc_r+0x5a>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4640      	mov	r0, r8
 8006f74:	f7ff ff6e 	bl	8006e54 <_malloc_r>
 8006f78:	4605      	mov	r5, r0
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d0ed      	beq.n	8006f5a <_realloc_r+0x1e>
 8006f7e:	42bc      	cmp	r4, r7
 8006f80:	4622      	mov	r2, r4
 8006f82:	4631      	mov	r1, r6
 8006f84:	bf28      	it	cs
 8006f86:	463a      	movcs	r2, r7
 8006f88:	f7ff fba4 	bl	80066d4 <memcpy>
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4640      	mov	r0, r8
 8006f90:	f7ff fef4 	bl	8006d7c <_free_r>
 8006f94:	e7e1      	b.n	8006f5a <_realloc_r+0x1e>
 8006f96:	4635      	mov	r5, r6
 8006f98:	e7df      	b.n	8006f5a <_realloc_r+0x1e>
	...

08006f9c <_sbrk_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d06      	ldr	r5, [pc, #24]	; (8006fb8 <_sbrk_r+0x1c>)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	f7fb fecc 	bl	8002d44 <_sbrk>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_sbrk_r+0x1a>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_sbrk_r+0x1a>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20000ce0 	.word	0x20000ce0

08006fbc <__malloc_lock>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__malloc_lock+0x8>)
 8006fbe:	f000 b811 	b.w	8006fe4 <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	20000ce4 	.word	0x20000ce4

08006fc8 <__malloc_unlock>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__malloc_unlock+0x8>)
 8006fca:	f000 b80c 	b.w	8006fe6 <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	20000ce4 	.word	0x20000ce4

08006fd4 <_malloc_usable_size_r>:
 8006fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd8:	1f18      	subs	r0, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfbc      	itt	lt
 8006fde:	580b      	ldrlt	r3, [r1, r0]
 8006fe0:	18c0      	addlt	r0, r0, r3
 8006fe2:	4770      	bx	lr

08006fe4 <__retarget_lock_acquire_recursive>:
 8006fe4:	4770      	bx	lr

08006fe6 <__retarget_lock_release_recursive>:
 8006fe6:	4770      	bx	lr

08006fe8 <cos>:
 8006fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fea:	ec53 2b10 	vmov	r2, r3, d0
 8006fee:	4826      	ldr	r0, [pc, #152]	; (8007088 <cos+0xa0>)
 8006ff0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ff4:	4281      	cmp	r1, r0
 8006ff6:	dc06      	bgt.n	8007006 <cos+0x1e>
 8006ff8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007080 <cos+0x98>
 8006ffc:	b005      	add	sp, #20
 8006ffe:	f85d eb04 	ldr.w	lr, [sp], #4
 8007002:	f000 baa9 	b.w	8007558 <__kernel_cos>
 8007006:	4821      	ldr	r0, [pc, #132]	; (800708c <cos+0xa4>)
 8007008:	4281      	cmp	r1, r0
 800700a:	dd09      	ble.n	8007020 <cos+0x38>
 800700c:	ee10 0a10 	vmov	r0, s0
 8007010:	4619      	mov	r1, r3
 8007012:	f7f9 f951 	bl	80002b8 <__aeabi_dsub>
 8007016:	ec41 0b10 	vmov	d0, r0, r1
 800701a:	b005      	add	sp, #20
 800701c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007020:	4668      	mov	r0, sp
 8007022:	f000 f88d 	bl	8007140 <__ieee754_rem_pio2>
 8007026:	f000 0003 	and.w	r0, r0, #3
 800702a:	2801      	cmp	r0, #1
 800702c:	d00b      	beq.n	8007046 <cos+0x5e>
 800702e:	2802      	cmp	r0, #2
 8007030:	d016      	beq.n	8007060 <cos+0x78>
 8007032:	b9e0      	cbnz	r0, 800706e <cos+0x86>
 8007034:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007038:	ed9d 0b00 	vldr	d0, [sp]
 800703c:	f000 fa8c 	bl	8007558 <__kernel_cos>
 8007040:	ec51 0b10 	vmov	r0, r1, d0
 8007044:	e7e7      	b.n	8007016 <cos+0x2e>
 8007046:	ed9d 1b02 	vldr	d1, [sp, #8]
 800704a:	ed9d 0b00 	vldr	d0, [sp]
 800704e:	f000 fe9b 	bl	8007d88 <__kernel_sin>
 8007052:	ec53 2b10 	vmov	r2, r3, d0
 8007056:	ee10 0a10 	vmov	r0, s0
 800705a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800705e:	e7da      	b.n	8007016 <cos+0x2e>
 8007060:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007064:	ed9d 0b00 	vldr	d0, [sp]
 8007068:	f000 fa76 	bl	8007558 <__kernel_cos>
 800706c:	e7f1      	b.n	8007052 <cos+0x6a>
 800706e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007072:	ed9d 0b00 	vldr	d0, [sp]
 8007076:	2001      	movs	r0, #1
 8007078:	f000 fe86 	bl	8007d88 <__kernel_sin>
 800707c:	e7e0      	b.n	8007040 <cos+0x58>
 800707e:	bf00      	nop
	...
 8007088:	3fe921fb 	.word	0x3fe921fb
 800708c:	7fefffff 	.word	0x7fefffff

08007090 <sin>:
 8007090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007092:	ec53 2b10 	vmov	r2, r3, d0
 8007096:	4828      	ldr	r0, [pc, #160]	; (8007138 <sin+0xa8>)
 8007098:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800709c:	4281      	cmp	r1, r0
 800709e:	dc07      	bgt.n	80070b0 <sin+0x20>
 80070a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007130 <sin+0xa0>
 80070a4:	2000      	movs	r0, #0
 80070a6:	b005      	add	sp, #20
 80070a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ac:	f000 be6c 	b.w	8007d88 <__kernel_sin>
 80070b0:	4822      	ldr	r0, [pc, #136]	; (800713c <sin+0xac>)
 80070b2:	4281      	cmp	r1, r0
 80070b4:	dd09      	ble.n	80070ca <sin+0x3a>
 80070b6:	ee10 0a10 	vmov	r0, s0
 80070ba:	4619      	mov	r1, r3
 80070bc:	f7f9 f8fc 	bl	80002b8 <__aeabi_dsub>
 80070c0:	ec41 0b10 	vmov	d0, r0, r1
 80070c4:	b005      	add	sp, #20
 80070c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80070ca:	4668      	mov	r0, sp
 80070cc:	f000 f838 	bl	8007140 <__ieee754_rem_pio2>
 80070d0:	f000 0003 	and.w	r0, r0, #3
 80070d4:	2801      	cmp	r0, #1
 80070d6:	d00c      	beq.n	80070f2 <sin+0x62>
 80070d8:	2802      	cmp	r0, #2
 80070da:	d011      	beq.n	8007100 <sin+0x70>
 80070dc:	b9f0      	cbnz	r0, 800711c <sin+0x8c>
 80070de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070e2:	ed9d 0b00 	vldr	d0, [sp]
 80070e6:	2001      	movs	r0, #1
 80070e8:	f000 fe4e 	bl	8007d88 <__kernel_sin>
 80070ec:	ec51 0b10 	vmov	r0, r1, d0
 80070f0:	e7e6      	b.n	80070c0 <sin+0x30>
 80070f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070f6:	ed9d 0b00 	vldr	d0, [sp]
 80070fa:	f000 fa2d 	bl	8007558 <__kernel_cos>
 80070fe:	e7f5      	b.n	80070ec <sin+0x5c>
 8007100:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007104:	ed9d 0b00 	vldr	d0, [sp]
 8007108:	2001      	movs	r0, #1
 800710a:	f000 fe3d 	bl	8007d88 <__kernel_sin>
 800710e:	ec53 2b10 	vmov	r2, r3, d0
 8007112:	ee10 0a10 	vmov	r0, s0
 8007116:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800711a:	e7d1      	b.n	80070c0 <sin+0x30>
 800711c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007120:	ed9d 0b00 	vldr	d0, [sp]
 8007124:	f000 fa18 	bl	8007558 <__kernel_cos>
 8007128:	e7f1      	b.n	800710e <sin+0x7e>
 800712a:	bf00      	nop
 800712c:	f3af 8000 	nop.w
	...
 8007138:	3fe921fb 	.word	0x3fe921fb
 800713c:	7fefffff 	.word	0x7fefffff

08007140 <__ieee754_rem_pio2>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b02 	vpush	{d8}
 8007148:	ec55 4b10 	vmov	r4, r5, d0
 800714c:	4bca      	ldr	r3, [pc, #808]	; (8007478 <__ieee754_rem_pio2+0x338>)
 800714e:	b08b      	sub	sp, #44	; 0x2c
 8007150:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007154:	4598      	cmp	r8, r3
 8007156:	4682      	mov	sl, r0
 8007158:	9502      	str	r5, [sp, #8]
 800715a:	dc08      	bgt.n	800716e <__ieee754_rem_pio2+0x2e>
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	ed80 0b00 	vstr	d0, [r0]
 8007164:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007168:	f04f 0b00 	mov.w	fp, #0
 800716c:	e028      	b.n	80071c0 <__ieee754_rem_pio2+0x80>
 800716e:	4bc3      	ldr	r3, [pc, #780]	; (800747c <__ieee754_rem_pio2+0x33c>)
 8007170:	4598      	cmp	r8, r3
 8007172:	dc78      	bgt.n	8007266 <__ieee754_rem_pio2+0x126>
 8007174:	9b02      	ldr	r3, [sp, #8]
 8007176:	4ec2      	ldr	r6, [pc, #776]	; (8007480 <__ieee754_rem_pio2+0x340>)
 8007178:	2b00      	cmp	r3, #0
 800717a:	ee10 0a10 	vmov	r0, s0
 800717e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007440 <__ieee754_rem_pio2+0x300>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	4629      	mov	r1, r5
 8007186:	dd39      	ble.n	80071fc <__ieee754_rem_pio2+0xbc>
 8007188:	f7f9 f896 	bl	80002b8 <__aeabi_dsub>
 800718c:	45b0      	cmp	r8, r6
 800718e:	4604      	mov	r4, r0
 8007190:	460d      	mov	r5, r1
 8007192:	d01b      	beq.n	80071cc <__ieee754_rem_pio2+0x8c>
 8007194:	a3ac      	add	r3, pc, #688	; (adr r3, 8007448 <__ieee754_rem_pio2+0x308>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f9 f88d 	bl	80002b8 <__aeabi_dsub>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	e9ca 2300 	strd	r2, r3, [sl]
 80071a6:	4620      	mov	r0, r4
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7f9 f885 	bl	80002b8 <__aeabi_dsub>
 80071ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8007448 <__ieee754_rem_pio2+0x308>)
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f7f9 f880 	bl	80002b8 <__aeabi_dsub>
 80071b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071bc:	f04f 0b01 	mov.w	fp, #1
 80071c0:	4658      	mov	r0, fp
 80071c2:	b00b      	add	sp, #44	; 0x2c
 80071c4:	ecbd 8b02 	vpop	{d8}
 80071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007450 <__ieee754_rem_pio2+0x310>)
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f7f9 f871 	bl	80002b8 <__aeabi_dsub>
 80071d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007458 <__ieee754_rem_pio2+0x318>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	f7f9 f86a 	bl	80002b8 <__aeabi_dsub>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	e9ca 2300 	strd	r2, r3, [sl]
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 f862 	bl	80002b8 <__aeabi_dsub>
 80071f4:	a398      	add	r3, pc, #608	; (adr r3, 8007458 <__ieee754_rem_pio2+0x318>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	e7db      	b.n	80071b4 <__ieee754_rem_pio2+0x74>
 80071fc:	f7f9 f85e 	bl	80002bc <__adddf3>
 8007200:	45b0      	cmp	r8, r6
 8007202:	4604      	mov	r4, r0
 8007204:	460d      	mov	r5, r1
 8007206:	d016      	beq.n	8007236 <__ieee754_rem_pio2+0xf6>
 8007208:	a38f      	add	r3, pc, #572	; (adr r3, 8007448 <__ieee754_rem_pio2+0x308>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f7f9 f855 	bl	80002bc <__adddf3>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	e9ca 2300 	strd	r2, r3, [sl]
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 f84b 	bl	80002b8 <__aeabi_dsub>
 8007222:	a389      	add	r3, pc, #548	; (adr r3, 8007448 <__ieee754_rem_pio2+0x308>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f9 f848 	bl	80002bc <__adddf3>
 800722c:	f04f 3bff 	mov.w	fp, #4294967295
 8007230:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007234:	e7c4      	b.n	80071c0 <__ieee754_rem_pio2+0x80>
 8007236:	a386      	add	r3, pc, #536	; (adr r3, 8007450 <__ieee754_rem_pio2+0x310>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f9 f83e 	bl	80002bc <__adddf3>
 8007240:	a385      	add	r3, pc, #532	; (adr r3, 8007458 <__ieee754_rem_pio2+0x318>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	4604      	mov	r4, r0
 8007248:	460d      	mov	r5, r1
 800724a:	f7f9 f837 	bl	80002bc <__adddf3>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	e9ca 2300 	strd	r2, r3, [sl]
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 f82d 	bl	80002b8 <__aeabi_dsub>
 800725e:	a37e      	add	r3, pc, #504	; (adr r3, 8007458 <__ieee754_rem_pio2+0x318>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	e7e0      	b.n	8007228 <__ieee754_rem_pio2+0xe8>
 8007266:	4b87      	ldr	r3, [pc, #540]	; (8007484 <__ieee754_rem_pio2+0x344>)
 8007268:	4598      	cmp	r8, r3
 800726a:	f300 80d9 	bgt.w	8007420 <__ieee754_rem_pio2+0x2e0>
 800726e:	f000 fe49 	bl	8007f04 <fabs>
 8007272:	ec55 4b10 	vmov	r4, r5, d0
 8007276:	ee10 0a10 	vmov	r0, s0
 800727a:	a379      	add	r3, pc, #484	; (adr r3, 8007460 <__ieee754_rem_pio2+0x320>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	4629      	mov	r1, r5
 8007282:	f7f9 f9d1 	bl	8000628 <__aeabi_dmul>
 8007286:	4b80      	ldr	r3, [pc, #512]	; (8007488 <__ieee754_rem_pio2+0x348>)
 8007288:	2200      	movs	r2, #0
 800728a:	f7f9 f817 	bl	80002bc <__adddf3>
 800728e:	f7f9 fc65 	bl	8000b5c <__aeabi_d2iz>
 8007292:	4683      	mov	fp, r0
 8007294:	f7f9 f95e 	bl	8000554 <__aeabi_i2d>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	ec43 2b18 	vmov	d8, r2, r3
 80072a0:	a367      	add	r3, pc, #412	; (adr r3, 8007440 <__ieee754_rem_pio2+0x300>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f9 f9bf 	bl	8000628 <__aeabi_dmul>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f9 f801 	bl	80002b8 <__aeabi_dsub>
 80072b6:	a364      	add	r3, pc, #400	; (adr r3, 8007448 <__ieee754_rem_pio2+0x308>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	ec51 0b18 	vmov	r0, r1, d8
 80072c4:	f7f9 f9b0 	bl	8000628 <__aeabi_dmul>
 80072c8:	f1bb 0f1f 	cmp.w	fp, #31
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	dc0d      	bgt.n	80072ee <__ieee754_rem_pio2+0x1ae>
 80072d2:	4b6e      	ldr	r3, [pc, #440]	; (800748c <__ieee754_rem_pio2+0x34c>)
 80072d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	4543      	cmp	r3, r8
 80072de:	d006      	beq.n	80072ee <__ieee754_rem_pio2+0x1ae>
 80072e0:	4622      	mov	r2, r4
 80072e2:	462b      	mov	r3, r5
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f8 ffe6 	bl	80002b8 <__aeabi_dsub>
 80072ec:	e00f      	b.n	800730e <__ieee754_rem_pio2+0x1ce>
 80072ee:	462b      	mov	r3, r5
 80072f0:	4622      	mov	r2, r4
 80072f2:	4630      	mov	r0, r6
 80072f4:	4639      	mov	r1, r7
 80072f6:	f7f8 ffdf 	bl	80002b8 <__aeabi_dsub>
 80072fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007304:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007308:	f1b8 0f10 	cmp.w	r8, #16
 800730c:	dc02      	bgt.n	8007314 <__ieee754_rem_pio2+0x1d4>
 800730e:	e9ca 0100 	strd	r0, r1, [sl]
 8007312:	e039      	b.n	8007388 <__ieee754_rem_pio2+0x248>
 8007314:	a34e      	add	r3, pc, #312	; (adr r3, 8007450 <__ieee754_rem_pio2+0x310>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	ec51 0b18 	vmov	r0, r1, d8
 800731e:	f7f9 f983 	bl	8000628 <__aeabi_dmul>
 8007322:	4604      	mov	r4, r0
 8007324:	460d      	mov	r5, r1
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4630      	mov	r0, r6
 800732c:	4639      	mov	r1, r7
 800732e:	f7f8 ffc3 	bl	80002b8 <__aeabi_dsub>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4680      	mov	r8, r0
 8007338:	4689      	mov	r9, r1
 800733a:	4630      	mov	r0, r6
 800733c:	4639      	mov	r1, r7
 800733e:	f7f8 ffbb 	bl	80002b8 <__aeabi_dsub>
 8007342:	4622      	mov	r2, r4
 8007344:	462b      	mov	r3, r5
 8007346:	f7f8 ffb7 	bl	80002b8 <__aeabi_dsub>
 800734a:	a343      	add	r3, pc, #268	; (adr r3, 8007458 <__ieee754_rem_pio2+0x318>)
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	4604      	mov	r4, r0
 8007352:	460d      	mov	r5, r1
 8007354:	ec51 0b18 	vmov	r0, r1, d8
 8007358:	f7f9 f966 	bl	8000628 <__aeabi_dmul>
 800735c:	4622      	mov	r2, r4
 800735e:	462b      	mov	r3, r5
 8007360:	f7f8 ffaa 	bl	80002b8 <__aeabi_dsub>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4604      	mov	r4, r0
 800736a:	460d      	mov	r5, r1
 800736c:	4640      	mov	r0, r8
 800736e:	4649      	mov	r1, r9
 8007370:	f7f8 ffa2 	bl	80002b8 <__aeabi_dsub>
 8007374:	9a03      	ldr	r2, [sp, #12]
 8007376:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b31      	cmp	r3, #49	; 0x31
 800737e:	dc24      	bgt.n	80073ca <__ieee754_rem_pio2+0x28a>
 8007380:	e9ca 0100 	strd	r0, r1, [sl]
 8007384:	4646      	mov	r6, r8
 8007386:	464f      	mov	r7, r9
 8007388:	e9da 8900 	ldrd	r8, r9, [sl]
 800738c:	4630      	mov	r0, r6
 800738e:	4642      	mov	r2, r8
 8007390:	464b      	mov	r3, r9
 8007392:	4639      	mov	r1, r7
 8007394:	f7f8 ff90 	bl	80002b8 <__aeabi_dsub>
 8007398:	462b      	mov	r3, r5
 800739a:	4622      	mov	r2, r4
 800739c:	f7f8 ff8c 	bl	80002b8 <__aeabi_dsub>
 80073a0:	9b02      	ldr	r3, [sp, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80073a8:	f6bf af0a 	bge.w	80071c0 <__ieee754_rem_pio2+0x80>
 80073ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80073b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80073b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073b8:	f8ca 8000 	str.w	r8, [sl]
 80073bc:	f8ca 0008 	str.w	r0, [sl, #8]
 80073c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80073c4:	f1cb 0b00 	rsb	fp, fp, #0
 80073c8:	e6fa      	b.n	80071c0 <__ieee754_rem_pio2+0x80>
 80073ca:	a327      	add	r3, pc, #156	; (adr r3, 8007468 <__ieee754_rem_pio2+0x328>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	ec51 0b18 	vmov	r0, r1, d8
 80073d4:	f7f9 f928 	bl	8000628 <__aeabi_dmul>
 80073d8:	4604      	mov	r4, r0
 80073da:	460d      	mov	r5, r1
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4640      	mov	r0, r8
 80073e2:	4649      	mov	r1, r9
 80073e4:	f7f8 ff68 	bl	80002b8 <__aeabi_dsub>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4606      	mov	r6, r0
 80073ee:	460f      	mov	r7, r1
 80073f0:	4640      	mov	r0, r8
 80073f2:	4649      	mov	r1, r9
 80073f4:	f7f8 ff60 	bl	80002b8 <__aeabi_dsub>
 80073f8:	4622      	mov	r2, r4
 80073fa:	462b      	mov	r3, r5
 80073fc:	f7f8 ff5c 	bl	80002b8 <__aeabi_dsub>
 8007400:	a31b      	add	r3, pc, #108	; (adr r3, 8007470 <__ieee754_rem_pio2+0x330>)
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
 800740a:	ec51 0b18 	vmov	r0, r1, d8
 800740e:	f7f9 f90b 	bl	8000628 <__aeabi_dmul>
 8007412:	4622      	mov	r2, r4
 8007414:	462b      	mov	r3, r5
 8007416:	f7f8 ff4f 	bl	80002b8 <__aeabi_dsub>
 800741a:	4604      	mov	r4, r0
 800741c:	460d      	mov	r5, r1
 800741e:	e75f      	b.n	80072e0 <__ieee754_rem_pio2+0x1a0>
 8007420:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <__ieee754_rem_pio2+0x350>)
 8007422:	4598      	cmp	r8, r3
 8007424:	dd36      	ble.n	8007494 <__ieee754_rem_pio2+0x354>
 8007426:	ee10 2a10 	vmov	r2, s0
 800742a:	462b      	mov	r3, r5
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	f7f8 ff42 	bl	80002b8 <__aeabi_dsub>
 8007434:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007438:	e9ca 0100 	strd	r0, r1, [sl]
 800743c:	e694      	b.n	8007168 <__ieee754_rem_pio2+0x28>
 800743e:	bf00      	nop
 8007440:	54400000 	.word	0x54400000
 8007444:	3ff921fb 	.word	0x3ff921fb
 8007448:	1a626331 	.word	0x1a626331
 800744c:	3dd0b461 	.word	0x3dd0b461
 8007450:	1a600000 	.word	0x1a600000
 8007454:	3dd0b461 	.word	0x3dd0b461
 8007458:	2e037073 	.word	0x2e037073
 800745c:	3ba3198a 	.word	0x3ba3198a
 8007460:	6dc9c883 	.word	0x6dc9c883
 8007464:	3fe45f30 	.word	0x3fe45f30
 8007468:	2e000000 	.word	0x2e000000
 800746c:	3ba3198a 	.word	0x3ba3198a
 8007470:	252049c1 	.word	0x252049c1
 8007474:	397b839a 	.word	0x397b839a
 8007478:	3fe921fb 	.word	0x3fe921fb
 800747c:	4002d97b 	.word	0x4002d97b
 8007480:	3ff921fb 	.word	0x3ff921fb
 8007484:	413921fb 	.word	0x413921fb
 8007488:	3fe00000 	.word	0x3fe00000
 800748c:	0800c7e4 	.word	0x0800c7e4
 8007490:	7fefffff 	.word	0x7fefffff
 8007494:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007498:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800749c:	ee10 0a10 	vmov	r0, s0
 80074a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80074a4:	ee10 6a10 	vmov	r6, s0
 80074a8:	460f      	mov	r7, r1
 80074aa:	f7f9 fb57 	bl	8000b5c <__aeabi_d2iz>
 80074ae:	f7f9 f851 	bl	8000554 <__aeabi_i2d>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4630      	mov	r0, r6
 80074b8:	4639      	mov	r1, r7
 80074ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074be:	f7f8 fefb 	bl	80002b8 <__aeabi_dsub>
 80074c2:	4b23      	ldr	r3, [pc, #140]	; (8007550 <__ieee754_rem_pio2+0x410>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	f7f9 f8af 	bl	8000628 <__aeabi_dmul>
 80074ca:	460f      	mov	r7, r1
 80074cc:	4606      	mov	r6, r0
 80074ce:	f7f9 fb45 	bl	8000b5c <__aeabi_d2iz>
 80074d2:	f7f9 f83f 	bl	8000554 <__aeabi_i2d>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4630      	mov	r0, r6
 80074dc:	4639      	mov	r1, r7
 80074de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80074e2:	f7f8 fee9 	bl	80002b8 <__aeabi_dsub>
 80074e6:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <__ieee754_rem_pio2+0x410>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	f7f9 f89d 	bl	8000628 <__aeabi_dmul>
 80074ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80074f2:	ad04      	add	r5, sp, #16
 80074f4:	f04f 0803 	mov.w	r8, #3
 80074f8:	46a9      	mov	r9, r5
 80074fa:	2600      	movs	r6, #0
 80074fc:	2700      	movs	r7, #0
 80074fe:	4632      	mov	r2, r6
 8007500:	463b      	mov	r3, r7
 8007502:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007506:	46c3      	mov	fp, r8
 8007508:	3d08      	subs	r5, #8
 800750a:	f108 38ff 	add.w	r8, r8, #4294967295
 800750e:	f7f9 faf3 	bl	8000af8 <__aeabi_dcmpeq>
 8007512:	2800      	cmp	r0, #0
 8007514:	d1f3      	bne.n	80074fe <__ieee754_rem_pio2+0x3be>
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <__ieee754_rem_pio2+0x414>)
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	2302      	movs	r3, #2
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	4622      	mov	r2, r4
 8007520:	465b      	mov	r3, fp
 8007522:	4651      	mov	r1, sl
 8007524:	4648      	mov	r0, r9
 8007526:	f000 f8df 	bl	80076e8 <__kernel_rem_pio2>
 800752a:	9b02      	ldr	r3, [sp, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	4683      	mov	fp, r0
 8007530:	f6bf ae46 	bge.w	80071c0 <__ieee754_rem_pio2+0x80>
 8007534:	e9da 2100 	ldrd	r2, r1, [sl]
 8007538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800753c:	e9ca 2300 	strd	r2, r3, [sl]
 8007540:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007548:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800754c:	e73a      	b.n	80073c4 <__ieee754_rem_pio2+0x284>
 800754e:	bf00      	nop
 8007550:	41700000 	.word	0x41700000
 8007554:	0800c864 	.word	0x0800c864

08007558 <__kernel_cos>:
 8007558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	ec57 6b10 	vmov	r6, r7, d0
 8007560:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007564:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007568:	ed8d 1b00 	vstr	d1, [sp]
 800756c:	da07      	bge.n	800757e <__kernel_cos+0x26>
 800756e:	ee10 0a10 	vmov	r0, s0
 8007572:	4639      	mov	r1, r7
 8007574:	f7f9 faf2 	bl	8000b5c <__aeabi_d2iz>
 8007578:	2800      	cmp	r0, #0
 800757a:	f000 8088 	beq.w	800768e <__kernel_cos+0x136>
 800757e:	4632      	mov	r2, r6
 8007580:	463b      	mov	r3, r7
 8007582:	4630      	mov	r0, r6
 8007584:	4639      	mov	r1, r7
 8007586:	f7f9 f84f 	bl	8000628 <__aeabi_dmul>
 800758a:	4b51      	ldr	r3, [pc, #324]	; (80076d0 <__kernel_cos+0x178>)
 800758c:	2200      	movs	r2, #0
 800758e:	4604      	mov	r4, r0
 8007590:	460d      	mov	r5, r1
 8007592:	f7f9 f849 	bl	8000628 <__aeabi_dmul>
 8007596:	a340      	add	r3, pc, #256	; (adr r3, 8007698 <__kernel_cos+0x140>)
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	4682      	mov	sl, r0
 800759e:	468b      	mov	fp, r1
 80075a0:	4620      	mov	r0, r4
 80075a2:	4629      	mov	r1, r5
 80075a4:	f7f9 f840 	bl	8000628 <__aeabi_dmul>
 80075a8:	a33d      	add	r3, pc, #244	; (adr r3, 80076a0 <__kernel_cos+0x148>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f7f8 fe85 	bl	80002bc <__adddf3>
 80075b2:	4622      	mov	r2, r4
 80075b4:	462b      	mov	r3, r5
 80075b6:	f7f9 f837 	bl	8000628 <__aeabi_dmul>
 80075ba:	a33b      	add	r3, pc, #236	; (adr r3, 80076a8 <__kernel_cos+0x150>)
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	f7f8 fe7a 	bl	80002b8 <__aeabi_dsub>
 80075c4:	4622      	mov	r2, r4
 80075c6:	462b      	mov	r3, r5
 80075c8:	f7f9 f82e 	bl	8000628 <__aeabi_dmul>
 80075cc:	a338      	add	r3, pc, #224	; (adr r3, 80076b0 <__kernel_cos+0x158>)
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	f7f8 fe73 	bl	80002bc <__adddf3>
 80075d6:	4622      	mov	r2, r4
 80075d8:	462b      	mov	r3, r5
 80075da:	f7f9 f825 	bl	8000628 <__aeabi_dmul>
 80075de:	a336      	add	r3, pc, #216	; (adr r3, 80076b8 <__kernel_cos+0x160>)
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f7f8 fe68 	bl	80002b8 <__aeabi_dsub>
 80075e8:	4622      	mov	r2, r4
 80075ea:	462b      	mov	r3, r5
 80075ec:	f7f9 f81c 	bl	8000628 <__aeabi_dmul>
 80075f0:	a333      	add	r3, pc, #204	; (adr r3, 80076c0 <__kernel_cos+0x168>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f8 fe61 	bl	80002bc <__adddf3>
 80075fa:	4622      	mov	r2, r4
 80075fc:	462b      	mov	r3, r5
 80075fe:	f7f9 f813 	bl	8000628 <__aeabi_dmul>
 8007602:	4622      	mov	r2, r4
 8007604:	462b      	mov	r3, r5
 8007606:	f7f9 f80f 	bl	8000628 <__aeabi_dmul>
 800760a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800760e:	4604      	mov	r4, r0
 8007610:	460d      	mov	r5, r1
 8007612:	4630      	mov	r0, r6
 8007614:	4639      	mov	r1, r7
 8007616:	f7f9 f807 	bl	8000628 <__aeabi_dmul>
 800761a:	460b      	mov	r3, r1
 800761c:	4602      	mov	r2, r0
 800761e:	4629      	mov	r1, r5
 8007620:	4620      	mov	r0, r4
 8007622:	f7f8 fe49 	bl	80002b8 <__aeabi_dsub>
 8007626:	4b2b      	ldr	r3, [pc, #172]	; (80076d4 <__kernel_cos+0x17c>)
 8007628:	4598      	cmp	r8, r3
 800762a:	4606      	mov	r6, r0
 800762c:	460f      	mov	r7, r1
 800762e:	dc10      	bgt.n	8007652 <__kernel_cos+0xfa>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4650      	mov	r0, sl
 8007636:	4659      	mov	r1, fp
 8007638:	f7f8 fe3e 	bl	80002b8 <__aeabi_dsub>
 800763c:	460b      	mov	r3, r1
 800763e:	4926      	ldr	r1, [pc, #152]	; (80076d8 <__kernel_cos+0x180>)
 8007640:	4602      	mov	r2, r0
 8007642:	2000      	movs	r0, #0
 8007644:	f7f8 fe38 	bl	80002b8 <__aeabi_dsub>
 8007648:	ec41 0b10 	vmov	d0, r0, r1
 800764c:	b003      	add	sp, #12
 800764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007652:	4b22      	ldr	r3, [pc, #136]	; (80076dc <__kernel_cos+0x184>)
 8007654:	4920      	ldr	r1, [pc, #128]	; (80076d8 <__kernel_cos+0x180>)
 8007656:	4598      	cmp	r8, r3
 8007658:	bfcc      	ite	gt
 800765a:	4d21      	ldrgt	r5, [pc, #132]	; (80076e0 <__kernel_cos+0x188>)
 800765c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007660:	2400      	movs	r4, #0
 8007662:	4622      	mov	r2, r4
 8007664:	462b      	mov	r3, r5
 8007666:	2000      	movs	r0, #0
 8007668:	f7f8 fe26 	bl	80002b8 <__aeabi_dsub>
 800766c:	4622      	mov	r2, r4
 800766e:	4680      	mov	r8, r0
 8007670:	4689      	mov	r9, r1
 8007672:	462b      	mov	r3, r5
 8007674:	4650      	mov	r0, sl
 8007676:	4659      	mov	r1, fp
 8007678:	f7f8 fe1e 	bl	80002b8 <__aeabi_dsub>
 800767c:	4632      	mov	r2, r6
 800767e:	463b      	mov	r3, r7
 8007680:	f7f8 fe1a 	bl	80002b8 <__aeabi_dsub>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4640      	mov	r0, r8
 800768a:	4649      	mov	r1, r9
 800768c:	e7da      	b.n	8007644 <__kernel_cos+0xec>
 800768e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80076c8 <__kernel_cos+0x170>
 8007692:	e7db      	b.n	800764c <__kernel_cos+0xf4>
 8007694:	f3af 8000 	nop.w
 8007698:	be8838d4 	.word	0xbe8838d4
 800769c:	bda8fae9 	.word	0xbda8fae9
 80076a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80076a4:	3e21ee9e 	.word	0x3e21ee9e
 80076a8:	809c52ad 	.word	0x809c52ad
 80076ac:	3e927e4f 	.word	0x3e927e4f
 80076b0:	19cb1590 	.word	0x19cb1590
 80076b4:	3efa01a0 	.word	0x3efa01a0
 80076b8:	16c15177 	.word	0x16c15177
 80076bc:	3f56c16c 	.word	0x3f56c16c
 80076c0:	5555554c 	.word	0x5555554c
 80076c4:	3fa55555 	.word	0x3fa55555
 80076c8:	00000000 	.word	0x00000000
 80076cc:	3ff00000 	.word	0x3ff00000
 80076d0:	3fe00000 	.word	0x3fe00000
 80076d4:	3fd33332 	.word	0x3fd33332
 80076d8:	3ff00000 	.word	0x3ff00000
 80076dc:	3fe90000 	.word	0x3fe90000
 80076e0:	3fd20000 	.word	0x3fd20000
 80076e4:	00000000 	.word	0x00000000

080076e8 <__kernel_rem_pio2>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	ed2d 8b02 	vpush	{d8}
 80076f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80076f4:	f112 0f14 	cmn.w	r2, #20
 80076f8:	9308      	str	r3, [sp, #32]
 80076fa:	9101      	str	r1, [sp, #4]
 80076fc:	4bc4      	ldr	r3, [pc, #784]	; (8007a10 <__kernel_rem_pio2+0x328>)
 80076fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007700:	900b      	str	r0, [sp, #44]	; 0x2c
 8007702:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007706:	9302      	str	r3, [sp, #8]
 8007708:	9b08      	ldr	r3, [sp, #32]
 800770a:	f103 33ff 	add.w	r3, r3, #4294967295
 800770e:	bfa8      	it	ge
 8007710:	1ed4      	subge	r4, r2, #3
 8007712:	9306      	str	r3, [sp, #24]
 8007714:	bfb2      	itee	lt
 8007716:	2400      	movlt	r4, #0
 8007718:	2318      	movge	r3, #24
 800771a:	fb94 f4f3 	sdivge	r4, r4, r3
 800771e:	f06f 0317 	mvn.w	r3, #23
 8007722:	fb04 3303 	mla	r3, r4, r3, r3
 8007726:	eb03 0a02 	add.w	sl, r3, r2
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	9a06      	ldr	r2, [sp, #24]
 800772e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007a00 <__kernel_rem_pio2+0x318>
 8007732:	eb03 0802 	add.w	r8, r3, r2
 8007736:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007738:	1aa7      	subs	r7, r4, r2
 800773a:	ae22      	add	r6, sp, #136	; 0x88
 800773c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007740:	2500      	movs	r5, #0
 8007742:	4545      	cmp	r5, r8
 8007744:	dd13      	ble.n	800776e <__kernel_rem_pio2+0x86>
 8007746:	9b08      	ldr	r3, [sp, #32]
 8007748:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007a00 <__kernel_rem_pio2+0x318>
 800774c:	aa22      	add	r2, sp, #136	; 0x88
 800774e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007752:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	9b02      	ldr	r3, [sp, #8]
 800775c:	4598      	cmp	r8, r3
 800775e:	dc2f      	bgt.n	80077c0 <__kernel_rem_pio2+0xd8>
 8007760:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007764:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007768:	462f      	mov	r7, r5
 800776a:	2600      	movs	r6, #0
 800776c:	e01b      	b.n	80077a6 <__kernel_rem_pio2+0xbe>
 800776e:	42ef      	cmn	r7, r5
 8007770:	d407      	bmi.n	8007782 <__kernel_rem_pio2+0x9a>
 8007772:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007776:	f7f8 feed 	bl	8000554 <__aeabi_i2d>
 800777a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800777e:	3501      	adds	r5, #1
 8007780:	e7df      	b.n	8007742 <__kernel_rem_pio2+0x5a>
 8007782:	ec51 0b18 	vmov	r0, r1, d8
 8007786:	e7f8      	b.n	800777a <__kernel_rem_pio2+0x92>
 8007788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800778c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007790:	f7f8 ff4a 	bl	8000628 <__aeabi_dmul>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800779c:	f7f8 fd8e 	bl	80002bc <__adddf3>
 80077a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a4:	3601      	adds	r6, #1
 80077a6:	9b06      	ldr	r3, [sp, #24]
 80077a8:	429e      	cmp	r6, r3
 80077aa:	f1a7 0708 	sub.w	r7, r7, #8
 80077ae:	ddeb      	ble.n	8007788 <__kernel_rem_pio2+0xa0>
 80077b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80077b4:	f108 0801 	add.w	r8, r8, #1
 80077b8:	ecab 7b02 	vstmia	fp!, {d7}
 80077bc:	3508      	adds	r5, #8
 80077be:	e7cc      	b.n	800775a <__kernel_rem_pio2+0x72>
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	aa0e      	add	r2, sp, #56	; 0x38
 80077c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077c8:	930d      	str	r3, [sp, #52]	; 0x34
 80077ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80077cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80077d0:	9c02      	ldr	r4, [sp, #8]
 80077d2:	930c      	str	r3, [sp, #48]	; 0x30
 80077d4:	00e3      	lsls	r3, r4, #3
 80077d6:	930a      	str	r3, [sp, #40]	; 0x28
 80077d8:	ab9a      	add	r3, sp, #616	; 0x268
 80077da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80077e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80077e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80077e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80077ec:	46c3      	mov	fp, r8
 80077ee:	46a1      	mov	r9, r4
 80077f0:	f1b9 0f00 	cmp.w	r9, #0
 80077f4:	f1a5 0508 	sub.w	r5, r5, #8
 80077f8:	dc77      	bgt.n	80078ea <__kernel_rem_pio2+0x202>
 80077fa:	ec47 6b10 	vmov	d0, r6, r7
 80077fe:	4650      	mov	r0, sl
 8007800:	f000 fc0a 	bl	8008018 <scalbn>
 8007804:	ec57 6b10 	vmov	r6, r7, d0
 8007808:	2200      	movs	r2, #0
 800780a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800780e:	ee10 0a10 	vmov	r0, s0
 8007812:	4639      	mov	r1, r7
 8007814:	f7f8 ff08 	bl	8000628 <__aeabi_dmul>
 8007818:	ec41 0b10 	vmov	d0, r0, r1
 800781c:	f000 fb7c 	bl	8007f18 <floor>
 8007820:	4b7c      	ldr	r3, [pc, #496]	; (8007a14 <__kernel_rem_pio2+0x32c>)
 8007822:	ec51 0b10 	vmov	r0, r1, d0
 8007826:	2200      	movs	r2, #0
 8007828:	f7f8 fefe 	bl	8000628 <__aeabi_dmul>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4630      	mov	r0, r6
 8007832:	4639      	mov	r1, r7
 8007834:	f7f8 fd40 	bl	80002b8 <__aeabi_dsub>
 8007838:	460f      	mov	r7, r1
 800783a:	4606      	mov	r6, r0
 800783c:	f7f9 f98e 	bl	8000b5c <__aeabi_d2iz>
 8007840:	9004      	str	r0, [sp, #16]
 8007842:	f7f8 fe87 	bl	8000554 <__aeabi_i2d>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4630      	mov	r0, r6
 800784c:	4639      	mov	r1, r7
 800784e:	f7f8 fd33 	bl	80002b8 <__aeabi_dsub>
 8007852:	f1ba 0f00 	cmp.w	sl, #0
 8007856:	4606      	mov	r6, r0
 8007858:	460f      	mov	r7, r1
 800785a:	dd6d      	ble.n	8007938 <__kernel_rem_pio2+0x250>
 800785c:	1e62      	subs	r2, r4, #1
 800785e:	ab0e      	add	r3, sp, #56	; 0x38
 8007860:	9d04      	ldr	r5, [sp, #16]
 8007862:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007866:	f1ca 0118 	rsb	r1, sl, #24
 800786a:	fa40 f301 	asr.w	r3, r0, r1
 800786e:	441d      	add	r5, r3
 8007870:	408b      	lsls	r3, r1
 8007872:	1ac0      	subs	r0, r0, r3
 8007874:	ab0e      	add	r3, sp, #56	; 0x38
 8007876:	9504      	str	r5, [sp, #16]
 8007878:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800787c:	f1ca 0317 	rsb	r3, sl, #23
 8007880:	fa40 fb03 	asr.w	fp, r0, r3
 8007884:	f1bb 0f00 	cmp.w	fp, #0
 8007888:	dd65      	ble.n	8007956 <__kernel_rem_pio2+0x26e>
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	2200      	movs	r2, #0
 800788e:	3301      	adds	r3, #1
 8007890:	9304      	str	r3, [sp, #16]
 8007892:	4615      	mov	r5, r2
 8007894:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007898:	4294      	cmp	r4, r2
 800789a:	f300 809c 	bgt.w	80079d6 <__kernel_rem_pio2+0x2ee>
 800789e:	f1ba 0f00 	cmp.w	sl, #0
 80078a2:	dd07      	ble.n	80078b4 <__kernel_rem_pio2+0x1cc>
 80078a4:	f1ba 0f01 	cmp.w	sl, #1
 80078a8:	f000 80c0 	beq.w	8007a2c <__kernel_rem_pio2+0x344>
 80078ac:	f1ba 0f02 	cmp.w	sl, #2
 80078b0:	f000 80c6 	beq.w	8007a40 <__kernel_rem_pio2+0x358>
 80078b4:	f1bb 0f02 	cmp.w	fp, #2
 80078b8:	d14d      	bne.n	8007956 <__kernel_rem_pio2+0x26e>
 80078ba:	4632      	mov	r2, r6
 80078bc:	463b      	mov	r3, r7
 80078be:	4956      	ldr	r1, [pc, #344]	; (8007a18 <__kernel_rem_pio2+0x330>)
 80078c0:	2000      	movs	r0, #0
 80078c2:	f7f8 fcf9 	bl	80002b8 <__aeabi_dsub>
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	d043      	beq.n	8007956 <__kernel_rem_pio2+0x26e>
 80078ce:	4650      	mov	r0, sl
 80078d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007a08 <__kernel_rem_pio2+0x320>
 80078d4:	f000 fba0 	bl	8008018 <scalbn>
 80078d8:	4630      	mov	r0, r6
 80078da:	4639      	mov	r1, r7
 80078dc:	ec53 2b10 	vmov	r2, r3, d0
 80078e0:	f7f8 fcea 	bl	80002b8 <__aeabi_dsub>
 80078e4:	4606      	mov	r6, r0
 80078e6:	460f      	mov	r7, r1
 80078e8:	e035      	b.n	8007956 <__kernel_rem_pio2+0x26e>
 80078ea:	4b4c      	ldr	r3, [pc, #304]	; (8007a1c <__kernel_rem_pio2+0x334>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	4630      	mov	r0, r6
 80078f0:	4639      	mov	r1, r7
 80078f2:	f7f8 fe99 	bl	8000628 <__aeabi_dmul>
 80078f6:	f7f9 f931 	bl	8000b5c <__aeabi_d2iz>
 80078fa:	f7f8 fe2b 	bl	8000554 <__aeabi_i2d>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	ec43 2b18 	vmov	d8, r2, r3
 8007906:	4b46      	ldr	r3, [pc, #280]	; (8007a20 <__kernel_rem_pio2+0x338>)
 8007908:	2200      	movs	r2, #0
 800790a:	f7f8 fe8d 	bl	8000628 <__aeabi_dmul>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4630      	mov	r0, r6
 8007914:	4639      	mov	r1, r7
 8007916:	f7f8 fccf 	bl	80002b8 <__aeabi_dsub>
 800791a:	f7f9 f91f 	bl	8000b5c <__aeabi_d2iz>
 800791e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007922:	f84b 0b04 	str.w	r0, [fp], #4
 8007926:	ec51 0b18 	vmov	r0, r1, d8
 800792a:	f7f8 fcc7 	bl	80002bc <__adddf3>
 800792e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007932:	4606      	mov	r6, r0
 8007934:	460f      	mov	r7, r1
 8007936:	e75b      	b.n	80077f0 <__kernel_rem_pio2+0x108>
 8007938:	d106      	bne.n	8007948 <__kernel_rem_pio2+0x260>
 800793a:	1e63      	subs	r3, r4, #1
 800793c:	aa0e      	add	r2, sp, #56	; 0x38
 800793e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007942:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007946:	e79d      	b.n	8007884 <__kernel_rem_pio2+0x19c>
 8007948:	4b36      	ldr	r3, [pc, #216]	; (8007a24 <__kernel_rem_pio2+0x33c>)
 800794a:	2200      	movs	r2, #0
 800794c:	f7f9 f8f2 	bl	8000b34 <__aeabi_dcmpge>
 8007950:	2800      	cmp	r0, #0
 8007952:	d13d      	bne.n	80079d0 <__kernel_rem_pio2+0x2e8>
 8007954:	4683      	mov	fp, r0
 8007956:	2200      	movs	r2, #0
 8007958:	2300      	movs	r3, #0
 800795a:	4630      	mov	r0, r6
 800795c:	4639      	mov	r1, r7
 800795e:	f7f9 f8cb 	bl	8000af8 <__aeabi_dcmpeq>
 8007962:	2800      	cmp	r0, #0
 8007964:	f000 80c0 	beq.w	8007ae8 <__kernel_rem_pio2+0x400>
 8007968:	1e65      	subs	r5, r4, #1
 800796a:	462b      	mov	r3, r5
 800796c:	2200      	movs	r2, #0
 800796e:	9902      	ldr	r1, [sp, #8]
 8007970:	428b      	cmp	r3, r1
 8007972:	da6c      	bge.n	8007a4e <__kernel_rem_pio2+0x366>
 8007974:	2a00      	cmp	r2, #0
 8007976:	f000 8089 	beq.w	8007a8c <__kernel_rem_pio2+0x3a4>
 800797a:	ab0e      	add	r3, sp, #56	; 0x38
 800797c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007980:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 80ad 	beq.w	8007ae4 <__kernel_rem_pio2+0x3fc>
 800798a:	4650      	mov	r0, sl
 800798c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007a08 <__kernel_rem_pio2+0x320>
 8007990:	f000 fb42 	bl	8008018 <scalbn>
 8007994:	ab9a      	add	r3, sp, #616	; 0x268
 8007996:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800799a:	ec57 6b10 	vmov	r6, r7, d0
 800799e:	00ec      	lsls	r4, r5, #3
 80079a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80079a4:	46aa      	mov	sl, r5
 80079a6:	f1ba 0f00 	cmp.w	sl, #0
 80079aa:	f280 80d6 	bge.w	8007b5a <__kernel_rem_pio2+0x472>
 80079ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007a00 <__kernel_rem_pio2+0x318>
 80079b2:	462e      	mov	r6, r5
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	f2c0 8104 	blt.w	8007bc2 <__kernel_rem_pio2+0x4da>
 80079ba:	ab72      	add	r3, sp, #456	; 0x1c8
 80079bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80079c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007a28 <__kernel_rem_pio2+0x340>
 80079c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80079c8:	f04f 0800 	mov.w	r8, #0
 80079cc:	1baf      	subs	r7, r5, r6
 80079ce:	e0ea      	b.n	8007ba6 <__kernel_rem_pio2+0x4be>
 80079d0:	f04f 0b02 	mov.w	fp, #2
 80079d4:	e759      	b.n	800788a <__kernel_rem_pio2+0x1a2>
 80079d6:	f8d8 3000 	ldr.w	r3, [r8]
 80079da:	b955      	cbnz	r5, 80079f2 <__kernel_rem_pio2+0x30a>
 80079dc:	b123      	cbz	r3, 80079e8 <__kernel_rem_pio2+0x300>
 80079de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80079e2:	f8c8 3000 	str.w	r3, [r8]
 80079e6:	2301      	movs	r3, #1
 80079e8:	3201      	adds	r2, #1
 80079ea:	f108 0804 	add.w	r8, r8, #4
 80079ee:	461d      	mov	r5, r3
 80079f0:	e752      	b.n	8007898 <__kernel_rem_pio2+0x1b0>
 80079f2:	1acb      	subs	r3, r1, r3
 80079f4:	f8c8 3000 	str.w	r3, [r8]
 80079f8:	462b      	mov	r3, r5
 80079fa:	e7f5      	b.n	80079e8 <__kernel_rem_pio2+0x300>
 80079fc:	f3af 8000 	nop.w
	...
 8007a0c:	3ff00000 	.word	0x3ff00000
 8007a10:	0800c9b0 	.word	0x0800c9b0
 8007a14:	40200000 	.word	0x40200000
 8007a18:	3ff00000 	.word	0x3ff00000
 8007a1c:	3e700000 	.word	0x3e700000
 8007a20:	41700000 	.word	0x41700000
 8007a24:	3fe00000 	.word	0x3fe00000
 8007a28:	0800c970 	.word	0x0800c970
 8007a2c:	1e62      	subs	r2, r4, #1
 8007a2e:	ab0e      	add	r3, sp, #56	; 0x38
 8007a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a38:	a90e      	add	r1, sp, #56	; 0x38
 8007a3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a3e:	e739      	b.n	80078b4 <__kernel_rem_pio2+0x1cc>
 8007a40:	1e62      	subs	r2, r4, #1
 8007a42:	ab0e      	add	r3, sp, #56	; 0x38
 8007a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a4c:	e7f4      	b.n	8007a38 <__kernel_rem_pio2+0x350>
 8007a4e:	a90e      	add	r1, sp, #56	; 0x38
 8007a50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	430a      	orrs	r2, r1
 8007a58:	e789      	b.n	800796e <__kernel_rem_pio2+0x286>
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d0fa      	beq.n	8007a5a <__kernel_rem_pio2+0x372>
 8007a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a66:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007a6a:	446a      	add	r2, sp
 8007a6c:	3a98      	subs	r2, #152	; 0x98
 8007a6e:	920a      	str	r2, [sp, #40]	; 0x28
 8007a70:	9a08      	ldr	r2, [sp, #32]
 8007a72:	18e3      	adds	r3, r4, r3
 8007a74:	18a5      	adds	r5, r4, r2
 8007a76:	aa22      	add	r2, sp, #136	; 0x88
 8007a78:	f104 0801 	add.w	r8, r4, #1
 8007a7c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	4543      	cmp	r3, r8
 8007a86:	da04      	bge.n	8007a92 <__kernel_rem_pio2+0x3aa>
 8007a88:	461c      	mov	r4, r3
 8007a8a:	e6a3      	b.n	80077d4 <__kernel_rem_pio2+0xec>
 8007a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7e4      	b.n	8007a5c <__kernel_rem_pio2+0x374>
 8007a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007a98:	f7f8 fd5c 	bl	8000554 <__aeabi_i2d>
 8007a9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa2:	46ab      	mov	fp, r5
 8007aa4:	461c      	mov	r4, r3
 8007aa6:	f04f 0900 	mov.w	r9, #0
 8007aaa:	2600      	movs	r6, #0
 8007aac:	2700      	movs	r7, #0
 8007aae:	9b06      	ldr	r3, [sp, #24]
 8007ab0:	4599      	cmp	r9, r3
 8007ab2:	dd06      	ble.n	8007ac2 <__kernel_rem_pio2+0x3da>
 8007ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007aba:	f108 0801 	add.w	r8, r8, #1
 8007abe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ac0:	e7df      	b.n	8007a82 <__kernel_rem_pio2+0x39a>
 8007ac2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007ac6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007aca:	f7f8 fdad 	bl	8000628 <__aeabi_dmul>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	f7f8 fbf1 	bl	80002bc <__adddf3>
 8007ada:	f109 0901 	add.w	r9, r9, #1
 8007ade:	4606      	mov	r6, r0
 8007ae0:	460f      	mov	r7, r1
 8007ae2:	e7e4      	b.n	8007aae <__kernel_rem_pio2+0x3c6>
 8007ae4:	3d01      	subs	r5, #1
 8007ae6:	e748      	b.n	800797a <__kernel_rem_pio2+0x292>
 8007ae8:	ec47 6b10 	vmov	d0, r6, r7
 8007aec:	f1ca 0000 	rsb	r0, sl, #0
 8007af0:	f000 fa92 	bl	8008018 <scalbn>
 8007af4:	ec57 6b10 	vmov	r6, r7, d0
 8007af8:	4ba0      	ldr	r3, [pc, #640]	; (8007d7c <__kernel_rem_pio2+0x694>)
 8007afa:	ee10 0a10 	vmov	r0, s0
 8007afe:	2200      	movs	r2, #0
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f9 f817 	bl	8000b34 <__aeabi_dcmpge>
 8007b06:	b1f8      	cbz	r0, 8007b48 <__kernel_rem_pio2+0x460>
 8007b08:	4b9d      	ldr	r3, [pc, #628]	; (8007d80 <__kernel_rem_pio2+0x698>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	f7f8 fd8a 	bl	8000628 <__aeabi_dmul>
 8007b14:	f7f9 f822 	bl	8000b5c <__aeabi_d2iz>
 8007b18:	4680      	mov	r8, r0
 8007b1a:	f7f8 fd1b 	bl	8000554 <__aeabi_i2d>
 8007b1e:	4b97      	ldr	r3, [pc, #604]	; (8007d7c <__kernel_rem_pio2+0x694>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	f7f8 fd81 	bl	8000628 <__aeabi_dmul>
 8007b26:	460b      	mov	r3, r1
 8007b28:	4602      	mov	r2, r0
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7f8 fbc3 	bl	80002b8 <__aeabi_dsub>
 8007b32:	f7f9 f813 	bl	8000b5c <__aeabi_d2iz>
 8007b36:	1c65      	adds	r5, r4, #1
 8007b38:	ab0e      	add	r3, sp, #56	; 0x38
 8007b3a:	f10a 0a18 	add.w	sl, sl, #24
 8007b3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007b46:	e720      	b.n	800798a <__kernel_rem_pio2+0x2a2>
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f9 f806 	bl	8000b5c <__aeabi_d2iz>
 8007b50:	ab0e      	add	r3, sp, #56	; 0x38
 8007b52:	4625      	mov	r5, r4
 8007b54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b58:	e717      	b.n	800798a <__kernel_rem_pio2+0x2a2>
 8007b5a:	ab0e      	add	r3, sp, #56	; 0x38
 8007b5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007b60:	f7f8 fcf8 	bl	8000554 <__aeabi_i2d>
 8007b64:	4632      	mov	r2, r6
 8007b66:	463b      	mov	r3, r7
 8007b68:	f7f8 fd5e 	bl	8000628 <__aeabi_dmul>
 8007b6c:	4b84      	ldr	r3, [pc, #528]	; (8007d80 <__kernel_rem_pio2+0x698>)
 8007b6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007b72:	2200      	movs	r2, #0
 8007b74:	4630      	mov	r0, r6
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7f8 fd56 	bl	8000628 <__aeabi_dmul>
 8007b7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b80:	4606      	mov	r6, r0
 8007b82:	460f      	mov	r7, r1
 8007b84:	e70f      	b.n	80079a6 <__kernel_rem_pio2+0x2be>
 8007b86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007b8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007b8e:	f7f8 fd4b 	bl	8000628 <__aeabi_dmul>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b9a:	f7f8 fb8f 	bl	80002bc <__adddf3>
 8007b9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ba2:	f108 0801 	add.w	r8, r8, #1
 8007ba6:	9b02      	ldr	r3, [sp, #8]
 8007ba8:	4598      	cmp	r8, r3
 8007baa:	dc01      	bgt.n	8007bb0 <__kernel_rem_pio2+0x4c8>
 8007bac:	45b8      	cmp	r8, r7
 8007bae:	ddea      	ble.n	8007b86 <__kernel_rem_pio2+0x49e>
 8007bb0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007bb4:	ab4a      	add	r3, sp, #296	; 0x128
 8007bb6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007bba:	ed87 7b00 	vstr	d7, [r7]
 8007bbe:	3e01      	subs	r6, #1
 8007bc0:	e6f8      	b.n	80079b4 <__kernel_rem_pio2+0x2cc>
 8007bc2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	dc0b      	bgt.n	8007be0 <__kernel_rem_pio2+0x4f8>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dc35      	bgt.n	8007c38 <__kernel_rem_pio2+0x550>
 8007bcc:	d059      	beq.n	8007c82 <__kernel_rem_pio2+0x59a>
 8007bce:	9b04      	ldr	r3, [sp, #16]
 8007bd0:	f003 0007 	and.w	r0, r3, #7
 8007bd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007bd8:	ecbd 8b02 	vpop	{d8}
 8007bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d1f3      	bne.n	8007bce <__kernel_rem_pio2+0x4e6>
 8007be6:	ab4a      	add	r3, sp, #296	; 0x128
 8007be8:	4423      	add	r3, r4
 8007bea:	9306      	str	r3, [sp, #24]
 8007bec:	461c      	mov	r4, r3
 8007bee:	469a      	mov	sl, r3
 8007bf0:	9502      	str	r5, [sp, #8]
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f1aa 0a08 	sub.w	sl, sl, #8
 8007bfa:	dc6b      	bgt.n	8007cd4 <__kernel_rem_pio2+0x5ec>
 8007bfc:	46aa      	mov	sl, r5
 8007bfe:	f1ba 0f01 	cmp.w	sl, #1
 8007c02:	f1a4 0408 	sub.w	r4, r4, #8
 8007c06:	f300 8085 	bgt.w	8007d14 <__kernel_rem_pio2+0x62c>
 8007c0a:	9c06      	ldr	r4, [sp, #24]
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	3408      	adds	r4, #8
 8007c10:	2100      	movs	r1, #0
 8007c12:	2d01      	cmp	r5, #1
 8007c14:	f300 809d 	bgt.w	8007d52 <__kernel_rem_pio2+0x66a>
 8007c18:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007c1c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007c20:	f1bb 0f00 	cmp.w	fp, #0
 8007c24:	f040 809b 	bne.w	8007d5e <__kernel_rem_pio2+0x676>
 8007c28:	9b01      	ldr	r3, [sp, #4]
 8007c2a:	e9c3 5600 	strd	r5, r6, [r3]
 8007c2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007c32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007c36:	e7ca      	b.n	8007bce <__kernel_rem_pio2+0x4e6>
 8007c38:	3408      	adds	r4, #8
 8007c3a:	ab4a      	add	r3, sp, #296	; 0x128
 8007c3c:	441c      	add	r4, r3
 8007c3e:	462e      	mov	r6, r5
 8007c40:	2000      	movs	r0, #0
 8007c42:	2100      	movs	r1, #0
 8007c44:	2e00      	cmp	r6, #0
 8007c46:	da36      	bge.n	8007cb6 <__kernel_rem_pio2+0x5ce>
 8007c48:	f1bb 0f00 	cmp.w	fp, #0
 8007c4c:	d039      	beq.n	8007cc2 <__kernel_rem_pio2+0x5da>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c54:	9c01      	ldr	r4, [sp, #4]
 8007c56:	e9c4 2300 	strd	r2, r3, [r4]
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007c62:	f7f8 fb29 	bl	80002b8 <__aeabi_dsub>
 8007c66:	ae4c      	add	r6, sp, #304	; 0x130
 8007c68:	2401      	movs	r4, #1
 8007c6a:	42a5      	cmp	r5, r4
 8007c6c:	da2c      	bge.n	8007cc8 <__kernel_rem_pio2+0x5e0>
 8007c6e:	f1bb 0f00 	cmp.w	fp, #0
 8007c72:	d002      	beq.n	8007c7a <__kernel_rem_pio2+0x592>
 8007c74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c78:	4619      	mov	r1, r3
 8007c7a:	9b01      	ldr	r3, [sp, #4]
 8007c7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007c80:	e7a5      	b.n	8007bce <__kernel_rem_pio2+0x4e6>
 8007c82:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007c86:	eb0d 0403 	add.w	r4, sp, r3
 8007c8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007c8e:	2000      	movs	r0, #0
 8007c90:	2100      	movs	r1, #0
 8007c92:	2d00      	cmp	r5, #0
 8007c94:	da09      	bge.n	8007caa <__kernel_rem_pio2+0x5c2>
 8007c96:	f1bb 0f00 	cmp.w	fp, #0
 8007c9a:	d002      	beq.n	8007ca2 <__kernel_rem_pio2+0x5ba>
 8007c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	9b01      	ldr	r3, [sp, #4]
 8007ca4:	e9c3 0100 	strd	r0, r1, [r3]
 8007ca8:	e791      	b.n	8007bce <__kernel_rem_pio2+0x4e6>
 8007caa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007cae:	f7f8 fb05 	bl	80002bc <__adddf3>
 8007cb2:	3d01      	subs	r5, #1
 8007cb4:	e7ed      	b.n	8007c92 <__kernel_rem_pio2+0x5aa>
 8007cb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007cba:	f7f8 faff 	bl	80002bc <__adddf3>
 8007cbe:	3e01      	subs	r6, #1
 8007cc0:	e7c0      	b.n	8007c44 <__kernel_rem_pio2+0x55c>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	e7c5      	b.n	8007c54 <__kernel_rem_pio2+0x56c>
 8007cc8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007ccc:	f7f8 faf6 	bl	80002bc <__adddf3>
 8007cd0:	3401      	adds	r4, #1
 8007cd2:	e7ca      	b.n	8007c6a <__kernel_rem_pio2+0x582>
 8007cd4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007cd8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	9302      	str	r3, [sp, #8]
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fae7 	bl	80002bc <__adddf3>
 8007cee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	f7f8 fadd 	bl	80002b8 <__aeabi_dsub>
 8007cfe:	4632      	mov	r2, r6
 8007d00:	463b      	mov	r3, r7
 8007d02:	f7f8 fadb 	bl	80002bc <__adddf3>
 8007d06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007d0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d0e:	ed8a 7b00 	vstr	d7, [sl]
 8007d12:	e76e      	b.n	8007bf2 <__kernel_rem_pio2+0x50a>
 8007d14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007d18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4632      	mov	r2, r6
 8007d20:	463b      	mov	r3, r7
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 faca 	bl	80002bc <__adddf3>
 8007d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4640      	mov	r0, r8
 8007d32:	4649      	mov	r1, r9
 8007d34:	f7f8 fac0 	bl	80002b8 <__aeabi_dsub>
 8007d38:	4632      	mov	r2, r6
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	f7f8 fabe 	bl	80002bc <__adddf3>
 8007d40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d48:	ed84 7b00 	vstr	d7, [r4]
 8007d4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d50:	e755      	b.n	8007bfe <__kernel_rem_pio2+0x516>
 8007d52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d56:	f7f8 fab1 	bl	80002bc <__adddf3>
 8007d5a:	3d01      	subs	r5, #1
 8007d5c:	e759      	b.n	8007c12 <__kernel_rem_pio2+0x52a>
 8007d5e:	9b01      	ldr	r3, [sp, #4]
 8007d60:	9a01      	ldr	r2, [sp, #4]
 8007d62:	601d      	str	r5, [r3, #0]
 8007d64:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007d68:	605c      	str	r4, [r3, #4]
 8007d6a:	609f      	str	r7, [r3, #8]
 8007d6c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007d70:	60d3      	str	r3, [r2, #12]
 8007d72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d76:	6110      	str	r0, [r2, #16]
 8007d78:	6153      	str	r3, [r2, #20]
 8007d7a:	e728      	b.n	8007bce <__kernel_rem_pio2+0x4e6>
 8007d7c:	41700000 	.word	0x41700000
 8007d80:	3e700000 	.word	0x3e700000
 8007d84:	00000000 	.word	0x00000000

08007d88 <__kernel_sin>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	ed2d 8b04 	vpush	{d8-d9}
 8007d90:	eeb0 8a41 	vmov.f32	s16, s2
 8007d94:	eef0 8a61 	vmov.f32	s17, s3
 8007d98:	ec55 4b10 	vmov	r4, r5, d0
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007da2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007da6:	9001      	str	r0, [sp, #4]
 8007da8:	da06      	bge.n	8007db8 <__kernel_sin+0x30>
 8007daa:	ee10 0a10 	vmov	r0, s0
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7f8 fed4 	bl	8000b5c <__aeabi_d2iz>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d051      	beq.n	8007e5c <__kernel_sin+0xd4>
 8007db8:	4622      	mov	r2, r4
 8007dba:	462b      	mov	r3, r5
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	f7f8 fc32 	bl	8000628 <__aeabi_dmul>
 8007dc4:	4682      	mov	sl, r0
 8007dc6:	468b      	mov	fp, r1
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7f8 fc2a 	bl	8000628 <__aeabi_dmul>
 8007dd4:	a341      	add	r3, pc, #260	; (adr r3, 8007edc <__kernel_sin+0x154>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	4680      	mov	r8, r0
 8007ddc:	4689      	mov	r9, r1
 8007dde:	4650      	mov	r0, sl
 8007de0:	4659      	mov	r1, fp
 8007de2:	f7f8 fc21 	bl	8000628 <__aeabi_dmul>
 8007de6:	a33f      	add	r3, pc, #252	; (adr r3, 8007ee4 <__kernel_sin+0x15c>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fa64 	bl	80002b8 <__aeabi_dsub>
 8007df0:	4652      	mov	r2, sl
 8007df2:	465b      	mov	r3, fp
 8007df4:	f7f8 fc18 	bl	8000628 <__aeabi_dmul>
 8007df8:	a33c      	add	r3, pc, #240	; (adr r3, 8007eec <__kernel_sin+0x164>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fa5d 	bl	80002bc <__adddf3>
 8007e02:	4652      	mov	r2, sl
 8007e04:	465b      	mov	r3, fp
 8007e06:	f7f8 fc0f 	bl	8000628 <__aeabi_dmul>
 8007e0a:	a33a      	add	r3, pc, #232	; (adr r3, 8007ef4 <__kernel_sin+0x16c>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fa52 	bl	80002b8 <__aeabi_dsub>
 8007e14:	4652      	mov	r2, sl
 8007e16:	465b      	mov	r3, fp
 8007e18:	f7f8 fc06 	bl	8000628 <__aeabi_dmul>
 8007e1c:	a337      	add	r3, pc, #220	; (adr r3, 8007efc <__kernel_sin+0x174>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f7f8 fa4b 	bl	80002bc <__adddf3>
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	4606      	mov	r6, r0
 8007e2a:	460f      	mov	r7, r1
 8007e2c:	b9eb      	cbnz	r3, 8007e6a <__kernel_sin+0xe2>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4650      	mov	r0, sl
 8007e34:	4659      	mov	r1, fp
 8007e36:	f7f8 fbf7 	bl	8000628 <__aeabi_dmul>
 8007e3a:	a325      	add	r3, pc, #148	; (adr r3, 8007ed0 <__kernel_sin+0x148>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f7f8 fa3a 	bl	80002b8 <__aeabi_dsub>
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	f7f8 fbee 	bl	8000628 <__aeabi_dmul>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4620      	mov	r0, r4
 8007e52:	4629      	mov	r1, r5
 8007e54:	f7f8 fa32 	bl	80002bc <__adddf3>
 8007e58:	4604      	mov	r4, r0
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	ec45 4b10 	vmov	d0, r4, r5
 8007e60:	b003      	add	sp, #12
 8007e62:	ecbd 8b04 	vpop	{d8-d9}
 8007e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ed8 <__kernel_sin+0x150>)
 8007e6c:	ec51 0b18 	vmov	r0, r1, d8
 8007e70:	2200      	movs	r2, #0
 8007e72:	f7f8 fbd9 	bl	8000628 <__aeabi_dmul>
 8007e76:	4632      	mov	r2, r6
 8007e78:	ec41 0b19 	vmov	d9, r0, r1
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 fbd1 	bl	8000628 <__aeabi_dmul>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	ec51 0b19 	vmov	r0, r1, d9
 8007e8e:	f7f8 fa13 	bl	80002b8 <__aeabi_dsub>
 8007e92:	4652      	mov	r2, sl
 8007e94:	465b      	mov	r3, fp
 8007e96:	f7f8 fbc7 	bl	8000628 <__aeabi_dmul>
 8007e9a:	ec53 2b18 	vmov	r2, r3, d8
 8007e9e:	f7f8 fa0b 	bl	80002b8 <__aeabi_dsub>
 8007ea2:	a30b      	add	r3, pc, #44	; (adr r3, 8007ed0 <__kernel_sin+0x148>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	460f      	mov	r7, r1
 8007eac:	4640      	mov	r0, r8
 8007eae:	4649      	mov	r1, r9
 8007eb0:	f7f8 fbba 	bl	8000628 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	f7f8 f9fe 	bl	80002bc <__adddf3>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 f9f6 	bl	80002b8 <__aeabi_dsub>
 8007ecc:	e7c4      	b.n	8007e58 <__kernel_sin+0xd0>
 8007ece:	bf00      	nop
 8007ed0:	55555549 	.word	0x55555549
 8007ed4:	3fc55555 	.word	0x3fc55555
 8007ed8:	3fe00000 	.word	0x3fe00000
 8007edc:	5acfd57c 	.word	0x5acfd57c
 8007ee0:	3de5d93a 	.word	0x3de5d93a
 8007ee4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ee8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007eec:	57b1fe7d 	.word	0x57b1fe7d
 8007ef0:	3ec71de3 	.word	0x3ec71de3
 8007ef4:	19c161d5 	.word	0x19c161d5
 8007ef8:	3f2a01a0 	.word	0x3f2a01a0
 8007efc:	1110f8a6 	.word	0x1110f8a6
 8007f00:	3f811111 	.word	0x3f811111

08007f04 <fabs>:
 8007f04:	ec51 0b10 	vmov	r0, r1, d0
 8007f08:	ee10 2a10 	vmov	r2, s0
 8007f0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f10:	ec43 2b10 	vmov	d0, r2, r3
 8007f14:	4770      	bx	lr
	...

08007f18 <floor>:
 8007f18:	ec51 0b10 	vmov	r0, r1, d0
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007f24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007f28:	2e13      	cmp	r6, #19
 8007f2a:	ee10 5a10 	vmov	r5, s0
 8007f2e:	ee10 8a10 	vmov	r8, s0
 8007f32:	460c      	mov	r4, r1
 8007f34:	dc32      	bgt.n	8007f9c <floor+0x84>
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	da14      	bge.n	8007f64 <floor+0x4c>
 8007f3a:	a333      	add	r3, pc, #204	; (adr r3, 8008008 <floor+0xf0>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f7f8 f9bc 	bl	80002bc <__adddf3>
 8007f44:	2200      	movs	r2, #0
 8007f46:	2300      	movs	r3, #0
 8007f48:	f7f8 fdfe 	bl	8000b48 <__aeabi_dcmpgt>
 8007f4c:	b138      	cbz	r0, 8007f5e <floor+0x46>
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	da57      	bge.n	8008002 <floor+0xea>
 8007f52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f56:	431d      	orrs	r5, r3
 8007f58:	d001      	beq.n	8007f5e <floor+0x46>
 8007f5a:	4c2d      	ldr	r4, [pc, #180]	; (8008010 <floor+0xf8>)
 8007f5c:	2500      	movs	r5, #0
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4628      	mov	r0, r5
 8007f62:	e025      	b.n	8007fb0 <floor+0x98>
 8007f64:	4f2b      	ldr	r7, [pc, #172]	; (8008014 <floor+0xfc>)
 8007f66:	4137      	asrs	r7, r6
 8007f68:	ea01 0307 	and.w	r3, r1, r7
 8007f6c:	4303      	orrs	r3, r0
 8007f6e:	d01f      	beq.n	8007fb0 <floor+0x98>
 8007f70:	a325      	add	r3, pc, #148	; (adr r3, 8008008 <floor+0xf0>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 f9a1 	bl	80002bc <__adddf3>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f7f8 fde3 	bl	8000b48 <__aeabi_dcmpgt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d0eb      	beq.n	8007f5e <floor+0x46>
 8007f86:	2c00      	cmp	r4, #0
 8007f88:	bfbe      	ittt	lt
 8007f8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f8e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007f92:	19a4      	addlt	r4, r4, r6
 8007f94:	ea24 0407 	bic.w	r4, r4, r7
 8007f98:	2500      	movs	r5, #0
 8007f9a:	e7e0      	b.n	8007f5e <floor+0x46>
 8007f9c:	2e33      	cmp	r6, #51	; 0x33
 8007f9e:	dd0b      	ble.n	8007fb8 <floor+0xa0>
 8007fa0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007fa4:	d104      	bne.n	8007fb0 <floor+0x98>
 8007fa6:	ee10 2a10 	vmov	r2, s0
 8007faa:	460b      	mov	r3, r1
 8007fac:	f7f8 f986 	bl	80002bc <__adddf3>
 8007fb0:	ec41 0b10 	vmov	d0, r0, r1
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc0:	fa23 f707 	lsr.w	r7, r3, r7
 8007fc4:	4207      	tst	r7, r0
 8007fc6:	d0f3      	beq.n	8007fb0 <floor+0x98>
 8007fc8:	a30f      	add	r3, pc, #60	; (adr r3, 8008008 <floor+0xf0>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f7f8 f975 	bl	80002bc <__adddf3>
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f7f8 fdb7 	bl	8000b48 <__aeabi_dcmpgt>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d0bf      	beq.n	8007f5e <floor+0x46>
 8007fde:	2c00      	cmp	r4, #0
 8007fe0:	da02      	bge.n	8007fe8 <floor+0xd0>
 8007fe2:	2e14      	cmp	r6, #20
 8007fe4:	d103      	bne.n	8007fee <floor+0xd6>
 8007fe6:	3401      	adds	r4, #1
 8007fe8:	ea25 0507 	bic.w	r5, r5, r7
 8007fec:	e7b7      	b.n	8007f5e <floor+0x46>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007ff4:	fa03 f606 	lsl.w	r6, r3, r6
 8007ff8:	4435      	add	r5, r6
 8007ffa:	4545      	cmp	r5, r8
 8007ffc:	bf38      	it	cc
 8007ffe:	18e4      	addcc	r4, r4, r3
 8008000:	e7f2      	b.n	8007fe8 <floor+0xd0>
 8008002:	2500      	movs	r5, #0
 8008004:	462c      	mov	r4, r5
 8008006:	e7aa      	b.n	8007f5e <floor+0x46>
 8008008:	8800759c 	.word	0x8800759c
 800800c:	7e37e43c 	.word	0x7e37e43c
 8008010:	bff00000 	.word	0xbff00000
 8008014:	000fffff 	.word	0x000fffff

08008018 <scalbn>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	ec55 4b10 	vmov	r4, r5, d0
 800801e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008022:	4606      	mov	r6, r0
 8008024:	462b      	mov	r3, r5
 8008026:	b99a      	cbnz	r2, 8008050 <scalbn+0x38>
 8008028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800802c:	4323      	orrs	r3, r4
 800802e:	d036      	beq.n	800809e <scalbn+0x86>
 8008030:	4b39      	ldr	r3, [pc, #228]	; (8008118 <scalbn+0x100>)
 8008032:	4629      	mov	r1, r5
 8008034:	ee10 0a10 	vmov	r0, s0
 8008038:	2200      	movs	r2, #0
 800803a:	f7f8 faf5 	bl	8000628 <__aeabi_dmul>
 800803e:	4b37      	ldr	r3, [pc, #220]	; (800811c <scalbn+0x104>)
 8008040:	429e      	cmp	r6, r3
 8008042:	4604      	mov	r4, r0
 8008044:	460d      	mov	r5, r1
 8008046:	da10      	bge.n	800806a <scalbn+0x52>
 8008048:	a32b      	add	r3, pc, #172	; (adr r3, 80080f8 <scalbn+0xe0>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	e03a      	b.n	80080c6 <scalbn+0xae>
 8008050:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008054:	428a      	cmp	r2, r1
 8008056:	d10c      	bne.n	8008072 <scalbn+0x5a>
 8008058:	ee10 2a10 	vmov	r2, s0
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	f7f8 f92c 	bl	80002bc <__adddf3>
 8008064:	4604      	mov	r4, r0
 8008066:	460d      	mov	r5, r1
 8008068:	e019      	b.n	800809e <scalbn+0x86>
 800806a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800806e:	460b      	mov	r3, r1
 8008070:	3a36      	subs	r2, #54	; 0x36
 8008072:	4432      	add	r2, r6
 8008074:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008078:	428a      	cmp	r2, r1
 800807a:	dd08      	ble.n	800808e <scalbn+0x76>
 800807c:	2d00      	cmp	r5, #0
 800807e:	a120      	add	r1, pc, #128	; (adr r1, 8008100 <scalbn+0xe8>)
 8008080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008084:	da1c      	bge.n	80080c0 <scalbn+0xa8>
 8008086:	a120      	add	r1, pc, #128	; (adr r1, 8008108 <scalbn+0xf0>)
 8008088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800808c:	e018      	b.n	80080c0 <scalbn+0xa8>
 800808e:	2a00      	cmp	r2, #0
 8008090:	dd08      	ble.n	80080a4 <scalbn+0x8c>
 8008092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800809a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800809e:	ec45 4b10 	vmov	d0, r4, r5
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80080a8:	da19      	bge.n	80080de <scalbn+0xc6>
 80080aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80080ae:	429e      	cmp	r6, r3
 80080b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80080b4:	dd0a      	ble.n	80080cc <scalbn+0xb4>
 80080b6:	a112      	add	r1, pc, #72	; (adr r1, 8008100 <scalbn+0xe8>)
 80080b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e2      	bne.n	8008086 <scalbn+0x6e>
 80080c0:	a30f      	add	r3, pc, #60	; (adr r3, 8008100 <scalbn+0xe8>)
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 faaf 	bl	8000628 <__aeabi_dmul>
 80080ca:	e7cb      	b.n	8008064 <scalbn+0x4c>
 80080cc:	a10a      	add	r1, pc, #40	; (adr r1, 80080f8 <scalbn+0xe0>)
 80080ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0b8      	beq.n	8008048 <scalbn+0x30>
 80080d6:	a10e      	add	r1, pc, #56	; (adr r1, 8008110 <scalbn+0xf8>)
 80080d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080dc:	e7b4      	b.n	8008048 <scalbn+0x30>
 80080de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080e2:	3236      	adds	r2, #54	; 0x36
 80080e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80080ec:	4620      	mov	r0, r4
 80080ee:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <scalbn+0x108>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	e7e8      	b.n	80080c6 <scalbn+0xae>
 80080f4:	f3af 8000 	nop.w
 80080f8:	c2f8f359 	.word	0xc2f8f359
 80080fc:	01a56e1f 	.word	0x01a56e1f
 8008100:	8800759c 	.word	0x8800759c
 8008104:	7e37e43c 	.word	0x7e37e43c
 8008108:	8800759c 	.word	0x8800759c
 800810c:	fe37e43c 	.word	0xfe37e43c
 8008110:	c2f8f359 	.word	0xc2f8f359
 8008114:	81a56e1f 	.word	0x81a56e1f
 8008118:	43500000 	.word	0x43500000
 800811c:	ffff3cb0 	.word	0xffff3cb0
 8008120:	3c900000 	.word	0x3c900000

08008124 <_init>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	bf00      	nop
 8008128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812a:	bc08      	pop	{r3}
 800812c:	469e      	mov	lr, r3
 800812e:	4770      	bx	lr

08008130 <_fini>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr
